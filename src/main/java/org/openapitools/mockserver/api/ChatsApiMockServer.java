/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class ChatsApiMockServer {

    public static MappingBuilder stubCreateChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String createChat200ResponseSample1() {
        return "{ \"result\" : { \"chatId\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String createChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String createChatRequestSample1() {
        return "{ \"orderId\" : 0 }";
    }


    public static MappingBuilder stubGetChatHistory200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistoryFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getChatHistory200ResponseSample1() {
        return "{ \"result\" : { \"orderId\" : 0, \"messages\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getChatHistory400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getChatHistoryRequestSample1() {
        return "{ \"messageIdFrom\" : 0 }";
    }


    public static MappingBuilder stubGetChats200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getChats200ResponseSample1() {
        return "{ \"result\" : { \"chats\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getChats400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getChatsRequestSample1() {
        return "{ \"types\" : [ \"CHAT\", \"CHAT\" ], \"statuses\" : [ \"NEW\", \"NEW\" ], \"orderIds\" : [ 0, 0 ] }";
    }


    public static MappingBuilder stubSendFileToChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static String sendFileToChat200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String sendFileToChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSendMessageToChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static String sendMessageToChat200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String sendMessageToChatRequestSample1() {
        return "{ \"message\" : \"message\" }";
    }


}
