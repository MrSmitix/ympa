/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class OffersApiMockServer {

    public static MappingBuilder stubDeleteCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String deleteCampaignOffers200ResponseSample1() {
        return "{ \"result\" : { \"notDeletedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteCampaignOffersRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetAllOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    public static MappingBuilder stubGetAllOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    public static String getAllOffers200ResponseSample1() {
        return "{ \"offers\" : [ { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 }, { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 } ] }";
    }
    public static String getAllOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getCampaignOffers200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"campaignPrice\" : { \"vat\" : 5, \"discountBase\" : 5.962133916683182, \"currencyId\" : \"RUR\", \"value\" : 1.4658129805029452, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"available\" : true, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 }, \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"status\" : \"PUBLISHED\" }, { \"campaignPrice\" : { \"vat\" : 5, \"discountBase\" : 5.962133916683182, \"currencyId\" : \"RUR\", \"value\" : 1.4658129805029452, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"available\" : true, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 }, \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"status\" : \"PUBLISHED\" } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getCampaignOffersRequestSample1() {
        return "{ \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"statuses\" : [ \"PUBLISHED\", \"PUBLISHED\" ], \"offerIds\" : [ null, null, null, null, null ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    public static MappingBuilder stubGetOfferRecommendations200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendationsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferRecommendations200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerRecommendations\" : [ { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } }, { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } } ] }, \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOfferRecommendationsRequestSample1() {
        return "{ \"cofinancePriceFilter\" : \"SPECIFIED\", \"competitivenessFilter\" : \"OPTIMAL\", \"offerIds\" : [ null, null ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String getOffers200ResponseSample1() {
        return "{ \"offers\" : [ { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 }, { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 } ], \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String getOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubUpdateCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateCampaignOffers200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateCampaignOffersRequestSample1() {
        return "{ \"offers\" : [ { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } } ] }";
    }


}
