/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class FbsApiMockServer {

    public static MappingBuilder stubAddHiddenOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubAddHiddenOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String addHiddenOffers200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers423ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addHiddenOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String addHiddenOffersRequestSample1() {
        return "{ \"hiddenOffers\" : [ { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" } ] }";
    }


    public static MappingBuilder stubAddOffersToArchive200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchiveFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String addOffersToArchive200ResponseSample1() {
        return "{ \"result\" : { \"notArchivedOffers\" : [ { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" }, { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" } ] }, \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String addOffersToArchiveRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubCalculateTariffs200(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs400(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs401(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs403(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs404(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs420(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffs500(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubCalculateTariffsFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/tariffs/calculate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String calculateTariffs200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"offer\" : { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, \"tariffs\" : [ { \"amount\" : 9.301444243932576, \"type\" : \"AGENCY_COMMISSION\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"amount\" : 9.301444243932576, \"type\" : \"AGENCY_COMMISSION\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ] }, { \"offer\" : { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, \"tariffs\" : [ { \"amount\" : 9.301444243932576, \"type\" : \"AGENCY_COMMISSION\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"amount\" : 9.301444243932576, \"type\" : \"AGENCY_COMMISSION\", \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ] } ] }, \"status\" : \"OK\" }";
    }
    public static String calculateTariffs400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String calculateTariffs401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String calculateTariffs403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String calculateTariffs404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String calculateTariffs420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String calculateTariffs500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String calculateTariffsRequestSample1() {
        return "{ \"offers\" : [ { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 }, { \"quantity\" : 1, \"price\" : 0.6027456183070403, \"length\" : 0.14658129805029452, \"width\" : 0.5962133916683182, \"weight\" : 0.23021358869347652, \"categoryId\" : 0, \"height\" : 0.5637376656633328 } ], \"parameters\" : { \"campaignId\" : 0, \"sellingProgram\" : \"FBY\", \"frequency\" : \"DAILY\" } }";
    }


    public static MappingBuilder stubConfirmBusinessPrices200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPrices500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubConfirmBusinessPricesFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String confirmBusinessPrices200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmBusinessPrices500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String confirmBusinessPricesRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubConfirmCampaignPrices200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPrices500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubConfirmCampaignPricesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String confirmCampaignPrices200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmCampaignPrices500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String confirmCampaignPricesRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubConfirmShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String confirmShipment200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String confirmShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String confirmShipmentRequestSample1() {
        return "{ \"externalShipmentId\" : \"externalShipmentId\" }";
    }


    public static MappingBuilder stubCreateChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubCreateChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/new"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String createChat200ResponseSample1() {
        return "{ \"result\" : { \"chatId\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String createChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String createChatRequestSample1() {
        return "{ \"orderId\" : 0 }";
    }


    public static MappingBuilder stubDeleteCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String deleteCampaignOffers200ResponseSample1() {
        return "{ \"result\" : { \"notDeletedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteCampaignOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteCampaignOffersRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDeleteGoodsFeedbackComment200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackComment500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteGoodsFeedbackCommentFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deleteGoodsFeedbackComment200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteGoodsFeedbackComment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteGoodsFeedbackCommentRequestSample1() {
        return "{ \"id\" : 0 }";
    }


    public static MappingBuilder stubDeleteHiddenOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubDeleteHiddenOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/hidden-offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String deleteHiddenOffers200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteHiddenOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteHiddenOffersRequestSample1() {
        return "{ \"hiddenOffers\" : [ { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" } ] }";
    }


    public static MappingBuilder stubDeleteOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deleteOffers200ResponseSample1() {
        return "{ \"result\" : { \"notDeletedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteOffersRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDeleteOffersFromArchive200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchiveFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deleteOffersFromArchive200ResponseSample1() {
        return "{ \"result\" : { \"notUnarchivedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteOffersFromArchiveRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDeletePromoOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeletePromoOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deletePromoOffers200ResponseSample1() {
        return "{ \"result\" : { \"rejectedOffers\" : [ { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" }, { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" } ] }, \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deletePromoOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deletePromoOffersRequestSample1() {
        return "{ \"deleteAllOffers\" : true, \"promoId\" : \"promoId\", \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDownloadShipmentAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentDiscrepancyAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentDiscrepancyAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentInboundAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentInboundAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentPalletLabels200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabelsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String downloadShipmentPalletLabels400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentReceptionTransferAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static String downloadShipmentReceptionTransferAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentTransportationWaybill200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybillFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentTransportationWaybill400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGenerateBoostConsolidatedReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateBoostConsolidatedReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/boost-consolidated/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateBoostConsolidatedReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateBoostConsolidatedReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateBoostConsolidatedReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateBoostConsolidatedReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateBoostConsolidatedReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateBoostConsolidatedReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateBoostConsolidatedReportRequestSample1() {
        return "{ \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"dateFrom\" : \"2000-01-23\" }";
    }


    public static MappingBuilder stubGenerateCompetitorsPositionReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateCompetitorsPositionReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/competitors-position/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateCompetitorsPositionReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateCompetitorsPositionReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateCompetitorsPositionReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateCompetitorsPositionReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateCompetitorsPositionReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateCompetitorsPositionReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateCompetitorsPositionReportRequestSample1() {
        return "{ \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"dateFrom\" : \"2000-01-23\", \"categoryId\" : 6 }";
    }


    public static MappingBuilder stubGenerateGoodsFeedbackReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsFeedbackReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-feedback/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateGoodsFeedbackReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateGoodsFeedbackReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsFeedbackReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsFeedbackReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsFeedbackReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsFeedbackReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateGoodsFeedbackReportRequestSample1() {
        return "{ \"businessId\" : 0 }";
    }


    public static MappingBuilder stubGenerateGoodsRealizationReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateGoodsRealizationReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/goods-realization/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateGoodsRealizationReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateGoodsRealizationReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsRealizationReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsRealizationReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsRealizationReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateGoodsRealizationReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateGoodsRealizationReportRequestSample1() {
        return "{ \"month\" : 2, \"year\" : 6, \"campaignId\" : 0 }";
    }


    public static MappingBuilder stubGenerateMassOrderLabelsReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateMassOrderLabelsReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/labels/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateMassOrderLabelsReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateMassOrderLabelsReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateMassOrderLabelsReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateMassOrderLabelsReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateMassOrderLabelsReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateMassOrderLabelsReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateMassOrderLabelsReportRequestSample1() {
        return "{ \"businessId\" : 0, \"orderIds\" : [ 6, 6, 6, 6, 6 ] }";
    }


    public static MappingBuilder stubGenerateOrderLabel200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabelFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateOrderLabel400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGenerateOrderLabels200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabelsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateOrderLabels400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGeneratePricesReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGeneratePricesReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/prices/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generatePricesReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generatePricesReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generatePricesReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generatePricesReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generatePricesReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generatePricesReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generatePricesReportRequestSample1() {
        return "{ \"categoryIds\" : [ 1, 1 ], \"creationDateTo\" : \"2000-01-23\", \"campaignId\" : 6, \"businessId\" : 0, \"creationDateFrom\" : \"2000-01-23\" }";
    }


    public static MappingBuilder stubGenerateShelfsStatisticsReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShelfsStatisticsReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shelf-statistics/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateShelfsStatisticsReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateShelfsStatisticsReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShelfsStatisticsReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShelfsStatisticsReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShelfsStatisticsReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShelfsStatisticsReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateShelfsStatisticsReportRequestSample1() {
        return "{ \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"dateFrom\" : \"2000-01-23\", \"attributionType\" : \"CLICKS\" }";
    }


    public static MappingBuilder stubGenerateShipmentListDocumentReport200(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReport400(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReport401(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReport403(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReport420(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReport500(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGenerateShipmentListDocumentReportFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/documents/shipment-list/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String generateShipmentListDocumentReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateShipmentListDocumentReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShipmentListDocumentReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShipmentListDocumentReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShipmentListDocumentReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShipmentListDocumentReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateShipmentListDocumentReportRequestSample1() {
        return "{ \"campaignId\" : 0, \"shipmentId\" : 6, \"orderIds\" : [ 1, 1 ] }";
    }


    public static MappingBuilder stubGenerateShowsSalesReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateShowsSalesReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/shows-sales/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateShowsSalesReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateShowsSalesReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShowsSalesReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShowsSalesReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShowsSalesReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateShowsSalesReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateShowsSalesReportRequestSample1() {
        return "{ \"campaignId\" : 6, \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"dateFrom\" : \"2000-01-23\", \"grouping\" : \"CATEGORIES\" }";
    }


    public static MappingBuilder stubGenerateStocksOnWarehousesReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateStocksOnWarehousesReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/stocks-on-warehouses/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateStocksOnWarehousesReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateStocksOnWarehousesReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateStocksOnWarehousesReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateStocksOnWarehousesReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateStocksOnWarehousesReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateStocksOnWarehousesReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateStocksOnWarehousesReportRequestSample1() {
        return "{ \"categoryIds\" : [ 1, 1 ], \"hasStocks\" : true, \"reportDate\" : \"2000-01-23\", \"campaignId\" : 0, \"warehouseIds\" : [ 6, 6 ] }";
    }


    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedMarketplaceServicesReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-marketplace-services/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateUnitedMarketplaceServicesReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateUnitedMarketplaceServicesReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedMarketplaceServicesReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedMarketplaceServicesReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedMarketplaceServicesReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedMarketplaceServicesReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateUnitedMarketplaceServicesReportRequestSample1() {
        return "{ \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"yearFrom\" : 6, \"placementPrograms\" : [ \"FBS\", \"FBS\" ], \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"monthFrom\" : 2, \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\", \"inns\" : [ \"inns\", \"inns\" ], \"campaignIds\" : [ 2, 2 ], \"dateFrom\" : \"2000-01-23\", \"monthTo\" : 7, \"yearTo\" : 5 }";
    }


    public static MappingBuilder stubGenerateUnitedNettingReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedNettingReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-netting/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateUnitedNettingReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateUnitedNettingReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedNettingReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedNettingReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedNettingReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedNettingReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateUnitedNettingReportRequestSample1() {
        return "{ \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"bankOrderId\" : 6, \"placementPrograms\" : [ \"FBS\", \"FBS\" ], \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\", \"inns\" : [ \"inns\", \"inns\" ], \"campaignIds\" : [ 1, 1 ], \"dateFrom\" : \"2000-01-23\", \"bankOrderDateTime\" : \"2000-01-23T04:56:07.000+00:00\" }";
    }


    public static MappingBuilder stubGenerateUnitedOrdersReport200(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReport400(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReport401(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReport403(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReport420(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReport500(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateUnitedOrdersReportFault(@javax.annotation.Nonnull String body, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/reports/united-orders/generate"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateUnitedOrdersReport200ResponseSample1() {
        return "{ \"result\" : { \"reportId\" : \"reportId\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String generateUnitedOrdersReport400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedOrdersReport401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedOrdersReport403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedOrdersReport420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateUnitedOrdersReport500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String generateUnitedOrdersReportRequestSample1() {
        return "{ \"businessId\" : 0, \"dateTo\" : \"2000-01-23\", \"campaignIds\" : [ 6, 6 ], \"promoId\" : \"promoId\", \"dateFrom\" : \"2000-01-23\" }";
    }


    @Deprecated
    public static MappingBuilder stubGetAllOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetAllOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    public static MappingBuilder stubGetAllOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String chunk, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers/all"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(chunk != null) {
            stub = stub.withQueryParam("chunk", equalTo(chunk));
        }

        return stub;
    }

    public static String getAllOffers200ResponseSample1() {
        return "{ \"offers\" : [ { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 }, { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 } ] }";
    }
    public static String getAllOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getAllOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetBidsInfoForBusiness200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusiness500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBidsInfoForBusinessFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getBidsInfoForBusiness200ResponseSample1() {
        return "{ \"result\" : { \"bids\" : [ { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsInfoForBusiness500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getBidsInfoForBusinessRequestSample1() {
        return "{ \"skus\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubGetBidsRecommendations200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendations500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBidsRecommendationsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/bids/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getBidsRecommendations200ResponseSample1() {
        return "{ \"result\" : { \"recommendations\" : [ { \"bidRecommendations\" : [ { \"showPercent\" : 8, \"bid\" : 570 }, { \"showPercent\" : 8, \"bid\" : 570 } ], \"priceRecommendations\" : [ { \"campaignId\" : 6, \"price\" : 1.1465812980502945 }, { \"campaignId\" : 6, \"price\" : 1.1465812980502945 } ], \"sku\" : \"sku\", \"bid\" : 570 }, { \"bidRecommendations\" : [ { \"showPercent\" : 8, \"bid\" : 570 }, { \"showPercent\" : 8, \"bid\" : 570 } ], \"priceRecommendations\" : [ { \"campaignId\" : 6, \"price\" : 1.1465812980502945 }, { \"campaignId\" : 6, \"price\" : 1.1465812980502945 } ], \"sku\" : \"sku\", \"bid\" : 570 } ] }, \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBidsRecommendations500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getBidsRecommendationsRequestSample1() {
        return "{ \"skus\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubGetBusinessQuarantineOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetBusinessQuarantineOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getBusinessQuarantineOffers200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } }, { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessQuarantineOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getBusinessQuarantineOffersRequestSample1() {
        return "{ \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"offerIds\" : [ null, null, null, null, null ], \"cardStatuses\" : [ \"HAS_CARD_CAN_NOT_UPDATE\", \"HAS_CARD_CAN_NOT_UPDATE\" ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    public static MappingBuilder stubGetBusinessSettings200(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings400(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings401(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings403(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings404(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings420(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettings500(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetBusinessSettingsFault(@javax.annotation.Nonnull String businessId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getBusinessSettings200ResponseSample1() {
        return "{ \"result\" : { \"settings\" : { \"currency\" : \"RUR\", \"onlyDefaultPrice\" : true }, \"info\" : { \"name\" : \"name\", \"id\" : 0 } }, \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getBusinessSettings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaign200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaign500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getCampaign200ResponseSample1() {
        return "{ \"campaign\" : { \"clientId\" : 6, \"business\" : { \"name\" : \"name\", \"id\" : 0 }, \"domain\" : \"domain\", \"placementType\" : \"FBS\", \"id\" : 0 } }";
    }
    public static String getCampaign400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaign401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaign403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaign404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaign420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaign500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaignLogins200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLogins500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignLoginsFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/logins"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getCampaignLogins200ResponseSample1() {
        return "{ \"logins\" : [ \"logins\", \"logins\" ] }";
    }
    public static String getCampaignLogins400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignLogins401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignLogins403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignLogins404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignLogins420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignLogins500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getCampaignOffers200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"campaignPrice\" : { \"vat\" : 5, \"discountBase\" : 5.962133916683182, \"currencyId\" : \"RUR\", \"value\" : 1.4658129805029452, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"available\" : true, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 }, \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"status\" : \"PUBLISHED\" }, { \"campaignPrice\" : { \"vat\" : 5, \"discountBase\" : 5.962133916683182, \"currencyId\" : \"RUR\", \"value\" : 1.4658129805029452, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"available\" : true, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 }, \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"status\" : \"PUBLISHED\" } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getCampaignOffersRequestSample1() {
        return "{ \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"statuses\" : [ \"PUBLISHED\", \"PUBLISHED\" ], \"offerIds\" : [ null, null, null, null, null ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    public static MappingBuilder stubGetCampaignQuarantineOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignQuarantineOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/price-quarantine"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getCampaignQuarantineOffers200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } }, { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignQuarantineOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getCampaignQuarantineOffersRequestSample1() {
        return "{ \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"offerIds\" : [ null, null, null, null, null ], \"cardStatuses\" : [ \"HAS_CARD_CAN_NOT_UPDATE\", \"HAS_CARD_CAN_NOT_UPDATE\" ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetCampaignRegion200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetCampaignRegion500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignRegionFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/region"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getCampaignRegion200ResponseSample1() {
        return "{ \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } }";
    }
    public static String getCampaignRegion400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignRegion401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignRegion403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignRegion404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignRegion420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignRegion500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaignSettings200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettings500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetCampaignSettingsFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/settings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getCampaignSettings200ResponseSample1() {
        return "{ \"settings\" : { \"showInPremium\" : true, \"showInContext\" : true, \"localRegion\" : { \"delivery\" : { \"schedule\" : { \"customWorkingDays\" : [ \"23-09-2022\", \"23-09-2022\" ], \"period\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\" }, \"customHolidays\" : [ \"23-09-2022\", \"23-09-2022\" ], \"weeklyHolidays\" : [ 1, 1 ], \"availableOnHolidays\" : true, \"totalHolidays\" : [ \"23-09-2022\", \"23-09-2022\" ] } }, \"name\" : \"name\", \"id\" : 6, \"type\" : \"OTHER\", \"deliveryOptionsSource\" : \"WEB\" }, \"countryRegion\" : 0, \"shopName\" : \"shopName\", \"useOpenStat\" : true } }";
    }
    public static String getCampaignSettings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignSettings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignSettings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignSettings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignSettings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignSettings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaigns200(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns400(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns401(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns403(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns404(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns420(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaigns500(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsFault(@javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/campaigns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String getCampaigns200ResponseSample1() {
        return "{ \"campaigns\" : [ { \"clientId\" : 6, \"business\" : { \"name\" : \"name\", \"id\" : 0 }, \"domain\" : \"domain\", \"placementType\" : \"FBS\", \"id\" : 0 }, { \"clientId\" : 6, \"business\" : { \"name\" : \"name\", \"id\" : 0 }, \"domain\" : \"domain\", \"placementType\" : \"FBS\", \"id\" : 0 } ], \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String getCampaigns400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaigns401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaigns403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaigns404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaigns420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaigns500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCampaignsByLogin200(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin400(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin401(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin403(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin404(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin420(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLogin500(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetCampaignsByLoginFault(@javax.annotation.Nonnull String login, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/by_login/{login}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("login", equalTo(login));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String getCampaignsByLogin200ResponseSample1() {
        return "{ \"campaigns\" : [ { \"clientId\" : 6, \"business\" : { \"name\" : \"name\", \"id\" : 0 }, \"domain\" : \"domain\", \"placementType\" : \"FBS\", \"id\" : 0 }, { \"clientId\" : 6, \"business\" : { \"name\" : \"name\", \"id\" : 0 }, \"domain\" : \"domain\", \"placementType\" : \"FBS\", \"id\" : 0 } ], \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String getCampaignsByLogin400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignsByLogin401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignsByLogin403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignsByLogin404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignsByLogin420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCampaignsByLogin500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetCategoriesMaxSaleQuantum200(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum400(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum401(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum403(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum404(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum420(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantum500(@javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesMaxSaleQuantumFault(@javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/max-sale-quantum"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String getCategoriesMaxSaleQuantum200ResponseSample1() {
        return "{ \"results\" : [ { \"maxSaleQuantum\" : 6, \"name\" : \"name\", \"id\" : 0 }, { \"maxSaleQuantum\" : 6, \"name\" : \"name\", \"id\" : 0 } ], \"errors\" : [ { \"type\" : \"UNKNOWN_CATEGORY\", \"categoryId\" : 1 }, { \"type\" : \"UNKNOWN_CATEGORY\", \"categoryId\" : 1 } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesMaxSaleQuantum500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getCategoriesMaxSaleQuantumRequestSample1() {
        return "{ \"marketCategoryIds\" : [ 0, 0, 0, 0, 0 ] }";
    }


    public static MappingBuilder stubGetCategoriesTree200(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree400(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree401(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree403(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree404(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree420(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTree500(@javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetCategoriesTreeFault(@javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/categories/tree"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String getCategoriesTree200ResponseSample1() {
        return "{ \"result\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoriesTree500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getCategoriesTreeRequestSample1() {
        return "{ \"language\" : \"RU\" }";
    }


    public static MappingBuilder stubGetCategoryContentParameters200(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters400(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters401(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters403(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters404(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters420(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParameters500(@javax.annotation.Nonnull String categoryId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static MappingBuilder stubGetCategoryContentParametersFault(@javax.annotation.Nonnull String categoryId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/category/{categoryId}/parameters"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("categoryId", equalTo(categoryId));

        return stub;
    }

    public static String getCategoryContentParameters200ResponseSample1() {
        return "{ \"result\" : { \"parameters\" : [ { \"values\" : [ { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" }, { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" } ], \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ], \"description\" : \"description\", \"type\" : \"TEXT\", \"constraints\" : { \"minValue\" : 2.3021358869347655, \"maxValue\" : 7.061401241503109, \"maxLength\" : 9 }, \"required\" : true, \"multivalue\" : true, \"unit\" : { \"defaultUnitId\" : 1, \"units\" : [ { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 }, { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 } ] }, \"valueRestrictions\" : [ { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 }, { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 } ], \"distinctive\" : true, \"name\" : \"name\", \"id\" : 6, \"filtering\" : true, \"allowCustomValues\" : true }, { \"values\" : [ { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" }, { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" } ], \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ], \"description\" : \"description\", \"type\" : \"TEXT\", \"constraints\" : { \"minValue\" : 2.3021358869347655, \"maxValue\" : 7.061401241503109, \"maxLength\" : 9 }, \"required\" : true, \"multivalue\" : true, \"unit\" : { \"defaultUnitId\" : 1, \"units\" : [ { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 }, { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 } ] }, \"valueRestrictions\" : [ { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 }, { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 } ], \"distinctive\" : true, \"name\" : \"name\", \"id\" : 6, \"filtering\" : true, \"allowCustomValues\" : true } ], \"categoryId\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getCategoryContentParameters500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetChatHistory200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistory500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatHistoryFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/history"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getChatHistory200ResponseSample1() {
        return "{ \"result\" : { \"orderId\" : 0, \"messages\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getChatHistory400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChatHistory500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getChatHistoryRequestSample1() {
        return "{ \"messageIdFrom\" : 0 }";
    }


    public static MappingBuilder stubGetChats200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChats500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetChatsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getChats200ResponseSample1() {
        return "{ \"result\" : { \"chats\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getChats400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getChats500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getChatsRequestSample1() {
        return "{ \"types\" : [ \"CHAT\", \"CHAT\" ], \"statuses\" : [ \"NEW\", \"NEW\" ], \"orderIds\" : [ 0, 0 ] }";
    }


    public static MappingBuilder stubGetDeliveryServices200(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices400(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices401(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices403(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices404(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices420(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServices500(String response) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );


        return stub;
    }

    public static MappingBuilder stubGetDeliveryServicesFault(Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/delivery/services"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );


        return stub;
    }

    public static String getDeliveryServices200ResponseSample1() {
        return "{ \"result\" : { \"deliveryService\" : [ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ] } }";
    }
    public static String getDeliveryServices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getDeliveryServices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getDeliveryServices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getDeliveryServices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getDeliveryServices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getDeliveryServices500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeed200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubGetFeedFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String getFeed200ResponseSample1() {
        return "{ \"feed\" : { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } } }";
    }
    public static String getFeed400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    public static MappingBuilder stubGetFeedIndexLogsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    public static String getFeedIndexLogs200ResponseSample1() {
        return "{ \"result\" : { \"feed\" : { \"id\" : 0 }, \"total\" : 2, \"indexLogRecords\" : [ { \"offers\" : { \"rejectedCount\" : 5, \"totalCount\" : 5 }, \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"generationId\" : 6, \"indexType\" : \"DIFF\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\", \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 1 }, \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"ERROR\" }, { \"offers\" : { \"rejectedCount\" : 5, \"totalCount\" : 5 }, \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"generationId\" : 6, \"indexType\" : \"DIFF\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\", \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 1 }, \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"ERROR\" } ] }, \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    public static MappingBuilder stubGetFeedbackAndCommentUpdatesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    public static String getFeedbackAndCommentUpdates200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"feedbackList\" : [ { \"comments\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"shop\" : { \"name\" : \"name\" }, \"author\" : { \"name\" : \"name\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } }, \"verified\" : true, \"recommend\" : true, \"grades\" : { \"average\" : 5.962133916683182, \"agreeCount\" : 5, \"rejectCount\" : 2, \"factors\" : [ { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 }, { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 } ] }, \"pro\" : \"pro\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"text\" : \"text\", \"state\" : \"LAST\", \"contra\" : \"contra\", \"resolved\" : true, \"order\" : { \"delivery\" : \"DELIVERY\", \"shopOrderId\" : \"shopOrderId\" } }, { \"comments\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"shop\" : { \"name\" : \"name\" }, \"author\" : { \"name\" : \"name\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } }, \"verified\" : true, \"recommend\" : true, \"grades\" : { \"average\" : 5.962133916683182, \"agreeCount\" : 5, \"rejectCount\" : 2, \"factors\" : [ { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 }, { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 } ] }, \"pro\" : \"pro\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"text\" : \"text\", \"state\" : \"LAST\", \"contra\" : \"contra\", \"resolved\" : true, \"order\" : { \"delivery\" : \"DELIVERY\", \"shopOrderId\" : \"shopOrderId\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeeds200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetFeedsFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getFeeds200ResponseSample1() {
        return "{ \"feeds\" : [ { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } }, { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } } ] }";
    }
    public static String getFeeds400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetGoodsFeedbackComments200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackComments500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbackCommentsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getGoodsFeedbackComments200ResponseSample1() {
        return "{ \"result\" : { \"comments\" : [ { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" }, { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbackComments500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getGoodsFeedbackCommentsRequestSample1() {
        return "{ \"feedbackId\" : 0 }";
    }


    public static MappingBuilder stubGetGoodsFeedbacks200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacks500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetGoodsFeedbacksFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getGoodsFeedbacks200ResponseSample1() {
        return "{ \"result\" : { \"feedbacks\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"needReaction\" : true, \"identifiers\" : { \"orderId\" : 6, \"modelId\" : 1 }, \"author\" : \"author\", \"feedbackId\" : 0, \"description\" : { \"advantages\" : \"advantages\", \"disadvantages\" : \"disadvantages\", \"comment\" : \"comment\" }, \"media\" : { \"videos\" : [ \"videos\", \"videos\" ], \"photos\" : [ \"photos\", \"photos\" ] }, \"statistics\" : { \"commentsCount\" : 5, \"rating\" : 3, \"paidAmount\" : 2, \"recommended\" : true } }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"needReaction\" : true, \"identifiers\" : { \"orderId\" : 6, \"modelId\" : 1 }, \"author\" : \"author\", \"feedbackId\" : 0, \"description\" : { \"advantages\" : \"advantages\", \"disadvantages\" : \"disadvantages\", \"comment\" : \"comment\" }, \"media\" : { \"videos\" : [ \"videos\", \"videos\" ], \"photos\" : [ \"photos\", \"photos\" ] }, \"statistics\" : { \"commentsCount\" : 5, \"rating\" : 3, \"paidAmount\" : 2, \"recommended\" : true } } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsFeedbacks500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getGoodsFeedbacksRequestSample1() {
        return "{ \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"ratingValues\" : [ 0, 0, 0, 0, 0 ], \"modelIds\" : [ 6, 6, 6, 6, 6 ], \"paid\" : true, \"reactionStatus\" : \"ALL\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\" }";
    }


    public static MappingBuilder stubGetGoodsStats200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStats500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetGoodsStatsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/skus"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getGoodsStats200ResponseSample1() {
        return "{ \"result\" : { \"shopSkus\" : [ { \"shopSku\" : \"shopSku\", \"marketSku\" : 0, \"price\" : 6.027456183070403, \"name\" : \"name\", \"warehouses\" : [ { \"name\" : \"name\", \"id\" : 9, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ] }, { \"name\" : \"name\", \"id\" : 9, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ] } ], \"weightDimensions\" : { \"length\" : 5.962133916683182, \"width\" : 5.637376656633329, \"weight\" : 7.061401241503109, \"height\" : 2.3021358869347655 }, \"categoryName\" : \"categoryName\", \"categoryId\" : 1, \"pictures\" : [ \"pictures\", \"pictures\" ], \"tariffs\" : [ { \"amount\" : 2.027123023002322, \"type\" : \"AGENCY_COMMISSION\", \"percent\" : 3.616076749251911, \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"amount\" : 2.027123023002322, \"type\" : \"AGENCY_COMMISSION\", \"percent\" : 3.616076749251911, \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ] }, { \"shopSku\" : \"shopSku\", \"marketSku\" : 0, \"price\" : 6.027456183070403, \"name\" : \"name\", \"warehouses\" : [ { \"name\" : \"name\", \"id\" : 9, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ] }, { \"name\" : \"name\", \"id\" : 9, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ] } ], \"weightDimensions\" : { \"length\" : 5.962133916683182, \"width\" : 5.637376656633329, \"weight\" : 7.061401241503109, \"height\" : 2.3021358869347655 }, \"categoryName\" : \"categoryName\", \"categoryId\" : 1, \"pictures\" : [ \"pictures\", \"pictures\" ], \"tariffs\" : [ { \"amount\" : 2.027123023002322, \"type\" : \"AGENCY_COMMISSION\", \"percent\" : 3.616076749251911, \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] }, { \"amount\" : 2.027123023002322, \"type\" : \"AGENCY_COMMISSION\", \"percent\" : 3.616076749251911, \"parameters\" : [ { \"name\" : \"name\", \"value\" : \"value\" }, { \"name\" : \"name\", \"value\" : \"value\" } ] } ] } ] }, \"status\" : \"OK\" }";
    }
    public static String getGoodsStats400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsStats401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsStats403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsStats404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsStats420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getGoodsStats500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getGoodsStatsRequestSample1() {
        return "{ \"shopSkus\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubGetHiddenOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetHiddenOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String offset, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/hidden-offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(offset != null) {
            stub = stub.withQueryParam("offset", equalTo(offset));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String getHiddenOffers200ResponseSample1() {
        return "{ \"result\" : { \"hiddenOffers\" : [ { \"offerId\" : \"offerId\" }, { \"offerId\" : \"offerId\" } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getHiddenOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getHiddenOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getHiddenOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getHiddenOffers420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getHiddenOffers500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOfferCardsContentStatus200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatus500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferCardsContentStatusFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferCardsContentStatus200ResponseSample1() {
        return "{ \"result\" : { \"offerCards\" : [ { \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"contentRating\" : 0, \"recommendations\" : [ { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 }, { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 } ], \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"contentRating\" : 0, \"recommendations\" : [ { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 }, { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 } ], \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferCardsContentStatus500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOfferCardsContentStatusRequestSample1() {
        return "{ \"categoryIds\" : [ null, null, null, null, null ], \"offerIds\" : [ null, null, null, null, null ], \"cardStatuses\" : [ \"HAS_CARD_CAN_NOT_UPDATE\", \"HAS_CARD_CAN_NOT_UPDATE\" ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOfferMappingEntries500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappingEntriesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String offerId, @javax.annotation.Nullable String shopSku, @javax.annotation.Nullable String mappingKind, @javax.annotation.Nullable String status, @javax.annotation.Nullable String availability, @javax.annotation.Nullable String categoryId, @javax.annotation.Nullable String vendor, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(offerId != null) {
            stub = stub.withQueryParam("offerId", equalTo(offerId));
        }
        if(shopSku != null) {
            stub = stub.withQueryParam("shopSku", equalTo(shopSku));
        }
        if(mappingKind != null) {
            stub = stub.withQueryParam("mappingKind", equalTo(mappingKind));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(availability != null) {
            stub = stub.withQueryParam("availability", equalTo(availability));
        }
        if(categoryId != null) {
            stub = stub.withQueryParam("categoryId", equalTo(categoryId));
        }
        if(vendor != null) {
            stub = stub.withQueryParam("vendor", equalTo(vendor));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferMappingEntries200ResponseSample1() {
        return "{ \"result\" : { \"offerMappingEntries\" : [ { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } }, { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappingEntries500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferMappings200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerMappings\" : [ { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOfferMappingsRequestSample1() {
        return "{ \"archived\" : true, \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"offerIds\" : [ null, null, null, null, null ], \"cardStatuses\" : [ \"HAS_CARD_CAN_NOT_UPDATE\", \"HAS_CARD_CAN_NOT_UPDATE\" ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    public static MappingBuilder stubGetOfferRecommendations200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendations500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferRecommendationsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offers/recommendations"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferRecommendations200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerRecommendations\" : [ { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } }, { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } } ] }, \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferRecommendations500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOfferRecommendationsRequestSample1() {
        return "{ \"cofinancePriceFilter\" : \"SPECIFIED\", \"competitivenessFilter\" : \"OPTIMAL\", \"offerIds\" : [ null, null ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubGetOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String query, @javax.annotation.Nullable String feedId, @javax.annotation.Nullable String shopCategoryId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String matched, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(query != null) {
            stub = stub.withQueryParam("query", equalTo(query));
        }
        if(feedId != null) {
            stub = stub.withQueryParam("feedId", equalTo(feedId));
        }
        if(shopCategoryId != null) {
            stub = stub.withQueryParam("shopCategoryId", equalTo(shopCategoryId));
        }
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(matched != null) {
            stub = stub.withQueryParam("matched", equalTo(matched));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String getOffers200ResponseSample1() {
        return "{ \"offers\" : [ { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 }, { \"marketCategoryId\" : 1, \"preDiscountPrice\" : 5.962133916683182, \"shopCategoryId\" : \"shopCategoryId\", \"modelId\" : 2, \"fee\" : 3.616076749251911, \"discount\" : 5, \"url\" : \"url\", \"cbid\" : 9.301444243932576, \"blocked\" : true, \"feedId\" : 6, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"currency\" : \"RUR\", \"id\" : \"id\", \"cutPrice\" : true, \"bid\" : 7.061401241503109 } ], \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String getOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrder200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrder200ResponseSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } }";
    }
    public static String getOrder400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrderBusinessBuyerInfo200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfo500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessBuyerInfoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/business-buyer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrderBusinessBuyerInfo200ResponseSample1() {
        return "{ \"result\" : { \"organizationName\" : \"organizationName\", \"organizationJurAddress\" : \"organizationJurAddress\", \"inn\" : \"inn\", \"kpp\" : \"kpp\" }, \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessBuyerInfo500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrderBusinessDocumentsInfo200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfo500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderBusinessDocumentsInfoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/documents"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrderBusinessDocumentsInfo200ResponseSample1() {
        return "{ \"result\" : { \"sf\" : { \"date\" : \"2000-01-23\", \"number\" : \"number\", \"status\" : \"READY\" }, \"torgTwelve\" : { \"date\" : \"2000-01-23\", \"number\" : \"number\", \"status\" : \"READY\" }, \"upd\" : { \"date\" : \"2000-01-23\", \"number\" : \"number\", \"status\" : \"READY\" }, \"ukd\" : { \"date\" : \"2000-01-23\", \"number\" : \"number\", \"status\" : \"READY\" }, \"ksf\" : { \"date\" : \"2000-01-23\", \"number\" : \"number\", \"status\" : \"READY\" } }, \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderBusinessDocumentsInfo500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrderLabelsData200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsDataFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrderLabelsData200ResponseSample1() {
        return "{ \"result\" : { \"parcelBoxLabels\" : [ { \"supplierName\" : \"supplierName\", \"deliveryServiceId\" : \"deliveryServiceId\", \"orderId\" : 1, \"fulfilmentId\" : \"fulfilmentId\", \"orderNum\" : \"orderNum\", \"weight\" : \"weight\", \"url\" : \"url\", \"deliveryServiceName\" : \"deliveryServiceName\", \"deliveryAddress\" : \"deliveryAddress\", \"recipientName\" : \"recipientName\", \"place\" : \"place\", \"shipmentDate\" : \"shipmentDate\", \"boxId\" : 5 }, { \"supplierName\" : \"supplierName\", \"deliveryServiceId\" : \"deliveryServiceId\", \"orderId\" : 1, \"fulfilmentId\" : \"fulfilmentId\", \"orderNum\" : \"orderNum\", \"weight\" : \"weight\", \"url\" : \"url\", \"deliveryServiceName\" : \"deliveryServiceName\", \"deliveryAddress\" : \"deliveryAddress\", \"recipientName\" : \"recipientName\", \"place\" : \"place\", \"shipmentDate\" : \"shipmentDate\", \"boxId\" : 5 } ], \"orderId\" : 0, \"placesNumber\" : 6, \"url\" : \"url\" }, \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrders200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOrders200ResponseSample1() {
        return "{ \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 }, \"orders\" : [ { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" }, { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String getOrders400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrdersStats200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStats500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersStatsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/stats/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOrdersStats200ResponseSample1() {
        return "{ \"result\" : { \"orders\" : [ { \"partnerOrderId\" : \"partnerOrderId\", \"commissions\" : [ { \"actual\" : 1.2315135367772556, \"type\" : \"FEE\" }, { \"actual\" : 1.2315135367772556, \"type\" : \"FEE\" } ], \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"payments\" : [ { \"date\" : \"2000-01-23\", \"total\" : 7.386281948385884, \"paymentOrder\" : { \"date\" : \"2000-01-23\", \"id\" : \"id\" }, \"id\" : \"id\", \"source\" : \"BUYER\", \"type\" : \"PAYMENT\" }, { \"date\" : \"2000-01-23\", \"total\" : 7.386281948385884, \"paymentOrder\" : { \"date\" : \"2000-01-23\", \"id\" : \"id\" }, \"id\" : \"id\", \"source\" : \"BUYER\", \"type\" : \"PAYMENT\" } ], \"fake\" : true, \"deliveryRegion\" : { \"name\" : \"name\", \"id\" : 6 }, \"id\" : 0, \"creationDate\" : \"2000-01-23\", \"items\" : [ { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } }, { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } } ], \"initialItems\" : [ { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } }, { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } } ], \"status\" : \"CANCELLED_BEFORE_PROCESSING\", \"paymentType\" : \"CREDIT\" }, { \"partnerOrderId\" : \"partnerOrderId\", \"commissions\" : [ { \"actual\" : 1.2315135367772556, \"type\" : \"FEE\" }, { \"actual\" : 1.2315135367772556, \"type\" : \"FEE\" } ], \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"payments\" : [ { \"date\" : \"2000-01-23\", \"total\" : 7.386281948385884, \"paymentOrder\" : { \"date\" : \"2000-01-23\", \"id\" : \"id\" }, \"id\" : \"id\", \"source\" : \"BUYER\", \"type\" : \"PAYMENT\" }, { \"date\" : \"2000-01-23\", \"total\" : 7.386281948385884, \"paymentOrder\" : { \"date\" : \"2000-01-23\", \"id\" : \"id\" }, \"id\" : \"id\", \"source\" : \"BUYER\", \"type\" : \"PAYMENT\" } ], \"fake\" : true, \"deliveryRegion\" : { \"name\" : \"name\", \"id\" : 6 }, \"id\" : 0, \"creationDate\" : \"2000-01-23\", \"items\" : [ { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } }, { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } } ], \"initialItems\" : [ { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } }, { \"cofinanceValue\" : 4.145608029883936, \"initialCount\" : 3, \"offerName\" : \"offerName\", \"shopSku\" : \"shopSku\", \"cisList\" : [ \"cisList\", \"cisList\" ], \"marketSku\" : 1, \"count\" : 5, \"bidFee\" : 570, \"cofinanceThreshold\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 }, { \"updateDate\" : \"2000-01-23\", \"stockType\" : \"FIT\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 9 } ], \"prices\" : [ { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" }, { \"total\" : 2.3021358869347655, \"costPerItem\" : 5.637376656633329, \"type\" : \"BUYER\" } ], \"warehouse\" : { \"name\" : \"name\", \"id\" : 7 } } ], \"status\" : \"CANCELLED_BEFORE_PROCESSING\", \"paymentType\" : \"CREDIT\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getOrdersStats400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrdersStats401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrdersStats403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrdersStats404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrdersStats420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrdersStats500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOrdersStatsRequestSample1() {
        return "{ \"updateTo\" : \"2000-01-23\", \"updateFrom\" : \"2000-01-23\", \"hasCis\" : true, \"dateTo\" : \"2000-01-23\", \"statuses\" : [ \"CANCELLED_BEFORE_PROCESSING\", \"CANCELLED_BEFORE_PROCESSING\" ], \"orders\" : [ 0, 0 ], \"dateFrom\" : \"2000-01-23\" }";
    }


    @Deprecated
    public static MappingBuilder stubGetPrices200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetPrices500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String archived, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(archived != null) {
            stub = stub.withQueryParam("archived", equalTo(archived));
        }

        return stub;
    }

    public static String getPrices200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"marketSku\" : 0, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"marketSku\" : 0, \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"total\" : 6, \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getPrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPrices500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetPricesByOfferIds200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIds500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPricesByOfferIdsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getPricesByOfferIds200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPricesByOfferIds500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getPricesByOfferIdsRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubGetPromoOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetPromoOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getPromoOffers200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 6, \"maxPromoPrice\" : 1, \"price\" : 0 }, \"promocodeParams\" : { \"maxPrice\" : 5 } }, \"status\" : \"AUTO\", \"autoParticipatingDetails\" : { \"campaignIds\" : [ 5, 5 ] } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 6, \"maxPromoPrice\" : 1, \"price\" : 0 }, \"promocodeParams\" : { \"maxPrice\" : 5 } }, \"status\" : \"AUTO\", \"autoParticipatingDetails\" : { \"campaignIds\" : [ 5, 5 ] } } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getPromoOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromoOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromoOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromoOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromoOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromoOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getPromoOffersRequestSample1() {
        return "{ \"statusType\" : \"MANUALLY_ADDED\", \"promoId\" : \"promoId\" }";
    }


    public static MappingBuilder stubGetPromos200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromos500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetPromosFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getPromos200ResponseSample1() {
        return "{ \"result\" : { \"promos\" : [ { \"period\" : { \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\" }, \"channels\" : [ \"{}\", \"{}\" ], \"mechanicsInfo\" : { \"promocodeInfo\" : { \"promocode\" : \"promocode\", \"discount\" : 1 }, \"type\" : \"DIRECT_DISCOUNT\" }, \"bestsellerInfo\" : { \"bestseller\" : true, \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"participating\" : true, \"id\" : \"id\", \"constraints\" : { \"warehouseIds\" : [ 5, 5 ] }, \"assortmentInfo\" : { \"activeOffers\" : 0, \"processing\" : true, \"potentialOffers\" : 6 } }, { \"period\" : { \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\" }, \"channels\" : [ \"{}\", \"{}\" ], \"mechanicsInfo\" : { \"promocodeInfo\" : { \"promocode\" : \"promocode\", \"discount\" : 1 }, \"type\" : \"DIRECT_DISCOUNT\" }, \"bestsellerInfo\" : { \"bestseller\" : true, \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"participating\" : true, \"id\" : \"id\", \"constraints\" : { \"warehouseIds\" : [ 5, 5 ] }, \"assortmentInfo\" : { \"activeOffers\" : 0, \"processing\" : true, \"potentialOffers\" : 6 } } ] }, \"status\" : \"OK\" }";
    }
    public static String getPromos400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromos401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromos403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromos404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromos420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getPromos500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getPromosRequestSample1() {
        return "{ \"participation\" : \"PARTICIPATING_NOW\", \"mechanics\" : \"DIRECT_DISCOUNT\" }";
    }


    public static MappingBuilder stubGetQualityRatingDetails200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetails500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingDetailsFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/ratings/quality/details"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getQualityRatingDetails200ResponseSample1() {
        return "{ \"result\" : { \"affectedOrders\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"orderId\" : 0, \"description\" : \"description\" }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"orderId\" : 0, \"description\" : \"description\" } ] }, \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatingDetails500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetQualityRatings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetQualityRatingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/ratings/quality"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getQualityRatings200ResponseSample1() {
        return "{ \"result\" : { \"campaignRatings\" : [ { \"campaignId\" : 0, \"ratings\" : [ { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" }, { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" } ] }, { \"campaignId\" : 0, \"ratings\" : [ { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" }, { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" } ] } ] }, \"status\" : \"OK\" }";
    }
    public static String getQualityRatings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getQualityRatings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getQualityRatingsRequestSample1() {
        return "{ \"dateTo\" : \"2000-01-23\", \"campaignIds\" : [ 0, 0, 0, 0, 0 ], \"dateFrom\" : \"2000-01-23\" }";
    }


    public static MappingBuilder stubGetReportInfo200(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo400(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo401(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo403(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo404(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo420(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfo500(@javax.annotation.Nonnull String reportId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static MappingBuilder stubGetReportInfoFault(@javax.annotation.Nonnull String reportId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/reports/info/{reportId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("reportId", equalTo(reportId));

        return stub;
    }

    public static String getReportInfo200ResponseSample1() {
        return "{ \"result\" : { \"generationRequestedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"file\" : \"file\", \"generationFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"subStatus\" : \"NO_DATA\", \"status\" : \"PENDING\", \"estimatedGenerationTime\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String getReportInfo400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReportInfo401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReportInfo403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReportInfo404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReportInfo420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReportInfo500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturn200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String getReturn200ResponseSample1() {
        return "{ \"result\" : { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 }, \"status\" : \"OK\" }";
    }
    public static String getReturn400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturnApplication200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplicationFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String getReturnApplication400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturnPhoto200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhotoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static String getReturnPhoto400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturns200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturnsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static String getReturns200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"nextPageToken\" : \"nextPageToken\" }, \"returns\" : [ { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 }, { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 } ] }, \"status\" : \"OK\" }";
    }
    public static String getReturns400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static String getShipment200ResponseSample1() {
        return "{ \"result\" : { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"availableActions\" : [ \"CONFIRM\", \"CONFIRM\" ], \"draftCount\" : 7, \"plannedCount\" : 9, \"currentStatus\" : { \"description\" : \"description\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" }, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 3, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 2, 2 ] }, \"status\" : \"OK\" }";
    }
    public static String getShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetShipmentOrdersInfo200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String getShipmentOrdersInfo200ResponseSample1() {
        return "{ \"result\" : { \"orderIdsWithLabels\" : [ 0, 0 ], \"orderIdsWithoutLabels\" : [ 6, 6 ] }, \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetStocks200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocksFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getStocks200ResponseSample1() {
        return "{ \"result\" : { \"warehouses\" : [ { \"offers\" : [ { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"warehouseId\" : 0 }, { \"offers\" : [ { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"warehouseId\" : 0 } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getStocks400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getStocksRequestSample1() {
        return "{ \"archived\" : true, \"withTurnover\" : false, \"offerIds\" : [ null, null, null, null, null ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedOfferMappingEntries500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappingEntriesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getSuggestedOfferMappingEntries200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"marketCategoryId\" : 4, \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"marketModelId\" : 7, \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"marketSkuName\" : \"marketSkuName\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"marketModelName\" : \"marketModelName\", \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"marketCategoryName\" : \"marketCategoryName\", \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"marketCategoryId\" : 4, \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"marketModelId\" : 7, \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"marketSkuName\" : \"marketSkuName\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"marketModelName\" : \"marketModelName\", \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"marketCategoryName\" : \"marketCategoryName\", \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 } ] }, \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappingEntries500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getSuggestedOfferMappingEntriesRequestSample1() {
        return "{ \"offers\" : [ { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"price\" : 2.027123023002322, \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 } ] }";
    }


    public static MappingBuilder stubGetSuggestedOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getSuggestedOfferMappings200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getSuggestedOfferMappingsRequestSample1() {
        return "{ \"offers\" : [ { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" } ] }";
    }


    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetSuggestedPrices500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedPricesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getSuggestedPrices200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"marketSku\" : 0, \"offerId\" : \"offerId\", \"priceSuggestion\" : [ { \"price\" : 6.027456183070403, \"type\" : \"BUYBOX\" }, { \"price\" : 6.027456183070403, \"type\" : \"BUYBOX\" } ] }, { \"marketSku\" : 0, \"offerId\" : \"offerId\", \"priceSuggestion\" : [ { \"price\" : 6.027456183070403, \"type\" : \"BUYBOX\" }, { \"price\" : 6.027456183070403, \"type\" : \"BUYBOX\" } ] } ] }, \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedPrices500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getSuggestedPricesRequestSample1() {
        return "{ \"offers\" : [ { \"marketSku\" : 0, \"offerId\" : \"offerId\" }, { \"marketSku\" : 0, \"offerId\" : \"offerId\" }, { \"marketSku\" : 0, \"offerId\" : \"offerId\" }, { \"marketSku\" : 0, \"offerId\" : \"offerId\" }, { \"marketSku\" : 0, \"offerId\" : \"offerId\" } ] }";
    }


    public static MappingBuilder stubGetWarehouses200(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses400(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses401(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses403(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses404(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses420(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehouses500(@javax.annotation.Nonnull String businessId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetWarehousesFault(@javax.annotation.Nonnull String businessId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/businesses/{businessId}/warehouses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getWarehouses200ResponseSample1() {
        return "{ \"result\" : { \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"warehouseGroups\" : [ { \"name\" : \"name\", \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"mainWarehouse\" : { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } }, { \"name\" : \"name\", \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"mainWarehouse\" : { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } } ] }, \"status\" : \"OK\" }";
    }
    public static String getWarehouses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getWarehouses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getWarehouses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getWarehouses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getWarehouses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getWarehouses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubProvideOrderItemIdentifiers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String provideOrderItemIdentifiers200ResponseSample1() {
        return "{ \"result\" : { \"items\" : [ { \"offerName\" : \"offerName\", \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"price\" : 1.4658129805029452, \"vat\" : \"NO_VAT\", \"count\" : 6, \"offerId\" : \"offerId\", \"id\" : 0 }, { \"offerName\" : \"offerName\", \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"price\" : 1.4658129805029452, \"vat\" : \"NO_VAT\", \"count\" : 6, \"offerId\" : \"offerId\", \"id\" : 0 } ] }, \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String provideOrderItemIdentifiersRequestSample1() {
        return "{ \"items\" : [ { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0 }, { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubPutBidsForBusiness200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusiness500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForBusinessFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/businesses/{businessId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String putBidsForBusiness200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForBusiness500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String putBidsForBusinessRequestSample1() {
        return "{ \"bids\" : [ { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 } ] }";
    }


    public static MappingBuilder stubPutBidsForCampaign200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaign500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubPutBidsForCampaignFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/bids"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String putBidsForCampaign200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String putBidsForCampaign500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String putBidsForCampaignRequestSample1() {
        return "{ \"bids\" : [ { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 } ] }";
    }


    @Deprecated
    public static MappingBuilder stubRefreshFeed200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubRefreshFeedFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String refreshFeed200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String refreshFeed400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchRegionChildren200(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren400(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren401(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren403(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren404(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren420(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren500(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildrenFault(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String searchRegionChildren200ResponseSample1() {
        return "{ \"regions\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String searchRegionChildren400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchRegionsById200(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById401(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById403(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById404(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById420(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById500(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByIdFault(@javax.annotation.Nonnull String regionId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static String searchRegionsById200ResponseSample1() {
        return "{ \"regions\" : [ { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String searchRegionsById401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchRegionsByName200(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName401(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName403(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName420(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName500(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByNameFault(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String searchRegionsByName200ResponseSample1() {
        return "{ \"regions\" : [ { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String searchRegionsByName401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName420ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName500ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchShipments200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipmentsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String searchShipments200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"nextPageToken\" : \"nextPageToken\" }, \"shipments\" : [ { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"draftCount\" : 1, \"plannedCount\" : 5, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"statusDescription\" : \"statusDescription\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 5, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 6, 6 ], \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" }, { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"draftCount\" : 1, \"plannedCount\" : 5, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"statusDescription\" : \"statusDescription\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 5, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 6, 6 ], \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" } ] }, \"status\" : \"OK\" }";
    }
    public static String searchShipments400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String searchShipmentsRequestSample1() {
        return "{ \"cancelledOrders\" : true, \"dateTo\" : \"2000-01-23\", \"statuses\" : [ \"OUTBOUND_CREATED\", \"OUTBOUND_CREATED\" ], \"orderIds\" : [ 0, 0 ], \"dateFrom\" : \"2000-01-23\" }";
    }


    public static MappingBuilder stubSendFileToChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static MappingBuilder stubSendFileToChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String _file, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/file/send"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("multipart/form-data"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));
        stub = stub.withFormParam("file", havingExactly(_file));

        return stub;
    }

    public static String sendFileToChat200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String sendFileToChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendFileToChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSendMessageToChat200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChat500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static MappingBuilder stubSendMessageToChatFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String chatId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/chats/message"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        stub = stub.withQueryParam("chatId", equalTo(chatId));

        return stub;
    }

    public static String sendMessageToChat200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String sendMessageToChat500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String sendMessageToChatRequestSample1() {
        return "{ \"message\" : \"message\" }";
    }


    @Deprecated
    public static MappingBuilder stubSetFeedParams200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubSetFeedParamsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String setFeedParams200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String setFeedParams400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setFeedParamsRequestSample1() {
        return "{ \"parameters\" : [ { \"deleted\" : true, \"values\" : [ 0, 0 ], \"name\" : \"name\" }, { \"deleted\" : true, \"values\" : [ 0, 0 ], \"name\" : \"name\" } ] }";
    }


    public static MappingBuilder stubSetOrderBoxLayout200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayoutFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String setOrderBoxLayout200ResponseSample1() {
        return "{ \"result\" : { \"boxes\" : [ { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ], \"boxId\" : 5 }, { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ], \"boxId\" : 5 } ] }, \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setOrderBoxLayoutRequestSample1() {
        return "{ \"boxes\" : [ { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ] }, { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ] } ], \"allowRemove\" : false }";
    }


    public static MappingBuilder stubSetOrderShipmentBoxes200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String setOrderShipmentBoxes200ResponseSample1() {
        return "{ \"result\" : { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 } ] }, \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setOrderShipmentBoxesRequestSample1() {
        return "{ \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubSetShipmentPalletsCount200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCountFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String setShipmentPalletsCount200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setShipmentPalletsCountRequestSample1() {
        return "{ \"placesCount\" : 0 }";
    }


    public static MappingBuilder stubSkipGoodsFeedbacksReaction200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReaction500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubSkipGoodsFeedbacksReactionFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/skip-reaction"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String skipGoodsFeedbacksReaction200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String skipGoodsFeedbacksReaction500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String skipGoodsFeedbacksReactionRequestSample1() {
        return "{ \"feedbackIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubTransferOrdersFromShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String transferOrdersFromShipment200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String transferOrdersFromShipmentRequestSample1() {
        return "{ \"orderIds\" : [ 0, 0, 0, 0, 0 ] }";
    }


    public static MappingBuilder stubUpdateBusinessPrices200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPrices500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateBusinessPricesFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updateBusinessPrices200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateBusinessPrices500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateBusinessPricesRequestSample1() {
        return "{ \"offers\" : [ { \"price\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"offerId\" : \"offerId\" } ] }";
    }


    public static MappingBuilder stubUpdateCampaignOffers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateCampaignOffersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateCampaignOffers200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateCampaignOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateCampaignOffersRequestSample1() {
        return "{ \"offers\" : [ { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } }, { \"available\" : true, \"vat\" : 0, \"offerId\" : \"offerId\", \"quantum\" : { \"minQuantity\" : 1, \"stepQuantity\" : 60 } } ] }";
    }


    public static MappingBuilder stubUpdateGoodsFeedbackComment200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackComment500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateGoodsFeedbackCommentFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/goods-feedback/comments/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updateGoodsFeedbackComment200ResponseSample1() {
        return "{ \"result\" : { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" }, \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateGoodsFeedbackComment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateGoodsFeedbackCommentRequestSample1() {
        return "{ \"feedbackId\" : 0, \"comment\" : { \"id\" : 6, \"text\" : \"text\", \"parentId\" : 1 } }";
    }


    public static MappingBuilder stubUpdateOfferContent200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContent500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferContentFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-cards/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updateOfferContent200ResponseSample1() {
        return "{ \"results\" : [ { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ] }, { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ] } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferContent500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOfferContentRequestSample1() {
        return "{ \"offersContent\" : [ { \"offerId\" : \"offerId\", \"categoryId\" : 0, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"offerId\" : \"offerId\", \"categoryId\" : 0, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"offerId\" : \"offerId\", \"categoryId\" : 0, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"offerId\" : \"offerId\", \"categoryId\" : 0, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"offerId\" : \"offerId\", \"categoryId\" : 0, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] } ] }";
    }


    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubUpdateOfferMappingEntries500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappingEntriesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-mapping-entries/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateOfferMappingEntries200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappingEntries500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOfferMappingEntriesRequestSample1() {
        return "{ \"offerMappingEntries\" : [ { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } }, { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } }, { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } }, { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } }, { \"offer\" : { \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ], \"certificate\" : \"certificate\", \"description\" : \"description\", \"availability\" : \"ACTIVE\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"manufacturer\" : \"manufacturer\", \"urls\" : [ \"urls\", \"urls\" ], \"deliveryDurationDays\" : 5, \"feedId\" : 0, \"vendor\" : \"LEVENHUK\", \"transportUnitSize\" : 1, \"id\" : \"id\", \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ], \"lifeTimeDays\" : 9, \"quantumOfSupply\" : 5, \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ], \"processingState\" : { \"notes\" : [ { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" }, { \"payload\" : \"payload\", \"type\" : \"ASSORTMENT\" } ], \"status\" : \"UNKNOWN\" }, \"shopSku\" : \"shopSku\", \"boxCount\" : 2, \"minShipment\" : 6, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"shelfLifeDays\" : 7, \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"guaranteePeriodDays\" : 3 }, \"mapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"awaitingModerationMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 }, \"rejectedMapping\" : { \"modelId\" : 7, \"marketSku\" : 4, \"categoryId\" : 1 } } ] }";
    }


    public static MappingBuilder stubUpdateOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updateOfferMappings200ResponseSample1() {
        return "{ \"results\" : [ { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] }, { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOfferMappingsRequestSample1() {
        return "{ \"offerMappings\" : [ { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } } ], \"onlyPartnerMediaContent\" : true }";
    }


    public static MappingBuilder stubUpdateOrderItems200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItemsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String updateOrderItems400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderItemsRequestSample1() {
        return "{ \"reason\" : \"PARTNER_REQUESTED_REMOVE\", \"items\" : [ { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"count\" : 0, \"id\" : 0 }, { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"count\" : 0, \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubUpdateOrderStatus200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatusFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String updateOrderStatus200ResponseSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } }";
    }
    public static String updateOrderStatus400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderStatusRequestSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dates\" : { \"realDeliveryDate\" : \"2000-01-23\" } }, \"substatus\" : \"RESERVATION_EXPIRED\", \"status\" : \"PLACING\" } }";
    }


    public static MappingBuilder stubUpdateOrderStatuses200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatusesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateOrderStatuses200ResponseSample1() {
        return "{ \"result\" : { \"orders\" : [ { \"substatus\" : \"RESERVATION_EXPIRED\", \"updateStatus\" : \"OK\", \"id\" : 0, \"status\" : \"PLACING\", \"errorDetails\" : \"errorDetails\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"updateStatus\" : \"OK\", \"id\" : 0, \"status\" : \"PLACING\", \"errorDetails\" : \"errorDetails\" } ] }, \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderStatusesRequestSample1() {
        return "{ \"orders\" : [ { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" } ] }";
    }


    public static MappingBuilder stubUpdatePrices200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePrices500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdatePricesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offer-prices/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updatePrices200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updatePrices400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePrices500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updatePricesRequestSample1() {
        return "{ \"offers\" : [ { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\" }, { \"price\" : { \"vat\" : 1, \"discountBase\" : 6.027456183070403, \"currencyId\" : \"RUR\", \"value\" : 0.8008281904610115 }, \"offerId\" : \"offerId\" } ] }";
    }


    public static MappingBuilder stubUpdatePromoOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdatePromoOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/promos/offers/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updatePromoOffers200ResponseSample1() {
        return "{ \"result\" : { \"rejectedOffers\" : [ { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" }, { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" } ], \"warningOffers\" : [ { \"warnings\" : [ { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] }, { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] } ], \"offerId\" : \"offerId\" }, { \"warnings\" : [ { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] }, { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] } ], \"offerId\" : \"offerId\" } ] }, \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updatePromoOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updatePromoOffersRequestSample1() {
        return "{ \"offers\" : [ { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 1, \"price\" : 1 } } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 1, \"price\" : 1 } } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 1, \"price\" : 1 } } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 1, \"price\" : 1 } } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 1, \"price\" : 1 } } } ], \"promoId\" : \"promoId\" }";
    }


    public static MappingBuilder stubUpdateStocks200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocksFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateStocks200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateStocks400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateStocksRequestSample1() {
        return "{ \"skus\" : [ { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] } ] }";
    }


}
