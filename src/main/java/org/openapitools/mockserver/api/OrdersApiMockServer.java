/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class OrdersApiMockServer {

    public static MappingBuilder stubAcceptOrderCancellation200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellation500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubAcceptOrderCancellationFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String acceptOrderCancellation200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String acceptOrderCancellation500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String acceptOrderCancellationRequestSample1() {
        return "{ \"reason\" : \"ORDER_DELIVERED\", \"accepted\" : true }";
    }


    public static MappingBuilder stubGetOrder200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrder500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrder200ResponseSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } }";
    }
    public static String getOrder400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrder500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrders200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrders500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOrdersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String status, @javax.annotation.Nullable String substatus, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String supplierShipmentDateFrom, @javax.annotation.Nullable String supplierShipmentDateTo, @javax.annotation.Nullable String updatedAtFrom, @javax.annotation.Nullable String updatedAtTo, @javax.annotation.Nullable String dispatchType, @javax.annotation.Nullable String fake, @javax.annotation.Nullable String hasCis, @javax.annotation.Nullable String onlyWaitingForCancellationApprove, @javax.annotation.Nullable String onlyEstimatedDelivery, @javax.annotation.Nullable String buyerType, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }
        if(substatus != null) {
            stub = stub.withQueryParam("substatus", equalTo(substatus));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(supplierShipmentDateFrom != null) {
            stub = stub.withQueryParam("supplierShipmentDateFrom", equalTo(supplierShipmentDateFrom));
        }
        if(supplierShipmentDateTo != null) {
            stub = stub.withQueryParam("supplierShipmentDateTo", equalTo(supplierShipmentDateTo));
        }
        if(updatedAtFrom != null) {
            stub = stub.withQueryParam("updatedAtFrom", equalTo(updatedAtFrom));
        }
        if(updatedAtTo != null) {
            stub = stub.withQueryParam("updatedAtTo", equalTo(updatedAtTo));
        }
        if(dispatchType != null) {
            stub = stub.withQueryParam("dispatchType", equalTo(dispatchType));
        }
        if(fake != null) {
            stub = stub.withQueryParam("fake", equalTo(fake));
        }
        if(hasCis != null) {
            stub = stub.withQueryParam("hasCis", equalTo(hasCis));
        }
        if(onlyWaitingForCancellationApprove != null) {
            stub = stub.withQueryParam("onlyWaitingForCancellationApprove", equalTo(onlyWaitingForCancellationApprove));
        }
        if(onlyEstimatedDelivery != null) {
            stub = stub.withQueryParam("onlyEstimatedDelivery", equalTo(onlyEstimatedDelivery));
        }
        if(buyerType != null) {
            stub = stub.withQueryParam("buyerType", equalTo(buyerType));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOrders200ResponseSample1() {
        return "{ \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 }, \"orders\" : [ { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" }, { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String getOrders400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrders500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubProvideOrderDigitalCodes200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodes500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderDigitalCodesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String provideOrderDigitalCodes200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderDigitalCodes500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String provideOrderDigitalCodesRequestSample1() {
        return "{ \"items\" : [ { \"activate_till\" : \"2000-01-23\", \"code\" : \"code\", \"slip\" : \"slip\", \"id\" : 0 }, { \"activate_till\" : \"2000-01-23\", \"code\" : \"code\", \"slip\" : \"slip\", \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubProvideOrderItemIdentifiers200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiers500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubProvideOrderItemIdentifiersFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/identifiers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String provideOrderItemIdentifiers200ResponseSample1() {
        return "{ \"result\" : { \"items\" : [ { \"offerName\" : \"offerName\", \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"price\" : 1.4658129805029452, \"vat\" : \"NO_VAT\", \"count\" : 6, \"offerId\" : \"offerId\", \"id\" : 0 }, { \"offerName\" : \"offerName\", \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"price\" : 1.4658129805029452, \"vat\" : \"NO_VAT\", \"count\" : 6, \"offerId\" : \"offerId\", \"id\" : 0 } ] }, \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String provideOrderItemIdentifiers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String provideOrderItemIdentifiersRequestSample1() {
        return "{ \"items\" : [ { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0 }, { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubSetOrderBoxLayout200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayout500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubSetOrderBoxLayoutFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String setOrderBoxLayout200ResponseSample1() {
        return "{ \"result\" : { \"boxes\" : [ { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ], \"boxId\" : 5 }, { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ], \"boxId\" : 5 } ] }, \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderBoxLayout500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setOrderBoxLayoutRequestSample1() {
        return "{ \"boxes\" : [ { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ] }, { \"items\" : [ { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 }, { \"partialCount\" : { \"current\" : 1, \"total\" : 2 }, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"id\" : 0, \"fullCount\" : 1 } ] } ], \"allowRemove\" : false }";
    }


    public static MappingBuilder stubSetOrderShipmentBoxes200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxes500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetOrderShipmentBoxesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String setOrderShipmentBoxes200ResponseSample1() {
        return "{ \"result\" : { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 } ] }, \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setOrderShipmentBoxes500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setOrderShipmentBoxesRequestSample1() {
        return "{ \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubUpdateOrderItems200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItems500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderItemsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/items"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String updateOrderItems400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderItems500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderItemsRequestSample1() {
        return "{ \"reason\" : \"PARTNER_REQUESTED_REMOVE\", \"items\" : [ { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"count\" : 0, \"id\" : 0 }, { \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"count\" : 0, \"id\" : 0 } ] }";
    }


    public static MappingBuilder stubUpdateOrderStatus200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatus500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatusFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/status"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String updateOrderStatus200ResponseSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dispatchType\" : \"UNKNOWN\", \"address\" : { \"country\" : \"country\", \"city\" : \"city\", \"postcode\" : \"postcode\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"house\" : \"house\", \"subway\" : \"subway\", \"phone\" : \"phone\", \"street\" : \"street\", \"district\" : \"district\", \"recipient\" : \"recipient\", \"entryphone\" : \"entryphone\", \"block\" : \"block\", \"entrance\" : \"entrance\", \"floor\" : \"floor\", \"apartment\" : \"apartment\" }, \"liftType\" : \"NOT_NEEDED\", \"deliveryServiceId\" : 6, \"estimated\" : true, \"dates\" : { \"fromDate\" : \"23-09-2022\", \"toDate\" : \"23-09-2022\", \"fromTime\" : \"fromTime\", \"toTime\" : \"toTime\", \"realDeliveryDate\" : \"23-09-2022\" }, \"type\" : \"DELIVERY\", \"serviceName\" : \"serviceName\", \"shipments\" : [ { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] }, { \"boxes\" : [ { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 }, { \"fulfilmentId\" : \"fulfilmentId\", \"id\" : 3 } ], \"id\" : 6, \"shipmentDate\" : \"23-09-2022\", \"shipmentTime\" : \"shipmentTime\", \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ] } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 }, { \"trackCode\" : \"trackCode\", \"deliveryServiceId\" : 9 } ], \"courier\" : { \"vehicleDescription\" : \"vehicleDescription\", \"phone\" : \"phone\", \"phoneExtension\" : \"phoneExtension\", \"fullName\" : \"fullName\", \"vehicleNumber\" : \"vehicleNumber\" }, \"price\" : 5.025004791520295, \"outletStorageLimitDate\" : \"23-09-2022\", \"eacType\" : \"MERCHANT_TO_COURIER\", \"liftPrice\" : 8.762042012749001, \"eacCode\" : \"eacCode\", \"id\" : \"id\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"deliveryPartnerType\" : \"SHOP\", \"outletCode\" : \"outletCode\" }, \"notes\" : \"notes\", \"substatus\" : \"RESERVATION_EXPIRED\", \"deliveryTotal\" : 1.4658129805029452, \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655, \"creationDate\" : \"23-09-2022 09:12:41\", \"buyerItemsTotal\" : 5.962133916683182, \"paymentType\" : \"PREPAID\", \"buyer\" : { \"lastName\" : \"lastName\", \"firstName\" : \"firstName\", \"middleName\" : \"middleName\", \"id\" : \"id\", \"type\" : \"PERSON\" }, \"expiryDate\" : \"23-09-2022 09:12:41\", \"buyerTotalBeforeDiscount\" : 7.061401241503109, \"itemsTotal\" : 6.027456183070403, \"buyerTotal\" : 5.637376656633329, \"subsidies\" : [ { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 4.965218492984954, \"type\" : \"YANDEX_CASHBACK\" } ], \"paymentMethod\" : \"CASH_ON_DELIVERY\", \"currency\" : \"RUR\", \"fake\" : true, \"id\" : 0, \"taxSystem\" : \"OSN\", \"cancelRequested\" : true, \"items\" : [ { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] }, { \"offerName\" : \"offerName\", \"subsidy\" : 1.0246457001441578, \"instances\" : [ { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" }, { \"rnpt\" : \"rnpt\", \"gtd\" : \"gtd\", \"cisFull\" : \"cisFull\", \"uin\" : \"uin\", \"cis\" : \"cis\" } ], \"priceBeforeDiscount\" : 7.386281948385884, \"count\" : 1, \"vat\" : \"NO_VAT\", \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ], \"buyerPriceBeforeDiscount\" : 4.145608029883936, \"shopSku\" : \"shopSku\", \"price\" : 3.616076749251911, \"partnerWarehouseId\" : \"partnerWarehouseId\", \"subsidies\" : [ { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" }, { \"amount\" : 1.1730742509559433, \"type\" : \"YANDEX_CASHBACK\" } ], \"offerId\" : \"offerId\", \"buyerPrice\" : 2.027123023002322, \"details\" : [ { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 }, { \"updateDate\" : \"23-09-2022\", \"itemStatus\" : \"REJECTED\", \"itemCount\" : 7 } ], \"id\" : 9, \"promos\" : [ { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" }, { \"subsidy\" : 6.84685269835264, \"shopPromoId\" : \"shopPromoId\", \"discount\" : 1.4894159098541704, \"marketPromoId\" : \"marketPromoId\", \"type\" : \"DIRECT_DISCOUNT\" } ] } ], \"status\" : \"PLACING\", \"updatedAt\" : \"23-09-2022 09:12:41\" } }";
    }
    public static String updateOrderStatus400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatus500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderStatusRequestSample1() {
        return "{ \"order\" : { \"delivery\" : { \"dates\" : { \"realDeliveryDate\" : \"2000-01-23\" } }, \"substatus\" : \"RESERVATION_EXPIRED\", \"status\" : \"PLACING\" } }";
    }


    public static MappingBuilder stubUpdateOrderStatuses200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatuses500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOrderStatusesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/status-update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateOrderStatuses200ResponseSample1() {
        return "{ \"result\" : { \"orders\" : [ { \"substatus\" : \"RESERVATION_EXPIRED\", \"updateStatus\" : \"OK\", \"id\" : 0, \"status\" : \"PLACING\", \"errorDetails\" : \"errorDetails\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"updateStatus\" : \"OK\", \"id\" : 0, \"status\" : \"PLACING\", \"errorDetails\" : \"errorDetails\" } ] }, \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOrderStatuses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOrderStatusesRequestSample1() {
        return "{ \"orders\" : [ { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" }, { \"substatus\" : \"RESERVATION_EXPIRED\", \"id\" : 0, \"status\" : \"PLACING\" } ] }";
    }


}
