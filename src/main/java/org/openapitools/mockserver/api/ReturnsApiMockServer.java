/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class ReturnsApiMockServer {

    public static MappingBuilder stubGetReturn200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturn500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String getReturn200ResponseSample1() {
        return "{ \"result\" : { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 }, \"status\" : \"OK\" }";
    }
    public static String getReturn400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturn500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturnApplication200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplication500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubGetReturnApplicationFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String getReturnApplication400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnApplication500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturnPhoto200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhoto500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/octet-stream")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static MappingBuilder stubGetReturnPhotoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String itemId, @javax.annotation.Nonnull String imageHash, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"))
            .withHeader("Accept", havingExactly("application/octet-stream", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));
        stub = stub.withPathParam("itemId", equalTo(itemId));
        stub = stub.withPathParam("imageHash", equalTo(imageHash));

        return stub;
    }

    public static String getReturnPhoto400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturnPhoto500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetReturns200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturns500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static MappingBuilder stubGetReturnsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String orderIds, @javax.annotation.Nullable String statuses, @javax.annotation.Nullable String type, @javax.annotation.Nullable String fromDate, @javax.annotation.Nullable String toDate, @javax.annotation.Nullable String fromDate2, @javax.annotation.Nullable String toDate2, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/returns"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(orderIds != null) {
            stub = stub.withQueryParam("orderIds", equalTo(orderIds));
        }
        if(statuses != null) {
            stub = stub.withQueryParam("statuses", equalTo(statuses));
        }
        if(type != null) {
            stub = stub.withQueryParam("type", equalTo(type));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }
        if(toDate != null) {
            stub = stub.withQueryParam("toDate", equalTo(toDate));
        }
        if(fromDate2 != null) {
            stub = stub.withQueryParam("fromDate2", equalTo(fromDate2));
        }
        if(toDate2 != null) {
            stub = stub.withQueryParam("toDate2", equalTo(toDate2));
        }

        return stub;
    }

    public static String getReturns200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"nextPageToken\" : \"nextPageToken\" }, \"returns\" : [ { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 }, { \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"fastReturn\" : true, \"orderId\" : 6, \"shipmentRecipientType\" : \"SHOP\", \"refundStatus\" : \"STARTED_BY_USER\", \"logisticPickupPoint\" : { \"logisticPartnerId\" : 5, \"address\" : { \"country\" : \"Россия\", \"city\" : \"Москва\", \"street\" : \"Стрелецкая улица\", \"postcode\" : \"123518\", \"house\" : \"9к2\" }, \"instruction\" : \"instruction\", \"name\" : \"name\", \"id\" : 1, \"type\" : \"WAREHOUSE\" }, \"id\" : 0, \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"items\" : [ { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] }, { \"shopSku\" : \"shopSku\", \"instances\" : [ { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" }, { \"stockType\" : \"FIT\", \"imei\" : \"imei\", \"cis\" : \"cis\", \"status\" : \"CREATED\" } ], \"marketSku\" : 2, \"count\" : 7, \"decisions\" : [ { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 }, { \"images\" : [ \"images\", \"images\" ], \"returnItemId\" : 9, \"subreasonType\" : \"USER_DID_NOT_LIKE\", \"count\" : 3, \"comment\" : \"comment\", \"decisionType\" : \"REFUND_MONEY\", \"reasonType\" : \"BAD_QUALITY\", \"partnerCompensation\" : 4, \"refundAmount\" : 2 } ], \"tracks\" : [ { \"trackCode\" : \"trackCode\" }, { \"trackCode\" : \"trackCode\" } ] } ], \"returnType\" : \"UNREDEEMED\", \"shipmentStatus\" : \"CREATED\", \"refundAmount\" : 5 } ] }, \"status\" : \"OK\" }";
    }
    public static String getReturns400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getReturns500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSetReturnDecision200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecision500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSetReturnDecisionFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String setReturnDecision200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String setReturnDecision400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setReturnDecision401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setReturnDecision403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setReturnDecision404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setReturnDecision420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setReturnDecision500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setReturnDecisionRequestSample1() {
        return "{ \"returnItemId\" : 1, \"decisionType\" : \"REFUND_MONEY_INCLUDING_SHIPMENT\", \"comment\" : \"Вернуть 149 рублей за пересылку\" }";
    }


    public static MappingBuilder stubSubmitReturnDecision200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecision500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static MappingBuilder stubSubmitReturnDecisionFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String returnId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("returnId", equalTo(returnId));

        return stub;
    }

    public static String submitReturnDecision200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String submitReturnDecision500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



}
