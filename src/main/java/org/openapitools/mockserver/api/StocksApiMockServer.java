/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class StocksApiMockServer {

    public static MappingBuilder stubGetStocks200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocks500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetStocksFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getStocks200ResponseSample1() {
        return "{ \"result\" : { \"warehouses\" : [ { \"offers\" : [ { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"warehouseId\" : 0 }, { \"offers\" : [ { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"offerId\" : \"offerId\", \"turnoverSummary\" : { \"turnoverDays\" : 6.027456183070403, \"turnover\" : \"LOW\" }, \"stocks\" : [ { \"count\" : 1, \"type\" : \"FIT\" }, { \"count\" : 1, \"type\" : \"FIT\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"warehouseId\" : 0 } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
    }
    public static String getStocks400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getStocks500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getStocksRequestSample1() {
        return "{ \"archived\" : true, \"withTurnover\" : false, \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubUpdateStocks200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocks500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateStocksFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/offers/stocks"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateStocks200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateStocks400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateStocks500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateStocksRequestSample1() {
        return "{ \"skus\" : [ { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] }, { \"sku\" : \"sku\", \"items\" : [ { \"count\" : 160165638, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ] } ] }";
    }


}
