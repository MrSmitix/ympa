/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class OrderLabelsApiMockServer {

    public static MappingBuilder stubGenerateOrderLabel200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabel500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabelFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String boxId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        stub = stub.withPathParam("boxId", equalTo(boxId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateOrderLabel400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabel500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGenerateOrderLabels200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabels500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubGenerateOrderLabelsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String generateOrderLabels400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String generateOrderLabels500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOrderLabelsData200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsData500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static MappingBuilder stubGetOrderLabelsDataFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String orderId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("orderId", equalTo(orderId));

        return stub;
    }

    public static String getOrderLabelsData200ResponseSample1() {
        return "{ \"result\" : { \"parcelBoxLabels\" : [ { \"supplierName\" : \"supplierName\", \"deliveryServiceId\" : \"deliveryServiceId\", \"orderId\" : 1, \"fulfilmentId\" : \"fulfilmentId\", \"orderNum\" : \"orderNum\", \"weight\" : \"weight\", \"url\" : \"url\", \"deliveryServiceName\" : \"deliveryServiceName\", \"deliveryAddress\" : \"deliveryAddress\", \"recipientName\" : \"recipientName\", \"place\" : \"place\", \"shipmentDate\" : \"shipmentDate\", \"boxId\" : 5 }, { \"supplierName\" : \"supplierName\", \"deliveryServiceId\" : \"deliveryServiceId\", \"orderId\" : 1, \"fulfilmentId\" : \"fulfilmentId\", \"orderNum\" : \"orderNum\", \"weight\" : \"weight\", \"url\" : \"url\", \"deliveryServiceName\" : \"deliveryServiceName\", \"deliveryAddress\" : \"deliveryAddress\", \"recipientName\" : \"recipientName\", \"place\" : \"place\", \"shipmentDate\" : \"shipmentDate\", \"boxId\" : 5 } ], \"orderId\" : 0, \"placesNumber\" : 6, \"url\" : \"url\" }, \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOrderLabelsData500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



}
