/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.OrderCancellationReasonType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * AcceptOrderCancellationRequest
 */
@JsonPropertyOrder({
  AcceptOrderCancellationRequest.JSON_PROPERTY_ACCEPTED,
  AcceptOrderCancellationRequest.JSON_PROPERTY_REASON
})
@JsonTypeName("AcceptOrderCancellationRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class AcceptOrderCancellationRequest {
    public static final String JSON_PROPERTY_ACCEPTED = "accepted";
    private Boolean accepted;

    public static final String JSON_PROPERTY_REASON = "reason";
    private OrderCancellationReasonType reason;

    public AcceptOrderCancellationRequest(Boolean accepted) {
        this.accepted = accepted;
    }

    public AcceptOrderCancellationRequest accepted(Boolean accepted) {
        this.accepted = accepted;
        return this;
    }

    /**
     * Решение об отмене заказа:  * &#x60;true&#x60; — заказ отменяется, служба доставки узнала об отмене до передачи заказа покупателю. * &#x60;false&#x60; — заказ не отменяется, так как он уже доставлен покупателю курьером или передан в пункт выдачи заказов. 
     * @return accepted
     */
    @NotNull
    @Schema(name = "accepted", description = "Решение об отмене заказа:  * `true` — заказ отменяется, служба доставки узнала об отмене до передачи заказа покупателю. * `false` — заказ не отменяется, так как он уже доставлен покупателю курьером или передан в пункт выдачи заказов. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ACCEPTED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getAccepted() {
        return accepted;
    }

    @JsonProperty(JSON_PROPERTY_ACCEPTED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAccepted(Boolean accepted) {
        this.accepted = accepted;
    }

    public AcceptOrderCancellationRequest reason(OrderCancellationReasonType reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get reason
     * @return reason
     */
    @Nullable
    @Schema(name = "reason", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OrderCancellationReasonType getReason() {
        return reason;
    }

    @JsonProperty(JSON_PROPERTY_REASON)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReason(OrderCancellationReasonType reason) {
        this.reason = reason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AcceptOrderCancellationRequest acceptOrderCancellationRequest = (AcceptOrderCancellationRequest) o;
        return Objects.equals(this.accepted, acceptOrderCancellationRequest.accepted) &&
            Objects.equals(this.reason, acceptOrderCancellationRequest.reason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accepted, reason);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AcceptOrderCancellationRequest {\n");
        sb.append("    accepted: ").append(toIndentedString(accepted)).append("\n");
        sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

