/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.ChatMessagePayloadDTO;
import org.openapitools.model.ChatMessageSenderType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о сообщениях.
 */
@JsonPropertyOrder({
  ChatMessageDTO.JSON_PROPERTY_MESSAGE_ID,
  ChatMessageDTO.JSON_PROPERTY_CREATED_AT,
  ChatMessageDTO.JSON_PROPERTY_SENDER,
  ChatMessageDTO.JSON_PROPERTY_MESSAGE,
  ChatMessageDTO.JSON_PROPERTY_PAYLOAD
})
@JsonTypeName("ChatMessageDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class ChatMessageDTO {
    public static final String JSON_PROPERTY_MESSAGE_ID = "messageId";
    private Long messageId;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_SENDER = "sender";
    private ChatMessageSenderType sender;

    public static final String JSON_PROPERTY_MESSAGE = "message";
    private String message;

    public static final String JSON_PROPERTY_PAYLOAD = "payload";
    private List<@Valid ChatMessagePayloadDTO> payload = null;

    public ChatMessageDTO(Long messageId, OffsetDateTime createdAt, ChatMessageSenderType sender) {
        this.messageId = messageId;
        this.createdAt = createdAt;
        this.sender = sender;
    }

    public ChatMessageDTO messageId(Long messageId) {
        this.messageId = messageId;
        return this;
    }

    /**
     * Идентификатор сообщения.
     * @return messageId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getMessageId() {
        return messageId;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMessageId(Long messageId) {
        this.messageId = messageId;
    }

    public ChatMessageDTO createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
     * @return createdAt
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public ChatMessageDTO sender(ChatMessageSenderType sender) {
        this.sender = sender;
        return this;
    }

    /**
     * Get sender
     * @return sender
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_SENDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ChatMessageSenderType getSender() {
        return sender;
    }

    @JsonProperty(JSON_PROPERTY_SENDER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSender(ChatMessageSenderType sender) {
        this.sender = sender;
    }

    public ChatMessageDTO message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
     * @return message
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessage() {
        return message;
    }

    @JsonProperty(JSON_PROPERTY_MESSAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMessage(String message) {
        this.message = message;
    }

    public ChatMessageDTO payload(List<@Valid ChatMessagePayloadDTO> payload) {
        this.payload = payload;
        return this;
    }

    public ChatMessageDTO addPayloadItem(ChatMessagePayloadDTO payloadItem) {
        if (this.payload == null) {
            this.payload = new ArrayList<>();
        }
        this.payload.add(payloadItem);
        return this;
    }

    /**
     * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
     * @return payload
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PAYLOAD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid ChatMessagePayloadDTO> getPayload() {
        return payload;
    }

    @JsonProperty(JSON_PROPERTY_PAYLOAD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPayload(List<@Valid ChatMessagePayloadDTO> payload) {
        this.payload = payload;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChatMessageDTO chatMessageDTO = (ChatMessageDTO) o;
        return Objects.equals(this.messageId, chatMessageDTO.messageId) &&
            Objects.equals(this.createdAt, chatMessageDTO.createdAt) &&
            Objects.equals(this.sender, chatMessageDTO.sender) &&
            Objects.equals(this.message, chatMessageDTO.message) &&
            Objects.equals(this.payload, chatMessageDTO.payload);
    }

    @Override
    public int hashCode() {
        return Objects.hash(messageId, createdAt, sender, message, payload);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChatMessageDTO {\n");
        sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

