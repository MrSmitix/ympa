/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.UnitDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Единицы измерения характеристики товара.
 */
@Schema(name = "CategoryParameterUnitDTO", description = "Единицы измерения характеристики товара.")
@JsonPropertyOrder({
  CategoryParameterUnitDTO.JSON_PROPERTY_DEFAULT_UNIT_ID,
  CategoryParameterUnitDTO.JSON_PROPERTY_UNITS
})
@JsonTypeName("CategoryParameterUnitDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CategoryParameterUnitDTO {
    public static final String JSON_PROPERTY_DEFAULT_UNIT_ID = "defaultUnitId";
    private Long defaultUnitId;

    public static final String JSON_PROPERTY_UNITS = "units";
    private List<@Valid UnitDTO> units = new ArrayList<>();

    public CategoryParameterUnitDTO(Long defaultUnitId, List<@Valid UnitDTO> units) {
        this.defaultUnitId = defaultUnitId;
        this.units = units;
    }

    public CategoryParameterUnitDTO defaultUnitId(Long defaultUnitId) {
        this.defaultUnitId = defaultUnitId;
        return this;
    }

    /**
     * Единица измерения по умолчанию.
     * @return defaultUnitId
     */
    @NotNull
    @Schema(name = "defaultUnitId", description = "Единица измерения по умолчанию.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DEFAULT_UNIT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getDefaultUnitId() {
        return defaultUnitId;
    }

    @JsonProperty(JSON_PROPERTY_DEFAULT_UNIT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDefaultUnitId(Long defaultUnitId) {
        this.defaultUnitId = defaultUnitId;
    }

    public CategoryParameterUnitDTO units(List<@Valid UnitDTO> units) {
        this.units = units;
        return this;
    }

    public CategoryParameterUnitDTO addUnitsItem(UnitDTO unitsItem) {
        this.units.add(unitsItem);
        return this;
    }

    /**
     * Допустимые единицы измерения.
     * @return units
     */
    @NotNull
    @Schema(name = "units", description = "Допустимые единицы измерения.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_UNITS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid UnitDTO> getUnits() {
        return units;
    }

    @JsonProperty(JSON_PROPERTY_UNITS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setUnits(List<@Valid UnitDTO> units) {
        this.units = units;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CategoryParameterUnitDTO categoryParameterUnitDTO = (CategoryParameterUnitDTO) o;
        return Objects.equals(this.defaultUnitId, categoryParameterUnitDTO.defaultUnitId) &&
            Objects.equals(this.units, categoryParameterUnitDTO.units);
    }

    @Override
    public int hashCode() {
        return Objects.hash(defaultUnitId, units);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CategoryParameterUnitDTO {\n");
        sb.append("    defaultUnitId: ").append(toIndentedString(defaultUnitId)).append("\n");
        sb.append("    units: ").append(toIndentedString(units)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

