/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Параметры товара в акции с типом &#x60;DIRECT_DISCOUNT&#x60; или &#x60;BLUE_FLASH&#x60;.  Обязательный параметр для акций с этими типами. 
 */
@JsonPropertyOrder({
  UpdatePromoOfferDiscountParamsDTO.JSON_PROPERTY_PRICE,
  UpdatePromoOfferDiscountParamsDTO.JSON_PROPERTY_PROMO_PRICE
})
@JsonTypeName("UpdatePromoOfferDiscountParamsDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class UpdatePromoOfferDiscountParamsDTO {
    public static final String JSON_PROPERTY_PRICE = "price";
    private Long price;

    public static final String JSON_PROPERTY_PROMO_PRICE = "promoPrice";
    private Long promoPrice;

    public UpdatePromoOfferDiscountParamsDTO() {
    }

    public UpdatePromoOfferDiscountParamsDTO price(Long price) {
        this.price = price;
        return this;
    }

    /**
     * Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Число должно быть целым. 
     * minimum: 1
     * @return price
     */
    @Nullable
    @Min(1L)
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrice(Long price) {
        this.price = price;
    }

    public UpdatePromoOfferDiscountParamsDTO promoPrice(Long promoPrice) {
        this.promoPrice = promoPrice;
        return this;
    }

    /**
     * Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Число должно быть целым. 
     * minimum: 1
     * @return promoPrice
     */
    @Nullable
    @Min(1L)
    @JsonProperty(JSON_PROPERTY_PROMO_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getPromoPrice() {
        return promoPrice;
    }

    @JsonProperty(JSON_PROPERTY_PROMO_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPromoPrice(Long promoPrice) {
        this.promoPrice = promoPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePromoOfferDiscountParamsDTO updatePromoOfferDiscountParamsDTO = (UpdatePromoOfferDiscountParamsDTO) o;
        return Objects.equals(this.price, updatePromoOfferDiscountParamsDTO.price) &&
            Objects.equals(this.promoPrice, updatePromoOfferDiscountParamsDTO.promoPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(price, promoPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdatePromoOfferDiscountParamsDTO {\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    promoPrice: ").append(toIndentedString(promoPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

