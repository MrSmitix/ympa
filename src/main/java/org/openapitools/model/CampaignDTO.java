/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.BusinessDTO;
import org.openapitools.model.PlacementType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о магазине.
 */
@JsonPropertyOrder({
  CampaignDTO.JSON_PROPERTY_DOMAIN,
  CampaignDTO.JSON_PROPERTY_ID,
  CampaignDTO.JSON_PROPERTY_CLIENT_ID,
  CampaignDTO.JSON_PROPERTY_BUSINESS,
  CampaignDTO.JSON_PROPERTY_PLACEMENT_TYPE
})
@JsonTypeName("CampaignDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CampaignDTO {
    public static final String JSON_PROPERTY_DOMAIN = "domain";
    private String domain;

    public static final String JSON_PROPERTY_ID = "id";
    private Long id;

    public static final String JSON_PROPERTY_CLIENT_ID = "clientId";
    private Long clientId;

    public static final String JSON_PROPERTY_BUSINESS = "business";
    private BusinessDTO business;

    public static final String JSON_PROPERTY_PLACEMENT_TYPE = "placementType";
    private PlacementType placementType;

    public CampaignDTO() {
    }

    public CampaignDTO domain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * URL магазина.
     * @return domain
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DOMAIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDomain() {
        return domain;
    }

    @JsonProperty(JSON_PROPERTY_DOMAIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDomain(String domain) {
        this.domain = domain;
    }

    public CampaignDTO id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор кампании.
     * @return id
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(Long id) {
        this.id = id;
    }

    public CampaignDTO clientId(Long clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Идентификатор плательщика в Яндекс Балансе.
     * @return clientId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getClientId() {
        return clientId;
    }

    @JsonProperty(JSON_PROPERTY_CLIENT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setClientId(Long clientId) {
        this.clientId = clientId;
    }

    public CampaignDTO business(BusinessDTO business) {
        this.business = business;
        return this;
    }

    /**
     * Get business
     * @return business
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_BUSINESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BusinessDTO getBusiness() {
        return business;
    }

    @JsonProperty(JSON_PROPERTY_BUSINESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBusiness(BusinessDTO business) {
        this.business = business;
    }

    public CampaignDTO placementType(PlacementType placementType) {
        this.placementType = placementType;
        return this;
    }

    /**
     * Get placementType
     * @return placementType
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PLACEMENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PlacementType getPlacementType() {
        return placementType;
    }

    @JsonProperty(JSON_PROPERTY_PLACEMENT_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlacementType(PlacementType placementType) {
        this.placementType = placementType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CampaignDTO campaignDTO = (CampaignDTO) o;
        return Objects.equals(this.domain, campaignDTO.domain) &&
            Objects.equals(this.id, campaignDTO.id) &&
            Objects.equals(this.clientId, campaignDTO.clientId) &&
            Objects.equals(this.business, campaignDTO.business) &&
            Objects.equals(this.placementType, campaignDTO.placementType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(domain, id, clientId, business, placementType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CampaignDTO {\n");
        sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
        sb.append("    business: ").append(toIndentedString(business)).append("\n");
        sb.append("    placementType: ").append(toIndentedString(placementType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

