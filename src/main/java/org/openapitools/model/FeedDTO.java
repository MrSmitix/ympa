/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import org.openapitools.model.FeedContentDTO;
import org.openapitools.model.FeedDownloadDTO;
import org.openapitools.model.FeedPlacementDTO;
import org.openapitools.model.FeedPublicationDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о прайс-листе.
 */
@Schema(name = "FeedDTO", description = "Информация о прайс-листе.")
@JsonPropertyOrder({
  FeedDTO.JSON_PROPERTY_ID,
  FeedDTO.JSON_PROPERTY_LOGIN,
  FeedDTO.JSON_PROPERTY_NAME,
  FeedDTO.JSON_PROPERTY_PASSWORD,
  FeedDTO.JSON_PROPERTY_UPLOAD_DATE,
  FeedDTO.JSON_PROPERTY_URL,
  FeedDTO.JSON_PROPERTY_CONTENT,
  FeedDTO.JSON_PROPERTY_DOWNLOAD,
  FeedDTO.JSON_PROPERTY_PLACEMENT,
  FeedDTO.JSON_PROPERTY_PUBLICATION
})
@JsonTypeName("FeedDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class FeedDTO {
    public static final String JSON_PROPERTY_ID = "id";
    private Long id;

    public static final String JSON_PROPERTY_LOGIN = "login";
    private String login;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_PASSWORD = "password";
    private String password;

    public static final String JSON_PROPERTY_UPLOAD_DATE = "uploadDate";
    private OffsetDateTime uploadDate;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_CONTENT = "content";
    private FeedContentDTO content;

    public static final String JSON_PROPERTY_DOWNLOAD = "download";
    private FeedDownloadDTO download;

    public static final String JSON_PROPERTY_PLACEMENT = "placement";
    private FeedPlacementDTO placement;

    public static final String JSON_PROPERTY_PUBLICATION = "publication";
    private FeedPublicationDTO publication;

    public FeedDTO() {
    }

    public FeedDTO id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор прайс-листа.
     * @return id
     */
    @Nullable
    @Schema(name = "id", description = "Идентификатор прайс-листа.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(Long id) {
        this.id = id;
    }

    public FeedDTO login(String login) {
        this.login = login;
        return this;
    }

    /**
     * Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
     * @return login
     */
    @Nullable
    @Schema(name = "login", description = "Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_LOGIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLogin() {
        return login;
    }

    @JsonProperty(JSON_PROPERTY_LOGIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLogin(String login) {
        this.login = login;
    }

    public FeedDTO name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
     * @return name
     */
    @Nullable
    @Schema(name = "name", description = "Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public FeedDTO password(String password) {
        this.password = password;
        return this;
    }

    /**
     * Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
     * @return password
     */
    @Nullable
    @Schema(name = "password", description = "Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPassword() {
        return password;
    }

    @JsonProperty(JSON_PROPERTY_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPassword(String password) {
        this.password = password;
    }

    public FeedDTO uploadDate(OffsetDateTime uploadDate) {
        this.uploadDate = uploadDate;
        return this;
    }

    /**
     * Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
     * @return uploadDate
     */
    @Nullable
    @Schema(name = "uploadDate", description = "Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_UPLOAD_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getUploadDate() {
        return uploadDate;
    }

    @JsonProperty(JSON_PROPERTY_UPLOAD_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setUploadDate(OffsetDateTime uploadDate) {
        this.uploadDate = uploadDate;
    }

    public FeedDTO url(String url) {
        this.url = url;
        return this;
    }

    /**
     * URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
     * @return url
     */
    @Nullable
    @Schema(name = "url", description = "URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public FeedDTO content(FeedContentDTO content) {
        this.content = content;
        return this;
    }

    /**
     * Get content
     * @return content
     */
    @Valid
    @Nullable
    @Schema(name = "content", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeedContentDTO getContent() {
        return content;
    }

    @JsonProperty(JSON_PROPERTY_CONTENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setContent(FeedContentDTO content) {
        this.content = content;
    }

    public FeedDTO download(FeedDownloadDTO download) {
        this.download = download;
        return this;
    }

    /**
     * Get download
     * @return download
     */
    @Valid
    @Nullable
    @Schema(name = "download", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DOWNLOAD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeedDownloadDTO getDownload() {
        return download;
    }

    @JsonProperty(JSON_PROPERTY_DOWNLOAD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDownload(FeedDownloadDTO download) {
        this.download = download;
    }

    public FeedDTO placement(FeedPlacementDTO placement) {
        this.placement = placement;
        return this;
    }

    /**
     * Get placement
     * @return placement
     */
    @Valid
    @Nullable
    @Schema(name = "placement", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PLACEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeedPlacementDTO getPlacement() {
        return placement;
    }

    @JsonProperty(JSON_PROPERTY_PLACEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlacement(FeedPlacementDTO placement) {
        this.placement = placement;
    }

    public FeedDTO publication(FeedPublicationDTO publication) {
        this.publication = publication;
        return this;
    }

    /**
     * Get publication
     * @return publication
     */
    @Valid
    @Nullable
    @Schema(name = "publication", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PUBLICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeedPublicationDTO getPublication() {
        return publication;
    }

    @JsonProperty(JSON_PROPERTY_PUBLICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPublication(FeedPublicationDTO publication) {
        this.publication = publication;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedDTO feedDTO = (FeedDTO) o;
        return Objects.equals(this.id, feedDTO.id) &&
            Objects.equals(this.login, feedDTO.login) &&
            Objects.equals(this.name, feedDTO.name) &&
            Objects.equals(this.password, feedDTO.password) &&
            Objects.equals(this.uploadDate, feedDTO.uploadDate) &&
            Objects.equals(this.url, feedDTO.url) &&
            Objects.equals(this.content, feedDTO.content) &&
            Objects.equals(this.download, feedDTO.download) &&
            Objects.equals(this.placement, feedDTO.placement) &&
            Objects.equals(this.publication, feedDTO.publication);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, login, name, password, uploadDate, url, content, download, placement, publication);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedDTO {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    login: ").append(toIndentedString(login)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    password: ").append(toIndentedString(password)).append("\n");
        sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    content: ").append(toIndentedString(content)).append("\n");
        sb.append("    download: ").append(toIndentedString(download)).append("\n");
        sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
        sb.append("    publication: ").append(toIndentedString(publication)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

