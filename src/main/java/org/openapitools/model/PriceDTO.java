/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import org.openapitools.model.CurrencyType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Цена с указанием скидки, валюты и времени последнего обновления.
 */
@Schema(name = "PriceDTO", description = "Цена с указанием скидки, валюты и времени последнего обновления.")
@JsonPropertyOrder({
  PriceDTO.JSON_PROPERTY_VALUE,
  PriceDTO.JSON_PROPERTY_DISCOUNT_BASE,
  PriceDTO.JSON_PROPERTY_CURRENCY_ID,
  PriceDTO.JSON_PROPERTY_VAT
})
@JsonTypeName("PriceDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class PriceDTO {
    public static final String JSON_PROPERTY_VALUE = "value";
    private BigDecimal value;

    public static final String JSON_PROPERTY_DISCOUNT_BASE = "discountBase";
    private BigDecimal discountBase;

    public static final String JSON_PROPERTY_CURRENCY_ID = "currencyId";
    private CurrencyType currencyId;

    public static final String JSON_PROPERTY_VAT = "vat";
    private Integer vat;

    public PriceDTO() {
    }

    public PriceDTO value(BigDecimal value) {
        this.value = value;
        return this;
    }

    /**
     * Цена на товар.
     * @return value
     */
    @Nullable
    @Schema(name = "value", description = "Цена на товар.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getValue() {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValue(BigDecimal value) {
        this.value = value;
    }

    public PriceDTO discountBase(BigDecimal discountBase) {
        this.discountBase = discountBase;
        return this;
    }

    /**
     * Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
     * @return discountBase
     */
    @Nullable
    @Schema(name = "discountBase", description = "Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DISCOUNT_BASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getDiscountBase() {
        return discountBase;
    }

    @JsonProperty(JSON_PROPERTY_DISCOUNT_BASE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDiscountBase(BigDecimal discountBase) {
        this.discountBase = discountBase;
    }

    public PriceDTO currencyId(CurrencyType currencyId) {
        this.currencyId = currencyId;
        return this;
    }

    /**
     * Get currencyId
     * @return currencyId
     */
    @Nullable
    @Schema(name = "currencyId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CURRENCY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CurrencyType getCurrencyId() {
        return currencyId;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrencyId(CurrencyType currencyId) {
        this.currencyId = currencyId;
    }

    public PriceDTO vat(Integer vat) {
        this.vat = vat;
        return this;
    }

    /**
     * Идентификатор ставки НДС, применяемой для товара:  * &#x60;2&#x60; — 10%. * &#x60;5&#x60; — 0%. * &#x60;6&#x60; — не облагается НДС. * &#x60;7&#x60; — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. 
     * @return vat
     */
    @Nullable
    @Schema(name = "vat", description = "Идентификатор ставки НДС, применяемой для товара:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_VAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getVat() {
        return vat;
    }

    @JsonProperty(JSON_PROPERTY_VAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVat(Integer vat) {
        this.vat = vat;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PriceDTO priceDTO = (PriceDTO) o;
        return Objects.equals(this.value, priceDTO.value) &&
            Objects.equals(this.discountBase, priceDTO.discountBase) &&
            Objects.equals(this.currencyId, priceDTO.currencyId) &&
            Objects.equals(this.vat, priceDTO.vat);
    }

    @Override
    public int hashCode() {
        return Objects.hash(value, discountBase, currencyId, vat);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PriceDTO {\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("    discountBase: ").append(toIndentedString(discountBase)).append("\n");
        sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
        sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

