/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Адрес точки продаж. 
 */
@JsonPropertyOrder({
  OutletAddressDTO.JSON_PROPERTY_REGION_ID,
  OutletAddressDTO.JSON_PROPERTY_STREET,
  OutletAddressDTO.JSON_PROPERTY_NUMBER,
  OutletAddressDTO.JSON_PROPERTY_BUILDING,
  OutletAddressDTO.JSON_PROPERTY_ESTATE,
  OutletAddressDTO.JSON_PROPERTY_BLOCK,
  OutletAddressDTO.JSON_PROPERTY_ADDITIONAL,
  OutletAddressDTO.JSON_PROPERTY_KM,
  OutletAddressDTO.JSON_PROPERTY_CITY
})
@JsonTypeName("OutletAddressDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OutletAddressDTO {
    public static final String JSON_PROPERTY_REGION_ID = "regionId";
    private Long regionId;

    public static final String JSON_PROPERTY_STREET = "street";
    private String street;

    public static final String JSON_PROPERTY_NUMBER = "number";
    private String number;

    public static final String JSON_PROPERTY_BUILDING = "building";
    private String building;

    public static final String JSON_PROPERTY_ESTATE = "estate";
    private String estate;

    public static final String JSON_PROPERTY_BLOCK = "block";
    private String block;

    public static final String JSON_PROPERTY_ADDITIONAL = "additional";
    private String additional;

    public static final String JSON_PROPERTY_KM = "km";
    private Integer km;

    public static final String JSON_PROPERTY_CITY = "city";
    private String city;

    public OutletAddressDTO(Long regionId) {
        this.regionId = regionId;
    }

    public OutletAddressDTO regionId(Long regionId) {
        this.regionId = regionId;
        return this;
    }

    /**
     * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
     * @return regionId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_REGION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getRegionId() {
        return regionId;
    }

    @JsonProperty(JSON_PROPERTY_REGION_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRegionId(Long regionId) {
        this.regionId = regionId;
    }

    public OutletAddressDTO street(String street) {
        this.street = street;
        return this;
    }

    /**
     * Улица.
     * @return street
     */
    @Nullable
    @Size(max=512)
    @JsonProperty(JSON_PROPERTY_STREET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStreet() {
        return street;
    }

    @JsonProperty(JSON_PROPERTY_STREET)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStreet(String street) {
        this.street = street;
    }

    public OutletAddressDTO number(String number) {
        this.number = number;
        return this;
    }

    /**
     * Номер дома.
     * @return number
     */
    @Nullable
    @Size(max=256)
    @JsonProperty(JSON_PROPERTY_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNumber() {
        return number;
    }

    @JsonProperty(JSON_PROPERTY_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNumber(String number) {
        this.number = number;
    }

    public OutletAddressDTO building(String building) {
        this.building = building;
        return this;
    }

    /**
     * Номер строения.
     * @return building
     */
    @Nullable
    @Size(max=16)
    @JsonProperty(JSON_PROPERTY_BUILDING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBuilding() {
        return building;
    }

    @JsonProperty(JSON_PROPERTY_BUILDING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBuilding(String building) {
        this.building = building;
    }

    public OutletAddressDTO estate(String estate) {
        this.estate = estate;
        return this;
    }

    /**
     * Номер владения.
     * @return estate
     */
    @Nullable
    @Size(max=16)
    @JsonProperty(JSON_PROPERTY_ESTATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getEstate() {
        return estate;
    }

    @JsonProperty(JSON_PROPERTY_ESTATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEstate(String estate) {
        this.estate = estate;
    }

    public OutletAddressDTO block(String block) {
        this.block = block;
        return this;
    }

    /**
     * Номер корпуса.
     * @return block
     */
    @Nullable
    @Size(max=16)
    @JsonProperty(JSON_PROPERTY_BLOCK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBlock() {
        return block;
    }

    @JsonProperty(JSON_PROPERTY_BLOCK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlock(String block) {
        this.block = block;
    }

    public OutletAddressDTO additional(String additional) {
        this.additional = additional;
        return this;
    }

    /**
     * Дополнительная информация.
     * @return additional
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ADDITIONAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAdditional() {
        return additional;
    }

    @JsonProperty(JSON_PROPERTY_ADDITIONAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAdditional(String additional) {
        this.additional = additional;
    }

    public OutletAddressDTO km(Integer km) {
        this.km = km;
        return this;
    }

    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     * @return km
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_KM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getKm() {
        return km;
    }

    @JsonProperty(JSON_PROPERTY_KM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setKm(Integer km) {
        this.km = km;
    }

    public OutletAddressDTO city(String city) {
        this.city = city;
        return this;
    }

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
     * @return city
     */
    @Nullable
    @Size(max=200)
    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCity() {
        return city;
    }

    @JsonProperty(JSON_PROPERTY_CITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCity(String city) {
        this.city = city;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutletAddressDTO outletAddressDTO = (OutletAddressDTO) o;
        return Objects.equals(this.regionId, outletAddressDTO.regionId) &&
            Objects.equals(this.street, outletAddressDTO.street) &&
            Objects.equals(this.number, outletAddressDTO.number) &&
            Objects.equals(this.building, outletAddressDTO.building) &&
            Objects.equals(this.estate, outletAddressDTO.estate) &&
            Objects.equals(this.block, outletAddressDTO.block) &&
            Objects.equals(this.additional, outletAddressDTO.additional) &&
            Objects.equals(this.km, outletAddressDTO.km) &&
            Objects.equals(this.city, outletAddressDTO.city);
    }

    @Override
    public int hashCode() {
        return Objects.hash(regionId, street, number, building, estate, block, additional, km, city);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OutletAddressDTO {\n");
        sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
        sb.append("    street: ").append(toIndentedString(street)).append("\n");
        sb.append("    number: ").append(toIndentedString(number)).append("\n");
        sb.append("    building: ").append(toIndentedString(building)).append("\n");
        sb.append("    estate: ").append(toIndentedString(estate)).append("\n");
        sb.append("    block: ").append(toIndentedString(block)).append("\n");
        sb.append("    additional: ").append(toIndentedString(additional)).append("\n");
        sb.append("    km: ").append(toIndentedString(km)).append("\n");
        sb.append("    city: ").append(toIndentedString(city)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

