/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.CategoryParameterUnitDTO;
import org.openapitools.model.OfferCardRecommendationType;
import org.openapitools.model.ParameterType;
import org.openapitools.model.ParameterValueConstraintsDTO;
import org.openapitools.model.ParameterValueOptionDTO;
import org.openapitools.model.ValueRestrictionDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Характеристика товара.
 */
@JsonPropertyOrder({
  CategoryParameterDTO.JSON_PROPERTY_ID,
  CategoryParameterDTO.JSON_PROPERTY_NAME,
  CategoryParameterDTO.JSON_PROPERTY_TYPE,
  CategoryParameterDTO.JSON_PROPERTY_UNIT,
  CategoryParameterDTO.JSON_PROPERTY_DESCRIPTION,
  CategoryParameterDTO.JSON_PROPERTY_RECOMMENDATION_TYPES,
  CategoryParameterDTO.JSON_PROPERTY_REQUIRED,
  CategoryParameterDTO.JSON_PROPERTY_FILTERING,
  CategoryParameterDTO.JSON_PROPERTY_DISTINCTIVE,
  CategoryParameterDTO.JSON_PROPERTY_MULTIVALUE,
  CategoryParameterDTO.JSON_PROPERTY_ALLOW_CUSTOM_VALUES,
  CategoryParameterDTO.JSON_PROPERTY_VALUES,
  CategoryParameterDTO.JSON_PROPERTY_CONSTRAINTS,
  CategoryParameterDTO.JSON_PROPERTY_VALUE_RESTRICTIONS
})
@JsonTypeName("CategoryParameterDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CategoryParameterDTO {
    public static final String JSON_PROPERTY_ID = "id";
    private Long id;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TYPE = "type";
    private ParameterType type;

    public static final String JSON_PROPERTY_UNIT = "unit";
    private CategoryParameterUnitDTO unit;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_RECOMMENDATION_TYPES = "recommendationTypes";
    private List<OfferCardRecommendationType> recommendationTypes = null;

    public static final String JSON_PROPERTY_REQUIRED = "required";
    private Boolean required;

    public static final String JSON_PROPERTY_FILTERING = "filtering";
    private Boolean filtering;

    public static final String JSON_PROPERTY_DISTINCTIVE = "distinctive";
    private Boolean distinctive;

    public static final String JSON_PROPERTY_MULTIVALUE = "multivalue";
    private Boolean multivalue;

    public static final String JSON_PROPERTY_ALLOW_CUSTOM_VALUES = "allowCustomValues";
    private Boolean allowCustomValues;

    public static final String JSON_PROPERTY_VALUES = "values";
    private List<@Valid ParameterValueOptionDTO> values = null;

    public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
    private ParameterValueConstraintsDTO constraints;

    public static final String JSON_PROPERTY_VALUE_RESTRICTIONS = "valueRestrictions";
    private List<@Valid ValueRestrictionDTO> valueRestrictions = null;

    public CategoryParameterDTO(Long id, ParameterType type, Boolean required, Boolean filtering, Boolean distinctive, Boolean multivalue, Boolean allowCustomValues) {
        this.id = id;
        this.type = type;
        this.required = required;
        this.filtering = filtering;
        this.distinctive = distinctive;
        this.multivalue = multivalue;
        this.allowCustomValues = allowCustomValues;
    }

    public CategoryParameterDTO id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор характеристики.
     * @return id
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(Long id) {
        this.id = id;
    }

    public CategoryParameterDTO name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Название характеристики.
     * @return name
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public CategoryParameterDTO type(ParameterType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ParameterType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(ParameterType type) {
        this.type = type;
    }

    public CategoryParameterDTO unit(CategoryParameterUnitDTO unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get unit
     * @return unit
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CategoryParameterUnitDTO getUnit() {
        return unit;
    }

    @JsonProperty(JSON_PROPERTY_UNIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnit(CategoryParameterUnitDTO unit) {
        this.unit = unit;
    }

    public CategoryParameterDTO description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Описание характеристики.
     * @return description
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public CategoryParameterDTO recommendationTypes(List<OfferCardRecommendationType> recommendationTypes) {
        this.recommendationTypes = recommendationTypes;
        return this;
    }

    public CategoryParameterDTO addRecommendationTypesItem(OfferCardRecommendationType recommendationTypesItem) {
        if (this.recommendationTypes == null) {
            this.recommendationTypes = new ArrayList<>();
        }
        this.recommendationTypes.add(recommendationTypesItem);
        return this;
    }

    /**
     * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
     * @return recommendationTypes
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_RECOMMENDATION_TYPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<OfferCardRecommendationType> getRecommendationTypes() {
        return recommendationTypes;
    }

    @JsonProperty(JSON_PROPERTY_RECOMMENDATION_TYPES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecommendationTypes(List<OfferCardRecommendationType> recommendationTypes) {
        this.recommendationTypes = recommendationTypes;
    }

    public CategoryParameterDTO required(Boolean required) {
        this.required = required;
        return this;
    }

    /**
     * Обязательность характеристики.
     * @return required
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getRequired() {
        return required;
    }

    @JsonProperty(JSON_PROPERTY_REQUIRED)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRequired(Boolean required) {
        this.required = required;
    }

    public CategoryParameterDTO filtering(Boolean filtering) {
        this.filtering = filtering;
        return this;
    }

    /**
     * Используется ли характеристика в фильтре.
     * @return filtering
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_FILTERING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getFiltering() {
        return filtering;
    }

    @JsonProperty(JSON_PROPERTY_FILTERING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFiltering(Boolean filtering) {
        this.filtering = filtering;
    }

    public CategoryParameterDTO distinctive(Boolean distinctive) {
        this.distinctive = distinctive;
        return this;
    }

    /**
     * Является ли характеристика особенностью варианта.
     * @return distinctive
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_DISTINCTIVE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getDistinctive() {
        return distinctive;
    }

    @JsonProperty(JSON_PROPERTY_DISTINCTIVE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDistinctive(Boolean distinctive) {
        this.distinctive = distinctive;
    }

    public CategoryParameterDTO multivalue(Boolean multivalue) {
        this.multivalue = multivalue;
        return this;
    }

    /**
     * Можно ли передать сразу несколько значений.
     * @return multivalue
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_MULTIVALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getMultivalue() {
        return multivalue;
    }

    @JsonProperty(JSON_PROPERTY_MULTIVALUE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMultivalue(Boolean multivalue) {
        this.multivalue = multivalue;
    }

    public CategoryParameterDTO allowCustomValues(Boolean allowCustomValues) {
        this.allowCustomValues = allowCustomValues;
        return this;
    }

    /**
     * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
     * @return allowCustomValues
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_ALLOW_CUSTOM_VALUES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getAllowCustomValues() {
        return allowCustomValues;
    }

    @JsonProperty(JSON_PROPERTY_ALLOW_CUSTOM_VALUES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAllowCustomValues(Boolean allowCustomValues) {
        this.allowCustomValues = allowCustomValues;
    }

    public CategoryParameterDTO values(List<@Valid ParameterValueOptionDTO> values) {
        this.values = values;
        return this;
    }

    public CategoryParameterDTO addValuesItem(ParameterValueOptionDTO valuesItem) {
        if (this.values == null) {
            this.values = new ArrayList<>();
        }
        this.values.add(valuesItem);
        return this;
    }

    /**
     * Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
     * @return values
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_VALUES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid ParameterValueOptionDTO> getValues() {
        return values;
    }

    @JsonProperty(JSON_PROPERTY_VALUES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValues(List<@Valid ParameterValueOptionDTO> values) {
        this.values = values;
    }

    public CategoryParameterDTO constraints(ParameterValueConstraintsDTO constraints) {
        this.constraints = constraints;
        return this;
    }

    /**
     * Get constraints
     * @return constraints
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ParameterValueConstraintsDTO getConstraints() {
        return constraints;
    }

    @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setConstraints(ParameterValueConstraintsDTO constraints) {
        this.constraints = constraints;
    }

    public CategoryParameterDTO valueRestrictions(List<@Valid ValueRestrictionDTO> valueRestrictions) {
        this.valueRestrictions = valueRestrictions;
        return this;
    }

    public CategoryParameterDTO addValueRestrictionsItem(ValueRestrictionDTO valueRestrictionsItem) {
        if (this.valueRestrictions == null) {
            this.valueRestrictions = new ArrayList<>();
        }
        this.valueRestrictions.add(valueRestrictionsItem);
        return this;
    }

    /**
     * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
     * @return valueRestrictions
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_VALUE_RESTRICTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid ValueRestrictionDTO> getValueRestrictions() {
        return valueRestrictions;
    }

    @JsonProperty(JSON_PROPERTY_VALUE_RESTRICTIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValueRestrictions(List<@Valid ValueRestrictionDTO> valueRestrictions) {
        this.valueRestrictions = valueRestrictions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CategoryParameterDTO categoryParameterDTO = (CategoryParameterDTO) o;
        return Objects.equals(this.id, categoryParameterDTO.id) &&
            Objects.equals(this.name, categoryParameterDTO.name) &&
            Objects.equals(this.type, categoryParameterDTO.type) &&
            Objects.equals(this.unit, categoryParameterDTO.unit) &&
            Objects.equals(this.description, categoryParameterDTO.description) &&
            Objects.equals(this.recommendationTypes, categoryParameterDTO.recommendationTypes) &&
            Objects.equals(this.required, categoryParameterDTO.required) &&
            Objects.equals(this.filtering, categoryParameterDTO.filtering) &&
            Objects.equals(this.distinctive, categoryParameterDTO.distinctive) &&
            Objects.equals(this.multivalue, categoryParameterDTO.multivalue) &&
            Objects.equals(this.allowCustomValues, categoryParameterDTO.allowCustomValues) &&
            Objects.equals(this.values, categoryParameterDTO.values) &&
            Objects.equals(this.constraints, categoryParameterDTO.constraints) &&
            Objects.equals(this.valueRestrictions, categoryParameterDTO.valueRestrictions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, type, unit, description, recommendationTypes, required, filtering, distinctive, multivalue, allowCustomValues, values, constraints, valueRestrictions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CategoryParameterDTO {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    recommendationTypes: ").append(toIndentedString(recommendationTypes)).append("\n");
        sb.append("    required: ").append(toIndentedString(required)).append("\n");
        sb.append("    filtering: ").append(toIndentedString(filtering)).append("\n");
        sb.append("    distinctive: ").append(toIndentedString(distinctive)).append("\n");
        sb.append("    multivalue: ").append(toIndentedString(multivalue)).append("\n");
        sb.append("    allowCustomValues: ").append(toIndentedString(allowCustomValues)).append("\n");
        sb.append("    values: ").append(toIndentedString(values)).append("\n");
        sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
        sb.append("    valueRestrictions: ").append(toIndentedString(valueRestrictions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

