/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.UpdateStockItemDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация об остатках одного товара на одном из складов.
 */
@JsonPropertyOrder({
  UpdateStockDTO.JSON_PROPERTY_SKU,
  UpdateStockDTO.JSON_PROPERTY_ITEMS
})
@JsonTypeName("UpdateStockDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class UpdateStockDTO {
    public static final String JSON_PROPERTY_SKU = "sku";
    private String sku;

    public static final String JSON_PROPERTY_ITEMS = "items";
    private List<@Valid UpdateStockItemDTO> items = new ArrayList<>();

    public UpdateStockDTO(String sku, List<@Valid UpdateStockItemDTO> items) {
        this.sku = sku;
        this.items = items;
    }

    public UpdateStockDTO sku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @return sku
     */
    @NotNull
    @Pattern(regexp="^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")
    @Size(min=1, max=255)
    @JsonProperty(JSON_PROPERTY_SKU)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getSku() {
        return sku;
    }

    @JsonProperty(JSON_PROPERTY_SKU)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSku(String sku) {
        this.sku = sku;
    }

    public UpdateStockDTO items(List<@Valid UpdateStockItemDTO> items) {
        this.items = items;
        return this;
    }

    public UpdateStockDTO addItemsItem(UpdateStockItemDTO itemsItem) {
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Информация об остатках товара. 
     * @return items
     */
    @NotNull
    @Size(min=1, max=1)
    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid UpdateStockItemDTO> getItems() {
        return items;
    }

    @JsonProperty(JSON_PROPERTY_ITEMS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setItems(List<@Valid UpdateStockItemDTO> items) {
        this.items = items;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateStockDTO updateStockDTO = (UpdateStockDTO) o;
        return Objects.equals(this.sku, updateStockDTO.sku) &&
            Objects.equals(this.items, updateStockDTO.items);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sku, items);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateStockDTO {\n");
        sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

