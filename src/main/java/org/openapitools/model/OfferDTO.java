/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import org.openapitools.model.CurrencyType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Предложение.
 */
@JsonPropertyOrder({
  OfferDTO.JSON_PROPERTY_PRICE,
  OfferDTO.JSON_PROPERTY_FEED_ID,
  OfferDTO.JSON_PROPERTY_ID,
  OfferDTO.JSON_PROPERTY_SHOP_CATEGORY_ID,
  OfferDTO.JSON_PROPERTY_MARKET_CATEGORY_ID,
  OfferDTO.JSON_PROPERTY_PRE_DISCOUNT_PRICE,
  OfferDTO.JSON_PROPERTY_DISCOUNT,
  OfferDTO.JSON_PROPERTY_CUT_PRICE,
  OfferDTO.JSON_PROPERTY_URL,
  OfferDTO.JSON_PROPERTY_MODEL_ID,
  OfferDTO.JSON_PROPERTY_NAME,
  OfferDTO.JSON_PROPERTY_CURRENCY,
  OfferDTO.JSON_PROPERTY_BID,
  OfferDTO.JSON_PROPERTY_CBID,
  OfferDTO.JSON_PROPERTY_FEE,
  OfferDTO.JSON_PROPERTY_BLOCKED
})
@JsonTypeName("OfferDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OfferDTO {
    public static final String JSON_PROPERTY_PRICE = "price";
    private BigDecimal price;

    public static final String JSON_PROPERTY_FEED_ID = "feedId";
    private Long feedId;

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_SHOP_CATEGORY_ID = "shopCategoryId";
    private String shopCategoryId;

    public static final String JSON_PROPERTY_MARKET_CATEGORY_ID = "marketCategoryId";
    private Integer marketCategoryId;

    public static final String JSON_PROPERTY_PRE_DISCOUNT_PRICE = "preDiscountPrice";
    private BigDecimal preDiscountPrice;

    public static final String JSON_PROPERTY_DISCOUNT = "discount";
    private Integer discount;

    public static final String JSON_PROPERTY_CUT_PRICE = "cutPrice";
    private Boolean cutPrice;

    public static final String JSON_PROPERTY_URL = "url";
    private String url;

    public static final String JSON_PROPERTY_MODEL_ID = "modelId";
    private Long modelId;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    private CurrencyType currency;

    public static final String JSON_PROPERTY_BID = "bid";
    private BigDecimal bid;

    public static final String JSON_PROPERTY_CBID = "cbid";
    private BigDecimal cbid;

    public static final String JSON_PROPERTY_FEE = "fee";
    private BigDecimal fee;

    public static final String JSON_PROPERTY_BLOCKED = "blocked";
    private Boolean blocked;

    public OfferDTO(Long modelId) {
        this.modelId = modelId;
    }

    public OfferDTO price(BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
     * @return price
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public OfferDTO feedId(Long feedId) {
        this.feedId = feedId;
        return this;
    }

    /**
     * Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
     * @return feedId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getFeedId() {
        return feedId;
    }

    @JsonProperty(JSON_PROPERTY_FEED_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeedId(Long feedId) {
        this.feedId = feedId;
    }

    public OfferDTO id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
     * @return id
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public OfferDTO shopCategoryId(String shopCategoryId) {
        this.shopCategoryId = shopCategoryId;
        return this;
    }

    /**
     * Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
     * @return shopCategoryId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SHOP_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getShopCategoryId() {
        return shopCategoryId;
    }

    @JsonProperty(JSON_PROPERTY_SHOP_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShopCategoryId(String shopCategoryId) {
        this.shopCategoryId = shopCategoryId;
    }

    public OfferDTO marketCategoryId(Integer marketCategoryId) {
        this.marketCategoryId = marketCategoryId;
        return this;
    }

    /**
     * Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
     * @return marketCategoryId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_MARKET_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMarketCategoryId() {
        return marketCategoryId;
    }

    @JsonProperty(JSON_PROPERTY_MARKET_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMarketCategoryId(Integer marketCategoryId) {
        this.marketCategoryId = marketCategoryId;
    }

    public OfferDTO preDiscountPrice(BigDecimal preDiscountPrice) {
        this.preDiscountPrice = preDiscountPrice;
        return this;
    }

    /**
     * Цена предложения без скидки.
     * @return preDiscountPrice
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PRE_DISCOUNT_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getPreDiscountPrice() {
        return preDiscountPrice;
    }

    @JsonProperty(JSON_PROPERTY_PRE_DISCOUNT_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPreDiscountPrice(BigDecimal preDiscountPrice) {
        this.preDiscountPrice = preDiscountPrice;
    }

    public OfferDTO discount(Integer discount) {
        this.discount = discount;
        return this;
    }

    /**
     * Скидка на предложение в процентах.
     * @return discount
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DISCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getDiscount() {
        return discount;
    }

    @JsonProperty(JSON_PROPERTY_DISCOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDiscount(Integer discount) {
        this.discount = discount;
    }

    public OfferDTO cutPrice(Boolean cutPrice) {
        this.cutPrice = cutPrice;
        return this;
    }

    /**
     * Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
     * @return cutPrice
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CUT_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCutPrice() {
        return cutPrice;
    }

    @JsonProperty(JSON_PROPERTY_CUT_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCutPrice(Boolean cutPrice) {
        this.cutPrice = cutPrice;
    }

    public OfferDTO url(String url) {
        this.url = url;
        return this;
    }

    /**
     * URL-адрес предложения на сайте магазина.
     * @return url
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public OfferDTO modelId(Long modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
     * @return modelId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_MODEL_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getModelId() {
        return modelId;
    }

    @JsonProperty(JSON_PROPERTY_MODEL_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setModelId(Long modelId) {
        this.modelId = modelId;
    }

    public OfferDTO name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Наименование предложения.
     * @return name
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public OfferDTO currency(CurrencyType currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     * @return currency
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CurrencyType getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrency(CurrencyType currency) {
        this.currency = currency;
    }

    public OfferDTO bid(BigDecimal bid) {
        this.bid = bid;
        return this;
    }

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
     * @return bid
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_BID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getBid() {
        return bid;
    }

    @JsonProperty(JSON_PROPERTY_BID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBid(BigDecimal bid) {
        this.bid = bid;
    }

    public OfferDTO cbid(BigDecimal cbid) {
        this.cbid = cbid;
        return this;
    }

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
     * @return cbid
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CBID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCbid() {
        return cbid;
    }

    @JsonProperty(JSON_PROPERTY_CBID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCbid(BigDecimal cbid) {
        this.cbid = cbid;
    }

    public OfferDTO fee(BigDecimal fee) {
        this.fee = fee;
        return this;
    }

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
     * @return fee
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getFee() {
        return fee;
    }

    @JsonProperty(JSON_PROPERTY_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFee(BigDecimal fee) {
        this.fee = fee;
    }

    public OfferDTO blocked(Boolean blocked) {
        this.blocked = blocked;
        return this;
    }

    /**
     * Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
     * @return blocked
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_BLOCKED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getBlocked() {
        return blocked;
    }

    @JsonProperty(JSON_PROPERTY_BLOCKED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBlocked(Boolean blocked) {
        this.blocked = blocked;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OfferDTO offerDTO = (OfferDTO) o;
        return Objects.equals(this.price, offerDTO.price) &&
            Objects.equals(this.feedId, offerDTO.feedId) &&
            Objects.equals(this.id, offerDTO.id) &&
            Objects.equals(this.shopCategoryId, offerDTO.shopCategoryId) &&
            Objects.equals(this.marketCategoryId, offerDTO.marketCategoryId) &&
            Objects.equals(this.preDiscountPrice, offerDTO.preDiscountPrice) &&
            Objects.equals(this.discount, offerDTO.discount) &&
            Objects.equals(this.cutPrice, offerDTO.cutPrice) &&
            Objects.equals(this.url, offerDTO.url) &&
            Objects.equals(this.modelId, offerDTO.modelId) &&
            Objects.equals(this.name, offerDTO.name) &&
            Objects.equals(this.currency, offerDTO.currency) &&
            Objects.equals(this.bid, offerDTO.bid) &&
            Objects.equals(this.cbid, offerDTO.cbid) &&
            Objects.equals(this.fee, offerDTO.fee) &&
            Objects.equals(this.blocked, offerDTO.blocked);
    }

    @Override
    public int hashCode() {
        return Objects.hash(price, feedId, id, shopCategoryId, marketCategoryId, preDiscountPrice, discount, cutPrice, url, modelId, name, currency, bid, cbid, fee, blocked);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OfferDTO {\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    feedId: ").append(toIndentedString(feedId)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    shopCategoryId: ").append(toIndentedString(shopCategoryId)).append("\n");
        sb.append("    marketCategoryId: ").append(toIndentedString(marketCategoryId)).append("\n");
        sb.append("    preDiscountPrice: ").append(toIndentedString(preDiscountPrice)).append("\n");
        sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
        sb.append("    cutPrice: ").append(toIndentedString(cutPrice)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
        sb.append("    cbid: ").append(toIndentedString(cbid)).append("\n");
        sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

