/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.CalculateTariffsOfferDTO;
import org.openapitools.model.CalculatedTariffDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Стоимость услуг.
 */
@JsonPropertyOrder({
  CalculateTariffsOfferInfoDTO.JSON_PROPERTY_OFFER,
  CalculateTariffsOfferInfoDTO.JSON_PROPERTY_TARIFFS
})
@JsonTypeName("CalculateTariffsOfferInfoDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CalculateTariffsOfferInfoDTO {
    public static final String JSON_PROPERTY_OFFER = "offer";
    private CalculateTariffsOfferDTO offer;

    public static final String JSON_PROPERTY_TARIFFS = "tariffs";
    private List<@Valid CalculatedTariffDTO> tariffs = new ArrayList<>();

    public CalculateTariffsOfferInfoDTO(CalculateTariffsOfferDTO offer, List<@Valid CalculatedTariffDTO> tariffs) {
        this.offer = offer;
        this.tariffs = tariffs;
    }

    public CalculateTariffsOfferInfoDTO offer(CalculateTariffsOfferDTO offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get offer
     * @return offer
     */
    @Valid
    @NotNull
    @JsonProperty(JSON_PROPERTY_OFFER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public CalculateTariffsOfferDTO getOffer() {
        return offer;
    }

    @JsonProperty(JSON_PROPERTY_OFFER)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOffer(CalculateTariffsOfferDTO offer) {
        this.offer = offer;
    }

    public CalculateTariffsOfferInfoDTO tariffs(List<@Valid CalculatedTariffDTO> tariffs) {
        this.tariffs = tariffs;
        return this;
    }

    public CalculateTariffsOfferInfoDTO addTariffsItem(CalculatedTariffDTO tariffsItem) {
        this.tariffs.add(tariffsItem);
        return this;
    }

    /**
     * Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
     * @return tariffs
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_TARIFFS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid CalculatedTariffDTO> getTariffs() {
        return tariffs;
    }

    @JsonProperty(JSON_PROPERTY_TARIFFS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTariffs(List<@Valid CalculatedTariffDTO> tariffs) {
        this.tariffs = tariffs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalculateTariffsOfferInfoDTO calculateTariffsOfferInfoDTO = (CalculateTariffsOfferInfoDTO) o;
        return Objects.equals(this.offer, calculateTariffsOfferInfoDTO.offer) &&
            Objects.equals(this.tariffs, calculateTariffsOfferInfoDTO.tariffs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offer, tariffs);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CalculateTariffsOfferInfoDTO {\n");
        sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
        sb.append("    tariffs: ").append(toIndentedString(tariffs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

