/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.CampaignSettingsLocalRegionDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Настройки магазина.
 */
@JsonPropertyOrder({
  CampaignSettingsDTO.JSON_PROPERTY_COUNTRY_REGION,
  CampaignSettingsDTO.JSON_PROPERTY_SHOP_NAME,
  CampaignSettingsDTO.JSON_PROPERTY_SHOW_IN_CONTEXT,
  CampaignSettingsDTO.JSON_PROPERTY_SHOW_IN_PREMIUM,
  CampaignSettingsDTO.JSON_PROPERTY_USE_OPEN_STAT,
  CampaignSettingsDTO.JSON_PROPERTY_LOCAL_REGION
})
@JsonTypeName("CampaignSettingsDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CampaignSettingsDTO {
    public static final String JSON_PROPERTY_COUNTRY_REGION = "countryRegion";
    private Long countryRegion;

    public static final String JSON_PROPERTY_SHOP_NAME = "shopName";
    private String shopName;

    public static final String JSON_PROPERTY_SHOW_IN_CONTEXT = "showInContext";
    private Boolean showInContext;

    public static final String JSON_PROPERTY_SHOW_IN_PREMIUM = "showInPremium";
    private Boolean showInPremium;

    public static final String JSON_PROPERTY_USE_OPEN_STAT = "useOpenStat";
    private Boolean useOpenStat;

    public static final String JSON_PROPERTY_LOCAL_REGION = "localRegion";
    private CampaignSettingsLocalRegionDTO localRegion;

    public CampaignSettingsDTO() {
    }

    public CampaignSettingsDTO countryRegion(Long countryRegion) {
        this.countryRegion = countryRegion;
        return this;
    }

    /**
     * Идентификатор региона, в котором находится магазин.
     * @return countryRegion
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_COUNTRY_REGION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getCountryRegion() {
        return countryRegion;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_REGION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCountryRegion(Long countryRegion) {
        this.countryRegion = countryRegion;
    }

    public CampaignSettingsDTO shopName(String shopName) {
        this.shopName = shopName;
        return this;
    }

    /**
     * Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. 
     * @return shopName
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SHOP_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getShopName() {
        return shopName;
    }

    @JsonProperty(JSON_PROPERTY_SHOP_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShopName(String shopName) {
        this.shopName = shopName;
    }

    public CampaignSettingsDTO showInContext(Boolean showInContext) {
        this.showInContext = showInContext;
        return this;
    }

    /**
     * Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
     * @return showInContext
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SHOW_IN_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getShowInContext() {
        return showInContext;
    }

    @JsonProperty(JSON_PROPERTY_SHOW_IN_CONTEXT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShowInContext(Boolean showInContext) {
        this.showInContext = showInContext;
    }

    public CampaignSettingsDTO showInPremium(Boolean showInPremium) {
        this.showInPremium = showInPremium;
        return this;
    }

    /**
     * Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. 
     * @return showInPremium
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SHOW_IN_PREMIUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getShowInPremium() {
        return showInPremium;
    }

    @JsonProperty(JSON_PROPERTY_SHOW_IN_PREMIUM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShowInPremium(Boolean showInPremium) {
        this.showInPremium = showInPremium;
    }

    public CampaignSettingsDTO useOpenStat(Boolean useOpenStat) {
        this.useOpenStat = useOpenStat;
        return this;
    }

    /**
     * Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. 
     * @return useOpenStat
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_USE_OPEN_STAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getUseOpenStat() {
        return useOpenStat;
    }

    @JsonProperty(JSON_PROPERTY_USE_OPEN_STAT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUseOpenStat(Boolean useOpenStat) {
        this.useOpenStat = useOpenStat;
    }

    public CampaignSettingsDTO localRegion(CampaignSettingsLocalRegionDTO localRegion) {
        this.localRegion = localRegion;
        return this;
    }

    /**
     * Get localRegion
     * @return localRegion
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_LOCAL_REGION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public CampaignSettingsLocalRegionDTO getLocalRegion() {
        return localRegion;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL_REGION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLocalRegion(CampaignSettingsLocalRegionDTO localRegion) {
        this.localRegion = localRegion;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CampaignSettingsDTO campaignSettingsDTO = (CampaignSettingsDTO) o;
        return Objects.equals(this.countryRegion, campaignSettingsDTO.countryRegion) &&
            Objects.equals(this.shopName, campaignSettingsDTO.shopName) &&
            Objects.equals(this.showInContext, campaignSettingsDTO.showInContext) &&
            Objects.equals(this.showInPremium, campaignSettingsDTO.showInPremium) &&
            Objects.equals(this.useOpenStat, campaignSettingsDTO.useOpenStat) &&
            Objects.equals(this.localRegion, campaignSettingsDTO.localRegion);
    }

    @Override
    public int hashCode() {
        return Objects.hash(countryRegion, shopName, showInContext, showInPremium, useOpenStat, localRegion);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CampaignSettingsDTO {\n");
        sb.append("    countryRegion: ").append(toIndentedString(countryRegion)).append("\n");
        sb.append("    shopName: ").append(toIndentedString(shopName)).append("\n");
        sb.append("    showInContext: ").append(toIndentedString(showInContext)).append("\n");
        sb.append("    showInPremium: ").append(toIndentedString(showInPremium)).append("\n");
        sb.append("    useOpenStat: ").append(toIndentedString(useOpenStat)).append("\n");
        sb.append("    localRegion: ").append(toIndentedString(localRegion)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

