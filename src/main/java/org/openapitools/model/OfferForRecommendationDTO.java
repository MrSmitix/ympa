/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.BasePriceDTO;
import org.openapitools.model.GetPriceDTO;
import org.openapitools.model.PriceCompetitivenessType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о состоянии цены на товар.
 */
@Schema(name = "OfferForRecommendationDTO", description = "Информация о состоянии цены на товар.")
@JsonPropertyOrder({
  OfferForRecommendationDTO.JSON_PROPERTY_OFFER_ID,
  OfferForRecommendationDTO.JSON_PROPERTY_PRICE,
  OfferForRecommendationDTO.JSON_PROPERTY_COFINANCE_PRICE,
  OfferForRecommendationDTO.JSON_PROPERTY_COMPETITIVENESS,
  OfferForRecommendationDTO.JSON_PROPERTY_SHOWS
})
@JsonTypeName("OfferForRecommendationDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OfferForRecommendationDTO {
    public static final String JSON_PROPERTY_OFFER_ID = "offerId";
    private String offerId;

    public static final String JSON_PROPERTY_PRICE = "price";
    private BasePriceDTO price;

    public static final String JSON_PROPERTY_COFINANCE_PRICE = "cofinancePrice";
    private GetPriceDTO cofinancePrice;

    public static final String JSON_PROPERTY_COMPETITIVENESS = "competitiveness";
    private PriceCompetitivenessType competitiveness;

    public static final String JSON_PROPERTY_SHOWS = "shows";
    private Long shows;

    public OfferForRecommendationDTO() {
    }

    public OfferForRecommendationDTO offerId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @return offerId
     */
    @Nullable
    @Pattern(regexp="^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")
    @Size(min=1, max=255)
    @Schema(name = "offerId", description = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOfferId() {
        return offerId;
    }

    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOfferId(String offerId) {
        this.offerId = offerId;
    }

    public OfferForRecommendationDTO price(BasePriceDTO price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     * @return price
     */
    @Valid
    @Nullable
    @Schema(name = "price", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BasePriceDTO getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrice(BasePriceDTO price) {
        this.price = price;
    }

    public OfferForRecommendationDTO cofinancePrice(GetPriceDTO cofinancePrice) {
        this.cofinancePrice = cofinancePrice;
        return this;
    }

    /**
     * Get cofinancePrice
     * @return cofinancePrice
     */
    @Valid
    @Nullable
    @Schema(name = "cofinancePrice", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COFINANCE_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public GetPriceDTO getCofinancePrice() {
        return cofinancePrice;
    }

    @JsonProperty(JSON_PROPERTY_COFINANCE_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCofinancePrice(GetPriceDTO cofinancePrice) {
        this.cofinancePrice = cofinancePrice;
    }

    public OfferForRecommendationDTO competitiveness(PriceCompetitivenessType competitiveness) {
        this.competitiveness = competitiveness;
        return this;
    }

    /**
     * Get competitiveness
     * @return competitiveness
     */
    @Nullable
    @Schema(name = "competitiveness", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COMPETITIVENESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PriceCompetitivenessType getCompetitiveness() {
        return competitiveness;
    }

    @JsonProperty(JSON_PROPERTY_COMPETITIVENESS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCompetitiveness(PriceCompetitivenessType competitiveness) {
        this.competitiveness = competitiveness;
    }

    public OfferForRecommendationDTO shows(Long shows) {
        this.shows = shows;
        return this;
    }

    /**
     * Количество показов карточки товара за последние 7 дней.
     * @return shows
     */
    @Nullable
    @Schema(name = "shows", description = "Количество показов карточки товара за последние 7 дней.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_SHOWS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getShows() {
        return shows;
    }

    @JsonProperty(JSON_PROPERTY_SHOWS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShows(Long shows) {
        this.shows = shows;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OfferForRecommendationDTO offerForRecommendationDTO = (OfferForRecommendationDTO) o;
        return Objects.equals(this.offerId, offerForRecommendationDTO.offerId) &&
            Objects.equals(this.price, offerForRecommendationDTO.price) &&
            Objects.equals(this.cofinancePrice, offerForRecommendationDTO.cofinancePrice) &&
            Objects.equals(this.competitiveness, offerForRecommendationDTO.competitiveness) &&
            Objects.equals(this.shows, offerForRecommendationDTO.shows);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offerId, price, cofinancePrice, competitiveness, shows);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OfferForRecommendationDTO {\n");
        sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    cofinancePrice: ").append(toIndentedString(cofinancePrice)).append("\n");
        sb.append("    competitiveness: ").append(toIndentedString(competitiveness)).append("\n");
        sb.append("    shows: ").append(toIndentedString(shows)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

