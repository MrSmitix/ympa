/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import org.openapitools.model.LicenseType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о лицензии.
 */
@JsonPropertyOrder({
  OutletLicenseDTO.JSON_PROPERTY_ID,
  OutletLicenseDTO.JSON_PROPERTY_OUTLET_ID,
  OutletLicenseDTO.JSON_PROPERTY_LICENSE_TYPE,
  OutletLicenseDTO.JSON_PROPERTY_NUMBER,
  OutletLicenseDTO.JSON_PROPERTY_DATE_OF_ISSUE,
  OutletLicenseDTO.JSON_PROPERTY_DATE_OF_EXPIRY
})
@JsonTypeName("OutletLicenseDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OutletLicenseDTO {
    public static final String JSON_PROPERTY_ID = "id";
    private Long id;

    public static final String JSON_PROPERTY_OUTLET_ID = "outletId";
    private Long outletId;

    public static final String JSON_PROPERTY_LICENSE_TYPE = "licenseType";
    private LicenseType licenseType;

    public static final String JSON_PROPERTY_NUMBER = "number";
    private String number;

    public static final String JSON_PROPERTY_DATE_OF_ISSUE = "dateOfIssue";
    private OffsetDateTime dateOfIssue;

    public static final String JSON_PROPERTY_DATE_OF_EXPIRY = "dateOfExpiry";
    private OffsetDateTime dateOfExpiry;

    public OutletLicenseDTO() {
    }

    public OutletLicenseDTO id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
     * @return id
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(Long id) {
        this.id = id;
    }

    public OutletLicenseDTO outletId(Long outletId) {
        this.outletId = outletId;
        return this;
    }

    /**
     * Идентификатор точки продаж, для которой действительна лицензия.
     * @return outletId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_OUTLET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getOutletId() {
        return outletId;
    }

    @JsonProperty(JSON_PROPERTY_OUTLET_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOutletId(Long outletId) {
        this.outletId = outletId;
    }

    public OutletLicenseDTO licenseType(LicenseType licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get licenseType
     * @return licenseType
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_LICENSE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LicenseType getLicenseType() {
        return licenseType;
    }

    @JsonProperty(JSON_PROPERTY_LICENSE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLicenseType(LicenseType licenseType) {
        this.licenseType = licenseType;
    }

    public OutletLicenseDTO number(String number) {
        this.number = number;
        return this;
    }

    /**
     * Номер лицензии.
     * @return number
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getNumber() {
        return number;
    }

    @JsonProperty(JSON_PROPERTY_NUMBER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNumber(String number) {
        this.number = number;
    }

    public OutletLicenseDTO dateOfIssue(OffsetDateTime dateOfIssue) {
        this.dateOfIssue = dateOfIssue;
        return this;
    }

    /**
     * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
     * @return dateOfIssue
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DATE_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDateOfIssue() {
        return dateOfIssue;
    }

    @JsonProperty(JSON_PROPERTY_DATE_OF_ISSUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDateOfIssue(OffsetDateTime dateOfIssue) {
        this.dateOfIssue = dateOfIssue;
    }

    public OutletLicenseDTO dateOfExpiry(OffsetDateTime dateOfExpiry) {
        this.dateOfExpiry = dateOfExpiry;
        return this;
    }

    /**
     * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
     * @return dateOfExpiry
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DATE_OF_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getDateOfExpiry() {
        return dateOfExpiry;
    }

    @JsonProperty(JSON_PROPERTY_DATE_OF_EXPIRY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setDateOfExpiry(OffsetDateTime dateOfExpiry) {
        this.dateOfExpiry = dateOfExpiry;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OutletLicenseDTO outletLicenseDTO = (OutletLicenseDTO) o;
        return Objects.equals(this.id, outletLicenseDTO.id) &&
            Objects.equals(this.outletId, outletLicenseDTO.outletId) &&
            Objects.equals(this.licenseType, outletLicenseDTO.licenseType) &&
            Objects.equals(this.number, outletLicenseDTO.number) &&
            Objects.equals(this.dateOfIssue, outletLicenseDTO.dateOfIssue) &&
            Objects.equals(this.dateOfExpiry, outletLicenseDTO.dateOfExpiry);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, outletId, licenseType, number, dateOfIssue, dateOfExpiry);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OutletLicenseDTO {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    outletId: ").append(toIndentedString(outletId)).append("\n");
        sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
        sb.append("    number: ").append(toIndentedString(number)).append("\n");
        sb.append("    dateOfIssue: ").append(toIndentedString(dateOfIssue)).append("\n");
        sb.append("    dateOfExpiry: ").append(toIndentedString(dateOfExpiry)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

