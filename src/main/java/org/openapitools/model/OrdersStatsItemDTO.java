/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.OrdersStatsDetailsDTO;
import org.openapitools.model.OrdersStatsPriceDTO;
import org.openapitools.model.OrdersStatsWarehouseDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
 */
@Schema(name = "OrdersStatsItemDTO", description = "Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). ")
@JsonPropertyOrder({
  OrdersStatsItemDTO.JSON_PROPERTY_OFFER_NAME,
  OrdersStatsItemDTO.JSON_PROPERTY_MARKET_SKU,
  OrdersStatsItemDTO.JSON_PROPERTY_SHOP_SKU,
  OrdersStatsItemDTO.JSON_PROPERTY_COUNT,
  OrdersStatsItemDTO.JSON_PROPERTY_PRICES,
  OrdersStatsItemDTO.JSON_PROPERTY_WAREHOUSE,
  OrdersStatsItemDTO.JSON_PROPERTY_DETAILS,
  OrdersStatsItemDTO.JSON_PROPERTY_CIS_LIST,
  OrdersStatsItemDTO.JSON_PROPERTY_INITIAL_COUNT,
  OrdersStatsItemDTO.JSON_PROPERTY_BID_FEE,
  OrdersStatsItemDTO.JSON_PROPERTY_COFINANCE_THRESHOLD,
  OrdersStatsItemDTO.JSON_PROPERTY_COFINANCE_VALUE
})
@JsonTypeName("OrdersStatsItemDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrdersStatsItemDTO {
    public static final String JSON_PROPERTY_OFFER_NAME = "offerName";
    private String offerName;

    public static final String JSON_PROPERTY_MARKET_SKU = "marketSku";
    private Long marketSku;

    public static final String JSON_PROPERTY_SHOP_SKU = "shopSku";
    private String shopSku;

    public static final String JSON_PROPERTY_COUNT = "count";
    private Integer count;

    public static final String JSON_PROPERTY_PRICES = "prices";
    private List<@Valid OrdersStatsPriceDTO> prices = null;

    public static final String JSON_PROPERTY_WAREHOUSE = "warehouse";
    private OrdersStatsWarehouseDTO warehouse;

    public static final String JSON_PROPERTY_DETAILS = "details";
    private List<@Valid OrdersStatsDetailsDTO> details = null;

    public static final String JSON_PROPERTY_CIS_LIST = "cisList";
    private List<String> cisList = null;

    public static final String JSON_PROPERTY_INITIAL_COUNT = "initialCount";
    private Integer initialCount;

    public static final String JSON_PROPERTY_BID_FEE = "bidFee";
    private Integer bidFee;

    public static final String JSON_PROPERTY_COFINANCE_THRESHOLD = "cofinanceThreshold";
    private BigDecimal cofinanceThreshold;

    public static final String JSON_PROPERTY_COFINANCE_VALUE = "cofinanceValue";
    private BigDecimal cofinanceValue;

    public OrdersStatsItemDTO() {
    }

    public OrdersStatsItemDTO offerName(String offerName) {
        this.offerName = offerName;
        return this;
    }

    /**
     * Название товара.
     * @return offerName
     */
    @Nullable
    @Schema(name = "offerName", description = "Название товара.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_OFFER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOfferName() {
        return offerName;
    }

    @JsonProperty(JSON_PROPERTY_OFFER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOfferName(String offerName) {
        this.offerName = offerName;
    }

    public OrdersStatsItemDTO marketSku(Long marketSku) {
        this.marketSku = marketSku;
        return this;
    }

    /**
     * SKU на Маркете.
     * @return marketSku
     */
    @Nullable
    @Schema(name = "marketSku", description = "SKU на Маркете.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_MARKET_SKU)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getMarketSku() {
        return marketSku;
    }

    @JsonProperty(JSON_PROPERTY_MARKET_SKU)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMarketSku(Long marketSku) {
        this.marketSku = marketSku;
    }

    public OrdersStatsItemDTO shopSku(String shopSku) {
        this.shopSku = shopSku;
        return this;
    }

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @return shopSku
     */
    @Nullable
    @Pattern(regexp="^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")
    @Size(min=1, max=255)
    @Schema(name = "shopSku", description = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_SHOP_SKU)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getShopSku() {
        return shopSku;
    }

    @JsonProperty(JSON_PROPERTY_SHOP_SKU)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setShopSku(String shopSku) {
        this.shopSku = shopSku;
    }

    public OrdersStatsItemDTO count(Integer count) {
        this.count = count;
        return this;
    }

    /**
     * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
     * @return count
     */
    @Nullable
    @Schema(name = "count", description = "Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getCount() {
        return count;
    }

    @JsonProperty(JSON_PROPERTY_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCount(Integer count) {
        this.count = count;
    }

    public OrdersStatsItemDTO prices(List<@Valid OrdersStatsPriceDTO> prices) {
        this.prices = prices;
        return this;
    }

    public OrdersStatsItemDTO addPricesItem(OrdersStatsPriceDTO pricesItem) {
        if (this.prices == null) {
            this.prices = new ArrayList<>();
        }
        this.prices.add(pricesItem);
        return this;
    }

    /**
     * Цена или скидки на товар.
     * @return prices
     */
    @Nullable
    @Schema(name = "prices", description = "Цена или скидки на товар.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PRICES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid OrdersStatsPriceDTO> getPrices() {
        return prices;
    }

    @JsonProperty(JSON_PROPERTY_PRICES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPrices(List<@Valid OrdersStatsPriceDTO> prices) {
        this.prices = prices;
    }

    public OrdersStatsItemDTO warehouse(OrdersStatsWarehouseDTO warehouse) {
        this.warehouse = warehouse;
        return this;
    }

    /**
     * Get warehouse
     * @return warehouse
     */
    @Valid
    @Nullable
    @Schema(name = "warehouse", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_WAREHOUSE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OrdersStatsWarehouseDTO getWarehouse() {
        return warehouse;
    }

    @JsonProperty(JSON_PROPERTY_WAREHOUSE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWarehouse(OrdersStatsWarehouseDTO warehouse) {
        this.warehouse = warehouse;
    }

    public OrdersStatsItemDTO details(List<@Valid OrdersStatsDetailsDTO> details) {
        this.details = details;
        return this;
    }

    public OrdersStatsItemDTO addDetailsItem(OrdersStatsDetailsDTO detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Информация об удалении товара из заказа.
     * @return details
     */
    @Nullable
    @Schema(name = "details", description = "Информация об удалении товара из заказа.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid OrdersStatsDetailsDTO> getDetails() {
        return details;
    }

    @JsonProperty(JSON_PROPERTY_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDetails(List<@Valid OrdersStatsDetailsDTO> details) {
        this.details = details;
    }

    public OrdersStatsItemDTO cisList(List<String> cisList) {
        this.cisList = cisList;
        return this;
    }

    public OrdersStatsItemDTO addCisListItem(String cisListItem) {
        if (this.cisList == null) {
            this.cisList = new ArrayList<>();
        }
        this.cisList.add(cisListItem);
        return this;
    }

    /**
     * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     * @return cisList
     */
    @Nullable
    @Schema(name = "cisList", description = "Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CIS_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getCisList() {
        return cisList;
    }

    @JsonProperty(JSON_PROPERTY_CIS_LIST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCisList(List<String> cisList) {
        this.cisList = cisList;
    }

    public OrdersStatsItemDTO initialCount(Integer initialCount) {
        this.initialCount = initialCount;
        return this;
    }

    /**
     * Первоначальное количество единиц товара.
     * @return initialCount
     */
    @Nullable
    @Schema(name = "initialCount", description = "Первоначальное количество единиц товара.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_INITIAL_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getInitialCount() {
        return initialCount;
    }

    @JsonProperty(JSON_PROPERTY_INITIAL_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInitialCount(Integer initialCount) {
        this.initialCount = initialCount;
    }

    public OrdersStatsItemDTO bidFee(Integer bidFee) {
        this.bidFee = bidFee;
        return this;
    }

    /**
     * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
     * minimum: 0
     * maximum: 10000
     * @return bidFee
     */
    @Nullable
    @Min(0)
    @Max(10000)
    @Schema(name = "bidFee", example = "570", description = "Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_BID_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getBidFee() {
        return bidFee;
    }

    @JsonProperty(JSON_PROPERTY_BID_FEE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBidFee(Integer bidFee) {
        this.bidFee = bidFee;
    }

    public OrdersStatsItemDTO cofinanceThreshold(BigDecimal cofinanceThreshold) {
        this.cofinanceThreshold = cofinanceThreshold;
        return this;
    }

    /**
     * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
     * @return cofinanceThreshold
     */
    @Nullable
    @Schema(name = "cofinanceThreshold", description = "Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COFINANCE_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCofinanceThreshold() {
        return cofinanceThreshold;
    }

    @JsonProperty(JSON_PROPERTY_COFINANCE_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCofinanceThreshold(BigDecimal cofinanceThreshold) {
        this.cofinanceThreshold = cofinanceThreshold;
    }

    public OrdersStatsItemDTO cofinanceValue(BigDecimal cofinanceValue) {
        this.cofinanceValue = cofinanceValue;
        return this;
    }

    /**
     * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
     * @return cofinanceValue
     */
    @Nullable
    @Schema(name = "cofinanceValue", description = "Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COFINANCE_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCofinanceValue() {
        return cofinanceValue;
    }

    @JsonProperty(JSON_PROPERTY_COFINANCE_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCofinanceValue(BigDecimal cofinanceValue) {
        this.cofinanceValue = cofinanceValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrdersStatsItemDTO ordersStatsItemDTO = (OrdersStatsItemDTO) o;
        return Objects.equals(this.offerName, ordersStatsItemDTO.offerName) &&
            Objects.equals(this.marketSku, ordersStatsItemDTO.marketSku) &&
            Objects.equals(this.shopSku, ordersStatsItemDTO.shopSku) &&
            Objects.equals(this.count, ordersStatsItemDTO.count) &&
            Objects.equals(this.prices, ordersStatsItemDTO.prices) &&
            Objects.equals(this.warehouse, ordersStatsItemDTO.warehouse) &&
            Objects.equals(this.details, ordersStatsItemDTO.details) &&
            Objects.equals(this.cisList, ordersStatsItemDTO.cisList) &&
            Objects.equals(this.initialCount, ordersStatsItemDTO.initialCount) &&
            Objects.equals(this.bidFee, ordersStatsItemDTO.bidFee) &&
            Objects.equals(this.cofinanceThreshold, ordersStatsItemDTO.cofinanceThreshold) &&
            Objects.equals(this.cofinanceValue, ordersStatsItemDTO.cofinanceValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offerName, marketSku, shopSku, count, prices, warehouse, details, cisList, initialCount, bidFee, cofinanceThreshold, cofinanceValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrdersStatsItemDTO {\n");
        sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
        sb.append("    marketSku: ").append(toIndentedString(marketSku)).append("\n");
        sb.append("    shopSku: ").append(toIndentedString(shopSku)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
        sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
        sb.append("    details: ").append(toIndentedString(details)).append("\n");
        sb.append("    cisList: ").append(toIndentedString(cisList)).append("\n");
        sb.append("    initialCount: ").append(toIndentedString(initialCount)).append("\n");
        sb.append("    bidFee: ").append(toIndentedString(bidFee)).append("\n");
        sb.append("    cofinanceThreshold: ").append(toIndentedString(cofinanceThreshold)).append("\n");
        sb.append("    cofinanceValue: ").append(toIndentedString(cofinanceValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

