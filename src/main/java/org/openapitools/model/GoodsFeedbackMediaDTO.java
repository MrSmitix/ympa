/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Фото и видео.
 */
@JsonPropertyOrder({
  GoodsFeedbackMediaDTO.JSON_PROPERTY_PHOTOS,
  GoodsFeedbackMediaDTO.JSON_PROPERTY_VIDEOS
})
@JsonTypeName("GoodsFeedbackMediaDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GoodsFeedbackMediaDTO {
    public static final String JSON_PROPERTY_PHOTOS = "photos";
    private List<String> photos = null;

    public static final String JSON_PROPERTY_VIDEOS = "videos";
    private List<String> videos = null;

    public GoodsFeedbackMediaDTO() {
    }

    public GoodsFeedbackMediaDTO photos(List<String> photos) {
        this.photos = photos;
        return this;
    }

    public GoodsFeedbackMediaDTO addPhotosItem(String photosItem) {
        if (this.photos == null) {
            this.photos = new ArrayList<>();
        }
        this.photos.add(photosItem);
        return this;
    }

    /**
     * Ссылки на фото.
     * @return photos
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PHOTOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getPhotos() {
        return photos;
    }

    @JsonProperty(JSON_PROPERTY_PHOTOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhotos(List<String> photos) {
        this.photos = photos;
    }

    public GoodsFeedbackMediaDTO videos(List<String> videos) {
        this.videos = videos;
        return this;
    }

    public GoodsFeedbackMediaDTO addVideosItem(String videosItem) {
        if (this.videos == null) {
            this.videos = new ArrayList<>();
        }
        this.videos.add(videosItem);
        return this;
    }

    /**
     * Ссылки на видео.
     * @return videos
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_VIDEOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getVideos() {
        return videos;
    }

    @JsonProperty(JSON_PROPERTY_VIDEOS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVideos(List<String> videos) {
        this.videos = videos;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GoodsFeedbackMediaDTO goodsFeedbackMediaDTO = (GoodsFeedbackMediaDTO) o;
        return Objects.equals(this.photos, goodsFeedbackMediaDTO.photos) &&
            Objects.equals(this.videos, goodsFeedbackMediaDTO.videos);
    }

    @Override
    public int hashCode() {
        return Objects.hash(photos, videos);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GoodsFeedbackMediaDTO {\n");
        sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
        sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

