/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import org.openapitools.model.ChatStatusType;
import org.openapitools.model.ChatType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о чатах.
 */
@JsonPropertyOrder({
  GetChatInfoDTO.JSON_PROPERTY_CHAT_ID,
  GetChatInfoDTO.JSON_PROPERTY_ORDER_ID,
  GetChatInfoDTO.JSON_PROPERTY_TYPE,
  GetChatInfoDTO.JSON_PROPERTY_STATUS,
  GetChatInfoDTO.JSON_PROPERTY_CREATED_AT,
  GetChatInfoDTO.JSON_PROPERTY_UPDATED_AT
})
@JsonTypeName("GetChatInfoDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GetChatInfoDTO {
    public static final String JSON_PROPERTY_CHAT_ID = "chatId";
    private Long chatId;

    public static final String JSON_PROPERTY_ORDER_ID = "orderId";
    private Long orderId;

    public static final String JSON_PROPERTY_TYPE = "type";
    private ChatType type;

    public static final String JSON_PROPERTY_STATUS = "status";
    private ChatStatusType status;

    public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
    private OffsetDateTime createdAt;

    public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
    private OffsetDateTime updatedAt;

    public GetChatInfoDTO(Long chatId, Long orderId, ChatType type, ChatStatusType status, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        this.chatId = chatId;
        this.orderId = orderId;
        this.type = type;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public GetChatInfoDTO chatId(Long chatId) {
        this.chatId = chatId;
        return this;
    }

    /**
     * Идентификатор чата.
     * @return chatId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CHAT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getChatId() {
        return chatId;
    }

    @JsonProperty(JSON_PROPERTY_CHAT_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setChatId(Long chatId) {
        this.chatId = chatId;
    }

    public GetChatInfoDTO orderId(Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Идентификатор заказа.
     * @return orderId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_ORDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getOrderId() {
        return orderId;
    }

    @JsonProperty(JSON_PROPERTY_ORDER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOrderId(Long orderId) {
        this.orderId = orderId;
    }

    public GetChatInfoDTO type(ChatType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ChatType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(ChatType type) {
        this.type = type;
    }

    public GetChatInfoDTO status(ChatStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * @return status
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ChatStatusType getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setStatus(ChatStatusType status) {
        this.status = status;
    }

    public GetChatInfoDTO createdAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
     * @return createdAt
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public GetChatInfoDTO updatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Дата и время последнего сообщения в чате.
     * @return updatedAt
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetChatInfoDTO getChatInfoDTO = (GetChatInfoDTO) o;
        return Objects.equals(this.chatId, getChatInfoDTO.chatId) &&
            Objects.equals(this.orderId, getChatInfoDTO.orderId) &&
            Objects.equals(this.type, getChatInfoDTO.type) &&
            Objects.equals(this.status, getChatInfoDTO.status) &&
            Objects.equals(this.createdAt, getChatInfoDTO.createdAt) &&
            Objects.equals(this.updatedAt, getChatInfoDTO.updatedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(chatId, orderId, type, status, createdAt, updatedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetChatInfoDTO {\n");
        sb.append("    chatId: ").append(toIndentedString(chatId)).append("\n");
        sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

