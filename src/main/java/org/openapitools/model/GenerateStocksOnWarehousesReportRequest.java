/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Данные, необходимые для генерации отчета. 
 */
@JsonPropertyOrder({
  GenerateStocksOnWarehousesReportRequest.JSON_PROPERTY_CAMPAIGN_ID,
  GenerateStocksOnWarehousesReportRequest.JSON_PROPERTY_WAREHOUSE_IDS,
  GenerateStocksOnWarehousesReportRequest.JSON_PROPERTY_REPORT_DATE,
  GenerateStocksOnWarehousesReportRequest.JSON_PROPERTY_CATEGORY_IDS,
  GenerateStocksOnWarehousesReportRequest.JSON_PROPERTY_HAS_STOCKS
})
@JsonTypeName("GenerateStocksOnWarehousesReportRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GenerateStocksOnWarehousesReportRequest {
    public static final String JSON_PROPERTY_CAMPAIGN_ID = "campaignId";
    private Long campaignId;

    public static final String JSON_PROPERTY_WAREHOUSE_IDS = "warehouseIds";
    private List<Long> warehouseIds = null;

    public static final String JSON_PROPERTY_REPORT_DATE = "reportDate";
    private LocalDate reportDate;

    public static final String JSON_PROPERTY_CATEGORY_IDS = "categoryIds";
    private List<Long> categoryIds = null;

    public static final String JSON_PROPERTY_HAS_STOCKS = "hasStocks";
    private Boolean hasStocks;

    public GenerateStocksOnWarehousesReportRequest(Long campaignId) {
        this.campaignId = campaignId;
    }

    public GenerateStocksOnWarehousesReportRequest campaignId(Long campaignId) {
        this.campaignId = campaignId;
        return this;
    }

    /**
     * Идентификатор магазина.
     * @return campaignId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getCampaignId() {
        return campaignId;
    }

    @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCampaignId(Long campaignId) {
        this.campaignId = campaignId;
    }

    public GenerateStocksOnWarehousesReportRequest warehouseIds(List<Long> warehouseIds) {
        this.warehouseIds = warehouseIds;
        return this;
    }

    public GenerateStocksOnWarehousesReportRequest addWarehouseIdsItem(Long warehouseIdsItem) {
        if (this.warehouseIds == null) {
            this.warehouseIds = new ArrayList<>();
        }
        this.warehouseIds.add(warehouseIdsItem);
        return this;
    }

    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     * @return warehouseIds
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_WAREHOUSE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Long> getWarehouseIds() {
        return warehouseIds;
    }

    @JsonProperty(JSON_PROPERTY_WAREHOUSE_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWarehouseIds(List<Long> warehouseIds) {
        this.warehouseIds = warehouseIds;
    }

    public GenerateStocksOnWarehousesReportRequest reportDate(LocalDate reportDate) {
        this.reportDate = reportDate;
        return this;
    }

    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     * @return reportDate
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_REPORT_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDate getReportDate() {
        return reportDate;
    }

    @JsonProperty(JSON_PROPERTY_REPORT_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public void setReportDate(LocalDate reportDate) {
        this.reportDate = reportDate;
    }

    public GenerateStocksOnWarehousesReportRequest categoryIds(List<Long> categoryIds) {
        this.categoryIds = categoryIds;
        return this;
    }

    public GenerateStocksOnWarehousesReportRequest addCategoryIdsItem(Long categoryIdsItem) {
        if (this.categoryIds == null) {
            this.categoryIds = new ArrayList<>();
        }
        this.categoryIds.add(categoryIdsItem);
        return this;
    }

    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     * @return categoryIds
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CATEGORY_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Long> getCategoryIds() {
        return categoryIds;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCategoryIds(List<Long> categoryIds) {
        this.categoryIds = categoryIds;
    }

    public GenerateStocksOnWarehousesReportRequest hasStocks(Boolean hasStocks) {
        this.hasStocks = hasStocks;
        return this;
    }

    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     * @return hasStocks
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_HAS_STOCKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getHasStocks() {
        return hasStocks;
    }

    @JsonProperty(JSON_PROPERTY_HAS_STOCKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setHasStocks(Boolean hasStocks) {
        this.hasStocks = hasStocks;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest = (GenerateStocksOnWarehousesReportRequest) o;
        return Objects.equals(this.campaignId, generateStocksOnWarehousesReportRequest.campaignId) &&
            Objects.equals(this.warehouseIds, generateStocksOnWarehousesReportRequest.warehouseIds) &&
            Objects.equals(this.reportDate, generateStocksOnWarehousesReportRequest.reportDate) &&
            Objects.equals(this.categoryIds, generateStocksOnWarehousesReportRequest.categoryIds) &&
            Objects.equals(this.hasStocks, generateStocksOnWarehousesReportRequest.hasStocks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(campaignId, warehouseIds, reportDate, categoryIds, hasStocks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GenerateStocksOnWarehousesReportRequest {\n");
        sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
        sb.append("    warehouseIds: ").append(toIndentedString(warehouseIds)).append("\n");
        sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
        sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
        sb.append("    hasStocks: ").append(toIndentedString(hasStocks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

