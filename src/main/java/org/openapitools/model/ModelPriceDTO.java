/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о ценах на модель товара.
 */
@JsonPropertyOrder({
  ModelPriceDTO.JSON_PROPERTY_AVG,
  ModelPriceDTO.JSON_PROPERTY_MAX,
  ModelPriceDTO.JSON_PROPERTY_MIN
})
@JsonTypeName("ModelPriceDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class ModelPriceDTO {
    public static final String JSON_PROPERTY_AVG = "avg";
    private BigDecimal avg;

    public static final String JSON_PROPERTY_MAX = "max";
    private BigDecimal max;

    public static final String JSON_PROPERTY_MIN = "min";
    private BigDecimal min;

    public ModelPriceDTO() {
    }

    public ModelPriceDTO avg(BigDecimal avg) {
        this.avg = avg;
        return this;
    }

    /**
     * Средняя цена предложения для модели в регионе.
     * @return avg
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_AVG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getAvg() {
        return avg;
    }

    @JsonProperty(JSON_PROPERTY_AVG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAvg(BigDecimal avg) {
        this.avg = avg;
    }

    public ModelPriceDTO max(BigDecimal max) {
        this.max = max;
        return this;
    }

    /**
     * Максимальная цена предложения для модели в регионе.
     * @return max
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_MAX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getMax() {
        return max;
    }

    @JsonProperty(JSON_PROPERTY_MAX)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMax(BigDecimal max) {
        this.max = max;
    }

    public ModelPriceDTO min(BigDecimal min) {
        this.min = min;
        return this;
    }

    /**
     * Минимальная цена предложения для модели в регионе.
     * @return min
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_MIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getMin() {
        return min;
    }

    @JsonProperty(JSON_PROPERTY_MIN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMin(BigDecimal min) {
        this.min = min;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelPriceDTO modelPriceDTO = (ModelPriceDTO) o;
        return Objects.equals(this.avg, modelPriceDTO.avg) &&
            Objects.equals(this.max, modelPriceDTO.max) &&
            Objects.equals(this.min, modelPriceDTO.min);
    }

    @Override
    public int hashCode() {
        return Objects.hash(avg, max, min);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ModelPriceDTO {\n");
        sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
        sb.append("    max: ").append(toIndentedString(max)).append("\n");
        sb.append("    min: ").append(toIndentedString(min)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

