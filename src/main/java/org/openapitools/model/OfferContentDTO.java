/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.ParameterValueDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Товар с указанными характеристиками.
 */
@JsonPropertyOrder({
  OfferContentDTO.JSON_PROPERTY_OFFER_ID,
  OfferContentDTO.JSON_PROPERTY_CATEGORY_ID,
  OfferContentDTO.JSON_PROPERTY_PARAMETER_VALUES
})
@JsonTypeName("OfferContentDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OfferContentDTO {
    public static final String JSON_PROPERTY_OFFER_ID = "offerId";
    private String offerId;

    public static final String JSON_PROPERTY_CATEGORY_ID = "categoryId";
    private Integer categoryId;

    public static final String JSON_PROPERTY_PARAMETER_VALUES = "parameterValues";
    private List<@Valid ParameterValueDTO> parameterValues = new ArrayList<>();

    public OfferContentDTO(String offerId, Integer categoryId, List<@Valid ParameterValueDTO> parameterValues) {
        this.offerId = offerId;
        this.categoryId = categoryId;
        this.parameterValues = parameterValues;
    }

    public OfferContentDTO offerId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @return offerId
     */
    @NotNull
    @Pattern(regexp="^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")
    @Size(min=1, max=255)
    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getOfferId() {
        return offerId;
    }

    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setOfferId(String offerId) {
        this.offerId = offerId;
    }

    public OfferContentDTO categoryId(Integer categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    /**
     * Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     * @return categoryId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getCategoryId() {
        return categoryId;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
    }

    public OfferContentDTO parameterValues(List<@Valid ParameterValueDTO> parameterValues) {
        this.parameterValues = parameterValues;
        return this;
    }

    public OfferContentDTO addParameterValuesItem(ParameterValueDTO parameterValuesItem) {
        this.parameterValues.add(parameterValuesItem);
        return this;
    }

    /**
     * Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. 
     * @return parameterValues
     */
    @NotNull
    @Size(min=1, max=300)
    @JsonProperty(JSON_PROPERTY_PARAMETER_VALUES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid ParameterValueDTO> getParameterValues() {
        return parameterValues;
    }

    @JsonProperty(JSON_PROPERTY_PARAMETER_VALUES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParameterValues(List<@Valid ParameterValueDTO> parameterValues) {
        this.parameterValues = parameterValues;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OfferContentDTO offerContentDTO = (OfferContentDTO) o;
        return Objects.equals(this.offerId, offerContentDTO.offerId) &&
            Objects.equals(this.categoryId, offerContentDTO.categoryId) &&
            Objects.equals(this.parameterValues, offerContentDTO.parameterValues);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offerId, categoryId, parameterValues);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OfferContentDTO {\n");
        sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    parameterValues: ").append(toIndentedString(parameterValues)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

