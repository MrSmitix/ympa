/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым. 
 */
@JsonPropertyOrder({
  ParameterValueDTO.JSON_PROPERTY_PARAMETER_ID,
  ParameterValueDTO.JSON_PROPERTY_UNIT_ID,
  ParameterValueDTO.JSON_PROPERTY_VALUE_ID,
  ParameterValueDTO.JSON_PROPERTY_VALUE
})
@JsonTypeName("ParameterValueDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class ParameterValueDTO {
    public static final String JSON_PROPERTY_PARAMETER_ID = "parameterId";
    private Long parameterId;

    public static final String JSON_PROPERTY_UNIT_ID = "unitId";
    private Long unitId;

    public static final String JSON_PROPERTY_VALUE_ID = "valueId";
    private Long valueId;

    public static final String JSON_PROPERTY_VALUE = "value";
    private String value;

    public ParameterValueDTO(Long parameterId) {
        this.parameterId = parameterId;
    }

    public ParameterValueDTO parameterId(Long parameterId) {
        this.parameterId = parameterId;
        return this;
    }

    /**
     * Идентификатор характеристики.
     * @return parameterId
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_PARAMETER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getParameterId() {
        return parameterId;
    }

    @JsonProperty(JSON_PROPERTY_PARAMETER_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParameterId(Long parameterId) {
        this.parameterId = parameterId;
    }

    public ParameterValueDTO unitId(Long unitId) {
        this.unitId = unitId;
        return this;
    }

    /**
     * Идентификатор единицы измерения. Если вы не передали параметр &#x60;unitId&#x60;, используется единица измерения по умолчанию.
     * @return unitId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_UNIT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getUnitId() {
        return unitId;
    }

    @JsonProperty(JSON_PROPERTY_UNIT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUnitId(Long unitId) {
        this.unitId = unitId;
    }

    public ParameterValueDTO valueId(Long valueId) {
        this.valueId = valueId;
        return this;
    }

    /**
     * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа &#x60;ENUM&#x60;. 
     * @return valueId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_VALUE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getValueId() {
        return valueId;
    }

    @JsonProperty(JSON_PROPERTY_VALUE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValueId(Long valueId) {
        this.valueId = valueId;
    }

    public ParameterValueDTO value(String value) {
        this.value = value;
        return this;
    }

    /**
     * Значение.
     * @return value
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getValue() {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValue(String value) {
        this.value = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ParameterValueDTO parameterValueDTO = (ParameterValueDTO) o;
        return Objects.equals(this.parameterId, parameterValueDTO.parameterId) &&
            Objects.equals(this.unitId, parameterValueDTO.unitId) &&
            Objects.equals(this.valueId, parameterValueDTO.valueId) &&
            Objects.equals(this.value, parameterValueDTO.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(parameterId, unitId, valueId, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ParameterValueDTO {\n");
        sb.append("    parameterId: ").append(toIndentedString(parameterId)).append("\n");
        sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
        sb.append("    valueId: ").append(toIndentedString(valueId)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

