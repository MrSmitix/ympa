/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.FieldStateType;
import org.openapitools.model.PriceCompetitivenessType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * GetOfferRecommendationsRequest
 */
@JsonPropertyOrder({
  GetOfferRecommendationsRequest.JSON_PROPERTY_OFFER_IDS,
  GetOfferRecommendationsRequest.JSON_PROPERTY_COFINANCE_PRICE_FILTER,
  GetOfferRecommendationsRequest.JSON_PROPERTY_RECOMMENDED_COFINANCE_PRICE_FILTER,
  GetOfferRecommendationsRequest.JSON_PROPERTY_COMPETITIVENESS_FILTER
})
@JsonTypeName("GetOfferRecommendationsRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GetOfferRecommendationsRequest {
    public static final String JSON_PROPERTY_OFFER_IDS = "offerIds";
    private List<@Pattern(regexp = "^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")@Size(min = 1, max = 255)String> offerIds = null;

    public static final String JSON_PROPERTY_COFINANCE_PRICE_FILTER = "cofinancePriceFilter";
    private FieldStateType cofinancePriceFilter;

    public static final String JSON_PROPERTY_RECOMMENDED_COFINANCE_PRICE_FILTER = "recommendedCofinancePriceFilter";
    private FieldStateType recommendedCofinancePriceFilter;

    public static final String JSON_PROPERTY_COMPETITIVENESS_FILTER = "competitivenessFilter";
    private PriceCompetitivenessType competitivenessFilter;

    public GetOfferRecommendationsRequest() {
    }

    public GetOfferRecommendationsRequest offerIds(List<@Pattern(regexp = "^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")@Size(min = 1, max = 255)String> offerIds) {
        this.offerIds = offerIds;
        return this;
    }

    public GetOfferRecommendationsRequest addOfferIdsItem(String offerIdsItem) {
        if (this.offerIds == null) {
            this.offerIds = new ArrayList<>();
        }
        this.offerIds.add(offerIdsItem);
        return this;
    }

    /**
     * Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
     * @return offerIds
     */
    @Nullable
    @Schema(name = "offerIds", description = "Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_OFFER_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Pattern(regexp = "^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")@Size(min = 1, max = 255)String> getOfferIds() {
        return offerIds;
    }

    @JsonProperty(JSON_PROPERTY_OFFER_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOfferIds(List<@Pattern(regexp = "^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")@Size(min = 1, max = 255)String> offerIds) {
        this.offerIds = offerIds;
    }

    public GetOfferRecommendationsRequest cofinancePriceFilter(FieldStateType cofinancePriceFilter) {
        this.cofinancePriceFilter = cofinancePriceFilter;
        return this;
    }

    /**
     * Get cofinancePriceFilter
     * @return cofinancePriceFilter
     */
    @Nullable
    @Schema(name = "cofinancePriceFilter", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COFINANCE_PRICE_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FieldStateType getCofinancePriceFilter() {
        return cofinancePriceFilter;
    }

    @JsonProperty(JSON_PROPERTY_COFINANCE_PRICE_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCofinancePriceFilter(FieldStateType cofinancePriceFilter) {
        this.cofinancePriceFilter = cofinancePriceFilter;
    }

    public GetOfferRecommendationsRequest recommendedCofinancePriceFilter(FieldStateType recommendedCofinancePriceFilter) {
        this.recommendedCofinancePriceFilter = recommendedCofinancePriceFilter;
        return this;
    }

    /**
     * Get recommendedCofinancePriceFilter
     * @return recommendedCofinancePriceFilter
     */
    @Nullable
    @Schema(name = "recommendedCofinancePriceFilter", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_RECOMMENDED_COFINANCE_PRICE_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FieldStateType getRecommendedCofinancePriceFilter() {
        return recommendedCofinancePriceFilter;
    }

    @JsonProperty(JSON_PROPERTY_RECOMMENDED_COFINANCE_PRICE_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecommendedCofinancePriceFilter(FieldStateType recommendedCofinancePriceFilter) {
        this.recommendedCofinancePriceFilter = recommendedCofinancePriceFilter;
    }

    public GetOfferRecommendationsRequest competitivenessFilter(PriceCompetitivenessType competitivenessFilter) {
        this.competitivenessFilter = competitivenessFilter;
        return this;
    }

    /**
     * Get competitivenessFilter
     * @return competitivenessFilter
     */
    @Nullable
    @Schema(name = "competitivenessFilter", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_COMPETITIVENESS_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PriceCompetitivenessType getCompetitivenessFilter() {
        return competitivenessFilter;
    }

    @JsonProperty(JSON_PROPERTY_COMPETITIVENESS_FILTER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCompetitivenessFilter(PriceCompetitivenessType competitivenessFilter) {
        this.competitivenessFilter = competitivenessFilter;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOfferRecommendationsRequest getOfferRecommendationsRequest = (GetOfferRecommendationsRequest) o;
        return Objects.equals(this.offerIds, getOfferRecommendationsRequest.offerIds) &&
            Objects.equals(this.cofinancePriceFilter, getOfferRecommendationsRequest.cofinancePriceFilter) &&
            Objects.equals(this.recommendedCofinancePriceFilter, getOfferRecommendationsRequest.recommendedCofinancePriceFilter) &&
            Objects.equals(this.competitivenessFilter, getOfferRecommendationsRequest.competitivenessFilter);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offerIds, cofinancePriceFilter, recommendedCofinancePriceFilter, competitivenessFilter);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetOfferRecommendationsRequest {\n");
        sb.append("    offerIds: ").append(toIndentedString(offerIds)).append("\n");
        sb.append("    cofinancePriceFilter: ").append(toIndentedString(cofinancePriceFilter)).append("\n");
        sb.append("    recommendedCofinancePriceFilter: ").append(toIndentedString(recommendedCofinancePriceFilter)).append("\n");
        sb.append("    competitivenessFilter: ").append(toIndentedString(competitivenessFilter)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

