/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Статистическая информация по отзыву.
 */
@Schema(name = "GoodsFeedbackStatisticsDTO", description = "Статистическая информация по отзыву.")
@JsonPropertyOrder({
  GoodsFeedbackStatisticsDTO.JSON_PROPERTY_RATING,
  GoodsFeedbackStatisticsDTO.JSON_PROPERTY_COMMENTS_COUNT,
  GoodsFeedbackStatisticsDTO.JSON_PROPERTY_RECOMMENDED,
  GoodsFeedbackStatisticsDTO.JSON_PROPERTY_PAID_AMOUNT
})
@JsonTypeName("GoodsFeedbackStatisticsDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GoodsFeedbackStatisticsDTO {
    public static final String JSON_PROPERTY_RATING = "rating";
    private Integer rating;

    public static final String JSON_PROPERTY_COMMENTS_COUNT = "commentsCount";
    private Long commentsCount;

    public static final String JSON_PROPERTY_RECOMMENDED = "recommended";
    private Boolean recommended;

    public static final String JSON_PROPERTY_PAID_AMOUNT = "paidAmount";
    private Long paidAmount;

    public GoodsFeedbackStatisticsDTO(Integer rating, Long commentsCount) {
        this.rating = rating;
        this.commentsCount = commentsCount;
    }

    public GoodsFeedbackStatisticsDTO rating(Integer rating) {
        this.rating = rating;
        return this;
    }

    /**
     * Оценка товара.
     * minimum: 1
     * maximum: 5
     * @return rating
     */
    @NotNull
    @Min(1)
    @Max(5)
    @Schema(name = "rating", description = "Оценка товара.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_RATING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getRating() {
        return rating;
    }

    @JsonProperty(JSON_PROPERTY_RATING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public GoodsFeedbackStatisticsDTO commentsCount(Long commentsCount) {
        this.commentsCount = commentsCount;
        return this;
    }

    /**
     * Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. 
     * @return commentsCount
     */
    @NotNull
    @Schema(name = "commentsCount", description = "Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_COMMENTS_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getCommentsCount() {
        return commentsCount;
    }

    @JsonProperty(JSON_PROPERTY_COMMENTS_COUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCommentsCount(Long commentsCount) {
        this.commentsCount = commentsCount;
    }

    public GoodsFeedbackStatisticsDTO recommended(Boolean recommended) {
        this.recommended = recommended;
        return this;
    }

    /**
     * Рекомендуют ли этот товар.
     * @return recommended
     */
    @Nullable
    @Schema(name = "recommended", description = "Рекомендуют ли этот товар.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_RECOMMENDED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getRecommended() {
        return recommended;
    }

    @JsonProperty(JSON_PROPERTY_RECOMMENDED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecommended(Boolean recommended) {
        this.recommended = recommended;
    }

    public GoodsFeedbackStatisticsDTO paidAmount(Long paidAmount) {
        this.paidAmount = paidAmount;
        return this;
    }

    /**
     * Количество баллов Плюса, которое автор получил за отзыв.
     * @return paidAmount
     */
    @Nullable
    @Schema(name = "paidAmount", description = "Количество баллов Плюса, которое автор получил за отзыв.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PAID_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getPaidAmount() {
        return paidAmount;
    }

    @JsonProperty(JSON_PROPERTY_PAID_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPaidAmount(Long paidAmount) {
        this.paidAmount = paidAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GoodsFeedbackStatisticsDTO goodsFeedbackStatisticsDTO = (GoodsFeedbackStatisticsDTO) o;
        return Objects.equals(this.rating, goodsFeedbackStatisticsDTO.rating) &&
            Objects.equals(this.commentsCount, goodsFeedbackStatisticsDTO.commentsCount) &&
            Objects.equals(this.recommended, goodsFeedbackStatisticsDTO.recommended) &&
            Objects.equals(this.paidAmount, goodsFeedbackStatisticsDTO.paidAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(rating, commentsCount, recommended, paidAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GoodsFeedbackStatisticsDTO {\n");
        sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
        sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
        sb.append("    recommended: ").append(toIndentedString(recommended)).append("\n");
        sb.append("    paidAmount: ").append(toIndentedString(paidAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

