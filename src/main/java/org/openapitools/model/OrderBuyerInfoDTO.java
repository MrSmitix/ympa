/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.OrderBuyerType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о покупателе и его номере телефона.
 */
@Schema(name = "OrderBuyerInfoDTO", description = "Информация о покупателе и его номере телефона.")
@JsonPropertyOrder({
  OrderBuyerInfoDTO.JSON_PROPERTY_ID,
  OrderBuyerInfoDTO.JSON_PROPERTY_LAST_NAME,
  OrderBuyerInfoDTO.JSON_PROPERTY_FIRST_NAME,
  OrderBuyerInfoDTO.JSON_PROPERTY_MIDDLE_NAME,
  OrderBuyerInfoDTO.JSON_PROPERTY_TYPE,
  OrderBuyerInfoDTO.JSON_PROPERTY_PHONE
})
@JsonTypeName("OrderBuyerInfoDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrderBuyerInfoDTO {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_LAST_NAME = "lastName";
    private String lastName;

    public static final String JSON_PROPERTY_FIRST_NAME = "firstName";
    private String firstName;

    public static final String JSON_PROPERTY_MIDDLE_NAME = "middleName";
    private String middleName;

    public static final String JSON_PROPERTY_TYPE = "type";
    private OrderBuyerType type;

    public static final String JSON_PROPERTY_PHONE = "phone";
    private String phone;

    public OrderBuyerInfoDTO() {
    }

    public OrderBuyerInfoDTO id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор покупателя.
     * @return id
     */
    @Nullable
    @Schema(name = "id", description = "Идентификатор покупателя.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public OrderBuyerInfoDTO lastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Фамилия покупателя.
     * @return lastName
     */
    @Nullable
    @Schema(name = "lastName", description = "Фамилия покупателя.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_LAST_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getLastName() {
        return lastName;
    }

    @JsonProperty(JSON_PROPERTY_LAST_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public OrderBuyerInfoDTO firstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Имя покупателя.
     * @return firstName
     */
    @Nullable
    @Schema(name = "firstName", description = "Имя покупателя.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FIRST_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFirstName() {
        return firstName;
    }

    @JsonProperty(JSON_PROPERTY_FIRST_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public OrderBuyerInfoDTO middleName(String middleName) {
        this.middleName = middleName;
        return this;
    }

    /**
     * Отчество покупателя.
     * @return middleName
     */
    @Nullable
    @Schema(name = "middleName", description = "Отчество покупателя.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMiddleName() {
        return middleName;
    }

    @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public OrderBuyerInfoDTO type(OrderBuyerType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @Nullable
    @Schema(name = "type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OrderBuyerType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(OrderBuyerType type) {
        this.type = type;
    }

    public OrderBuyerInfoDTO phone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: &#x60;+&lt;код_страны&gt;&lt;код_региона&gt;&lt;номер_телефона&gt;&#x60;. 
     * @return phone
     */
    @Nullable
    @Schema(name = "phone", description = "Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: `+<код_страны><код_региона><номер_телефона>`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPhone() {
        return phone;
    }

    @JsonProperty(JSON_PROPERTY_PHONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderBuyerInfoDTO orderBuyerInfoDTO = (OrderBuyerInfoDTO) o;
        return Objects.equals(this.id, orderBuyerInfoDTO.id) &&
            Objects.equals(this.lastName, orderBuyerInfoDTO.lastName) &&
            Objects.equals(this.firstName, orderBuyerInfoDTO.firstName) &&
            Objects.equals(this.middleName, orderBuyerInfoDTO.middleName) &&
            Objects.equals(this.type, orderBuyerInfoDTO.type) &&
            Objects.equals(this.phone, orderBuyerInfoDTO.phone);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, lastName, firstName, middleName, type, phone);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderBuyerInfoDTO {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
        sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
        sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

