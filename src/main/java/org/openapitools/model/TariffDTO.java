/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.TariffParameterDTO;
import org.openapitools.model.TariffType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 */
@JsonPropertyOrder({
  TariffDTO.JSON_PROPERTY_TYPE,
  TariffDTO.JSON_PROPERTY_PERCENT,
  TariffDTO.JSON_PROPERTY_AMOUNT,
  TariffDTO.JSON_PROPERTY_PARAMETERS
})
@JsonTypeName("TariffDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class TariffDTO {
    public static final String JSON_PROPERTY_TYPE = "type";
    private TariffType type;

    public static final String JSON_PROPERTY_PERCENT = "percent";
    private BigDecimal percent;

    public static final String JSON_PROPERTY_AMOUNT = "amount";
    private BigDecimal amount;

    public static final String JSON_PROPERTY_PARAMETERS = "parameters";
    private List<@Valid TariffParameterDTO> parameters = new ArrayList<>();

    public TariffDTO(TariffType type, BigDecimal amount, List<@Valid TariffParameterDTO> parameters) {
        this.type = type;
        this.amount = amount;
        this.parameters = parameters;
    }

    public TariffDTO type(TariffType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public TariffType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TariffType type) {
        this.type = type;
    }

    public TariffDTO percent(BigDecimal percent) {
        this.percent = percent;
        return this;
    }

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
     * @return percent
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PERCENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getPercent() {
        return percent;
    }

    @JsonProperty(JSON_PROPERTY_PERCENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPercent(BigDecimal percent) {
        this.percent = percent;
    }

    public TariffDTO amount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Значение тарифа в рублях.
     * @return amount
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getAmount() {
        return amount;
    }

    @JsonProperty(JSON_PROPERTY_AMOUNT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public TariffDTO parameters(List<@Valid TariffParameterDTO> parameters) {
        this.parameters = parameters;
        return this;
    }

    public TariffDTO addParametersItem(TariffParameterDTO parametersItem) {
        this.parameters.add(parametersItem);
        return this;
    }

    /**
     * Параметры расчета тарифа.
     * @return parameters
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid TariffParameterDTO> getParameters() {
        return parameters;
    }

    @JsonProperty(JSON_PROPERTY_PARAMETERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setParameters(List<@Valid TariffParameterDTO> parameters) {
        this.parameters = parameters;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TariffDTO tariffDTO = (TariffDTO) o;
        return Objects.equals(this.type, tariffDTO.type) &&
            Objects.equals(this.percent, tariffDTO.percent) &&
            Objects.equals(this.amount, tariffDTO.amount) &&
            Objects.equals(this.parameters, tariffDTO.parameters);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, percent, amount, parameters);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TariffDTO {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
        sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

