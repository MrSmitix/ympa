/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png) 
 */
@Schema(name = "OfferWeightDimensionsDTO", description = "Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png) ")
@JsonPropertyOrder({
  OfferWeightDimensionsDTO.JSON_PROPERTY_LENGTH,
  OfferWeightDimensionsDTO.JSON_PROPERTY_WIDTH,
  OfferWeightDimensionsDTO.JSON_PROPERTY_HEIGHT,
  OfferWeightDimensionsDTO.JSON_PROPERTY_WEIGHT
})
@JsonTypeName("OfferWeightDimensionsDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OfferWeightDimensionsDTO {
    public static final String JSON_PROPERTY_LENGTH = "length";
    private BigDecimal length;

    public static final String JSON_PROPERTY_WIDTH = "width";
    private BigDecimal width;

    public static final String JSON_PROPERTY_HEIGHT = "height";
    private BigDecimal height;

    public static final String JSON_PROPERTY_WEIGHT = "weight";
    private BigDecimal weight;

    public OfferWeightDimensionsDTO(BigDecimal length, BigDecimal width, BigDecimal height, BigDecimal weight) {
        this.length = length;
        this.width = width;
        this.height = height;
        this.weight = weight;
    }

    public OfferWeightDimensionsDTO length(BigDecimal length) {
        this.length = length;
        return this;
    }

    /**
     * Длина упаковки в см. 
     * @return length
     */
    @NotNull
    @Schema(name = "length", example = "65.55", description = "Длина упаковки в см. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getLength() {
        return length;
    }

    @JsonProperty(JSON_PROPERTY_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLength(BigDecimal length) {
        this.length = length;
    }

    public OfferWeightDimensionsDTO width(BigDecimal width) {
        this.width = width;
        return this;
    }

    /**
     * Ширина упаковки в см. 
     * @return width
     */
    @NotNull
    @Schema(name = "width", example = "50.7", description = "Ширина упаковки в см. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getWidth() {
        return width;
    }

    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWidth(BigDecimal width) {
        this.width = width;
    }

    public OfferWeightDimensionsDTO height(BigDecimal height) {
        this.height = height;
        return this;
    }

    /**
     * Высота упаковки в см. 
     * @return height
     */
    @NotNull
    @Schema(name = "height", example = "20", description = "Высота упаковки в см. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getHeight() {
        return height;
    }

    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setHeight(BigDecimal height) {
        this.height = height;
    }

    public OfferWeightDimensionsDTO weight(BigDecimal weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Вес товара в кг с учетом упаковки (брутто). 
     * @return weight
     */
    @NotNull
    @Schema(name = "weight", example = "1.001", description = "Вес товара в кг с учетом упаковки (брутто). ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_WEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getWeight() {
        return weight;
    }

    @JsonProperty(JSON_PROPERTY_WEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWeight(BigDecimal weight) {
        this.weight = weight;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OfferWeightDimensionsDTO offerWeightDimensionsDTO = (OfferWeightDimensionsDTO) o;
        return Objects.equals(this.length, offerWeightDimensionsDTO.length) &&
            Objects.equals(this.width, offerWeightDimensionsDTO.width) &&
            Objects.equals(this.height, offerWeightDimensionsDTO.height) &&
            Objects.equals(this.weight, offerWeightDimensionsDTO.weight);
    }

    @Override
    public int hashCode() {
        return Objects.hash(length, width, height, weight);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OfferWeightDimensionsDTO {\n");
        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

