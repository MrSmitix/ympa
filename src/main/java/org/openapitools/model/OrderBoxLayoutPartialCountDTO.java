/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о части товара в коробке.
 */
@Schema(name = "OrderBoxLayoutPartialCountDTO", description = "Информация о части товара в коробке.")
@JsonPropertyOrder({
  OrderBoxLayoutPartialCountDTO.JSON_PROPERTY_CURRENT,
  OrderBoxLayoutPartialCountDTO.JSON_PROPERTY_TOTAL
})
@JsonTypeName("OrderBoxLayoutPartialCountDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrderBoxLayoutPartialCountDTO {
    public static final String JSON_PROPERTY_CURRENT = "current";
    private Integer current;

    public static final String JSON_PROPERTY_TOTAL = "total";
    private Integer total;

    public OrderBoxLayoutPartialCountDTO(Integer current, Integer total) {
        this.current = current;
        this.total = total;
    }

    public OrderBoxLayoutPartialCountDTO current(Integer current) {
        this.current = current;
        return this;
    }

    /**
     * Номер части, начиная с 1.
     * minimum: 1
     * @return current
     */
    @NotNull
    @Min(1)
    @Schema(name = "current", description = "Номер части, начиная с 1.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CURRENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getCurrent() {
        return current;
    }

    @JsonProperty(JSON_PROPERTY_CURRENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCurrent(Integer current) {
        this.current = current;
    }

    public OrderBoxLayoutPartialCountDTO total(Integer total) {
        this.total = total;
        return this;
    }

    /**
     * На сколько всего частей разделен товар.
     * minimum: 2
     * @return total
     */
    @NotNull
    @Min(2)
    @Schema(name = "total", description = "На сколько всего частей разделен товар.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTotal(Integer total) {
        this.total = total;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderBoxLayoutPartialCountDTO orderBoxLayoutPartialCountDTO = (OrderBoxLayoutPartialCountDTO) o;
        return Objects.equals(this.current, orderBoxLayoutPartialCountDTO.current) &&
            Objects.equals(this.total, orderBoxLayoutPartialCountDTO.total);
    }

    @Override
    public int hashCode() {
        return Objects.hash(current, total);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderBoxLayoutPartialCountDTO {\n");
        sb.append("    current: ").append(toIndentedString(current)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

