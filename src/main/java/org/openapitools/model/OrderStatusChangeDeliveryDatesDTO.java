/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Диапазон дат доставки.
 */
@JsonPropertyOrder({
  OrderStatusChangeDeliveryDatesDTO.JSON_PROPERTY_REAL_DELIVERY_DATE
})
@JsonTypeName("OrderStatusChangeDeliveryDatesDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrderStatusChangeDeliveryDatesDTO {
    public static final String JSON_PROPERTY_REAL_DELIVERY_DATE = "realDeliveryDate";
    private LocalDate realDeliveryDate;

    public OrderStatusChangeDeliveryDatesDTO() {
    }

    public OrderStatusChangeDeliveryDatesDTO realDeliveryDate(LocalDate realDeliveryDate) {
        this.realDeliveryDate = realDeliveryDate;
        return this;
    }

    /**
     * **Только для модели DBS**  Фактическая дата доставки. &lt;br&gt;&lt;br&gt; Когда передавать параметр &#x60;realDeliveryDate&#x60;:  * Не передавайте параметр, если:   * переводите заказ в любой статус, кроме &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;;   * меняете статус заказа на &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60; в день доставки — будет указана дата выполнения запроса. * Передавайте дату доставки, если переводите заказ в статус &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60; не в день доставки. Нельзя указывать дату доставки в будущем.    {% note warning \&quot;Индекс качества\&quot; %}    Передача статуса после установленного срока снижает индекс качества. О сроках читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/tech#dbs).    {% endnote %}      
     * @return realDeliveryDate
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_REAL_DELIVERY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDate getRealDeliveryDate() {
        return realDeliveryDate;
    }

    @JsonProperty(JSON_PROPERTY_REAL_DELIVERY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public void setRealDeliveryDate(LocalDate realDeliveryDate) {
        this.realDeliveryDate = realDeliveryDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderStatusChangeDeliveryDatesDTO orderStatusChangeDeliveryDatesDTO = (OrderStatusChangeDeliveryDatesDTO) o;
        return Objects.equals(this.realDeliveryDate, orderStatusChangeDeliveryDatesDTO.realDeliveryDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(realDeliveryDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderStatusChangeDeliveryDatesDTO {\n");
        sb.append("    realDeliveryDate: ").append(toIndentedString(realDeliveryDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

