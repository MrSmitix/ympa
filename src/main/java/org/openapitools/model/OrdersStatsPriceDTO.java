/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import org.openapitools.model.OrdersStatsPriceType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Цена или скидки на товар.
 */
@JsonPropertyOrder({
  OrdersStatsPriceDTO.JSON_PROPERTY_TYPE,
  OrdersStatsPriceDTO.JSON_PROPERTY_COST_PER_ITEM,
  OrdersStatsPriceDTO.JSON_PROPERTY_TOTAL
})
@JsonTypeName("OrdersStatsPriceDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrdersStatsPriceDTO {
    public static final String JSON_PROPERTY_TYPE = "type";
    private OrdersStatsPriceType type;

    public static final String JSON_PROPERTY_COST_PER_ITEM = "costPerItem";
    private BigDecimal costPerItem;

    public static final String JSON_PROPERTY_TOTAL = "total";
    private BigDecimal total;

    public OrdersStatsPriceDTO() {
    }

    public OrdersStatsPriceDTO type(OrdersStatsPriceType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OrdersStatsPriceType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(OrdersStatsPriceType type) {
        this.type = type;
    }

    public OrdersStatsPriceDTO costPerItem(BigDecimal costPerItem) {
        this.costPerItem = costPerItem;
        return this;
    }

    /**
     * Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. 
     * @return costPerItem
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_COST_PER_ITEM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getCostPerItem() {
        return costPerItem;
    }

    @JsonProperty(JSON_PROPERTY_COST_PER_ITEM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCostPerItem(BigDecimal costPerItem) {
        this.costPerItem = costPerItem;
    }

    public OrdersStatsPriceDTO total(BigDecimal total) {
        this.total = total;
        return this;
    }

    /**
     * Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. 
     * @return total
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotal(BigDecimal total) {
        this.total = total;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrdersStatsPriceDTO ordersStatsPriceDTO = (OrdersStatsPriceDTO) o;
        return Objects.equals(this.type, ordersStatsPriceDTO.type) &&
            Objects.equals(this.costPerItem, ordersStatsPriceDTO.costPerItem) &&
            Objects.equals(this.total, ordersStatsPriceDTO.total);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, costPerItem, total);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrdersStatsPriceDTO {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    costPerItem: ").append(toIndentedString(costPerItem)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

