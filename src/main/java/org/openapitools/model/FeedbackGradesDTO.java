/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.FeedbackFactorDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 */
@JsonPropertyOrder({
  FeedbackGradesDTO.JSON_PROPERTY_AVERAGE,
  FeedbackGradesDTO.JSON_PROPERTY_AGREE_COUNT,
  FeedbackGradesDTO.JSON_PROPERTY_REJECT_COUNT,
  FeedbackGradesDTO.JSON_PROPERTY_FACTORS
})
@JsonTypeName("FeedbackGradesDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class FeedbackGradesDTO {
    public static final String JSON_PROPERTY_AVERAGE = "average";
    private BigDecimal average;

    public static final String JSON_PROPERTY_AGREE_COUNT = "agreeCount";
    private Long agreeCount;

    public static final String JSON_PROPERTY_REJECT_COUNT = "rejectCount";
    private Long rejectCount;

    public static final String JSON_PROPERTY_FACTORS = "factors";
    private List<@Valid FeedbackFactorDTO> factors = new ArrayList<>();

    public FeedbackGradesDTO(List<@Valid FeedbackFactorDTO> factors) {
        this.factors = factors;
    }

    public FeedbackGradesDTO average(BigDecimal average) {
        this.average = average;
        return this;
    }

    /**
     * Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
     * @return average
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BigDecimal getAverage() {
        return average;
    }

    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAverage(BigDecimal average) {
        this.average = average;
    }

    public FeedbackGradesDTO agreeCount(Long agreeCount) {
        this.agreeCount = agreeCount;
        return this;
    }

    /**
     * Количество пользователей, считающих отзыв полезным.
     * @return agreeCount
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_AGREE_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getAgreeCount() {
        return agreeCount;
    }

    @JsonProperty(JSON_PROPERTY_AGREE_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAgreeCount(Long agreeCount) {
        this.agreeCount = agreeCount;
    }

    public FeedbackGradesDTO rejectCount(Long rejectCount) {
        this.rejectCount = rejectCount;
        return this;
    }

    /**
     * Количество пользователей, считающих отзыв бесполезным.
     * @return rejectCount
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_REJECT_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getRejectCount() {
        return rejectCount;
    }

    @JsonProperty(JSON_PROPERTY_REJECT_COUNT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRejectCount(Long rejectCount) {
        this.rejectCount = rejectCount;
    }

    public FeedbackGradesDTO factors(List<@Valid FeedbackFactorDTO> factors) {
        this.factors = factors;
        return this;
    }

    public FeedbackGradesDTO addFactorsItem(FeedbackFactorDTO factorsItem) {
        this.factors.add(factorsItem);
        return this;
    }

    /**
     * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
     * @return factors
     */
    @NotNull
    @JsonProperty(JSON_PROPERTY_FACTORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid FeedbackFactorDTO> getFactors() {
        return factors;
    }

    @JsonProperty(JSON_PROPERTY_FACTORS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFactors(List<@Valid FeedbackFactorDTO> factors) {
        this.factors = factors;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedbackGradesDTO feedbackGradesDTO = (FeedbackGradesDTO) o;
        return Objects.equals(this.average, feedbackGradesDTO.average) &&
            Objects.equals(this.agreeCount, feedbackGradesDTO.agreeCount) &&
            Objects.equals(this.rejectCount, feedbackGradesDTO.rejectCount) &&
            Objects.equals(this.factors, feedbackGradesDTO.factors);
    }

    @Override
    public int hashCode() {
        return Objects.hash(average, agreeCount, rejectCount, factors);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedbackGradesDTO {\n");
        sb.append("    average: ").append(toIndentedString(average)).append("\n");
        sb.append("    agreeCount: ").append(toIndentedString(agreeCount)).append("\n");
        sb.append("    rejectCount: ").append(toIndentedString(rejectCount)).append("\n");
        sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

