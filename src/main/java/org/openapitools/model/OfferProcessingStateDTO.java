/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.OfferProcessingNoteDTO;
import org.openapitools.model.OfferProcessingStatusType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Информация о статусе публикации товара на Маркете.
 */
@JsonPropertyOrder({
  OfferProcessingStateDTO.JSON_PROPERTY_STATUS,
  OfferProcessingStateDTO.JSON_PROPERTY_NOTES
})
@JsonTypeName("OfferProcessingStateDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OfferProcessingStateDTO {
    public static final String JSON_PROPERTY_STATUS = "status";
    private OfferProcessingStatusType status;

    public static final String JSON_PROPERTY_NOTES = "notes";
    private List<@Valid OfferProcessingNoteDTO> notes = null;

    public OfferProcessingStateDTO() {
    }

    public OfferProcessingStateDTO status(OfferProcessingStatusType status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * @return status
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OfferProcessingStatusType getStatus() {
        return status;
    }

    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatus(OfferProcessingStatusType status) {
        this.status = status;
    }

    public OfferProcessingStateDTO notes(List<@Valid OfferProcessingNoteDTO> notes) {
        this.notes = notes;
        return this;
    }

    public OfferProcessingStateDTO addNotesItem(OfferProcessingNoteDTO notesItem) {
        if (this.notes == null) {
            this.notes = new ArrayList<>();
        }
        this.notes.add(notesItem);
        return this;
    }

    /**
     * Причины, по которым товар не прошел модерацию.
     * @return notes
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NOTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid OfferProcessingNoteDTO> getNotes() {
        return notes;
    }

    @JsonProperty(JSON_PROPERTY_NOTES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNotes(List<@Valid OfferProcessingNoteDTO> notes) {
        this.notes = notes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OfferProcessingStateDTO offerProcessingStateDTO = (OfferProcessingStateDTO) o;
        return Objects.equals(this.status, offerProcessingStateDTO.status) &&
            Objects.equals(this.notes, offerProcessingStateDTO.notes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, notes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OfferProcessingStateDTO {\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

