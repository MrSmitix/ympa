/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.BasePriceDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о товаре.
 */
@Schema(name = "SuggestedOfferDTO", description = "Информация о товаре.")
@JsonPropertyOrder({
  SuggestedOfferDTO.JSON_PROPERTY_OFFER_ID,
  SuggestedOfferDTO.JSON_PROPERTY_NAME,
  SuggestedOfferDTO.JSON_PROPERTY_CATEGORY,
  SuggestedOfferDTO.JSON_PROPERTY_VENDOR,
  SuggestedOfferDTO.JSON_PROPERTY_BARCODES,
  SuggestedOfferDTO.JSON_PROPERTY_DESCRIPTION,
  SuggestedOfferDTO.JSON_PROPERTY_VENDOR_CODE,
  SuggestedOfferDTO.JSON_PROPERTY_BASIC_PRICE
})
@JsonTypeName("SuggestedOfferDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class SuggestedOfferDTO {
    public static final String JSON_PROPERTY_OFFER_ID = "offerId";
    private String offerId;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_CATEGORY = "category";
    private String category;

    public static final String JSON_PROPERTY_VENDOR = "vendor";
    private String vendor;

    public static final String JSON_PROPERTY_BARCODES = "barcodes";
    private List<String> barcodes = null;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_VENDOR_CODE = "vendorCode";
    private String vendorCode;

    public static final String JSON_PROPERTY_BASIC_PRICE = "basicPrice";
    private BasePriceDTO basicPrice;

    public SuggestedOfferDTO() {
    }

    public SuggestedOfferDTO offerId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @return offerId
     */
    @Nullable
    @Pattern(regexp="^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")
    @Size(min=1, max=255)
    @Schema(name = "offerId", description = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getOfferId() {
        return offerId;
    }

    @JsonProperty(JSON_PROPERTY_OFFER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOfferId(String offerId) {
        this.offerId = offerId;
    }

    public SuggestedOfferDTO name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
     * @return name
     */
    @Nullable
    @Size(max=256)
    @Schema(name = "name", example = "Ударная дрель Makita HP1630, 710 Вт", description = "Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public SuggestedOfferDTO category(String category) {
        this.category = category;
        return this;
    }

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
     * @return category
     */
    @Nullable
    @Schema(name = "category", description = "Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCategory() {
        return category;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCategory(String category) {
        this.category = category;
    }

    public SuggestedOfferDTO vendor(String vendor) {
        this.vendor = vendor;
        return this;
    }

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     * @return vendor
     */
    @Nullable
    @Schema(name = "vendor", example = "LEVENHUK", description = "Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_VENDOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getVendor() {
        return vendor;
    }

    @JsonProperty(JSON_PROPERTY_VENDOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVendor(String vendor) {
        this.vendor = vendor;
    }

    public SuggestedOfferDTO barcodes(List<String> barcodes) {
        this.barcodes = barcodes;
        return this;
    }

    public SuggestedOfferDTO addBarcodesItem(String barcodesItem) {
        if (this.barcodes == null) {
            this.barcodes = new ArrayList<>();
        }
        this.barcodes.add(barcodesItem);
        return this;
    }

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
     * @return barcodes
     */
    @Nullable
    @Schema(name = "barcodes", description = "Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_BARCODES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<String> getBarcodes() {
        return barcodes;
    }

    @JsonProperty(JSON_PROPERTY_BARCODES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBarcodes(List<String> barcodes) {
        this.barcodes = barcodes;
    }

    public SuggestedOfferDTO description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
     * @return description
     */
    @Nullable
    @Size(max=6000)
    @Schema(name = "description", description = "Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public SuggestedOfferDTO vendorCode(String vendorCode) {
        this.vendorCode = vendorCode;
        return this;
    }

    /**
     * Артикул товара от производителя.
     * @return vendorCode
     */
    @Nullable
    @Schema(name = "vendorCode", example = "VNDR-0005A", description = "Артикул товара от производителя.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_VENDOR_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getVendorCode() {
        return vendorCode;
    }

    @JsonProperty(JSON_PROPERTY_VENDOR_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVendorCode(String vendorCode) {
        this.vendorCode = vendorCode;
    }

    public SuggestedOfferDTO basicPrice(BasePriceDTO basicPrice) {
        this.basicPrice = basicPrice;
        return this;
    }

    /**
     * Get basicPrice
     * @return basicPrice
     */
    @Valid
    @Nullable
    @Schema(name = "basicPrice", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_BASIC_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public BasePriceDTO getBasicPrice() {
        return basicPrice;
    }

    @JsonProperty(JSON_PROPERTY_BASIC_PRICE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBasicPrice(BasePriceDTO basicPrice) {
        this.basicPrice = basicPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SuggestedOfferDTO suggestedOfferDTO = (SuggestedOfferDTO) o;
        return Objects.equals(this.offerId, suggestedOfferDTO.offerId) &&
            Objects.equals(this.name, suggestedOfferDTO.name) &&
            Objects.equals(this.category, suggestedOfferDTO.category) &&
            Objects.equals(this.vendor, suggestedOfferDTO.vendor) &&
            Objects.equals(this.barcodes, suggestedOfferDTO.barcodes) &&
            Objects.equals(this.description, suggestedOfferDTO.description) &&
            Objects.equals(this.vendorCode, suggestedOfferDTO.vendorCode) &&
            Objects.equals(this.basicPrice, suggestedOfferDTO.basicPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(offerId, name, category, vendor, barcodes, description, vendorCode, basicPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SuggestedOfferDTO {\n");
        sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    category: ").append(toIndentedString(category)).append("\n");
        sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
        sb.append("    barcodes: ").append(toIndentedString(barcodes)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    vendorCode: ").append(toIndentedString(vendorCode)).append("\n");
        sb.append("    basicPrice: ").append(toIndentedString(basicPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

