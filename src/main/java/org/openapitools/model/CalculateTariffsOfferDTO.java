/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 */
@Schema(name = "CalculateTariffsOfferDTO", description = "Параметры товара, для которого нужно рассчитать стоимость услуг.")
@JsonPropertyOrder({
  CalculateTariffsOfferDTO.JSON_PROPERTY_CATEGORY_ID,
  CalculateTariffsOfferDTO.JSON_PROPERTY_PRICE,
  CalculateTariffsOfferDTO.JSON_PROPERTY_LENGTH,
  CalculateTariffsOfferDTO.JSON_PROPERTY_WIDTH,
  CalculateTariffsOfferDTO.JSON_PROPERTY_HEIGHT,
  CalculateTariffsOfferDTO.JSON_PROPERTY_WEIGHT,
  CalculateTariffsOfferDTO.JSON_PROPERTY_QUANTITY
})
@JsonTypeName("CalculateTariffsOfferDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CalculateTariffsOfferDTO {
    public static final String JSON_PROPERTY_CATEGORY_ID = "categoryId";
    private Long categoryId;

    public static final String JSON_PROPERTY_PRICE = "price";
    private BigDecimal price;

    public static final String JSON_PROPERTY_LENGTH = "length";
    private BigDecimal length;

    public static final String JSON_PROPERTY_WIDTH = "width";
    private BigDecimal width;

    public static final String JSON_PROPERTY_HEIGHT = "height";
    private BigDecimal height;

    public static final String JSON_PROPERTY_WEIGHT = "weight";
    private BigDecimal weight;

    public static final String JSON_PROPERTY_QUANTITY = "quantity";
    private Integer quantity = 1;

    public CalculateTariffsOfferDTO(Long categoryId, BigDecimal price, BigDecimal length, BigDecimal width, BigDecimal height, BigDecimal weight) {
        this.categoryId = categoryId;
        this.price = price;
        this.length = length;
        this.width = width;
        this.height = height;
        this.weight = weight;
    }

    public CalculateTariffsOfferDTO categoryId(Long categoryId) {
        this.categoryId = categoryId;
        return this;
    }

    /**
     * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
     * minimum: 0
     * @return categoryId
     */
    @NotNull
    @Min(0L)
    @Schema(name = "categoryId", description = "Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getCategoryId() {
        return categoryId;
    }

    @JsonProperty(JSON_PROPERTY_CATEGORY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public CalculateTariffsOfferDTO price(BigDecimal price) {
        this.price = price;
        return this;
    }

    /**
     * Цена на товар в рублях.
     * minimum: 0
     * @return price
     */
    @NotNull
    @DecimalMin(value="0", inclusive=false)
    @Schema(name = "price", description = "Цена на товар в рублях.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getPrice() {
        return price;
    }

    @JsonProperty(JSON_PROPERTY_PRICE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public CalculateTariffsOfferDTO length(BigDecimal length) {
        this.length = length;
        return this;
    }

    /**
     * Длина товара в сантиметрах.
     * minimum: 0
     * @return length
     */
    @NotNull
    @DecimalMin(value="0", inclusive=false)
    @Schema(name = "length", description = "Длина товара в сантиметрах.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getLength() {
        return length;
    }

    @JsonProperty(JSON_PROPERTY_LENGTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLength(BigDecimal length) {
        this.length = length;
    }

    public CalculateTariffsOfferDTO width(BigDecimal width) {
        this.width = width;
        return this;
    }

    /**
     * Ширина товара в сантиметрах.
     * minimum: 0
     * @return width
     */
    @NotNull
    @DecimalMin(value="0", inclusive=false)
    @Schema(name = "width", description = "Ширина товара в сантиметрах.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getWidth() {
        return width;
    }

    @JsonProperty(JSON_PROPERTY_WIDTH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWidth(BigDecimal width) {
        this.width = width;
    }

    public CalculateTariffsOfferDTO height(BigDecimal height) {
        this.height = height;
        return this;
    }

    /**
     * Высота товара в сантиметрах.
     * minimum: 0
     * @return height
     */
    @NotNull
    @DecimalMin(value="0", inclusive=false)
    @Schema(name = "height", description = "Высота товара в сантиметрах.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getHeight() {
        return height;
    }

    @JsonProperty(JSON_PROPERTY_HEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setHeight(BigDecimal height) {
        this.height = height;
    }

    public CalculateTariffsOfferDTO weight(BigDecimal weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Вес товара в килограммах.
     * minimum: 0
     * @return weight
     */
    @NotNull
    @DecimalMin(value="0", inclusive=false)
    @Schema(name = "weight", description = "Вес товара в килограммах.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_WEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public BigDecimal getWeight() {
        return weight;
    }

    @JsonProperty(JSON_PROPERTY_WEIGHT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setWeight(BigDecimal weight) {
        this.weight = weight;
    }

    public CalculateTariffsOfferDTO quantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Квант продажи — количество единиц товара в одном товарном предложении.
     * minimum: 1
     * @return quantity
     */
    @Nullable
    @Min(1)
    @Schema(name = "quantity", description = "Квант продажи — количество единиц товара в одном товарном предложении.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getQuantity() {
        return quantity;
    }

    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalculateTariffsOfferDTO calculateTariffsOfferDTO = (CalculateTariffsOfferDTO) o;
        return Objects.equals(this.categoryId, calculateTariffsOfferDTO.categoryId) &&
            Objects.equals(this.price, calculateTariffsOfferDTO.price) &&
            Objects.equals(this.length, calculateTariffsOfferDTO.length) &&
            Objects.equals(this.width, calculateTariffsOfferDTO.width) &&
            Objects.equals(this.height, calculateTariffsOfferDTO.height) &&
            Objects.equals(this.weight, calculateTariffsOfferDTO.weight) &&
            Objects.equals(this.quantity, calculateTariffsOfferDTO.quantity);
    }

    @Override
    public int hashCode() {
        return Objects.hash(categoryId, price, length, width, height, weight, quantity);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CalculateTariffsOfferDTO {\n");
        sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
        sb.append("    price: ").append(toIndentedString(price)).append("\n");
        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    width: ").append(toIndentedString(width)).append("\n");
        sb.append("    height: ").append(toIndentedString(height)).append("\n");
        sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
        sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

