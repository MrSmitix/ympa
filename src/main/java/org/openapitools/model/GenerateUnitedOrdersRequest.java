/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Данные, необходимые для генерации отчета. 
 */
@Schema(name = "GenerateUnitedOrdersRequest", description = "Данные, необходимые для генерации отчета. ")
@JsonPropertyOrder({
  GenerateUnitedOrdersRequest.JSON_PROPERTY_BUSINESS_ID,
  GenerateUnitedOrdersRequest.JSON_PROPERTY_DATE_FROM,
  GenerateUnitedOrdersRequest.JSON_PROPERTY_DATE_TO,
  GenerateUnitedOrdersRequest.JSON_PROPERTY_CAMPAIGN_IDS,
  GenerateUnitedOrdersRequest.JSON_PROPERTY_PROMO_ID
})
@JsonTypeName("GenerateUnitedOrdersRequest")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GenerateUnitedOrdersRequest {
    public static final String JSON_PROPERTY_BUSINESS_ID = "businessId";
    private Long businessId;

    public static final String JSON_PROPERTY_DATE_FROM = "dateFrom";
    private LocalDate dateFrom;

    public static final String JSON_PROPERTY_DATE_TO = "dateTo";
    private LocalDate dateTo;

    public static final String JSON_PROPERTY_CAMPAIGN_IDS = "campaignIds";
    private List<Long> campaignIds = null;

    public static final String JSON_PROPERTY_PROMO_ID = "promoId";
    private String promoId;

    public GenerateUnitedOrdersRequest(Long businessId, LocalDate dateFrom, LocalDate dateTo) {
        this.businessId = businessId;
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
    }

    public GenerateUnitedOrdersRequest businessId(Long businessId) {
        this.businessId = businessId;
        return this;
    }

    /**
     * Идентификатор бизнеса.
     * @return businessId
     */
    @NotNull
    @Schema(name = "businessId", description = "Идентификатор бизнеса.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_BUSINESS_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getBusinessId() {
        return businessId;
    }

    @JsonProperty(JSON_PROPERTY_BUSINESS_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBusinessId(Long businessId) {
        this.businessId = businessId;
    }

    public GenerateUnitedOrdersRequest dateFrom(LocalDate dateFrom) {
        this.dateFrom = dateFrom;
        return this;
    }

    /**
     * Начало периода, включительно.
     * @return dateFrom
     */
    @NotNull
    @Schema(name = "dateFrom", description = "Начало периода, включительно.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATE_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDate getDateFrom() {
        return dateFrom;
    }

    @JsonProperty(JSON_PROPERTY_DATE_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public void setDateFrom(LocalDate dateFrom) {
        this.dateFrom = dateFrom;
    }

    public GenerateUnitedOrdersRequest dateTo(LocalDate dateTo) {
        this.dateTo = dateTo;
        return this;
    }

    /**
     * Конец периода, включительно. Максимальный период — 1 год.
     * @return dateTo
     */
    @NotNull
    @Schema(name = "dateTo", description = "Конец периода, включительно. Максимальный период — 1 год.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_DATE_TO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDate getDateTo() {
        return dateTo;
    }

    @JsonProperty(JSON_PROPERTY_DATE_TO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public void setDateTo(LocalDate dateTo) {
        this.dateTo = dateTo;
    }

    public GenerateUnitedOrdersRequest campaignIds(List<Long> campaignIds) {
        this.campaignIds = campaignIds;
        return this;
    }

    public GenerateUnitedOrdersRequest addCampaignIdsItem(Long campaignIdsItem) {
        if (this.campaignIds == null) {
            this.campaignIds = new ArrayList<>();
        }
        this.campaignIds.add(campaignIdsItem);
        return this;
    }

    /**
     * Список магазинов, которые нужны в отчете.
     * @return campaignIds
     */
    @Nullable
    @Schema(name = "campaignIds", description = "Список магазинов, которые нужны в отчете.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CAMPAIGN_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<Long> getCampaignIds() {
        return campaignIds;
    }

    @JsonProperty(JSON_PROPERTY_CAMPAIGN_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCampaignIds(List<Long> campaignIds) {
        this.campaignIds = campaignIds;
    }

    public GenerateUnitedOrdersRequest promoId(String promoId) {
        this.promoId = promoId;
        return this;
    }

    /**
     * Идентификатор акции, товары из которой нужны в отчете.
     * @return promoId
     */
    @Nullable
    @Schema(name = "promoId", description = "Идентификатор акции, товары из которой нужны в отчете.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PROMO_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPromoId() {
        return promoId;
    }

    @JsonProperty(JSON_PROPERTY_PROMO_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPromoId(String promoId) {
        this.promoId = promoId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerateUnitedOrdersRequest generateUnitedOrdersRequest = (GenerateUnitedOrdersRequest) o;
        return Objects.equals(this.businessId, generateUnitedOrdersRequest.businessId) &&
            Objects.equals(this.dateFrom, generateUnitedOrdersRequest.dateFrom) &&
            Objects.equals(this.dateTo, generateUnitedOrdersRequest.dateTo) &&
            Objects.equals(this.campaignIds, generateUnitedOrdersRequest.campaignIds) &&
            Objects.equals(this.promoId, generateUnitedOrdersRequest.promoId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(businessId, dateFrom, dateTo, campaignIds, promoId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GenerateUnitedOrdersRequest {\n");
        sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
        sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
        sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
        sb.append("    campaignIds: ").append(toIndentedString(campaignIds)).append("\n");
        sb.append("    promoId: ").append(toIndentedString(promoId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

