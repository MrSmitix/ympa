/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Диапазон дат доставки.
 */
@Schema(name = "OrderDeliveryDatesDTO", description = "Диапазон дат доставки.")
@JsonPropertyOrder({
  OrderDeliveryDatesDTO.JSON_PROPERTY_FROM_DATE,
  OrderDeliveryDatesDTO.JSON_PROPERTY_TO_DATE,
  OrderDeliveryDatesDTO.JSON_PROPERTY_FROM_TIME,
  OrderDeliveryDatesDTO.JSON_PROPERTY_TO_TIME,
  OrderDeliveryDatesDTO.JSON_PROPERTY_REAL_DELIVERY_DATE
})
@JsonTypeName("OrderDeliveryDatesDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class OrderDeliveryDatesDTO {
    public static final String JSON_PROPERTY_FROM_DATE = "fromDate";
    private String fromDate;

    public static final String JSON_PROPERTY_TO_DATE = "toDate";
    private String toDate;

    public static final String JSON_PROPERTY_FROM_TIME = "fromTime";
    private String fromTime;

    public static final String JSON_PROPERTY_TO_TIME = "toTime";
    private String toTime;

    public static final String JSON_PROPERTY_REAL_DELIVERY_DATE = "realDeliveryDate";
    private String realDeliveryDate;

    public OrderDeliveryDatesDTO() {
    }

    public OrderDeliveryDatesDTO fromDate(String fromDate) {
        this.fromDate = fromDate;
        return this;
    }

    /**
     * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
     * @return fromDate
     */
    @Nullable
    @Schema(name = "fromDate", example = "23-09-2022", description = "Формат даты: `ДД-ММ-ГГГГ`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FROM_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFromDate() {
        return fromDate;
    }

    @JsonProperty(JSON_PROPERTY_FROM_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFromDate(String fromDate) {
        this.fromDate = fromDate;
    }

    public OrderDeliveryDatesDTO toDate(String toDate) {
        this.toDate = toDate;
        return this;
    }

    /**
     * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
     * @return toDate
     */
    @Nullable
    @Schema(name = "toDate", example = "23-09-2022", description = "Формат даты: `ДД-ММ-ГГГГ`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TO_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getToDate() {
        return toDate;
    }

    @JsonProperty(JSON_PROPERTY_TO_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setToDate(String toDate) {
        this.toDate = toDate;
    }

    public OrderDeliveryDatesDTO fromTime(String fromTime) {
        this.fromTime = fromTime;
        return this;
    }

    /**
     * Начало интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Минимальное значение: &#x60;00:00&#x60;. 
     * @return fromTime
     */
    @Nullable
    @Schema(name = "fromTime", description = "Начало интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Минимальное значение: `00:00`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FROM_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFromTime() {
        return fromTime;
    }

    @JsonProperty(JSON_PROPERTY_FROM_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFromTime(String fromTime) {
        this.fromTime = fromTime;
    }

    public OrderDeliveryDatesDTO toTime(String toTime) {
        this.toTime = toTime;
        return this;
    }

    /**
     * Конец интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Максимальное значение: &#x60;23:59&#x60;. 
     * @return toTime
     */
    @Nullable
    @Schema(name = "toTime", description = "Конец интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Максимальное значение: `23:59`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TO_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getToTime() {
        return toTime;
    }

    @JsonProperty(JSON_PROPERTY_TO_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setToTime(String toTime) {
        this.toTime = toTime;
    }

    public OrderDeliveryDatesDTO realDeliveryDate(String realDeliveryDate) {
        this.realDeliveryDate = realDeliveryDate;
        return this;
    }

    /**
     * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
     * @return realDeliveryDate
     */
    @Nullable
    @Schema(name = "realDeliveryDate", example = "23-09-2022", description = "Формат даты: `ДД-ММ-ГГГГ`. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_REAL_DELIVERY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRealDeliveryDate() {
        return realDeliveryDate;
    }

    @JsonProperty(JSON_PROPERTY_REAL_DELIVERY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRealDeliveryDate(String realDeliveryDate) {
        this.realDeliveryDate = realDeliveryDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderDeliveryDatesDTO orderDeliveryDatesDTO = (OrderDeliveryDatesDTO) o;
        return Objects.equals(this.fromDate, orderDeliveryDatesDTO.fromDate) &&
            Objects.equals(this.toDate, orderDeliveryDatesDTO.toDate) &&
            Objects.equals(this.fromTime, orderDeliveryDatesDTO.fromTime) &&
            Objects.equals(this.toTime, orderDeliveryDatesDTO.toTime) &&
            Objects.equals(this.realDeliveryDate, orderDeliveryDatesDTO.realDeliveryDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromDate, toDate, fromTime, toTime, realDeliveryDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderDeliveryDatesDTO {\n");
        sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
        sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
        sb.append("    fromTime: ").append(toIndentedString(fromTime)).append("\n");
        sb.append("    toTime: ").append(toIndentedString(toTime)).append("\n");
        sb.append("    realDeliveryDate: ").append(toIndentedString(realDeliveryDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

