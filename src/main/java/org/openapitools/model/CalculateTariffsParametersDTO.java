/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.PaymentFrequencyType;
import org.openapitools.model.SellingProgramType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Параметры для расчета стоимости услуг.
 */
@JsonPropertyOrder({
  CalculateTariffsParametersDTO.JSON_PROPERTY_CAMPAIGN_ID,
  CalculateTariffsParametersDTO.JSON_PROPERTY_SELLING_PROGRAM,
  CalculateTariffsParametersDTO.JSON_PROPERTY_FREQUENCY
})
@JsonTypeName("CalculateTariffsParametersDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class CalculateTariffsParametersDTO {
    public static final String JSON_PROPERTY_CAMPAIGN_ID = "campaignId";
    private Long campaignId;

    public static final String JSON_PROPERTY_SELLING_PROGRAM = "sellingProgram";
    private SellingProgramType sellingProgram;

    public static final String JSON_PROPERTY_FREQUENCY = "frequency";
    private PaymentFrequencyType frequency;

    public CalculateTariffsParametersDTO() {
    }

    public CalculateTariffsParametersDTO campaignId(Long campaignId) {
        this.campaignId = campaignId;
        return this;
    }

    /**
     * Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке. 
     * @return campaignId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getCampaignId() {
        return campaignId;
    }

    @JsonProperty(JSON_PROPERTY_CAMPAIGN_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCampaignId(Long campaignId) {
        this.campaignId = campaignId;
    }

    public CalculateTariffsParametersDTO sellingProgram(SellingProgramType sellingProgram) {
        this.sellingProgram = sellingProgram;
        return this;
    }

    /**
     * Get sellingProgram
     * @return sellingProgram
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SELLING_PROGRAM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SellingProgramType getSellingProgram() {
        return sellingProgram;
    }

    @JsonProperty(JSON_PROPERTY_SELLING_PROGRAM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSellingProgram(SellingProgramType sellingProgram) {
        this.sellingProgram = sellingProgram;
    }

    public CalculateTariffsParametersDTO frequency(PaymentFrequencyType frequency) {
        this.frequency = frequency;
        return this;
    }

    /**
     * Get frequency
     * @return frequency
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_FREQUENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PaymentFrequencyType getFrequency() {
        return frequency;
    }

    @JsonProperty(JSON_PROPERTY_FREQUENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFrequency(PaymentFrequencyType frequency) {
        this.frequency = frequency;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalculateTariffsParametersDTO calculateTariffsParametersDTO = (CalculateTariffsParametersDTO) o;
        return Objects.equals(this.campaignId, calculateTariffsParametersDTO.campaignId) &&
            Objects.equals(this.sellingProgram, calculateTariffsParametersDTO.sellingProgram) &&
            Objects.equals(this.frequency, calculateTariffsParametersDTO.frequency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(campaignId, sellingProgram, frequency);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CalculateTariffsParametersDTO {\n");
        sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
        sb.append("    sellingProgram: ").append(toIndentedString(sellingProgram)).append("\n");
        sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

