/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Рекомендованная ставка и возможная доля показов.
 */
@Schema(name = "BidRecommendationItemDTO", description = "Рекомендованная ставка и возможная доля показов.")
@JsonPropertyOrder({
  BidRecommendationItemDTO.JSON_PROPERTY_BID,
  BidRecommendationItemDTO.JSON_PROPERTY_SHOW_PERCENT
})
@JsonTypeName("BidRecommendationItemDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class BidRecommendationItemDTO {
    public static final String JSON_PROPERTY_BID = "bid";
    private Integer bid;

    public static final String JSON_PROPERTY_SHOW_PERCENT = "showPercent";
    private Long showPercent;

    public BidRecommendationItemDTO(Integer bid, Long showPercent) {
        this.bid = bid;
        this.showPercent = showPercent;
    }

    public BidRecommendationItemDTO bid(Integer bid) {
        this.bid = bid;
        return this;
    }

    /**
     * Значение ставки.
     * minimum: 0
     * maximum: 9999
     * @return bid
     */
    @NotNull
    @Min(0)
    @Max(9999)
    @Schema(name = "bid", example = "570", description = "Значение ставки.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_BID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getBid() {
        return bid;
    }

    @JsonProperty(JSON_PROPERTY_BID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBid(Integer bid) {
        this.bid = bid;
    }

    public BidRecommendationItemDTO showPercent(Long showPercent) {
        this.showPercent = showPercent;
        return this;
    }

    /**
     * Доля показов. 
     * minimum: 0
     * maximum: 100
     * @return showPercent
     */
    @NotNull
    @Min(0L)
    @Max(100L)
    @Schema(name = "showPercent", description = "Доля показов. ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_SHOW_PERCENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Long getShowPercent() {
        return showPercent;
    }

    @JsonProperty(JSON_PROPERTY_SHOW_PERCENT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setShowPercent(Long showPercent) {
        this.showPercent = showPercent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BidRecommendationItemDTO bidRecommendationItemDTO = (BidRecommendationItemDTO) o;
        return Objects.equals(this.bid, bidRecommendationItemDTO.bid) &&
            Objects.equals(this.showPercent, bidRecommendationItemDTO.showPercent);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bid, showPercent);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BidRecommendationItemDTO {\n");
        sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
        sb.append("    showPercent: ").append(toIndentedString(showPercent)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

