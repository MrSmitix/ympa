/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.FeedIndexLogsFeedDTO;
import org.openapitools.model.FeedIndexLogsRecordDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Результат выполнения запроса отчета по индексации прайс-листа.
 */
@Schema(name = "FeedIndexLogsResultDTO", description = "Результат выполнения запроса отчета по индексации прайс-листа.")
@JsonPropertyOrder({
  FeedIndexLogsResultDTO.JSON_PROPERTY_FEED,
  FeedIndexLogsResultDTO.JSON_PROPERTY_INDEX_LOG_RECORDS,
  FeedIndexLogsResultDTO.JSON_PROPERTY_TOTAL
})
@JsonTypeName("FeedIndexLogsResultDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class FeedIndexLogsResultDTO {
    public static final String JSON_PROPERTY_FEED = "feed";
    private FeedIndexLogsFeedDTO feed;

    public static final String JSON_PROPERTY_INDEX_LOG_RECORDS = "indexLogRecords";
    private List<@Valid FeedIndexLogsRecordDTO> indexLogRecords = new ArrayList<>();

    public static final String JSON_PROPERTY_TOTAL = "total";
    private Long total;

    public FeedIndexLogsResultDTO(List<@Valid FeedIndexLogsRecordDTO> indexLogRecords) {
        this.indexLogRecords = indexLogRecords;
    }

    public FeedIndexLogsResultDTO feed(FeedIndexLogsFeedDTO feed) {
        this.feed = feed;
        return this;
    }

    /**
     * Get feed
     * @return feed
     */
    @Valid
    @Nullable
    @Schema(name = "feed", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FeedIndexLogsFeedDTO getFeed() {
        return feed;
    }

    @JsonProperty(JSON_PROPERTY_FEED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeed(FeedIndexLogsFeedDTO feed) {
        this.feed = feed;
    }

    public FeedIndexLogsResultDTO indexLogRecords(List<@Valid FeedIndexLogsRecordDTO> indexLogRecords) {
        this.indexLogRecords = indexLogRecords;
        return this;
    }

    public FeedIndexLogsResultDTO addIndexLogRecordsItem(FeedIndexLogsRecordDTO indexLogRecordsItem) {
        this.indexLogRecords.add(indexLogRecordsItem);
        return this;
    }

    /**
     * Список отчетов по индексации прайс-листа.
     * @return indexLogRecords
     */
    @NotNull
    @Schema(name = "indexLogRecords", description = "Список отчетов по индексации прайс-листа.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_INDEX_LOG_RECORDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid FeedIndexLogsRecordDTO> getIndexLogRecords() {
        return indexLogRecords;
    }

    @JsonProperty(JSON_PROPERTY_INDEX_LOG_RECORDS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIndexLogRecords(List<@Valid FeedIndexLogsRecordDTO> indexLogRecords) {
        this.indexLogRecords = indexLogRecords;
    }

    public FeedIndexLogsResultDTO total(Long total) {
        this.total = total;
        return this;
    }

    /**
     * Количество отчетов на всех страницах выходных данных.
     * @return total
     */
    @Nullable
    @Schema(name = "total", description = "Количество отчетов на всех страницах выходных данных.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getTotal() {
        return total;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotal(Long total) {
        this.total = total;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedIndexLogsResultDTO feedIndexLogsResultDTO = (FeedIndexLogsResultDTO) o;
        return Objects.equals(this.feed, feedIndexLogsResultDTO.feed) &&
            Objects.equals(this.indexLogRecords, feedIndexLogsResultDTO.indexLogRecords) &&
            Objects.equals(this.total, feedIndexLogsResultDTO.total);
    }

    @Override
    public int hashCode() {
        return Objects.hash(feed, indexLogRecords, total);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedIndexLogsResultDTO {\n");
        sb.append("    feed: ").append(toIndentedString(feed)).append("\n");
        sb.append("    indexLogRecords: ").append(toIndentedString(indexLogRecords)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

