/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Информация о товарах в акции.
 */
@Schema(name = "GetPromoAssortmentInfoDTO", description = "Информация о товарах в акции.")
@JsonPropertyOrder({
  GetPromoAssortmentInfoDTO.JSON_PROPERTY_ACTIVE_OFFERS,
  GetPromoAssortmentInfoDTO.JSON_PROPERTY_POTENTIAL_OFFERS,
  GetPromoAssortmentInfoDTO.JSON_PROPERTY_PROCESSING
})
@JsonTypeName("GetPromoAssortmentInfoDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GetPromoAssortmentInfoDTO {
    public static final String JSON_PROPERTY_ACTIVE_OFFERS = "activeOffers";
    private Integer activeOffers;

    public static final String JSON_PROPERTY_POTENTIAL_OFFERS = "potentialOffers";
    private Integer potentialOffers;

    public static final String JSON_PROPERTY_PROCESSING = "processing";
    private Boolean processing;

    public GetPromoAssortmentInfoDTO(Integer activeOffers) {
        this.activeOffers = activeOffers;
    }

    public GetPromoAssortmentInfoDTO activeOffers(Integer activeOffers) {
        this.activeOffers = activeOffers;
        return this;
    }

    /**
     * Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
     * @return activeOffers
     */
    @NotNull
    @Schema(name = "activeOffers", description = "Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). ", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_ACTIVE_OFFERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getActiveOffers() {
        return activeOffers;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVE_OFFERS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setActiveOffers(Integer activeOffers) {
        this.activeOffers = activeOffers;
    }

    public GetPromoAssortmentInfoDTO potentialOffers(Integer potentialOffers) {
        this.potentialOffers = potentialOffers;
        return this;
    }

    /**
     * Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 
     * @return potentialOffers
     */
    @Nullable
    @Schema(name = "potentialOffers", description = "Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_POTENTIAL_OFFERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getPotentialOffers() {
        return potentialOffers;
    }

    @JsonProperty(JSON_PROPERTY_POTENTIAL_OFFERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPotentialOffers(Integer potentialOffers) {
        this.potentialOffers = potentialOffers;
    }

    public GetPromoAssortmentInfoDTO processing(Boolean processing) {
        this.processing = processing;
        return this;
    }

    /**
     * Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 
     * @return processing
     */
    @Nullable
    @Schema(name = "processing", description = "Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. ", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PROCESSING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getProcessing() {
        return processing;
    }

    @JsonProperty(JSON_PROPERTY_PROCESSING)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProcessing(Boolean processing) {
        this.processing = processing;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPromoAssortmentInfoDTO getPromoAssortmentInfoDTO = (GetPromoAssortmentInfoDTO) o;
        return Objects.equals(this.activeOffers, getPromoAssortmentInfoDTO.activeOffers) &&
            Objects.equals(this.potentialOffers, getPromoAssortmentInfoDTO.potentialOffers) &&
            Objects.equals(this.processing, getPromoAssortmentInfoDTO.processing);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activeOffers, potentialOffers, processing);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPromoAssortmentInfoDTO {\n");
        sb.append("    activeOffers: ").append(toIndentedString(activeOffers)).append("\n");
        sb.append("    potentialOffers: ").append(toIndentedString(potentialOffers)).append("\n");
        sb.append("    processing: ").append(toIndentedString(processing)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

