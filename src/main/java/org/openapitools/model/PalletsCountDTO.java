/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Количество палет в отгрузке.
 */
@Schema(name = "PalletsCountDTO", description = "Количество палет в отгрузке.")
@JsonPropertyOrder({
  PalletsCountDTO.JSON_PROPERTY_PLANNED,
  PalletsCountDTO.JSON_PROPERTY_FACT
})
@JsonTypeName("PalletsCountDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class PalletsCountDTO {
    public static final String JSON_PROPERTY_PLANNED = "planned";
    private Integer planned;

    public static final String JSON_PROPERTY_FACT = "fact";
    private Integer fact;

    public PalletsCountDTO() {
    }

    public PalletsCountDTO planned(Integer planned) {
        this.planned = planned;
        return this;
    }

    /**
     * Количество палет, которое заявил продавец.
     * @return planned
     */
    @Nullable
    @Schema(name = "planned", description = "Количество палет, которое заявил продавец.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PLANNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getPlanned() {
        return planned;
    }

    @JsonProperty(JSON_PROPERTY_PLANNED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPlanned(Integer planned) {
        this.planned = planned;
    }

    public PalletsCountDTO fact(Integer fact) {
        this.fact = fact;
        return this;
    }

    /**
     * Количество палет, которое приняли в сортировочном центре.
     * @return fact
     */
    @Nullable
    @Schema(name = "fact", description = "Количество палет, которое приняли в сортировочном центре.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_FACT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getFact() {
        return fact;
    }

    @JsonProperty(JSON_PROPERTY_FACT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFact(Integer fact) {
        this.fact = fact;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PalletsCountDTO palletsCountDTO = (PalletsCountDTO) o;
        return Objects.equals(this.planned, palletsCountDTO.planned) &&
            Objects.equals(this.fact, palletsCountDTO.fact);
    }

    @Override
    public int hashCode() {
        return Objects.hash(planned, fact);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PalletsCountDTO {\n");
        sb.append("    planned: ").append(toIndentedString(planned)).append("\n");
        sb.append("    fact: ").append(toIndentedString(fact)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

