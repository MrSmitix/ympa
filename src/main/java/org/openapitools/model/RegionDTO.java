/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.model.RegionType;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Регион доставки.
 */
@Schema(name = "RegionDTO", description = "Регион доставки.")
@JsonPropertyOrder({
  RegionDTO.JSON_PROPERTY_ID,
  RegionDTO.JSON_PROPERTY_NAME,
  RegionDTO.JSON_PROPERTY_TYPE,
  RegionDTO.JSON_PROPERTY_PARENT,
  RegionDTO.JSON_PROPERTY_CHILDREN
})
@JsonTypeName("RegionDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class RegionDTO {
    public static final String JSON_PROPERTY_ID = "id";
    private Long id;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TYPE = "type";
    private RegionType type;

    public static final String JSON_PROPERTY_PARENT = "parent";
    private RegionDTO parent;

    public static final String JSON_PROPERTY_CHILDREN = "children";
    private List<@Valid RegionDTO> children = null;

    public RegionDTO(String name, RegionType type) {
        this.name = name;
        this.type = type;
    }

    public RegionDTO id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Идентификатор региона.
     * @return id
     */
    @Nullable
    @Schema(name = "id", description = "Идентификатор региона.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Long getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(Long id) {
        this.id = id;
    }

    public RegionDTO name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Название региона.
     * @return name
     */
    @NotNull
    @Schema(name = "name", description = "Название региона.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public RegionDTO type(RegionType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @NotNull
    @Schema(name = "type", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public RegionType getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(RegionType type) {
        this.type = type;
    }

    public RegionDTO parent(RegionDTO parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Get parent
     * @return parent
     */
    @Valid
    @Nullable
    @Schema(name = "parent", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PARENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public RegionDTO getParent() {
        return parent;
    }

    @JsonProperty(JSON_PROPERTY_PARENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setParent(RegionDTO parent) {
        this.parent = parent;
    }

    public RegionDTO children(List<@Valid RegionDTO> children) {
        this.children = children;
        return this;
    }

    public RegionDTO addChildrenItem(RegionDTO childrenItem) {
        if (this.children == null) {
            this.children = new ArrayList<>();
        }
        this.children.add(childrenItem);
        return this;
    }

    /**
     * Дочерние регионы.
     * @return children
     */
    @Nullable
    @Schema(name = "children", description = "Дочерние регионы.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_CHILDREN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid RegionDTO> getChildren() {
        return children;
    }

    @JsonProperty(JSON_PROPERTY_CHILDREN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setChildren(List<@Valid RegionDTO> children) {
        this.children = children;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegionDTO regionDTO = (RegionDTO) o;
        return Objects.equals(this.id, regionDTO.id) &&
            Objects.equals(this.name, regionDTO.name) &&
            Objects.equals(this.type, regionDTO.type) &&
            Objects.equals(this.parent, regionDTO.parent) &&
            Objects.equals(this.children, regionDTO.children);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, type, parent, children);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RegionDTO {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
        sb.append("    children: ").append(toIndentedString(children)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

