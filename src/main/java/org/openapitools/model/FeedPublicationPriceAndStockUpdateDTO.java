/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре &#x60;full&#x60;. Выводится, если параметр &#x60;publication status&#x3D;OK&#x60;. 
 */
@JsonPropertyOrder({
  FeedPublicationPriceAndStockUpdateDTO.JSON_PROPERTY_FILE_TIME,
  FeedPublicationPriceAndStockUpdateDTO.JSON_PROPERTY_PUBLISHED_TIME
})
@JsonTypeName("FeedPublicationPriceAndStockUpdateDTO")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-09-09T21:59:28.310012434Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class FeedPublicationPriceAndStockUpdateDTO {
    public static final String JSON_PROPERTY_FILE_TIME = "fileTime";
    private OffsetDateTime fileTime;

    public static final String JSON_PROPERTY_PUBLISHED_TIME = "publishedTime";
    private OffsetDateTime publishedTime;

    public FeedPublicationPriceAndStockUpdateDTO() {
    }

    public FeedPublicationPriceAndStockUpdateDTO fileTime(OffsetDateTime fileTime) {
        this.fileTime = fileTime;
        return this;
    }

    /**
     * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
     * @return fileTime
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_FILE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getFileTime() {
        return fileTime;
    }

    @JsonProperty(JSON_PROPERTY_FILE_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setFileTime(OffsetDateTime fileTime) {
        this.fileTime = fileTime;
    }

    public FeedPublicationPriceAndStockUpdateDTO publishedTime(OffsetDateTime publishedTime) {
        this.publishedTime = publishedTime;
        return this;
    }

    /**
     * Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
     * @return publishedTime
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PUBLISHED_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public OffsetDateTime getPublishedTime() {
        return publishedTime;
    }

    @JsonProperty(JSON_PROPERTY_PUBLISHED_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
    public void setPublishedTime(OffsetDateTime publishedTime) {
        this.publishedTime = publishedTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeedPublicationPriceAndStockUpdateDTO feedPublicationPriceAndStockUpdateDTO = (FeedPublicationPriceAndStockUpdateDTO) o;
        return Objects.equals(this.fileTime, feedPublicationPriceAndStockUpdateDTO.fileTime) &&
            Objects.equals(this.publishedTime, feedPublicationPriceAndStockUpdateDTO.publishedTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fileTime, publishedTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FeedPublicationPriceAndStockUpdateDTO {\n");
        sb.append("    fileTime: ").append(toIndentedString(fileTime)).append("\n");
        sb.append("    publishedTime: ").append(toIndentedString(publishedTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

