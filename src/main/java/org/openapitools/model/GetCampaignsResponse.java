/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.CampaignDTO;
import org.openapitools.model.FlippingPagerDTO;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Результаты поиска магазинов.
 */
@Schema(name = "GetCampaignsResponse", description = "Результаты поиска магазинов.")
@JsonPropertyOrder({
  GetCampaignsResponse.JSON_PROPERTY_CAMPAIGNS,
  GetCampaignsResponse.JSON_PROPERTY_PAGER
})
@JsonTypeName("GetCampaignsResponse")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Introspected
public class GetCampaignsResponse {
    public static final String JSON_PROPERTY_CAMPAIGNS = "campaigns";
    private List<@Valid CampaignDTO> campaigns = new ArrayList<>();

    public static final String JSON_PROPERTY_PAGER = "pager";
    private FlippingPagerDTO pager;

    public GetCampaignsResponse(List<@Valid CampaignDTO> campaigns) {
        this.campaigns = campaigns;
    }

    public GetCampaignsResponse campaigns(List<@Valid CampaignDTO> campaigns) {
        this.campaigns = campaigns;
        return this;
    }

    public GetCampaignsResponse addCampaignsItem(CampaignDTO campaignsItem) {
        this.campaigns.add(campaignsItem);
        return this;
    }

    /**
     * Список с информацией по каждому магазину.
     * @return campaigns
     */
    @NotNull
    @Schema(name = "campaigns", description = "Список с информацией по каждому магазину.", requiredMode = Schema.RequiredMode.REQUIRED)
    @JsonProperty(JSON_PROPERTY_CAMPAIGNS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<@Valid CampaignDTO> getCampaigns() {
        return campaigns;
    }

    @JsonProperty(JSON_PROPERTY_CAMPAIGNS)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setCampaigns(List<@Valid CampaignDTO> campaigns) {
        this.campaigns = campaigns;
    }

    public GetCampaignsResponse pager(FlippingPagerDTO pager) {
        this.pager = pager;
        return this;
    }

    /**
     * Get pager
     * @return pager
     */
    @Valid
    @Nullable
    @Schema(name = "pager", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
    @JsonProperty(JSON_PROPERTY_PAGER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FlippingPagerDTO getPager() {
        return pager;
    }

    @JsonProperty(JSON_PROPERTY_PAGER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPager(FlippingPagerDTO pager) {
        this.pager = pager;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCampaignsResponse getCampaignsResponse = (GetCampaignsResponse) o;
        return Objects.equals(this.campaigns, getCampaignsResponse.campaigns) &&
            Objects.equals(this.pager, getCampaignsResponse.pager);
    }

    @Override
    public int hashCode() {
        return Objects.hash(campaigns, pager);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetCampaignsResponse {\n");
        sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
        sb.append("    pager: ").append(toIndentedString(pager)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

