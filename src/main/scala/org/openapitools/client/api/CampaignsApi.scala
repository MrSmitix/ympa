/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ApiClientDataErrorResponse
import org.openapitools.client.model.ApiForbiddenErrorResponse
import org.openapitools.client.model.ApiLimitErrorResponse
import org.openapitools.client.model.ApiNotFoundErrorResponse
import org.openapitools.client.model.ApiServerErrorResponse
import org.openapitools.client.model.ApiUnauthorizedErrorResponse
import org.openapitools.client.model.GetCampaignLoginsResponse
import org.openapitools.client.model.GetCampaignRegionResponse
import org.openapitools.client.model.GetCampaignResponse
import org.openapitools.client.model.GetCampaignSettingsResponse
import org.openapitools.client.model.GetCampaignsResponse
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object CampaignsApi {
  def apply(baseUrl: String = "https://api.partner.market.yandex.ru") = new CampaignsApi(baseUrl)
}

class CampaignsApi(baseUrl: String) {

  /**
   * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignResponse (Информация о магазине.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   */
  def getCampaign(campaignId: Long
): Request[Either[ResponseException[String, Exception], GetCampaignResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns/${campaignId}")
      .contentType("application/json")
      .response(asJson[GetCampaignResponse])

  /**
   * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignLoginsResponse (Список логинов, связанных с магазином.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   */
  def getCampaignLogins(campaignId: Long
): Request[Either[ResponseException[String, Exception], GetCampaignLoginsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns/${campaignId}/logins")
      .contentType("application/json")
      .response(asJson[GetCampaignLoginsResponse])

  /**
   * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignRegionResponse (Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| )
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   */
  def getCampaignRegion(campaignId: Long
): Request[Either[ResponseException[String, Exception], GetCampaignRegionResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns/${campaignId}/region")
      .contentType("application/json")
      .response(asJson[GetCampaignRegionResponse])

  /**
   * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignSettingsResponse (Настройки магазина.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   */
  def getCampaignSettings(campaignId: Long
): Request[Either[ResponseException[String, Exception], GetCampaignSettingsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns/${campaignId}/settings")
      .contentType("application/json")
      .response(asJson[GetCampaignSettingsResponse])

  /**
   * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignsResponse (Магазины пользователя.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
   * @param pageSize Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
   */
  def getCampaigns(page: Option[Int] = None, pageSize: Option[Int] = None
): Request[Either[ResponseException[String, Exception], GetCampaignsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns?page=${ page }&pageSize=${ pageSize }")
      .contentType("application/json")
      .response(asJson[GetCampaignsResponse])

  /**
   * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GetCampaignsResponse (Информация о магазинах.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param login Логин пользователя.
   * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
   * @param pageSize Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
   */
  def getCampaignsByLogin(login: String, page: Option[Int] = None, pageSize: Option[Int] = None
): Request[Either[ResponseException[String, Exception], GetCampaignsResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/campaigns/by_login/${login}?page=${ page }&pageSize=${ pageSize }")
      .contentType("application/json")
      .response(asJson[GetCampaignsResponse])

}
