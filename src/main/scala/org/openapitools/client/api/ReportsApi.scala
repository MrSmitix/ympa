/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ApiClientDataErrorResponse
import org.openapitools.client.model.ApiForbiddenErrorResponse
import org.openapitools.client.model.ApiLimitErrorResponse
import org.openapitools.client.model.ApiNotFoundErrorResponse
import org.openapitools.client.model.ApiServerErrorResponse
import org.openapitools.client.model.ApiUnauthorizedErrorResponse
import org.openapitools.client.model.GenerateBoostConsolidatedRequest
import org.openapitools.client.model.GenerateCompetitorsPositionReportRequest
import org.openapitools.client.model.GenerateGoodsFeedbackRequest
import org.openapitools.client.model.GenerateGoodsMovementReportRequest
import org.openapitools.client.model.GenerateGoodsRealizationReportRequest
import org.openapitools.client.model.GenerateGoodsTurnoverRequest
import org.openapitools.client.model.GenerateMassOrderLabelsRequest
import org.openapitools.client.model.GeneratePricesReportRequest
import org.openapitools.client.model.GenerateReportResponse
import org.openapitools.client.model.GenerateShelfsStatisticsRequest
import org.openapitools.client.model.GenerateShipmentListDocumentReportRequest
import org.openapitools.client.model.GenerateShowsSalesReportRequest
import org.openapitools.client.model.GenerateStocksOnWarehousesReportRequest
import org.openapitools.client.model.GenerateUnitedMarketplaceServicesReportRequest
import org.openapitools.client.model.GenerateUnitedNettingReportRequest
import org.openapitools.client.model.GenerateUnitedOrdersRequest
import org.openapitools.client.model.GetReportInfoResponse
import org.openapitools.client.model.PageFormatType._
import org.openapitools.client.model.ReportFormatType._
import org.openapitools.client.core.JsonSupport._
import sttp.client4._
import sttp.model.Method

object ReportsApi {
  def apply(baseUrl: String = "https://api.partner.market.yandex.ru") = new ReportsApi(baseUrl)
}

class ReportsApi(baseUrl: String) {

  /**
   * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateBoostConsolidatedRequest 
   * @param format Формат отчета.
   */
  def generateBoostConsolidatedReport(generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/boost-consolidated/generate?format=${ format }")
      .contentType("application/json")
      .body(generateBoostConsolidatedRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateCompetitorsPositionReportRequest 
   * @param format Формат отчета.
   */
  def generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/competitors-position/generate?format=${ format }")
      .contentType("application/json")
      .body(generateCompetitorsPositionReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateGoodsFeedbackRequest 
   * @param format Формат отчета.
   */
  def generateGoodsFeedbackReport(generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/goods-feedback/generate?format=${ format }")
      .contentType("application/json")
      .body(generateGoodsFeedbackRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateGoodsMovementReportRequest 
   * @param format Формат отчета.
   */
  def generateGoodsMovementReport(generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/goods-movement/generate?format=${ format }")
      .contentType("application/json")
      .body(generateGoodsMovementReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateGoodsRealizationReportRequest 
   * @param format Формат отчета.
   */
  def generateGoodsRealizationReport(generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/goods-realization/generate?format=${ format }")
      .contentType("application/json")
      .body(generateGoodsRealizationReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateGoodsTurnoverRequest 
   * @param format Формат отчета.
   */
  def generateGoodsTurnoverReport(generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/goods-turnover/generate?format=${ format }")
      .contentType("application/json")
      .body(generateGoodsTurnoverRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. )
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateMassOrderLabelsRequest 
   * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
   */
  def generateMassOrderLabelsReport(generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest, format: Option[PageFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/documents/labels/generate?format=${ format }")
      .contentType("application/json")
      .body(generateMassOrderLabelsRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generatePricesReportRequest 
   * @param format Формат отчета.
   */
  def generatePricesReport(generatePricesReportRequest: GeneratePricesReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/prices/generate?format=${ format }")
      .contentType("application/json")
      .body(generatePricesReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateShelfsStatisticsRequest 
   * @param format Формат отчета.
   */
  def generateShelfsStatisticsReport(generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/shelf-statistics/generate?format=${ format }")
      .contentType("application/json")
      .body(generateShelfsStatisticsRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateShipmentListDocumentReportRequest 
   */
  def generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/documents/shipment-list/generate")
      .contentType("application/json")
      .body(generateShipmentListDocumentReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateShowsSalesReportRequest 
   * @param format Формат отчета.
   */
  def generateShowsSalesReport(generateShowsSalesReportRequest: GenerateShowsSalesReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/shows-sales/generate?format=${ format }")
      .contentType("application/json")
      .body(generateShowsSalesReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateStocksOnWarehousesReportRequest 
   * @param format Формат отчета.
   */
  def generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/stocks-on-warehouses/generate?format=${ format }")
      .contentType("application/json")
      .body(generateStocksOnWarehousesReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateUnitedMarketplaceServicesReportRequest 
   * @param format Формат отчета.
   */
  def generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/united-marketplace-services/generate?format=${ format }")
      .contentType("application/json")
      .body(generateUnitedMarketplaceServicesReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateUnitedNettingReportRequest 
   * @param format Формат отчета.
   */
  def generateUnitedNettingReport(generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/united-netting/generate?format=${ format }")
      .contentType("application/json")
      .body(generateUnitedNettingReportRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * 
   * Expected answers:
   *   code 200 : GenerateReportResponse (В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.)
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param generateUnitedOrdersRequest 
   * @param format Формат отчета.
   */
  def generateUnitedOrdersReport(generateUnitedOrdersRequest: GenerateUnitedOrdersRequest, format: Option[ReportFormatType] = None): Request[Either[ResponseException[String, Exception], GenerateReportResponse]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/reports/united-orders/generate?format=${ format }")
      .contentType("application/json")
      .body(generateUnitedOrdersRequest)
      .response(asJson[GenerateReportResponse])

  /**
   * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
   * 
   * Expected answers:
   *   code 200 : GetReportInfoResponse (Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    )
   *   code 400 : ApiClientDataErrorResponse (Запрос содержит неправильные данные.)
   *   code 401 : ApiUnauthorizedErrorResponse (В запросе не указаны данные для авторизации.)
   *   code 403 : ApiForbiddenErrorResponse (Данные для авторизации неверны или доступ к ресурсу запрещен.)
   *   code 404 : ApiNotFoundErrorResponse (Запрашиваемый ресурс не найден.)
   *   code 420 : ApiLimitErrorResponse (Превышено ограничение на доступ к ресурсу.)
   *   code 500 : ApiServerErrorResponse (Внутренняя ошибка сервера.)
   * 
   * @param reportId Идентификатор отчета, который вы получили после запуска генерации. 
   */
  def getReportInfo(reportId: String): Request[Either[ResponseException[String, Exception], GetReportInfoResponse]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/reports/info/${reportId}")
      .contentType("application/json")
      .response(asJson[GetReportInfoResponse])

}
