/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.model


  /**
   * Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  * Значения для заказа в статусе `PROCESSING`:      * `STARTED` — заказ подтвержден, его можно начать обрабатывать.      * `READY_TO_SHIP` — заказ собран и готов к отправке.  * Значения для заказа в статусе `CANCELLED`:      * `PROCESSING_EXPIRED` — значение более не используется.      * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.      * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.      * `SHOP_FAILED` — магазин не может выполнить заказ.      * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.      * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.      * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.      * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.      * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.      * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:        * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;       * перерыв между первым и третьим звонком не менее 90 минут;       * соединение не короче 5 секунд.        Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.  * `TECHNICAL_ERROR` — техническая ошибка на стороне Маркета. Обратитесь в поддержку.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
   */

object OrderSubstatusType extends Enumeration {
    type OrderSubstatusType = OrderSubstatusType.Value
    val RESERVATIONEXPIRED = Value("RESERVATION_EXPIRED")
    val USERNOTPAID = Value("USER_NOT_PAID")
    val USERUNREACHABLE = Value("USER_UNREACHABLE")
    val USERCHANGEDMIND = Value("USER_CHANGED_MIND")
    val USERREFUSEDDELIVERY = Value("USER_REFUSED_DELIVERY")
    val USERREFUSEDPRODUCT = Value("USER_REFUSED_PRODUCT")
    val SHOPFAILED = Value("SHOP_FAILED")
    val USERREFUSEDQUALITY = Value("USER_REFUSED_QUALITY")
    val REPLACINGORDER = Value("REPLACING_ORDER")
    val PROCESSINGEXPIRED = Value("PROCESSING_EXPIRED")
    val PENDINGEXPIRED = Value("PENDING_EXPIRED")
    val SHOPPENDINGCANCELLED = Value("SHOP_PENDING_CANCELLED")
    val PENDINGCANCELLED = Value("PENDING_CANCELLED")
    val USERFRAUD = Value("USER_FRAUD")
    val RESERVATIONFAILED = Value("RESERVATION_FAILED")
    val USERPLACEDOTHERORDER = Value("USER_PLACED_OTHER_ORDER")
    val USERBOUGHTCHEAPER = Value("USER_BOUGHT_CHEAPER")
    val MISSINGITEM = Value("MISSING_ITEM")
    val BROKENITEM = Value("BROKEN_ITEM")
    val WRONGITEM = Value("WRONG_ITEM")
    val PICKUPEXPIRED = Value("PICKUP_EXPIRED")
    val DELIVERYPROBLEMS = Value("DELIVERY_PROBLEMS")
    val LATECONTACT = Value("LATE_CONTACT")
    val CUSTOM = Value("CUSTOM")
    val DELIVERYSERVICEFAILED = Value("DELIVERY_SERVICE_FAILED")
    val WAREHOUSEFAILEDTOSHIP = Value("WAREHOUSE_FAILED_TO_SHIP")
    val DELIVERYSERIVCEUNDELIVERED = Value("DELIVERY_SERIVCE_UNDELIVERED")
    val DELIVERYSERVICEUNDELIVERED = Value("DELIVERY_SERVICE_UNDELIVERED")
    val PREORDER = Value("PREORDER")
    val AWAITCONFIRMATION = Value("AWAIT_CONFIRMATION")
    val STARTED = Value("STARTED")
    val PACKAGING = Value("PACKAGING")
    val READYTOSHIP = Value("READY_TO_SHIP")
    val SHIPPED = Value("SHIPPED")
    val ASYNCPROCESSING = Value("ASYNC_PROCESSING")
    val USERREFUSEDTOPROVIDEPERSONALDATA = Value("USER_REFUSED_TO_PROVIDE_PERSONAL_DATA")
    val WAITINGUSERINPUT = Value("WAITING_USER_INPUT")
    val WAITINGBANKDECISION = Value("WAITING_BANK_DECISION")
    val BANKREJECTCREDITOFFER = Value("BANK_REJECT_CREDIT_OFFER")
    val CUSTOMERREJECTCREDITOFFER = Value("CUSTOMER_REJECT_CREDIT_OFFER")
    val CREDITOFFERFAILED = Value("CREDIT_OFFER_FAILED")
    val AWAITDELIVERYDATESCONFIRMATION = Value("AWAIT_DELIVERY_DATES_CONFIRMATION")
    val SERVICEFAULT = Value("SERVICE_FAULT")
    val DELIVERYSERVICERECEIVED = Value("DELIVERY_SERVICE_RECEIVED")
    val USERRECEIVED = Value("USER_RECEIVED")
    val WAITINGFORSTOCKS = Value("WAITING_FOR_STOCKS")
    val ASPARTOFMULTIORDER = Value("AS_PART_OF_MULTI_ORDER")
    val READYFORLASTMILE = Value("READY_FOR_LAST_MILE")
    val LASTMILESTARTED = Value("LAST_MILE_STARTED")
    val ANTIFRAUD = Value("ANTIFRAUD")
    val DELIVERYUSERNOTRECEIVED = Value("DELIVERY_USER_NOT_RECEIVED")
    val DELIVERYSERVICEDELIVERED = Value("DELIVERY_SERVICE_DELIVERED")
    val DELIVEREDUSERNOTRECEIVED = Value("DELIVERED_USER_NOT_RECEIVED")
    val USERWANTEDANOTHERPAYMENTMETHOD = Value("USER_WANTED_ANOTHER_PAYMENT_METHOD")
    val USERRECEIVEDTECHNICALERROR = Value("USER_RECEIVED_TECHNICAL_ERROR")
    val USERFORGOTTOUSEBONUS = Value("USER_FORGOT_TO_USE_BONUS")
    val RECEIVEDONDISTRIBUTIONCENTER = Value("RECEIVED_ON_DISTRIBUTION_CENTER")
    val DELIVERYSERVICENOTRECEIVED = Value("DELIVERY_SERVICE_NOT_RECEIVED")
    val DELIVERYSERVICELOST = Value("DELIVERY_SERVICE_LOST")
    val SHIPPEDTOWRONGDELIVERYSERVICE = Value("SHIPPED_TO_WRONG_DELIVERY_SERVICE")
    val DELIVEREDUSERRECEIVED = Value("DELIVERED_USER_RECEIVED")
    val WAITINGTINKOFFDECISION = Value("WAITING_TINKOFF_DECISION")
    val COURIERSEARCH = Value("COURIER_SEARCH")
    val COURIERFOUND = Value("COURIER_FOUND")
    val COURIERINTRANSITTOSENDER = Value("COURIER_IN_TRANSIT_TO_SENDER")
    val COURIERARRIVEDTOSENDER = Value("COURIER_ARRIVED_TO_SENDER")
    val COURIERRECEIVED = Value("COURIER_RECEIVED")
    val COURIERNOTFOUND = Value("COURIER_NOT_FOUND")
    val COURIERNOTDELIVERORDER = Value("COURIER_NOT_DELIVER_ORDER")
    val COURIERRETURNSORDER = Value("COURIER_RETURNS_ORDER")
    val COURIERRETURNEDORDER = Value("COURIER_RETURNED_ORDER")
    val WAITINGUSERDELIVERYINPUT = Value("WAITING_USER_DELIVERY_INPUT")
    val PICKUPSERVICERECEIVED = Value("PICKUP_SERVICE_RECEIVED")
    val PICKUPUSERRECEIVED = Value("PICKUP_USER_RECEIVED")
    val CANCELLEDCOURIERNOTFOUND = Value("CANCELLED_COURIER_NOT_FOUND")
    val COURIERNOTCOMEFORORDER = Value("COURIER_NOT_COME_FOR_ORDER")
    val DELIVERYNOTMANAGEDREGION = Value("DELIVERY_NOT_MANAGED_REGION")
    val INCOMPLETECONTACTINFORMATION = Value("INCOMPLETE_CONTACT_INFORMATION")
    val INCOMPLETEMULTIORDER = Value("INCOMPLETE_MULTI_ORDER")
    val INAPPROPRIATEWEIGHTSIZE = Value("INAPPROPRIATE_WEIGHT_SIZE")
    val TECHNICALERROR = Value("TECHNICAL_ERROR")
    val SORTINGCENTERLOST = Value("SORTING_CENTER_LOST")
    val COURIERSEARCHNOTSTARTED = Value("COURIER_SEARCH_NOT_STARTED")
    val LOST = Value("LOST")
    val AWAITPAYMENT = Value("AWAIT_PAYMENT")
    val AWAITLAVKARESERVATION = Value("AWAIT_LAVKA_RESERVATION")
    val USERWANTSTOCHANGEADDRESS = Value("USER_WANTS_TO_CHANGE_ADDRESS")
    val FULLNOTRANSOM = Value("FULL_NOT_RANSOM")
    val PRESCRIPTIONMISMATCH = Value("PRESCRIPTION_MISMATCH")
    val DROPOFFLOST = Value("DROPOFF_LOST")
    val DROPOFFCLOSED = Value("DROPOFF_CLOSED")
    val DELIVERYTOSTORESTARTED = Value("DELIVERY_TO_STORE_STARTED")
    val USERWANTSTOCHANGEDELIVERYDATE = Value("USER_WANTS_TO_CHANGE_DELIVERY_DATE")
    val WRONGITEMDELIVERED = Value("WRONG_ITEM_DELIVERED")
    val DAMAGEDBOX = Value("DAMAGED_BOX")
    val AWAITDELIVERYDATES = Value("AWAIT_DELIVERY_DATES")
    val LASTMILECOURIERSEARCH = Value("LAST_MILE_COURIER_SEARCH")
    val PICKUPPOINTCLOSED = Value("PICKUP_POINT_CLOSED")
    val LEGALINFOCHANGED = Value("LEGAL_INFO_CHANGED")
    val USERHASNOTIMETOPICKUPORDER = Value("USER_HAS_NO_TIME_TO_PICKUP_ORDER")
    val DELIVERYCUSTOMSARRIVED = Value("DELIVERY_CUSTOMS_ARRIVED")
    val DELIVERYCUSTOMSCLEARED = Value("DELIVERY_CUSTOMS_CLEARED")
    val FIRSTMILEDELIVERYSERVICERECEIVED = Value("FIRST_MILE_DELIVERY_SERVICE_RECEIVED")
    val AWAITAUTODELIVERYDATES = Value("AWAIT_AUTO_DELIVERY_DATES")
    val AWAITUSERPERSONALDATA = Value("AWAIT_USER_PERSONAL_DATA")
    val NOPERSONALDATAEXPIRED = Value("NO_PERSONAL_DATA_EXPIRED")
    val CUSTOMSPROBLEMS = Value("CUSTOMS_PROBLEMS")
    val AWAITCASHIER = Value("AWAIT_CASHIER")
    val WAITINGPOSTPAIDBUDGETRESERVATION = Value("WAITING_POSTPAID_BUDGET_RESERVATION")
    val AWAITSERVICEABLECONFIRMATION = Value("AWAIT_SERVICEABLE_CONFIRMATION")
    val POSTPAIDBUDGETRESERVATIONFAILED = Value("POSTPAID_BUDGET_RESERVATION_FAILED")
    val AWAITCUSTOMPRICECONFIRMATION = Value("AWAIT_CUSTOM_PRICE_CONFIRMATION")
    val READYFORPICKUP = Value("READY_FOR_PICKUP")
    val UNKNOWN = Value("UNKNOWN")
}
