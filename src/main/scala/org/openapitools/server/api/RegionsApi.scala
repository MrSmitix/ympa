/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.GetRegionWithChildrenResponse
import org.openapitools.server.model.GetRegionsResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class RegionsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "RegionsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val searchRegionChildrenOperation = (apiOperation[GetRegionWithChildrenResponse]("searchRegionChildren")
    summary "Информация о дочерних регионах"
    parameters(pathParam[Long]("regionId").description(""), queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/regions/:regionId/children", operation(searchRegionChildrenOperation)) {
    val regionId = params.getOrElse("regionId", halt(400))
    //println("regionId: " + regionId)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val searchRegionsByIdOperation = (apiOperation[GetRegionsResponse]("searchRegionsById")
    summary "Информация о регионе"
    parameters(pathParam[Long]("regionId").description(""))
  )

  get("/regions/:regionId", operation(searchRegionsByIdOperation)) {
    val regionId = params.getOrElse("regionId", halt(400))
    //println("regionId: " + regionId)
  }

  

  val searchRegionsByNameOperation = (apiOperation[GetRegionsResponse]("searchRegionsByName")
    summary "Поиск регионов по их имени"
    parameters(queryParam[String]("name").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/regions", operation(searchRegionsByNameOperation)) {
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

}
