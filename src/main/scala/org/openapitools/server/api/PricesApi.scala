/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetPricesByOfferIdsRequest
import org.openapitools.server.model.GetPricesByOfferIdsResponse
import org.openapitools.server.model.GetPricesResponse
import org.openapitools.server.model.SuggestPricesRequest
import org.openapitools.server.model.SuggestPricesResponse
import org.openapitools.server.model.UpdateBusinessPricesRequest
import org.openapitools.server.model.UpdatePricesRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PricesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PricesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getPricesOperation = (apiOperation[GetPricesResponse]("getPrices")
    summary "Список цен"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[Boolean]("archived").description("").optional.defaultValue(false))
  )

  get("/campaigns/:campaignId/offer-prices", operation(getPricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val archived = params.getAs[Boolean]("archived")

    //println("archived: " + archived)
  }

  

  val getPricesByOfferIdsOperation = (apiOperation[GetPricesByOfferIdsResponse]("getPricesByOfferIds")
    summary "Просмотр цен на указанные товары в магазине"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetPricesByOfferIdsRequest]("getPricesByOfferIdsRequest").description("").optional)
  )

  post("/campaigns/:campaignId/offer-prices", operation(getPricesByOfferIdsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getPricesByOfferIdsRequest: " + getPricesByOfferIdsRequest)
  }

  

  val getSuggestedPricesOperation = (apiOperation[SuggestPricesResponse]("getSuggestedPrices")
    summary "Цены для продвижения товаров"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[SuggestPricesRequest]("suggestPricesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-prices/suggestions", operation(getSuggestedPricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("suggestPricesRequest: " + suggestPricesRequest)
  }

  

  val updateBusinessPricesOperation = (apiOperation[EmptyApiResponse]("updateBusinessPrices")
    summary "Установка цен на товары во всех магазинах"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateBusinessPricesRequest]("updateBusinessPricesRequest").description(""))
  )

  post("/businesses/:businessId/offer-prices/updates", operation(updateBusinessPricesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateBusinessPricesRequest: " + updateBusinessPricesRequest)
  }

  

  val updatePricesOperation = (apiOperation[EmptyApiResponse]("updatePrices")
    summary "Установка цен на товары в конкретном магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdatePricesRequest]("updatePricesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-prices/updates", operation(updatePricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updatePricesRequest: " + updatePricesRequest)
  }

}
