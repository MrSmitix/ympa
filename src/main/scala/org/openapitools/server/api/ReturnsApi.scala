/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import java.io.File
import org.openapitools.server.model.GetReturnResponse
import org.openapitools.server.model.GetReturnsResponse
import java.time.LocalDate
import org.openapitools.server.model.RefundStatusType
import org.openapitools.server.model.ReturnType
import org.openapitools.server.model.SetReturnDecisionRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ReturnsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ReturnsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getReturnOperation = (apiOperation[GetReturnResponse]("getReturn")
    summary "Информация о невыкупе или возврате"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId/returns/:returnId", operation(getReturnOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
  }

  

  val getReturnApplicationOperation = (apiOperation[File]("getReturnApplication")
    summary "Получение заявления на возврат"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId/returns/:returnId/application", operation(getReturnApplicationOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
  }

  

  val getReturnPhotoOperation = (apiOperation[File]("getReturnPhoto")
    summary "Получение фотографии возврата"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""), pathParam[Long]("itemId").description(""), pathParam[String]("imageHash").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId/returns/:returnId/decision/:itemId/image/:imageHash", operation(getReturnPhotoOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
    val itemId = params.getOrElse("itemId", halt(400))
    //println("itemId: " + itemId)
    val imageHash = params.getOrElse("imageHash", halt(400))
    //println("imageHash: " + imageHash)
  }

  

  val getReturnsOperation = (apiOperation[GetReturnsResponse]("getReturns")
    summary "Список невыкупов и возвратов"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[List[Long]]("orderIds").description("").optional.defaultValue(List.empty[Long] ), queryParam[List[RefundStatusType]]("statuses").description("").optional.defaultValue(List.empty[RefundStatusType] ), queryParam[ReturnType]("`type`").description("").optional, queryParam[LocalDate]("fromDate").description("").optional, queryParam[LocalDate]("toDate").description("").optional, queryParam[LocalDate]("fromDate2").description("").optional, queryParam[LocalDate]("toDate2").description("").optional)
  )

  get("/campaigns/:campaignId/returns", operation(getReturnsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
        val orderIdsString = params.getAs[String]("orderIds")
    val orderIds = if("csv" == "default" || "csv" == "csv") {
      orderIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orderIds: " + orderIds)
        val statusesString = params.getAs[String]("statuses")
    val statuses = if("csv" == "default" || "csv" == "csv") {
      statusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("statuses: " + statuses)
            val `type` = params.getAs[ReturnType]("`type`")

    //println("`type`: " + `type`)
            val fromDate = params.getAs[LocalDate]("fromDate")

    //println("fromDate: " + fromDate)
            val toDate = params.getAs[LocalDate]("toDate")

    //println("toDate: " + toDate)
            val fromDate2 = params.getAs[LocalDate]("fromDate2")

    //println("fromDate2: " + fromDate2)
            val toDate2 = params.getAs[LocalDate]("toDate2")

    //println("toDate2: " + toDate2)
  }

  

  val setReturnDecisionOperation = (apiOperation[EmptyApiResponse]("setReturnDecision")
    summary "Принятие или изменение решения по возврату"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""), bodyParam[SetReturnDecisionRequest]("setReturnDecisionRequest").description(""))
  )

  post("/campaigns/:campaignId/orders/:orderId/returns/:returnId/decision", operation(setReturnDecisionOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
    //println("setReturnDecisionRequest: " + setReturnDecisionRequest)
  }

  

  val submitReturnDecisionOperation = (apiOperation[EmptyApiResponse]("submitReturnDecision")
    summary "Подтверждение решения по возврату"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""))
  )

  post("/campaigns/:campaignId/orders/:orderId/returns/:returnId/decision/submit", operation(submitReturnDecisionOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
  }

}
