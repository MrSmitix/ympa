/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.CurrencyType
import org.openapitools.server.model.GetModelsOffersResponse
import org.openapitools.server.model.GetModelsRequest
import org.openapitools.server.model.GetModelsResponse
import org.openapitools.server.model.SearchModelsResponse
import org.openapitools.server.model.SortOrderType

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ModelsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ModelsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getModelOperation = (apiOperation[GetModelsResponse]("getModel")
    summary "Информация об одной модели"
    parameters(pathParam[Long]("modelId").description(""), queryParam[Long]("regionId").description(""), queryParam[CurrencyType]("currency").description("").optional)
  )

  get("/models/:modelId", operation(getModelOperation)) {
    val modelId = params.getOrElse("modelId", halt(400))
    //println("modelId: " + modelId)
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
  }

  

  val getModelOffersOperation = (apiOperation[GetModelsOffersResponse]("getModelOffers")
    summary "Список предложений для одной модели"
    parameters(pathParam[Long]("modelId").description(""), queryParam[Long]("regionId").description(""), queryParam[CurrencyType]("currency").description("").optional, queryParam[SortOrderType]("orderByPrice").description("").optional, queryParam[Int]("count").description("").optional.defaultValue(10), queryParam[Int]("page").description("").optional.defaultValue(1))
  )

  get("/models/:modelId/offers", operation(getModelOffersOperation)) {
    val modelId = params.getOrElse("modelId", halt(400))
    //println("modelId: " + modelId)
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
            val orderByPrice = params.getAs[SortOrderType]("orderByPrice")

    //println("orderByPrice: " + orderByPrice)
            val count = params.getAs[Int]("count")

    //println("count: " + count)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
  }

  

  val getModelsOperation = (apiOperation[GetModelsResponse]("getModels")
    summary "Информация о нескольких моделях"
    parameters(queryParam[Long]("regionId").description(""), bodyParam[GetModelsRequest]("getModelsRequest").description(""), queryParam[CurrencyType]("currency").description("").optional)
  )

  post("/models", operation(getModelsOperation)) {
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
    //println("getModelsRequest: " + getModelsRequest)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
  }

  

  val getModelsOffersOperation = (apiOperation[GetModelsOffersResponse]("getModelsOffers")
    summary "Список предложений для нескольких моделей"
    parameters(queryParam[Long]("regionId").description(""), bodyParam[GetModelsRequest]("getModelsRequest").description(""), queryParam[CurrencyType]("currency").description("").optional, queryParam[SortOrderType]("orderByPrice").description("").optional)
  )

  post("/models/offers", operation(getModelsOffersOperation)) {
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
    //println("getModelsRequest: " + getModelsRequest)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
            val orderByPrice = params.getAs[SortOrderType]("orderByPrice")

    //println("orderByPrice: " + orderByPrice)
  }

  

  val searchModelsOperation = (apiOperation[SearchModelsResponse]("searchModels")
    summary "Поиск модели товара"
    parameters(queryParam[String]("query").description(""), queryParam[Long]("regionId").description(""), queryParam[CurrencyType]("currency").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/models", operation(searchModelsOperation)) {
            val query = params.getAs[String]("query")

    //println("query: " + query)
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

}
