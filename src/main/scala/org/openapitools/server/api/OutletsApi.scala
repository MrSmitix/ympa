/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.ChangeOutletRequest
import org.openapitools.server.model.CreateOutletResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetOutletResponse
import org.openapitools.server.model.GetOutletsResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OutletsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OutletsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createOutletOperation = (apiOperation[CreateOutletResponse]("createOutlet")
    summary "Создание точки продаж"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[ChangeOutletRequest]("changeOutletRequest").description(""))
  )

  post("/campaigns/:campaignId/outlets", operation(createOutletOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("changeOutletRequest: " + changeOutletRequest)
  }

  

  val deleteOutletOperation = (apiOperation[EmptyApiResponse]("deleteOutlet")
    summary "Удаление точки продаж"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("outletId").description(""))
  )

  delete("/campaigns/:campaignId/outlets/:outletId", operation(deleteOutletOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val outletId = params.getOrElse("outletId", halt(400))
    //println("outletId: " + outletId)
  }

  

  val getOutletOperation = (apiOperation[GetOutletResponse]("getOutlet")
    summary "Информация об одной точке продаж"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("outletId").description(""))
  )

  get("/campaigns/:campaignId/outlets/:outletId", operation(getOutletOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val outletId = params.getOrElse("outletId", halt(400))
    //println("outletId: " + outletId)
  }

  

  val getOutletsOperation = (apiOperation[GetOutletsResponse]("getOutlets")
    summary "Информация о нескольких точках продаж"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Long]("regionId").description("").optional, queryParam[String]("shopOutletCode").description("").optional, queryParam[Long]("regionId2").description("").optional)
  )

  get("/campaigns/:campaignId/outlets", operation(getOutletsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val regionId = params.getAs[Long]("regionId")

    //println("regionId: " + regionId)
            val shopOutletCode = params.getAs[String]("shopOutletCode")

    //println("shopOutletCode: " + shopOutletCode)
            val regionId2 = params.getAs[Long]("regionId2")

    //println("regionId2: " + regionId2)
  }

  

  val updateOutletOperation = (apiOperation[EmptyApiResponse]("updateOutlet")
    summary "Изменение информации о точке продаж"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("outletId").description(""), bodyParam[ChangeOutletRequest]("changeOutletRequest").description(""))
  )

  put("/campaigns/:campaignId/outlets/:outletId", operation(updateOutletOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val outletId = params.getOrElse("outletId", halt(400))
    //println("outletId: " + outletId)
    //println("changeOutletRequest: " + changeOutletRequest)
  }

}
