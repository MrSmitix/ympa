/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.CreateChatRequest
import org.openapitools.server.model.CreateChatResponse
import org.openapitools.server.model.EmptyApiResponse
import java.io.File
import org.openapitools.server.model.GetChatHistoryRequest
import org.openapitools.server.model.GetChatHistoryResponse
import org.openapitools.server.model.GetChatsRequest
import org.openapitools.server.model.GetChatsResponse
import org.openapitools.server.model.SendMessageToChatRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ChatsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ChatsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createChatOperation = (apiOperation[CreateChatResponse]("createChat")
    summary "Создание нового чата с покупателем"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[CreateChatRequest]("createChatRequest").description(""))
  )

  post("/businesses/:businessId/chats/new", operation(createChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createChatRequest: " + createChatRequest)
  }

  

  val getChatHistoryOperation = (apiOperation[GetChatHistoryResponse]("getChatHistory")
    summary "Получение истории сообщений в чате"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), bodyParam[GetChatHistoryRequest]("getChatHistoryRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/chats/history", operation(getChatHistoryOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    //println("getChatHistoryRequest: " + getChatHistoryRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getChatsOperation = (apiOperation[GetChatsResponse]("getChats")
    summary "Получение доступных чатов"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetChatsRequest]("getChatsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/chats", operation(getChatsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getChatsRequest: " + getChatsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val sendFileToChatOperation = (apiOperation[EmptyApiResponse]("sendFileToChat")
    summary "Отправка файла в чат"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), formParam[File]("file").description(""))
  )

  post("/businesses/:businessId/chats/file/send", operation(sendFileToChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    val file = fileParams("file")
    //println("file: " + file)
  }

  

  val sendMessageToChatOperation = (apiOperation[EmptyApiResponse]("sendMessageToChat")
    summary "Отправка сообщения в чат"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), bodyParam[SendMessageToChatRequest]("sendMessageToChatRequest").description(""))
  )

  post("/businesses/:businessId/chats/message", operation(sendMessageToChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    //println("sendMessageToChatRequest: " + sendMessageToChatRequest)
  }

}
