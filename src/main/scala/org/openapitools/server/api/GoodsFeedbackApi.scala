/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.DeleteGoodsFeedbackCommentRequest
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetGoodsFeedbackCommentsRequest
import org.openapitools.server.model.GetGoodsFeedbackCommentsResponse
import org.openapitools.server.model.GetGoodsFeedbackRequest
import org.openapitools.server.model.GetGoodsFeedbackResponse
import org.openapitools.server.model.SkipGoodsFeedbackReactionRequest
import org.openapitools.server.model.UpdateGoodsFeedbackCommentRequest
import org.openapitools.server.model.UpdateGoodsFeedbackCommentResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class GoodsFeedbackApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "GoodsFeedbackApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteGoodsFeedbackCommentOperation = (apiOperation[EmptyApiResponse]("deleteGoodsFeedbackComment")
    summary "Удаление комментария к отзыву"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteGoodsFeedbackCommentRequest]("deleteGoodsFeedbackCommentRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/comments/delete", operation(deleteGoodsFeedbackCommentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteGoodsFeedbackCommentRequest: " + deleteGoodsFeedbackCommentRequest)
  }

  

  val getGoodsFeedbackCommentsOperation = (apiOperation[GetGoodsFeedbackCommentsResponse]("getGoodsFeedbackComments")
    summary "Получение комментариев к отзыву"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetGoodsFeedbackCommentsRequest]("getGoodsFeedbackCommentsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/goods-feedback/comments", operation(getGoodsFeedbackCommentsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getGoodsFeedbackCommentsRequest: " + getGoodsFeedbackCommentsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getGoodsFeedbacksOperation = (apiOperation[GetGoodsFeedbackResponse]("getGoodsFeedbacks")
    summary "Получение отзывов о товарах продавца"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetGoodsFeedbackRequest]("getGoodsFeedbackRequest").description("").optional)
  )

  post("/businesses/:businessId/goods-feedback", operation(getGoodsFeedbacksOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getGoodsFeedbackRequest: " + getGoodsFeedbackRequest)
  }

  

  val skipGoodsFeedbacksReactionOperation = (apiOperation[EmptyApiResponse]("skipGoodsFeedbacksReaction")
    summary "Отказ от ответа на отзывы"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[SkipGoodsFeedbackReactionRequest]("skipGoodsFeedbackReactionRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/skip-reaction", operation(skipGoodsFeedbacksReactionOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("skipGoodsFeedbackReactionRequest: " + skipGoodsFeedbackReactionRequest)
  }

  

  val updateGoodsFeedbackCommentOperation = (apiOperation[UpdateGoodsFeedbackCommentResponse]("updateGoodsFeedbackComment")
    summary "Добавление нового или изменение созданного комментария"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateGoodsFeedbackCommentRequest]("updateGoodsFeedbackCommentRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/comments/update", operation(updateGoodsFeedbackCommentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateGoodsFeedbackCommentRequest: " + updateGoodsFeedbackCommentRequest)
  }

}
