/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AddHiddenOffersRequest
import org.openapitools.server.model.AddOffersToArchiveRequest
import org.openapitools.server.model.AddOffersToArchiveResponse
import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.CalculateTariffsRequest
import org.openapitools.server.model.CalculateTariffsResponse
import org.openapitools.server.model.ConfirmPricesRequest
import org.openapitools.server.model.CreateChatRequest
import org.openapitools.server.model.CreateChatResponse
import org.openapitools.server.model.CurrencyType
import org.openapitools.server.model.DeleteCampaignOffersRequest
import org.openapitools.server.model.DeleteCampaignOffersResponse
import org.openapitools.server.model.DeleteGoodsFeedbackCommentRequest
import org.openapitools.server.model.DeleteHiddenOffersRequest
import org.openapitools.server.model.DeleteOffersFromArchiveRequest
import org.openapitools.server.model.DeleteOffersFromArchiveResponse
import org.openapitools.server.model.DeleteOffersRequest
import org.openapitools.server.model.DeleteOffersResponse
import org.openapitools.server.model.DeletePromoOffersRequest
import org.openapitools.server.model.DeletePromoOffersResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.FeedIndexLogsStatusType
import java.io.File
import org.openapitools.server.model.GenerateBoostConsolidatedRequest
import org.openapitools.server.model.GenerateCompetitorsPositionReportRequest
import org.openapitools.server.model.GenerateGoodsFeedbackRequest
import org.openapitools.server.model.GenerateGoodsMovementReportRequest
import org.openapitools.server.model.GenerateGoodsRealizationReportRequest
import org.openapitools.server.model.GenerateGoodsTurnoverRequest
import org.openapitools.server.model.GeneratePricesReportRequest
import org.openapitools.server.model.GenerateReportResponse
import org.openapitools.server.model.GenerateShelfsStatisticsRequest
import org.openapitools.server.model.GenerateShowsSalesReportRequest
import org.openapitools.server.model.GenerateStocksOnWarehousesReportRequest
import org.openapitools.server.model.GenerateUnitedMarketplaceServicesReportRequest
import org.openapitools.server.model.GenerateUnitedNettingReportRequest
import org.openapitools.server.model.GenerateUnitedOrdersRequest
import org.openapitools.server.model.GetAllOffersResponse
import org.openapitools.server.model.GetBidsInfoRequest
import org.openapitools.server.model.GetBidsInfoResponse
import org.openapitools.server.model.GetBidsRecommendationsRequest
import org.openapitools.server.model.GetBidsRecommendationsResponse
import org.openapitools.server.model.GetBusinessBuyerInfoResponse
import org.openapitools.server.model.GetBusinessDocumentsInfoResponse
import org.openapitools.server.model.GetBusinessSettingsResponse
import org.openapitools.server.model.GetCampaignLoginsResponse
import org.openapitools.server.model.GetCampaignOffersRequest
import org.openapitools.server.model.GetCampaignOffersResponse
import org.openapitools.server.model.GetCampaignRegionResponse
import org.openapitools.server.model.GetCampaignResponse
import org.openapitools.server.model.GetCampaignSettingsResponse
import org.openapitools.server.model.GetCampaignsResponse
import org.openapitools.server.model.GetCategoriesMaxSaleQuantumRequest
import org.openapitools.server.model.GetCategoriesMaxSaleQuantumResponse
import org.openapitools.server.model.GetCategoriesRequest
import org.openapitools.server.model.GetCategoriesResponse
import org.openapitools.server.model.GetCategoryContentParametersResponse
import org.openapitools.server.model.GetChatHistoryRequest
import org.openapitools.server.model.GetChatHistoryResponse
import org.openapitools.server.model.GetChatsRequest
import org.openapitools.server.model.GetChatsResponse
import org.openapitools.server.model.GetFeedIndexLogsResponse
import org.openapitools.server.model.GetFeedResponse
import org.openapitools.server.model.GetFeedbackListResponse
import org.openapitools.server.model.GetFeedsResponse
import org.openapitools.server.model.GetFulfillmentWarehousesResponse
import org.openapitools.server.model.GetGoodsFeedbackCommentsRequest
import org.openapitools.server.model.GetGoodsFeedbackCommentsResponse
import org.openapitools.server.model.GetGoodsFeedbackRequest
import org.openapitools.server.model.GetGoodsFeedbackResponse
import org.openapitools.server.model.GetGoodsStatsRequest
import org.openapitools.server.model.GetGoodsStatsResponse
import org.openapitools.server.model.GetHiddenOffersResponse
import org.openapitools.server.model.GetOfferCardsContentStatusRequest
import org.openapitools.server.model.GetOfferCardsContentStatusResponse
import org.openapitools.server.model.GetOfferMappingEntriesResponse
import org.openapitools.server.model.GetOfferMappingsRequest
import org.openapitools.server.model.GetOfferMappingsResponse
import org.openapitools.server.model.GetOfferRecommendationsRequest
import org.openapitools.server.model.GetOfferRecommendationsResponse
import org.openapitools.server.model.GetOffersResponse
import org.openapitools.server.model.GetOrderResponse
import org.openapitools.server.model.GetOrdersResponse
import org.openapitools.server.model.GetOrdersStatsRequest
import org.openapitools.server.model.GetOrdersStatsResponse
import org.openapitools.server.model.GetPricesByOfferIdsRequest
import org.openapitools.server.model.GetPricesByOfferIdsResponse
import org.openapitools.server.model.GetPricesResponse
import org.openapitools.server.model.GetPromoOffersRequest
import org.openapitools.server.model.GetPromoOffersResponse
import org.openapitools.server.model.GetPromosRequest
import org.openapitools.server.model.GetPromosResponse
import org.openapitools.server.model.GetQualityRatingRequest
import org.openapitools.server.model.GetQualityRatingResponse
import org.openapitools.server.model.GetQuarantineOffersRequest
import org.openapitools.server.model.GetQuarantineOffersResponse
import org.openapitools.server.model.GetRegionWithChildrenResponse
import org.openapitools.server.model.GetRegionsResponse
import org.openapitools.server.model.GetReportInfoResponse
import org.openapitools.server.model.GetReturnResponse
import org.openapitools.server.model.GetReturnsResponse
import org.openapitools.server.model.GetSuggestedOfferMappingEntriesRequest
import org.openapitools.server.model.GetSuggestedOfferMappingEntriesResponse
import org.openapitools.server.model.GetSuggestedOfferMappingsRequest
import org.openapitools.server.model.GetSuggestedOfferMappingsResponse
import org.openapitools.server.model.GetWarehouseStocksRequest
import org.openapitools.server.model.GetWarehouseStocksResponse
import java.time.LocalDate
import org.openapitools.server.model.OfferAvailabilityStatusType
import org.openapitools.server.model.OfferMappingKindType
import org.openapitools.server.model.OfferProcessingStatusType
import java.time.OffsetDateTime
import org.openapitools.server.model.OrderBuyerType
import org.openapitools.server.model.OrderDeliveryDispatchType
import org.openapitools.server.model.OrderStatusType
import org.openapitools.server.model.OrderSubstatusType
import org.openapitools.server.model.PutSkuBidsRequest
import org.openapitools.server.model.RefundStatusType
import org.openapitools.server.model.ReportFormatType
import org.openapitools.server.model.ReturnType
import org.openapitools.server.model.SendMessageToChatRequest
import org.openapitools.server.model.SetFeedParamsRequest
import org.openapitools.server.model.SkipGoodsFeedbackReactionRequest
import org.openapitools.server.model.SuggestPricesRequest
import org.openapitools.server.model.SuggestPricesResponse
import org.openapitools.server.model.UpdateBusinessPricesRequest
import org.openapitools.server.model.UpdateCampaignOffersRequest
import org.openapitools.server.model.UpdateGoodsFeedbackCommentRequest
import org.openapitools.server.model.UpdateGoodsFeedbackCommentResponse
import org.openapitools.server.model.UpdateOfferContentRequest
import org.openapitools.server.model.UpdateOfferContentResponse
import org.openapitools.server.model.UpdateOfferMappingEntryRequest
import org.openapitools.server.model.UpdateOfferMappingsRequest
import org.openapitools.server.model.UpdateOfferMappingsResponse
import org.openapitools.server.model.UpdatePricesRequest
import org.openapitools.server.model.UpdatePromoOffersRequest
import org.openapitools.server.model.UpdatePromoOffersResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class FbyApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "FbyApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val addHiddenOffersOperation = (apiOperation[EmptyApiResponse]("addHiddenOffers")
    summary "Скрытие товаров и настройки скрытия"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[AddHiddenOffersRequest]("addHiddenOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/hidden-offers", operation(addHiddenOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("addHiddenOffersRequest: " + addHiddenOffersRequest)
  }

  

  val addOffersToArchiveOperation = (apiOperation[AddOffersToArchiveResponse]("addOffersToArchive")
    summary "Добавление товаров в архив"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[AddOffersToArchiveRequest]("addOffersToArchiveRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/archive", operation(addOffersToArchiveOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("addOffersToArchiveRequest: " + addOffersToArchiveRequest)
  }

  

  val calculateTariffsOperation = (apiOperation[CalculateTariffsResponse]("calculateTariffs")
    summary "Калькулятор стоимости услуг"
    parameters(bodyParam[CalculateTariffsRequest]("calculateTariffsRequest").description(""))
  )

  post("/tariffs/calculate", operation(calculateTariffsOperation)) {
    //println("calculateTariffsRequest: " + calculateTariffsRequest)
  }

  

  val confirmBusinessPricesOperation = (apiOperation[EmptyApiResponse]("confirmBusinessPrices")
    summary "Удаление товара из карантина по цене в кабинете"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[ConfirmPricesRequest]("confirmPricesRequest").description(""))
  )

  post("/businesses/:businessId/price-quarantine/confirm", operation(confirmBusinessPricesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("confirmPricesRequest: " + confirmPricesRequest)
  }

  

  val confirmCampaignPricesOperation = (apiOperation[EmptyApiResponse]("confirmCampaignPrices")
    summary "Удаление товара из карантина по цене в магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[ConfirmPricesRequest]("confirmPricesRequest").description(""))
  )

  post("/campaigns/:campaignId/price-quarantine/confirm", operation(confirmCampaignPricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("confirmPricesRequest: " + confirmPricesRequest)
  }

  

  val createChatOperation = (apiOperation[CreateChatResponse]("createChat")
    summary "Создание нового чата с покупателем"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[CreateChatRequest]("createChatRequest").description(""))
  )

  post("/businesses/:businessId/chats/new", operation(createChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("createChatRequest: " + createChatRequest)
  }

  

  val deleteCampaignOffersOperation = (apiOperation[DeleteCampaignOffersResponse]("deleteCampaignOffers")
    summary "Удаление товаров из ассортимента магазина"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[DeleteCampaignOffersRequest]("deleteCampaignOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/offers/delete", operation(deleteCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("deleteCampaignOffersRequest: " + deleteCampaignOffersRequest)
  }

  

  val deleteGoodsFeedbackCommentOperation = (apiOperation[EmptyApiResponse]("deleteGoodsFeedbackComment")
    summary "Удаление комментария к отзыву"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteGoodsFeedbackCommentRequest]("deleteGoodsFeedbackCommentRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/comments/delete", operation(deleteGoodsFeedbackCommentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteGoodsFeedbackCommentRequest: " + deleteGoodsFeedbackCommentRequest)
  }

  

  val deleteHiddenOffersOperation = (apiOperation[EmptyApiResponse]("deleteHiddenOffers")
    summary "Возобновление показа товаров"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[DeleteHiddenOffersRequest]("deleteHiddenOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/hidden-offers/delete", operation(deleteHiddenOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("deleteHiddenOffersRequest: " + deleteHiddenOffersRequest)
  }

  

  val deleteOffersOperation = (apiOperation[DeleteOffersResponse]("deleteOffers")
    summary "Удаление товаров из каталога"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteOffersRequest]("deleteOffersRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/delete", operation(deleteOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteOffersRequest: " + deleteOffersRequest)
  }

  

  val deleteOffersFromArchiveOperation = (apiOperation[DeleteOffersFromArchiveResponse]("deleteOffersFromArchive")
    summary "Удаление товаров из архива"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteOffersFromArchiveRequest]("deleteOffersFromArchiveRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/unarchive", operation(deleteOffersFromArchiveOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteOffersFromArchiveRequest: " + deleteOffersFromArchiveRequest)
  }

  

  val deletePromoOffersOperation = (apiOperation[DeletePromoOffersResponse]("deletePromoOffers")
    summary "Удаление товаров из акции"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeletePromoOffersRequest]("deletePromoOffersRequest").description(""))
  )

  post("/businesses/:businessId/promos/offers/delete", operation(deletePromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deletePromoOffersRequest: " + deletePromoOffersRequest)
  }

  

  val generateBoostConsolidatedReportOperation = (apiOperation[GenerateReportResponse]("generateBoostConsolidatedReport")
    summary "Отчет по бусту продаж"
    parameters(bodyParam[GenerateBoostConsolidatedRequest]("generateBoostConsolidatedRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/boost-consolidated/generate", operation(generateBoostConsolidatedReportOperation)) {
    //println("generateBoostConsolidatedRequest: " + generateBoostConsolidatedRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateCompetitorsPositionReportOperation = (apiOperation[GenerateReportResponse]("generateCompetitorsPositionReport")
    summary "Отчет «Конкурентная позиция»"
    parameters(bodyParam[GenerateCompetitorsPositionReportRequest]("generateCompetitorsPositionReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/competitors-position/generate", operation(generateCompetitorsPositionReportOperation)) {
    //println("generateCompetitorsPositionReportRequest: " + generateCompetitorsPositionReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsFeedbackReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsFeedbackReport")
    summary "Отчет по отзывам о товарах"
    parameters(bodyParam[GenerateGoodsFeedbackRequest]("generateGoodsFeedbackRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-feedback/generate", operation(generateGoodsFeedbackReportOperation)) {
    //println("generateGoodsFeedbackRequest: " + generateGoodsFeedbackRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsMovementReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsMovementReport")
    summary "Отчет по движению товаров"
    parameters(bodyParam[GenerateGoodsMovementReportRequest]("generateGoodsMovementReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-movement/generate", operation(generateGoodsMovementReportOperation)) {
    //println("generateGoodsMovementReportRequest: " + generateGoodsMovementReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsRealizationReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsRealizationReport")
    summary "Отчет по реализации"
    parameters(bodyParam[GenerateGoodsRealizationReportRequest]("generateGoodsRealizationReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-realization/generate", operation(generateGoodsRealizationReportOperation)) {
    //println("generateGoodsRealizationReportRequest: " + generateGoodsRealizationReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsTurnoverReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsTurnoverReport")
    summary "Отчет по оборачиваемости"
    parameters(bodyParam[GenerateGoodsTurnoverRequest]("generateGoodsTurnoverRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-turnover/generate", operation(generateGoodsTurnoverReportOperation)) {
    //println("generateGoodsTurnoverRequest: " + generateGoodsTurnoverRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generatePricesReportOperation = (apiOperation[GenerateReportResponse]("generatePricesReport")
    summary "Отчет «Цены на рынке»"
    parameters(bodyParam[GeneratePricesReportRequest]("generatePricesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/prices/generate", operation(generatePricesReportOperation)) {
    //println("generatePricesReportRequest: " + generatePricesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateShelfsStatisticsReportOperation = (apiOperation[GenerateReportResponse]("generateShelfsStatisticsReport")
    summary "Отчет по полкам"
    parameters(bodyParam[GenerateShelfsStatisticsRequest]("generateShelfsStatisticsRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/shelf-statistics/generate", operation(generateShelfsStatisticsReportOperation)) {
    //println("generateShelfsStatisticsRequest: " + generateShelfsStatisticsRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateShowsSalesReportOperation = (apiOperation[GenerateReportResponse]("generateShowsSalesReport")
    summary "Отчет «Аналитика продаж»"
    parameters(bodyParam[GenerateShowsSalesReportRequest]("generateShowsSalesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/shows-sales/generate", operation(generateShowsSalesReportOperation)) {
    //println("generateShowsSalesReportRequest: " + generateShowsSalesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateStocksOnWarehousesReportOperation = (apiOperation[GenerateReportResponse]("generateStocksOnWarehousesReport")
    summary "Отчет по остаткам на складах"
    parameters(bodyParam[GenerateStocksOnWarehousesReportRequest]("generateStocksOnWarehousesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/stocks-on-warehouses/generate", operation(generateStocksOnWarehousesReportOperation)) {
    //println("generateStocksOnWarehousesReportRequest: " + generateStocksOnWarehousesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedMarketplaceServicesReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedMarketplaceServicesReport")
    summary "Отчет по стоимости услуг"
    parameters(bodyParam[GenerateUnitedMarketplaceServicesReportRequest]("generateUnitedMarketplaceServicesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-marketplace-services/generate", operation(generateUnitedMarketplaceServicesReportOperation)) {
    //println("generateUnitedMarketplaceServicesReportRequest: " + generateUnitedMarketplaceServicesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedNettingReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedNettingReport")
    summary "Отчет по платежам"
    parameters(bodyParam[GenerateUnitedNettingReportRequest]("generateUnitedNettingReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-netting/generate", operation(generateUnitedNettingReportOperation)) {
    //println("generateUnitedNettingReportRequest: " + generateUnitedNettingReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedOrdersReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedOrdersReport")
    summary "Отчет по заказам"
    parameters(bodyParam[GenerateUnitedOrdersRequest]("generateUnitedOrdersRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-orders/generate", operation(generateUnitedOrdersReportOperation)) {
    //println("generateUnitedOrdersRequest: " + generateUnitedOrdersRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val getAllOffersOperation = (apiOperation[GetAllOffersResponse]("getAllOffers")
    summary "Все предложения магазина"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[Long]("feedId").description("").optional, queryParam[Int]("chunk").description("").optional)
  )

  get("/campaigns/:campaignId/offers/all", operation(getAllOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val feedId = params.getAs[Long]("feedId")

    //println("feedId: " + feedId)
            val chunk = params.getAs[Int]("chunk")

    //println("chunk: " + chunk)
  }

  

  val getBidsInfoForBusinessOperation = (apiOperation[GetBidsInfoResponse]("getBidsInfoForBusiness")
    summary "Информация об установленных ставках"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetBidsInfoRequest]("getBidsInfoRequest").description("").optional)
  )

  post("/businesses/:businessId/bids/info", operation(getBidsInfoForBusinessOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getBidsInfoRequest: " + getBidsInfoRequest)
  }

  

  val getBidsRecommendationsOperation = (apiOperation[GetBidsRecommendationsResponse]("getBidsRecommendations")
    summary "Рекомендованные ставки для заданных товаров"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetBidsRecommendationsRequest]("getBidsRecommendationsRequest").description(""))
  )

  post("/businesses/:businessId/bids/recommendations", operation(getBidsRecommendationsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getBidsRecommendationsRequest: " + getBidsRecommendationsRequest)
  }

  

  val getBusinessQuarantineOffersOperation = (apiOperation[GetQuarantineOffersResponse]("getBusinessQuarantineOffers")
    summary "Список товаров, находящихся в карантине по цене в кабинете"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetQuarantineOffersRequest]("getQuarantineOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/price-quarantine", operation(getBusinessQuarantineOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getQuarantineOffersRequest: " + getQuarantineOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getBusinessSettingsOperation = (apiOperation[GetBusinessSettingsResponse]("getBusinessSettings")
    summary "Настройки кабинета"
    parameters(pathParam[Long]("businessId").description(""))
  )

  post("/businesses/:businessId/settings", operation(getBusinessSettingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
  }

  

  val getCampaignOperation = (apiOperation[GetCampaignResponse]("getCampaign")
    summary "Информация о магазине"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId", operation(getCampaignOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val getCampaignLoginsOperation = (apiOperation[GetCampaignLoginsResponse]("getCampaignLogins")
    summary "Логины, связанные с магазином"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId/logins", operation(getCampaignLoginsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val getCampaignOffersOperation = (apiOperation[GetCampaignOffersResponse]("getCampaignOffers")
    summary "Информация о товарах, которые размещены в заданном магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetCampaignOffersRequest]("getCampaignOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/campaigns/:campaignId/offers", operation(getCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getCampaignOffersRequest: " + getCampaignOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getCampaignQuarantineOffersOperation = (apiOperation[GetQuarantineOffersResponse]("getCampaignQuarantineOffers")
    summary "Список товаров, находящихся в карантине по цене в магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetQuarantineOffersRequest]("getQuarantineOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/campaigns/:campaignId/price-quarantine", operation(getCampaignQuarantineOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getQuarantineOffersRequest: " + getQuarantineOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getCampaignRegionOperation = (apiOperation[GetCampaignRegionResponse]("getCampaignRegion")
    summary "Регион магазина"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId/region", operation(getCampaignRegionOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val getCampaignSettingsOperation = (apiOperation[GetCampaignSettingsResponse]("getCampaignSettings")
    summary "Настройки магазина"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId/settings", operation(getCampaignSettingsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val getCampaignsOperation = (apiOperation[GetCampaignsResponse]("getCampaigns")
    summary "Список магазинов пользователя"
    parameters(queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/campaigns", operation(getCampaignsOperation)) {
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val getCampaignsByLoginOperation = (apiOperation[GetCampaignsResponse]("getCampaignsByLogin")
    summary "Магазины, доступные логину"
    parameters(pathParam[String]("login").description(""), queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/campaigns/by_login/:login", operation(getCampaignsByLoginOperation)) {
    val login = params.getOrElse("login", halt(400))
    //println("login: " + login)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val getCategoriesMaxSaleQuantumOperation = (apiOperation[GetCategoriesMaxSaleQuantumResponse]("getCategoriesMaxSaleQuantum")
    summary "Лимит на установку кванта продажи и минимального количества товаров в заказе"
    parameters(bodyParam[GetCategoriesMaxSaleQuantumRequest]("getCategoriesMaxSaleQuantumRequest").description(""))
  )

  post("/categories/max-sale-quantum", operation(getCategoriesMaxSaleQuantumOperation)) {
    //println("getCategoriesMaxSaleQuantumRequest: " + getCategoriesMaxSaleQuantumRequest)
  }

  

  val getCategoriesTreeOperation = (apiOperation[GetCategoriesResponse]("getCategoriesTree")
    summary "Дерево категорий"
    parameters(bodyParam[GetCategoriesRequest]("getCategoriesRequest").description("").optional)
  )

  post("/categories/tree", operation(getCategoriesTreeOperation)) {
    //println("getCategoriesRequest: " + getCategoriesRequest)
  }

  

  val getCategoryContentParametersOperation = (apiOperation[GetCategoryContentParametersResponse]("getCategoryContentParameters")
    summary "Списки характеристик товаров по категориям"
    parameters(pathParam[Long]("categoryId").description(""))
  )

  post("/category/:categoryId/parameters", operation(getCategoryContentParametersOperation)) {
    val categoryId = params.getOrElse("categoryId", halt(400))
    //println("categoryId: " + categoryId)
  }

  

  val getChatHistoryOperation = (apiOperation[GetChatHistoryResponse]("getChatHistory")
    summary "Получение истории сообщений в чате"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), bodyParam[GetChatHistoryRequest]("getChatHistoryRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/chats/history", operation(getChatHistoryOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    //println("getChatHistoryRequest: " + getChatHistoryRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getChatsOperation = (apiOperation[GetChatsResponse]("getChats")
    summary "Получение доступных чатов"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetChatsRequest]("getChatsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/chats", operation(getChatsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getChatsRequest: " + getChatsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getFeedOperation = (apiOperation[GetFeedResponse]("getFeed")
    summary "Информация о прайс-листе"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""))
  )

  get("/campaigns/:campaignId/feeds/:feedId", operation(getFeedOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val getFeedIndexLogsOperation = (apiOperation[GetFeedIndexLogsResponse]("getFeedIndexLogs")
    summary "Отчет по индексации прайс-листа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""), queryParam[Int]("limit").description("").optional, queryParam[OffsetDateTime]("publishedTimeFrom").description("").optional, queryParam[OffsetDateTime]("publishedTimeTo").description("").optional, queryParam[FeedIndexLogsStatusType]("status").description("").optional)
  )

  get("/campaigns/:campaignId/feeds/:feedId/index-logs", operation(getFeedIndexLogsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val publishedTimeFrom = params.getAs[OffsetDateTime]("publishedTimeFrom")

    //println("publishedTimeFrom: " + publishedTimeFrom)
            val publishedTimeTo = params.getAs[OffsetDateTime]("publishedTimeTo")

    //println("publishedTimeTo: " + publishedTimeTo)
            val status = params.getAs[FeedIndexLogsStatusType]("status")

    //println("status: " + status)
  }

  

  val getFeedbackAndCommentUpdatesOperation = (apiOperation[GetFeedbackListResponse]("getFeedbackAndCommentUpdates")
    summary "Новые и обновленные отзывы о магазине"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[LocalDate]("fromDate").description("").optional)
  )

  get("/campaigns/:campaignId/feedback/updates", operation(getFeedbackAndCommentUpdatesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val fromDate = params.getAs[LocalDate]("fromDate")

    //println("fromDate: " + fromDate)
  }

  

  val getFeedsOperation = (apiOperation[GetFeedsResponse]("getFeeds")
    summary "Список прайс-листов магазина"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId/feeds", operation(getFeedsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val getFulfillmentWarehousesOperation = (apiOperation[GetFulfillmentWarehousesResponse]("getFulfillmentWarehouses")
    summary "Идентификаторы складов Маркета (FBY)"
    parameters()
  )

  get("/warehouses", operation(getFulfillmentWarehousesOperation)) {
  }

  

  val getGoodsFeedbackCommentsOperation = (apiOperation[GetGoodsFeedbackCommentsResponse]("getGoodsFeedbackComments")
    summary "Получение комментариев к отзыву"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetGoodsFeedbackCommentsRequest]("getGoodsFeedbackCommentsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/goods-feedback/comments", operation(getGoodsFeedbackCommentsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getGoodsFeedbackCommentsRequest: " + getGoodsFeedbackCommentsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getGoodsFeedbacksOperation = (apiOperation[GetGoodsFeedbackResponse]("getGoodsFeedbacks")
    summary "Получение отзывов о товарах продавца"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetGoodsFeedbackRequest]("getGoodsFeedbackRequest").description("").optional)
  )

  post("/businesses/:businessId/goods-feedback", operation(getGoodsFeedbacksOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getGoodsFeedbackRequest: " + getGoodsFeedbackRequest)
  }

  

  val getGoodsStatsOperation = (apiOperation[GetGoodsStatsResponse]("getGoodsStats")
    summary "Отчет по товарам"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetGoodsStatsRequest]("getGoodsStatsRequest").description(""))
  )

  post("/campaigns/:campaignId/stats/skus", operation(getGoodsStatsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getGoodsStatsRequest: " + getGoodsStatsRequest)
  }

  

  val getHiddenOffersOperation = (apiOperation[GetHiddenOffersResponse]("getHiddenOffers")
    summary "Информация о скрытых вами товарах"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[List[String]]("offerId").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[Int]("offset").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/campaigns/:campaignId/hidden-offers", operation(getHiddenOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val offerIdString = params.getAs[String]("offerId")
    val offerId = if("csv" == "default" || "csv" == "csv") {
      offerIdString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("offerId: " + offerId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val offset = params.getAs[Int]("offset")

    //println("offset: " + offset)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val getOfferCardsContentStatusOperation = (apiOperation[GetOfferCardsContentStatusResponse]("getOfferCardsContentStatus")
    summary "Получение информации о заполненности карточек магазина"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetOfferCardsContentStatusRequest]("getOfferCardsContentStatusRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-cards", operation(getOfferCardsContentStatusOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getOfferCardsContentStatusRequest: " + getOfferCardsContentStatusRequest)
  }

  

  val getOfferMappingEntriesOperation = (apiOperation[GetOfferMappingEntriesResponse]("getOfferMappingEntries")
    summary "Список товаров в каталоге"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[List[String]]("offerId").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("shopSku").description("").optional.defaultValue(List.empty[String] ), queryParam[OfferMappingKindType]("mappingKind").description("").optional, queryParam[List[OfferProcessingStatusType]]("status").description("").optional.defaultValue(List.empty[OfferProcessingStatusType] ), queryParam[List[OfferAvailabilityStatusType]]("availability").description("").optional.defaultValue(List.empty[OfferAvailabilityStatusType] ), queryParam[List[Int]]("categoryId").description("").optional.defaultValue(List.empty[Int] ), queryParam[List[String]]("vendor").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/campaigns/:campaignId/offer-mapping-entries", operation(getOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val offerIdString = params.getAs[String]("offerId")
    val offerId = if("csv" == "default" || "csv" == "csv") {
      offerIdString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("offerId: " + offerId)
        val shopSkuString = params.getAs[String]("shopSku")
    val shopSku = if("csv" == "default" || "csv" == "csv") {
      shopSkuString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("shopSku: " + shopSku)
            val mappingKind = params.getAs[OfferMappingKindType]("mappingKind")

    //println("mappingKind: " + mappingKind)
        val statusString = params.getAs[String]("status")
    val status = if("csv" == "default" || "csv" == "csv") {
      statusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("status: " + status)
        val availabilityString = params.getAs[String]("availability")
    val availability = if("csv" == "default" || "csv" == "csv") {
      availabilityString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("availability: " + availability)
        val categoryIdString = params.getAs[String]("categoryId")
    val categoryId = if("csv" == "default" || "csv" == "csv") {
      categoryIdString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("categoryId: " + categoryId)
        val vendorString = params.getAs[String]("vendor")
    val vendor = if("csv" == "default" || "csv" == "csv") {
      vendorString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("vendor: " + vendor)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getOfferMappingsOperation = (apiOperation[GetOfferMappingsResponse]("getOfferMappings")
    summary "Информация о товарах в каталоге"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetOfferMappingsRequest]("getOfferMappingsRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-mappings", operation(getOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getOfferMappingsRequest: " + getOfferMappingsRequest)
  }

  

  val getOfferRecommendationsOperation = (apiOperation[GetOfferRecommendationsResponse]("getOfferRecommendations")
    summary "Рекомендации Маркета, касающиеся цен"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetOfferRecommendationsRequest]("getOfferRecommendationsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/offers/recommendations", operation(getOfferRecommendationsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getOfferRecommendationsRequest: " + getOfferRecommendationsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getOffersOperation = (apiOperation[GetOffersResponse]("getOffers")
    summary "Предложения магазина"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("query").description("").optional, queryParam[Long]("feedId").description("").optional, queryParam[String]("shopCategoryId").description("").optional, queryParam[CurrencyType]("currency").description("").optional, queryParam[Boolean]("matched").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/campaigns/:campaignId/offers", operation(getOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val query = params.getAs[String]("query")

    //println("query: " + query)
            val feedId = params.getAs[Long]("feedId")

    //println("feedId: " + feedId)
            val shopCategoryId = params.getAs[String]("shopCategoryId")

    //println("shopCategoryId: " + shopCategoryId)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
            val matched = params.getAs[Boolean]("matched")

    //println("matched: " + matched)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val getOrderOperation = (apiOperation[GetOrderResponse]("getOrder")
    summary "Информация об одном заказе"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId", operation(getOrderOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
  }

  

  val getOrderBusinessBuyerInfoOperation = (apiOperation[GetBusinessBuyerInfoResponse]("getOrderBusinessBuyerInfo")
    summary "Информация о покупателе — юридическом лице"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""))
  )

  post("/campaigns/:campaignId/orders/:orderId/business-buyer", operation(getOrderBusinessBuyerInfoOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
  }

  

  val getOrderBusinessDocumentsInfoOperation = (apiOperation[GetBusinessDocumentsInfoResponse]("getOrderBusinessDocumentsInfo")
    summary "Информация о документах"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""))
  )

  post("/campaigns/:campaignId/orders/:orderId/documents", operation(getOrderBusinessDocumentsInfoOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
  }

  

  val getOrdersOperation = (apiOperation[GetOrdersResponse]("getOrders")
    summary "Информация о нескольких заказах"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[List[Long]]("orderIds").description("").optional.defaultValue(List.empty[Long] ), queryParam[Set[OrderStatusType]]("status").description("").optional.defaultValue(Set.empty[OrderStatusType] ), queryParam[Set[OrderSubstatusType]]("substatus").description("").optional.defaultValue(Set.empty[OrderSubstatusType] ), queryParam[LocalDate]("fromDate").description("").optional, queryParam[LocalDate]("toDate").description("").optional, queryParam[LocalDate]("supplierShipmentDateFrom").description("").optional, queryParam[LocalDate]("supplierShipmentDateTo").description("").optional, queryParam[OffsetDateTime]("updatedAtFrom").description("").optional, queryParam[OffsetDateTime]("updatedAtTo").description("").optional, queryParam[OrderDeliveryDispatchType]("dispatchType").description("").optional, queryParam[Boolean]("fake").description("").optional.defaultValue(false), queryParam[Boolean]("hasCis").description("").optional.defaultValue(false), queryParam[Boolean]("onlyWaitingForCancellationApprove").description("").optional.defaultValue(false), queryParam[Boolean]("onlyEstimatedDelivery").description("").optional.defaultValue(false), queryParam[OrderBuyerType]("buyerType").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional, queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/campaigns/:campaignId/orders", operation(getOrdersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val orderIdsString = params.getAs[String]("orderIds")
    val orderIds = if("csv" == "default" || "csv" == "csv") {
      orderIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orderIds: " + orderIds)
        val statusString = params.getAs[String]("status")
    val status = if("csv" == "default" || "csv" == "csv") {
      statusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("status: " + status)
        val substatusString = params.getAs[String]("substatus")
    val substatus = if("csv" == "default" || "csv" == "csv") {
      substatusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("substatus: " + substatus)
            val fromDate = params.getAs[LocalDate]("fromDate")

    //println("fromDate: " + fromDate)
            val toDate = params.getAs[LocalDate]("toDate")

    //println("toDate: " + toDate)
            val supplierShipmentDateFrom = params.getAs[LocalDate]("supplierShipmentDateFrom")

    //println("supplierShipmentDateFrom: " + supplierShipmentDateFrom)
            val supplierShipmentDateTo = params.getAs[LocalDate]("supplierShipmentDateTo")

    //println("supplierShipmentDateTo: " + supplierShipmentDateTo)
            val updatedAtFrom = params.getAs[OffsetDateTime]("updatedAtFrom")

    //println("updatedAtFrom: " + updatedAtFrom)
            val updatedAtTo = params.getAs[OffsetDateTime]("updatedAtTo")

    //println("updatedAtTo: " + updatedAtTo)
            val dispatchType = params.getAs[OrderDeliveryDispatchType]("dispatchType")

    //println("dispatchType: " + dispatchType)
            val fake = params.getAs[Boolean]("fake")

    //println("fake: " + fake)
            val hasCis = params.getAs[Boolean]("hasCis")

    //println("hasCis: " + hasCis)
            val onlyWaitingForCancellationApprove = params.getAs[Boolean]("onlyWaitingForCancellationApprove")

    //println("onlyWaitingForCancellationApprove: " + onlyWaitingForCancellationApprove)
            val onlyEstimatedDelivery = params.getAs[Boolean]("onlyEstimatedDelivery")

    //println("onlyEstimatedDelivery: " + onlyEstimatedDelivery)
            val buyerType = params.getAs[OrderBuyerType]("buyerType")

    //println("buyerType: " + buyerType)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getOrdersStatsOperation = (apiOperation[GetOrdersStatsResponse]("getOrdersStats")
    summary "Детальная информация по заказам"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetOrdersStatsRequest]("getOrdersStatsRequest").description("").optional)
  )

  post("/campaigns/:campaignId/stats/orders", operation(getOrdersStatsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getOrdersStatsRequest: " + getOrdersStatsRequest)
  }

  

  val getPricesOperation = (apiOperation[GetPricesResponse]("getPrices")
    summary "Список цен"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[Boolean]("archived").description("").optional.defaultValue(false))
  )

  get("/campaigns/:campaignId/offer-prices", operation(getPricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val archived = params.getAs[Boolean]("archived")

    //println("archived: " + archived)
  }

  

  val getPricesByOfferIdsOperation = (apiOperation[GetPricesByOfferIdsResponse]("getPricesByOfferIds")
    summary "Просмотр цен на указанные товары в магазине"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetPricesByOfferIdsRequest]("getPricesByOfferIdsRequest").description("").optional)
  )

  post("/campaigns/:campaignId/offer-prices", operation(getPricesByOfferIdsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getPricesByOfferIdsRequest: " + getPricesByOfferIdsRequest)
  }

  

  val getPromoOffersOperation = (apiOperation[GetPromoOffersResponse]("getPromoOffers")
    summary "Получение списка товаров, которые участвуют или могут участвовать в акции"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetPromoOffersRequest]("getPromoOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/promos/offers", operation(getPromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getPromoOffersRequest: " + getPromoOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getPromosOperation = (apiOperation[GetPromosResponse]("getPromos")
    summary "Получение списка акций"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetPromosRequest]("getPromosRequest").description("").optional)
  )

  post("/businesses/:businessId/promos", operation(getPromosOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getPromosRequest: " + getPromosRequest)
  }

  

  val getQualityRatingsOperation = (apiOperation[GetQualityRatingResponse]("getQualityRatings")
    summary "Индекс качества магазинов"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetQualityRatingRequest]("getQualityRatingRequest").description(""))
  )

  post("/businesses/:businessId/ratings/quality", operation(getQualityRatingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getQualityRatingRequest: " + getQualityRatingRequest)
  }

  

  val getReportInfoOperation = (apiOperation[GetReportInfoResponse]("getReportInfo")
    summary "Получение заданного отчета"
    parameters(pathParam[String]("reportId").description(""))
  )

  get("/reports/info/:reportId", operation(getReportInfoOperation)) {
    val reportId = params.getOrElse("reportId", halt(400))
    //println("reportId: " + reportId)
  }

  

  val getReturnOperation = (apiOperation[GetReturnResponse]("getReturn")
    summary "Информация о невыкупе или возврате"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId/returns/:returnId", operation(getReturnOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
  }

  

  val getReturnPhotoOperation = (apiOperation[File]("getReturnPhoto")
    summary "Получение фотографии возврата"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("returnId").description(""), pathParam[Long]("itemId").description(""), pathParam[String]("imageHash").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId/returns/:returnId/decision/:itemId/image/:imageHash", operation(getReturnPhotoOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val returnId = params.getOrElse("returnId", halt(400))
    //println("returnId: " + returnId)
    val itemId = params.getOrElse("itemId", halt(400))
    //println("itemId: " + itemId)
    val imageHash = params.getOrElse("imageHash", halt(400))
    //println("imageHash: " + imageHash)
  }

  

  val getReturnsOperation = (apiOperation[GetReturnsResponse]("getReturns")
    summary "Список невыкупов и возвратов"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, queryParam[List[Long]]("orderIds").description("").optional.defaultValue(List.empty[Long] ), queryParam[List[RefundStatusType]]("statuses").description("").optional.defaultValue(List.empty[RefundStatusType] ), queryParam[ReturnType]("`type`").description("").optional, queryParam[LocalDate]("fromDate").description("").optional, queryParam[LocalDate]("toDate").description("").optional, queryParam[LocalDate]("fromDate2").description("").optional, queryParam[LocalDate]("toDate2").description("").optional)
  )

  get("/campaigns/:campaignId/returns", operation(getReturnsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
        val orderIdsString = params.getAs[String]("orderIds")
    val orderIds = if("csv" == "default" || "csv" == "csv") {
      orderIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orderIds: " + orderIds)
        val statusesString = params.getAs[String]("statuses")
    val statuses = if("csv" == "default" || "csv" == "csv") {
      statusesString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("statuses: " + statuses)
            val `type` = params.getAs[ReturnType]("`type`")

    //println("`type`: " + `type`)
            val fromDate = params.getAs[LocalDate]("fromDate")

    //println("fromDate: " + fromDate)
            val toDate = params.getAs[LocalDate]("toDate")

    //println("toDate: " + toDate)
            val fromDate2 = params.getAs[LocalDate]("fromDate2")

    //println("fromDate2: " + fromDate2)
            val toDate2 = params.getAs[LocalDate]("toDate2")

    //println("toDate2: " + toDate2)
  }

  

  val getStocksOperation = (apiOperation[GetWarehouseStocksResponse]("getStocks")
    summary "Информация об остатках и оборачиваемости"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetWarehouseStocksRequest]("getWarehouseStocksRequest").description("").optional)
  )

  post("/campaigns/:campaignId/offers/stocks", operation(getStocksOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getWarehouseStocksRequest: " + getWarehouseStocksRequest)
  }

  

  val getSuggestedOfferMappingEntriesOperation = (apiOperation[GetSuggestedOfferMappingEntriesResponse]("getSuggestedOfferMappingEntries")
    summary "Рекомендованные карточки для товаров"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetSuggestedOfferMappingEntriesRequest]("getSuggestedOfferMappingEntriesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-mapping-entries/suggestions", operation(getSuggestedOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getSuggestedOfferMappingEntriesRequest: " + getSuggestedOfferMappingEntriesRequest)
  }

  

  val getSuggestedOfferMappingsOperation = (apiOperation[GetSuggestedOfferMappingsResponse]("getSuggestedOfferMappings")
    summary "Просмотр карточек на Маркете, которые подходят вашим товарам"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetSuggestedOfferMappingsRequest]("getSuggestedOfferMappingsRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-mappings/suggestions", operation(getSuggestedOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getSuggestedOfferMappingsRequest: " + getSuggestedOfferMappingsRequest)
  }

  

  val getSuggestedPricesOperation = (apiOperation[SuggestPricesResponse]("getSuggestedPrices")
    summary "Цены для продвижения товаров"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[SuggestPricesRequest]("suggestPricesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-prices/suggestions", operation(getSuggestedPricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("suggestPricesRequest: " + suggestPricesRequest)
  }

  

  val putBidsForBusinessOperation = (apiOperation[EmptyApiResponse]("putBidsForBusiness")
    summary "Включение буста продаж и установка ставок"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[PutSkuBidsRequest]("putSkuBidsRequest").description(""))
  )

  put("/businesses/:businessId/bids", operation(putBidsForBusinessOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("putSkuBidsRequest: " + putSkuBidsRequest)
  }

  

  val putBidsForCampaignOperation = (apiOperation[EmptyApiResponse]("putBidsForCampaign")
    summary "Включение буста продаж и установка ставок для магазина"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[PutSkuBidsRequest]("putSkuBidsRequest").description(""))
  )

  put("/campaigns/:campaignId/bids", operation(putBidsForCampaignOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("putSkuBidsRequest: " + putSkuBidsRequest)
  }

  

  val refreshFeedOperation = (apiOperation[EmptyApiResponse]("refreshFeed")
    summary "Сообщить, что прайс-лист обновился"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""))
  )

  post("/campaigns/:campaignId/feeds/:feedId/refresh", operation(refreshFeedOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val searchRegionChildrenOperation = (apiOperation[GetRegionWithChildrenResponse]("searchRegionChildren")
    summary "Информация о дочерних регионах"
    parameters(pathParam[Long]("regionId").description(""), queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/regions/:regionId/children", operation(searchRegionChildrenOperation)) {
    val regionId = params.getOrElse("regionId", halt(400))
    //println("regionId: " + regionId)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val searchRegionsByIdOperation = (apiOperation[GetRegionsResponse]("searchRegionsById")
    summary "Информация о регионе"
    parameters(pathParam[Long]("regionId").description(""))
  )

  get("/regions/:regionId", operation(searchRegionsByIdOperation)) {
    val regionId = params.getOrElse("regionId", halt(400))
    //println("regionId: " + regionId)
  }

  

  val searchRegionsByNameOperation = (apiOperation[GetRegionsResponse]("searchRegionsByName")
    summary "Поиск регионов по их имени"
    parameters(queryParam[String]("name").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/regions", operation(searchRegionsByNameOperation)) {
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val sendFileToChatOperation = (apiOperation[EmptyApiResponse]("sendFileToChat")
    summary "Отправка файла в чат"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), formParam[File]("file").description(""))
  )

  post("/businesses/:businessId/chats/file/send", operation(sendFileToChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    val file = fileParams("file")
    //println("file: " + file)
  }

  

  val sendMessageToChatOperation = (apiOperation[EmptyApiResponse]("sendMessageToChat")
    summary "Отправка сообщения в чат"
    parameters(pathParam[Long]("businessId").description(""), queryParam[Long]("chatId").description(""), bodyParam[SendMessageToChatRequest]("sendMessageToChatRequest").description(""))
  )

  post("/businesses/:businessId/chats/message", operation(sendMessageToChatOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val chatId = params.getAs[Long]("chatId")

    //println("chatId: " + chatId)
    //println("sendMessageToChatRequest: " + sendMessageToChatRequest)
  }

  

  val setFeedParamsOperation = (apiOperation[EmptyApiResponse]("setFeedParams")
    summary "Изменение параметров прайс-листа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""), bodyParam[SetFeedParamsRequest]("setFeedParamsRequest").description(""))
  )

  post("/campaigns/:campaignId/feeds/:feedId/params", operation(setFeedParamsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
    //println("setFeedParamsRequest: " + setFeedParamsRequest)
  }

  

  val skipGoodsFeedbacksReactionOperation = (apiOperation[EmptyApiResponse]("skipGoodsFeedbacksReaction")
    summary "Отказ от ответа на отзывы"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[SkipGoodsFeedbackReactionRequest]("skipGoodsFeedbackReactionRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/skip-reaction", operation(skipGoodsFeedbacksReactionOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("skipGoodsFeedbackReactionRequest: " + skipGoodsFeedbackReactionRequest)
  }

  

  val updateBusinessPricesOperation = (apiOperation[EmptyApiResponse]("updateBusinessPrices")
    summary "Установка цен на товары во всех магазинах"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateBusinessPricesRequest]("updateBusinessPricesRequest").description(""))
  )

  post("/businesses/:businessId/offer-prices/updates", operation(updateBusinessPricesOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateBusinessPricesRequest: " + updateBusinessPricesRequest)
  }

  

  val updateCampaignOffersOperation = (apiOperation[EmptyApiResponse]("updateCampaignOffers")
    summary "Изменение условий продажи товаров в магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateCampaignOffersRequest]("updateCampaignOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/offers/update", operation(updateCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateCampaignOffersRequest: " + updateCampaignOffersRequest)
  }

  

  val updateGoodsFeedbackCommentOperation = (apiOperation[UpdateGoodsFeedbackCommentResponse]("updateGoodsFeedbackComment")
    summary "Добавление нового или изменение созданного комментария"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateGoodsFeedbackCommentRequest]("updateGoodsFeedbackCommentRequest").description(""))
  )

  post("/businesses/:businessId/goods-feedback/comments/update", operation(updateGoodsFeedbackCommentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateGoodsFeedbackCommentRequest: " + updateGoodsFeedbackCommentRequest)
  }

  

  val updateOfferContentOperation = (apiOperation[UpdateOfferContentResponse]("updateOfferContent")
    summary "Редактирование категорийных характеристик товара"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateOfferContentRequest]("updateOfferContentRequest").description(""))
  )

  post("/businesses/:businessId/offer-cards/update", operation(updateOfferContentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateOfferContentRequest: " + updateOfferContentRequest)
  }

  

  val updateOfferMappingEntriesOperation = (apiOperation[EmptyApiResponse]("updateOfferMappingEntries")
    summary "Добавление и редактирование товаров в каталоге"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateOfferMappingEntryRequest]("updateOfferMappingEntryRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-mapping-entries/updates", operation(updateOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateOfferMappingEntryRequest: " + updateOfferMappingEntryRequest)
  }

  

  val updateOfferMappingsOperation = (apiOperation[UpdateOfferMappingsResponse]("updateOfferMappings")
    summary "Добавление товаров в каталог и изменение информации о них"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateOfferMappingsRequest]("updateOfferMappingsRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/update", operation(updateOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateOfferMappingsRequest: " + updateOfferMappingsRequest)
  }

  

  val updatePricesOperation = (apiOperation[EmptyApiResponse]("updatePrices")
    summary "Установка цен на товары в конкретном магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdatePricesRequest]("updatePricesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-prices/updates", operation(updatePricesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updatePricesRequest: " + updatePricesRequest)
  }

  

  val updatePromoOffersOperation = (apiOperation[UpdatePromoOffersResponse]("updatePromoOffers")
    summary "Добавление товаров в акцию или изменение их цен"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdatePromoOffersRequest]("updatePromoOffersRequest").description(""))
  )

  post("/businesses/:businessId/promos/offers/update", operation(updatePromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updatePromoOffersRequest: " + updatePromoOffersRequest)
  }

}
