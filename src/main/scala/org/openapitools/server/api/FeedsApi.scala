/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.FeedIndexLogsStatusType
import org.openapitools.server.model.GetFeedIndexLogsResponse
import org.openapitools.server.model.GetFeedResponse
import org.openapitools.server.model.GetFeedsResponse
import java.time.OffsetDateTime
import org.openapitools.server.model.SetFeedParamsRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class FeedsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "FeedsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getFeedOperation = (apiOperation[GetFeedResponse]("getFeed")
    summary "Информация о прайс-листе"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""))
  )

  get("/campaigns/:campaignId/feeds/:feedId", operation(getFeedOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val getFeedIndexLogsOperation = (apiOperation[GetFeedIndexLogsResponse]("getFeedIndexLogs")
    summary "Отчет по индексации прайс-листа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""), queryParam[Int]("limit").description("").optional, queryParam[OffsetDateTime]("publishedTimeFrom").description("").optional, queryParam[OffsetDateTime]("publishedTimeTo").description("").optional, queryParam[FeedIndexLogsStatusType]("status").description("").optional)
  )

  get("/campaigns/:campaignId/feeds/:feedId/index-logs", operation(getFeedIndexLogsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
            val publishedTimeFrom = params.getAs[OffsetDateTime]("publishedTimeFrom")

    //println("publishedTimeFrom: " + publishedTimeFrom)
            val publishedTimeTo = params.getAs[OffsetDateTime]("publishedTimeTo")

    //println("publishedTimeTo: " + publishedTimeTo)
            val status = params.getAs[FeedIndexLogsStatusType]("status")

    //println("status: " + status)
  }

  

  val getFeedsOperation = (apiOperation[GetFeedsResponse]("getFeeds")
    summary "Список прайс-листов магазина"
    parameters(pathParam[Long]("campaignId").description(""))
  )

  get("/campaigns/:campaignId/feeds", operation(getFeedsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
  }

  

  val refreshFeedOperation = (apiOperation[EmptyApiResponse]("refreshFeed")
    summary "Сообщить, что прайс-лист обновился"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""))
  )

  post("/campaigns/:campaignId/feeds/:feedId/refresh", operation(refreshFeedOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
  }

  

  val setFeedParamsOperation = (apiOperation[EmptyApiResponse]("setFeedParams")
    summary "Изменение параметров прайс-листа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("feedId").description(""), bodyParam[SetFeedParamsRequest]("setFeedParamsRequest").description(""))
  )

  post("/campaigns/:campaignId/feeds/:feedId/params", operation(setFeedParamsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val feedId = params.getOrElse("feedId", halt(400))
    //println("feedId: " + feedId)
    //println("setFeedParamsRequest: " + setFeedParamsRequest)
  }

}
