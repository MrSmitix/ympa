/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetBidsInfoRequest
import org.openapitools.server.model.GetBidsInfoResponse
import org.openapitools.server.model.GetBidsRecommendationsRequest
import org.openapitools.server.model.GetBidsRecommendationsResponse
import org.openapitools.server.model.PutSkuBidsRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class BidsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "BidsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getBidsInfoForBusinessOperation = (apiOperation[GetBidsInfoResponse]("getBidsInfoForBusiness")
    summary "Информация об установленных ставках"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetBidsInfoRequest]("getBidsInfoRequest").description("").optional)
  )

  post("/businesses/:businessId/bids/info", operation(getBidsInfoForBusinessOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getBidsInfoRequest: " + getBidsInfoRequest)
  }

  

  val getBidsRecommendationsOperation = (apiOperation[GetBidsRecommendationsResponse]("getBidsRecommendations")
    summary "Рекомендованные ставки для заданных товаров"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetBidsRecommendationsRequest]("getBidsRecommendationsRequest").description(""))
  )

  post("/businesses/:businessId/bids/recommendations", operation(getBidsRecommendationsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getBidsRecommendationsRequest: " + getBidsRecommendationsRequest)
  }

  

  val putBidsForBusinessOperation = (apiOperation[EmptyApiResponse]("putBidsForBusiness")
    summary "Включение буста продаж и установка ставок"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[PutSkuBidsRequest]("putSkuBidsRequest").description(""))
  )

  put("/businesses/:businessId/bids", operation(putBidsForBusinessOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("putSkuBidsRequest: " + putSkuBidsRequest)
  }

  

  val putBidsForCampaignOperation = (apiOperation[EmptyApiResponse]("putBidsForCampaign")
    summary "Включение буста продаж и установка ставок для магазина"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[PutSkuBidsRequest]("putSkuBidsRequest").description(""))
  )

  put("/campaigns/:campaignId/bids", operation(putBidsForCampaignOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("putSkuBidsRequest: " + putSkuBidsRequest)
  }

}
