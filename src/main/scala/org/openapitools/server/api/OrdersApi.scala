/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AcceptOrderCancellationRequest
import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetOrderResponse
import org.openapitools.server.model.GetOrdersResponse
import java.time.LocalDate
import java.time.OffsetDateTime
import org.openapitools.server.model.OrderBuyerType
import org.openapitools.server.model.OrderDeliveryDispatchType
import org.openapitools.server.model.OrderStatusType
import org.openapitools.server.model.OrderSubstatusType
import org.openapitools.server.model.ProvideOrderDigitalCodesRequest
import org.openapitools.server.model.ProvideOrderItemIdentifiersRequest
import org.openapitools.server.model.ProvideOrderItemIdentifiersResponse
import org.openapitools.server.model.SetOrderBoxLayoutRequest
import org.openapitools.server.model.SetOrderBoxLayoutResponse
import org.openapitools.server.model.SetOrderShipmentBoxesRequest
import org.openapitools.server.model.SetOrderShipmentBoxesResponse
import org.openapitools.server.model.UpdateOrderItemRequest
import org.openapitools.server.model.UpdateOrderStatusRequest
import org.openapitools.server.model.UpdateOrderStatusResponse
import org.openapitools.server.model.UpdateOrderStatusesRequest
import org.openapitools.server.model.UpdateOrderStatusesResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OrdersApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OrdersApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val acceptOrderCancellationOperation = (apiOperation[EmptyApiResponse]("acceptOrderCancellation")
    summary "Отмена заказа покупателем"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[AcceptOrderCancellationRequest]("acceptOrderCancellationRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/cancellation/accept", operation(acceptOrderCancellationOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("acceptOrderCancellationRequest: " + acceptOrderCancellationRequest)
  }

  

  val getOrderOperation = (apiOperation[GetOrderResponse]("getOrder")
    summary "Информация об одном заказе"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""))
  )

  get("/campaigns/:campaignId/orders/:orderId", operation(getOrderOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
  }

  

  val getOrdersOperation = (apiOperation[GetOrdersResponse]("getOrders")
    summary "Информация о нескольких заказах"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[List[Long]]("orderIds").description("").optional.defaultValue(List.empty[Long] ), queryParam[Set[OrderStatusType]]("status").description("").optional.defaultValue(Set.empty[OrderStatusType] ), queryParam[Set[OrderSubstatusType]]("substatus").description("").optional.defaultValue(Set.empty[OrderSubstatusType] ), queryParam[LocalDate]("fromDate").description("").optional, queryParam[LocalDate]("toDate").description("").optional, queryParam[LocalDate]("supplierShipmentDateFrom").description("").optional, queryParam[LocalDate]("supplierShipmentDateTo").description("").optional, queryParam[OffsetDateTime]("updatedAtFrom").description("").optional, queryParam[OffsetDateTime]("updatedAtTo").description("").optional, queryParam[OrderDeliveryDispatchType]("dispatchType").description("").optional, queryParam[Boolean]("fake").description("").optional.defaultValue(false), queryParam[Boolean]("hasCis").description("").optional.defaultValue(false), queryParam[Boolean]("onlyWaitingForCancellationApprove").description("").optional.defaultValue(false), queryParam[Boolean]("onlyEstimatedDelivery").description("").optional.defaultValue(false), queryParam[OrderBuyerType]("buyerType").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional, queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/campaigns/:campaignId/orders", operation(getOrdersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val orderIdsString = params.getAs[String]("orderIds")
    val orderIds = if("csv" == "default" || "csv" == "csv") {
      orderIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("orderIds: " + orderIds)
        val statusString = params.getAs[String]("status")
    val status = if("csv" == "default" || "csv" == "csv") {
      statusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("status: " + status)
        val substatusString = params.getAs[String]("substatus")
    val substatus = if("csv" == "default" || "csv" == "csv") {
      substatusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("substatus: " + substatus)
            val fromDate = params.getAs[LocalDate]("fromDate")

    //println("fromDate: " + fromDate)
            val toDate = params.getAs[LocalDate]("toDate")

    //println("toDate: " + toDate)
            val supplierShipmentDateFrom = params.getAs[LocalDate]("supplierShipmentDateFrom")

    //println("supplierShipmentDateFrom: " + supplierShipmentDateFrom)
            val supplierShipmentDateTo = params.getAs[LocalDate]("supplierShipmentDateTo")

    //println("supplierShipmentDateTo: " + supplierShipmentDateTo)
            val updatedAtFrom = params.getAs[OffsetDateTime]("updatedAtFrom")

    //println("updatedAtFrom: " + updatedAtFrom)
            val updatedAtTo = params.getAs[OffsetDateTime]("updatedAtTo")

    //println("updatedAtTo: " + updatedAtTo)
            val dispatchType = params.getAs[OrderDeliveryDispatchType]("dispatchType")

    //println("dispatchType: " + dispatchType)
            val fake = params.getAs[Boolean]("fake")

    //println("fake: " + fake)
            val hasCis = params.getAs[Boolean]("hasCis")

    //println("hasCis: " + hasCis)
            val onlyWaitingForCancellationApprove = params.getAs[Boolean]("onlyWaitingForCancellationApprove")

    //println("onlyWaitingForCancellationApprove: " + onlyWaitingForCancellationApprove)
            val onlyEstimatedDelivery = params.getAs[Boolean]("onlyEstimatedDelivery")

    //println("onlyEstimatedDelivery: " + onlyEstimatedDelivery)
            val buyerType = params.getAs[OrderBuyerType]("buyerType")

    //println("buyerType: " + buyerType)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val provideOrderDigitalCodesOperation = (apiOperation[EmptyApiResponse]("provideOrderDigitalCodes")
    summary "Передача ключей цифровых товаров"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[ProvideOrderDigitalCodesRequest]("provideOrderDigitalCodesRequest").description(""))
  )

  post("/campaigns/:campaignId/orders/:orderId/deliverDigitalGoods", operation(provideOrderDigitalCodesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("provideOrderDigitalCodesRequest: " + provideOrderDigitalCodesRequest)
  }

  

  val provideOrderItemIdentifiersOperation = (apiOperation[ProvideOrderItemIdentifiersResponse]("provideOrderItemIdentifiers")
    summary "Передача кодов маркировки единиц товара"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[ProvideOrderItemIdentifiersRequest]("provideOrderItemIdentifiersRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/identifiers", operation(provideOrderItemIdentifiersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("provideOrderItemIdentifiersRequest: " + provideOrderItemIdentifiersRequest)
  }

  

  val setOrderBoxLayoutOperation = (apiOperation[SetOrderBoxLayoutResponse]("setOrderBoxLayout")
    summary "Подготовка заказа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[SetOrderBoxLayoutRequest]("setOrderBoxLayoutRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/boxes", operation(setOrderBoxLayoutOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("setOrderBoxLayoutRequest: " + setOrderBoxLayoutRequest)
  }

  

  val setOrderShipmentBoxesOperation = (apiOperation[SetOrderShipmentBoxesResponse]("setOrderShipmentBoxes")
    summary "Передача количества грузовых мест в заказе"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), pathParam[Long]("shipmentId").description(""), bodyParam[SetOrderShipmentBoxesRequest]("setOrderShipmentBoxesRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/delivery/shipments/:shipmentId/boxes", operation(setOrderShipmentBoxesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    val shipmentId = params.getOrElse("shipmentId", halt(400))
    //println("shipmentId: " + shipmentId)
    //println("setOrderShipmentBoxesRequest: " + setOrderShipmentBoxesRequest)
  }

  

  val updateOrderItemsOperation = (apiOperation[Unit]("updateOrderItems")
    summary "Удаление товара из заказа или уменьшение числа единиц"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[UpdateOrderItemRequest]("updateOrderItemRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/items", operation(updateOrderItemsOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("updateOrderItemRequest: " + updateOrderItemRequest)
  }

  

  val updateOrderStatusOperation = (apiOperation[UpdateOrderStatusResponse]("updateOrderStatus")
    summary "Изменение статуса одного заказа"
    parameters(pathParam[Long]("campaignId").description(""), pathParam[Long]("orderId").description(""), bodyParam[UpdateOrderStatusRequest]("updateOrderStatusRequest").description(""))
  )

  put("/campaigns/:campaignId/orders/:orderId/status", operation(updateOrderStatusOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    val orderId = params.getOrElse("orderId", halt(400))
    //println("orderId: " + orderId)
    //println("updateOrderStatusRequest: " + updateOrderStatusRequest)
  }

  

  val updateOrderStatusesOperation = (apiOperation[UpdateOrderStatusesResponse]("updateOrderStatuses")
    summary "Изменение статусов нескольких заказов"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateOrderStatusesRequest]("updateOrderStatusesRequest").description(""))
  )

  post("/campaigns/:campaignId/orders/status-update", operation(updateOrderStatusesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateOrderStatusesRequest: " + updateOrderStatusesRequest)
  }

}
