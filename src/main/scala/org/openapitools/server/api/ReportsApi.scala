/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.GenerateBoostConsolidatedRequest
import org.openapitools.server.model.GenerateCompetitorsPositionReportRequest
import org.openapitools.server.model.GenerateGoodsFeedbackRequest
import org.openapitools.server.model.GenerateGoodsMovementReportRequest
import org.openapitools.server.model.GenerateGoodsRealizationReportRequest
import org.openapitools.server.model.GenerateGoodsTurnoverRequest
import org.openapitools.server.model.GenerateMassOrderLabelsRequest
import org.openapitools.server.model.GeneratePricesReportRequest
import org.openapitools.server.model.GenerateReportResponse
import org.openapitools.server.model.GenerateShelfsStatisticsRequest
import org.openapitools.server.model.GenerateShipmentListDocumentReportRequest
import org.openapitools.server.model.GenerateShowsSalesReportRequest
import org.openapitools.server.model.GenerateStocksOnWarehousesReportRequest
import org.openapitools.server.model.GenerateUnitedMarketplaceServicesReportRequest
import org.openapitools.server.model.GenerateUnitedNettingReportRequest
import org.openapitools.server.model.GenerateUnitedOrdersRequest
import org.openapitools.server.model.GetReportInfoResponse
import org.openapitools.server.model.PageFormatType
import org.openapitools.server.model.ReportFormatType

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ReportsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ReportsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val generateBoostConsolidatedReportOperation = (apiOperation[GenerateReportResponse]("generateBoostConsolidatedReport")
    summary "Отчет по бусту продаж"
    parameters(bodyParam[GenerateBoostConsolidatedRequest]("generateBoostConsolidatedRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/boost-consolidated/generate", operation(generateBoostConsolidatedReportOperation)) {
    //println("generateBoostConsolidatedRequest: " + generateBoostConsolidatedRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateCompetitorsPositionReportOperation = (apiOperation[GenerateReportResponse]("generateCompetitorsPositionReport")
    summary "Отчет «Конкурентная позиция»"
    parameters(bodyParam[GenerateCompetitorsPositionReportRequest]("generateCompetitorsPositionReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/competitors-position/generate", operation(generateCompetitorsPositionReportOperation)) {
    //println("generateCompetitorsPositionReportRequest: " + generateCompetitorsPositionReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsFeedbackReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsFeedbackReport")
    summary "Отчет по отзывам о товарах"
    parameters(bodyParam[GenerateGoodsFeedbackRequest]("generateGoodsFeedbackRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-feedback/generate", operation(generateGoodsFeedbackReportOperation)) {
    //println("generateGoodsFeedbackRequest: " + generateGoodsFeedbackRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsMovementReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsMovementReport")
    summary "Отчет по движению товаров"
    parameters(bodyParam[GenerateGoodsMovementReportRequest]("generateGoodsMovementReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-movement/generate", operation(generateGoodsMovementReportOperation)) {
    //println("generateGoodsMovementReportRequest: " + generateGoodsMovementReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsRealizationReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsRealizationReport")
    summary "Отчет по реализации"
    parameters(bodyParam[GenerateGoodsRealizationReportRequest]("generateGoodsRealizationReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-realization/generate", operation(generateGoodsRealizationReportOperation)) {
    //println("generateGoodsRealizationReportRequest: " + generateGoodsRealizationReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateGoodsTurnoverReportOperation = (apiOperation[GenerateReportResponse]("generateGoodsTurnoverReport")
    summary "Отчет по оборачиваемости"
    parameters(bodyParam[GenerateGoodsTurnoverRequest]("generateGoodsTurnoverRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/goods-turnover/generate", operation(generateGoodsTurnoverReportOperation)) {
    //println("generateGoodsTurnoverRequest: " + generateGoodsTurnoverRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateMassOrderLabelsReportOperation = (apiOperation[GenerateReportResponse]("generateMassOrderLabelsReport")
    summary "Готовые ярлыки‑наклейки на все коробки в нескольких заказах"
    parameters(bodyParam[GenerateMassOrderLabelsRequest]("generateMassOrderLabelsRequest").description(""), queryParam[PageFormatType]("format").description("").optional)
  )

  post("/reports/documents/labels/generate", operation(generateMassOrderLabelsReportOperation)) {
    //println("generateMassOrderLabelsRequest: " + generateMassOrderLabelsRequest)
            val format = params.getAs[PageFormatType]("format")

    //println("format: " + format)
  }

  

  val generatePricesReportOperation = (apiOperation[GenerateReportResponse]("generatePricesReport")
    summary "Отчет «Цены на рынке»"
    parameters(bodyParam[GeneratePricesReportRequest]("generatePricesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/prices/generate", operation(generatePricesReportOperation)) {
    //println("generatePricesReportRequest: " + generatePricesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateShelfsStatisticsReportOperation = (apiOperation[GenerateReportResponse]("generateShelfsStatisticsReport")
    summary "Отчет по полкам"
    parameters(bodyParam[GenerateShelfsStatisticsRequest]("generateShelfsStatisticsRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/shelf-statistics/generate", operation(generateShelfsStatisticsReportOperation)) {
    //println("generateShelfsStatisticsRequest: " + generateShelfsStatisticsRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateShipmentListDocumentReportOperation = (apiOperation[GenerateReportResponse]("generateShipmentListDocumentReport")
    summary "Получение листа сборки"
    parameters(bodyParam[GenerateShipmentListDocumentReportRequest]("generateShipmentListDocumentReportRequest").description(""))
  )

  post("/reports/documents/shipment-list/generate", operation(generateShipmentListDocumentReportOperation)) {
    //println("generateShipmentListDocumentReportRequest: " + generateShipmentListDocumentReportRequest)
  }

  

  val generateShowsSalesReportOperation = (apiOperation[GenerateReportResponse]("generateShowsSalesReport")
    summary "Отчет «Аналитика продаж»"
    parameters(bodyParam[GenerateShowsSalesReportRequest]("generateShowsSalesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/shows-sales/generate", operation(generateShowsSalesReportOperation)) {
    //println("generateShowsSalesReportRequest: " + generateShowsSalesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateStocksOnWarehousesReportOperation = (apiOperation[GenerateReportResponse]("generateStocksOnWarehousesReport")
    summary "Отчет по остаткам на складах"
    parameters(bodyParam[GenerateStocksOnWarehousesReportRequest]("generateStocksOnWarehousesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/stocks-on-warehouses/generate", operation(generateStocksOnWarehousesReportOperation)) {
    //println("generateStocksOnWarehousesReportRequest: " + generateStocksOnWarehousesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedMarketplaceServicesReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedMarketplaceServicesReport")
    summary "Отчет по стоимости услуг"
    parameters(bodyParam[GenerateUnitedMarketplaceServicesReportRequest]("generateUnitedMarketplaceServicesReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-marketplace-services/generate", operation(generateUnitedMarketplaceServicesReportOperation)) {
    //println("generateUnitedMarketplaceServicesReportRequest: " + generateUnitedMarketplaceServicesReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedNettingReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedNettingReport")
    summary "Отчет по платежам"
    parameters(bodyParam[GenerateUnitedNettingReportRequest]("generateUnitedNettingReportRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-netting/generate", operation(generateUnitedNettingReportOperation)) {
    //println("generateUnitedNettingReportRequest: " + generateUnitedNettingReportRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val generateUnitedOrdersReportOperation = (apiOperation[GenerateReportResponse]("generateUnitedOrdersReport")
    summary "Отчет по заказам"
    parameters(bodyParam[GenerateUnitedOrdersRequest]("generateUnitedOrdersRequest").description(""), queryParam[ReportFormatType]("format").description("").optional)
  )

  post("/reports/united-orders/generate", operation(generateUnitedOrdersReportOperation)) {
    //println("generateUnitedOrdersRequest: " + generateUnitedOrdersRequest)
            val format = params.getAs[ReportFormatType]("format")

    //println("format: " + format)
  }

  

  val getReportInfoOperation = (apiOperation[GetReportInfoResponse]("getReportInfo")
    summary "Получение заданного отчета"
    parameters(pathParam[String]("reportId").description(""))
  )

  get("/reports/info/:reportId", operation(getReportInfoOperation)) {
    val reportId = params.getOrElse("reportId", halt(400))
    //println("reportId: " + reportId)
  }

}
