/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetOfferMappingEntriesResponse
import org.openapitools.server.model.GetSuggestedOfferMappingEntriesRequest
import org.openapitools.server.model.GetSuggestedOfferMappingEntriesResponse
import org.openapitools.server.model.OfferAvailabilityStatusType
import org.openapitools.server.model.OfferMappingKindType
import org.openapitools.server.model.OfferProcessingStatusType
import org.openapitools.server.model.UpdateOfferMappingEntryRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OfferMappingsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OfferMappingsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getOfferMappingEntriesOperation = (apiOperation[GetOfferMappingEntriesResponse]("getOfferMappingEntries")
    summary "Список товаров в каталоге"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[List[String]]("offerId").description("").optional.defaultValue(List.empty[String] ), queryParam[List[String]]("shopSku").description("").optional.defaultValue(List.empty[String] ), queryParam[OfferMappingKindType]("mappingKind").description("").optional, queryParam[List[OfferProcessingStatusType]]("status").description("").optional.defaultValue(List.empty[OfferProcessingStatusType] ), queryParam[List[OfferAvailabilityStatusType]]("availability").description("").optional.defaultValue(List.empty[OfferAvailabilityStatusType] ), queryParam[List[Int]]("categoryId").description("").optional.defaultValue(List.empty[Int] ), queryParam[List[String]]("vendor").description("").optional.defaultValue(List.empty[String] ), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  get("/campaigns/:campaignId/offer-mapping-entries", operation(getOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val offerIdString = params.getAs[String]("offerId")
    val offerId = if("csv" == "default" || "csv" == "csv") {
      offerIdString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("offerId: " + offerId)
        val shopSkuString = params.getAs[String]("shopSku")
    val shopSku = if("csv" == "default" || "csv" == "csv") {
      shopSkuString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("shopSku: " + shopSku)
            val mappingKind = params.getAs[OfferMappingKindType]("mappingKind")

    //println("mappingKind: " + mappingKind)
        val statusString = params.getAs[String]("status")
    val status = if("csv" == "default" || "csv" == "csv") {
      statusString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("status: " + status)
        val availabilityString = params.getAs[String]("availability")
    val availability = if("csv" == "default" || "csv" == "csv") {
      availabilityString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("availability: " + availability)
        val categoryIdString = params.getAs[String]("categoryId")
    val categoryId = if("csv" == "default" || "csv" == "csv") {
      categoryIdString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("categoryId: " + categoryId)
        val vendorString = params.getAs[String]("vendor")
    val vendor = if("csv" == "default" || "csv" == "csv") {
      vendorString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("vendor: " + vendor)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getSuggestedOfferMappingEntriesOperation = (apiOperation[GetSuggestedOfferMappingEntriesResponse]("getSuggestedOfferMappingEntries")
    summary "Рекомендованные карточки для товаров"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetSuggestedOfferMappingEntriesRequest]("getSuggestedOfferMappingEntriesRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-mapping-entries/suggestions", operation(getSuggestedOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getSuggestedOfferMappingEntriesRequest: " + getSuggestedOfferMappingEntriesRequest)
  }

  

  val updateOfferMappingEntriesOperation = (apiOperation[EmptyApiResponse]("updateOfferMappingEntries")
    summary "Добавление и редактирование товаров в каталоге"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateOfferMappingEntryRequest]("updateOfferMappingEntryRequest").description(""))
  )

  post("/campaigns/:campaignId/offer-mapping-entries/updates", operation(updateOfferMappingEntriesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateOfferMappingEntryRequest: " + updateOfferMappingEntryRequest)
  }

}
