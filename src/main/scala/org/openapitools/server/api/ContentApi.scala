/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.GetCategoryContentParametersResponse
import org.openapitools.server.model.GetOfferCardsContentStatusRequest
import org.openapitools.server.model.GetOfferCardsContentStatusResponse
import org.openapitools.server.model.UpdateOfferContentRequest
import org.openapitools.server.model.UpdateOfferContentResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ContentApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ContentApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getCategoryContentParametersOperation = (apiOperation[GetCategoryContentParametersResponse]("getCategoryContentParameters")
    summary "Списки характеристик товаров по категориям"
    parameters(pathParam[Long]("categoryId").description(""))
  )

  post("/category/:categoryId/parameters", operation(getCategoryContentParametersOperation)) {
    val categoryId = params.getOrElse("categoryId", halt(400))
    //println("categoryId: " + categoryId)
  }

  

  val getOfferCardsContentStatusOperation = (apiOperation[GetOfferCardsContentStatusResponse]("getOfferCardsContentStatus")
    summary "Получение информации о заполненности карточек магазина"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetOfferCardsContentStatusRequest]("getOfferCardsContentStatusRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-cards", operation(getOfferCardsContentStatusOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getOfferCardsContentStatusRequest: " + getOfferCardsContentStatusRequest)
  }

  

  val updateOfferContentOperation = (apiOperation[UpdateOfferContentResponse]("updateOfferContent")
    summary "Редактирование категорийных характеристик товара"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateOfferContentRequest]("updateOfferContentRequest").description(""))
  )

  post("/businesses/:businessId/offer-cards/update", operation(updateOfferContentOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateOfferContentRequest: " + updateOfferContentRequest)
  }

}
