/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetOutletLicensesResponse
import org.openapitools.server.model.UpdateOutletLicenseRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OutletLicensesApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OutletLicensesApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteOutletLicensesOperation = (apiOperation[EmptyApiResponse]("deleteOutletLicenses")
    summary "Удаление лицензий для точек продаж"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[Set[Long]]("ids").description("").optional.defaultValue(Set.empty[Long] ))
  )

  delete("/campaigns/:campaignId/outlets/licenses", operation(deleteOutletLicensesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val idsString = params.getAs[String]("ids")
    val ids = if("csv" == "default" || "csv" == "csv") {
      idsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ids: " + ids)
  }

  

  val getOutletLicensesOperation = (apiOperation[GetOutletLicensesResponse]("getOutletLicenses")
    summary "Информация о лицензиях для точек продаж"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[Set[Long]]("outletIds").description("").optional.defaultValue(Set.empty[Long] ), queryParam[Set[Long]]("ids").description("").optional.defaultValue(Set.empty[Long] ))
  )

  get("/campaigns/:campaignId/outlets/licenses", operation(getOutletLicensesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
        val outletIdsString = params.getAs[String]("outletIds")
    val outletIds = if("csv" == "default" || "csv" == "csv") {
      outletIdsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("outletIds: " + outletIds)
        val idsString = params.getAs[String]("ids")
    val ids = if("csv" == "default" || "csv" == "csv") {
      idsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("ids: " + ids)
  }

  

  val updateOutletLicensesOperation = (apiOperation[EmptyApiResponse]("updateOutletLicenses")
    summary "Создание и изменение лицензий для точек продаж"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateOutletLicenseRequest]("updateOutletLicenseRequest").description(""))
  )

  post("/campaigns/:campaignId/outlets/licenses", operation(updateOutletLicensesOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateOutletLicenseRequest: " + updateOutletLicenseRequest)
  }

}
