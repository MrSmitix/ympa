/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AddOffersToArchiveRequest
import org.openapitools.server.model.AddOffersToArchiveResponse
import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.DeleteOffersFromArchiveRequest
import org.openapitools.server.model.DeleteOffersFromArchiveResponse
import org.openapitools.server.model.DeleteOffersRequest
import org.openapitools.server.model.DeleteOffersResponse
import org.openapitools.server.model.GetOfferMappingsRequest
import org.openapitools.server.model.GetOfferMappingsResponse
import org.openapitools.server.model.GetSuggestedOfferMappingsRequest
import org.openapitools.server.model.GetSuggestedOfferMappingsResponse
import org.openapitools.server.model.UpdateOfferMappingsRequest
import org.openapitools.server.model.UpdateOfferMappingsResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class BusinessOfferMappingsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "BusinessOfferMappingsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val addOffersToArchiveOperation = (apiOperation[AddOffersToArchiveResponse]("addOffersToArchive")
    summary "Добавление товаров в архив"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[AddOffersToArchiveRequest]("addOffersToArchiveRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/archive", operation(addOffersToArchiveOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("addOffersToArchiveRequest: " + addOffersToArchiveRequest)
  }

  

  val deleteOffersOperation = (apiOperation[DeleteOffersResponse]("deleteOffers")
    summary "Удаление товаров из каталога"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteOffersRequest]("deleteOffersRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/delete", operation(deleteOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteOffersRequest: " + deleteOffersRequest)
  }

  

  val deleteOffersFromArchiveOperation = (apiOperation[DeleteOffersFromArchiveResponse]("deleteOffersFromArchive")
    summary "Удаление товаров из архива"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeleteOffersFromArchiveRequest]("deleteOffersFromArchiveRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/unarchive", operation(deleteOffersFromArchiveOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deleteOffersFromArchiveRequest: " + deleteOffersFromArchiveRequest)
  }

  

  val getOfferMappingsOperation = (apiOperation[GetOfferMappingsResponse]("getOfferMappings")
    summary "Информация о товарах в каталоге"
    parameters(pathParam[Long]("businessId").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional, bodyParam[GetOfferMappingsRequest]("getOfferMappingsRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-mappings", operation(getOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
    //println("getOfferMappingsRequest: " + getOfferMappingsRequest)
  }

  

  val getSuggestedOfferMappingsOperation = (apiOperation[GetSuggestedOfferMappingsResponse]("getSuggestedOfferMappings")
    summary "Просмотр карточек на Маркете, которые подходят вашим товарам"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetSuggestedOfferMappingsRequest]("getSuggestedOfferMappingsRequest").description("").optional)
  )

  post("/businesses/:businessId/offer-mappings/suggestions", operation(getSuggestedOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getSuggestedOfferMappingsRequest: " + getSuggestedOfferMappingsRequest)
  }

  

  val updateOfferMappingsOperation = (apiOperation[UpdateOfferMappingsResponse]("updateOfferMappings")
    summary "Добавление товаров в каталог и изменение информации о них"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdateOfferMappingsRequest]("updateOfferMappingsRequest").description(""))
  )

  post("/businesses/:businessId/offer-mappings/update", operation(updateOfferMappingsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updateOfferMappingsRequest: " + updateOfferMappingsRequest)
  }

}
