/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.DeletePromoOffersRequest
import org.openapitools.server.model.DeletePromoOffersResponse
import org.openapitools.server.model.GetPromoOffersRequest
import org.openapitools.server.model.GetPromoOffersResponse
import org.openapitools.server.model.GetPromosRequest
import org.openapitools.server.model.GetPromosResponse
import org.openapitools.server.model.UpdatePromoOffersRequest
import org.openapitools.server.model.UpdatePromoOffersResponse

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class PromosApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "PromosApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deletePromoOffersOperation = (apiOperation[DeletePromoOffersResponse]("deletePromoOffers")
    summary "Удаление товаров из акции"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[DeletePromoOffersRequest]("deletePromoOffersRequest").description(""))
  )

  post("/businesses/:businessId/promos/offers/delete", operation(deletePromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("deletePromoOffersRequest: " + deletePromoOffersRequest)
  }

  

  val getPromoOffersOperation = (apiOperation[GetPromoOffersResponse]("getPromoOffers")
    summary "Получение списка товаров, которые участвуют или могут участвовать в акции"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetPromoOffersRequest]("getPromoOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/promos/offers", operation(getPromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getPromoOffersRequest: " + getPromoOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getPromosOperation = (apiOperation[GetPromosResponse]("getPromos")
    summary "Получение списка акций"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetPromosRequest]("getPromosRequest").description("").optional)
  )

  post("/businesses/:businessId/promos", operation(getPromosOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getPromosRequest: " + getPromosRequest)
  }

  

  val updatePromoOffersOperation = (apiOperation[UpdatePromoOffersResponse]("updatePromoOffers")
    summary "Добавление товаров в акцию или изменение их цен"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[UpdatePromoOffersRequest]("updatePromoOffersRequest").description(""))
  )

  post("/businesses/:businessId/promos/offers/update", operation(updatePromoOffersOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("updatePromoOffersRequest: " + updatePromoOffersRequest)
  }

}
