/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.ApiClientDataErrorResponse
import org.openapitools.server.model.ApiForbiddenErrorResponse
import org.openapitools.server.model.ApiLimitErrorResponse
import org.openapitools.server.model.ApiLockedErrorResponse
import org.openapitools.server.model.ApiNotFoundErrorResponse
import org.openapitools.server.model.ApiServerErrorResponse
import org.openapitools.server.model.ApiUnauthorizedErrorResponse
import org.openapitools.server.model.CurrencyType
import org.openapitools.server.model.DeleteCampaignOffersRequest
import org.openapitools.server.model.DeleteCampaignOffersResponse
import org.openapitools.server.model.EmptyApiResponse
import org.openapitools.server.model.GetAllOffersResponse
import org.openapitools.server.model.GetCampaignOffersRequest
import org.openapitools.server.model.GetCampaignOffersResponse
import org.openapitools.server.model.GetOfferRecommendationsRequest
import org.openapitools.server.model.GetOfferRecommendationsResponse
import org.openapitools.server.model.GetOffersResponse
import org.openapitools.server.model.UpdateCampaignOffersRequest

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class OffersApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "OffersApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val deleteCampaignOffersOperation = (apiOperation[DeleteCampaignOffersResponse]("deleteCampaignOffers")
    summary "Удаление товаров из ассортимента магазина"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[DeleteCampaignOffersRequest]("deleteCampaignOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/offers/delete", operation(deleteCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("deleteCampaignOffersRequest: " + deleteCampaignOffersRequest)
  }

  

  val getAllOffersOperation = (apiOperation[GetAllOffersResponse]("getAllOffers")
    summary "Все предложения магазина"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[Long]("feedId").description("").optional, queryParam[Int]("chunk").description("").optional)
  )

  get("/campaigns/:campaignId/offers/all", operation(getAllOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val feedId = params.getAs[Long]("feedId")

    //println("feedId: " + feedId)
            val chunk = params.getAs[Int]("chunk")

    //println("chunk: " + chunk)
  }

  

  val getCampaignOffersOperation = (apiOperation[GetCampaignOffersResponse]("getCampaignOffers")
    summary "Информация о товарах, которые размещены в заданном магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[GetCampaignOffersRequest]("getCampaignOffersRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/campaigns/:campaignId/offers", operation(getCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("getCampaignOffersRequest: " + getCampaignOffersRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getOfferRecommendationsOperation = (apiOperation[GetOfferRecommendationsResponse]("getOfferRecommendations")
    summary "Рекомендации Маркета, касающиеся цен"
    parameters(pathParam[Long]("businessId").description(""), bodyParam[GetOfferRecommendationsRequest]("getOfferRecommendationsRequest").description(""), queryParam[String]("pageToken").description("").optional, queryParam[Int]("limit").description("").optional)
  )

  post("/businesses/:businessId/offers/recommendations", operation(getOfferRecommendationsOperation)) {
    val businessId = params.getOrElse("businessId", halt(400))
    //println("businessId: " + businessId)
    //println("getOfferRecommendationsRequest: " + getOfferRecommendationsRequest)
            val pageToken = params.getAs[String]("pageToken")

    //println("pageToken: " + pageToken)
            val limit = params.getAs[Int]("limit")

    //println("limit: " + limit)
  }

  

  val getOffersOperation = (apiOperation[GetOffersResponse]("getOffers")
    summary "Предложения магазина"
    parameters(pathParam[Long]("campaignId").description(""), queryParam[String]("query").description("").optional, queryParam[Long]("feedId").description("").optional, queryParam[String]("shopCategoryId").description("").optional, queryParam[CurrencyType]("currency").description("").optional, queryParam[Boolean]("matched").description("").optional, queryParam[Int]("page").description("").optional.defaultValue(1), queryParam[Int]("pageSize").description("").optional)
  )

  get("/campaigns/:campaignId/offers", operation(getOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
            val query = params.getAs[String]("query")

    //println("query: " + query)
            val feedId = params.getAs[Long]("feedId")

    //println("feedId: " + feedId)
            val shopCategoryId = params.getAs[String]("shopCategoryId")

    //println("shopCategoryId: " + shopCategoryId)
            val currency = params.getAs[CurrencyType]("currency")

    //println("currency: " + currency)
            val matched = params.getAs[Boolean]("matched")

    //println("matched: " + matched)
            val page = params.getAs[Int]("page")

    //println("page: " + page)
            val pageSize = params.getAs[Int]("pageSize")

    //println("pageSize: " + pageSize)
  }

  

  val updateCampaignOffersOperation = (apiOperation[EmptyApiResponse]("updateCampaignOffers")
    summary "Изменение условий продажи товаров в магазине"
    parameters(pathParam[Long]("campaignId").description(""), bodyParam[UpdateCampaignOffersRequest]("updateCampaignOffersRequest").description(""))
  )

  post("/campaigns/:campaignId/offers/update", operation(updateCampaignOffersOperation)) {
    val campaignId = params.getOrElse("campaignId", halt(400))
    //println("campaignId: " + campaignId)
    //println("updateCampaignOffersRequest: " + updateCampaignOffersRequest)
  }

}
