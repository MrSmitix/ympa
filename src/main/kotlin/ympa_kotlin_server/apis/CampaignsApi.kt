/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.GetCampaignLoginsResponse
import ympa_kotlin_server.models.GetCampaignRegionResponse
import ympa_kotlin_server.models.GetCampaignResponse
import ympa_kotlin_server.models.GetCampaignSettingsResponse
import ympa_kotlin_server.models.GetCampaignsResponse

fun Route.CampaignsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    get<Paths.getCampaign> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaign" : {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignLogins> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "logins" : [ "logins", "logins" ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignRegion> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "region" : {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignSettings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "settings" : {
                "showInPremium" : true,
                "showInContext" : true,
                "localRegion" : {
                  "delivery" : {
                    "schedule" : {
                      "customWorkingDays" : [ "23-09-2022", "23-09-2022" ],
                      "period" : {
                        "fromDate" : "23-09-2022",
                        "toDate" : "23-09-2022"
                      },
                      "customHolidays" : [ "23-09-2022", "23-09-2022" ],
                      "weeklyHolidays" : [ 1, 1 ],
                      "availableOnHolidays" : true,
                      "totalHolidays" : [ "23-09-2022", "23-09-2022" ]
                    }
                  },
                  "name" : "name",
                  "id" : 6,
                  "type" : "OTHER",
                  "deliveryOptionsSource" : "WEB"
                },
                "countryRegion" : 0,
                "shopName" : "shopName",
                "useOpenStat" : true
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaigns> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaigns" : [ {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }, {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              } ],
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignsByLogin> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaigns" : [ {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }, {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              } ],
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
