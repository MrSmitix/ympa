/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.ConfirmShipmentRequest
import ympa_kotlin_server.models.EmptyApiResponse
import ympa_kotlin_server.models.GetShipmentOrdersInfoResponse
import ympa_kotlin_server.models.GetShipmentResponse
import ympa_kotlin_server.models.SearchShipmentsRequest
import ympa_kotlin_server.models.SearchShipmentsResponse
import ympa_kotlin_server.models.SetShipmentPalletsCountRequest
import ympa_kotlin_server.models.ShipmentPalletLabelPageFormatType
import ympa_kotlin_server.models.TransferOrdersFromShipmentRequest

fun Route.ShipmentsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    post<Paths.confirmShipment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentAct> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentDiscrepancyAct> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentInboundAct> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentPalletLabels> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentReceptionTransferAct> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.downloadShipmentTransportationWaybill> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getShipment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "deliveryService" : {
                  "name" : "name",
                  "id" : 1
                },
                "availableActions" : [ "CONFIRM", "CONFIRM" ],
                "draftCount" : 7,
                "plannedCount" : 9,
                "currentStatus" : {
                  "description" : "description",
                  "updateTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "OUTBOUND_CREATED"
                },
                "planIntervalTo" : "2000-01-23T04:56:07.000+00:00",
                "externalId" : "externalId",
                "warehouse" : {
                  "address" : "address",
                  "name" : "name",
                  "id" : 6
                },
                "shipmentType" : "IMPORT",
                "planIntervalFrom" : "2000-01-23T04:56:07.000+00:00",
                "warehouseTo" : {
                  "address" : "address",
                  "name" : "name",
                  "id" : 6
                },
                "factCount" : 3,
                "palletsCount" : {
                  "fact" : 5,
                  "planned" : 5
                },
                "id" : 0,
                "orderIds" : [ 2, 2 ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getShipmentOrdersInfo> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "orderIdsWithLabels" : [ 0, 0 ],
                "orderIdsWithoutLabels" : [ 6, 6 ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.searchShipments> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                },
                "shipments" : [ {
                  "deliveryService" : {
                    "name" : "name",
                    "id" : 1
                  },
                  "draftCount" : 1,
                  "plannedCount" : 5,
                  "planIntervalTo" : "2000-01-23T04:56:07.000+00:00",
                  "externalId" : "externalId",
                  "warehouse" : {
                    "address" : "address",
                    "name" : "name",
                    "id" : 6
                  },
                  "shipmentType" : "IMPORT",
                  "planIntervalFrom" : "2000-01-23T04:56:07.000+00:00",
                  "statusDescription" : "statusDescription",
                  "warehouseTo" : {
                    "address" : "address",
                    "name" : "name",
                    "id" : 6
                  },
                  "factCount" : 5,
                  "palletsCount" : {
                    "fact" : 5,
                    "planned" : 5
                  },
                  "id" : 0,
                  "orderIds" : [ 6, 6 ],
                  "statusUpdateTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "OUTBOUND_CREATED"
                }, {
                  "deliveryService" : {
                    "name" : "name",
                    "id" : 1
                  },
                  "draftCount" : 1,
                  "plannedCount" : 5,
                  "planIntervalTo" : "2000-01-23T04:56:07.000+00:00",
                  "externalId" : "externalId",
                  "warehouse" : {
                    "address" : "address",
                    "name" : "name",
                    "id" : 6
                  },
                  "shipmentType" : "IMPORT",
                  "planIntervalFrom" : "2000-01-23T04:56:07.000+00:00",
                  "statusDescription" : "statusDescription",
                  "warehouseTo" : {
                    "address" : "address",
                    "name" : "name",
                    "id" : 6
                  },
                  "factCount" : 5,
                  "palletsCount" : {
                    "fact" : 5,
                    "planned" : 5
                  },
                  "id" : 0,
                  "orderIds" : [ 6, 6 ],
                  "statusUpdateTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "OUTBOUND_CREATED"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.setShipmentPalletsCount> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.transferOrdersFromShipment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
