/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.DeletePromoOffersRequest
import ympa_kotlin_server.models.DeletePromoOffersResponse
import ympa_kotlin_server.models.GetPromoOffersRequest
import ympa_kotlin_server.models.GetPromoOffersResponse
import ympa_kotlin_server.models.GetPromosRequest
import ympa_kotlin_server.models.GetPromosResponse
import ympa_kotlin_server.models.UpdatePromoOffersRequest
import ympa_kotlin_server.models.UpdatePromoOffersResponse

fun Route.PromosApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    post<Paths.deletePromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "rejectedOffers" : [ {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                }, {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getPromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "offerId" : "offerId",
                  "params" : {
                    "discountParams" : {
                      "promoPrice" : 6,
                      "maxPromoPrice" : 1,
                      "price" : 0
                    },
                    "promocodeParams" : {
                      "maxPrice" : 5
                    }
                  },
                  "status" : "AUTO",
                  "autoParticipatingDetails" : {
                    "campaignIds" : [ 5, 5 ]
                  }
                }, {
                  "offerId" : "offerId",
                  "params" : {
                    "discountParams" : {
                      "promoPrice" : 6,
                      "maxPromoPrice" : 1,
                      "price" : 0
                    },
                    "promocodeParams" : {
                      "maxPrice" : 5
                    }
                  },
                  "status" : "AUTO",
                  "autoParticipatingDetails" : {
                    "campaignIds" : [ 5, 5 ]
                  }
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getPromos> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "promos" : [ {
                  "period" : {
                    "dateTimeFrom" : "2000-01-23T04:56:07.000+00:00",
                    "dateTimeTo" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "channels" : [ "{}", "{}" ],
                  "mechanicsInfo" : {
                    "promocodeInfo" : {
                      "promocode" : "promocode",
                      "discount" : 1
                    },
                    "type" : "DIRECT_DISCOUNT"
                  },
                  "bestsellerInfo" : {
                    "bestseller" : true,
                    "entryDeadline" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "name" : "name",
                  "participating" : true,
                  "id" : "id",
                  "constraints" : {
                    "warehouseIds" : [ 5, 5 ]
                  },
                  "assortmentInfo" : {
                    "activeOffers" : 0,
                    "processing" : true,
                    "potentialOffers" : 6
                  }
                }, {
                  "period" : {
                    "dateTimeFrom" : "2000-01-23T04:56:07.000+00:00",
                    "dateTimeTo" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "channels" : [ "{}", "{}" ],
                  "mechanicsInfo" : {
                    "promocodeInfo" : {
                      "promocode" : "promocode",
                      "discount" : 1
                    },
                    "type" : "DIRECT_DISCOUNT"
                  },
                  "bestsellerInfo" : {
                    "bestseller" : true,
                    "entryDeadline" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "name" : "name",
                  "participating" : true,
                  "id" : "id",
                  "constraints" : {
                    "warehouseIds" : [ 5, 5 ]
                  },
                  "assortmentInfo" : {
                    "activeOffers" : 0,
                    "processing" : true,
                    "potentialOffers" : 6
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updatePromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "rejectedOffers" : [ {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                }, {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                } ],
                "warningOffers" : [ {
                  "warnings" : [ {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  }, {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  } ],
                  "offerId" : "offerId"
                }, {
                  "warnings" : [ {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  }, {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  } ],
                  "offerId" : "offerId"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
