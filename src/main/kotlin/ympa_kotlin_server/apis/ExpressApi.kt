/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.AddHiddenOffersRequest
import ympa_kotlin_server.models.AddOffersToArchiveRequest
import ympa_kotlin_server.models.AddOffersToArchiveResponse
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiLockedErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.CalculateTariffsRequest
import ympa_kotlin_server.models.CalculateTariffsResponse
import ympa_kotlin_server.models.ConfirmPricesRequest
import ympa_kotlin_server.models.CreateChatRequest
import ympa_kotlin_server.models.CreateChatResponse
import ympa_kotlin_server.models.CurrencyType
import ympa_kotlin_server.models.DeleteCampaignOffersRequest
import ympa_kotlin_server.models.DeleteCampaignOffersResponse
import ympa_kotlin_server.models.DeleteGoodsFeedbackCommentRequest
import ympa_kotlin_server.models.DeleteHiddenOffersRequest
import ympa_kotlin_server.models.DeleteOffersFromArchiveRequest
import ympa_kotlin_server.models.DeleteOffersFromArchiveResponse
import ympa_kotlin_server.models.DeleteOffersRequest
import ympa_kotlin_server.models.DeleteOffersResponse
import ympa_kotlin_server.models.DeletePromoOffersRequest
import ympa_kotlin_server.models.DeletePromoOffersResponse
import ympa_kotlin_server.models.EmptyApiResponse
import ympa_kotlin_server.models.FeedIndexLogsStatusType
import ympa_kotlin_server.models.GenerateBoostConsolidatedRequest
import ympa_kotlin_server.models.GenerateCompetitorsPositionReportRequest
import ympa_kotlin_server.models.GenerateGoodsFeedbackRequest
import ympa_kotlin_server.models.GenerateGoodsRealizationReportRequest
import ympa_kotlin_server.models.GenerateMassOrderLabelsRequest
import ympa_kotlin_server.models.GeneratePricesReportRequest
import ympa_kotlin_server.models.GenerateReportResponse
import ympa_kotlin_server.models.GenerateShelfsStatisticsRequest
import ympa_kotlin_server.models.GenerateShowsSalesReportRequest
import ympa_kotlin_server.models.GenerateStocksOnWarehousesReportRequest
import ympa_kotlin_server.models.GenerateUnitedMarketplaceServicesReportRequest
import ympa_kotlin_server.models.GenerateUnitedNettingReportRequest
import ympa_kotlin_server.models.GenerateUnitedOrdersRequest
import ympa_kotlin_server.models.GetAllOffersResponse
import ympa_kotlin_server.models.GetBidsInfoRequest
import ympa_kotlin_server.models.GetBidsInfoResponse
import ympa_kotlin_server.models.GetBidsRecommendationsRequest
import ympa_kotlin_server.models.GetBidsRecommendationsResponse
import ympa_kotlin_server.models.GetBusinessBuyerInfoResponse
import ympa_kotlin_server.models.GetBusinessDocumentsInfoResponse
import ympa_kotlin_server.models.GetBusinessSettingsResponse
import ympa_kotlin_server.models.GetCampaignLoginsResponse
import ympa_kotlin_server.models.GetCampaignOffersRequest
import ympa_kotlin_server.models.GetCampaignOffersResponse
import ympa_kotlin_server.models.GetCampaignRegionResponse
import ympa_kotlin_server.models.GetCampaignResponse
import ympa_kotlin_server.models.GetCampaignSettingsResponse
import ympa_kotlin_server.models.GetCampaignsResponse
import ympa_kotlin_server.models.GetCategoriesMaxSaleQuantumRequest
import ympa_kotlin_server.models.GetCategoriesMaxSaleQuantumResponse
import ympa_kotlin_server.models.GetCategoriesRequest
import ympa_kotlin_server.models.GetCategoriesResponse
import ympa_kotlin_server.models.GetCategoryContentParametersResponse
import ympa_kotlin_server.models.GetChatHistoryRequest
import ympa_kotlin_server.models.GetChatHistoryResponse
import ympa_kotlin_server.models.GetChatsRequest
import ympa_kotlin_server.models.GetChatsResponse
import ympa_kotlin_server.models.GetDeliveryServicesResponse
import ympa_kotlin_server.models.GetFeedIndexLogsResponse
import ympa_kotlin_server.models.GetFeedResponse
import ympa_kotlin_server.models.GetFeedbackListResponse
import ympa_kotlin_server.models.GetFeedsResponse
import ympa_kotlin_server.models.GetGoodsFeedbackCommentsRequest
import ympa_kotlin_server.models.GetGoodsFeedbackCommentsResponse
import ympa_kotlin_server.models.GetGoodsFeedbackRequest
import ympa_kotlin_server.models.GetGoodsFeedbackResponse
import ympa_kotlin_server.models.GetGoodsStatsRequest
import ympa_kotlin_server.models.GetGoodsStatsResponse
import ympa_kotlin_server.models.GetHiddenOffersResponse
import ympa_kotlin_server.models.GetOfferCardsContentStatusRequest
import ympa_kotlin_server.models.GetOfferCardsContentStatusResponse
import ympa_kotlin_server.models.GetOfferMappingEntriesResponse
import ympa_kotlin_server.models.GetOfferMappingsRequest
import ympa_kotlin_server.models.GetOfferMappingsResponse
import ympa_kotlin_server.models.GetOfferRecommendationsRequest
import ympa_kotlin_server.models.GetOfferRecommendationsResponse
import ympa_kotlin_server.models.GetOffersResponse
import ympa_kotlin_server.models.GetOrderLabelsDataResponse
import ympa_kotlin_server.models.GetOrderResponse
import ympa_kotlin_server.models.GetOrdersResponse
import ympa_kotlin_server.models.GetOrdersStatsRequest
import ympa_kotlin_server.models.GetOrdersStatsResponse
import ympa_kotlin_server.models.GetPricesByOfferIdsRequest
import ympa_kotlin_server.models.GetPricesByOfferIdsResponse
import ympa_kotlin_server.models.GetPricesResponse
import ympa_kotlin_server.models.GetPromoOffersRequest
import ympa_kotlin_server.models.GetPromoOffersResponse
import ympa_kotlin_server.models.GetPromosRequest
import ympa_kotlin_server.models.GetPromosResponse
import ympa_kotlin_server.models.GetQualityRatingDetailsResponse
import ympa_kotlin_server.models.GetQualityRatingRequest
import ympa_kotlin_server.models.GetQualityRatingResponse
import ympa_kotlin_server.models.GetQuarantineOffersRequest
import ympa_kotlin_server.models.GetQuarantineOffersResponse
import ympa_kotlin_server.models.GetRegionWithChildrenResponse
import ympa_kotlin_server.models.GetRegionsResponse
import ympa_kotlin_server.models.GetReportInfoResponse
import ympa_kotlin_server.models.GetReturnResponse
import ympa_kotlin_server.models.GetReturnsResponse
import ympa_kotlin_server.models.GetSuggestedOfferMappingEntriesRequest
import ympa_kotlin_server.models.GetSuggestedOfferMappingEntriesResponse
import ympa_kotlin_server.models.GetSuggestedOfferMappingsRequest
import ympa_kotlin_server.models.GetSuggestedOfferMappingsResponse
import ympa_kotlin_server.models.GetWarehouseStocksRequest
import ympa_kotlin_server.models.GetWarehouseStocksResponse
import ympa_kotlin_server.models.GetWarehousesResponse
import ympa_kotlin_server.models.OfferAvailabilityStatusType
import ympa_kotlin_server.models.OfferMappingKindType
import ympa_kotlin_server.models.OfferProcessingStatusType
import ympa_kotlin_server.models.OrderBuyerType
import ympa_kotlin_server.models.OrderDeliveryDispatchType
import ympa_kotlin_server.models.OrderStatusType
import ympa_kotlin_server.models.OrderSubstatusType
import ympa_kotlin_server.models.PageFormatType
import ympa_kotlin_server.models.ProvideOrderItemIdentifiersRequest
import ympa_kotlin_server.models.ProvideOrderItemIdentifiersResponse
import ympa_kotlin_server.models.PutSkuBidsRequest
import ympa_kotlin_server.models.RefundStatusType
import ympa_kotlin_server.models.ReportFormatType
import ympa_kotlin_server.models.ReturnType
import ympa_kotlin_server.models.SendMessageToChatRequest
import ympa_kotlin_server.models.SetFeedParamsRequest
import ympa_kotlin_server.models.SetOrderBoxLayoutRequest
import ympa_kotlin_server.models.SetOrderBoxLayoutResponse
import ympa_kotlin_server.models.SetOrderShipmentBoxesRequest
import ympa_kotlin_server.models.SetOrderShipmentBoxesResponse
import ympa_kotlin_server.models.SkipGoodsFeedbackReactionRequest
import ympa_kotlin_server.models.SuggestPricesRequest
import ympa_kotlin_server.models.SuggestPricesResponse
import ympa_kotlin_server.models.UpdateBusinessPricesRequest
import ympa_kotlin_server.models.UpdateCampaignOffersRequest
import ympa_kotlin_server.models.UpdateGoodsFeedbackCommentRequest
import ympa_kotlin_server.models.UpdateGoodsFeedbackCommentResponse
import ympa_kotlin_server.models.UpdateOfferContentRequest
import ympa_kotlin_server.models.UpdateOfferContentResponse
import ympa_kotlin_server.models.UpdateOfferMappingEntryRequest
import ympa_kotlin_server.models.UpdateOfferMappingsRequest
import ympa_kotlin_server.models.UpdateOfferMappingsResponse
import ympa_kotlin_server.models.UpdateOrderItemRequest
import ympa_kotlin_server.models.UpdateOrderStatusRequest
import ympa_kotlin_server.models.UpdateOrderStatusResponse
import ympa_kotlin_server.models.UpdateOrderStatusesRequest
import ympa_kotlin_server.models.UpdateOrderStatusesResponse
import ympa_kotlin_server.models.UpdatePricesRequest
import ympa_kotlin_server.models.UpdatePromoOffersRequest
import ympa_kotlin_server.models.UpdatePromoOffersResponse
import ympa_kotlin_server.models.UpdateStocksRequest
import ympa_kotlin_server.models.VerifyOrderEacRequest
import ympa_kotlin_server.models.VerifyOrderEacResponse

fun Route.ExpressApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    post<Paths.addHiddenOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.addOffersToArchive> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "notArchivedOffers" : [ {
                  "offerId" : "offerId",
                  "error" : "OFFER_HAS_STOCKS"
                }, {
                  "offerId" : "offerId",
                  "error" : "OFFER_HAS_STOCKS"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.calculateTariffs> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "offer" : {
                    "quantity" : 1,
                    "price" : 0.6027456183070403,
                    "length" : 0.14658129805029452,
                    "width" : 0.5962133916683182,
                    "weight" : 0.23021358869347652,
                    "categoryId" : 0,
                    "height" : 0.5637376656633328
                  },
                  "tariffs" : [ {
                    "amount" : 9.301444243932576,
                    "type" : "AGENCY_COMMISSION",
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  }, {
                    "amount" : 9.301444243932576,
                    "type" : "AGENCY_COMMISSION",
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  } ]
                }, {
                  "offer" : {
                    "quantity" : 1,
                    "price" : 0.6027456183070403,
                    "length" : 0.14658129805029452,
                    "width" : 0.5962133916683182,
                    "weight" : 0.23021358869347652,
                    "categoryId" : 0,
                    "height" : 0.5637376656633328
                  },
                  "tariffs" : [ {
                    "amount" : 9.301444243932576,
                    "type" : "AGENCY_COMMISSION",
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  }, {
                    "amount" : 9.301444243932576,
                    "type" : "AGENCY_COMMISSION",
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  } ]
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.confirmBusinessPrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.confirmCampaignPrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.createChat> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "chatId" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deleteCampaignOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "notDeletedOfferIds" : [ null, null ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deleteGoodsFeedbackComment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deleteHiddenOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deleteOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "notDeletedOfferIds" : [ null, null ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deleteOffersFromArchive> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "notUnarchivedOfferIds" : [ null, null ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.deletePromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "rejectedOffers" : [ {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                }, {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateBoostConsolidatedReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateCompetitorsPositionReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateGoodsFeedbackReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateGoodsRealizationReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateMassOrderLabelsReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.generateOrderLabel> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.generateOrderLabels> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generatePricesReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateShelfsStatisticsReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateShowsSalesReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateStocksOnWarehousesReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateUnitedMarketplaceServicesReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateUnitedNettingReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.generateUnitedOrdersReport> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "reportId" : "reportId",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getAllOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "offers" : [ {
                "marketCategoryId" : 1,
                "preDiscountPrice" : 5.962133916683182,
                "shopCategoryId" : "shopCategoryId",
                "modelId" : 2,
                "fee" : 3.616076749251911,
                "discount" : 5,
                "url" : "url",
                "cbid" : 9.301444243932576,
                "blocked" : true,
                "feedId" : 6,
                "price" : 0.8008281904610115,
                "name" : "name",
                "currency" : "RUR",
                "id" : "id",
                "cutPrice" : true,
                "bid" : 7.061401241503109
              }, {
                "marketCategoryId" : 1,
                "preDiscountPrice" : 5.962133916683182,
                "shopCategoryId" : "shopCategoryId",
                "modelId" : 2,
                "fee" : 3.616076749251911,
                "discount" : 5,
                "url" : "url",
                "cbid" : 9.301444243932576,
                "blocked" : true,
                "feedId" : 6,
                "price" : 0.8008281904610115,
                "name" : "name",
                "currency" : "RUR",
                "id" : "id",
                "cutPrice" : true,
                "bid" : 7.061401241503109
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getBidsInfoForBusiness> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "bids" : [ {
                  "sku" : "sku",
                  "bid" : 570
                }, {
                  "sku" : "sku",
                  "bid" : 570
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getBidsRecommendations> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "recommendations" : [ {
                  "bidRecommendations" : [ {
                    "showPercent" : 8,
                    "bid" : 570
                  }, {
                    "showPercent" : 8,
                    "bid" : 570
                  } ],
                  "priceRecommendations" : [ {
                    "campaignId" : 6,
                    "price" : 1.1465812980502945
                  }, {
                    "campaignId" : 6,
                    "price" : 1.1465812980502945
                  } ],
                  "sku" : "sku",
                  "bid" : 570
                }, {
                  "bidRecommendations" : [ {
                    "showPercent" : 8,
                    "bid" : 570
                  }, {
                    "showPercent" : 8,
                    "bid" : 570
                  } ],
                  "priceRecommendations" : [ {
                    "campaignId" : 6,
                    "price" : 1.1465812980502945
                  }, {
                    "campaignId" : 6,
                    "price" : 1.1465812980502945
                  } ],
                  "sku" : "sku",
                  "bid" : 570
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getBusinessQuarantineOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "verdicts" : [ {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  }, {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  } ],
                  "offerId" : "offerId",
                  "currentPrice" : {
                    "value" : 0.9301444243932576
                  },
                  "lastValidPrice" : {
                    "value" : 0.9301444243932576
                  }
                }, {
                  "verdicts" : [ {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  }, {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  } ],
                  "offerId" : "offerId",
                  "currentPrice" : {
                    "value" : 0.9301444243932576
                  },
                  "lastValidPrice" : {
                    "value" : 0.9301444243932576
                  }
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getBusinessSettings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "settings" : {
                  "currency" : "RUR",
                  "onlyDefaultPrice" : true
                },
                "info" : {
                  "name" : "name",
                  "id" : 0
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaign> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaign" : {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignLogins> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "logins" : [ "logins", "logins" ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getCampaignOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "campaignPrice" : {
                    "vat" : 5,
                    "discountBase" : 5.962133916683182,
                    "currencyId" : "RUR",
                    "value" : 1.4658129805029452,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "basicPrice" : {
                    "discountBase" : 0.23021358869347652,
                    "currencyId" : "RUR",
                    "value" : 0.5637376656633328,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "available" : true,
                  "offerId" : "offerId",
                  "quantum" : {
                    "minQuantity" : 1,
                    "stepQuantity" : 60
                  },
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "status" : "PUBLISHED"
                }, {
                  "campaignPrice" : {
                    "vat" : 5,
                    "discountBase" : 5.962133916683182,
                    "currencyId" : "RUR",
                    "value" : 1.4658129805029452,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "basicPrice" : {
                    "discountBase" : 0.23021358869347652,
                    "currencyId" : "RUR",
                    "value" : 0.5637376656633328,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "available" : true,
                  "offerId" : "offerId",
                  "quantum" : {
                    "minQuantity" : 1,
                    "stepQuantity" : 60
                  },
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "status" : "PUBLISHED"
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getCampaignQuarantineOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "verdicts" : [ {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  }, {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  } ],
                  "offerId" : "offerId",
                  "currentPrice" : {
                    "value" : 0.9301444243932576
                  },
                  "lastValidPrice" : {
                    "value" : 0.9301444243932576
                  }
                }, {
                  "verdicts" : [ {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  }, {
                    "type" : "PRICE_CHANGE",
                    "params" : [ {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    }, {
                      "name" : "CURRENT_PRICE",
                      "value" : "value"
                    } ]
                  } ],
                  "offerId" : "offerId",
                  "currentPrice" : {
                    "value" : 0.9301444243932576
                  },
                  "lastValidPrice" : {
                    "value" : 0.9301444243932576
                  }
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignRegion> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "region" : {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignSettings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "settings" : {
                "showInPremium" : true,
                "showInContext" : true,
                "localRegion" : {
                  "delivery" : {
                    "schedule" : {
                      "customWorkingDays" : [ "23-09-2022", "23-09-2022" ],
                      "period" : {
                        "fromDate" : "23-09-2022",
                        "toDate" : "23-09-2022"
                      },
                      "customHolidays" : [ "23-09-2022", "23-09-2022" ],
                      "weeklyHolidays" : [ 1, 1 ],
                      "availableOnHolidays" : true,
                      "totalHolidays" : [ "23-09-2022", "23-09-2022" ]
                    }
                  },
                  "name" : "name",
                  "id" : 6,
                  "type" : "OTHER",
                  "deliveryOptionsSource" : "WEB"
                },
                "countryRegion" : 0,
                "shopName" : "shopName",
                "useOpenStat" : true
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaigns> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaigns" : [ {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }, {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              } ],
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getCampaignsByLogin> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "campaigns" : [ {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              }, {
                "clientId" : 6,
                "business" : {
                  "name" : "name",
                  "id" : 0
                },
                "domain" : "domain",
                "placementType" : "FBS",
                "id" : 0
              } ],
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getCategoriesMaxSaleQuantum> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "results" : [ {
                "maxSaleQuantum" : 6,
                "name" : "name",
                "id" : 0
              }, {
                "maxSaleQuantum" : 6,
                "name" : "name",
                "id" : 0
              } ],
              "errors" : [ {
                "type" : "UNKNOWN_CATEGORY",
                "categoryId" : 1
              }, {
                "type" : "UNKNOWN_CATEGORY",
                "categoryId" : 1
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getCategoriesTree> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getCategoryContentParameters> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "parameters" : [ {
                  "values" : [ {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  }, {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  } ],
                  "recommendationTypes" : [ "HAS_VIDEO", "HAS_VIDEO" ],
                  "description" : "description",
                  "type" : "TEXT",
                  "constraints" : {
                    "minValue" : 2.3021358869347655,
                    "maxValue" : 7.061401241503109,
                    "maxLength" : 9
                  },
                  "required" : true,
                  "multivalue" : true,
                  "unit" : {
                    "defaultUnitId" : 1,
                    "units" : [ {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    }, {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    } ]
                  },
                  "valueRestrictions" : [ {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  }, {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  } ],
                  "distinctive" : true,
                  "name" : "name",
                  "id" : 6,
                  "filtering" : true,
                  "allowCustomValues" : true
                }, {
                  "values" : [ {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  }, {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  } ],
                  "recommendationTypes" : [ "HAS_VIDEO", "HAS_VIDEO" ],
                  "description" : "description",
                  "type" : "TEXT",
                  "constraints" : {
                    "minValue" : 2.3021358869347655,
                    "maxValue" : 7.061401241503109,
                    "maxLength" : 9
                  },
                  "required" : true,
                  "multivalue" : true,
                  "unit" : {
                    "defaultUnitId" : 1,
                    "units" : [ {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    }, {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    } ]
                  },
                  "valueRestrictions" : [ {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  }, {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  } ],
                  "distinctive" : true,
                  "name" : "name",
                  "id" : 6,
                  "filtering" : true,
                  "allowCustomValues" : true
                } ],
                "categoryId" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getChatHistory> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "orderId" : 0,
                "messages" : [ {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "sender" : "PARTNER",
                  "payload" : [ {
                    "size" : 1,
                    "name" : "name",
                    "url" : "url"
                  }, {
                    "size" : 1,
                    "name" : "name",
                    "url" : "url"
                  } ],
                  "messageId" : 6,
                  "message" : "message"
                }, {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "sender" : "PARTNER",
                  "payload" : [ {
                    "size" : 1,
                    "name" : "name",
                    "url" : "url"
                  }, {
                    "size" : 1,
                    "name" : "name",
                    "url" : "url"
                  } ],
                  "messageId" : 6,
                  "message" : "message"
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getChats> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "chats" : [ {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "chatId" : 0,
                  "orderId" : 6,
                  "type" : "CHAT",
                  "status" : "NEW",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                }, {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "chatId" : 0,
                  "orderId" : 6,
                  "type" : "CHAT",
                  "status" : "NEW",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getDeliveryServices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "deliveryService" : [ {
                  "name" : "name",
                  "id" : 0
                }, {
                  "name" : "name",
                  "id" : 0
                } ]
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeed> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "feed" : {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeedIndexLogs> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "feed" : {
                  "id" : 0
                },
                "total" : 2,
                "indexLogRecords" : [ {
                  "offers" : {
                    "rejectedCount" : 5,
                    "totalCount" : 5
                  },
                  "fileTime" : "2000-01-23T04:56:07.000+00:00",
                  "generationId" : 6,
                  "indexType" : "DIFF",
                  "publishedTime" : "2000-01-23T04:56:07.000+00:00",
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 1
                  },
                  "downloadTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "ERROR"
                }, {
                  "offers" : {
                    "rejectedCount" : 5,
                    "totalCount" : 5
                  },
                  "fileTime" : "2000-01-23T04:56:07.000+00:00",
                  "generationId" : 6,
                  "indexType" : "DIFF",
                  "publishedTime" : "2000-01-23T04:56:07.000+00:00",
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 1
                  },
                  "downloadTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "ERROR"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeedbackAndCommentUpdates> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                },
                "feedbackList" : [ {
                  "comments" : [ {
                    "createdAt" : "2000-01-23T04:56:07.000+00:00",
                    "children" : [ null, null ],
                    "author" : {
                      "name" : "name",
                      "type" : "USER"
                    },
                    "id" : 6,
                    "body" : "body",
                    "parentId" : 1,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  }, {
                    "createdAt" : "2000-01-23T04:56:07.000+00:00",
                    "children" : [ null, null ],
                    "author" : {
                      "name" : "name",
                      "type" : "USER"
                    },
                    "id" : 6,
                    "body" : "body",
                    "parentId" : 1,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  } ],
                  "shop" : {
                    "name" : "name"
                  },
                  "author" : {
                    "name" : "name",
                    "region" : {
                      "children" : [ null, null ],
                      "name" : "name",
                      "id" : 0,
                      "type" : "OTHER"
                    }
                  },
                  "verified" : true,
                  "recommend" : true,
                  "grades" : {
                    "average" : 5.962133916683182,
                    "agreeCount" : 5,
                    "rejectCount" : 2,
                    "factors" : [ {
                      "description" : "description",
                      "id" : 7,
                      "title" : "title",
                      "value" : 9
                    }, {
                      "description" : "description",
                      "id" : 7,
                      "title" : "title",
                      "value" : 9
                    } ]
                  },
                  "pro" : "pro",
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "id" : 0,
                  "text" : "text",
                  "state" : "LAST",
                  "contra" : "contra",
                  "resolved" : true,
                  "order" : {
                    "delivery" : "DELIVERY",
                    "shopOrderId" : "shopOrderId"
                  }
                }, {
                  "comments" : [ {
                    "createdAt" : "2000-01-23T04:56:07.000+00:00",
                    "children" : [ null, null ],
                    "author" : {
                      "name" : "name",
                      "type" : "USER"
                    },
                    "id" : 6,
                    "body" : "body",
                    "parentId" : 1,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  }, {
                    "createdAt" : "2000-01-23T04:56:07.000+00:00",
                    "children" : [ null, null ],
                    "author" : {
                      "name" : "name",
                      "type" : "USER"
                    },
                    "id" : 6,
                    "body" : "body",
                    "parentId" : 1,
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  } ],
                  "shop" : {
                    "name" : "name"
                  },
                  "author" : {
                    "name" : "name",
                    "region" : {
                      "children" : [ null, null ],
                      "name" : "name",
                      "id" : 0,
                      "type" : "OTHER"
                    }
                  },
                  "verified" : true,
                  "recommend" : true,
                  "grades" : {
                    "average" : 5.962133916683182,
                    "agreeCount" : 5,
                    "rejectCount" : 2,
                    "factors" : [ {
                      "description" : "description",
                      "id" : 7,
                      "title" : "title",
                      "value" : 9
                    }, {
                      "description" : "description",
                      "id" : 7,
                      "title" : "title",
                      "value" : 9
                    } ]
                  },
                  "pro" : "pro",
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "id" : 0,
                  "text" : "text",
                  "state" : "LAST",
                  "contra" : "contra",
                  "resolved" : true,
                  "order" : {
                    "delivery" : "DELIVERY",
                    "shopOrderId" : "shopOrderId"
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeeds> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "feeds" : [ {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              }, {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getGoodsFeedbackComments> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "comments" : [ {
                  "author" : {
                    "name" : "name",
                    "type" : "USER"
                  },
                  "id" : 0,
                  "text" : "text",
                  "canModify" : true,
                  "parentId" : 6,
                  "status" : "PUBLISHED"
                }, {
                  "author" : {
                    "name" : "name",
                    "type" : "USER"
                  },
                  "id" : 0,
                  "text" : "text",
                  "canModify" : true,
                  "parentId" : 6,
                  "status" : "PUBLISHED"
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getGoodsFeedbacks> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "feedbacks" : [ {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "needReaction" : true,
                  "identifiers" : {
                    "orderId" : 6,
                    "modelId" : 1
                  },
                  "author" : "author",
                  "feedbackId" : 0,
                  "description" : {
                    "advantages" : "advantages",
                    "disadvantages" : "disadvantages",
                    "comment" : "comment"
                  },
                  "media" : {
                    "videos" : [ "videos", "videos" ],
                    "photos" : [ "photos", "photos" ]
                  },
                  "statistics" : {
                    "commentsCount" : 5,
                    "rating" : 3,
                    "paidAmount" : 2,
                    "recommended" : true
                  }
                }, {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "needReaction" : true,
                  "identifiers" : {
                    "orderId" : 6,
                    "modelId" : 1
                  },
                  "author" : "author",
                  "feedbackId" : 0,
                  "description" : {
                    "advantages" : "advantages",
                    "disadvantages" : "disadvantages",
                    "comment" : "comment"
                  },
                  "media" : {
                    "videos" : [ "videos", "videos" ],
                    "photos" : [ "photos", "photos" ]
                  },
                  "statistics" : {
                    "commentsCount" : 5,
                    "rating" : 3,
                    "paidAmount" : 2,
                    "recommended" : true
                  }
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getGoodsStats> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "shopSkus" : [ {
                  "shopSku" : "shopSku",
                  "marketSku" : 0,
                  "price" : 6.027456183070403,
                  "name" : "name",
                  "warehouses" : [ {
                    "name" : "name",
                    "id" : 9,
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ]
                  }, {
                    "name" : "name",
                    "id" : 9,
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ]
                  } ],
                  "weightDimensions" : {
                    "length" : 5.962133916683182,
                    "width" : 5.637376656633329,
                    "weight" : 7.061401241503109,
                    "height" : 2.3021358869347655
                  },
                  "categoryName" : "categoryName",
                  "categoryId" : 1,
                  "pictures" : [ "pictures", "pictures" ],
                  "tariffs" : [ {
                    "amount" : 2.027123023002322,
                    "type" : "AGENCY_COMMISSION",
                    "percent" : 3.616076749251911,
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  }, {
                    "amount" : 2.027123023002322,
                    "type" : "AGENCY_COMMISSION",
                    "percent" : 3.616076749251911,
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  } ]
                }, {
                  "shopSku" : "shopSku",
                  "marketSku" : 0,
                  "price" : 6.027456183070403,
                  "name" : "name",
                  "warehouses" : [ {
                    "name" : "name",
                    "id" : 9,
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ]
                  }, {
                    "name" : "name",
                    "id" : 9,
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ]
                  } ],
                  "weightDimensions" : {
                    "length" : 5.962133916683182,
                    "width" : 5.637376656633329,
                    "weight" : 7.061401241503109,
                    "height" : 2.3021358869347655
                  },
                  "categoryName" : "categoryName",
                  "categoryId" : 1,
                  "pictures" : [ "pictures", "pictures" ],
                  "tariffs" : [ {
                    "amount" : 2.027123023002322,
                    "type" : "AGENCY_COMMISSION",
                    "percent" : 3.616076749251911,
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  }, {
                    "amount" : 2.027123023002322,
                    "type" : "AGENCY_COMMISSION",
                    "percent" : 3.616076749251911,
                    "parameters" : [ {
                      "name" : "name",
                      "value" : "value"
                    }, {
                      "name" : "name",
                      "value" : "value"
                    } ]
                  } ]
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getHiddenOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "hiddenOffers" : [ {
                  "offerId" : "offerId"
                }, {
                  "offerId" : "offerId"
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOfferCardsContentStatus> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offerCards" : [ {
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "offerId" : "offerId",
                  "contentRating" : 0,
                  "recommendations" : [ {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  }, {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  } ],
                  "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "parameterValues" : [ {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  }, {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  } ]
                }, {
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "offerId" : "offerId",
                  "contentRating" : 0,
                  "recommendations" : [ {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  }, {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  } ],
                  "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "parameterValues" : [ {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  }, {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  } ]
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOfferMappingEntries> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offerMappingEntries" : [ {
                  "offer" : {
                    "manufacturerCountries" : [ "manufacturerCountries", "manufacturerCountries" ],
                    "certificate" : "certificate",
                    "description" : "description",
                    "availability" : "ACTIVE",
                    "pictures" : [ "pictures", "pictures" ],
                    "vendorCode" : "VNDR-0005A",
                    "manufacturer" : "manufacturer",
                    "urls" : [ "urls", "urls" ],
                    "deliveryDurationDays" : 5,
                    "feedId" : 0,
                    "vendor" : "LEVENHUK",
                    "price" : 2.027123023002322,
                    "transportUnitSize" : 1,
                    "id" : "id",
                    "lifeTime" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "shelfLife" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "supplyScheduleDays" : [ "MONDAY", "MONDAY" ],
                    "lifeTimeDays" : 9,
                    "quantumOfSupply" : 5,
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "customsCommodityCodes" : [ "customsCommodityCodes", "customsCommodityCodes" ],
                    "processingState" : {
                      "notes" : [ {
                        "payload" : "payload",
                        "type" : "ASSORTMENT"
                      }, {
                        "payload" : "payload",
                        "type" : "ASSORTMENT"
                      } ],
                      "status" : "UNKNOWN"
                    },
                    "shopSku" : "shopSku",
                    "boxCount" : 2,
                    "minShipment" : 6,
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "shelfLifeDays" : 7,
                    "guaranteePeriod" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "weightDimensions" : {
                      "length" : 65.55,
                      "width" : 50.7,
                      "weight" : 1.001,
                      "height" : 20
                    },
                    "category" : "category",
                    "guaranteePeriodDays" : 3
                  },
                  "mapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  },
                  "awaitingModerationMapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  },
                  "rejectedMapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  }
                }, {
                  "offer" : {
                    "manufacturerCountries" : [ "manufacturerCountries", "manufacturerCountries" ],
                    "certificate" : "certificate",
                    "description" : "description",
                    "availability" : "ACTIVE",
                    "pictures" : [ "pictures", "pictures" ],
                    "vendorCode" : "VNDR-0005A",
                    "manufacturer" : "manufacturer",
                    "urls" : [ "urls", "urls" ],
                    "deliveryDurationDays" : 5,
                    "feedId" : 0,
                    "vendor" : "LEVENHUK",
                    "price" : 2.027123023002322,
                    "transportUnitSize" : 1,
                    "id" : "id",
                    "lifeTime" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "shelfLife" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "supplyScheduleDays" : [ "MONDAY", "MONDAY" ],
                    "lifeTimeDays" : 9,
                    "quantumOfSupply" : 5,
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "customsCommodityCodes" : [ "customsCommodityCodes", "customsCommodityCodes" ],
                    "processingState" : {
                      "notes" : [ {
                        "payload" : "payload",
                        "type" : "ASSORTMENT"
                      }, {
                        "payload" : "payload",
                        "type" : "ASSORTMENT"
                      } ],
                      "status" : "UNKNOWN"
                    },
                    "shopSku" : "shopSku",
                    "boxCount" : 2,
                    "minShipment" : 6,
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "shelfLifeDays" : 7,
                    "guaranteePeriod" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "weightDimensions" : {
                      "length" : 65.55,
                      "width" : 50.7,
                      "weight" : 1.001,
                      "height" : 20
                    },
                    "category" : "category",
                    "guaranteePeriodDays" : 3
                  },
                  "mapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  },
                  "awaitingModerationMapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  },
                  "rejectedMapping" : {
                    "modelId" : 7,
                    "marketSku" : 4,
                    "categoryId" : 1
                  }
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOfferMappings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                },
                "offerMappings" : [ {
                  "offer" : {
                    "downloadable" : true,
                    "sellingPrograms" : [ {
                      "sellingProgram" : "FBY",
                      "status" : "FINE"
                    }, {
                      "sellingProgram" : "FBY",
                      "status" : "FINE"
                    } ],
                    "marketCategoryId" : 0,
                    "manufacturerCountries" : [ "Россия", "Россия" ],
                    "description" : "description",
                    "videos" : [ "videos", "videos", "videos", "videos", "videos" ],
                    "purchasePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "type" : "DEFAULT",
                    "pictures" : [ "pictures", "pictures" ],
                    "vendorCode" : "VNDR-0005A",
                    "archived" : true,
                    "campaigns" : [ {
                      "campaignId" : 9,
                      "status" : "PUBLISHED"
                    }, {
                      "campaignId" : 9,
                      "status" : "PUBLISHED"
                    } ],
                    "vendor" : "LEVENHUK",
                    "basicPrice" : {
                      "discountBase" : 0.23021358869347652,
                      "currencyId" : "RUR",
                      "value" : 0.5637376656633328,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "lifeTime" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "shelfLife" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "cofinancePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "params" : [ {
                      "name" : "Wi-Fi",
                      "value" : "есть"
                    }, {
                      "name" : "Wi-Fi",
                      "value" : "есть"
                    } ],
                    "tags" : [ "до 500 рублей", "до 500 рублей" ],
                    "condition" : {
                      "reason" : "reason",
                      "type" : "PREOWNED",
                      "quality" : "PERFECT"
                    },
                    "certificates" : [ "certificates", "certificates" ],
                    "boxCount" : 1,
                    "additionalExpenses" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "offerId" : "offerId",
                    "guaranteePeriod" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "weightDimensions" : {
                      "length" : 65.55,
                      "width" : 50.7,
                      "weight" : 1.001,
                      "height" : 20
                    },
                    "category" : "category",
                    "customsCommodityCode" : "8517610008",
                    "adult" : true,
                    "age" : {
                      "ageUnit" : "YEAR",
                      "value" : 0.5962133916683182
                    },
                    "manuals" : [ {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    } ]
                  },
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  }
                }, {
                  "offer" : {
                    "downloadable" : true,
                    "sellingPrograms" : [ {
                      "sellingProgram" : "FBY",
                      "status" : "FINE"
                    }, {
                      "sellingProgram" : "FBY",
                      "status" : "FINE"
                    } ],
                    "marketCategoryId" : 0,
                    "manufacturerCountries" : [ "Россия", "Россия" ],
                    "description" : "description",
                    "videos" : [ "videos", "videos", "videos", "videos", "videos" ],
                    "purchasePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "type" : "DEFAULT",
                    "pictures" : [ "pictures", "pictures" ],
                    "vendorCode" : "VNDR-0005A",
                    "archived" : true,
                    "campaigns" : [ {
                      "campaignId" : 9,
                      "status" : "PUBLISHED"
                    }, {
                      "campaignId" : 9,
                      "status" : "PUBLISHED"
                    } ],
                    "vendor" : "LEVENHUK",
                    "basicPrice" : {
                      "discountBase" : 0.23021358869347652,
                      "currencyId" : "RUR",
                      "value" : 0.5637376656633328,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "lifeTime" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "shelfLife" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "cofinancePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "params" : [ {
                      "name" : "Wi-Fi",
                      "value" : "есть"
                    }, {
                      "name" : "Wi-Fi",
                      "value" : "есть"
                    } ],
                    "tags" : [ "до 500 рублей", "до 500 рублей" ],
                    "condition" : {
                      "reason" : "reason",
                      "type" : "PREOWNED",
                      "quality" : "PERFECT"
                    },
                    "certificates" : [ "certificates", "certificates" ],
                    "boxCount" : 1,
                    "additionalExpenses" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    },
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "offerId" : "offerId",
                    "guaranteePeriod" : {
                      "timePeriod" : 6,
                      "comment" : "comment",
                      "timeUnit" : "HOUR"
                    },
                    "weightDimensions" : {
                      "length" : 65.55,
                      "width" : 50.7,
                      "weight" : 1.001,
                      "height" : 20
                    },
                    "category" : "category",
                    "customsCommodityCode" : "8517610008",
                    "adult" : true,
                    "age" : {
                      "ageUnit" : "YEAR",
                      "value" : 0.5962133916683182
                    },
                    "manuals" : [ {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    }, {
                      "title" : "title",
                      "url" : "url"
                    } ]
                  },
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOfferRecommendations> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                },
                "offerRecommendations" : [ {
                  "offer" : {
                    "shows" : 0,
                    "price" : {
                      "value" : 0.9301444243932576
                    },
                    "offerId" : "offerId",
                    "competitiveness" : "OPTIMAL",
                    "cofinancePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    }
                  },
                  "recommendation" : {
                    "recommendedCofinancePrice" : {
                      "value" : 0.9301444243932576
                    },
                    "offerId" : "offerId",
                    "competitivenessThresholds" : {
                      "optimalPrice" : {
                        "value" : 0.9301444243932576
                      },
                      "averagePrice" : {
                        "value" : 0.9301444243932576
                      }
                    }
                  }
                }, {
                  "offer" : {
                    "shows" : 0,
                    "price" : {
                      "value" : 0.9301444243932576
                    },
                    "offerId" : "offerId",
                    "competitiveness" : "OPTIMAL",
                    "cofinancePrice" : {
                      "value" : 0.7061401241503109,
                      "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                    }
                  },
                  "recommendation" : {
                    "recommendedCofinancePrice" : {
                      "value" : 0.9301444243932576
                    },
                    "offerId" : "offerId",
                    "competitivenessThresholds" : {
                      "optimalPrice" : {
                        "value" : 0.9301444243932576
                      },
                      "averagePrice" : {
                        "value" : 0.9301444243932576
                      }
                    }
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "offers" : [ {
                "marketCategoryId" : 1,
                "preDiscountPrice" : 5.962133916683182,
                "shopCategoryId" : "shopCategoryId",
                "modelId" : 2,
                "fee" : 3.616076749251911,
                "discount" : 5,
                "url" : "url",
                "cbid" : 9.301444243932576,
                "blocked" : true,
                "feedId" : 6,
                "price" : 0.8008281904610115,
                "name" : "name",
                "currency" : "RUR",
                "id" : "id",
                "cutPrice" : true,
                "bid" : 7.061401241503109
              }, {
                "marketCategoryId" : 1,
                "preDiscountPrice" : 5.962133916683182,
                "shopCategoryId" : "shopCategoryId",
                "modelId" : 2,
                "fee" : 3.616076749251911,
                "discount" : 5,
                "url" : "url",
                "cbid" : 9.301444243932576,
                "blocked" : true,
                "feedId" : 6,
                "price" : 0.8008281904610115,
                "name" : "name",
                "currency" : "RUR",
                "id" : "id",
                "cutPrice" : true,
                "bid" : 7.061401241503109
              } ],
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOrder> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "order" : {
                "delivery" : {
                  "dispatchType" : "UNKNOWN",
                  "address" : {
                    "country" : "country",
                    "city" : "city",
                    "postcode" : "postcode",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "house" : "house",
                    "subway" : "subway",
                    "phone" : "phone",
                    "street" : "street",
                    "district" : "district",
                    "recipient" : "recipient",
                    "entryphone" : "entryphone",
                    "block" : "block",
                    "entrance" : "entrance",
                    "floor" : "floor",
                    "apartment" : "apartment"
                  },
                  "liftType" : "NOT_NEEDED",
                  "deliveryServiceId" : 6,
                  "estimated" : true,
                  "dates" : {
                    "fromDate" : "23-09-2022",
                    "toDate" : "23-09-2022",
                    "fromTime" : "fromTime",
                    "toTime" : "toTime",
                    "realDeliveryDate" : "23-09-2022"
                  },
                  "type" : "DELIVERY",
                  "serviceName" : "serviceName",
                  "shipments" : [ {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  }, {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  }, {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  } ],
                  "courier" : {
                    "vehicleDescription" : "vehicleDescription",
                    "phone" : "phone",
                    "phoneExtension" : "phoneExtension",
                    "fullName" : "fullName",
                    "vehicleNumber" : "vehicleNumber"
                  },
                  "price" : 5.025004791520295,
                  "outletStorageLimitDate" : "23-09-2022",
                  "eacType" : "MERCHANT_TO_COURIER",
                  "liftPrice" : 8.762042012749001,
                  "eacCode" : "eacCode",
                  "id" : "id",
                  "region" : {
                    "children" : [ null, null ],
                    "name" : "name",
                    "id" : 0,
                    "type" : "OTHER"
                  },
                  "deliveryPartnerType" : "SHOP",
                  "outletCode" : "outletCode"
                },
                "notes" : "notes",
                "substatus" : "RESERVATION_EXPIRED",
                "deliveryTotal" : 1.4658129805029452,
                "buyerItemsTotalBeforeDiscount" : 2.3021358869347655,
                "creationDate" : "23-09-2022 09:12:41",
                "buyerItemsTotal" : 5.962133916683182,
                "paymentType" : "PREPAID",
                "buyer" : {
                  "lastName" : "lastName",
                  "firstName" : "firstName",
                  "middleName" : "middleName",
                  "id" : "id",
                  "type" : "PERSON"
                },
                "expiryDate" : "23-09-2022 09:12:41",
                "buyerTotalBeforeDiscount" : 7.061401241503109,
                "itemsTotal" : 6.027456183070403,
                "buyerTotal" : 5.637376656633329,
                "subsidies" : [ {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                }, {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                } ],
                "paymentMethod" : "CASH_ON_DELIVERY",
                "currency" : "RUR",
                "fake" : true,
                "id" : 0,
                "taxSystem" : "OSN",
                "cancelRequested" : true,
                "items" : [ {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                }, {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                } ],
                "status" : "PLACING",
                "updatedAt" : "23-09-2022 09:12:41"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOrderBusinessBuyerInfo> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "organizationName" : "organizationName",
                "organizationJurAddress" : "organizationJurAddress",
                "inn" : "inn",
                "kpp" : "kpp"
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOrderBusinessDocumentsInfo> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "sf" : {
                  "date" : "2000-01-23",
                  "number" : "number",
                  "status" : "READY"
                },
                "torgTwelve" : {
                  "date" : "2000-01-23",
                  "number" : "number",
                  "status" : "READY"
                },
                "upd" : {
                  "date" : "2000-01-23",
                  "number" : "number",
                  "status" : "READY"
                },
                "ukd" : {
                  "date" : "2000-01-23",
                  "number" : "number",
                  "status" : "READY"
                },
                "ksf" : {
                  "date" : "2000-01-23",
                  "number" : "number",
                  "status" : "READY"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOrderLabelsData> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "parcelBoxLabels" : [ {
                  "supplierName" : "supplierName",
                  "deliveryServiceId" : "deliveryServiceId",
                  "orderId" : 1,
                  "fulfilmentId" : "fulfilmentId",
                  "orderNum" : "orderNum",
                  "weight" : "weight",
                  "url" : "url",
                  "deliveryServiceName" : "deliveryServiceName",
                  "deliveryAddress" : "deliveryAddress",
                  "recipientName" : "recipientName",
                  "place" : "place",
                  "shipmentDate" : "shipmentDate",
                  "boxId" : 5
                }, {
                  "supplierName" : "supplierName",
                  "deliveryServiceId" : "deliveryServiceId",
                  "orderId" : 1,
                  "fulfilmentId" : "fulfilmentId",
                  "orderNum" : "orderNum",
                  "weight" : "weight",
                  "url" : "url",
                  "deliveryServiceName" : "deliveryServiceName",
                  "deliveryAddress" : "deliveryAddress",
                  "recipientName" : "recipientName",
                  "place" : "place",
                  "shipmentDate" : "shipmentDate",
                  "boxId" : 5
                } ],
                "orderId" : 0,
                "placesNumber" : 6,
                "url" : "url"
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOrders> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              },
              "orders" : [ {
                "delivery" : {
                  "dispatchType" : "UNKNOWN",
                  "address" : {
                    "country" : "country",
                    "city" : "city",
                    "postcode" : "postcode",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "house" : "house",
                    "subway" : "subway",
                    "phone" : "phone",
                    "street" : "street",
                    "district" : "district",
                    "recipient" : "recipient",
                    "entryphone" : "entryphone",
                    "block" : "block",
                    "entrance" : "entrance",
                    "floor" : "floor",
                    "apartment" : "apartment"
                  },
                  "liftType" : "NOT_NEEDED",
                  "deliveryServiceId" : 6,
                  "estimated" : true,
                  "dates" : {
                    "fromDate" : "23-09-2022",
                    "toDate" : "23-09-2022",
                    "fromTime" : "fromTime",
                    "toTime" : "toTime",
                    "realDeliveryDate" : "23-09-2022"
                  },
                  "type" : "DELIVERY",
                  "serviceName" : "serviceName",
                  "shipments" : [ {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  }, {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  }, {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  } ],
                  "courier" : {
                    "vehicleDescription" : "vehicleDescription",
                    "phone" : "phone",
                    "phoneExtension" : "phoneExtension",
                    "fullName" : "fullName",
                    "vehicleNumber" : "vehicleNumber"
                  },
                  "price" : 5.025004791520295,
                  "outletStorageLimitDate" : "23-09-2022",
                  "eacType" : "MERCHANT_TO_COURIER",
                  "liftPrice" : 8.762042012749001,
                  "eacCode" : "eacCode",
                  "id" : "id",
                  "region" : {
                    "children" : [ null, null ],
                    "name" : "name",
                    "id" : 0,
                    "type" : "OTHER"
                  },
                  "deliveryPartnerType" : "SHOP",
                  "outletCode" : "outletCode"
                },
                "notes" : "notes",
                "substatus" : "RESERVATION_EXPIRED",
                "deliveryTotal" : 1.4658129805029452,
                "buyerItemsTotalBeforeDiscount" : 2.3021358869347655,
                "creationDate" : "23-09-2022 09:12:41",
                "buyerItemsTotal" : 5.962133916683182,
                "paymentType" : "PREPAID",
                "buyer" : {
                  "lastName" : "lastName",
                  "firstName" : "firstName",
                  "middleName" : "middleName",
                  "id" : "id",
                  "type" : "PERSON"
                },
                "expiryDate" : "23-09-2022 09:12:41",
                "buyerTotalBeforeDiscount" : 7.061401241503109,
                "itemsTotal" : 6.027456183070403,
                "buyerTotal" : 5.637376656633329,
                "subsidies" : [ {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                }, {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                } ],
                "paymentMethod" : "CASH_ON_DELIVERY",
                "currency" : "RUR",
                "fake" : true,
                "id" : 0,
                "taxSystem" : "OSN",
                "cancelRequested" : true,
                "items" : [ {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                }, {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                } ],
                "status" : "PLACING",
                "updatedAt" : "23-09-2022 09:12:41"
              }, {
                "delivery" : {
                  "dispatchType" : "UNKNOWN",
                  "address" : {
                    "country" : "country",
                    "city" : "city",
                    "postcode" : "postcode",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "house" : "house",
                    "subway" : "subway",
                    "phone" : "phone",
                    "street" : "street",
                    "district" : "district",
                    "recipient" : "recipient",
                    "entryphone" : "entryphone",
                    "block" : "block",
                    "entrance" : "entrance",
                    "floor" : "floor",
                    "apartment" : "apartment"
                  },
                  "liftType" : "NOT_NEEDED",
                  "deliveryServiceId" : 6,
                  "estimated" : true,
                  "dates" : {
                    "fromDate" : "23-09-2022",
                    "toDate" : "23-09-2022",
                    "fromTime" : "fromTime",
                    "toTime" : "toTime",
                    "realDeliveryDate" : "23-09-2022"
                  },
                  "type" : "DELIVERY",
                  "serviceName" : "serviceName",
                  "shipments" : [ {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  }, {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  }, {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  } ],
                  "courier" : {
                    "vehicleDescription" : "vehicleDescription",
                    "phone" : "phone",
                    "phoneExtension" : "phoneExtension",
                    "fullName" : "fullName",
                    "vehicleNumber" : "vehicleNumber"
                  },
                  "price" : 5.025004791520295,
                  "outletStorageLimitDate" : "23-09-2022",
                  "eacType" : "MERCHANT_TO_COURIER",
                  "liftPrice" : 8.762042012749001,
                  "eacCode" : "eacCode",
                  "id" : "id",
                  "region" : {
                    "children" : [ null, null ],
                    "name" : "name",
                    "id" : 0,
                    "type" : "OTHER"
                  },
                  "deliveryPartnerType" : "SHOP",
                  "outletCode" : "outletCode"
                },
                "notes" : "notes",
                "substatus" : "RESERVATION_EXPIRED",
                "deliveryTotal" : 1.4658129805029452,
                "buyerItemsTotalBeforeDiscount" : 2.3021358869347655,
                "creationDate" : "23-09-2022 09:12:41",
                "buyerItemsTotal" : 5.962133916683182,
                "paymentType" : "PREPAID",
                "buyer" : {
                  "lastName" : "lastName",
                  "firstName" : "firstName",
                  "middleName" : "middleName",
                  "id" : "id",
                  "type" : "PERSON"
                },
                "expiryDate" : "23-09-2022 09:12:41",
                "buyerTotalBeforeDiscount" : 7.061401241503109,
                "itemsTotal" : 6.027456183070403,
                "buyerTotal" : 5.637376656633329,
                "subsidies" : [ {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                }, {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                } ],
                "paymentMethod" : "CASH_ON_DELIVERY",
                "currency" : "RUR",
                "fake" : true,
                "id" : 0,
                "taxSystem" : "OSN",
                "cancelRequested" : true,
                "items" : [ {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                }, {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                } ],
                "status" : "PLACING",
                "updatedAt" : "23-09-2022 09:12:41"
              } ],
              "paging" : {
                "nextPageToken" : "nextPageToken"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOrdersStats> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "orders" : [ {
                  "partnerOrderId" : "partnerOrderId",
                  "commissions" : [ {
                    "actual" : 1.2315135367772556,
                    "type" : "FEE"
                  }, {
                    "actual" : 1.2315135367772556,
                    "type" : "FEE"
                  } ],
                  "statusUpdateDate" : "2000-01-23T04:56:07.000+00:00",
                  "payments" : [ {
                    "date" : "2000-01-23",
                    "total" : 7.386281948385884,
                    "paymentOrder" : {
                      "date" : "2000-01-23",
                      "id" : "id"
                    },
                    "id" : "id",
                    "source" : "BUYER",
                    "type" : "PAYMENT"
                  }, {
                    "date" : "2000-01-23",
                    "total" : 7.386281948385884,
                    "paymentOrder" : {
                      "date" : "2000-01-23",
                      "id" : "id"
                    },
                    "id" : "id",
                    "source" : "BUYER",
                    "type" : "PAYMENT"
                  } ],
                  "fake" : true,
                  "deliveryRegion" : {
                    "name" : "name",
                    "id" : 6
                  },
                  "id" : 0,
                  "creationDate" : "2000-01-23",
                  "items" : [ {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  }, {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  } ],
                  "initialItems" : [ {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  }, {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  } ],
                  "status" : "CANCELLED_BEFORE_PROCESSING",
                  "paymentType" : "CREDIT"
                }, {
                  "partnerOrderId" : "partnerOrderId",
                  "commissions" : [ {
                    "actual" : 1.2315135367772556,
                    "type" : "FEE"
                  }, {
                    "actual" : 1.2315135367772556,
                    "type" : "FEE"
                  } ],
                  "statusUpdateDate" : "2000-01-23T04:56:07.000+00:00",
                  "payments" : [ {
                    "date" : "2000-01-23",
                    "total" : 7.386281948385884,
                    "paymentOrder" : {
                      "date" : "2000-01-23",
                      "id" : "id"
                    },
                    "id" : "id",
                    "source" : "BUYER",
                    "type" : "PAYMENT"
                  }, {
                    "date" : "2000-01-23",
                    "total" : 7.386281948385884,
                    "paymentOrder" : {
                      "date" : "2000-01-23",
                      "id" : "id"
                    },
                    "id" : "id",
                    "source" : "BUYER",
                    "type" : "PAYMENT"
                  } ],
                  "fake" : true,
                  "deliveryRegion" : {
                    "name" : "name",
                    "id" : 6
                  },
                  "id" : 0,
                  "creationDate" : "2000-01-23",
                  "items" : [ {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  }, {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  } ],
                  "initialItems" : [ {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  }, {
                    "cofinanceValue" : 4.145608029883936,
                    "initialCount" : 3,
                    "offerName" : "offerName",
                    "shopSku" : "shopSku",
                    "cisList" : [ "cisList", "cisList" ],
                    "marketSku" : 1,
                    "count" : 5,
                    "bidFee" : 570,
                    "cofinanceThreshold" : 2.027123023002322,
                    "details" : [ {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    }, {
                      "updateDate" : "2000-01-23",
                      "stockType" : "FIT",
                      "itemStatus" : "REJECTED",
                      "itemCount" : 9
                    } ],
                    "prices" : [ {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    }, {
                      "total" : 2.3021358869347655,
                      "costPerItem" : 5.637376656633329,
                      "type" : "BUYER"
                    } ],
                    "warehouse" : {
                      "name" : "name",
                      "id" : 7
                    }
                  } ],
                  "status" : "CANCELLED_BEFORE_PROCESSING",
                  "paymentType" : "CREDIT"
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getPrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "price" : {
                    "vat" : 1,
                    "discountBase" : 6.027456183070403,
                    "currencyId" : "RUR",
                    "value" : 0.8008281904610115
                  },
                  "marketSku" : 0,
                  "id" : "id",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                }, {
                  "price" : {
                    "vat" : 1,
                    "discountBase" : 6.027456183070403,
                    "currencyId" : "RUR",
                    "value" : 0.8008281904610115
                  },
                  "marketSku" : 0,
                  "id" : "id",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                } ],
                "total" : 6,
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getPricesByOfferIds> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "price" : {
                    "vat" : 1,
                    "discountBase" : 6.027456183070403,
                    "currencyId" : "RUR",
                    "value" : 0.8008281904610115
                  },
                  "offerId" : "offerId",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                }, {
                  "price" : {
                    "vat" : 1,
                    "discountBase" : 6.027456183070403,
                    "currencyId" : "RUR",
                    "value" : 0.8008281904610115
                  },
                  "offerId" : "offerId",
                  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getPromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "offerId" : "offerId",
                  "params" : {
                    "discountParams" : {
                      "promoPrice" : 6,
                      "maxPromoPrice" : 1,
                      "price" : 0
                    },
                    "promocodeParams" : {
                      "maxPrice" : 5
                    }
                  },
                  "status" : "AUTO",
                  "autoParticipatingDetails" : {
                    "campaignIds" : [ 5, 5 ]
                  }
                }, {
                  "offerId" : "offerId",
                  "params" : {
                    "discountParams" : {
                      "promoPrice" : 6,
                      "maxPromoPrice" : 1,
                      "price" : 0
                    },
                    "promocodeParams" : {
                      "maxPrice" : 5
                    }
                  },
                  "status" : "AUTO",
                  "autoParticipatingDetails" : {
                    "campaignIds" : [ 5, 5 ]
                  }
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getPromos> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "promos" : [ {
                  "period" : {
                    "dateTimeFrom" : "2000-01-23T04:56:07.000+00:00",
                    "dateTimeTo" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "channels" : [ "{}", "{}" ],
                  "mechanicsInfo" : {
                    "promocodeInfo" : {
                      "promocode" : "promocode",
                      "discount" : 1
                    },
                    "type" : "DIRECT_DISCOUNT"
                  },
                  "bestsellerInfo" : {
                    "bestseller" : true,
                    "entryDeadline" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "name" : "name",
                  "participating" : true,
                  "id" : "id",
                  "constraints" : {
                    "warehouseIds" : [ 5, 5 ]
                  },
                  "assortmentInfo" : {
                    "activeOffers" : 0,
                    "processing" : true,
                    "potentialOffers" : 6
                  }
                }, {
                  "period" : {
                    "dateTimeFrom" : "2000-01-23T04:56:07.000+00:00",
                    "dateTimeTo" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "channels" : [ "{}", "{}" ],
                  "mechanicsInfo" : {
                    "promocodeInfo" : {
                      "promocode" : "promocode",
                      "discount" : 1
                    },
                    "type" : "DIRECT_DISCOUNT"
                  },
                  "bestsellerInfo" : {
                    "bestseller" : true,
                    "entryDeadline" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "name" : "name",
                  "participating" : true,
                  "id" : "id",
                  "constraints" : {
                    "warehouseIds" : [ 5, 5 ]
                  },
                  "assortmentInfo" : {
                    "activeOffers" : 0,
                    "processing" : true,
                    "potentialOffers" : 6
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getQualityRatingDetails> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "affectedOrders" : [ {
                  "componentType" : "DBS_CANCELLATION_RATE",
                  "orderId" : 0,
                  "description" : "description"
                }, {
                  "componentType" : "DBS_CANCELLATION_RATE",
                  "orderId" : 0,
                  "description" : "description"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getQualityRatings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "campaignRatings" : [ {
                  "campaignId" : 0,
                  "ratings" : [ {
                    "components" : [ {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    }, {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    } ],
                    "rating" : 60,
                    "calculationDate" : "2000-01-23"
                  }, {
                    "components" : [ {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    }, {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    } ],
                    "rating" : 60,
                    "calculationDate" : "2000-01-23"
                  } ]
                }, {
                  "campaignId" : 0,
                  "ratings" : [ {
                    "components" : [ {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    }, {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    } ],
                    "rating" : 60,
                    "calculationDate" : "2000-01-23"
                  }, {
                    "components" : [ {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    }, {
                      "componentType" : "DBS_CANCELLATION_RATE",
                      "value" : 14.658129805029452
                    } ],
                    "rating" : 60,
                    "calculationDate" : "2000-01-23"
                  } ]
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getReportInfo> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "generationRequestedAt" : "2000-01-23T04:56:07.000+00:00",
                "file" : "file",
                "generationFinishedAt" : "2000-01-23T04:56:07.000+00:00",
                "subStatus" : "NO_DATA",
                "status" : "PENDING",
                "estimatedGenerationTime" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getReturn> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "updateDate" : "2000-01-23T04:56:07.000+00:00",
                "fastReturn" : true,
                "orderId" : 6,
                "shipmentRecipientType" : "SHOP",
                "refundStatus" : "STARTED_BY_USER",
                "logisticPickupPoint" : {
                  "logisticPartnerId" : 5,
                  "address" : {
                    "country" : "Россия",
                    "city" : "Москва",
                    "street" : "Стрелецкая улица",
                    "postcode" : "123518",
                    "house" : "9к2"
                  },
                  "instruction" : "instruction",
                  "name" : "name",
                  "id" : 1,
                  "type" : "WAREHOUSE"
                },
                "id" : 0,
                "creationDate" : "2000-01-23T04:56:07.000+00:00",
                "items" : [ {
                  "shopSku" : "shopSku",
                  "instances" : [ {
                    "stockType" : "FIT",
                    "imei" : "imei",
                    "cis" : "cis",
                    "status" : "CREATED"
                  }, {
                    "stockType" : "FIT",
                    "imei" : "imei",
                    "cis" : "cis",
                    "status" : "CREATED"
                  } ],
                  "marketSku" : 2,
                  "count" : 7,
                  "decisions" : [ {
                    "images" : [ "images", "images" ],
                    "returnItemId" : 9,
                    "subreasonType" : "USER_DID_NOT_LIKE",
                    "count" : 3,
                    "comment" : "comment",
                    "decisionType" : "REFUND_MONEY",
                    "reasonType" : "BAD_QUALITY",
                    "partnerCompensation" : 4,
                    "refundAmount" : 2
                  }, {
                    "images" : [ "images", "images" ],
                    "returnItemId" : 9,
                    "subreasonType" : "USER_DID_NOT_LIKE",
                    "count" : 3,
                    "comment" : "comment",
                    "decisionType" : "REFUND_MONEY",
                    "reasonType" : "BAD_QUALITY",
                    "partnerCompensation" : 4,
                    "refundAmount" : 2
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode"
                  }, {
                    "trackCode" : "trackCode"
                  } ]
                }, {
                  "shopSku" : "shopSku",
                  "instances" : [ {
                    "stockType" : "FIT",
                    "imei" : "imei",
                    "cis" : "cis",
                    "status" : "CREATED"
                  }, {
                    "stockType" : "FIT",
                    "imei" : "imei",
                    "cis" : "cis",
                    "status" : "CREATED"
                  } ],
                  "marketSku" : 2,
                  "count" : 7,
                  "decisions" : [ {
                    "images" : [ "images", "images" ],
                    "returnItemId" : 9,
                    "subreasonType" : "USER_DID_NOT_LIKE",
                    "count" : 3,
                    "comment" : "comment",
                    "decisionType" : "REFUND_MONEY",
                    "reasonType" : "BAD_QUALITY",
                    "partnerCompensation" : 4,
                    "refundAmount" : 2
                  }, {
                    "images" : [ "images", "images" ],
                    "returnItemId" : 9,
                    "subreasonType" : "USER_DID_NOT_LIKE",
                    "count" : 3,
                    "comment" : "comment",
                    "decisionType" : "REFUND_MONEY",
                    "reasonType" : "BAD_QUALITY",
                    "partnerCompensation" : 4,
                    "refundAmount" : 2
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode"
                  }, {
                    "trackCode" : "trackCode"
                  } ]
                } ],
                "returnType" : "UNREDEEMED",
                "shipmentStatus" : "CREATED",
                "refundAmount" : 5
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getReturnApplication> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getReturnPhoto> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getReturns> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                },
                "returns" : [ {
                  "updateDate" : "2000-01-23T04:56:07.000+00:00",
                  "fastReturn" : true,
                  "orderId" : 6,
                  "shipmentRecipientType" : "SHOP",
                  "refundStatus" : "STARTED_BY_USER",
                  "logisticPickupPoint" : {
                    "logisticPartnerId" : 5,
                    "address" : {
                      "country" : "Россия",
                      "city" : "Москва",
                      "street" : "Стрелецкая улица",
                      "postcode" : "123518",
                      "house" : "9к2"
                    },
                    "instruction" : "instruction",
                    "name" : "name",
                    "id" : 1,
                    "type" : "WAREHOUSE"
                  },
                  "id" : 0,
                  "creationDate" : "2000-01-23T04:56:07.000+00:00",
                  "items" : [ {
                    "shopSku" : "shopSku",
                    "instances" : [ {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    }, {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    } ],
                    "marketSku" : 2,
                    "count" : 7,
                    "decisions" : [ {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    }, {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    } ],
                    "tracks" : [ {
                      "trackCode" : "trackCode"
                    }, {
                      "trackCode" : "trackCode"
                    } ]
                  }, {
                    "shopSku" : "shopSku",
                    "instances" : [ {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    }, {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    } ],
                    "marketSku" : 2,
                    "count" : 7,
                    "decisions" : [ {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    }, {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    } ],
                    "tracks" : [ {
                      "trackCode" : "trackCode"
                    }, {
                      "trackCode" : "trackCode"
                    } ]
                  } ],
                  "returnType" : "UNREDEEMED",
                  "shipmentStatus" : "CREATED",
                  "refundAmount" : 5
                }, {
                  "updateDate" : "2000-01-23T04:56:07.000+00:00",
                  "fastReturn" : true,
                  "orderId" : 6,
                  "shipmentRecipientType" : "SHOP",
                  "refundStatus" : "STARTED_BY_USER",
                  "logisticPickupPoint" : {
                    "logisticPartnerId" : 5,
                    "address" : {
                      "country" : "Россия",
                      "city" : "Москва",
                      "street" : "Стрелецкая улица",
                      "postcode" : "123518",
                      "house" : "9к2"
                    },
                    "instruction" : "instruction",
                    "name" : "name",
                    "id" : 1,
                    "type" : "WAREHOUSE"
                  },
                  "id" : 0,
                  "creationDate" : "2000-01-23T04:56:07.000+00:00",
                  "items" : [ {
                    "shopSku" : "shopSku",
                    "instances" : [ {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    }, {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    } ],
                    "marketSku" : 2,
                    "count" : 7,
                    "decisions" : [ {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    }, {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    } ],
                    "tracks" : [ {
                      "trackCode" : "trackCode"
                    }, {
                      "trackCode" : "trackCode"
                    } ]
                  }, {
                    "shopSku" : "shopSku",
                    "instances" : [ {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    }, {
                      "stockType" : "FIT",
                      "imei" : "imei",
                      "cis" : "cis",
                      "status" : "CREATED"
                    } ],
                    "marketSku" : 2,
                    "count" : 7,
                    "decisions" : [ {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    }, {
                      "images" : [ "images", "images" ],
                      "returnItemId" : 9,
                      "subreasonType" : "USER_DID_NOT_LIKE",
                      "count" : 3,
                      "comment" : "comment",
                      "decisionType" : "REFUND_MONEY",
                      "reasonType" : "BAD_QUALITY",
                      "partnerCompensation" : 4,
                      "refundAmount" : 2
                    } ],
                    "tracks" : [ {
                      "trackCode" : "trackCode"
                    }, {
                      "trackCode" : "trackCode"
                    } ]
                  } ],
                  "returnType" : "UNREDEEMED",
                  "shipmentStatus" : "CREATED",
                  "refundAmount" : 5
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getStocks> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "warehouses" : [ {
                  "offers" : [ {
                    "offerId" : "offerId",
                    "turnoverSummary" : {
                      "turnoverDays" : 6.027456183070403,
                      "turnover" : "LOW"
                    },
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ],
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  }, {
                    "offerId" : "offerId",
                    "turnoverSummary" : {
                      "turnoverDays" : 6.027456183070403,
                      "turnover" : "LOW"
                    },
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ],
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  } ],
                  "warehouseId" : 0
                }, {
                  "offers" : [ {
                    "offerId" : "offerId",
                    "turnoverSummary" : {
                      "turnoverDays" : 6.027456183070403,
                      "turnover" : "LOW"
                    },
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ],
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  }, {
                    "offerId" : "offerId",
                    "turnoverSummary" : {
                      "turnoverDays" : 6.027456183070403,
                      "turnover" : "LOW"
                    },
                    "stocks" : [ {
                      "count" : 1,
                      "type" : "FIT"
                    }, {
                      "count" : 1,
                      "type" : "FIT"
                    } ],
                    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
                  } ],
                  "warehouseId" : 0
                } ],
                "paging" : {
                  "prevPageToken" : "prevPageToken",
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getSuggestedOfferMappingEntries> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "manufacturerCountries" : [ "manufacturerCountries", "manufacturerCountries" ],
                  "marketCategoryId" : 4,
                  "certificate" : "certificate",
                  "description" : "description",
                  "availability" : "ACTIVE",
                  "marketModelId" : 7,
                  "pictures" : [ "pictures", "pictures" ],
                  "vendorCode" : "VNDR-0005A",
                  "manufacturer" : "manufacturer",
                  "marketSkuName" : "marketSkuName",
                  "urls" : [ "urls", "urls" ],
                  "deliveryDurationDays" : 5,
                  "feedId" : 0,
                  "vendor" : "LEVENHUK",
                  "price" : 2.027123023002322,
                  "transportUnitSize" : 1,
                  "id" : "id",
                  "lifeTime" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "shelfLife" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "supplyScheduleDays" : [ "MONDAY", "MONDAY" ],
                  "marketModelName" : "marketModelName",
                  "lifeTimeDays" : 9,
                  "quantumOfSupply" : 5,
                  "barcodes" : [ "46012300000000", "46012300000000" ],
                  "customsCommodityCodes" : [ "customsCommodityCodes", "customsCommodityCodes" ],
                  "processingState" : {
                    "notes" : [ {
                      "payload" : "payload",
                      "type" : "ASSORTMENT"
                    }, {
                      "payload" : "payload",
                      "type" : "ASSORTMENT"
                    } ],
                    "status" : "UNKNOWN"
                  },
                  "marketCategoryName" : "marketCategoryName",
                  "shopSku" : "shopSku",
                  "boxCount" : 2,
                  "minShipment" : 6,
                  "name" : "Ударная дрель Makita HP1630, 710 Вт",
                  "shelfLifeDays" : 7,
                  "guaranteePeriod" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "weightDimensions" : {
                    "length" : 65.55,
                    "width" : 50.7,
                    "weight" : 1.001,
                    "height" : 20
                  },
                  "category" : "category",
                  "guaranteePeriodDays" : 3
                }, {
                  "manufacturerCountries" : [ "manufacturerCountries", "manufacturerCountries" ],
                  "marketCategoryId" : 4,
                  "certificate" : "certificate",
                  "description" : "description",
                  "availability" : "ACTIVE",
                  "marketModelId" : 7,
                  "pictures" : [ "pictures", "pictures" ],
                  "vendorCode" : "VNDR-0005A",
                  "manufacturer" : "manufacturer",
                  "marketSkuName" : "marketSkuName",
                  "urls" : [ "urls", "urls" ],
                  "deliveryDurationDays" : 5,
                  "feedId" : 0,
                  "vendor" : "LEVENHUK",
                  "price" : 2.027123023002322,
                  "transportUnitSize" : 1,
                  "id" : "id",
                  "lifeTime" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "shelfLife" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "supplyScheduleDays" : [ "MONDAY", "MONDAY" ],
                  "marketModelName" : "marketModelName",
                  "lifeTimeDays" : 9,
                  "quantumOfSupply" : 5,
                  "barcodes" : [ "46012300000000", "46012300000000" ],
                  "customsCommodityCodes" : [ "customsCommodityCodes", "customsCommodityCodes" ],
                  "processingState" : {
                    "notes" : [ {
                      "payload" : "payload",
                      "type" : "ASSORTMENT"
                    }, {
                      "payload" : "payload",
                      "type" : "ASSORTMENT"
                    } ],
                    "status" : "UNKNOWN"
                  },
                  "marketCategoryName" : "marketCategoryName",
                  "shopSku" : "shopSku",
                  "boxCount" : 2,
                  "minShipment" : 6,
                  "name" : "Ударная дрель Makita HP1630, 710 Вт",
                  "shelfLifeDays" : 7,
                  "guaranteePeriod" : {
                    "timePeriod" : 6,
                    "comment" : "comment",
                    "timeUnit" : "HOUR"
                  },
                  "weightDimensions" : {
                    "length" : 65.55,
                    "width" : 50.7,
                    "weight" : 1.001,
                    "height" : 20
                  },
                  "category" : "category",
                  "guaranteePeriodDays" : 3
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getSuggestedOfferMappings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "offer" : {
                    "vendor" : "LEVENHUK",
                    "basicPrice" : {
                      "value" : 0.9301444243932576
                    },
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "offerId" : "offerId",
                    "description" : "description",
                    "category" : "category",
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "vendorCode" : "VNDR-0005A"
                  },
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  }
                }, {
                  "offer" : {
                    "vendor" : "LEVENHUK",
                    "basicPrice" : {
                      "value" : 0.9301444243932576
                    },
                    "name" : "Ударная дрель Makita HP1630, 710 Вт",
                    "offerId" : "offerId",
                    "description" : "description",
                    "category" : "category",
                    "barcodes" : [ "46012300000000", "46012300000000" ],
                    "vendorCode" : "VNDR-0005A"
                  },
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getSuggestedPrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offers" : [ {
                  "marketSku" : 0,
                  "offerId" : "offerId",
                  "priceSuggestion" : [ {
                    "price" : 6.027456183070403,
                    "type" : "BUYBOX"
                  }, {
                    "price" : 6.027456183070403,
                    "type" : "BUYBOX"
                  } ]
                }, {
                  "marketSku" : 0,
                  "offerId" : "offerId",
                  "priceSuggestion" : [ {
                    "price" : 6.027456183070403,
                    "type" : "BUYBOX"
                  }, {
                    "price" : 6.027456183070403,
                    "type" : "BUYBOX"
                  } ]
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getWarehouses> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "warehouses" : [ {
                  "address" : {
                    "number" : "number",
                    "city" : "city",
                    "street" : "street",
                    "block" : "block",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "building" : "building"
                  },
                  "campaignId" : 6,
                  "name" : "name",
                  "express" : true,
                  "id" : 0
                }, {
                  "address" : {
                    "number" : "number",
                    "city" : "city",
                    "street" : "street",
                    "block" : "block",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "building" : "building"
                  },
                  "campaignId" : 6,
                  "name" : "name",
                  "express" : true,
                  "id" : 0
                } ],
                "warehouseGroups" : [ {
                  "name" : "name",
                  "warehouses" : [ {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  }, {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  } ],
                  "mainWarehouse" : {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  }
                }, {
                  "name" : "name",
                  "warehouses" : [ {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  }, {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  } ],
                  "mainWarehouse" : {
                    "address" : {
                      "number" : "number",
                      "city" : "city",
                      "street" : "street",
                      "block" : "block",
                      "gps" : {
                        "latitude" : 9.965781217890562,
                        "longitude" : 9.369310271410669
                      },
                      "building" : "building"
                    },
                    "campaignId" : 6,
                    "name" : "name",
                    "express" : true,
                    "id" : 0
                  }
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.provideOrderItemIdentifiers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "items" : [ {
                  "offerName" : "offerName",
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "price" : 1.4658129805029452,
                  "vat" : "NO_VAT",
                  "count" : 6,
                  "offerId" : "offerId",
                  "id" : 0
                }, {
                  "offerName" : "offerName",
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "price" : 1.4658129805029452,
                  "vat" : "NO_VAT",
                  "count" : 6,
                  "offerId" : "offerId",
                  "id" : 0
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.putBidsForBusiness> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.putBidsForCampaign> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.refreshFeed> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.searchRegionChildren> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "regions" : {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              },
              "pager" : {
                "total" : 1,
                "pagesCount" : 7,
                "pageSize" : 9,
                "from" : 5,
                "to" : 5,
                "currentPage" : 2
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.searchRegionsById> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "regions" : [ {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              }, {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              } ],
              "paging" : {
                "nextPageToken" : "nextPageToken"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.searchRegionsByName> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "regions" : [ {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              }, {
                "children" : [ null, null ],
                "name" : "name",
                "id" : 0,
                "type" : "OTHER"
              } ],
              "paging" : {
                "nextPageToken" : "nextPageToken"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.sendFileToChat> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.sendMessageToChat> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.setFeedParams> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.setOrderBoxLayout> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "boxes" : [ {
                  "items" : [ {
                    "partialCount" : {
                      "current" : 1,
                      "total" : 2
                    },
                    "instances" : [ {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    }, {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    } ],
                    "id" : 0,
                    "fullCount" : 1
                  }, {
                    "partialCount" : {
                      "current" : 1,
                      "total" : 2
                    },
                    "instances" : [ {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    }, {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    } ],
                    "id" : 0,
                    "fullCount" : 1
                  } ],
                  "boxId" : 5
                }, {
                  "items" : [ {
                    "partialCount" : {
                      "current" : 1,
                      "total" : 2
                    },
                    "instances" : [ {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    }, {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    } ],
                    "id" : 0,
                    "fullCount" : 1
                  }, {
                    "partialCount" : {
                      "current" : 1,
                      "total" : 2
                    },
                    "instances" : [ {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    }, {
                      "rnpt" : "rnpt",
                      "gtd" : "gtd",
                      "uin" : "uin",
                      "cis" : "cis"
                    } ],
                    "id" : 0,
                    "fullCount" : 1
                  } ],
                  "boxId" : 5
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.setOrderShipmentBoxes> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "boxes" : [ {
                  "fulfilmentId" : "fulfilmentId",
                  "id" : 0
                }, {
                  "fulfilmentId" : "fulfilmentId",
                  "id" : 0
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.skipGoodsFeedbacksReaction> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateBusinessPrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateCampaignOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateGoodsFeedbackComment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "author" : {
                  "name" : "name",
                  "type" : "USER"
                },
                "id" : 0,
                "text" : "text",
                "canModify" : true,
                "parentId" : 6,
                "status" : "PUBLISHED"
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateOfferContent> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "results" : [ {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ]
              }, {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ]
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateOfferMappingEntries> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateOfferMappings> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "results" : [ {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                } ]
              }, {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "UNKNOWN_CATEGORY",
                  "message" : "message"
                } ]
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.updateOrderItems> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.updateOrderStatus> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "order" : {
                "delivery" : {
                  "dispatchType" : "UNKNOWN",
                  "address" : {
                    "country" : "country",
                    "city" : "city",
                    "postcode" : "postcode",
                    "gps" : {
                      "latitude" : 9.965781217890562,
                      "longitude" : 9.369310271410669
                    },
                    "house" : "house",
                    "subway" : "subway",
                    "phone" : "phone",
                    "street" : "street",
                    "district" : "district",
                    "recipient" : "recipient",
                    "entryphone" : "entryphone",
                    "block" : "block",
                    "entrance" : "entrance",
                    "floor" : "floor",
                    "apartment" : "apartment"
                  },
                  "liftType" : "NOT_NEEDED",
                  "deliveryServiceId" : 6,
                  "estimated" : true,
                  "dates" : {
                    "fromDate" : "23-09-2022",
                    "toDate" : "23-09-2022",
                    "fromTime" : "fromTime",
                    "toTime" : "toTime",
                    "realDeliveryDate" : "23-09-2022"
                  },
                  "type" : "DELIVERY",
                  "serviceName" : "serviceName",
                  "shipments" : [ {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  }, {
                    "boxes" : [ {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    }, {
                      "fulfilmentId" : "fulfilmentId",
                      "id" : 3
                    } ],
                    "id" : 6,
                    "shipmentDate" : "23-09-2022",
                    "shipmentTime" : "shipmentTime",
                    "tracks" : [ {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    }, {
                      "trackCode" : "trackCode",
                      "deliveryServiceId" : 9
                    } ]
                  } ],
                  "tracks" : [ {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  }, {
                    "trackCode" : "trackCode",
                    "deliveryServiceId" : 9
                  } ],
                  "courier" : {
                    "vehicleDescription" : "vehicleDescription",
                    "phone" : "phone",
                    "phoneExtension" : "phoneExtension",
                    "fullName" : "fullName",
                    "vehicleNumber" : "vehicleNumber"
                  },
                  "price" : 5.025004791520295,
                  "outletStorageLimitDate" : "23-09-2022",
                  "eacType" : "MERCHANT_TO_COURIER",
                  "liftPrice" : 8.762042012749001,
                  "eacCode" : "eacCode",
                  "id" : "id",
                  "region" : {
                    "children" : [ null, null ],
                    "name" : "name",
                    "id" : 0,
                    "type" : "OTHER"
                  },
                  "deliveryPartnerType" : "SHOP",
                  "outletCode" : "outletCode"
                },
                "notes" : "notes",
                "substatus" : "RESERVATION_EXPIRED",
                "deliveryTotal" : 1.4658129805029452,
                "buyerItemsTotalBeforeDiscount" : 2.3021358869347655,
                "creationDate" : "23-09-2022 09:12:41",
                "buyerItemsTotal" : 5.962133916683182,
                "paymentType" : "PREPAID",
                "buyer" : {
                  "lastName" : "lastName",
                  "firstName" : "firstName",
                  "middleName" : "middleName",
                  "id" : "id",
                  "type" : "PERSON"
                },
                "expiryDate" : "23-09-2022 09:12:41",
                "buyerTotalBeforeDiscount" : 7.061401241503109,
                "itemsTotal" : 6.027456183070403,
                "buyerTotal" : 5.637376656633329,
                "subsidies" : [ {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                }, {
                  "amount" : 4.965218492984954,
                  "type" : "YANDEX_CASHBACK"
                } ],
                "paymentMethod" : "CASH_ON_DELIVERY",
                "currency" : "RUR",
                "fake" : true,
                "id" : 0,
                "taxSystem" : "OSN",
                "cancelRequested" : true,
                "items" : [ {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                }, {
                  "offerName" : "offerName",
                  "subsidy" : 1.0246457001441578,
                  "instances" : [ {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  }, {
                    "rnpt" : "rnpt",
                    "gtd" : "gtd",
                    "cisFull" : "cisFull",
                    "uin" : "uin",
                    "cis" : "cis"
                  } ],
                  "priceBeforeDiscount" : 7.386281948385884,
                  "count" : 1,
                  "vat" : "NO_VAT",
                  "requiredInstanceTypes" : [ "CIS", "CIS" ],
                  "buyerPriceBeforeDiscount" : 4.145608029883936,
                  "shopSku" : "shopSku",
                  "price" : 3.616076749251911,
                  "partnerWarehouseId" : "partnerWarehouseId",
                  "subsidies" : [ {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  }, {
                    "amount" : 1.1730742509559433,
                    "type" : "YANDEX_CASHBACK"
                  } ],
                  "offerId" : "offerId",
                  "buyerPrice" : 2.027123023002322,
                  "details" : [ {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  }, {
                    "updateDate" : "23-09-2022",
                    "itemStatus" : "REJECTED",
                    "itemCount" : 7
                  } ],
                  "id" : 9,
                  "promos" : [ {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  }, {
                    "subsidy" : 6.84685269835264,
                    "shopPromoId" : "shopPromoId",
                    "discount" : 1.4894159098541704,
                    "marketPromoId" : "marketPromoId",
                    "type" : "DIRECT_DISCOUNT"
                  } ]
                } ],
                "status" : "PLACING",
                "updatedAt" : "23-09-2022 09:12:41"
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateOrderStatuses> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "orders" : [ {
                  "substatus" : "RESERVATION_EXPIRED",
                  "updateStatus" : "OK",
                  "id" : 0,
                  "status" : "PLACING",
                  "errorDetails" : "errorDetails"
                }, {
                  "substatus" : "RESERVATION_EXPIRED",
                  "updateStatus" : "OK",
                  "id" : 0,
                  "status" : "PLACING",
                  "errorDetails" : "errorDetails"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updatePrices> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updatePromoOffers> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "rejectedOffers" : [ {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                }, {
                  "reason" : "OFFER_DOES_NOT_EXIST",
                  "offerId" : "offerId"
                } ],
                "warningOffers" : [ {
                  "warnings" : [ {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  }, {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  } ],
                  "offerId" : "offerId"
                }, {
                  "warnings" : [ {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  }, {
                    "code" : "DEEP_DISCOUNT_OFFER",
                    "campaignIds" : [ 0, 0 ]
                  } ],
                  "offerId" : "offerId"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.updateStocks> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    put<Paths.verifyOrderEac> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "verificationResult" : "ACCEPTED",
                "attemptsLeft" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
