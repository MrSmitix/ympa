/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiLockedErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.GetCategoryContentParametersResponse
import ympa_kotlin_server.models.GetOfferCardsContentStatusRequest
import ympa_kotlin_server.models.GetOfferCardsContentStatusResponse
import ympa_kotlin_server.models.UpdateOfferContentRequest
import ympa_kotlin_server.models.UpdateOfferContentResponse

fun Route.ContentApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    post<Paths.getCategoryContentParameters> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "parameters" : [ {
                  "values" : [ {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  }, {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  } ],
                  "recommendationTypes" : [ "HAS_VIDEO", "HAS_VIDEO" ],
                  "description" : "description",
                  "type" : "TEXT",
                  "constraints" : {
                    "minValue" : 2.3021358869347655,
                    "maxValue" : 7.061401241503109,
                    "maxLength" : 9
                  },
                  "required" : true,
                  "multivalue" : true,
                  "unit" : {
                    "defaultUnitId" : 1,
                    "units" : [ {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    }, {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    } ]
                  },
                  "valueRestrictions" : [ {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  }, {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  } ],
                  "distinctive" : true,
                  "name" : "name",
                  "id" : 6,
                  "filtering" : true,
                  "allowCustomValues" : true
                }, {
                  "values" : [ {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  }, {
                    "description" : "description",
                    "id" : 5,
                    "value" : "value"
                  } ],
                  "recommendationTypes" : [ "HAS_VIDEO", "HAS_VIDEO" ],
                  "description" : "description",
                  "type" : "TEXT",
                  "constraints" : {
                    "minValue" : 2.3021358869347655,
                    "maxValue" : 7.061401241503109,
                    "maxLength" : 9
                  },
                  "required" : true,
                  "multivalue" : true,
                  "unit" : {
                    "defaultUnitId" : 1,
                    "units" : [ {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    }, {
                      "name" : "кг",
                      "fullName" : "килограмм",
                      "id" : 5
                    } ]
                  },
                  "valueRestrictions" : [ {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  }, {
                    "limitedValues" : [ {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    }, {
                      "limitingOptionValueId" : 2,
                      "optionValueIds" : [ 4, 4 ]
                    } ],
                    "limitingParameterId" : 3
                  } ],
                  "distinctive" : true,
                  "name" : "name",
                  "id" : 6,
                  "filtering" : true,
                  "allowCustomValues" : true
                } ],
                "categoryId" : 0
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getOfferCardsContentStatus> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "offerCards" : [ {
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "offerId" : "offerId",
                  "contentRating" : 0,
                  "recommendations" : [ {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  }, {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  } ],
                  "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "parameterValues" : [ {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  }, {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  } ]
                }, {
                  "mapping" : {
                    "marketSkuName" : "marketSkuName",
                    "marketCategoryName" : "marketCategoryName",
                    "marketCategoryId" : 4,
                    "marketSku" : 3,
                    "marketModelId" : 2,
                    "marketModelName" : "marketModelName"
                  },
                  "warnings" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "offerId" : "offerId",
                  "contentRating" : 0,
                  "recommendations" : [ {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  }, {
                    "type" : "HAS_VIDEO",
                    "percent" : 60
                  } ],
                  "cardStatus" : "HAS_CARD_CAN_NOT_UPDATE",
                  "errors" : [ {
                    "comment" : "comment",
                    "message" : "message"
                  }, {
                    "comment" : "comment",
                    "message" : "message"
                  } ],
                  "parameterValues" : [ {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  }, {
                    "valueId" : 5,
                    "parameterId" : 1,
                    "unitId" : 5,
                    "value" : "value"
                  } ]
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateOfferContent> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "results" : [ {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ]
              }, {
                "warnings" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ],
                "offerId" : "offerId",
                "errors" : [ {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                }, {
                  "parameterId" : 0,
                  "type" : "OFFER_NOT_FOUND",
                  "message" : "message"
                } ]
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
