/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.GetOrderLabelsDataResponse
import ympa_kotlin_server.models.PageFormatType

fun Route.OrderLabelsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    get<Paths.generateOrderLabel> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.generateOrderLabels> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "errors" : [ {
                "code" : "code",
                "message" : "message"
              }, {
                "code" : "code",
                "message" : "message"
              } ],
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getOrderLabelsData> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "parcelBoxLabels" : [ {
                  "supplierName" : "supplierName",
                  "deliveryServiceId" : "deliveryServiceId",
                  "orderId" : 1,
                  "fulfilmentId" : "fulfilmentId",
                  "orderNum" : "orderNum",
                  "weight" : "weight",
                  "url" : "url",
                  "deliveryServiceName" : "deliveryServiceName",
                  "deliveryAddress" : "deliveryAddress",
                  "recipientName" : "recipientName",
                  "place" : "place",
                  "shipmentDate" : "shipmentDate",
                  "boxId" : 5
                }, {
                  "supplierName" : "supplierName",
                  "deliveryServiceId" : "deliveryServiceId",
                  "orderId" : 1,
                  "fulfilmentId" : "fulfilmentId",
                  "orderNum" : "orderNum",
                  "weight" : "weight",
                  "url" : "url",
                  "deliveryServiceName" : "deliveryServiceName",
                  "deliveryAddress" : "deliveryAddress",
                  "recipientName" : "recipientName",
                  "place" : "place",
                  "shipmentDate" : "shipmentDate",
                  "boxId" : 5
                } ],
                "orderId" : 0,
                "placesNumber" : 6,
                "url" : "url"
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
