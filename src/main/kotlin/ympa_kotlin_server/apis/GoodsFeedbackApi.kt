/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.DeleteGoodsFeedbackCommentRequest
import ympa_kotlin_server.models.EmptyApiResponse
import ympa_kotlin_server.models.GetGoodsFeedbackCommentsRequest
import ympa_kotlin_server.models.GetGoodsFeedbackCommentsResponse
import ympa_kotlin_server.models.GetGoodsFeedbackRequest
import ympa_kotlin_server.models.GetGoodsFeedbackResponse
import ympa_kotlin_server.models.SkipGoodsFeedbackReactionRequest
import ympa_kotlin_server.models.UpdateGoodsFeedbackCommentRequest
import ympa_kotlin_server.models.UpdateGoodsFeedbackCommentResponse

fun Route.GoodsFeedbackApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    post<Paths.deleteGoodsFeedbackComment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getGoodsFeedbackComments> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "comments" : [ {
                  "author" : {
                    "name" : "name",
                    "type" : "USER"
                  },
                  "id" : 0,
                  "text" : "text",
                  "canModify" : true,
                  "parentId" : 6,
                  "status" : "PUBLISHED"
                }, {
                  "author" : {
                    "name" : "name",
                    "type" : "USER"
                  },
                  "id" : 0,
                  "text" : "text",
                  "canModify" : true,
                  "parentId" : 6,
                  "status" : "PUBLISHED"
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.getGoodsFeedbacks> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "feedbacks" : [ {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "needReaction" : true,
                  "identifiers" : {
                    "orderId" : 6,
                    "modelId" : 1
                  },
                  "author" : "author",
                  "feedbackId" : 0,
                  "description" : {
                    "advantages" : "advantages",
                    "disadvantages" : "disadvantages",
                    "comment" : "comment"
                  },
                  "media" : {
                    "videos" : [ "videos", "videos" ],
                    "photos" : [ "photos", "photos" ]
                  },
                  "statistics" : {
                    "commentsCount" : 5,
                    "rating" : 3,
                    "paidAmount" : 2,
                    "recommended" : true
                  }
                }, {
                  "createdAt" : "2000-01-23T04:56:07.000+00:00",
                  "needReaction" : true,
                  "identifiers" : {
                    "orderId" : 6,
                    "modelId" : 1
                  },
                  "author" : "author",
                  "feedbackId" : 0,
                  "description" : {
                    "advantages" : "advantages",
                    "disadvantages" : "disadvantages",
                    "comment" : "comment"
                  },
                  "media" : {
                    "videos" : [ "videos", "videos" ],
                    "photos" : [ "photos", "photos" ]
                  },
                  "statistics" : {
                    "commentsCount" : 5,
                    "rating" : 3,
                    "paidAmount" : 2,
                    "recommended" : true
                  }
                } ],
                "paging" : {
                  "nextPageToken" : "nextPageToken"
                }
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.skipGoodsFeedbacksReaction> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.updateGoodsFeedbackComment> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "author" : {
                  "name" : "name",
                  "type" : "USER"
                },
                "id" : 0,
                "text" : "text",
                "canModify" : true,
                "parentId" : 6,
                "status" : "PUBLISHED"
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
