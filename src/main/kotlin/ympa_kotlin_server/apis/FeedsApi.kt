/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import ympa_kotlin_server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import ympa_kotlin_server.infrastructure.ApiPrincipal
import ympa_kotlin_server.models.ApiClientDataErrorResponse
import ympa_kotlin_server.models.ApiForbiddenErrorResponse
import ympa_kotlin_server.models.ApiLimitErrorResponse
import ympa_kotlin_server.models.ApiLockedErrorResponse
import ympa_kotlin_server.models.ApiNotFoundErrorResponse
import ympa_kotlin_server.models.ApiServerErrorResponse
import ympa_kotlin_server.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_server.models.EmptyApiResponse
import ympa_kotlin_server.models.FeedIndexLogsStatusType
import ympa_kotlin_server.models.GetFeedIndexLogsResponse
import ympa_kotlin_server.models.GetFeedResponse
import ympa_kotlin_server.models.GetFeedsResponse
import ympa_kotlin_server.models.SetFeedParamsRequest

fun Route.FeedsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth") {
    get<Paths.getFeed> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "feed" : {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              }
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeedIndexLogs> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : {
                "feed" : {
                  "id" : 0
                },
                "total" : 2,
                "indexLogRecords" : [ {
                  "offers" : {
                    "rejectedCount" : 5,
                    "totalCount" : 5
                  },
                  "fileTime" : "2000-01-23T04:56:07.000+00:00",
                  "generationId" : 6,
                  "indexType" : "DIFF",
                  "publishedTime" : "2000-01-23T04:56:07.000+00:00",
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 1
                  },
                  "downloadTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "ERROR"
                }, {
                  "offers" : {
                    "rejectedCount" : 5,
                    "totalCount" : 5
                  },
                  "fileTime" : "2000-01-23T04:56:07.000+00:00",
                  "generationId" : 6,
                  "indexType" : "DIFF",
                  "publishedTime" : "2000-01-23T04:56:07.000+00:00",
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 1
                  },
                  "downloadTime" : "2000-01-23T04:56:07.000+00:00",
                  "status" : "ERROR"
                } ]
              },
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    get<Paths.getFeeds> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "feeds" : [ {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              }, {
                "password" : "password",
                "download" : {
                  "error" : {
                    "description" : "description",
                    "type" : "DOWNLOAD_ERROR",
                    "httpStatusCode" : 5
                  }
                },
                "uploadDate" : "2000-01-23T04:56:07.000+00:00",
                "publication" : {
                  "priceAndStockUpdate" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  },
                  "full" : {
                    "fileTime" : "2000-01-23T04:56:07.000+00:00",
                    "publishedTime" : "2000-01-23T04:56:07.000+00:00"
                  }
                },
                "name" : "name",
                "id" : 0,
                "placement" : {
                  "totalOffersCount" : 5
                },
                "login" : "login",
                "url" : "url",
                "content" : {
                  "rejectedOffersCount" : 6,
                  "error" : {
                    "type" : "PARSE_ERROR"
                  },
                  "status" : "ERROR",
                  "totalOffersCount" : 1
                }
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.refreshFeed> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("OAuth") {
    post<Paths.setFeedParams> {
        
        val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "status" : "OK"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
