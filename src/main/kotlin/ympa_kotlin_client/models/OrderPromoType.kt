/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Тип скидки:  * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет.  * `BLUE_SET` — комплекты.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_COUPON` — скидка по промокоду Маркета.  * `MARKET_PROMOCODE` — скидка по промокоду магазина.  * `MARKET_BLUE` — скидка на Маркете.  * `YANDEX_PLUS` — бесплатная доставка с подпиской Яндекс Плюс.  * `YANDEX_EMPLOYEE` — бесплатная доставка по определенным адресам.  * `LIMITED_FREE_DELIVERY_PROMO` — бесплатная доставка по ограниченному предложению.  * `FREE_DELIVERY_THRESHOLD` — бесплатная доставка при достижении определенной суммы заказа.  * `MULTICART_DISCOUNT` — скидка за то, что оформлена мультикорзина.  * `FREE_DELIVERY_FOR_LDI` — бесплатная доставка за то, что один из товаров крупногабаритный.  * `FREE_DELIVERY_FOR_LSC` — бесплатная доставка за то, что одна из корзин в мультикорзине крупногабаритная.  * `FREE_PICKUP` — бесплатная доставка в пункт выдачи заказов.  * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок.  * `CASHBACK` — кешбэк.  * `SUPPLIER_MULTICART_DISCOUNT` — скидка за доставку.  * `SPREAD_DISCOUNT_COUNT` — скидка за количество одинаковых товаров.  * `SPREAD_DISCOUNT_RECEIPT` — скидка от суммы чека.  * `ANNOUNCEMENT_PROMO` — информационная акция, скидка не применяется к товарам.  * `DISCOUNT_BY_PAYMENT_TYPE` — прямая скидка при оплате картой Плюса.  * `PERCENT_DISCOUNT` — прямая скидка в процентах.  * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета.  * `EMPTY_PROMO` — скрытые промокоды.  * `BLOCKING_PROMO` — блокирующее промо.  * `UNKNOWN` — неизвестный тип.  Устаревшие типы:  * `GENERIC_BUNDLE`.  * `MARKET_DEAL`.  * `MARKET_PRIME`.  * `MARKET_COIN`.  * `BERU_PLUS`.  * `PRICE_DROP_AS_YOU_SHOP`.  * `SECRET_SALE`. 
 *
 * Values: DIRECT_DISCOUNT,BLUE_SET,BLUE_FLASH,GENERIC_BUNDLE,MARKET_COUPON,MARKET_PROMOCODE,MARKET_DEAL,MARKET_BLUE,MARKET_PRIME,YANDEX_PLUS,BERU_PLUS,MARKET_COIN,YANDEX_EMPLOYEE,LIMITED_FREE_DELIVERY_PROMO,FREE_DELIVERY_THRESHOLD,MULTICART_DISCOUNT,PRICE_DROP_AS_YOU_SHOP,FREE_DELIVERY_FOR_LDI,FREE_DELIVERY_FOR_LSC,SECRET_SALE,FREE_PICKUP,CHEAPEST_AS_GIFT,CASHBACK,SUPPLIER_MULTICART_DISCOUNT,SPREAD_DISCOUNT_COUNT,SPREAD_DISCOUNT_RECEIPT,ANNOUNCEMENT_PROMO,DISCOUNT_BY_PAYMENT_TYPE,PERCENT_DISCOUNT,DCO_EXTRA_DISCOUNT,EMPTY_PROMO,BLOCKING_PROMO,UNKNOWN
 */

@JsonClass(generateAdapter = false)
enum class OrderPromoType(val value: kotlin.String) {

    @Json(name = "DIRECT_DISCOUNT")
    DIRECT_DISCOUNT("DIRECT_DISCOUNT"),

    @Json(name = "BLUE_SET")
    BLUE_SET("BLUE_SET"),

    @Json(name = "BLUE_FLASH")
    BLUE_FLASH("BLUE_FLASH"),

    @Json(name = "GENERIC_BUNDLE")
    GENERIC_BUNDLE("GENERIC_BUNDLE"),

    @Json(name = "MARKET_COUPON")
    MARKET_COUPON("MARKET_COUPON"),

    @Json(name = "MARKET_PROMOCODE")
    MARKET_PROMOCODE("MARKET_PROMOCODE"),

    @Json(name = "MARKET_DEAL")
    MARKET_DEAL("MARKET_DEAL"),

    @Json(name = "MARKET_BLUE")
    MARKET_BLUE("MARKET_BLUE"),

    @Json(name = "MARKET_PRIME")
    MARKET_PRIME("MARKET_PRIME"),

    @Json(name = "YANDEX_PLUS")
    YANDEX_PLUS("YANDEX_PLUS"),

    @Json(name = "BERU_PLUS")
    BERU_PLUS("BERU_PLUS"),

    @Json(name = "MARKET_COIN")
    MARKET_COIN("MARKET_COIN"),

    @Json(name = "YANDEX_EMPLOYEE")
    YANDEX_EMPLOYEE("YANDEX_EMPLOYEE"),

    @Json(name = "LIMITED_FREE_DELIVERY_PROMO")
    LIMITED_FREE_DELIVERY_PROMO("LIMITED_FREE_DELIVERY_PROMO"),

    @Json(name = "FREE_DELIVERY_THRESHOLD")
    FREE_DELIVERY_THRESHOLD("FREE_DELIVERY_THRESHOLD"),

    @Json(name = "MULTICART_DISCOUNT")
    MULTICART_DISCOUNT("MULTICART_DISCOUNT"),

    @Json(name = "PRICE_DROP_AS_YOU_SHOP")
    PRICE_DROP_AS_YOU_SHOP("PRICE_DROP_AS_YOU_SHOP"),

    @Json(name = "FREE_DELIVERY_FOR_LDI")
    FREE_DELIVERY_FOR_LDI("FREE_DELIVERY_FOR_LDI"),

    @Json(name = "FREE_DELIVERY_FOR_LSC")
    FREE_DELIVERY_FOR_LSC("FREE_DELIVERY_FOR_LSC"),

    @Json(name = "SECRET_SALE")
    SECRET_SALE("SECRET_SALE"),

    @Json(name = "FREE_PICKUP")
    FREE_PICKUP("FREE_PICKUP"),

    @Json(name = "CHEAPEST_AS_GIFT")
    CHEAPEST_AS_GIFT("CHEAPEST_AS_GIFT"),

    @Json(name = "CASHBACK")
    CASHBACK("CASHBACK"),

    @Json(name = "SUPPLIER_MULTICART_DISCOUNT")
    SUPPLIER_MULTICART_DISCOUNT("SUPPLIER_MULTICART_DISCOUNT"),

    @Json(name = "SPREAD_DISCOUNT_COUNT")
    SPREAD_DISCOUNT_COUNT("SPREAD_DISCOUNT_COUNT"),

    @Json(name = "SPREAD_DISCOUNT_RECEIPT")
    SPREAD_DISCOUNT_RECEIPT("SPREAD_DISCOUNT_RECEIPT"),

    @Json(name = "ANNOUNCEMENT_PROMO")
    ANNOUNCEMENT_PROMO("ANNOUNCEMENT_PROMO"),

    @Json(name = "DISCOUNT_BY_PAYMENT_TYPE")
    DISCOUNT_BY_PAYMENT_TYPE("DISCOUNT_BY_PAYMENT_TYPE"),

    @Json(name = "PERCENT_DISCOUNT")
    PERCENT_DISCOUNT("PERCENT_DISCOUNT"),

    @Json(name = "DCO_EXTRA_DISCOUNT")
    DCO_EXTRA_DISCOUNT("DCO_EXTRA_DISCOUNT"),

    @Json(name = "EMPTY_PROMO")
    EMPTY_PROMO("EMPTY_PROMO"),

    @Json(name = "BLOCKING_PROMO")
    BLOCKING_PROMO("BLOCKING_PROMO"),

    @Json(name = "UNKNOWN")
    UNKNOWN("UNKNOWN");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is OrderPromoType) "$data" else null

        /**
         * Returns a valid [OrderPromoType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): OrderPromoType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

