/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Адрес точки продаж. 
 *
 * @param regionId Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
 * @param street Улица.
 * @param number Номер дома.
 * @param building Номер строения.
 * @param estate Номер владения.
 * @param block Номер корпуса.
 * @param additional Дополнительная информация.
 * @param km Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
 * @param city {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
 */


data class OutletAddressDTO (

    /* Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}  */
    @Json(name = "regionId")
    val regionId: kotlin.Long,

    /* Улица. */
    @Json(name = "street")
    val street: kotlin.String? = null,

    /* Номер дома. */
    @Json(name = "number")
    val number: kotlin.String? = null,

    /* Номер строения. */
    @Json(name = "building")
    val building: kotlin.String? = null,

    /* Номер владения. */
    @Json(name = "estate")
    val estate: kotlin.String? = null,

    /* Номер корпуса. */
    @Json(name = "block")
    val block: kotlin.String? = null,

    /* Дополнительная информация. */
    @Json(name = "additional")
    val additional: kotlin.String? = null,

    /* Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица. */
    @Json(name = "km")
    val km: kotlin.Int? = null,

    /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %}  */
    @Json(name = "city")
    val city: kotlin.String? = null

) {


}

