/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Способ оплаты заказа:  * Значения, если выбрана оплата при оформлении заказа (`\"paymentType\": \"PREPAID\"`):    * `YANDEX` — банковской картой.    * `APPLE_PAY` — Apple Pay.    * `GOOGLE_PAY` — Google Pay.    * `CREDIT` — в кредит.    * `TINKOFF_CREDIT` — в кредит в Тинькофф Банке.    * `TINKOFF_INSTALLMENTS` — рассрочка в Тинькофф Банке.    * `EXTERNAL_CERTIFICATE` — подарочным сертификатом (например, из приложения «Сбербанк Онлайн»).    * `SBP` — через систему быстрых платежей.    * `B2B_ACCOUNT_PREPAYMENT` — заказ оплачивает организация.   * Значения, если выбрана оплата при получении заказа (`\"paymentType\": \"POSTPAID\"`):    * `CARD_ON_DELIVERY` — банковской картой.    * `BOUND_CARD_ON_DELIVERY` — привязанной картой при получении.    * `CASH_ON_DELIVERY` — наличными.    * `B2B_ACCOUNT_POSTPAYMENT` — заказ оплачивает организация после доставки.  * `UNKNOWN` — неизвестный тип.  Значение по умолчанию: `CASH_ON_DELIVERY`. 
 *
 * Values: CASH_ON_DELIVERY,CARD_ON_DELIVERY,BOUND_CARD_ON_DELIVERY,YANDEX,APPLE_PAY,EXTERNAL_CERTIFICATE,CREDIT,GOOGLE_PAY,TINKOFF_CREDIT,SBP,TINKOFF_INSTALLMENTS,B2B_ACCOUNT_PREPAYMENT,B2B_ACCOUNT_POSTPAYMENT,UNKNOWN
 */

@JsonClass(generateAdapter = false)
enum class OrderPaymentMethodType(val value: kotlin.String) {

    @Json(name = "CASH_ON_DELIVERY")
    CASH_ON_DELIVERY("CASH_ON_DELIVERY"),

    @Json(name = "CARD_ON_DELIVERY")
    CARD_ON_DELIVERY("CARD_ON_DELIVERY"),

    @Json(name = "BOUND_CARD_ON_DELIVERY")
    BOUND_CARD_ON_DELIVERY("BOUND_CARD_ON_DELIVERY"),

    @Json(name = "YANDEX")
    YANDEX("YANDEX"),

    @Json(name = "APPLE_PAY")
    APPLE_PAY("APPLE_PAY"),

    @Json(name = "EXTERNAL_CERTIFICATE")
    EXTERNAL_CERTIFICATE("EXTERNAL_CERTIFICATE"),

    @Json(name = "CREDIT")
    CREDIT("CREDIT"),

    @Json(name = "GOOGLE_PAY")
    GOOGLE_PAY("GOOGLE_PAY"),

    @Json(name = "TINKOFF_CREDIT")
    TINKOFF_CREDIT("TINKOFF_CREDIT"),

    @Json(name = "SBP")
    SBP("SBP"),

    @Json(name = "TINKOFF_INSTALLMENTS")
    TINKOFF_INSTALLMENTS("TINKOFF_INSTALLMENTS"),

    @Json(name = "B2B_ACCOUNT_PREPAYMENT")
    B2B_ACCOUNT_PREPAYMENT("B2B_ACCOUNT_PREPAYMENT"),

    @Json(name = "B2B_ACCOUNT_POSTPAYMENT")
    B2B_ACCOUNT_POSTPAYMENT("B2B_ACCOUNT_POSTPAYMENT"),

    @Json(name = "UNKNOWN")
    UNKNOWN("UNKNOWN");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is OrderPaymentMethodType) "$data" else null

        /**
         * Returns a valid [OrderPaymentMethodType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): OrderPaymentMethodType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

