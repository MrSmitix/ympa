/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Тип остатка на складе.
 *
 * Values: FIT,DEFECT,ANOMALY,SURPLUS,EXPIRED,MISGRADING,UNDEFINED,INCORRECT_IMEI,INCORRECT_SERIAL_NUMBER,INCORRECT_CIS,PART_MISSING,NON_COMPLIENT,NOT_ACCEPTABLE,SERVICE,MARKDOWN,DEMO,REPAIR,FIRMWARE,UNKNOWN
 */

@JsonClass(generateAdapter = false)
enum class ReturnInstanceStockType(val value: kotlin.String) {

    @Json(name = "FIT")
    FIT("FIT"),

    @Json(name = "DEFECT")
    DEFECT("DEFECT"),

    @Json(name = "ANOMALY")
    ANOMALY("ANOMALY"),

    @Json(name = "SURPLUS")
    SURPLUS("SURPLUS"),

    @Json(name = "EXPIRED")
    EXPIRED("EXPIRED"),

    @Json(name = "MISGRADING")
    MISGRADING("MISGRADING"),

    @Json(name = "UNDEFINED")
    UNDEFINED("UNDEFINED"),

    @Json(name = "INCORRECT_IMEI")
    INCORRECT_IMEI("INCORRECT_IMEI"),

    @Json(name = "INCORRECT_SERIAL_NUMBER")
    INCORRECT_SERIAL_NUMBER("INCORRECT_SERIAL_NUMBER"),

    @Json(name = "INCORRECT_CIS")
    INCORRECT_CIS("INCORRECT_CIS"),

    @Json(name = "PART_MISSING")
    PART_MISSING("PART_MISSING"),

    @Json(name = "NON_COMPLIENT")
    NON_COMPLIENT("NON_COMPLIENT"),

    @Json(name = "NOT_ACCEPTABLE")
    NOT_ACCEPTABLE("NOT_ACCEPTABLE"),

    @Json(name = "SERVICE")
    SERVICE("SERVICE"),

    @Json(name = "MARKDOWN")
    MARKDOWN("MARKDOWN"),

    @Json(name = "DEMO")
    DEMO("DEMO"),

    @Json(name = "REPAIR")
    REPAIR("REPAIR"),

    @Json(name = "FIRMWARE")
    FIRMWARE("FIRMWARE"),

    @Json(name = "UNKNOWN")
    UNKNOWN("UNKNOWN");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ReturnInstanceStockType) "$data" else null

        /**
         * Returns a valid [ReturnInstanceStockType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ReturnInstanceStockType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

