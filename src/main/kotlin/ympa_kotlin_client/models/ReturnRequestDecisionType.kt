/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Решение по возврату.
 *
 * Values: REFUND_MONEY,REFUND_MONEY_INCLUDING_SHIPMENT,REPAIR,REPLACE,SEND_TO_EXAMINATION,DECLINE_REFUND,OTHER_DECISION
 */

@JsonClass(generateAdapter = false)
enum class ReturnRequestDecisionType(val value: kotlin.String) {

    @Json(name = "REFUND_MONEY")
    REFUND_MONEY("REFUND_MONEY"),

    @Json(name = "REFUND_MONEY_INCLUDING_SHIPMENT")
    REFUND_MONEY_INCLUDING_SHIPMENT("REFUND_MONEY_INCLUDING_SHIPMENT"),

    @Json(name = "REPAIR")
    REPAIR("REPAIR"),

    @Json(name = "REPLACE")
    REPLACE("REPLACE"),

    @Json(name = "SEND_TO_EXAMINATION")
    SEND_TO_EXAMINATION("SEND_TO_EXAMINATION"),

    @Json(name = "DECLINE_REFUND")
    DECLINE_REFUND("DECLINE_REFUND"),

    @Json(name = "OTHER_DECISION")
    OTHER_DECISION("OTHER_DECISION");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ReturnRequestDecisionType) "$data" else null

        /**
         * Returns a valid [ReturnRequestDecisionType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ReturnRequestDecisionType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

