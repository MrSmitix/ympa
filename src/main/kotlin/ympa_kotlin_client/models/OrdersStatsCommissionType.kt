/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Услуга:  * `FEE` — размещение товара на Маркете. * `FULFILLMENT` — складская обработка. Не возвращается с 1 января 2024 года. * `LOYALTY_PARTICIPATION_FEE` — участие в программе лояльности и отзывы за баллы. * `AUCTION_PROMOTION` — буст продаж с оплатой за продажи. * `INSTALLMENT` — рассрочка. Не возвращается с 24 февраля 2022 года. * `DELIVERY_TO_CUSTOMER` — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `EXPRESS_DELIVERY_TO_CUSTOMER` — экспресс-доставка покупателю (Экспресс). * `AGENCY` — прием платежа покупателя. * `PAYMENT_TRANSFER` — перевод платежа покупателя. * `RETURNED_ORDERS_STORAGE` — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `SORTING` — обработка заказа (FBS). * `INTAKE_SORTING` — организация забора заказов со склада продавца (FBS). * `RETURN_PROCESSING` — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `ILLIQUID_GOODS_SALE` — вознаграждение за продажу невывезенных товаров. 
 *
 * Values: FEE,FULFILLMENT,LOYALTY_PARTICIPATION_FEE,AUCTION_PROMOTION,INSTALLMENT,DELIVERY_TO_CUSTOMER,EXPRESS_DELIVERY_TO_CUSTOMER,AGENCY,PAYMENT_TRANSFER,RETURNED_ORDERS_STORAGE,SORTING,INTAKE_SORTING,RETURN_PROCESSING,ILLIQUID_GOODS_SALE
 */

@JsonClass(generateAdapter = false)
enum class OrdersStatsCommissionType(val value: kotlin.String) {

    @Json(name = "FEE")
    FEE("FEE"),

    @Json(name = "FULFILLMENT")
    FULFILLMENT("FULFILLMENT"),

    @Json(name = "LOYALTY_PARTICIPATION_FEE")
    LOYALTY_PARTICIPATION_FEE("LOYALTY_PARTICIPATION_FEE"),

    @Json(name = "AUCTION_PROMOTION")
    AUCTION_PROMOTION("AUCTION_PROMOTION"),

    @Json(name = "INSTALLMENT")
    INSTALLMENT("INSTALLMENT"),

    @Json(name = "DELIVERY_TO_CUSTOMER")
    DELIVERY_TO_CUSTOMER("DELIVERY_TO_CUSTOMER"),

    @Json(name = "EXPRESS_DELIVERY_TO_CUSTOMER")
    EXPRESS_DELIVERY_TO_CUSTOMER("EXPRESS_DELIVERY_TO_CUSTOMER"),

    @Json(name = "AGENCY")
    AGENCY("AGENCY"),

    @Json(name = "PAYMENT_TRANSFER")
    PAYMENT_TRANSFER("PAYMENT_TRANSFER"),

    @Json(name = "RETURNED_ORDERS_STORAGE")
    RETURNED_ORDERS_STORAGE("RETURNED_ORDERS_STORAGE"),

    @Json(name = "SORTING")
    SORTING("SORTING"),

    @Json(name = "INTAKE_SORTING")
    INTAKE_SORTING("INTAKE_SORTING"),

    @Json(name = "RETURN_PROCESSING")
    RETURN_PROCESSING("RETURN_PROCESSING"),

    @Json(name = "ILLIQUID_GOODS_SALE")
    ILLIQUID_GOODS_SALE("ILLIQUID_GOODS_SALE");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is OrdersStatsCommissionType) "$data" else null

        /**
         * Returns a valid [OrdersStatsCommissionType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): OrdersStatsCommissionType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

