/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Тип логистической точки:    * `WAREHOUSE` — склад.   * `PICKUP_POINT` — обычная точка выдачи заказов (ПВЗ).   * `PICKUP_TERMINAL` — постамат.   * `PICKUP_POST_OFFICE` — отделение почтовой связи (ОПС).   * `PICKUP_MIXED` — торговый зал и пункт выдачи заказов.   * `PICKUP_RETAIL` — торговый зал. 
 *
 * Values: WAREHOUSE,PICKUP_POINT,PICKUP_TERMINAL,PICKUP_POST_OFFICE,PICKUP_MIXED,PICKUP_RETAIL,UNKNOWN
 */

@JsonClass(generateAdapter = false)
enum class LogisticPointType(val value: kotlin.String) {

    @Json(name = "WAREHOUSE")
    WAREHOUSE("WAREHOUSE"),

    @Json(name = "PICKUP_POINT")
    PICKUP_POINT("PICKUP_POINT"),

    @Json(name = "PICKUP_TERMINAL")
    PICKUP_TERMINAL("PICKUP_TERMINAL"),

    @Json(name = "PICKUP_POST_OFFICE")
    PICKUP_POST_OFFICE("PICKUP_POST_OFFICE"),

    @Json(name = "PICKUP_MIXED")
    PICKUP_MIXED("PICKUP_MIXED"),

    @Json(name = "PICKUP_RETAIL")
    PICKUP_RETAIL("PICKUP_RETAIL"),

    @Json(name = "UNKNOWN")
    UNKNOWN("UNKNOWN");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is LogisticPointType) "$data" else null

        /**
         * Returns a valid [LogisticPointType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): LogisticPointType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

