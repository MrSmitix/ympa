/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
 *
 * Values: OTHER,CONTINENT,REGION,COUNTRY,COUNTRY_DISTRICT,REPUBLIC,CITY,VILLAGE,CITY_DISTRICT,SUBWAY_STATION,REPUBLIC_AREA
 */

@JsonClass(generateAdapter = false)
enum class RegionType(val value: kotlin.String) {

    @Json(name = "OTHER")
    OTHER("OTHER"),

    @Json(name = "CONTINENT")
    CONTINENT("CONTINENT"),

    @Json(name = "REGION")
    REGION("REGION"),

    @Json(name = "COUNTRY")
    COUNTRY("COUNTRY"),

    @Json(name = "COUNTRY_DISTRICT")
    COUNTRY_DISTRICT("COUNTRY_DISTRICT"),

    @Json(name = "REPUBLIC")
    REPUBLIC("REPUBLIC"),

    @Json(name = "CITY")
    CITY("CITY"),

    @Json(name = "VILLAGE")
    VILLAGE("VILLAGE"),

    @Json(name = "CITY_DISTRICT")
    CITY_DISTRICT("CITY_DISTRICT"),

    @Json(name = "SUBWAY_STATION")
    SUBWAY_STATION("SUBWAY_STATION"),

    @Json(name = "REPUBLIC_AREA")
    REPUBLIC_AREA("REPUBLIC_AREA");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is RegionType) "$data" else null

        /**
         * Returns a valid [RegionType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): RegionType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

