/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 
 * @param offerName Название товара.
 * @param marketSku SKU на Маркете.
 * @param shopSku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param count Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
 * @param prices Цена или скидки на товар.
 * @param warehouse 
 * @param details Информация об удалении товара из заказа.
 * @param cisList Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
 * @param initialCount Первоначальное количество единиц товара.
 * @param bidFee Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
 * @param cofinanceThreshold Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
 * @param cofinanceValue Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
 */
object OrdersStatsItemDTOs : BaseTable<OrdersStatsItemDTO>("OrdersStatsItemDTO") {
    val offerName = text("offerName") /* null */ /* Название товара. */
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val shopSku = text("shopSku") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val count = int("count") /* null */ /* Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`.  */
    val warehouse = long("warehouse") /* null */
    val initialCount = int("initialCount") /* null */ /* Первоначальное количество единиц товара. */
    val bidFee = int("bidFee") /* null */ /* Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.  */
    val cofinanceThreshold = decimal("cofinanceThreshold") /* null */ /* Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.  */
    val cofinanceValue = decimal("cofinanceValue") /* null */ /* Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.  */

    /**
     * Create an entity of type OrdersStatsItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersStatsItemDTO(
        offerName = row[offerName]  /* kotlin.String? */ /* Название товара. */,
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        shopSku = row[shopSku]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        count = row[count]  /* kotlin.Int? */ /* Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`.  */,
        prices = emptyList() /* kotlin.Array<OrdersStatsPriceDTO>? */ /* Цена или скидки на товар. */,
        warehouse = OrdersStatsWarehouseDTOs.createEntity(row, withReferences) /* OrdersStatsWarehouseDTO? */,
        details = emptyList() /* kotlin.Array<OrdersStatsDetailsDTO>? */ /* Информация об удалении товара из заказа. */,
        cisList = emptyList() /* kotlin.Array<kotlin.String>? */ /* Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/). */,
        initialCount = row[initialCount]  /* kotlin.Int? */ /* Первоначальное количество единиц товара. */,
        bidFee = row[bidFee]  /* kotlin.Int? */ /* Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.  */,
        cofinanceThreshold = row[cofinanceThreshold]  /* java.math.BigDecimal? */ /* Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.  */,
        cofinanceValue = row[cofinanceValue]  /* java.math.BigDecimal? */ /* Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.  */
    )

    /**
    * Assign all the columns from the entity of type OrdersStatsItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersStatsItemDTO()
    * database.update(OrdersStatsItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersStatsItemDTO) {
        this.apply {
            set(OrdersStatsItemDTOs.offerName, entity.offerName)
            set(OrdersStatsItemDTOs.marketSku, entity.marketSku)
            set(OrdersStatsItemDTOs.shopSku, entity.shopSku)
            set(OrdersStatsItemDTOs.count, entity.count)
            set(OrdersStatsItemDTOs.warehouse, entity.warehouse)
            set(OrdersStatsItemDTOs.initialCount, entity.initialCount)
            set(OrdersStatsItemDTOs.bidFee, entity.bidFee)
            set(OrdersStatsItemDTOs.cofinanceThreshold, entity.cofinanceThreshold)
            set(OrdersStatsItemDTOs.cofinanceValue, entity.cofinanceValue)
        }
    }

}


object OrdersStatsItemDTOOrdersStatsPriceDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsItemDTOOrdersStatsPriceDTO") {
    val ordersStatsItemDTO = long("ordersStatsItemDTO")
    val ordersStatsPriceDTO = long("ordersStatsPriceDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsItemDTO] ?: 0, row[ordersStatsPriceDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsItemDTOOrdersStatsPriceDTO.ordersStatsItemDTO, entity.first)
            set(OrdersStatsItemDTOOrdersStatsPriceDTO.ordersStatsPriceDTO, entity.second)
        }
    }

}

object OrdersStatsItemDTOOrdersStatsDetailsDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsItemDTOOrdersStatsDetailsDTO") {
    val ordersStatsItemDTO = long("ordersStatsItemDTO")
    val ordersStatsDetailsDTO = long("ordersStatsDetailsDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsItemDTO] ?: 0, row[ordersStatsDetailsDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsItemDTOOrdersStatsDetailsDTO.ordersStatsItemDTO, entity.first)
            set(OrdersStatsItemDTOOrdersStatsDetailsDTO.ordersStatsDetailsDTO, entity.second)
        }
    }

}

object OrdersStatsItemDTOCisList : BaseTable<Pair<kotlin.Long, kotlin.String>>("OrdersStatsItemDTOCisList") {
    val ordersStatsItemDTO = long("ordersStatsItemDTO")
    val cisList = text("cisList")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[ordersStatsItemDTO] ?: 0, row[cisList] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(OrdersStatsItemDTOCisList.ordersStatsItemDTO, entity.first)
            set(OrdersStatsItemDTOCisList.cisList, entity.second)
        }
    }

}

