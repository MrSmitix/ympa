/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Товар, который участвует или может участвовать в акции.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param status 
 * @param params 
 * @param autoParticipatingDetails 
 */
object GetPromoOfferDTOs : BaseTable<GetPromoOfferDTO>("GetPromoOfferDTO") {
    val offerId = text("offerId") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val status = long("status")
    val params = long("params")
    val autoParticipatingDetails = long("autoParticipatingDetails") /* null */

    /**
     * Create an entity of type GetPromoOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetPromoOfferDTO(
        offerId = row[offerId] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        status = PromoOfferParticipationStatusTypes.createEntity(row, withReferences) /* PromoOfferParticipationStatusType */,
        params = PromoOfferParamsDTOs.createEntity(row, withReferences) /* PromoOfferParamsDTO */,
        autoParticipatingDetails = PromoOfferAutoParticipatingDetailsDTOs.createEntity(row, withReferences) /* PromoOfferAutoParticipatingDetailsDTO? */
    )

    /**
    * Assign all the columns from the entity of type GetPromoOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetPromoOfferDTO()
    * database.update(GetPromoOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetPromoOfferDTO) {
        this.apply {
            set(GetPromoOfferDTOs.offerId, entity.offerId)
            set(GetPromoOfferDTOs.status, entity.status)
            set(GetPromoOfferDTOs.params, entity.params)
            set(GetPromoOfferDTOs.autoParticipatingDetails, entity.autoParticipatingDetails)
        }
    }

}


