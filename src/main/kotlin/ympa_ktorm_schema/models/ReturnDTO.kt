/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Возврат заказа.
 * @param items Список товаров в возврате.
 * @param id Идентификатор возврата.
 * @param orderId Номер заказа.
 * @param creationDate Дата создания возврата клиентом.
 * @param updateDate Дата обновления возврата.
 * @param refundStatus 
 * @param logisticPickupPoint 
 * @param shipmentRecipientType 
 * @param shipmentStatus 
 * @param refundAmount Сумма возврата.
 * @param returnType 
 * @param fastReturn Используется ли опция **Быстрый возврат денег за дешевый брак**. 
 */
object ReturnDTOs : BaseTable<ReturnDTO>("ReturnDTO") {
    val id = long("id") /* null */ /* Идентификатор возврата. */
    val orderId = long("orderId") /* null */ /* Номер заказа. */
    val creationDate = datetime("creationDate") /* null */ /* Дата создания возврата клиентом. */
    val updateDate = datetime("updateDate") /* null */ /* Дата обновления возврата. */
    val refundStatus = long("refundStatus") /* null */
    val logisticPickupPoint = long("logisticPickupPoint") /* null */
    val shipmentRecipientType = long("shipmentRecipientType") /* null */
    val shipmentStatus = long("shipmentStatus") /* null */
    val refundAmount = long("refundAmount") /* null */ /* Сумма возврата. */
    val returnType = long("returnType") /* null */
    val fastReturn = boolean("fastReturn") /* null */ /* Используется ли опция **Быстрый возврат денег за дешевый брак**.  */

    /**
     * Create an entity of type ReturnDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ReturnDTO(
        items = emptyList() /* kotlin.Array<ReturnItemDTO> */ /* Список товаров в возврате. */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор возврата. */,
        orderId = row[orderId]  /* kotlin.Long? */ /* Номер заказа. */,
        creationDate = row[creationDate]  /* java.time.LocalDateTime? */ /* Дата создания возврата клиентом. */,
        updateDate = row[updateDate]  /* java.time.LocalDateTime? */ /* Дата обновления возврата. */,
        refundStatus = RefundStatusTypes.createEntity(row, withReferences) /* RefundStatusType? */,
        logisticPickupPoint = LogisticPickupPointDTOs.createEntity(row, withReferences) /* LogisticPickupPointDTO? */,
        shipmentRecipientType = RecipientTypes.createEntity(row, withReferences) /* RecipientType? */,
        shipmentStatus = ReturnShipmentStatusTypes.createEntity(row, withReferences) /* ReturnShipmentStatusType? */,
        refundAmount = row[refundAmount]  /* kotlin.Long? */ /* Сумма возврата. */,
        returnType = ReturnTypes.createEntity(row, withReferences) /* ReturnType? */,
        fastReturn = row[fastReturn]  /* kotlin.Boolean? */ /* Используется ли опция **Быстрый возврат денег за дешевый брак**.  */
    )

    /**
    * Assign all the columns from the entity of type ReturnDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ReturnDTO()
    * database.update(ReturnDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ReturnDTO) {
        this.apply {
            set(ReturnDTOs.id, entity.id)
            set(ReturnDTOs.orderId, entity.orderId)
            set(ReturnDTOs.creationDate, entity.creationDate)
            set(ReturnDTOs.updateDate, entity.updateDate)
            set(ReturnDTOs.refundStatus, entity.refundStatus)
            set(ReturnDTOs.logisticPickupPoint, entity.logisticPickupPoint)
            set(ReturnDTOs.shipmentRecipientType, entity.shipmentRecipientType)
            set(ReturnDTOs.shipmentStatus, entity.shipmentStatus)
            set(ReturnDTOs.refundAmount, entity.refundAmount)
            set(ReturnDTOs.returnType, entity.returnType)
            set(ReturnDTOs.fastReturn, entity.fastReturn)
        }
    }

}


object ReturnDTOReturnItemDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ReturnDTOReturnItemDTO") {
    val returnDTO = long("returnDTO")
    val returnItemDTO = long("returnItemDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[returnDTO] ?: 0, row[returnItemDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ReturnDTOReturnItemDTO.returnDTO, entity.first)
            set(ReturnDTOReturnItemDTO.returnItemDTO, entity.second)
        }
    }

}

