/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`. 
 * @param limitingParameterId Идентификатор ограничивающей характеристики.
 * @param limitedValues Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
 */
object ValueRestrictionDTOs : BaseTable<ValueRestrictionDTO>("ValueRestrictionDTO") {
    val limitingParameterId = long("limitingParameterId") /* Идентификатор ограничивающей характеристики. */

    /**
     * Create an entity of type ValueRestrictionDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ValueRestrictionDTO(
        limitingParameterId = row[limitingParameterId] ?: 0 /* kotlin.Long */ /* Идентификатор ограничивающей характеристики. */,
        limitedValues = emptyList() /* kotlin.Array<OptionValuesLimitedDTO> */ /* Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики. */
    )

    /**
    * Assign all the columns from the entity of type ValueRestrictionDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ValueRestrictionDTO()
    * database.update(ValueRestrictionDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ValueRestrictionDTO) {
        this.apply {
            set(ValueRestrictionDTOs.limitingParameterId, entity.limitingParameterId)
        }
    }

}


object ValueRestrictionDTOOptionValuesLimitedDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ValueRestrictionDTOOptionValuesLimitedDTO") {
    val valueRestrictionDTO = long("valueRestrictionDTO")
    val optionValuesLimitedDTO = long("optionValuesLimitedDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[valueRestrictionDTO] ?: 0, row[optionValuesLimitedDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ValueRestrictionDTOOptionValuesLimitedDTO.valueRestrictionDTO, entity.first)
            set(ValueRestrictionDTOOptionValuesLimitedDTO.optionValuesLimitedDTO, entity.second)
        }
    }

}

