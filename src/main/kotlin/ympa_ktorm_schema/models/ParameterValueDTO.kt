/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 
 * @param parameterId Идентификатор характеристики.
 * @param unitId Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
 * @param valueId Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. 
 * @param value Значение.
 */
object ParameterValueDTOs : BaseTable<ParameterValueDTO>("ParameterValueDTO") {
    val parameterId = long("parameterId") /* Идентификатор характеристики. */
    val unitId = long("unitId") /* null */ /* Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию. */
    val valueId = long("valueId") /* null */ /* Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.  */
    val value = text("value") /* null */ /* Значение. */

    /**
     * Create an entity of type ParameterValueDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ParameterValueDTO(
        parameterId = row[parameterId] ?: 0 /* kotlin.Long */ /* Идентификатор характеристики. */,
        unitId = row[unitId]  /* kotlin.Long? */ /* Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию. */,
        valueId = row[valueId]  /* kotlin.Long? */ /* Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.  */,
        value = row[value]  /* kotlin.String? */ /* Значение. */
    )

    /**
    * Assign all the columns from the entity of type ParameterValueDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ParameterValueDTO()
    * database.update(ParameterValueDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ParameterValueDTO) {
        this.apply {
            set(ParameterValueDTOs.parameterId, entity.parameterId)
            set(ParameterValueDTOs.unitId, entity.unitId)
            set(ParameterValueDTOs.valueId, entity.valueId)
            set(ParameterValueDTOs.value, entity.value)
        }
    }

}


