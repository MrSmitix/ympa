/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param offerIds Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. 
 * @param cardStatuses Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
 * @param categoryIds Фильтр по категориям на Маркете.
 */
object GetOfferCardsContentStatusRequests : BaseTable<GetOfferCardsContentStatusRequest>("GetOfferCardsContentStatusRequest") {

    /**
     * Create an entity of type GetOfferCardsContentStatusRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetOfferCardsContentStatusRequest(
        offerIds = emptyList() /* kotlin.collections.Set<kotlin.String>? */ /* Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  */,
        cardStatuses = emptyList() /* kotlin.collections.Set<OfferCardStatusType>? */ /* Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)  */,
        categoryIds = emptyList() /* kotlin.collections.Set<kotlin.Int>? */ /* Фильтр по категориям на Маркете. */
    )

    /**
    * Assign all the columns from the entity of type GetOfferCardsContentStatusRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetOfferCardsContentStatusRequest()
    * database.update(GetOfferCardsContentStatusRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetOfferCardsContentStatusRequest) {
        this.apply {
        }
    }

}


object GetOfferCardsContentStatusRequestOfferIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferCardsContentStatusRequestOfferIds") {
    val getOfferCardsContentStatusRequest = long("getOfferCardsContentStatusRequest")
    val offerIds = text("offerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferCardsContentStatusRequest] ?: 0, row[offerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferCardsContentStatusRequestOfferIds.getOfferCardsContentStatusRequest, entity.first)
            set(GetOfferCardsContentStatusRequestOfferIds.offerIds, entity.second)
        }
    }

}

object GetOfferCardsContentStatusRequestOfferCardStatusType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferCardsContentStatusRequestOfferCardStatusType") {
    val getOfferCardsContentStatusRequest = long("getOfferCardsContentStatusRequest")
    val offerCardStatusType = long("offerCardStatusType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferCardsContentStatusRequest] ?: 0, row[offerCardStatusType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferCardsContentStatusRequestOfferCardStatusType.getOfferCardsContentStatusRequest, entity.first)
            set(GetOfferCardsContentStatusRequestOfferCardStatusType.offerCardStatusType, entity.second)
        }
    }

}

object GetOfferCardsContentStatusRequestCategoryIds : BaseTable<Pair<kotlin.Long, kotlin.Int>>("GetOfferCardsContentStatusRequestCategoryIds") {
    val getOfferCardsContentStatusRequest = long("getOfferCardsContentStatusRequest")
    val categoryIds = int("categoryIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[getOfferCardsContentStatusRequest] ?: 0, row[categoryIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(GetOfferCardsContentStatusRequestCategoryIds.getOfferCardsContentStatusRequest, entity.first)
            set(GetOfferCardsContentStatusRequestCategoryIds.categoryIds, entity.second)
        }
    }

}

