/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации отчета.
 * @param dateFrom Начало периода, включительно.
 * @param dateTo Конец периода, включительно.
 * @param grouping 
 * @param businessId Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
 * @param campaignId Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
 */
object GenerateShowsSalesReportRequests : BaseTable<GenerateShowsSalesReportRequest>("GenerateShowsSalesReportRequest") {
    val dateFrom = date("dateFrom") /* Начало периода, включительно. */
    val dateTo = date("dateTo") /* Конец периода, включительно. */
    val grouping = long("grouping")
    val businessId = long("businessId") /* null */ /* Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */
    val campaignId = long("campaignId") /* null */ /* Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */

    /**
     * Create an entity of type GenerateShowsSalesReportRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GenerateShowsSalesReportRequest(
        dateFrom = row[dateFrom] /* java.time.LocalDate */ /* Начало периода, включительно. */,
        dateTo = row[dateTo] /* java.time.LocalDate */ /* Конец периода, включительно. */,
        grouping = ShowsSalesGroupingTypes.createEntity(row, withReferences) /* ShowsSalesGroupingType */,
        businessId = row[businessId]  /* kotlin.Long? */ /* Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */,
        campaignId = row[campaignId]  /* kotlin.Long? */ /* Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.  */
    )

    /**
    * Assign all the columns from the entity of type GenerateShowsSalesReportRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GenerateShowsSalesReportRequest()
    * database.update(GenerateShowsSalesReportRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GenerateShowsSalesReportRequest) {
        this.apply {
            set(GenerateShowsSalesReportRequests.dateFrom, entity.dateFrom)
            set(GenerateShowsSalesReportRequests.dateTo, entity.dateTo)
            set(GenerateShowsSalesReportRequests.grouping, entity.grouping)
            set(GenerateShowsSalesReportRequests.businessId, entity.businessId)
            set(GenerateShowsSalesReportRequests.campaignId, entity.campaignId)
        }
    }

}


