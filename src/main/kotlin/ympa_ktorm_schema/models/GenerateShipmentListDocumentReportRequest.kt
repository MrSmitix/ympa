/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации документа. 
 * @param campaignId Идентификатор кампании.
 * @param shipmentId Идентификатор отгрузки.
 * @param orderIds Фильтр по идентификаторам заказа в отгрузке.
 */
object GenerateShipmentListDocumentReportRequests : BaseTable<GenerateShipmentListDocumentReportRequest>("GenerateShipmentListDocumentReportRequest") {
    val campaignId = long("campaignId") /* Идентификатор кампании. */
    val shipmentId = long("shipmentId") /* null */ /* Идентификатор отгрузки. */

    /**
     * Create an entity of type GenerateShipmentListDocumentReportRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GenerateShipmentListDocumentReportRequest(
        campaignId = row[campaignId] ?: 0 /* kotlin.Long */ /* Идентификатор кампании. */,
        shipmentId = row[shipmentId]  /* kotlin.Long? */ /* Идентификатор отгрузки. */,
        orderIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Фильтр по идентификаторам заказа в отгрузке. */
    )

    /**
    * Assign all the columns from the entity of type GenerateShipmentListDocumentReportRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GenerateShipmentListDocumentReportRequest()
    * database.update(GenerateShipmentListDocumentReportRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GenerateShipmentListDocumentReportRequest) {
        this.apply {
            set(GenerateShipmentListDocumentReportRequests.campaignId, entity.campaignId)
            set(GenerateShipmentListDocumentReportRequests.shipmentId, entity.shipmentId)
        }
    }

}


object GenerateShipmentListDocumentReportRequestOrderIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GenerateShipmentListDocumentReportRequestOrderIds") {
    val generateShipmentListDocumentReportRequest = long("generateShipmentListDocumentReportRequest")
    val orderIds = long("orderIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[generateShipmentListDocumentReportRequest] ?: 0, row[orderIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GenerateShipmentListDocumentReportRequestOrderIds.generateShipmentListDocumentReportRequest, entity.first)
            set(GenerateShipmentListDocumentReportRequestOrderIds.orderIds, entity.second)
        }
    }

}

