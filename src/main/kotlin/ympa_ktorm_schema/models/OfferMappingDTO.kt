/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о текущей карточке товара на Маркете.
 * @param marketSku SKU на Маркете.
 * @param modelId Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр `marketSku`), но одинаковый идентификатор модели товара. 
 * @param categoryId Идентификатор категории для текущей карточки товара на Маркете.
 */
object OfferMappingDTOs : BaseTable<OfferMappingDTO>("OfferMappingDTO") {
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val modelId = long("modelId") /* null */ /* Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр `marketSku`), но одинаковый идентификатор модели товара.  */
    val categoryId = long("categoryId") /* null */ /* Идентификатор категории для текущей карточки товара на Маркете. */

    /**
     * Create an entity of type OfferMappingDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OfferMappingDTO(
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        modelId = row[modelId]  /* kotlin.Long? */ /* Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр `marketSku`), но одинаковый идентификатор модели товара.  */,
        categoryId = row[categoryId]  /* kotlin.Long? */ /* Идентификатор категории для текущей карточки товара на Маркете. */
    )

    /**
    * Assign all the columns from the entity of type OfferMappingDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OfferMappingDTO()
    * database.update(OfferMappingDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OfferMappingDTO) {
        this.apply {
            set(OfferMappingDTOs.marketSku, entity.marketSku)
            set(OfferMappingDTOs.modelId, entity.modelId)
            set(OfferMappingDTOs.categoryId, entity.categoryId)
        }
    }

}


