/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Параметры размещения товара в магазине.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param quantum 
 * @param available Есть ли товар в продаже. 
 * @param basicPrice 
 * @param campaignPrice 
 * @param status 
 * @param errors Ошибки, препятствующие размещению товара на витрине. 
 * @param warnings Предупреждения, не препятствующие размещению товара на витрине. 
 */
object GetCampaignOfferDTOs : BaseTable<GetCampaignOfferDTO>("GetCampaignOfferDTO") {
    val offerId = text("offerId") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val quantum = long("quantum") /* null */
    val available = boolean("available") /* null */ /* Есть ли товар в продаже.  */
    val basicPrice = long("basicPrice") /* null */
    val campaignPrice = long("campaignPrice") /* null */
    val status = long("status") /* null */

    /**
     * Create an entity of type GetCampaignOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetCampaignOfferDTO(
        offerId = row[offerId] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        quantum = QuantumDTOs.createEntity(row, withReferences) /* QuantumDTO? */,
        available = row[available]  /* kotlin.Boolean? */ /* Есть ли товар в продаже.  */,
        basicPrice = GetPriceWithDiscountDTOs.createEntity(row, withReferences) /* GetPriceWithDiscountDTO? */,
        campaignPrice = GetPriceWithVatDTOs.createEntity(row, withReferences) /* GetPriceWithVatDTO? */,
        status = OfferCampaignStatusTypes.createEntity(row, withReferences) /* OfferCampaignStatusType? */,
        errors = emptyList() /* kotlin.Array<OfferErrorDTO>? */ /* Ошибки, препятствующие размещению товара на витрине.  */,
        warnings = emptyList() /* kotlin.Array<OfferErrorDTO>? */ /* Предупреждения, не препятствующие размещению товара на витрине.  */
    )

    /**
    * Assign all the columns from the entity of type GetCampaignOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetCampaignOfferDTO()
    * database.update(GetCampaignOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetCampaignOfferDTO) {
        this.apply {
            set(GetCampaignOfferDTOs.offerId, entity.offerId)
            set(GetCampaignOfferDTOs.quantum, entity.quantum)
            set(GetCampaignOfferDTOs.available, entity.available)
            set(GetCampaignOfferDTOs.basicPrice, entity.basicPrice)
            set(GetCampaignOfferDTOs.campaignPrice, entity.campaignPrice)
            set(GetCampaignOfferDTOs.status, entity.status)
        }
    }

}


object GetCampaignOfferDTOOfferErrorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetCampaignOfferDTOOfferErrorDTO") {
    val getCampaignOfferDTO = long("getCampaignOfferDTO")
    val offerErrorDTO = long("offerErrorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getCampaignOfferDTO] ?: 0, row[offerErrorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetCampaignOfferDTOOfferErrorDTO.getCampaignOfferDTO, entity.first)
            set(GetCampaignOfferDTOOfferErrorDTO.offerErrorDTO, entity.second)
        }
    }

}

object GetCampaignOfferDTOOfferErrorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetCampaignOfferDTOOfferErrorDTO") {
    val getCampaignOfferDTO = long("getCampaignOfferDTO")
    val offerErrorDTO = long("offerErrorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getCampaignOfferDTO] ?: 0, row[offerErrorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetCampaignOfferDTOOfferErrorDTO.getCampaignOfferDTO, entity.first)
            set(GetCampaignOfferDTOOfferErrorDTO.offerErrorDTO, entity.second)
        }
    }

}

