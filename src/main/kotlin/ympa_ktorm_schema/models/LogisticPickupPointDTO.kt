/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Описание пункта вывоза для возврата.
 * @param id Идентификатор пункта вывоза.
 * @param name Название пункта вывоза.
 * @param address 
 * @param instruction Дополнительные инструкции к вывозу.
 * @param type 
 * @param logisticPartnerId Идентификатор логистического партнера, к которому относится логистическая точка.
 */
object LogisticPickupPointDTOs : BaseTable<LogisticPickupPointDTO>("LogisticPickupPointDTO") {
    val id = long("id") /* null */ /* Идентификатор пункта вывоза. */
    val name = text("name") /* null */ /* Название пункта вывоза. */
    val address = long("address") /* null */
    val instruction = text("instruction") /* null */ /* Дополнительные инструкции к вывозу. */
    val type = long("type") /* null */
    val logisticPartnerId = long("logisticPartnerId") /* null */ /* Идентификатор логистического партнера, к которому относится логистическая точка. */

    /**
     * Create an entity of type LogisticPickupPointDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = LogisticPickupPointDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор пункта вывоза. */,
        name = row[name]  /* kotlin.String? */ /* Название пункта вывоза. */,
        address = PickupAddressDTOs.createEntity(row, withReferences) /* PickupAddressDTO? */,
        instruction = row[instruction]  /* kotlin.String? */ /* Дополнительные инструкции к вывозу. */,
        type = LogisticPointTypes.createEntity(row, withReferences) /* LogisticPointType? */,
        logisticPartnerId = row[logisticPartnerId]  /* kotlin.Long? */ /* Идентификатор логистического партнера, к которому относится логистическая точка. */
    )

    /**
    * Assign all the columns from the entity of type LogisticPickupPointDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = LogisticPickupPointDTO()
    * database.update(LogisticPickupPointDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: LogisticPickupPointDTO) {
        this.apply {
            set(LogisticPickupPointDTOs.id, entity.id)
            set(LogisticPickupPointDTOs.name, entity.name)
            set(LogisticPickupPointDTOs.address, entity.address)
            set(LogisticPickupPointDTOs.instruction, entity.instruction)
            set(LogisticPickupPointDTOs.type, entity.type)
            set(LogisticPickupPointDTOs.logisticPartnerId, entity.logisticPartnerId)
        }
    }

}


