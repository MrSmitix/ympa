/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о товаре.
 * @param shopSku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param marketSku SKU на Маркете.
 * @param name Название товара.
 * @param price Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
 * @param categoryId Идентификатор категории товара на Маркете.
 * @param categoryName Название категории товара на Маркете.
 * @param weightDimensions 
 * @param warehouses Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
 * @param tariffs Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
 * @param pictures Ссылки (URL) изображений товара в хорошем качестве.
 */
object GoodsStatsGoodsDTOs : BaseTable<GoodsStatsGoodsDTO>("GoodsStatsGoodsDTO") {
    val shopSku = text("shopSku") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val name = text("name") /* null */ /* Название товара. */
    val price = decimal("price") /* null */ /* Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/). */
    val categoryId = long("categoryId") /* null */ /* Идентификатор категории товара на Маркете. */
    val categoryName = text("categoryName") /* null */ /* Название категории товара на Маркете. */
    val weightDimensions = long("weightDimensions") /* null */

    /**
     * Create an entity of type GoodsStatsGoodsDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GoodsStatsGoodsDTO(
        shopSku = row[shopSku]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        name = row[name]  /* kotlin.String? */ /* Название товара. */,
        price = row[price]  /* java.math.BigDecimal? */ /* Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/). */,
        categoryId = row[categoryId]  /* kotlin.Long? */ /* Идентификатор категории товара на Маркете. */,
        categoryName = row[categoryName]  /* kotlin.String? */ /* Название категории товара на Маркете. */,
        weightDimensions = GoodsStatsWeightDimensionsDTOs.createEntity(row, withReferences) /* GoodsStatsWeightDimensionsDTO? */,
        warehouses = emptyList() /* kotlin.Array<GoodsStatsWarehouseDTO>? */ /* Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.  */,
        tariffs = emptyList() /* kotlin.Array<TariffDTO>? */ /* Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).  */,
        pictures = emptyList() /* kotlin.Array<kotlin.String>? */ /* Ссылки (URL) изображений товара в хорошем качестве. */
    )

    /**
    * Assign all the columns from the entity of type GoodsStatsGoodsDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GoodsStatsGoodsDTO()
    * database.update(GoodsStatsGoodsDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GoodsStatsGoodsDTO) {
        this.apply {
            set(GoodsStatsGoodsDTOs.shopSku, entity.shopSku)
            set(GoodsStatsGoodsDTOs.marketSku, entity.marketSku)
            set(GoodsStatsGoodsDTOs.name, entity.name)
            set(GoodsStatsGoodsDTOs.price, entity.price)
            set(GoodsStatsGoodsDTOs.categoryId, entity.categoryId)
            set(GoodsStatsGoodsDTOs.categoryName, entity.categoryName)
            set(GoodsStatsGoodsDTOs.weightDimensions, entity.weightDimensions)
        }
    }

}


object GoodsStatsGoodsDTOGoodsStatsWarehouseDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GoodsStatsGoodsDTOGoodsStatsWarehouseDTO") {
    val goodsStatsGoodsDTO = long("goodsStatsGoodsDTO")
    val goodsStatsWarehouseDTO = long("goodsStatsWarehouseDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[goodsStatsGoodsDTO] ?: 0, row[goodsStatsWarehouseDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GoodsStatsGoodsDTOGoodsStatsWarehouseDTO.goodsStatsGoodsDTO, entity.first)
            set(GoodsStatsGoodsDTOGoodsStatsWarehouseDTO.goodsStatsWarehouseDTO, entity.second)
        }
    }

}

object GoodsStatsGoodsDTOTariffDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GoodsStatsGoodsDTOTariffDTO") {
    val goodsStatsGoodsDTO = long("goodsStatsGoodsDTO")
    val tariffDTO = long("tariffDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[goodsStatsGoodsDTO] ?: 0, row[tariffDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GoodsStatsGoodsDTOTariffDTO.goodsStatsGoodsDTO, entity.first)
            set(GoodsStatsGoodsDTOTariffDTO.tariffDTO, entity.second)
        }
    }

}

object GoodsStatsGoodsDTOPictures : BaseTable<Pair<kotlin.Long, kotlin.String>>("GoodsStatsGoodsDTOPictures") {
    val goodsStatsGoodsDTO = long("goodsStatsGoodsDTO")
    val pictures = text("pictures")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[goodsStatsGoodsDTO] ?: 0, row[pictures] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GoodsStatsGoodsDTOPictures.goodsStatsGoodsDTO, entity.first)
            set(GoodsStatsGoodsDTOPictures.pictures, entity.second)
        }
    }

}

