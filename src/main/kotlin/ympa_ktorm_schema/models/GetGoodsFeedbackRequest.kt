/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Фильтр запроса отзывов в кабинете. 
 * @param dateTimeFrom Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 
 * @param dateTimeTo Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
 * @param reactionStatus 
 * @param ratingValues Оценка товара.
 * @param modelIds Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
 * @param paid Фильтр отзывов за баллы Плюса.
 */
object GetGoodsFeedbackRequests : BaseTable<GetGoodsFeedbackRequest>("GetGoodsFeedbackRequest") {
    val dateTimeFrom = datetime("dateTimeFrom") /* null */ /* Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.  */
    val dateTimeTo = datetime("dateTimeTo") /* null */ /* Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.  */
    val reactionStatus = long("reactionStatus") /* null */
    val paid = boolean("paid") /* null */ /* Фильтр отзывов за баллы Плюса. */

    /**
     * Create an entity of type GetGoodsFeedbackRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetGoodsFeedbackRequest(
        dateTimeFrom = row[dateTimeFrom]  /* java.time.LocalDateTime? */ /* Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.  */,
        dateTimeTo = row[dateTimeTo]  /* java.time.LocalDateTime? */ /* Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.  */,
        reactionStatus = FeedbackReactionStatusTypes.createEntity(row, withReferences) /* FeedbackReactionStatusType? */,
        ratingValues = emptyList() /* kotlin.collections.Set<kotlin.Int>? */ /* Оценка товара. */,
        modelIds = emptyList() /* kotlin.collections.Set<kotlin.Long>? */ /* Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).  */,
        paid = row[paid]  /* kotlin.Boolean? */ /* Фильтр отзывов за баллы Плюса. */
    )

    /**
    * Assign all the columns from the entity of type GetGoodsFeedbackRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetGoodsFeedbackRequest()
    * database.update(GetGoodsFeedbackRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetGoodsFeedbackRequest) {
        this.apply {
            set(GetGoodsFeedbackRequests.dateTimeFrom, entity.dateTimeFrom)
            set(GetGoodsFeedbackRequests.dateTimeTo, entity.dateTimeTo)
            set(GetGoodsFeedbackRequests.reactionStatus, entity.reactionStatus)
            set(GetGoodsFeedbackRequests.paid, entity.paid)
        }
    }

}


object GetGoodsFeedbackRequestRatingValues : BaseTable<Pair<kotlin.Long, kotlin.Int>>("GetGoodsFeedbackRequestRatingValues") {
    val getGoodsFeedbackRequest = long("getGoodsFeedbackRequest")
    val ratingValues = int("ratingValues")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[getGoodsFeedbackRequest] ?: 0, row[ratingValues] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(GetGoodsFeedbackRequestRatingValues.getGoodsFeedbackRequest, entity.first)
            set(GetGoodsFeedbackRequestRatingValues.ratingValues, entity.second)
        }
    }

}

object GetGoodsFeedbackRequestModelIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetGoodsFeedbackRequestModelIds") {
    val getGoodsFeedbackRequest = long("getGoodsFeedbackRequest")
    val modelIds = long("modelIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getGoodsFeedbackRequest] ?: 0, row[modelIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetGoodsFeedbackRequestModelIds.getGoodsFeedbackRequest, entity.first)
            set(GetGoodsFeedbackRequestModelIds.modelIds, entity.second)
        }
    }

}

