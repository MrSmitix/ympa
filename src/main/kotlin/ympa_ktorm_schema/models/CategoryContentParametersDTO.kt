/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о параметрах категории.
 * @param categoryId Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
 * @param parameters Список характеристик.
 */
object CategoryContentParametersDTOs : BaseTable<CategoryContentParametersDTO>("CategoryContentParametersDTO") {
    val categoryId = int("categoryId") /* Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). */

    /**
     * Create an entity of type CategoryContentParametersDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CategoryContentParametersDTO(
        categoryId = row[categoryId] ?: 0 /* kotlin.Int */ /* Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). */,
        parameters = emptyList() /* kotlin.Array<CategoryParameterDTO>? */ /* Список характеристик. */
    )

    /**
    * Assign all the columns from the entity of type CategoryContentParametersDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CategoryContentParametersDTO()
    * database.update(CategoryContentParametersDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CategoryContentParametersDTO) {
        this.apply {
            set(CategoryContentParametersDTOs.categoryId, entity.categoryId)
        }
    }

}


object CategoryContentParametersDTOCategoryParameterDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CategoryContentParametersDTOCategoryParameterDTO") {
    val categoryContentParametersDTO = long("categoryContentParametersDTO")
    val categoryParameterDTO = long("categoryParameterDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[categoryContentParametersDTO] ?: 0, row[categoryParameterDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CategoryContentParametersDTOCategoryParameterDTO.categoryContentParametersDTO, entity.first)
            set(CategoryContentParametersDTOCategoryParameterDTO.categoryParameterDTO, entity.second)
        }
    }

}

