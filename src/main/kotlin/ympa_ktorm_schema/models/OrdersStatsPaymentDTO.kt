/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о денежных переводах по заказу.
 * @param id Идентификатор денежного перевода.
 * @param date Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. 
 * @param type 
 * @param source 
 * @param total Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
 * @param paymentOrder 
 */
object OrdersStatsPaymentDTOs : BaseTable<OrdersStatsPaymentDTO>("OrdersStatsPaymentDTO") {
    val id = text("id") /* null */ /* Идентификатор денежного перевода. */
    val date = date("date") /* null */ /* Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.  */
    val type = long("type") /* null */
    val source = long("source") /* null */
    val total = decimal("total") /* null */ /* Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.  */
    val paymentOrder = long("paymentOrder") /* null */

    /**
     * Create an entity of type OrdersStatsPaymentDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersStatsPaymentDTO(
        id = row[id]  /* kotlin.String? */ /* Идентификатор денежного перевода. */,
        date = row[date]  /* java.time.LocalDate? */ /* Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.  */,
        type = OrdersStatsPaymentTypes.createEntity(row, withReferences) /* OrdersStatsPaymentType? */,
        source = OrdersStatsPaymentSourceTypes.createEntity(row, withReferences) /* OrdersStatsPaymentSourceType? */,
        total = row[total]  /* java.math.BigDecimal? */ /* Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.  */,
        paymentOrder = OrdersStatsPaymentOrderDTOs.createEntity(row, withReferences) /* OrdersStatsPaymentOrderDTO? */
    )

    /**
    * Assign all the columns from the entity of type OrdersStatsPaymentDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersStatsPaymentDTO()
    * database.update(OrdersStatsPaymentDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersStatsPaymentDTO) {
        this.apply {
            set(OrdersStatsPaymentDTOs.id, entity.id)
            set(OrdersStatsPaymentDTOs.date, entity.date)
            set(OrdersStatsPaymentDTOs.type, entity.type)
            set(OrdersStatsPaymentDTOs.source, entity.source)
            set(OrdersStatsPaymentDTOs.total, entity.total)
            set(OrdersStatsPaymentDTOs.paymentOrder, entity.paymentOrder)
        }
    }

}


