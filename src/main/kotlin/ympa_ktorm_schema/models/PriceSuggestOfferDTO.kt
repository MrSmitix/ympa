/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Товар с ценами для продвижения.
 * @param marketSku SKU на Маркете.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param priceSuggestion Цены для продвижения. 
 */
object PriceSuggestOfferDTOs : BaseTable<PriceSuggestOfferDTO>("PriceSuggestOfferDTO") {
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val offerId = text("offerId") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */

    /**
     * Create an entity of type PriceSuggestOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PriceSuggestOfferDTO(
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        offerId = row[offerId]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        priceSuggestion = emptyList() /* kotlin.Array<PriceSuggestDTO>? */ /* Цены для продвижения.  */
    )

    /**
    * Assign all the columns from the entity of type PriceSuggestOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PriceSuggestOfferDTO()
    * database.update(PriceSuggestOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PriceSuggestOfferDTO) {
        this.apply {
            set(PriceSuggestOfferDTOs.marketSku, entity.marketSku)
            set(PriceSuggestOfferDTOs.offerId, entity.offerId)
        }
    }

}


object PriceSuggestOfferDTOPriceSuggestDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("PriceSuggestOfferDTOPriceSuggestDTO") {
    val priceSuggestOfferDTO = long("priceSuggestOfferDTO")
    val priceSuggestDTO = long("priceSuggestDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[priceSuggestOfferDTO] ?: 0, row[priceSuggestDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(PriceSuggestOfferDTOPriceSuggestDTO.priceSuggestOfferDTO, entity.first)
            set(PriceSuggestOfferDTOPriceSuggestDTO.priceSuggestDTO, entity.second)
        }
    }

}

