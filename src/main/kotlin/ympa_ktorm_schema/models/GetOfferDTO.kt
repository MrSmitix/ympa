/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Параметры товара.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param name Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
 * @param marketCategoryId Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
 * @param category Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
 * @param pictures Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
 * @param videos Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
 * @param manuals Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
 * @param vendor Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
 * @param barcodes Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
 * @param description Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
 * @param manufacturerCountries Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
 * @param weightDimensions 
 * @param vendorCode Артикул товара от производителя.
 * @param tags Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
 * @param shelfLife 
 * @param lifeTime 
 * @param guaranteePeriod 
 * @param customsCommodityCode Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
 * @param certificates Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
 * @param boxCount Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
 * @param condition 
 * @param type 
 * @param downloadable Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
 * @param adult Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
 * @param age 
 * @param params {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
 * @param basicPrice 
 * @param purchasePrice 
 * @param additionalExpenses 
 * @param cofinancePrice 
 * @param cardStatus 
 * @param campaigns Список магазинов, в которых размещен товар. 
 * @param sellingPrograms Информация о том, какие для товара доступны модели размещения. 
 * @param archived Товар помещен в архив. 
 */
object GetOfferDTOs : BaseTable<GetOfferDTO>("GetOfferDTO") {
    val offerId = text("offerId") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val name = text("name") /* null */ /* Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)  */
    val marketCategoryId = long("marketCategoryId") /* null */ /* Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */
    val category = text("category") /* null */ /* Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  */
    val vendor = text("vendor") /* null */ /* Название бренда или производителя. Должно быть записано так, как его пишет сам бренд. */
    val description = text("description") /* null */ /* Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)  */
    val weightDimensions = long("weightDimensions") /* null */
    val vendorCode = text("vendorCode") /* null */ /* Артикул товара от производителя. */
    val shelfLife = long("shelfLife") /* null */
    val lifeTime = long("lifeTime") /* null */
    val guaranteePeriod = long("guaranteePeriod") /* null */
    val customsCommodityCode = text("customsCommodityCode") /* null */ /* Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.  */
    val boxCount = int("boxCount") /* null */ /* Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.  */
    val condition = long("condition") /* null */
    val type = long("type") /* null */
    val downloadable = boolean("downloadable") /* null */ /* Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)  */
    val adult = boolean("adult") /* null */ /* Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.  */
    val age = long("age") /* null */
    val basicPrice = long("basicPrice") /* null */
    val purchasePrice = long("purchasePrice") /* null */
    val additionalExpenses = long("additionalExpenses") /* null */
    val cofinancePrice = long("cofinancePrice") /* null */
    val cardStatus = long("cardStatus") /* null */
    val archived = boolean("archived") /* null */ /* Товар помещен в архив.  */

    /**
     * Create an entity of type GetOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetOfferDTO(
        offerId = row[offerId] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        name = row[name]  /* kotlin.String? */ /* Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)  */,
        marketCategoryId = row[marketCategoryId]  /* kotlin.Long? */ /* Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */,
        category = row[category]  /* kotlin.String? */ /* Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  */,
        pictures = emptyList() /* kotlin.Array<kotlin.String>? */ /* Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)  */,
        videos = emptyList() /* kotlin.Array<kotlin.String>? */ /* Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)  */,
        manuals = emptyList() /* kotlin.Array<OfferManualDTO>? */ /* Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся.  */,
        vendor = row[vendor]  /* kotlin.String? */ /* Название бренда или производителя. Должно быть записано так, как его пишет сам бренд. */,
        barcodes = emptyList() /* kotlin.Array<kotlin.String>? */ /* Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)   */,
        description = row[description]  /* kotlin.String? */ /* Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)  */,
        manufacturerCountries = emptyList() /* kotlin.Array<kotlin.String>? */ /* Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).  */,
        weightDimensions = OfferWeightDimensionsDTOs.createEntity(row, withReferences) /* OfferWeightDimensionsDTO? */,
        vendorCode = row[vendorCode]  /* kotlin.String? */ /* Артикул товара от производителя. */,
        tags = emptyList() /* kotlin.Array<kotlin.String>? */ /* Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.  */,
        shelfLife = TimePeriodDTOs.createEntity(row, withReferences) /* TimePeriodDTO? */,
        lifeTime = TimePeriodDTOs.createEntity(row, withReferences) /* TimePeriodDTO? */,
        guaranteePeriod = TimePeriodDTOs.createEntity(row, withReferences) /* TimePeriodDTO? */,
        customsCommodityCode = row[customsCommodityCode]  /* kotlin.String? */ /* Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.  */,
        certificates = emptyList() /* kotlin.Array<kotlin.String>? */ /* Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).  */,
        boxCount = row[boxCount]  /* kotlin.Int? */ /* Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.  */,
        condition = OfferConditionDTOs.createEntity(row, withReferences) /* OfferConditionDTO? */,
        type = OfferTypes.createEntity(row, withReferences) /* OfferType? */,
        downloadable = row[downloadable]  /* kotlin.Boolean? */ /* Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)  */,
        adult = row[adult]  /* kotlin.Boolean? */ /* Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.  */,
        age = AgeDTOs.createEntity(row, withReferences) /* AgeDTO? */,
        params = emptyList() /* kotlin.Array<OfferParamDTO>? */ /* {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.  */,
        basicPrice = GetPriceWithDiscountDTOs.createEntity(row, withReferences) /* GetPriceWithDiscountDTO? */,
        purchasePrice = GetPriceDTOs.createEntity(row, withReferences) /* GetPriceDTO? */,
        additionalExpenses = GetPriceDTOs.createEntity(row, withReferences) /* GetPriceDTO? */,
        cofinancePrice = GetPriceDTOs.createEntity(row, withReferences) /* GetPriceDTO? */,
        cardStatus = OfferCardStatusTypes.createEntity(row, withReferences) /* OfferCardStatusType? */,
        campaigns = emptyList() /* kotlin.Array<OfferCampaignStatusDTO>? */ /* Список магазинов, в которых размещен товар.  */,
        sellingPrograms = emptyList() /* kotlin.Array<OfferSellingProgramDTO>? */ /* Информация о том, какие для товара доступны модели размещения.  */,
        archived = row[archived]  /* kotlin.Boolean? */ /* Товар помещен в архив.  */
    )

    /**
    * Assign all the columns from the entity of type GetOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetOfferDTO()
    * database.update(GetOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetOfferDTO) {
        this.apply {
            set(GetOfferDTOs.offerId, entity.offerId)
            set(GetOfferDTOs.name, entity.name)
            set(GetOfferDTOs.marketCategoryId, entity.marketCategoryId)
            set(GetOfferDTOs.category, entity.category)
            set(GetOfferDTOs.vendor, entity.vendor)
            set(GetOfferDTOs.description, entity.description)
            set(GetOfferDTOs.weightDimensions, entity.weightDimensions)
            set(GetOfferDTOs.vendorCode, entity.vendorCode)
            set(GetOfferDTOs.shelfLife, entity.shelfLife)
            set(GetOfferDTOs.lifeTime, entity.lifeTime)
            set(GetOfferDTOs.guaranteePeriod, entity.guaranteePeriod)
            set(GetOfferDTOs.customsCommodityCode, entity.customsCommodityCode)
            set(GetOfferDTOs.boxCount, entity.boxCount)
            set(GetOfferDTOs.condition, entity.condition)
            set(GetOfferDTOs.type, entity.type)
            set(GetOfferDTOs.downloadable, entity.downloadable)
            set(GetOfferDTOs.adult, entity.adult)
            set(GetOfferDTOs.age, entity.age)
            set(GetOfferDTOs.basicPrice, entity.basicPrice)
            set(GetOfferDTOs.purchasePrice, entity.purchasePrice)
            set(GetOfferDTOs.additionalExpenses, entity.additionalExpenses)
            set(GetOfferDTOs.cofinancePrice, entity.cofinancePrice)
            set(GetOfferDTOs.cardStatus, entity.cardStatus)
            set(GetOfferDTOs.archived, entity.archived)
        }
    }

}


object GetOfferDTOPictures : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOPictures") {
    val getOfferDTO = long("getOfferDTO")
    val pictures = text("pictures")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[pictures] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOPictures.getOfferDTO, entity.first)
            set(GetOfferDTOPictures.pictures, entity.second)
        }
    }

}

object GetOfferDTOVideos : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOVideos") {
    val getOfferDTO = long("getOfferDTO")
    val videos = text("videos")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[videos] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOVideos.getOfferDTO, entity.first)
            set(GetOfferDTOVideos.videos, entity.second)
        }
    }

}

object GetOfferDTOOfferManualDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferDTOOfferManualDTO") {
    val getOfferDTO = long("getOfferDTO")
    val offerManualDTO = long("offerManualDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferDTO] ?: 0, row[offerManualDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferDTOOfferManualDTO.getOfferDTO, entity.first)
            set(GetOfferDTOOfferManualDTO.offerManualDTO, entity.second)
        }
    }

}

object GetOfferDTOBarcodes : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOBarcodes") {
    val getOfferDTO = long("getOfferDTO")
    val barcodes = text("barcodes")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[barcodes] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOBarcodes.getOfferDTO, entity.first)
            set(GetOfferDTOBarcodes.barcodes, entity.second)
        }
    }

}

object GetOfferDTOManufacturerCountries : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOManufacturerCountries") {
    val getOfferDTO = long("getOfferDTO")
    val manufacturerCountries = text("manufacturerCountries")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[manufacturerCountries] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOManufacturerCountries.getOfferDTO, entity.first)
            set(GetOfferDTOManufacturerCountries.manufacturerCountries, entity.second)
        }
    }

}

object GetOfferDTOTags : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOTags") {
    val getOfferDTO = long("getOfferDTO")
    val tags = text("tags")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[tags] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOTags.getOfferDTO, entity.first)
            set(GetOfferDTOTags.tags, entity.second)
        }
    }

}

object GetOfferDTOCertificates : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferDTOCertificates") {
    val getOfferDTO = long("getOfferDTO")
    val certificates = text("certificates")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferDTO] ?: 0, row[certificates] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferDTOCertificates.getOfferDTO, entity.first)
            set(GetOfferDTOCertificates.certificates, entity.second)
        }
    }

}

object GetOfferDTOOfferParamDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferDTOOfferParamDTO") {
    val getOfferDTO = long("getOfferDTO")
    val offerParamDTO = long("offerParamDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferDTO] ?: 0, row[offerParamDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferDTOOfferParamDTO.getOfferDTO, entity.first)
            set(GetOfferDTOOfferParamDTO.offerParamDTO, entity.second)
        }
    }

}

object GetOfferDTOOfferCampaignStatusDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferDTOOfferCampaignStatusDTO") {
    val getOfferDTO = long("getOfferDTO")
    val offerCampaignStatusDTO = long("offerCampaignStatusDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferDTO] ?: 0, row[offerCampaignStatusDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferDTOOfferCampaignStatusDTO.getOfferDTO, entity.first)
            set(GetOfferDTOOfferCampaignStatusDTO.offerCampaignStatusDTO, entity.second)
        }
    }

}

object GetOfferDTOOfferSellingProgramDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferDTOOfferSellingProgramDTO") {
    val getOfferDTO = long("getOfferDTO")
    val offerSellingProgramDTO = long("offerSellingProgramDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferDTO] ?: 0, row[offerSellingProgramDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferDTOOfferSellingProgramDTO.getOfferDTO, entity.first)
            set(GetOfferDTOOfferSellingProgramDTO.offerSellingProgramDTO, entity.second)
        }
    }

}

