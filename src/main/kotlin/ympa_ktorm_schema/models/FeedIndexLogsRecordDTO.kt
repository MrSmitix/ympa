/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список отчетов по индексации прайс-листа.
 * @param downloadTime Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @param fileTime Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @param generationId Идентификатор индексации.
 * @param indexType 
 * @param publishedTime Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @param status 
 * @param error 
 * @param offers 
 */
object FeedIndexLogsRecordDTOs : BaseTable<FeedIndexLogsRecordDTO>("FeedIndexLogsRecordDTO") {
    val downloadTime = datetime("downloadTime") /* null */ /* Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    val fileTime = datetime("fileTime") /* null */ /* Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    val generationId = long("generationId") /* null */ /* Идентификатор индексации. */
    val indexType = long("indexType") /* null */
    val publishedTime = datetime("publishedTime") /* null */ /* Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
    val status = long("status") /* null */
    val error = long("error") /* null */
    val offers = long("offers") /* null */

    /**
     * Create an entity of type FeedIndexLogsRecordDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedIndexLogsRecordDTO(
        downloadTime = row[downloadTime]  /* java.time.LocalDateTime? */ /* Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */,
        fileTime = row[fileTime]  /* java.time.LocalDateTime? */ /* Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */,
        generationId = row[generationId]  /* kotlin.Long? */ /* Идентификатор индексации. */,
        indexType = FeedIndexLogsIndexTypes.createEntity(row, withReferences) /* FeedIndexLogsIndexType? */,
        publishedTime = row[publishedTime]  /* java.time.LocalDateTime? */ /* Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */,
        status = FeedIndexLogsStatusTypes.createEntity(row, withReferences) /* FeedIndexLogsStatusType? */,
        error = FeedIndexLogsErrorDTOs.createEntity(row, withReferences) /* FeedIndexLogsErrorDTO? */,
        offers = FeedIndexLogsOffersDTOs.createEntity(row, withReferences) /* FeedIndexLogsOffersDTO? */
    )

    /**
    * Assign all the columns from the entity of type FeedIndexLogsRecordDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedIndexLogsRecordDTO()
    * database.update(FeedIndexLogsRecordDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedIndexLogsRecordDTO) {
        this.apply {
            set(FeedIndexLogsRecordDTOs.downloadTime, entity.downloadTime)
            set(FeedIndexLogsRecordDTOs.fileTime, entity.fileTime)
            set(FeedIndexLogsRecordDTOs.generationId, entity.generationId)
            set(FeedIndexLogsRecordDTOs.indexType, entity.indexType)
            set(FeedIndexLogsRecordDTOs.publishedTime, entity.publishedTime)
            set(FeedIndexLogsRecordDTOs.status, entity.status)
            set(FeedIndexLogsRecordDTOs.error, entity.error)
            set(FeedIndexLogsRecordDTOs.offers, entity.offers)
        }
    }

}


