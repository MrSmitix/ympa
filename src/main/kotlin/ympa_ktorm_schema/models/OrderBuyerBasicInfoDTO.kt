/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о покупателе с базовыми полями.
 * @param id Идентификатор покупателя.
 * @param lastName Фамилия покупателя.
 * @param firstName Имя покупателя.
 * @param middleName Отчество покупателя.
 * @param type 
 */
object OrderBuyerBasicInfoDTOs : BaseTable<OrderBuyerBasicInfoDTO>("OrderBuyerBasicInfoDTO") {
    val id = text("id") /* null */ /* Идентификатор покупателя. */
    val lastName = text("lastName") /* null */ /* Фамилия покупателя. */
    val firstName = text("firstName") /* null */ /* Имя покупателя. */
    val middleName = text("middleName") /* null */ /* Отчество покупателя. */
    val type = long("type") /* null */

    /**
     * Create an entity of type OrderBuyerBasicInfoDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderBuyerBasicInfoDTO(
        id = row[id]  /* kotlin.String? */ /* Идентификатор покупателя. */,
        lastName = row[lastName]  /* kotlin.String? */ /* Фамилия покупателя. */,
        firstName = row[firstName]  /* kotlin.String? */ /* Имя покупателя. */,
        middleName = row[middleName]  /* kotlin.String? */ /* Отчество покупателя. */,
        type = OrderBuyerTypes.createEntity(row, withReferences) /* OrderBuyerType? */
    )

    /**
    * Assign all the columns from the entity of type OrderBuyerBasicInfoDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderBuyerBasicInfoDTO()
    * database.update(OrderBuyerBasicInfoDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderBuyerBasicInfoDTO) {
        this.apply {
            set(OrderBuyerBasicInfoDTOs.id, entity.id)
            set(OrderBuyerBasicInfoDTOs.lastName, entity.lastName)
            set(OrderBuyerBasicInfoDTOs.firstName, entity.firstName)
            set(OrderBuyerBasicInfoDTOs.middleName, entity.middleName)
            set(OrderBuyerBasicInfoDTOs.type, entity.type)
        }
    }

}


