/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список товаров в возврате.
 * @param shopSku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param count Количество единиц товара.
 * @param marketSku SKU на Маркете.
 * @param decisions Список решений по возврату.
 * @param instances Список логистических позиций возврата.
 * @param tracks Список трек-кодов для почтовых отправлений.
 */
object ReturnItemDTOs : BaseTable<ReturnItemDTO>("ReturnItemDTO") {
    val shopSku = text("shopSku") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val count = long("count") /* Количество единиц товара. */
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */

    /**
     * Create an entity of type ReturnItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ReturnItemDTO(
        shopSku = row[shopSku] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        count = row[count] ?: 0 /* kotlin.Long */ /* Количество единиц товара. */,
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        decisions = emptyList() /* kotlin.Array<ReturnDecisionDTO>? */ /* Список решений по возврату. */,
        instances = emptyList() /* kotlin.Array<ReturnInstanceDTO>? */ /* Список логистических позиций возврата. */,
        tracks = emptyList() /* kotlin.Array<TrackDTO>? */ /* Список трек-кодов для почтовых отправлений. */
    )

    /**
    * Assign all the columns from the entity of type ReturnItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ReturnItemDTO()
    * database.update(ReturnItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ReturnItemDTO) {
        this.apply {
            set(ReturnItemDTOs.shopSku, entity.shopSku)
            set(ReturnItemDTOs.count, entity.count)
            set(ReturnItemDTOs.marketSku, entity.marketSku)
        }
    }

}


object ReturnItemDTOReturnDecisionDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ReturnItemDTOReturnDecisionDTO") {
    val returnItemDTO = long("returnItemDTO")
    val returnDecisionDTO = long("returnDecisionDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[returnItemDTO] ?: 0, row[returnDecisionDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ReturnItemDTOReturnDecisionDTO.returnItemDTO, entity.first)
            set(ReturnItemDTOReturnDecisionDTO.returnDecisionDTO, entity.second)
        }
    }

}

object ReturnItemDTOReturnInstanceDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ReturnItemDTOReturnInstanceDTO") {
    val returnItemDTO = long("returnItemDTO")
    val returnInstanceDTO = long("returnInstanceDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[returnItemDTO] ?: 0, row[returnInstanceDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ReturnItemDTOReturnInstanceDTO.returnItemDTO, entity.first)
            set(ReturnItemDTOReturnInstanceDTO.returnInstanceDTO, entity.second)
        }
    }

}

object ReturnItemDTOTrackDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ReturnItemDTOTrackDTO") {
    val returnItemDTO = long("returnItemDTO")
    val trackDTO = long("trackDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[returnItemDTO] ?: 0, row[trackDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ReturnItemDTOTrackDTO.returnItemDTO, entity.first)
            set(ReturnItemDTOTrackDTO.trackDTO, entity.second)
        }
    }

}

