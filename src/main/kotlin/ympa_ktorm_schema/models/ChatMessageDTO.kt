/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о сообщениях.
 * @param messageId Идентификатор сообщения.
 * @param createdAt Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @param sender 
 * @param message Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`. 
 * @param payload Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`. 
 */
object ChatMessageDTOs : BaseTable<ChatMessageDTO>("ChatMessageDTO") {
    val messageId = long("messageId") /* Идентификатор сообщения. */
    val createdAt = datetime("createdAt") /* Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    val sender = long("sender")
    val message = text("message") /* null */ /* Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`.  */

    /**
     * Create an entity of type ChatMessageDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ChatMessageDTO(
        messageId = row[messageId] ?: 0 /* kotlin.Long */ /* Идентификатор сообщения. */,
        createdAt = row[createdAt] /* java.time.LocalDateTime */ /* Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */,
        sender = ChatMessageSenderTypes.createEntity(row, withReferences) /* ChatMessageSenderType */,
        message = row[message]  /* kotlin.String? */ /* Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`.  */,
        payload = emptyList() /* kotlin.Array<ChatMessagePayloadDTO>? */ /* Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`.  */
    )

    /**
    * Assign all the columns from the entity of type ChatMessageDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ChatMessageDTO()
    * database.update(ChatMessageDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ChatMessageDTO) {
        this.apply {
            set(ChatMessageDTOs.messageId, entity.messageId)
            set(ChatMessageDTOs.createdAt, entity.createdAt)
            set(ChatMessageDTOs.sender, entity.sender)
            set(ChatMessageDTOs.message, entity.message)
        }
    }

}


object ChatMessageDTOChatMessagePayloadDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ChatMessageDTOChatMessagePayloadDTO") {
    val chatMessageDTO = long("chatMessageDTO")
    val chatMessagePayloadDTO = long("chatMessagePayloadDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[chatMessageDTO] ?: 0, row[chatMessagePayloadDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ChatMessageDTOChatMessagePayloadDTO.chatMessageDTO, entity.first)
            set(ChatMessageDTOChatMessagePayloadDTO.chatMessagePayloadDTO, entity.second)
        }
    }

}

