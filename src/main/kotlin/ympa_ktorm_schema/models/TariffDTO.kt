/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 * @param type 
 * @param amount Значение тарифа в рублях.
 * @param parameters Параметры расчета тарифа.
 * @param percent {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
 */
object TariffDTOs : BaseTable<TariffDTO>("TariffDTO") {
    val type = long("type")
    val amount = decimal("amount") /* Значение тарифа в рублях. */
    @Deprecated(message = "This property is deprecated.")
    val percent = decimal("percent") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах.  */

    /**
     * Create an entity of type TariffDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = TariffDTO(
        type = TariffTypes.createEntity(row, withReferences) /* TariffType */,
        amount = row[amount] ?: 0 /* java.math.BigDecimal */ /* Значение тарифа в рублях. */,
        parameters = emptyList() /* kotlin.Array<TariffParameterDTO> */ /* Параметры расчета тарифа. */,
        percent = row[percent]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах.  */
    )

    /**
    * Assign all the columns from the entity of type TariffDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = TariffDTO()
    * database.update(TariffDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: TariffDTO) {
        this.apply {
            set(TariffDTOs.type, entity.type)
            set(TariffDTOs.amount, entity.amount)
            set(TariffDTOs.percent, entity.percent)
        }
    }

}


object TariffDTOTariffParameterDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("TariffDTOTariffParameterDTO") {
    val tariffDTO = long("tariffDTO")
    val tariffParameterDTO = long("tariffParameterDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[tariffDTO] ?: 0, row[tariffParameterDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(TariffDTOTariffParameterDTO.tariffDTO, entity.first)
            set(TariffDTOTariffParameterDTO.tariffParameterDTO, entity.second)
        }
    }

}

