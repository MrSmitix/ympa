/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Настройки магазина.
 * @param countryRegion Идентификатор региона, в котором находится магазин.
 * @param shopName Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. 
 * @param showInContext Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
 * @param showInPremium Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. 
 * @param useOpenStat Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. 
 * @param localRegion 
 */
object CampaignSettingsDTOs : BaseTable<CampaignSettingsDTO>("CampaignSettingsDTO") {
    val countryRegion = long("countryRegion") /* null */ /* Идентификатор региона, в котором находится магазин. */
    val shopName = text("shopName") /* null */ /* Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`.  */
    val showInContext = boolean("showInContext") /* null */ /* Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции.  */
    val showInPremium = boolean("showInPremium") /* null */ /* Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения.  */
    val useOpenStat = boolean("useOpenStat") /* null */ /* Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется.  */
    val localRegion = long("localRegion") /* null */

    /**
     * Create an entity of type CampaignSettingsDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CampaignSettingsDTO(
        countryRegion = row[countryRegion]  /* kotlin.Long? */ /* Идентификатор региона, в котором находится магазин. */,
        shopName = row[shopName]  /* kotlin.String? */ /* Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`.  */,
        showInContext = row[showInContext]  /* kotlin.Boolean? */ /* Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции.  */,
        showInPremium = row[showInPremium]  /* kotlin.Boolean? */ /* Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения.  */,
        useOpenStat = row[useOpenStat]  /* kotlin.Boolean? */ /* Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется.  */,
        localRegion = CampaignSettingsLocalRegionDTOs.createEntity(row, withReferences) /* CampaignSettingsLocalRegionDTO? */
    )

    /**
    * Assign all the columns from the entity of type CampaignSettingsDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CampaignSettingsDTO()
    * database.update(CampaignSettingsDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CampaignSettingsDTO) {
        this.apply {
            set(CampaignSettingsDTOs.countryRegion, entity.countryRegion)
            set(CampaignSettingsDTOs.shopName, entity.shopName)
            set(CampaignSettingsDTOs.showInContext, entity.showInContext)
            set(CampaignSettingsDTOs.showInPremium, entity.showInPremium)
            set(CampaignSettingsDTOs.useOpenStat, entity.useOpenStat)
            set(CampaignSettingsDTOs.localRegion, entity.localRegion)
        }
    }

}


