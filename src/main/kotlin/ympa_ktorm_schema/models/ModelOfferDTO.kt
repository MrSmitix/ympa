/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о предложении.
 * @param discount Скидка на предложение в процентах.
 * @param name Наименование предложения.
 * @param pos Позиция предложения в выдаче Маркета на карточке модели.
 * @param preDiscountPrice Цена предложения без скидки магазина.
 * @param price Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
 * @param regionId Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них. 
 * @param shippingCost Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
 * @param shopName Название магазина (в том виде, в котором отображается на Маркете).
 * @param shopRating Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`. 
 * @param inStock {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
 */
object ModelOfferDTOs : BaseTable<ModelOfferDTO>("ModelOfferDTO") {
    val discount = int("discount") /* null */ /* Скидка на предложение в процентах. */
    val name = text("name") /* null */ /* Наименование предложения. */
    val pos = int("pos") /* null */ /* Позиция предложения в выдаче Маркета на карточке модели. */
    val preDiscountPrice = decimal("preDiscountPrice") /* null */ /* Цена предложения без скидки магазина. */
    val price = decimal("price") /* null */ /* Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay. */
    val regionId = long("regionId") /* null */ /* Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.  */
    val shippingCost = decimal("shippingCost") /* null */ /* Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.  */
    val shopName = text("shopName") /* null */ /* Название магазина (в том виде, в котором отображается на Маркете). */
    val shopRating = int("shopRating") /* null */ /* Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`.  */
    @Deprecated(message = "This property is deprecated.")
    val inStock = int("inStock") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  */

    /**
     * Create an entity of type ModelOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ModelOfferDTO(
        discount = row[discount]  /* kotlin.Int? */ /* Скидка на предложение в процентах. */,
        name = row[name]  /* kotlin.String? */ /* Наименование предложения. */,
        pos = row[pos]  /* kotlin.Int? */ /* Позиция предложения в выдаче Маркета на карточке модели. */,
        preDiscountPrice = row[preDiscountPrice]  /* java.math.BigDecimal? */ /* Цена предложения без скидки магазина. */,
        price = row[price]  /* java.math.BigDecimal? */ /* Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay. */,
        regionId = row[regionId]  /* kotlin.Long? */ /* Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.  */,
        shippingCost = row[shippingCost]  /* java.math.BigDecimal? */ /* Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.  */,
        shopName = row[shopName]  /* kotlin.String? */ /* Название магазина (в том виде, в котором отображается на Маркете). */,
        shopRating = row[shopRating]  /* kotlin.Int? */ /* Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`.  */,
        inStock = row[inStock]  /* kotlin.Int? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  */
    )

    /**
    * Assign all the columns from the entity of type ModelOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ModelOfferDTO()
    * database.update(ModelOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ModelOfferDTO) {
        this.apply {
            set(ModelOfferDTOs.discount, entity.discount)
            set(ModelOfferDTOs.name, entity.name)
            set(ModelOfferDTOs.pos, entity.pos)
            set(ModelOfferDTOs.preDiscountPrice, entity.preDiscountPrice)
            set(ModelOfferDTOs.price, entity.price)
            set(ModelOfferDTOs.regionId, entity.regionId)
            set(ModelOfferDTOs.shippingCost, entity.shippingCost)
            set(ModelOfferDTOs.shopName, entity.shopName)
            set(ModelOfferDTOs.shopRating, entity.shopRating)
            set(ModelOfferDTOs.inStock, entity.inStock)
        }
    }

}


