/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Фильтры для запроса остатков. 
 * @param withTurnover **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — `false`. Если информация нужна, передайте значение `true`. 
 * @param archived Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве. 
 * @param offerIds Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit` * `archived`  {% endnote %}    
 */
object GetWarehouseStocksRequests : BaseTable<GetWarehouseStocksRequest>("GetWarehouseStocksRequest") {
    val withTurnover = boolean("withTurnover") /* null */ /* **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — `false`. Если информация нужна, передайте значение `true`.  */
    val archived = boolean("archived") /* null */ /* Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве.  */

    /**
     * Create an entity of type GetWarehouseStocksRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetWarehouseStocksRequest(
        withTurnover = row[withTurnover] ?: false /* kotlin.Boolean? */ /* **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — `false`. Если информация нужна, передайте значение `true`.  */,
        archived = row[archived]  /* kotlin.Boolean? */ /* Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращается информация о товарах, которые не находятся в архиве.  */,
        offerIds = emptyList() /* kotlin.collections.Set<kotlin.String>? */ /* Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit` * `archived`  {% endnote %}     */
    )

    /**
    * Assign all the columns from the entity of type GetWarehouseStocksRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetWarehouseStocksRequest()
    * database.update(GetWarehouseStocksRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetWarehouseStocksRequest) {
        this.apply {
            set(GetWarehouseStocksRequests.withTurnover, entity.withTurnover)
            set(GetWarehouseStocksRequests.archived, entity.archived)
        }
    }

}


object GetWarehouseStocksRequestOfferIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetWarehouseStocksRequestOfferIds") {
    val getWarehouseStocksRequest = long("getWarehouseStocksRequest")
    val offerIds = text("offerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getWarehouseStocksRequest] ?: 0, row[offerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetWarehouseStocksRequestOfferIds.getWarehouseStocksRequest, entity.first)
            set(GetWarehouseStocksRequestOfferIds.offerIds, entity.second)
        }
    }

}

