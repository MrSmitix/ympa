/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о категории.  Категория считается листовой, если у нее нет дочерних категорий. 
 * @param id Идентификатор категории.
 * @param name Название категории.
 * @param children Дочерние категории.
 */
object CategoryDTOs : BaseTable<CategoryDTO>("CategoryDTO") {
    val id = long("id") /* Идентификатор категории. */
    val name = text("name") /* Название категории. */

    /**
     * Create an entity of type CategoryDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CategoryDTO(
        id = row[id] ?: 0 /* kotlin.Long */ /* Идентификатор категории. */,
        name = row[name] ?: "" /* kotlin.String */ /* Название категории. */,
        children = emptyList() /* kotlin.Array<CategoryDTO>? */ /* Дочерние категории. */
    )

    /**
    * Assign all the columns from the entity of type CategoryDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CategoryDTO()
    * database.update(CategoryDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CategoryDTO) {
        this.apply {
            set(CategoryDTOs.id, entity.id)
            set(CategoryDTOs.name, entity.name)
        }
    }

}


object CategoryDTOCategoryDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CategoryDTOCategoryDTO") {
    val categoryDTO = long("categoryDTO")
    val categoryDTO = long("categoryDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[categoryDTO] ?: 0, row[categoryDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CategoryDTOCategoryDTO.categoryDTO, entity.first)
            set(CategoryDTOCategoryDTO.categoryDTO, entity.second)
        }
    }

}

