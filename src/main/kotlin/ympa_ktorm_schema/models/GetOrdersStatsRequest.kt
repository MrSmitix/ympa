/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Запрос информации по заказам.
 * @param dateFrom Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
 * @param dateTo Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
 * @param updateFrom Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
 * @param updateTo Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
 * @param orders Список идентификаторов заказов.
 * @param statuses Список статусов заказов.
 * @param hasCis Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
 */
object GetOrdersStatsRequests : BaseTable<GetOrdersStatsRequest>("GetOrdersStatsRequest") {
    val dateFrom = date("dateFrom") /* null */ /* Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */
    val dateTo = date("dateTo") /* null */ /* Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */
    val updateFrom = date("updateFrom") /* null */ /* Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */
    val updateTo = date("updateTo") /* null */ /* Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */
    val hasCis = boolean("hasCis") /* null */ /* Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.  */

    /**
     * Create an entity of type GetOrdersStatsRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetOrdersStatsRequest(
        dateFrom = row[dateFrom]  /* java.time.LocalDate? */ /* Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */,
        dateTo = row[dateTo]  /* java.time.LocalDate? */ /* Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.  */,
        updateFrom = row[updateFrom]  /* java.time.LocalDate? */ /* Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */,
        updateTo = row[updateTo]  /* java.time.LocalDate? */ /* Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.  */,
        orders = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Список идентификаторов заказов. */,
        statuses = emptyList() /* kotlin.Array<OrderStatsStatusType>? */ /* Список статусов заказов. */,
        hasCis = row[hasCis]  /* kotlin.Boolean? */ /* Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.  */
    )

    /**
    * Assign all the columns from the entity of type GetOrdersStatsRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetOrdersStatsRequest()
    * database.update(GetOrdersStatsRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetOrdersStatsRequest) {
        this.apply {
            set(GetOrdersStatsRequests.dateFrom, entity.dateFrom)
            set(GetOrdersStatsRequests.dateTo, entity.dateTo)
            set(GetOrdersStatsRequests.updateFrom, entity.updateFrom)
            set(GetOrdersStatsRequests.updateTo, entity.updateTo)
            set(GetOrdersStatsRequests.hasCis, entity.hasCis)
        }
    }

}


object GetOrdersStatsRequestOrders : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOrdersStatsRequestOrders") {
    val getOrdersStatsRequest = long("getOrdersStatsRequest")
    val orders = long("orders")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOrdersStatsRequest] ?: 0, row[orders] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOrdersStatsRequestOrders.getOrdersStatsRequest, entity.first)
            set(GetOrdersStatsRequestOrders.orders, entity.second)
        }
    }

}

object GetOrdersStatsRequestOrderStatsStatusType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOrdersStatsRequestOrderStatsStatusType") {
    val getOrdersStatsRequest = long("getOrdersStatsRequest")
    val orderStatsStatusType = long("orderStatsStatusType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOrdersStatsRequest] ?: 0, row[orderStatsStatusType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOrdersStatsRequestOrderStatsStatusType.getOrdersStatsRequest, entity.first)
            set(GetOrdersStatsRequestOrderStatsStatusType.orderStatsStatusType, entity.second)
        }
    }

}

