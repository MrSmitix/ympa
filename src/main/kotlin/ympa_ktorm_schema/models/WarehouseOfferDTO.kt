/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об остатках товара.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param stocks Информация об остатках.
 * @param turnoverSummary 
 * @param updatedAt Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`. 
 */
object WarehouseOfferDTOs : BaseTable<WarehouseOfferDTO>("WarehouseOfferDTO") {
    val offerId = text("offerId") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val turnoverSummary = long("turnoverSummary") /* null */
    val updatedAt = datetime("updatedAt") /* null */ /* Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`.  */

    /**
     * Create an entity of type WarehouseOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = WarehouseOfferDTO(
        offerId = row[offerId] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        stocks = emptyList() /* kotlin.Array<WarehouseStockDTO> */ /* Информация об остатках. */,
        turnoverSummary = TurnoverDTOs.createEntity(row, withReferences) /* TurnoverDTO? */,
        updatedAt = row[updatedAt]  /* java.time.LocalDateTime? */ /* Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`.  */
    )

    /**
    * Assign all the columns from the entity of type WarehouseOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = WarehouseOfferDTO()
    * database.update(WarehouseOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: WarehouseOfferDTO) {
        this.apply {
            set(WarehouseOfferDTOs.offerId, entity.offerId)
            set(WarehouseOfferDTOs.turnoverSummary, entity.turnoverSummary)
            set(WarehouseOfferDTOs.updatedAt, entity.updatedAt)
        }
    }

}


object WarehouseOfferDTOWarehouseStockDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("WarehouseOfferDTOWarehouseStockDTO") {
    val warehouseOfferDTO = long("warehouseOfferDTO")
    val warehouseStockDTO = long("warehouseStockDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[warehouseOfferDTO] ?: 0, row[warehouseStockDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(WarehouseOfferDTOWarehouseStockDTO.warehouseOfferDTO, entity.first)
            set(WarehouseOfferDTOWarehouseStockDTO.warehouseStockDTO, entity.second)
        }
    }

}

