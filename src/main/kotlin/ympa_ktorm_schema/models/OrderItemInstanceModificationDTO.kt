/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Позиция в корзине, требующая маркировки.
 * @param id Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
 * @param instances Список кодов маркировки единиц товара. 
 */
object OrderItemInstanceModificationDTOs : BaseTable<OrderItemInstanceModificationDTO>("OrderItemInstanceModificationDTO") {
    val id = long("id") /* Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  */

    /**
     * Create an entity of type OrderItemInstanceModificationDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderItemInstanceModificationDTO(
        id = row[id] ?: 0 /* kotlin.Long */ /* Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  */,
        instances = emptyList() /* kotlin.Array<BriefOrderItemInstanceDTO> */ /* Список кодов маркировки единиц товара.  */
    )

    /**
    * Assign all the columns from the entity of type OrderItemInstanceModificationDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderItemInstanceModificationDTO()
    * database.update(OrderItemInstanceModificationDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderItemInstanceModificationDTO) {
        this.apply {
            set(OrderItemInstanceModificationDTOs.id, entity.id)
        }
    }

}


object OrderItemInstanceModificationDTOBriefOrderItemInstanceDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemInstanceModificationDTOBriefOrderItemInstanceDTO") {
    val orderItemInstanceModificationDTO = long("orderItemInstanceModificationDTO")
    val briefOrderItemInstanceDTO = long("briefOrderItemInstanceDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemInstanceModificationDTO] ?: 0, row[briefOrderItemInstanceDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemInstanceModificationDTOBriefOrderItemInstanceDTO.orderItemInstanceModificationDTO, entity.first)
            set(OrderItemInstanceModificationDTOBriefOrderItemInstanceDTO.briefOrderItemInstanceDTO, entity.second)
        }
    }

}

