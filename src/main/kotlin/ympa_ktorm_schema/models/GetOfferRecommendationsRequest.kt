/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param offerIds Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
 * @param cofinancePriceFilter 
 * @param recommendedCofinancePriceFilter 
 * @param competitivenessFilter 
 */
object GetOfferRecommendationsRequests : BaseTable<GetOfferRecommendationsRequest>("GetOfferRecommendationsRequest") {
    val cofinancePriceFilter = long("cofinancePriceFilter") /* null */
    val recommendedCofinancePriceFilter = long("recommendedCofinancePriceFilter") /* null */
    val competitivenessFilter = long("competitivenessFilter") /* null */

    /**
     * Create an entity of type GetOfferRecommendationsRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetOfferRecommendationsRequest(
        offerIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. */,
        cofinancePriceFilter = FieldStateTypes.createEntity(row, withReferences) /* FieldStateType? */,
        recommendedCofinancePriceFilter = FieldStateTypes.createEntity(row, withReferences) /* FieldStateType? */,
        competitivenessFilter = PriceCompetitivenessTypes.createEntity(row, withReferences) /* PriceCompetitivenessType? */
    )

    /**
    * Assign all the columns from the entity of type GetOfferRecommendationsRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetOfferRecommendationsRequest()
    * database.update(GetOfferRecommendationsRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetOfferRecommendationsRequest) {
        this.apply {
            set(GetOfferRecommendationsRequests.cofinancePriceFilter, entity.cofinancePriceFilter)
            set(GetOfferRecommendationsRequests.recommendedCofinancePriceFilter, entity.recommendedCofinancePriceFilter)
            set(GetOfferRecommendationsRequests.competitivenessFilter, entity.competitivenessFilter)
        }
    }

}


object GetOfferRecommendationsRequestOfferIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferRecommendationsRequestOfferIds") {
    val getOfferRecommendationsRequest = long("getOfferRecommendationsRequest")
    val offerIds = text("offerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferRecommendationsRequest] ?: 0, row[offerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferRecommendationsRequestOfferIds.getOfferRecommendationsRequest, entity.first)
            set(GetOfferRecommendationsRequestOfferIds.offerIds, entity.second)
        }
    }

}

