/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные для печати ярлыка.
 * @param orderId Идентификатор заказа.
 * @param placesNumber Количество коробок в заказе.
 * @param url URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
 * @param parcelBoxLabels Информация на ярлыке.
 */
object OrderLabelDTOs : BaseTable<OrderLabelDTO>("OrderLabelDTO") {
    val orderId = long("orderId") /* Идентификатор заказа. */
    val placesNumber = int("placesNumber") /* Количество коробок в заказе. */
    val url = text("url") /* URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md).  */

    /**
     * Create an entity of type OrderLabelDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderLabelDTO(
        orderId = row[orderId] ?: 0 /* kotlin.Long */ /* Идентификатор заказа. */,
        placesNumber = row[placesNumber] ?: 0 /* kotlin.Int */ /* Количество коробок в заказе. */,
        url = row[url] ?: "" /* kotlin.String */ /* URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md).  */,
        parcelBoxLabels = emptyList() /* kotlin.Array<ParcelBoxLabelDTO> */ /* Информация на ярлыке. */
    )

    /**
    * Assign all the columns from the entity of type OrderLabelDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderLabelDTO()
    * database.update(OrderLabelDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderLabelDTO) {
        this.apply {
            set(OrderLabelDTOs.orderId, entity.orderId)
            set(OrderLabelDTOs.placesNumber, entity.placesNumber)
            set(OrderLabelDTOs.url, entity.url)
        }
    }

}


object OrderLabelDTOParcelBoxLabelDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderLabelDTOParcelBoxLabelDTO") {
    val orderLabelDTO = long("orderLabelDTO")
    val parcelBoxLabelDTO = long("parcelBoxLabelDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderLabelDTO] ?: 0, row[parcelBoxLabelDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderLabelDTOParcelBoxLabelDTO.orderLabelDTO, entity.first)
            set(OrderLabelDTOParcelBoxLabelDTO.parcelBoxLabelDTO, entity.second)
        }
    }

}

