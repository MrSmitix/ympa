/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о маркированном товаре.
 * @param id Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
 * @param vat 
 * @param count Количество единиц товара.
 * @param price Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
 * @param offerName Название товара.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param instances Переданные вами коды маркировки.
 */
object BriefOrderItemDTOs : BaseTable<BriefOrderItemDTO>("BriefOrderItemDTO") {
    val id = long("id") /* null */ /* Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */
    val vat = long("vat") /* null */
    val count = int("count") /* null */ /* Количество единиц товара. */
    val price = decimal("price") /* null */ /* Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.  */
    val offerName = text("offerName") /* null */ /* Название товара. */
    val offerId = text("offerId") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */

    /**
     * Create an entity of type BriefOrderItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BriefOrderItemDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */,
        vat = OrderVatTypes.createEntity(row, withReferences) /* OrderVatType? */,
        count = row[count]  /* kotlin.Int? */ /* Количество единиц товара. */,
        price = row[price]  /* java.math.BigDecimal? */ /* Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.  */,
        offerName = row[offerName]  /* kotlin.String? */ /* Название товара. */,
        offerId = row[offerId]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        instances = emptyList() /* kotlin.Array<OrderItemInstanceDTO>? */ /* Переданные вами коды маркировки. */
    )

    /**
    * Assign all the columns from the entity of type BriefOrderItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BriefOrderItemDTO()
    * database.update(BriefOrderItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BriefOrderItemDTO) {
        this.apply {
            set(BriefOrderItemDTOs.id, entity.id)
            set(BriefOrderItemDTOs.vat, entity.vat)
            set(BriefOrderItemDTOs.count, entity.count)
            set(BriefOrderItemDTOs.price, entity.price)
            set(BriefOrderItemDTOs.offerName, entity.offerName)
            set(BriefOrderItemDTOs.offerId, entity.offerId)
        }
    }

}


object BriefOrderItemDTOOrderItemInstanceDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("BriefOrderItemDTOOrderItemInstanceDTO") {
    val briefOrderItemDTO = long("briefOrderItemDTO")
    val orderItemInstanceDTO = long("orderItemInstanceDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[briefOrderItemDTO] ?: 0, row[orderItemInstanceDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(BriefOrderItemDTOOrderItemInstanceDTO.briefOrderItemDTO, entity.first)
            set(BriefOrderItemDTOOrderItemInstanceDTO.orderItemInstanceDTO, entity.second)
        }
    }

}

