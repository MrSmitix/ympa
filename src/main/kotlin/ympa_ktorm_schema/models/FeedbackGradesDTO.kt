/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 * @param factors Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
 * @param average Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
 * @param agreeCount Количество пользователей, считающих отзыв полезным.
 * @param rejectCount Количество пользователей, считающих отзыв бесполезным.
 */
object FeedbackGradesDTOs : BaseTable<FeedbackGradesDTO>("FeedbackGradesDTO") {
    val average = decimal("average") /* null */ /* Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»). */
    val agreeCount = long("agreeCount") /* null */ /* Количество пользователей, считающих отзыв полезным. */
    val rejectCount = long("rejectCount") /* null */ /* Количество пользователей, считающих отзыв бесполезным. */

    /**
     * Create an entity of type FeedbackGradesDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedbackGradesDTO(
        factors = emptyList() /* kotlin.Array<FeedbackFactorDTO> */ /* Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор.  */,
        average = row[average]  /* java.math.BigDecimal? */ /* Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»). */,
        agreeCount = row[agreeCount]  /* kotlin.Long? */ /* Количество пользователей, считающих отзыв полезным. */,
        rejectCount = row[rejectCount]  /* kotlin.Long? */ /* Количество пользователей, считающих отзыв бесполезным. */
    )

    /**
    * Assign all the columns from the entity of type FeedbackGradesDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedbackGradesDTO()
    * database.update(FeedbackGradesDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedbackGradesDTO) {
        this.apply {
            set(FeedbackGradesDTOs.average, entity.average)
            set(FeedbackGradesDTOs.agreeCount, entity.agreeCount)
            set(FeedbackGradesDTOs.rejectCount, entity.rejectCount)
        }
    }

}


object FeedbackGradesDTOFeedbackFactorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FeedbackGradesDTOFeedbackFactorDTO") {
    val feedbackGradesDTO = long("feedbackGradesDTO")
    val feedbackFactorDTO = long("feedbackFactorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[feedbackGradesDTO] ?: 0, row[feedbackFactorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FeedbackGradesDTOFeedbackFactorDTO.feedbackGradesDTO, entity.first)
            set(FeedbackGradesDTOFeedbackFactorDTO.feedbackFactorDTO, entity.second)
        }
    }

}

