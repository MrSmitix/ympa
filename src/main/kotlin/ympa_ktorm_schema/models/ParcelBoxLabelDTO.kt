/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о ярлыке для коробки.
 * @param url Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
 * @param supplierName Юридическое название магазина.
 * @param deliveryServiceName Юридическое название службы доставки.
 * @param orderId Идентификатор заказа в системе Маркета.
 * @param orderNum Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
 * @param recipientName Фамилия и инициалы получателя заказа.
 * @param boxId Идентификатор коробки.
 * @param fulfilmentId Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
 * @param place Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
 * @param weight {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
 * @param deliveryServiceId Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
 * @param deliveryAddress Адрес получателя.
 * @param shipmentDate Дата отгрузки в формате `dd.MM.yyyy`.
 */
object ParcelBoxLabelDTOs : BaseTable<ParcelBoxLabelDTO>("ParcelBoxLabelDTO") {
    val url = text("url") /* Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).  */
    val supplierName = text("supplierName") /* Юридическое название магазина. */
    val deliveryServiceName = text("deliveryServiceName") /* Юридическое название службы доставки. */
    val orderId = long("orderId") /* Идентификатор заказа в системе Маркета. */
    val orderNum = text("orderNum") /* Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина.  */
    val recipientName = text("recipientName") /* Фамилия и инициалы получателя заказа. */
    val boxId = long("boxId") /* Идентификатор коробки. */
    val fulfilmentId = text("fulfilmentId") /* Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д.  */
    val place = text("place") /* Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`.  */
    val weight = text("weight") /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`.  */
    val deliveryServiceId = text("deliveryServiceId") /* Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). */
    val deliveryAddress = text("deliveryAddress") /* null */ /* Адрес получателя. */
    val shipmentDate = text("shipmentDate") /* null */ /* Дата отгрузки в формате `dd.MM.yyyy`. */

    /**
     * Create an entity of type ParcelBoxLabelDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ParcelBoxLabelDTO(
        url = row[url] ?: "" /* kotlin.String */ /* Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).  */,
        supplierName = row[supplierName] ?: "" /* kotlin.String */ /* Юридическое название магазина. */,
        deliveryServiceName = row[deliveryServiceName] ?: "" /* kotlin.String */ /* Юридическое название службы доставки. */,
        orderId = row[orderId] ?: 0 /* kotlin.Long */ /* Идентификатор заказа в системе Маркета. */,
        orderNum = row[orderNum] ?: "" /* kotlin.String */ /* Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина.  */,
        recipientName = row[recipientName] ?: "" /* kotlin.String */ /* Фамилия и инициалы получателя заказа. */,
        boxId = row[boxId] ?: 0 /* kotlin.Long */ /* Идентификатор коробки. */,
        fulfilmentId = row[fulfilmentId] ?: "" /* kotlin.String */ /* Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д.  */,
        place = row[place] ?: "" /* kotlin.String */ /* Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`.  */,
        weight = row[weight] ?: "" /* kotlin.String */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`.  */,
        deliveryServiceId = row[deliveryServiceId] ?: "" /* kotlin.String */ /* Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). */,
        deliveryAddress = row[deliveryAddress]  /* kotlin.String? */ /* Адрес получателя. */,
        shipmentDate = row[shipmentDate]  /* kotlin.String? */ /* Дата отгрузки в формате `dd.MM.yyyy`. */
    )

    /**
    * Assign all the columns from the entity of type ParcelBoxLabelDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ParcelBoxLabelDTO()
    * database.update(ParcelBoxLabelDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ParcelBoxLabelDTO) {
        this.apply {
            set(ParcelBoxLabelDTOs.url, entity.url)
            set(ParcelBoxLabelDTOs.supplierName, entity.supplierName)
            set(ParcelBoxLabelDTOs.deliveryServiceName, entity.deliveryServiceName)
            set(ParcelBoxLabelDTOs.orderId, entity.orderId)
            set(ParcelBoxLabelDTOs.orderNum, entity.orderNum)
            set(ParcelBoxLabelDTOs.recipientName, entity.recipientName)
            set(ParcelBoxLabelDTOs.boxId, entity.boxId)
            set(ParcelBoxLabelDTOs.fulfilmentId, entity.fulfilmentId)
            set(ParcelBoxLabelDTOs.place, entity.place)
            set(ParcelBoxLabelDTOs.weight, entity.weight)
            set(ParcelBoxLabelDTOs.deliveryServiceId, entity.deliveryServiceId)
            set(ParcelBoxLabelDTOs.deliveryAddress, entity.deliveryAddress)
            set(ParcelBoxLabelDTOs.shipmentDate, entity.shipmentDate)
        }
    }

}


