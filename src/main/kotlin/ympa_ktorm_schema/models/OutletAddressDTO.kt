/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Адрес точки продаж. 
 * @param regionId Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
 * @param street Улица.
 * @param number Номер дома.
 * @param building Номер строения.
 * @param estate Номер владения.
 * @param block Номер корпуса.
 * @param additional Дополнительная информация.
 * @param km Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
 * @param city {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
 */
object OutletAddressDTOs : BaseTable<OutletAddressDTO>("OutletAddressDTO") {
    val regionId = long("regionId") /* Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}  */
    val street = text("street") /* null */ /* Улица. */
    val number = text("number") /* null */ /* Номер дома. */
    val building = text("building") /* null */ /* Номер строения. */
    val estate = text("estate") /* null */ /* Номер владения. */
    val block = text("block") /* null */ /* Номер корпуса. */
    val additional = text("additional") /* null */ /* Дополнительная информация. */
    val km = int("km") /* null */ /* Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица. */
    val city = text("city") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %}  */

    /**
     * Create an entity of type OutletAddressDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OutletAddressDTO(
        regionId = row[regionId] ?: 0 /* kotlin.Long */ /* Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}  */,
        street = row[street]  /* kotlin.String? */ /* Улица. */,
        number = row[number]  /* kotlin.String? */ /* Номер дома. */,
        building = row[building]  /* kotlin.String? */ /* Номер строения. */,
        estate = row[estate]  /* kotlin.String? */ /* Номер владения. */,
        block = row[block]  /* kotlin.String? */ /* Номер корпуса. */,
        additional = row[additional]  /* kotlin.String? */ /* Дополнительная информация. */,
        km = row[km]  /* kotlin.Int? */ /* Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица. */,
        city = row[city]  /* kotlin.String? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %}  */
    )

    /**
    * Assign all the columns from the entity of type OutletAddressDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OutletAddressDTO()
    * database.update(OutletAddressDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OutletAddressDTO) {
        this.apply {
            set(OutletAddressDTOs.regionId, entity.regionId)
            set(OutletAddressDTOs.street, entity.street)
            set(OutletAddressDTOs.number, entity.number)
            set(OutletAddressDTOs.building, entity.building)
            set(OutletAddressDTOs.estate, entity.estate)
            set(OutletAddressDTOs.block, entity.block)
            set(OutletAddressDTOs.additional, entity.additional)
            set(OutletAddressDTOs.km, entity.km)
            set(OutletAddressDTOs.city, entity.city)
        }
    }

}


