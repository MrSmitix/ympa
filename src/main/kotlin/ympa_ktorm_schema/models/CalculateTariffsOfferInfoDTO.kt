/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Стоимость услуг.
 * @param offer 
 * @param tariffs Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
 */
object CalculateTariffsOfferInfoDTOs : BaseTable<CalculateTariffsOfferInfoDTO>("CalculateTariffsOfferInfoDTO") {
    val offer = long("offer")

    /**
     * Create an entity of type CalculateTariffsOfferInfoDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CalculateTariffsOfferInfoDTO(
        offer = CalculateTariffsOfferDTOs.createEntity(row, withReferences) /* CalculateTariffsOfferDTO */,
        tariffs = emptyList() /* kotlin.Array<CalculatedTariffDTO> */ /* Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).  */
    )

    /**
    * Assign all the columns from the entity of type CalculateTariffsOfferInfoDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CalculateTariffsOfferInfoDTO()
    * database.update(CalculateTariffsOfferInfoDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CalculateTariffsOfferInfoDTO) {
        this.apply {
            set(CalculateTariffsOfferInfoDTOs.offer, entity.offer)
        }
    }

}


object CalculateTariffsOfferInfoDTOCalculatedTariffDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CalculateTariffsOfferInfoDTOCalculatedTariffDTO") {
    val calculateTariffsOfferInfoDTO = long("calculateTariffsOfferInfoDTO")
    val calculatedTariffDTO = long("calculatedTariffDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[calculateTariffsOfferInfoDTO] ?: 0, row[calculatedTariffDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CalculateTariffsOfferInfoDTOCalculatedTariffDTO.calculateTariffsOfferInfoDTO, entity.first)
            set(CalculateTariffsOfferInfoDTOCalculatedTariffDTO.calculatedTariffDTO, entity.second)
        }
    }

}

