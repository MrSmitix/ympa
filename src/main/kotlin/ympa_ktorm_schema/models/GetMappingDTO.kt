/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о товарах в каталоге. 
 * @param marketSku SKU на Маркете.
 * @param marketSkuName Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
 * @param marketModelId Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
 * @param marketModelName Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
 * @param marketCategoryId Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
 * @param marketCategoryName Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
 */
object GetMappingDTOs : BaseTable<GetMappingDTO>("GetMappingDTO") {
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val marketSkuName = text("marketSkuName") /* null */ /* Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    val marketModelId = long("marketModelId") /* null */ /* Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    val marketModelName = text("marketModelName") /* null */ /* Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
    val marketCategoryId = long("marketCategoryId") /* null */ /* Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
    val marketCategoryName = text("marketCategoryName") /* null */ /* Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */

    /**
     * Create an entity of type GetMappingDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetMappingDTO(
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        marketSkuName = row[marketSkuName]  /* kotlin.String? */ /* Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */,
        marketModelId = row[marketModelId]  /* kotlin.Long? */ /* Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */,
        marketModelName = row[marketModelName]  /* kotlin.String? */ /* Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */,
        marketCategoryId = row[marketCategoryId]  /* kotlin.Long? */ /* Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */,
        marketCategoryName = row[marketCategoryName]  /* kotlin.String? */ /* Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
    )

    /**
    * Assign all the columns from the entity of type GetMappingDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetMappingDTO()
    * database.update(GetMappingDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetMappingDTO) {
        this.apply {
            set(GetMappingDTOs.marketSku, entity.marketSku)
            set(GetMappingDTOs.marketSkuName, entity.marketSkuName)
            set(GetMappingDTOs.marketModelId, entity.marketModelId)
            set(GetMappingDTOs.marketModelName, entity.marketModelName)
            set(GetMappingDTOs.marketCategoryId, entity.marketCategoryId)
            set(GetMappingDTOs.marketCategoryName, entity.marketCategoryName)
        }
    }

}


