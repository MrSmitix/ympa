/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об автоматическом добавлении товара в акцию.  Причины, по которым товар не был добавлен автоматически в других магазинах, можно узнать в кабинете продавца на Маркете на странице акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
 * @param campaignIds Магазины, в которых товар добавлен в акцию автоматически.  Возвращается, если статус товара в акции — `PARTIALLY_AUTO`. 
 */
object PromoOfferAutoParticipatingDetailsDTOs : BaseTable<PromoOfferAutoParticipatingDetailsDTO>("PromoOfferAutoParticipatingDetailsDTO") {

    /**
     * Create an entity of type PromoOfferAutoParticipatingDetailsDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PromoOfferAutoParticipatingDetailsDTO(
        campaignIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Магазины, в которых товар добавлен в акцию автоматически.  Возвращается, если статус товара в акции — `PARTIALLY_AUTO`.  */
    )

    /**
    * Assign all the columns from the entity of type PromoOfferAutoParticipatingDetailsDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PromoOfferAutoParticipatingDetailsDTO()
    * database.update(PromoOfferAutoParticipatingDetailsDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PromoOfferAutoParticipatingDetailsDTO) {
        this.apply {
        }
    }

}


object PromoOfferAutoParticipatingDetailsDTOCampaignIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("PromoOfferAutoParticipatingDetailsDTOCampaignIds") {
    val promoOfferAutoParticipatingDetailsDTO = long("promoOfferAutoParticipatingDetailsDTO")
    val campaignIds = long("campaignIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[promoOfferAutoParticipatingDetailsDTO] ?: 0, row[campaignIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(PromoOfferAutoParticipatingDetailsDTOCampaignIds.promoOfferAutoParticipatingDetailsDTO, entity.first)
            set(PromoOfferAutoParticipatingDetailsDTOCampaignIds.campaignIds, entity.second)
        }
    }

}

