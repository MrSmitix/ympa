/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Запрос информации об отгрузках.
 * @param dateFrom Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
 * @param dateTo Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`. 
 * @param statuses Список статусов отгрузок.
 * @param orderIds Список идентификаторов заказов из отгрузок.
 * @param cancelledOrders Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 
 */
object SearchShipmentsRequests : BaseTable<SearchShipmentsRequest>("SearchShipmentsRequest") {
    val dateFrom = date("dateFrom") /* Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */
    val dateTo = date("dateTo") /* Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */
    val cancelledOrders = boolean("cancelledOrders") /* null */ /* Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`.  */

    /**
     * Create an entity of type SearchShipmentsRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SearchShipmentsRequest(
        dateFrom = row[dateFrom] /* java.time.LocalDate */ /* Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */,
        dateTo = row[dateTo] /* java.time.LocalDate */ /* Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: `ДД-ММ-ГГГГ`.  */,
        statuses = emptyList() /* kotlin.collections.Set<ShipmentStatusType>? */ /* Список статусов отгрузок. */,
        orderIds = emptyList() /* kotlin.collections.Set<kotlin.Long>? */ /* Список идентификаторов заказов из отгрузок. */,
        cancelledOrders = row[cancelledOrders] ?: true /* kotlin.Boolean? */ /* Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`.  */
    )

    /**
    * Assign all the columns from the entity of type SearchShipmentsRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SearchShipmentsRequest()
    * database.update(SearchShipmentsRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SearchShipmentsRequest) {
        this.apply {
            set(SearchShipmentsRequests.dateFrom, entity.dateFrom)
            set(SearchShipmentsRequests.dateTo, entity.dateTo)
            set(SearchShipmentsRequests.cancelledOrders, entity.cancelledOrders)
        }
    }

}


object SearchShipmentsRequestShipmentStatusType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SearchShipmentsRequestShipmentStatusType") {
    val searchShipmentsRequest = long("searchShipmentsRequest")
    val shipmentStatusType = long("shipmentStatusType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[searchShipmentsRequest] ?: 0, row[shipmentStatusType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SearchShipmentsRequestShipmentStatusType.searchShipmentsRequest, entity.first)
            set(SearchShipmentsRequestShipmentStatusType.shipmentStatusType, entity.second)
        }
    }

}

object SearchShipmentsRequestOrderIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SearchShipmentsRequestOrderIds") {
    val searchShipmentsRequest = long("searchShipmentsRequest")
    val orderIds = long("orderIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[searchShipmentsRequest] ?: 0, row[orderIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SearchShipmentsRequestOrderIds.searchShipmentsRequest, entity.first)
            set(SearchShipmentsRequestOrderIds.orderIds, entity.second)
        }
    }

}

