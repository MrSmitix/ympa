/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Запрос на установку новых значений для параметров.
 * @param offersContent Список товаров с указанными характеристиками.
 */
object UpdateOfferContentRequests : BaseTable<UpdateOfferContentRequest>("UpdateOfferContentRequest") {

    /**
     * Create an entity of type UpdateOfferContentRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdateOfferContentRequest(
        offersContent = emptyList() /* kotlin.Array<OfferContentDTO> */ /* Список товаров с указанными характеристиками. */
    )

    /**
    * Assign all the columns from the entity of type UpdateOfferContentRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdateOfferContentRequest()
    * database.update(UpdateOfferContentRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdateOfferContentRequest) {
        this.apply {
        }
    }

}


object UpdateOfferContentRequestOfferContentDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdateOfferContentRequestOfferContentDTO") {
    val updateOfferContentRequest = long("updateOfferContentRequest")
    val offerContentDTO = long("offerContentDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updateOfferContentRequest] ?: 0, row[offerContentDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdateOfferContentRequestOfferContentDTO.updateOfferContentRequest, entity.first)
            set(UpdateOfferContentRequestOfferContentDTO.offerContentDTO, entity.second)
        }
    }

}

