/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param offerMappings Перечень товаров, которые нужно добавить или обновить.
 * @param onlyPartnerMediaContent Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. 
 */
object UpdateOfferMappingsRequests : BaseTable<UpdateOfferMappingsRequest>("UpdateOfferMappingsRequest") {
    val onlyPartnerMediaContent = boolean("onlyPartnerMediaContent") /* null */ /* Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`.  */

    /**
     * Create an entity of type UpdateOfferMappingsRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdateOfferMappingsRequest(
        offerMappings = emptyList() /* kotlin.Array<UpdateOfferMappingDTO> */ /* Перечень товаров, которые нужно добавить или обновить. */,
        onlyPartnerMediaContent = row[onlyPartnerMediaContent]  /* kotlin.Boolean? */ /* Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`.  */
    )

    /**
    * Assign all the columns from the entity of type UpdateOfferMappingsRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdateOfferMappingsRequest()
    * database.update(UpdateOfferMappingsRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdateOfferMappingsRequest) {
        this.apply {
            set(UpdateOfferMappingsRequests.onlyPartnerMediaContent, entity.onlyPartnerMediaContent)
        }
    }

}


object UpdateOfferMappingsRequestUpdateOfferMappingDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdateOfferMappingsRequestUpdateOfferMappingDTO") {
    val updateOfferMappingsRequest = long("updateOfferMappingsRequest")
    val updateOfferMappingDTO = long("updateOfferMappingDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updateOfferMappingsRequest] ?: 0, row[updateOfferMappingDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdateOfferMappingsRequestUpdateOfferMappingDTO.updateOfferMappingsRequest, entity.first)
            set(UpdateOfferMappingsRequestUpdateOfferMappingDTO.updateOfferMappingDTO, entity.second)
        }
    }

}

