/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Запрос информации по индексу качества.
 * @param campaignIds Список идентификаторов магазинов.
 * @param dateFrom Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. 
 * @param dateTo Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. 
 */
object GetQualityRatingRequests : BaseTable<GetQualityRatingRequest>("GetQualityRatingRequest") {
    val dateFrom = date("dateFrom") /* null */ /* Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты.  */
    val dateTo = date("dateTo") /* null */ /* Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты.  */

    /**
     * Create an entity of type GetQualityRatingRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetQualityRatingRequest(
        campaignIds = emptyList() /* kotlin.collections.Set<kotlin.Long> */ /* Список идентификаторов магазинов. */,
        dateFrom = row[dateFrom]  /* java.time.LocalDate? */ /* Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты.  */,
        dateTo = row[dateTo]  /* java.time.LocalDate? */ /* Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты.  */
    )

    /**
    * Assign all the columns from the entity of type GetQualityRatingRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetQualityRatingRequest()
    * database.update(GetQualityRatingRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetQualityRatingRequest) {
        this.apply {
            set(GetQualityRatingRequests.dateFrom, entity.dateFrom)
            set(GetQualityRatingRequests.dateTo, entity.dateTo)
        }
    }

}


object GetQualityRatingRequestCampaignIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetQualityRatingRequestCampaignIds") {
    val getQualityRatingRequest = long("getQualityRatingRequest")
    val campaignIds = long("campaignIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getQualityRatingRequest] ?: 0, row[campaignIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetQualityRatingRequestCampaignIds.getQualityRatingRequest, entity.first)
            set(GetQualityRatingRequestCampaignIds.campaignIds, entity.second)
        }
    }

}

