/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 * @param type 
 * @param discount Размер пользовательской скидки в валюте покупателя. 
 * @param subsidy Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
 * @param shopPromoId Идентификатор акции поставщика. 
 * @param marketPromoId Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. 
 */
object OrderItemPromoDTOs : BaseTable<OrderItemPromoDTO>("OrderItemPromoDTO") {
    val type = long("type")
    val discount = decimal("discount") /* null */ /* Размер пользовательской скидки в валюте покупателя.  */
    val subsidy = decimal("subsidy") /* null */ /* Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа.  */
    val shopPromoId = text("shopPromoId") /* null */ /* Идентификатор акции поставщика.  */
    val marketPromoId = text("marketPromoId") /* null */ /* Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`.  */

    /**
     * Create an entity of type OrderItemPromoDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderItemPromoDTO(
        type = OrderPromoTypes.createEntity(row, withReferences) /* OrderPromoType */,
        discount = row[discount]  /* java.math.BigDecimal? */ /* Размер пользовательской скидки в валюте покупателя.  */,
        subsidy = row[subsidy]  /* java.math.BigDecimal? */ /* Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа.  */,
        shopPromoId = row[shopPromoId]  /* kotlin.String? */ /* Идентификатор акции поставщика.  */,
        marketPromoId = row[marketPromoId]  /* kotlin.String? */ /* Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`.  */
    )

    /**
    * Assign all the columns from the entity of type OrderItemPromoDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderItemPromoDTO()
    * database.update(OrderItemPromoDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderItemPromoDTO) {
        this.apply {
            set(OrderItemPromoDTOs.type, entity.type)
            set(OrderItemPromoDTOs.discount, entity.discount)
            set(OrderItemPromoDTOs.subsidy, entity.subsidy)
            set(OrderItemPromoDTOs.shopPromoId, entity.shopPromoId)
            set(OrderItemPromoDTOs.marketPromoId, entity.marketPromoId)
        }
    }

}


