/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Расписание работы точки продаж.
 * @param startDay 
 * @param endDay 
 * @param startTime Точка продаж работает c указанного часа.  Формат: `ЧЧ:ММ`. 
 * @param endTime Точка продаж работает до указанного часа.  Формат: `ЧЧ:ММ`. 
 */
object OutletWorkingScheduleItemDTOs : BaseTable<OutletWorkingScheduleItemDTO>("OutletWorkingScheduleItemDTO") {
    val startDay = long("startDay")
    val endDay = long("endDay")
    val startTime = text("startTime") /* Точка продаж работает c указанного часа.  Формат: `ЧЧ:ММ`.  */
    val endTime = text("endTime") /* Точка продаж работает до указанного часа.  Формат: `ЧЧ:ММ`.  */

    /**
     * Create an entity of type OutletWorkingScheduleItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OutletWorkingScheduleItemDTO(
        startDay = DayOfWeekTypes.createEntity(row, withReferences) /* DayOfWeekType */,
        endDay = DayOfWeekTypes.createEntity(row, withReferences) /* DayOfWeekType */,
        startTime = row[startTime] ?: "" /* kotlin.String */ /* Точка продаж работает c указанного часа.  Формат: `ЧЧ:ММ`.  */,
        endTime = row[endTime] ?: "" /* kotlin.String */ /* Точка продаж работает до указанного часа.  Формат: `ЧЧ:ММ`.  */
    )

    /**
    * Assign all the columns from the entity of type OutletWorkingScheduleItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OutletWorkingScheduleItemDTO()
    * database.update(OutletWorkingScheduleItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OutletWorkingScheduleItemDTO) {
        this.apply {
            set(OutletWorkingScheduleItemDTOs.startDay, entity.startDay)
            set(OutletWorkingScheduleItemDTOs.endDay, entity.endDay)
            set(OutletWorkingScheduleItemDTOs.startTime, entity.startTime)
            set(OutletWorkingScheduleItemDTOs.endTime, entity.endTime)
        }
    }

}


