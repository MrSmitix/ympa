/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список посылок.  В параметре может указываться несколько посылок. 
 * @param id Идентификатор посылки, присвоенный Маркетом.
 * @param shipmentDate Формат даты: `ДД-ММ-ГГГГ`. 
 * @param shipmentTime **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
 * @param tracks **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
 * @param boxes Список грузовых мест.
 */
object OrderShipmentDTOs : BaseTable<OrderShipmentDTO>("OrderShipmentDTO") {
    val id = long("id") /* null */ /* Идентификатор посылки, присвоенный Маркетом. */
    val shipmentDate = text("shipmentDate") /* null */ /* Формат даты: `ДД-ММ-ГГГГ`.  */
    val shipmentTime = text("shipmentTime") /* null */ /* **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки.  */

    /**
     * Create an entity of type OrderShipmentDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderShipmentDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор посылки, присвоенный Маркетом. */,
        shipmentDate = row[shipmentDate]  /* kotlin.String? */ /* Формат даты: `ДД-ММ-ГГГГ`.  */,
        shipmentTime = row[shipmentTime]  /* kotlin.String? */ /* **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки.  */,
        tracks = emptyList() /* kotlin.Array<OrderTrackDTO>? */ /* **Только для модели DBS**  Информация для отслеживания перемещений посылки.  */,
        boxes = emptyList() /* kotlin.Array<OrderParcelBoxDTO>? */ /* Список грузовых мест. */
    )

    /**
    * Assign all the columns from the entity of type OrderShipmentDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderShipmentDTO()
    * database.update(OrderShipmentDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderShipmentDTO) {
        this.apply {
            set(OrderShipmentDTOs.id, entity.id)
            set(OrderShipmentDTOs.shipmentDate, entity.shipmentDate)
            set(OrderShipmentDTOs.shipmentTime, entity.shipmentTime)
        }
    }

}


object OrderShipmentDTOOrderTrackDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderShipmentDTOOrderTrackDTO") {
    val orderShipmentDTO = long("orderShipmentDTO")
    val orderTrackDTO = long("orderTrackDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderShipmentDTO] ?: 0, row[orderTrackDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderShipmentDTOOrderTrackDTO.orderShipmentDTO, entity.first)
            set(OrderShipmentDTOOrderTrackDTO.orderTrackDTO, entity.second)
        }
    }

}

object OrderShipmentDTOOrderParcelBoxDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderShipmentDTOOrderParcelBoxDTO") {
    val orderShipmentDTO = long("orderShipmentDTO")
    val orderParcelBoxDTO = long("orderParcelBoxDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderShipmentDTO] ?: 0, row[orderParcelBoxDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderShipmentDTOOrderParcelBoxDTO.orderShipmentDTO, entity.first)
            set(OrderShipmentDTOOrderParcelBoxDTO.orderParcelBoxDTO, entity.second)
        }
    }

}

