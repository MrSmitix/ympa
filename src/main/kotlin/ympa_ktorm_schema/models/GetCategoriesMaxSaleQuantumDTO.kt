/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Категории и лимит на установку кванта и минимального количества товаров.
 * @param results Категории и лимит на установку кванта и минимального количества товаров.
 * @param errors Ошибки, которые появились из-за переданных категорий.
 */
object GetCategoriesMaxSaleQuantumDTOs : BaseTable<GetCategoriesMaxSaleQuantumDTO>("GetCategoriesMaxSaleQuantumDTO") {

    /**
     * Create an entity of type GetCategoriesMaxSaleQuantumDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetCategoriesMaxSaleQuantumDTO(
        results = emptyList() /* kotlin.Array<MaxSaleQuantumDTO> */ /* Категории и лимит на установку кванта и минимального количества товаров. */,
        errors = emptyList() /* kotlin.Array<CategoryErrorDTO>? */ /* Ошибки, которые появились из-за переданных категорий. */
    )

    /**
    * Assign all the columns from the entity of type GetCategoriesMaxSaleQuantumDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetCategoriesMaxSaleQuantumDTO()
    * database.update(GetCategoriesMaxSaleQuantumDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetCategoriesMaxSaleQuantumDTO) {
        this.apply {
        }
    }

}


object GetCategoriesMaxSaleQuantumDTOMaxSaleQuantumDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetCategoriesMaxSaleQuantumDTOMaxSaleQuantumDTO") {
    val getCategoriesMaxSaleQuantumDTO = long("getCategoriesMaxSaleQuantumDTO")
    val maxSaleQuantumDTO = long("maxSaleQuantumDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getCategoriesMaxSaleQuantumDTO] ?: 0, row[maxSaleQuantumDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetCategoriesMaxSaleQuantumDTOMaxSaleQuantumDTO.getCategoriesMaxSaleQuantumDTO, entity.first)
            set(GetCategoriesMaxSaleQuantumDTOMaxSaleQuantumDTO.maxSaleQuantumDTO, entity.second)
        }
    }

}

object GetCategoriesMaxSaleQuantumDTOCategoryErrorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetCategoriesMaxSaleQuantumDTOCategoryErrorDTO") {
    val getCategoriesMaxSaleQuantumDTO = long("getCategoriesMaxSaleQuantumDTO")
    val categoryErrorDTO = long("categoryErrorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getCategoriesMaxSaleQuantumDTO] ?: 0, row[categoryErrorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetCategoriesMaxSaleQuantumDTOCategoryErrorDTO.getCategoriesMaxSaleQuantumDTO, entity.first)
            set(GetCategoriesMaxSaleQuantumDTOCategoryErrorDTO.categoryErrorDTO, entity.second)
        }
    }

}

