/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Предложение.
 * @param modelId Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
 * @param price Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
 * @param feedId Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @param id Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @param shopCategoryId Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @param marketCategoryId Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
 * @param preDiscountPrice Цена предложения без скидки.
 * @param discount Скидка на предложение в процентах.
 * @param cutPrice Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
 * @param url URL-адрес предложения на сайте магазина.
 * @param name Наименование предложения.
 * @param currency 
 * @param bid {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
 * @param cbid {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
 * @param fee {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
 * @param blocked Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
 */
object OfferDTOs : BaseTable<OfferDTO>("OfferDTO") {
    val modelId = long("modelId") /* Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}  */
    val price = decimal("price") /* null */ /* Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.  */
    val feedId = long("feedId") /* null */ /* Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    val id = text("id") /* null */ /* Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    val shopCategoryId = text("shopCategoryId") /* null */ /* Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  */
    val marketCategoryId = int("marketCategoryId") /* null */ /* Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.  */
    val preDiscountPrice = decimal("preDiscountPrice") /* null */ /* Цена предложения без скидки. */
    val discount = int("discount") /* null */ /* Скидка на предложение в процентах. */
    val cutPrice = boolean("cutPrice") /* null */ /* Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.  */
    val url = text("url") /* null */ /* URL-адрес предложения на сайте магазина. */
    val name = text("name") /* null */ /* Наименование предложения. */
    val currency = long("currency") /* null */
    val bid = decimal("bid") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
    val cbid = decimal("cbid") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
    val fee = decimal("fee") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.  */
    val blocked = boolean("blocked") /* null */ /* Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.  */

    /**
     * Create an entity of type OfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OfferDTO(
        modelId = row[modelId] ?: 0 /* kotlin.Long */ /* Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}  */,
        price = row[price]  /* java.math.BigDecimal? */ /* Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.  */,
        feedId = row[feedId]  /* kotlin.Long? */ /* Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.  */,
        id = row[id]  /* kotlin.String? */ /* Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.  */,
        shopCategoryId = row[shopCategoryId]  /* kotlin.String? */ /* Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  */,
        marketCategoryId = row[marketCategoryId]  /* kotlin.Int? */ /* Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.  */,
        preDiscountPrice = row[preDiscountPrice]  /* java.math.BigDecimal? */ /* Цена предложения без скидки. */,
        discount = row[discount]  /* kotlin.Int? */ /* Скидка на предложение в процентах. */,
        cutPrice = row[cutPrice]  /* kotlin.Boolean? */ /* Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.  */,
        url = row[url]  /* kotlin.String? */ /* URL-адрес предложения на сайте магазина. */,
        name = row[name]  /* kotlin.String? */ /* Наименование предложения. */,
        currency = CurrencyTypes.createEntity(row, withReferences) /* CurrencyType? */,
        bid = row[bid]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */,
        cbid = row[cbid]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */,
        fee = row[fee]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.  */,
        blocked = row[blocked]  /* kotlin.Boolean? */ /* Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.  */
    )

    /**
    * Assign all the columns from the entity of type OfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OfferDTO()
    * database.update(OfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OfferDTO) {
        this.apply {
            set(OfferDTOs.modelId, entity.modelId)
            set(OfferDTOs.price, entity.price)
            set(OfferDTOs.feedId, entity.feedId)
            set(OfferDTOs.id, entity.id)
            set(OfferDTOs.shopCategoryId, entity.shopCategoryId)
            set(OfferDTOs.marketCategoryId, entity.marketCategoryId)
            set(OfferDTOs.preDiscountPrice, entity.preDiscountPrice)
            set(OfferDTOs.discount, entity.discount)
            set(OfferDTOs.cutPrice, entity.cutPrice)
            set(OfferDTOs.url, entity.url)
            set(OfferDTOs.name, entity.name)
            set(OfferDTOs.currency, entity.currency)
            set(OfferDTOs.bid, entity.bid)
            set(OfferDTOs.cbid, entity.cbid)
            set(OfferDTOs.fee, entity.fee)
            set(OfferDTOs.blocked, entity.blocked)
        }
    }

}


