/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Настройки кабинета.
 * @param onlyDefaultPrice Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену. 
 * @param currency 
 */
object BusinessSettingsDTOs : BaseTable<BusinessSettingsDTO>("BusinessSettingsDTO") {
    val onlyDefaultPrice = boolean("onlyDefaultPrice") /* null */ /* Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену.  */
    val currency = long("currency") /* null */

    /**
     * Create an entity of type BusinessSettingsDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BusinessSettingsDTO(
        onlyDefaultPrice = row[onlyDefaultPrice]  /* kotlin.Boolean? */ /* Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену.  */,
        currency = CurrencyTypes.createEntity(row, withReferences) /* CurrencyType? */
    )

    /**
    * Assign all the columns from the entity of type BusinessSettingsDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BusinessSettingsDTO()
    * database.update(BusinessSettingsDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BusinessSettingsDTO) {
        this.apply {
            set(BusinessSettingsDTOs.onlyDefaultPrice, entity.onlyDefaultPrice)
            set(BusinessSettingsDTOs.currency, entity.currency)
        }
    }

}


