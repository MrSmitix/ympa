/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param offerIds Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * `page_token`; * `limit`; * `cardStatuses`; * `categoryIds`; * `vendorNames`; * `tags`; * `archived`.  {% endnote %}    
 * @param cardStatuses Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
 * @param categoryIds Фильтр по категориям на Маркете.
 * @param vendorNames Фильтр по брендам.
 * @param tags Фильтр по тегам.
 * @param archived Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве. 
 */
object GetOfferMappingsRequests : BaseTable<GetOfferMappingsRequest>("GetOfferMappingsRequest") {
    val archived = boolean("archived") /* null */ /* Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве.  */

    /**
     * Create an entity of type GetOfferMappingsRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetOfferMappingsRequest(
        offerIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * `page_token`; * `limit`; * `cardStatuses`; * `categoryIds`; * `vendorNames`; * `tags`; * `archived`.  {% endnote %}     */,
        cardStatuses = emptyList() /* kotlin.Array<OfferCardStatusType>? */ /* Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)  */,
        categoryIds = emptyList() /* kotlin.Array<kotlin.Int>? */ /* Фильтр по категориям на Маркете. */,
        vendorNames = emptyList() /* kotlin.Array<kotlin.String>? */ /* Фильтр по брендам. */,
        tags = emptyList() /* kotlin.Array<kotlin.String>? */ /* Фильтр по тегам. */,
        archived = row[archived]  /* kotlin.Boolean? */ /* Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве.  */
    )

    /**
    * Assign all the columns from the entity of type GetOfferMappingsRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetOfferMappingsRequest()
    * database.update(GetOfferMappingsRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetOfferMappingsRequest) {
        this.apply {
            set(GetOfferMappingsRequests.archived, entity.archived)
        }
    }

}


object GetOfferMappingsRequestOfferIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferMappingsRequestOfferIds") {
    val getOfferMappingsRequest = long("getOfferMappingsRequest")
    val offerIds = text("offerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferMappingsRequest] ?: 0, row[offerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferMappingsRequestOfferIds.getOfferMappingsRequest, entity.first)
            set(GetOfferMappingsRequestOfferIds.offerIds, entity.second)
        }
    }

}

object GetOfferMappingsRequestOfferCardStatusType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GetOfferMappingsRequestOfferCardStatusType") {
    val getOfferMappingsRequest = long("getOfferMappingsRequest")
    val offerCardStatusType = long("offerCardStatusType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[getOfferMappingsRequest] ?: 0, row[offerCardStatusType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GetOfferMappingsRequestOfferCardStatusType.getOfferMappingsRequest, entity.first)
            set(GetOfferMappingsRequestOfferCardStatusType.offerCardStatusType, entity.second)
        }
    }

}

object GetOfferMappingsRequestCategoryIds : BaseTable<Pair<kotlin.Long, kotlin.Int>>("GetOfferMappingsRequestCategoryIds") {
    val getOfferMappingsRequest = long("getOfferMappingsRequest")
    val categoryIds = int("categoryIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[getOfferMappingsRequest] ?: 0, row[categoryIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(GetOfferMappingsRequestCategoryIds.getOfferMappingsRequest, entity.first)
            set(GetOfferMappingsRequestCategoryIds.categoryIds, entity.second)
        }
    }

}

object GetOfferMappingsRequestVendorNames : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferMappingsRequestVendorNames") {
    val getOfferMappingsRequest = long("getOfferMappingsRequest")
    val vendorNames = text("vendorNames")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferMappingsRequest] ?: 0, row[vendorNames] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferMappingsRequestVendorNames.getOfferMappingsRequest, entity.first)
            set(GetOfferMappingsRequestVendorNames.vendorNames, entity.second)
        }
    }

}

object GetOfferMappingsRequestTags : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetOfferMappingsRequestTags") {
    val getOfferMappingsRequest = long("getOfferMappingsRequest")
    val tags = text("tags")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getOfferMappingsRequest] ?: 0, row[tags] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetOfferMappingsRequestTags.getOfferMappingsRequest, entity.first)
            set(GetOfferMappingsRequestTags.tags, entity.second)
        }
    }

}

