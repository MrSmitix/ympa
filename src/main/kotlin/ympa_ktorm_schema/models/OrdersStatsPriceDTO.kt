/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Цена или скидки на товар.
 * @param type 
 * @param costPerItem Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. 
 * @param total Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. 
 */
object OrdersStatsPriceDTOs : BaseTable<OrdersStatsPriceDTO>("OrdersStatsPriceDTO") {
    val type = long("type") /* null */
    val costPerItem = decimal("costPerItem") /* null */ /* Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой.  */
    val total = decimal("total") /* null */ /* Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой.  */

    /**
     * Create an entity of type OrdersStatsPriceDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersStatsPriceDTO(
        type = OrdersStatsPriceTypes.createEntity(row, withReferences) /* OrdersStatsPriceType? */,
        costPerItem = row[costPerItem]  /* java.math.BigDecimal? */ /* Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой.  */,
        total = row[total]  /* java.math.BigDecimal? */ /* Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой.  */
    )

    /**
    * Assign all the columns from the entity of type OrdersStatsPriceDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersStatsPriceDTO()
    * database.update(OrdersStatsPriceDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersStatsPriceDTO) {
        this.apply {
            set(OrdersStatsPriceDTOs.type, entity.type)
            set(OrdersStatsPriceDTOs.costPerItem, entity.costPerItem)
            set(OrdersStatsPriceDTOs.total, entity.total)
        }
    }

}


