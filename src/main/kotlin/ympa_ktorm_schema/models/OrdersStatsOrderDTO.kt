/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о заказе.
 * @param items Список товаров в заказе после возможных изменений.
 * @param payments Информация о денежных переводах по заказу.
 * @param commissions Информация о комиссиях за заказ.
 * @param id Идентификатор заказа.
 * @param creationDate Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
 * @param statusUpdateDate Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
 * @param status 
 * @param partnerOrderId Идентификатор заказа в информационной системе магазина.
 * @param paymentType 
 * @param fake Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
 * @param deliveryRegion 
 * @param initialItems Список товаров в заказе до изменений.
 */
object OrdersStatsOrderDTOs : BaseTable<OrdersStatsOrderDTO>("OrdersStatsOrderDTO") {
    val id = long("id") /* null */ /* Идентификатор заказа. */
    val creationDate = date("creationDate") /* null */ /* Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`.  */
    val statusUpdateDate = datetime("statusUpdateDate") /* null */ /* Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).  */
    val status = long("status") /* null */
    val partnerOrderId = text("partnerOrderId") /* null */ /* Идентификатор заказа в информационной системе магазина. */
    val paymentType = long("paymentType") /* null */
    val fake = boolean("fake") /* null */ /* Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
    val deliveryRegion = long("deliveryRegion") /* null */

    /**
     * Create an entity of type OrdersStatsOrderDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersStatsOrderDTO(
        items = emptyList() /* kotlin.Array<OrdersStatsItemDTO> */ /* Список товаров в заказе после возможных изменений. */,
        payments = emptyList() /* kotlin.Array<OrdersStatsPaymentDTO> */ /* Информация о денежных переводах по заказу. */,
        commissions = emptyList() /* kotlin.Array<OrdersStatsCommissionDTO> */ /* Информация о комиссиях за заказ. */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор заказа. */,
        creationDate = row[creationDate]  /* java.time.LocalDate? */ /* Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`.  */,
        statusUpdateDate = row[statusUpdateDate]  /* java.time.LocalDateTime? */ /* Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).  */,
        status = OrderStatsStatusTypes.createEntity(row, withReferences) /* OrderStatsStatusType? */,
        partnerOrderId = row[partnerOrderId]  /* kotlin.String? */ /* Идентификатор заказа в информационной системе магазина. */,
        paymentType = OrdersStatsOrderPaymentTypes.createEntity(row, withReferences) /* OrdersStatsOrderPaymentType? */,
        fake = row[fake]  /* kotlin.Boolean? */ /* Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */,
        deliveryRegion = OrdersStatsDeliveryRegionDTOs.createEntity(row, withReferences) /* OrdersStatsDeliveryRegionDTO? */,
        initialItems = emptyList() /* kotlin.Array<OrdersStatsItemDTO>? */ /* Список товаров в заказе до изменений. */
    )

    /**
    * Assign all the columns from the entity of type OrdersStatsOrderDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersStatsOrderDTO()
    * database.update(OrdersStatsOrderDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersStatsOrderDTO) {
        this.apply {
            set(OrdersStatsOrderDTOs.id, entity.id)
            set(OrdersStatsOrderDTOs.creationDate, entity.creationDate)
            set(OrdersStatsOrderDTOs.statusUpdateDate, entity.statusUpdateDate)
            set(OrdersStatsOrderDTOs.status, entity.status)
            set(OrdersStatsOrderDTOs.partnerOrderId, entity.partnerOrderId)
            set(OrdersStatsOrderDTOs.paymentType, entity.paymentType)
            set(OrdersStatsOrderDTOs.fake, entity.fake)
            set(OrdersStatsOrderDTOs.deliveryRegion, entity.deliveryRegion)
        }
    }

}


object OrdersStatsOrderDTOOrdersStatsItemDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsOrderDTOOrdersStatsItemDTO") {
    val ordersStatsOrderDTO = long("ordersStatsOrderDTO")
    val ordersStatsItemDTO = long("ordersStatsItemDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsOrderDTO] ?: 0, row[ordersStatsItemDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsOrderDTOOrdersStatsItemDTO.ordersStatsOrderDTO, entity.first)
            set(OrdersStatsOrderDTOOrdersStatsItemDTO.ordersStatsItemDTO, entity.second)
        }
    }

}

object OrdersStatsOrderDTOOrdersStatsPaymentDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsOrderDTOOrdersStatsPaymentDTO") {
    val ordersStatsOrderDTO = long("ordersStatsOrderDTO")
    val ordersStatsPaymentDTO = long("ordersStatsPaymentDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsOrderDTO] ?: 0, row[ordersStatsPaymentDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsOrderDTOOrdersStatsPaymentDTO.ordersStatsOrderDTO, entity.first)
            set(OrdersStatsOrderDTOOrdersStatsPaymentDTO.ordersStatsPaymentDTO, entity.second)
        }
    }

}

object OrdersStatsOrderDTOOrdersStatsCommissionDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsOrderDTOOrdersStatsCommissionDTO") {
    val ordersStatsOrderDTO = long("ordersStatsOrderDTO")
    val ordersStatsCommissionDTO = long("ordersStatsCommissionDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsOrderDTO] ?: 0, row[ordersStatsCommissionDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsOrderDTOOrdersStatsCommissionDTO.ordersStatsOrderDTO, entity.first)
            set(OrdersStatsOrderDTOOrdersStatsCommissionDTO.ordersStatsCommissionDTO, entity.second)
        }
    }

}

object OrdersStatsOrderDTOOrdersStatsItemDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersStatsOrderDTOOrdersStatsItemDTO") {
    val ordersStatsOrderDTO = long("ordersStatsOrderDTO")
    val ordersStatsItemDTO = long("ordersStatsItemDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersStatsOrderDTO] ?: 0, row[ordersStatsItemDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersStatsOrderDTOOrdersStatsItemDTO.ordersStatsOrderDTO, entity.first)
            set(OrdersStatsOrderDTOOrdersStatsItemDTO.ordersStatsItemDTO, entity.second)
        }
    }

}

