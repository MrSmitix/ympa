/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
 * @param country Страна.  Обязательный параметр. 
 * @param postcode Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). 
 * @param city Город или населенный пункт.  Обязательный параметр. 
 * @param district Район.
 * @param subway Станция метро.
 * @param street Улица.  Обязательный параметр. 
 * @param house Дом или владение.  Обязательный параметр. 
 * @param block Корпус или строение.
 * @param entrance Подъезд.
 * @param entryphone Код домофона.
 * @param floor Этаж.
 * @param apartment Квартира или офис.
 * @param phone Телефон получателя заказа.  Обязательный параметр. 
 * @param recipient Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
 * @param gps 
 */
object OrderDeliveryAddressDTOs : BaseTable<OrderDeliveryAddressDTO>("OrderDeliveryAddressDTO") {
    val country = text("country") /* null */ /* Страна.  Обязательный параметр.  */
    val postcode = text("postcode") /* null */ /* Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`).  */
    val city = text("city") /* null */ /* Город или населенный пункт.  Обязательный параметр.  */
    val district = text("district") /* null */ /* Район. */
    val subway = text("subway") /* null */ /* Станция метро. */
    val street = text("street") /* null */ /* Улица.  Обязательный параметр.  */
    val house = text("house") /* null */ /* Дом или владение.  Обязательный параметр.  */
    val block = text("block") /* null */ /* Корпус или строение. */
    val entrance = text("entrance") /* null */ /* Подъезд. */
    val entryphone = text("entryphone") /* null */ /* Код домофона. */
    val floor = text("floor") /* null */ /* Этаж. */
    val apartment = text("apartment") /* null */ /* Квартира или офис. */
    val phone = text("phone") /* null */ /* Телефон получателя заказа.  Обязательный параметр.  */
    val recipient = text("recipient") /* null */ /* Фамилия, имя и отчество получателя заказа.  Обязательный параметр.  */
    val gps = long("gps") /* null */

    /**
     * Create an entity of type OrderDeliveryAddressDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderDeliveryAddressDTO(
        country = row[country]  /* kotlin.String? */ /* Страна.  Обязательный параметр.  */,
        postcode = row[postcode]  /* kotlin.String? */ /* Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`).  */,
        city = row[city]  /* kotlin.String? */ /* Город или населенный пункт.  Обязательный параметр.  */,
        district = row[district]  /* kotlin.String? */ /* Район. */,
        subway = row[subway]  /* kotlin.String? */ /* Станция метро. */,
        street = row[street]  /* kotlin.String? */ /* Улица.  Обязательный параметр.  */,
        house = row[house]  /* kotlin.String? */ /* Дом или владение.  Обязательный параметр.  */,
        block = row[block]  /* kotlin.String? */ /* Корпус или строение. */,
        entrance = row[entrance]  /* kotlin.String? */ /* Подъезд. */,
        entryphone = row[entryphone]  /* kotlin.String? */ /* Код домофона. */,
        floor = row[floor]  /* kotlin.String? */ /* Этаж. */,
        apartment = row[apartment]  /* kotlin.String? */ /* Квартира или офис. */,
        phone = row[phone]  /* kotlin.String? */ /* Телефон получателя заказа.  Обязательный параметр.  */,
        recipient = row[recipient]  /* kotlin.String? */ /* Фамилия, имя и отчество получателя заказа.  Обязательный параметр.  */,
        gps = GpsDTOs.createEntity(row, withReferences) /* GpsDTO? */
    )

    /**
    * Assign all the columns from the entity of type OrderDeliveryAddressDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderDeliveryAddressDTO()
    * database.update(OrderDeliveryAddressDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderDeliveryAddressDTO) {
        this.apply {
            set(OrderDeliveryAddressDTOs.country, entity.country)
            set(OrderDeliveryAddressDTOs.postcode, entity.postcode)
            set(OrderDeliveryAddressDTOs.city, entity.city)
            set(OrderDeliveryAddressDTOs.district, entity.district)
            set(OrderDeliveryAddressDTOs.subway, entity.subway)
            set(OrderDeliveryAddressDTOs.street, entity.street)
            set(OrderDeliveryAddressDTOs.house, entity.house)
            set(OrderDeliveryAddressDTOs.block, entity.block)
            set(OrderDeliveryAddressDTOs.entrance, entity.entrance)
            set(OrderDeliveryAddressDTOs.entryphone, entity.entryphone)
            set(OrderDeliveryAddressDTOs.floor, entity.floor)
            set(OrderDeliveryAddressDTOs.apartment, entity.apartment)
            set(OrderDeliveryAddressDTOs.phone, entity.phone)
            set(OrderDeliveryAddressDTOs.recipient, entity.recipient)
            set(OrderDeliveryAddressDTOs.gps, entity.gps)
        }
    }

}


