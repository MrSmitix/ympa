/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Расписание работы службы доставки в своем регионе.
 * @param customHolidays Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
 * @param customWorkingDays Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
 * @param totalHolidays Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
 * @param weeklyHolidays Список выходных дней недели и государственных праздников.
 * @param availableOnHolidays Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. 
 * @param period 
 */
object CampaignSettingsScheduleDTOs : BaseTable<CampaignSettingsScheduleDTO>("CampaignSettingsScheduleDTO") {
    val availableOnHolidays = boolean("availableOnHolidays") /* null */ /* Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни.  */
    val period = long("period") /* null */

    /**
     * Create an entity of type CampaignSettingsScheduleDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CampaignSettingsScheduleDTO(
        customHolidays = emptyList() /* kotlin.Array<kotlin.String> */ /* Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете. */,
        customWorkingDays = emptyList() /* kotlin.Array<kotlin.String> */ /* Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете. */,
        totalHolidays = emptyList() /* kotlin.Array<kotlin.String> */ /* Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете. */,
        weeklyHolidays = emptyList() /* kotlin.Array<kotlin.Int> */ /* Список выходных дней недели и государственных праздников. */,
        availableOnHolidays = row[availableOnHolidays]  /* kotlin.Boolean? */ /* Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни.  */,
        period = CampaignSettingsTimePeriodDTOs.createEntity(row, withReferences) /* CampaignSettingsTimePeriodDTO? */
    )

    /**
    * Assign all the columns from the entity of type CampaignSettingsScheduleDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CampaignSettingsScheduleDTO()
    * database.update(CampaignSettingsScheduleDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CampaignSettingsScheduleDTO) {
        this.apply {
            set(CampaignSettingsScheduleDTOs.availableOnHolidays, entity.availableOnHolidays)
            set(CampaignSettingsScheduleDTOs.period, entity.period)
        }
    }

}


object CampaignSettingsScheduleDTOCustomHolidays : BaseTable<Pair<kotlin.Long, kotlin.String>>("CampaignSettingsScheduleDTOCustomHolidays") {
    val campaignSettingsScheduleDTO = long("campaignSettingsScheduleDTO")
    val customHolidays = text("customHolidays")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[campaignSettingsScheduleDTO] ?: 0, row[customHolidays] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CampaignSettingsScheduleDTOCustomHolidays.campaignSettingsScheduleDTO, entity.first)
            set(CampaignSettingsScheduleDTOCustomHolidays.customHolidays, entity.second)
        }
    }

}

object CampaignSettingsScheduleDTOCustomWorkingDays : BaseTable<Pair<kotlin.Long, kotlin.String>>("CampaignSettingsScheduleDTOCustomWorkingDays") {
    val campaignSettingsScheduleDTO = long("campaignSettingsScheduleDTO")
    val customWorkingDays = text("customWorkingDays")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[campaignSettingsScheduleDTO] ?: 0, row[customWorkingDays] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CampaignSettingsScheduleDTOCustomWorkingDays.campaignSettingsScheduleDTO, entity.first)
            set(CampaignSettingsScheduleDTOCustomWorkingDays.customWorkingDays, entity.second)
        }
    }

}

object CampaignSettingsScheduleDTOTotalHolidays : BaseTable<Pair<kotlin.Long, kotlin.String>>("CampaignSettingsScheduleDTOTotalHolidays") {
    val campaignSettingsScheduleDTO = long("campaignSettingsScheduleDTO")
    val totalHolidays = text("totalHolidays")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[campaignSettingsScheduleDTO] ?: 0, row[totalHolidays] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(CampaignSettingsScheduleDTOTotalHolidays.campaignSettingsScheduleDTO, entity.first)
            set(CampaignSettingsScheduleDTOTotalHolidays.totalHolidays, entity.second)
        }
    }

}

object CampaignSettingsScheduleDTOWeeklyHolidays : BaseTable<Pair<kotlin.Long, kotlin.Int>>("CampaignSettingsScheduleDTOWeeklyHolidays") {
    val campaignSettingsScheduleDTO = long("campaignSettingsScheduleDTO")
    val weeklyHolidays = int("weeklyHolidays")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[campaignSettingsScheduleDTO] ?: 0, row[weeklyHolidays] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(CampaignSettingsScheduleDTOWeeklyHolidays.campaignSettingsScheduleDTO, entity.first)
            set(CampaignSettingsScheduleDTOWeeklyHolidays.weeklyHolidays, entity.second)
        }
    }

}

