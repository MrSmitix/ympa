/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Результат выполнения запроса отчета по индексации прайс-листа.
 * @param indexLogRecords Список отчетов по индексации прайс-листа.
 * @param feed 
 * @param total Количество отчетов на всех страницах выходных данных.
 */
object FeedIndexLogsResultDTOs : BaseTable<FeedIndexLogsResultDTO>("FeedIndexLogsResultDTO") {
    val feed = long("feed") /* null */
    val total = long("total") /* null */ /* Количество отчетов на всех страницах выходных данных. */

    /**
     * Create an entity of type FeedIndexLogsResultDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedIndexLogsResultDTO(
        indexLogRecords = emptyList() /* kotlin.Array<FeedIndexLogsRecordDTO> */ /* Список отчетов по индексации прайс-листа. */,
        feed = FeedIndexLogsFeedDTOs.createEntity(row, withReferences) /* FeedIndexLogsFeedDTO? */,
        total = row[total]  /* kotlin.Long? */ /* Количество отчетов на всех страницах выходных данных. */
    )

    /**
    * Assign all the columns from the entity of type FeedIndexLogsResultDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedIndexLogsResultDTO()
    * database.update(FeedIndexLogsResultDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedIndexLogsResultDTO) {
        this.apply {
            set(FeedIndexLogsResultDTOs.feed, entity.feed)
            set(FeedIndexLogsResultDTOs.total, entity.total)
        }
    }

}


object FeedIndexLogsResultDTOFeedIndexLogsRecordDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FeedIndexLogsResultDTOFeedIndexLogsRecordDTO") {
    val feedIndexLogsResultDTO = long("feedIndexLogsResultDTO")
    val feedIndexLogsRecordDTO = long("feedIndexLogsRecordDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[feedIndexLogsResultDTO] ?: 0, row[feedIndexLogsRecordDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FeedIndexLogsResultDTOFeedIndexLogsRecordDTO.feedIndexLogsResultDTO, entity.first)
            set(FeedIndexLogsResultDTOFeedIndexLogsRecordDTO.feedIndexLogsRecordDTO, entity.second)
        }
    }

}

