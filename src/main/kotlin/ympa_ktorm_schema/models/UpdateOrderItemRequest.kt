/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Запрос на обновление состава заказа.
 * @param items Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
 * @param reason 
 */
object UpdateOrderItemRequests : BaseTable<UpdateOrderItemRequest>("UpdateOrderItemRequest") {
    val reason = long("reason") /* null */

    /**
     * Create an entity of type UpdateOrderItemRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdateOrderItemRequest(
        items = emptyList() /* kotlin.Array<OrderItemModificationDTO> */ /* Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр.  */,
        reason = OrderItemsModificationRequestReasonTypes.createEntity(row, withReferences) /* OrderItemsModificationRequestReasonType? */
    )

    /**
    * Assign all the columns from the entity of type UpdateOrderItemRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdateOrderItemRequest()
    * database.update(UpdateOrderItemRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdateOrderItemRequest) {
        this.apply {
            set(UpdateOrderItemRequests.reason, entity.reason)
        }
    }

}


object UpdateOrderItemRequestOrderItemModificationDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdateOrderItemRequestOrderItemModificationDTO") {
    val updateOrderItemRequest = long("updateOrderItemRequest")
    val orderItemModificationDTO = long("orderItemModificationDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updateOrderItemRequest] ?: 0, row[orderItemModificationDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdateOrderItemRequestOrderItemModificationDTO.updateOrderItemRequest, entity.first)
            set(UpdateOrderItemRequestOrderItemModificationDTO.orderItemModificationDTO, entity.second)
        }
    }

}

