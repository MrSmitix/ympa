/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Модель товара.
 * @param id Идентификатор модели товара.
 * @param name Название модели товара.
 * @param prices 
 * @param offers Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
 * @param offlineOffers Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
 * @param onlineOffers Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
 */
object EnrichedModelDTOs : BaseTable<EnrichedModelDTO>("EnrichedModelDTO") {
    val id = long("id") /* null */ /* Идентификатор модели товара. */
    val name = text("name") /* null */ /* Название модели товара. */
    val prices = long("prices") /* null */
    val offlineOffers = int("offlineOffers") /* null */ /* Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина. */
    val onlineOffers = int("onlineOffers") /* null */ /* Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина. */

    /**
     * Create an entity of type EnrichedModelDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = EnrichedModelDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор модели товара. */,
        name = row[name]  /* kotlin.String? */ /* Название модели товара. */,
        prices = ModelPriceDTOs.createEntity(row, withReferences) /* ModelPriceDTO? */,
        offers = emptyList() /* kotlin.Array<ModelOfferDTO>? */ /* Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них.  */,
        offlineOffers = row[offlineOffers]  /* kotlin.Int? */ /* Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина. */,
        onlineOffers = row[onlineOffers]  /* kotlin.Int? */ /* Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина. */
    )

    /**
    * Assign all the columns from the entity of type EnrichedModelDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = EnrichedModelDTO()
    * database.update(EnrichedModelDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: EnrichedModelDTO) {
        this.apply {
            set(EnrichedModelDTOs.id, entity.id)
            set(EnrichedModelDTOs.name, entity.name)
            set(EnrichedModelDTOs.prices, entity.prices)
            set(EnrichedModelDTOs.offlineOffers, entity.offlineOffers)
            set(EnrichedModelDTOs.onlineOffers, entity.onlineOffers)
        }
    }

}


object EnrichedModelDTOModelOfferDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("EnrichedModelDTOModelOfferDTO") {
    val enrichedModelDTO = long("enrichedModelDTO")
    val modelOfferDTO = long("modelOfferDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[enrichedModelDTO] ?: 0, row[modelOfferDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(EnrichedModelDTOModelOfferDTO.enrichedModelDTO, entity.first)
            set(EnrichedModelDTOModelOfferDTO.modelOfferDTO, entity.second)
        }
    }

}

