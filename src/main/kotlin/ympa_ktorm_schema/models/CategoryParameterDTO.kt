/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Характеристика товара.
 * @param id Идентификатор характеристики.
 * @param type 
 * @param required Обязательность характеристики.
 * @param filtering Используется ли характеристика в фильтре.
 * @param distinctive Является ли характеристика особенностью варианта.
 * @param multivalue Можно ли передать сразу несколько значений.
 * @param allowCustomValues Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
 * @param name Название характеристики.
 * @param unit 
 * @param description Описание характеристики.
 * @param recommendationTypes Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
 * @param propertyValues Список допустимых значений параметра. Только для характеристик типа `ENUM`.
 * @param constraints 
 * @param valueRestrictions Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
 */
object CategoryParameterDTOs : BaseTable<CategoryParameterDTO>("CategoryParameterDTO") {
    val id = long("id") /* Идентификатор характеристики. */
    val type = long("type")
    val required = boolean("required") /* Обязательность характеристики. */
    val filtering = boolean("filtering") /* Используется ли характеристика в фильтре. */
    val distinctive = boolean("distinctive") /* Является ли характеристика особенностью варианта. */
    val multivalue = boolean("multivalue") /* Можно ли передать сразу несколько значений. */
    val allowCustomValues = boolean("allowCustomValues") /* Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`. */
    val name = text("name") /* null */ /* Название характеристики. */
    val unit = long("unit") /* null */
    val description = text("description") /* null */ /* Описание характеристики. */
    val constraints = long("constraints") /* null */

    /**
     * Create an entity of type CategoryParameterDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CategoryParameterDTO(
        id = row[id] ?: 0 /* kotlin.Long */ /* Идентификатор характеристики. */,
        type = ParameterTypes.createEntity(row, withReferences) /* ParameterType */,
        required = row[required] ?: false /* kotlin.Boolean */ /* Обязательность характеристики. */,
        filtering = row[filtering] ?: false /* kotlin.Boolean */ /* Используется ли характеристика в фильтре. */,
        distinctive = row[distinctive] ?: false /* kotlin.Boolean */ /* Является ли характеристика особенностью варианта. */,
        multivalue = row[multivalue] ?: false /* kotlin.Boolean */ /* Можно ли передать сразу несколько значений. */,
        allowCustomValues = row[allowCustomValues] ?: false /* kotlin.Boolean */ /* Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`. */,
        name = row[name]  /* kotlin.String? */ /* Название характеристики. */,
        unit = CategoryParameterUnitDTOs.createEntity(row, withReferences) /* CategoryParameterUnitDTO? */,
        description = row[description]  /* kotlin.String? */ /* Описание характеристики. */,
        recommendationTypes = emptyList() /* kotlin.Array<OfferCardRecommendationType>? */ /* Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика. */,
        propertyValues = emptyList() /* kotlin.Array<ParameterValueOptionDTO>? */ /* Список допустимых значений параметра. Только для характеристик типа `ENUM`. */,
        constraints = ParameterValueConstraintsDTOs.createEntity(row, withReferences) /* ParameterValueConstraintsDTO? */,
        valueRestrictions = emptyList() /* kotlin.Array<ValueRestrictionDTO>? */ /* Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`. */
    )

    /**
    * Assign all the columns from the entity of type CategoryParameterDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CategoryParameterDTO()
    * database.update(CategoryParameterDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CategoryParameterDTO) {
        this.apply {
            set(CategoryParameterDTOs.id, entity.id)
            set(CategoryParameterDTOs.type, entity.type)
            set(CategoryParameterDTOs.required, entity.required)
            set(CategoryParameterDTOs.filtering, entity.filtering)
            set(CategoryParameterDTOs.distinctive, entity.distinctive)
            set(CategoryParameterDTOs.multivalue, entity.multivalue)
            set(CategoryParameterDTOs.allowCustomValues, entity.allowCustomValues)
            set(CategoryParameterDTOs.name, entity.name)
            set(CategoryParameterDTOs.unit, entity.unit)
            set(CategoryParameterDTOs.description, entity.description)
            set(CategoryParameterDTOs.constraints, entity.constraints)
        }
    }

}


object CategoryParameterDTOOfferCardRecommendationType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CategoryParameterDTOOfferCardRecommendationType") {
    val categoryParameterDTO = long("categoryParameterDTO")
    val offerCardRecommendationType = long("offerCardRecommendationType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[categoryParameterDTO] ?: 0, row[offerCardRecommendationType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CategoryParameterDTOOfferCardRecommendationType.categoryParameterDTO, entity.first)
            set(CategoryParameterDTOOfferCardRecommendationType.offerCardRecommendationType, entity.second)
        }
    }

}

object CategoryParameterDTOParameterValueOptionDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CategoryParameterDTOParameterValueOptionDTO") {
    val categoryParameterDTO = long("categoryParameterDTO")
    val parameterValueOptionDTO = long("parameterValueOptionDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[categoryParameterDTO] ?: 0, row[parameterValueOptionDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CategoryParameterDTOParameterValueOptionDTO.categoryParameterDTO, entity.first)
            set(CategoryParameterDTOParameterValueOptionDTO.parameterValueOptionDTO, entity.second)
        }
    }

}

object CategoryParameterDTOValueRestrictionDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CategoryParameterDTOValueRestrictionDTO") {
    val categoryParameterDTO = long("categoryParameterDTO")
    val valueRestrictionDTO = long("valueRestrictionDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[categoryParameterDTO] ?: 0, row[valueRestrictionDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CategoryParameterDTOValueRestrictionDTO.categoryParameterDTO, entity.first)
            set(CategoryParameterDTOValueRestrictionDTO.valueRestrictionDTO, entity.second)
        }
    }

}

