/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список товаров с рекомендованными ставками.
 * @param sku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param bid Значение ставки.
 * @param bidRecommendations Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
 * @param priceRecommendations Рекомендованные цены.
 */
object SkuBidRecommendationItemDTOs : BaseTable<SkuBidRecommendationItemDTO>("SkuBidRecommendationItemDTO") {
    val sku = text("sku") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val bid = int("bid") /* Значение ставки. */

    /**
     * Create an entity of type SkuBidRecommendationItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = SkuBidRecommendationItemDTO(
        sku = row[sku] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        bid = row[bid] ?: 0 /* kotlin.Int */ /* Значение ставки. */,
        bidRecommendations = emptyList() /* kotlin.Array<BidRecommendationItemDTO>? */ /* Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.  */,
        priceRecommendations = emptyList() /* kotlin.Array<PriceRecommendationItemDTO>? */ /* Рекомендованные цены. */
    )

    /**
    * Assign all the columns from the entity of type SkuBidRecommendationItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = SkuBidRecommendationItemDTO()
    * database.update(SkuBidRecommendationItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: SkuBidRecommendationItemDTO) {
        this.apply {
            set(SkuBidRecommendationItemDTOs.sku, entity.sku)
            set(SkuBidRecommendationItemDTOs.bid, entity.bid)
        }
    }

}


object SkuBidRecommendationItemDTOBidRecommendationItemDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SkuBidRecommendationItemDTOBidRecommendationItemDTO") {
    val skuBidRecommendationItemDTO = long("skuBidRecommendationItemDTO")
    val bidRecommendationItemDTO = long("bidRecommendationItemDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[skuBidRecommendationItemDTO] ?: 0, row[bidRecommendationItemDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SkuBidRecommendationItemDTOBidRecommendationItemDTO.skuBidRecommendationItemDTO, entity.first)
            set(SkuBidRecommendationItemDTOBidRecommendationItemDTO.bidRecommendationItemDTO, entity.second)
        }
    }

}

object SkuBidRecommendationItemDTOPriceRecommendationItemDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("SkuBidRecommendationItemDTOPriceRecommendationItemDTO") {
    val skuBidRecommendationItemDTO = long("skuBidRecommendationItemDTO")
    val priceRecommendationItemDTO = long("priceRecommendationItemDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[skuBidRecommendationItemDTO] ?: 0, row[priceRecommendationItemDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(SkuBidRecommendationItemDTOPriceRecommendationItemDTO.skuBidRecommendationItemDTO, entity.first)
            set(SkuBidRecommendationItemDTOPriceRecommendationItemDTO.priceRecommendationItemDTO, entity.second)
        }
    }

}

