/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение `true` в параметре `deleteAllOffers`;  * часть товаров, передайте их идентификаторы в параметре `offersIds`. 
 * @param promoId Идентификатор акции.
 * @param deleteAllOffers Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`.
 * @param offerIds Товары, которые нужно убрать из акции.
 */
object DeletePromoOffersRequests : BaseTable<DeletePromoOffersRequest>("DeletePromoOffersRequest") {
    val promoId = text("promoId") /* Идентификатор акции. */
    val deleteAllOffers = boolean("deleteAllOffers") /* null */ /* Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`. */

    /**
     * Create an entity of type DeletePromoOffersRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = DeletePromoOffersRequest(
        promoId = row[promoId] ?: "" /* kotlin.String */ /* Идентификатор акции. */,
        deleteAllOffers = row[deleteAllOffers]  /* kotlin.Boolean? */ /* Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение `true` и не передавайте параметр `offerIds`. */,
        offerIds = emptyList() /* kotlin.Array<kotlin.String>? */ /* Товары, которые нужно убрать из акции. */
    )

    /**
    * Assign all the columns from the entity of type DeletePromoOffersRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = DeletePromoOffersRequest()
    * database.update(DeletePromoOffersRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: DeletePromoOffersRequest) {
        this.apply {
            set(DeletePromoOffersRequests.promoId, entity.promoId)
            set(DeletePromoOffersRequests.deleteAllOffers, entity.deleteAllOffers)
        }
    }

}


object DeletePromoOffersRequestOfferIds : BaseTable<Pair<kotlin.Long, kotlin.String>>("DeletePromoOffersRequestOfferIds") {
    val deletePromoOffersRequest = long("deletePromoOffersRequest")
    val offerIds = text("offerIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[deletePromoOffersRequest] ?: 0, row[offerIds] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(DeletePromoOffersRequestOfferIds.deletePromoOffersRequest, entity.first)
            set(DeletePromoOffersRequestOfferIds.offerIds, entity.second)
        }
    }

}

