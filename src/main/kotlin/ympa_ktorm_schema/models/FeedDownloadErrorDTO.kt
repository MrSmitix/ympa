/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об ошибке при загрузке прайс-листа. Выводится, если параметр `download status=ERROR`. 
 * @param httpStatusCode HTTP-код ошибки индексации прайс-листа. Выводится, если `type=DOWNLOAD_HTTP_ERROR`. 
 * @param type 
 * @param description Описание ошибки. Выводится, если `type=DOWNLOAD_ERROR`. 
 */
object FeedDownloadErrorDTOs : BaseTable<FeedDownloadErrorDTO>("FeedDownloadErrorDTO") {
    val httpStatusCode = int("httpStatusCode") /* null */ /* HTTP-код ошибки индексации прайс-листа. Выводится, если `type=DOWNLOAD_HTTP_ERROR`.  */
    val type = long("type") /* null */
    val description = text("description") /* null */ /* Описание ошибки. Выводится, если `type=DOWNLOAD_ERROR`.  */

    /**
     * Create an entity of type FeedDownloadErrorDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedDownloadErrorDTO(
        httpStatusCode = row[httpStatusCode]  /* kotlin.Int? */ /* HTTP-код ошибки индексации прайс-листа. Выводится, если `type=DOWNLOAD_HTTP_ERROR`.  */,
        type = FeedDownloadErrorTypes.createEntity(row, withReferences) /* FeedDownloadErrorType? */,
        description = row[description]  /* kotlin.String? */ /* Описание ошибки. Выводится, если `type=DOWNLOAD_ERROR`.  */
    )

    /**
    * Assign all the columns from the entity of type FeedDownloadErrorDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedDownloadErrorDTO()
    * database.update(FeedDownloadErrorDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedDownloadErrorDTO) {
        this.apply {
            set(FeedDownloadErrorDTOs.httpStatusCode, entity.httpStatusCode)
            set(FeedDownloadErrorDTOs.type, entity.type)
            set(FeedDownloadErrorDTOs.description, entity.description)
        }
    }

}


