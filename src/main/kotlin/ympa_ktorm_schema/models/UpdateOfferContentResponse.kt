/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Описывает проблемы, которые появились при сохранении товара.
 * @param status 
 * @param results Ошибки и предупреждения, которые появились при обработке переданных значений. Каждый элемент списка соответствует одному товару.  Если ошибок и предупреждений нет, поле не передается. 
 */
object UpdateOfferContentResponses : BaseTable<UpdateOfferContentResponse>("UpdateOfferContentResponse") {
    val status = long("status") /* null */

    /**
     * Create an entity of type UpdateOfferContentResponse from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdateOfferContentResponse(
        status = ApiResponseStatusTypes.createEntity(row, withReferences) /* ApiResponseStatusType? */,
        results = emptyList() /* kotlin.Array<UpdateOfferContentResultDTO>? */ /* Ошибки и предупреждения, которые появились при обработке переданных значений. Каждый элемент списка соответствует одному товару.  Если ошибок и предупреждений нет, поле не передается.  */
    )

    /**
    * Assign all the columns from the entity of type UpdateOfferContentResponse to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdateOfferContentResponse()
    * database.update(UpdateOfferContentResponses, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdateOfferContentResponse) {
        this.apply {
            set(UpdateOfferContentResponses.status, entity.status)
        }
    }

}


object UpdateOfferContentResponseUpdateOfferContentResultDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdateOfferContentResponseUpdateOfferContentResultDTO") {
    val updateOfferContentResponse = long("updateOfferContentResponse")
    val updateOfferContentResultDTO = long("updateOfferContentResultDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updateOfferContentResponse] ?: 0, row[updateOfferContentResultDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdateOfferContentResponseUpdateOfferContentResultDTO.updateOfferContentResponse, entity.first)
            set(UpdateOfferContentResponseUpdateOfferContentResultDTO.updateOfferContentResultDTO, entity.second)
        }
    }

}

