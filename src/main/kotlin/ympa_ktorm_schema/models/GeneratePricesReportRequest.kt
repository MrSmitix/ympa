/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации отчета.
 * @param businessId Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан `campaignId`. 
 * @param campaignId Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать `businessId` не нужно. 
 * @param categoryIds Фильтр по категориям на Маркете.
 * @param creationDateFrom Фильтр по времени появления предложения — начало периода.  Формат даты: `ДД-ММ-ГГГГ`. 
 * @param creationDateTo Фильтр по времени появления предложения — окончание периода.  Формат даты: `ДД-ММ-ГГГГ`. 
 */
object GeneratePricesReportRequests : BaseTable<GeneratePricesReportRequest>("GeneratePricesReportRequest") {
    val businessId = long("businessId") /* null */ /* Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан `campaignId`.  */
    val campaignId = long("campaignId") /* null */ /* Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать `businessId` не нужно.  */
    val creationDateFrom = date("creationDateFrom") /* null */ /* Фильтр по времени появления предложения — начало периода.  Формат даты: `ДД-ММ-ГГГГ`.  */
    val creationDateTo = date("creationDateTo") /* null */ /* Фильтр по времени появления предложения — окончание периода.  Формат даты: `ДД-ММ-ГГГГ`.  */

    /**
     * Create an entity of type GeneratePricesReportRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GeneratePricesReportRequest(
        businessId = row[businessId]  /* kotlin.Long? */ /* Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан `campaignId`.  */,
        campaignId = row[campaignId]  /* kotlin.Long? */ /* Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать `businessId` не нужно.  */,
        categoryIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Фильтр по категориям на Маркете. */,
        creationDateFrom = row[creationDateFrom]  /* java.time.LocalDate? */ /* Фильтр по времени появления предложения — начало периода.  Формат даты: `ДД-ММ-ГГГГ`.  */,
        creationDateTo = row[creationDateTo]  /* java.time.LocalDate? */ /* Фильтр по времени появления предложения — окончание периода.  Формат даты: `ДД-ММ-ГГГГ`.  */
    )

    /**
    * Assign all the columns from the entity of type GeneratePricesReportRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GeneratePricesReportRequest()
    * database.update(GeneratePricesReportRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GeneratePricesReportRequest) {
        this.apply {
            set(GeneratePricesReportRequests.businessId, entity.businessId)
            set(GeneratePricesReportRequests.campaignId, entity.campaignId)
            set(GeneratePricesReportRequests.creationDateFrom, entity.creationDateFrom)
            set(GeneratePricesReportRequests.creationDateTo, entity.creationDateTo)
        }
    }

}


object GeneratePricesReportRequestCategoryIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GeneratePricesReportRequestCategoryIds") {
    val generatePricesReportRequest = long("generatePricesReportRequest")
    val categoryIds = long("categoryIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[generatePricesReportRequest] ?: 0, row[categoryIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GeneratePricesReportRequestCategoryIds.generatePricesReportRequest, entity.first)
            set(GeneratePricesReportRequestCategoryIds.categoryIds, entity.second)
        }
    }

}

