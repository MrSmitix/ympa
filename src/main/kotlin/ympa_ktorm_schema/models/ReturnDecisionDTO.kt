/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Решения по возвратам.
 * @param returnItemId Идентификатор товара в возврате.
 * @param count Количество единиц товара.
 * @param comment Комментарий.
 * @param reasonType 
 * @param subreasonType 
 * @param decisionType 
 * @param refundAmount Сумма возврата.
 * @param partnerCompensation Компенсация за обратную доставку.
 * @param images Список хеш-кодов фотографий товара от покупателя.
 */
object ReturnDecisionDTOs : BaseTable<ReturnDecisionDTO>("ReturnDecisionDTO") {
    val returnItemId = long("returnItemId") /* null */ /* Идентификатор товара в возврате. */
    val count = int("count") /* null */ /* Количество единиц товара. */
    val comment = text("comment") /* null */ /* Комментарий. */
    val reasonType = long("reasonType") /* null */
    val subreasonType = long("subreasonType") /* null */
    val decisionType = long("decisionType") /* null */
    val refundAmount = long("refundAmount") /* null */ /* Сумма возврата. */
    val partnerCompensation = long("partnerCompensation") /* null */ /* Компенсация за обратную доставку. */

    /**
     * Create an entity of type ReturnDecisionDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ReturnDecisionDTO(
        returnItemId = row[returnItemId]  /* kotlin.Long? */ /* Идентификатор товара в возврате. */,
        count = row[count]  /* kotlin.Int? */ /* Количество единиц товара. */,
        comment = row[comment]  /* kotlin.String? */ /* Комментарий. */,
        reasonType = ReturnDecisionReasonTypes.createEntity(row, withReferences) /* ReturnDecisionReasonType? */,
        subreasonType = ReturnDecisionSubreasonTypes.createEntity(row, withReferences) /* ReturnDecisionSubreasonType? */,
        decisionType = ReturnDecisionTypes.createEntity(row, withReferences) /* ReturnDecisionType? */,
        refundAmount = row[refundAmount]  /* kotlin.Long? */ /* Сумма возврата. */,
        partnerCompensation = row[partnerCompensation]  /* kotlin.Long? */ /* Компенсация за обратную доставку. */,
        images = emptyList() /* kotlin.Array<kotlin.String>? */ /* Список хеш-кодов фотографий товара от покупателя. */
    )

    /**
    * Assign all the columns from the entity of type ReturnDecisionDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ReturnDecisionDTO()
    * database.update(ReturnDecisionDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ReturnDecisionDTO) {
        this.apply {
            set(ReturnDecisionDTOs.returnItemId, entity.returnItemId)
            set(ReturnDecisionDTOs.count, entity.count)
            set(ReturnDecisionDTOs.comment, entity.comment)
            set(ReturnDecisionDTOs.reasonType, entity.reasonType)
            set(ReturnDecisionDTOs.subreasonType, entity.subreasonType)
            set(ReturnDecisionDTOs.decisionType, entity.decisionType)
            set(ReturnDecisionDTOs.refundAmount, entity.refundAmount)
            set(ReturnDecisionDTOs.partnerCompensation, entity.partnerCompensation)
        }
    }

}


object ReturnDecisionDTOImages : BaseTable<Pair<kotlin.Long, kotlin.String>>("ReturnDecisionDTOImages") {
    val returnDecisionDTO = long("returnDecisionDTO")
    val images = text("images")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[returnDecisionDTO] ?: 0, row[images] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ReturnDecisionDTOImages.returnDecisionDTO, entity.first)
            set(ReturnDecisionDTOImages.images, entity.second)
        }
    }

}

