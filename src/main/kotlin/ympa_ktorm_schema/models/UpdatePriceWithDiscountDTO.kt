/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Цена с указанием скидки.
 * @param value Значение.
 * @param currencyId 
 * @param discountBase Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
 */
object UpdatePriceWithDiscountDTOs : BaseTable<UpdatePriceWithDiscountDTO>("UpdatePriceWithDiscountDTO") {
    val value = decimal("value") /* Значение. */
    val currencyId = long("currencyId")
    val discountBase = decimal("discountBase") /* null */ /* Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар.  */

    /**
     * Create an entity of type UpdatePriceWithDiscountDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdatePriceWithDiscountDTO(
        value = row[value] ?: 0 /* java.math.BigDecimal */ /* Значение. */,
        currencyId = CurrencyTypes.createEntity(row, withReferences) /* CurrencyType */,
        discountBase = row[discountBase]  /* java.math.BigDecimal? */ /* Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар.  */
    )

    /**
    * Assign all the columns from the entity of type UpdatePriceWithDiscountDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdatePriceWithDiscountDTO()
    * database.update(UpdatePriceWithDiscountDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdatePriceWithDiscountDTO) {
        this.apply {
            set(UpdatePriceWithDiscountDTOs.value, entity.value)
            set(UpdatePriceWithDiscountDTOs.currencyId, entity.currencyId)
            set(UpdatePriceWithDiscountDTOs.discountBase, entity.discountBase)
        }
    }

}


