/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации отчета. 
 * @param businessId Идентификатор бизнеса.
 * @param dateFrom Начало периода, включительно.
 * @param dateTo Конец периода, включительно. Максимальный период — 1 год.
 * @param campaignIds Список магазинов, которые нужны в отчете.
 * @param promoId Идентификатор акции, товары из которой нужны в отчете.
 */
object GenerateUnitedOrdersRequests : BaseTable<GenerateUnitedOrdersRequest>("GenerateUnitedOrdersRequest") {
    val businessId = long("businessId") /* Идентификатор бизнеса. */
    val dateFrom = date("dateFrom") /* Начало периода, включительно. */
    val dateTo = date("dateTo") /* Конец периода, включительно. Максимальный период — 1 год. */
    val promoId = text("promoId") /* null */ /* Идентификатор акции, товары из которой нужны в отчете. */

    /**
     * Create an entity of type GenerateUnitedOrdersRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GenerateUnitedOrdersRequest(
        businessId = row[businessId] ?: 0 /* kotlin.Long */ /* Идентификатор бизнеса. */,
        dateFrom = row[dateFrom] /* java.time.LocalDate */ /* Начало периода, включительно. */,
        dateTo = row[dateTo] /* java.time.LocalDate */ /* Конец периода, включительно. Максимальный период — 1 год. */,
        campaignIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Список магазинов, которые нужны в отчете. */,
        promoId = row[promoId]  /* kotlin.String? */ /* Идентификатор акции, товары из которой нужны в отчете. */
    )

    /**
    * Assign all the columns from the entity of type GenerateUnitedOrdersRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GenerateUnitedOrdersRequest()
    * database.update(GenerateUnitedOrdersRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GenerateUnitedOrdersRequest) {
        this.apply {
            set(GenerateUnitedOrdersRequests.businessId, entity.businessId)
            set(GenerateUnitedOrdersRequests.dateFrom, entity.dateFrom)
            set(GenerateUnitedOrdersRequests.dateTo, entity.dateTo)
            set(GenerateUnitedOrdersRequests.promoId, entity.promoId)
        }
    }

}


object GenerateUnitedOrdersRequestCampaignIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GenerateUnitedOrdersRequestCampaignIds") {
    val generateUnitedOrdersRequest = long("generateUnitedOrdersRequest")
    val campaignIds = long("campaignIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[generateUnitedOrdersRequest] ?: 0, row[campaignIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GenerateUnitedOrdersRequestCampaignIds.generateUnitedOrdersRequest, entity.first)
            set(GenerateUnitedOrdersRequestCampaignIds.campaignIds, entity.second)
        }
    }

}

