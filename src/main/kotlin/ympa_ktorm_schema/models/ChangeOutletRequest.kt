/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param name Название точки продаж. 
 * @param type 
 * @param address 
 * @param phones Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
 * @param workingSchedule 
 * @param coords Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
 * @param isMain Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
 * @param shopOutletCode Идентификатор точки продаж, присвоенный магазином.
 * @param visibility 
 * @param deliveryRules Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
 * @param storagePeriod Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
 */
object ChangeOutletRequests : BaseTable<ChangeOutletRequest>("ChangeOutletRequest") {
    val name = text("name") /* Название точки продаж.  */
    val type = long("type")
    val address = long("address")
    val workingSchedule = long("workingSchedule")
    val coords = text("coords") /* null */ /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */
    val isMain = boolean("isMain") /* null */ /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */
    val shopOutletCode = text("shopOutletCode") /* null */ /* Идентификатор точки продаж, присвоенный магазином. */
    val visibility = long("visibility") /* null */
    val storagePeriod = long("storagePeriod") /* null */ /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */

    /**
     * Create an entity of type ChangeOutletRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ChangeOutletRequest(
        name = row[name] ?: "" /* kotlin.String */ /* Название точки продаж.  */,
        type = OutletTypes.createEntity(row, withReferences) /* OutletType */,
        address = OutletAddressDTOs.createEntity(row, withReferences) /* OutletAddressDTO */,
        phones = emptyList() /* kotlin.Array<kotlin.String> */ /* Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.  */,
        workingSchedule = OutletWorkingScheduleDTOs.createEntity(row, withReferences) /* OutletWorkingScheduleDTO */,
        coords = row[coords]  /* kotlin.String? */ /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */,
        isMain = row[isMain]  /* kotlin.Boolean? */ /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */,
        shopOutletCode = row[shopOutletCode]  /* kotlin.String? */ /* Идентификатор точки продаж, присвоенный магазином. */,
        visibility = OutletVisibilityTypes.createEntity(row, withReferences) /* OutletVisibilityType? */,
        deliveryRules = emptyList() /* kotlin.Array<OutletDeliveryRuleDTO>? */ /* Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.  */,
        storagePeriod = row[storagePeriod]  /* kotlin.Long? */ /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */
    )

    /**
    * Assign all the columns from the entity of type ChangeOutletRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ChangeOutletRequest()
    * database.update(ChangeOutletRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ChangeOutletRequest) {
        this.apply {
            set(ChangeOutletRequests.name, entity.name)
            set(ChangeOutletRequests.type, entity.type)
            set(ChangeOutletRequests.address, entity.address)
            set(ChangeOutletRequests.workingSchedule, entity.workingSchedule)
            set(ChangeOutletRequests.coords, entity.coords)
            set(ChangeOutletRequests.isMain, entity.isMain)
            set(ChangeOutletRequests.shopOutletCode, entity.shopOutletCode)
            set(ChangeOutletRequests.visibility, entity.visibility)
            set(ChangeOutletRequests.storagePeriod, entity.storagePeriod)
        }
    }

}


object ChangeOutletRequestPhones : BaseTable<Pair<kotlin.Long, kotlin.String>>("ChangeOutletRequestPhones") {
    val changeOutletRequest = long("changeOutletRequest")
    val phones = text("phones")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[changeOutletRequest] ?: 0, row[phones] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ChangeOutletRequestPhones.changeOutletRequest, entity.first)
            set(ChangeOutletRequestPhones.phones, entity.second)
        }
    }

}

object ChangeOutletRequestOutletDeliveryRuleDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ChangeOutletRequestOutletDeliveryRuleDTO") {
    val changeOutletRequest = long("changeOutletRequest")
    val outletDeliveryRuleDTO = long("outletDeliveryRuleDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[changeOutletRequest] ?: 0, row[outletDeliveryRuleDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ChangeOutletRequestOutletDeliveryRuleDTO.changeOutletRequest, entity.first)
            set(ChangeOutletRequestOutletDeliveryRuleDTO.outletDeliveryRuleDTO, entity.second)
        }
    }

}

