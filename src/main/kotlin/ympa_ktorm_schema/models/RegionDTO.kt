/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Регион доставки.
 * @param name Название региона.
 * @param type 
 * @param id Идентификатор региона.
 * @param parent 
 * @param children Дочерние регионы.
 */
object RegionDTOs : BaseTable<RegionDTO>("RegionDTO") {
    val name = text("name") /* Название региона. */
    val type = long("type")
    val id = long("id") /* null */ /* Идентификатор региона. */
    val parent = long("parent") /* null */

    /**
     * Create an entity of type RegionDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RegionDTO(
        name = row[name] ?: "" /* kotlin.String */ /* Название региона. */,
        type = RegionTypes.createEntity(row, withReferences) /* RegionType */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор региона. */,
        parent = RegionDTOs.createEntity(row, withReferences) /* RegionDTO? */,
        children = emptyList() /* kotlin.Array<RegionDTO>? */ /* Дочерние регионы. */
    )

    /**
    * Assign all the columns from the entity of type RegionDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RegionDTO()
    * database.update(RegionDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RegionDTO) {
        this.apply {
            set(RegionDTOs.name, entity.name)
            set(RegionDTOs.type, entity.type)
            set(RegionDTOs.id, entity.id)
            set(RegionDTOs.parent, entity.parent)
        }
    }

}


object RegionDTORegionDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("RegionDTORegionDTO") {
    val regionDTO = long("regionDTO")
    val regionDTO = long("regionDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[regionDTO] ?: 0, row[regionDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(RegionDTORegionDTO.regionDTO, entity.first)
            set(RegionDTORegionDTO.regionDTO, entity.second)
        }
    }

}

