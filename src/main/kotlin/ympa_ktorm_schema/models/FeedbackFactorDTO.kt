/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
 * @param id Идентификатор параметра.
 * @param title Название параметра. Например, `Скорость обработки заказа`.
 * @param description Описание параметра. Например, `Как быстро с вами связались для подтверждения заказа?`.
 * @param value Оценка по параметру, указанная в отзыве: от `1` (низшая оценка) до `5` (высшая оценка). 
 */
object FeedbackFactorDTOs : BaseTable<FeedbackFactorDTO>("FeedbackFactorDTO") {
    val id = long("id") /* null */ /* Идентификатор параметра. */
    val title = text("title") /* null */ /* Название параметра. Например, `Скорость обработки заказа`. */
    val description = text("description") /* null */ /* Описание параметра. Например, `Как быстро с вами связались для подтверждения заказа?`. */
    val value = int("value") /* null */ /* Оценка по параметру, указанная в отзыве: от `1` (низшая оценка) до `5` (высшая оценка).  */

    /**
     * Create an entity of type FeedbackFactorDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedbackFactorDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор параметра. */,
        title = row[title]  /* kotlin.String? */ /* Название параметра. Например, `Скорость обработки заказа`. */,
        description = row[description]  /* kotlin.String? */ /* Описание параметра. Например, `Как быстро с вами связались для подтверждения заказа?`. */,
        value = row[value]  /* kotlin.Int? */ /* Оценка по параметру, указанная в отзыве: от `1` (низшая оценка) до `5` (высшая оценка).  */
    )

    /**
    * Assign all the columns from the entity of type FeedbackFactorDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedbackFactorDTO()
    * database.update(FeedbackFactorDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedbackFactorDTO) {
        this.apply {
            set(FeedbackFactorDTOs.id, entity.id)
            set(FeedbackFactorDTOs.title, entity.title)
            set(FeedbackFactorDTOs.description, entity.description)
            set(FeedbackFactorDTOs.value, entity.value)
        }
    }

}


