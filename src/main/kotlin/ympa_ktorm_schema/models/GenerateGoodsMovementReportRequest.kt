/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации отчета.
 * @param campaignId Идентификатор кампании.
 * @param dateFrom Начало периода, включительно.
 * @param dateTo Конец периода, включительно.
 * @param shopSku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 */
object GenerateGoodsMovementReportRequests : BaseTable<GenerateGoodsMovementReportRequest>("GenerateGoodsMovementReportRequest") {
    val campaignId = long("campaignId") /* Идентификатор кампании. */
    val dateFrom = date("dateFrom") /* Начало периода, включительно. */
    val dateTo = date("dateTo") /* Конец периода, включительно. */
    val shopSku = text("shopSku") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */

    /**
     * Create an entity of type GenerateGoodsMovementReportRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GenerateGoodsMovementReportRequest(
        campaignId = row[campaignId] ?: 0 /* kotlin.Long */ /* Идентификатор кампании. */,
        dateFrom = row[dateFrom] /* java.time.LocalDate */ /* Начало периода, включительно. */,
        dateTo = row[dateTo] /* java.time.LocalDate */ /* Конец периода, включительно. */,
        shopSku = row[shopSku]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    )

    /**
    * Assign all the columns from the entity of type GenerateGoodsMovementReportRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GenerateGoodsMovementReportRequest()
    * database.update(GenerateGoodsMovementReportRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GenerateGoodsMovementReportRequest) {
        this.apply {
            set(GenerateGoodsMovementReportRequests.campaignId, entity.campaignId)
            set(GenerateGoodsMovementReportRequests.dateFrom, entity.dateFrom)
            set(GenerateGoodsMovementReportRequests.dateTo, entity.dateTo)
            set(GenerateGoodsMovementReportRequests.shopSku, entity.shopSku)
        }
    }

}


