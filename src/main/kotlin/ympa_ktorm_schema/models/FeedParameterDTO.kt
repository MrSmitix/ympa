/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Параметр прайс-листа.
 * @param name Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр. 
 * @param deleted Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`. 
 * @param propertyValues Значения параметра.  Используется вместе с параметром `name`. 
 */
object FeedParameterDTOs : BaseTable<FeedParameterDTO>("FeedParameterDTO") {
    val name = text("name") /* Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр.  */
    val deleted = boolean("deleted") /* null */ /* Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`.  */

    /**
     * Create an entity of type FeedParameterDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedParameterDTO(
        name = row[name] ?: "" /* kotlin.String */ /* Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр.  */,
        deleted = row[deleted]  /* kotlin.Boolean? */ /* Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`.  */,
        propertyValues = emptyList() /* kotlin.Array<kotlin.Int>? */ /* Значения параметра.  Используется вместе с параметром `name`.  */
    )

    /**
    * Assign all the columns from the entity of type FeedParameterDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedParameterDTO()
    * database.update(FeedParameterDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedParameterDTO) {
        this.apply {
            set(FeedParameterDTOs.name, entity.name)
            set(FeedParameterDTOs.deleted, entity.deleted)
        }
    }

}


object FeedParameterDTOPropertyValues : BaseTable<Pair<kotlin.Long, kotlin.Int>>("FeedParameterDTOPropertyValues") {
    val feedParameterDTO = long("feedParameterDTO")
    val propertyValues = int("propertyValues")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[feedParameterDTO] ?: 0, row[propertyValues] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(FeedParameterDTOPropertyValues.feedParameterDTO, entity.first)
            set(FeedParameterDTOPropertyValues.propertyValues, entity.second)
        }
    }

}

