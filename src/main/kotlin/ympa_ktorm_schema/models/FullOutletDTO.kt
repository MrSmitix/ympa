/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о точке продаж.
 * @param name Название точки продаж. 
 * @param type 
 * @param address 
 * @param phones Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
 * @param workingSchedule 
 * @param coords Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
 * @param isMain Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
 * @param shopOutletCode Идентификатор точки продаж, присвоенный магазином.
 * @param visibility 
 * @param deliveryRules Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
 * @param storagePeriod Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
 * @param id Идентификатор точки продаж, присвоенный Маркетом.
 * @param status 
 * @param region 
 * @param shopOutletId Идентификатор точки продаж, заданный магазином.
 * @param workingTime Рабочее время.
 * @param moderationReason Статус модерации.
 */
object FullOutletDTOs : BaseTable<FullOutletDTO>("FullOutletDTO") {
    val name = text("name") /* Название точки продаж.  */
    val type = long("type")
    val address = long("address")
    val workingSchedule = long("workingSchedule")
    val coords = text("coords") /* null */ /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */
    val isMain = boolean("isMain") /* null */ /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */
    val shopOutletCode = text("shopOutletCode") /* null */ /* Идентификатор точки продаж, присвоенный магазином. */
    val visibility = long("visibility") /* null */
    val storagePeriod = long("storagePeriod") /* null */ /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */
    val id = long("id") /* null */ /* Идентификатор точки продаж, присвоенный Маркетом. */
    val status = long("status") /* null */
    val region = long("region") /* null */
    val shopOutletId = text("shopOutletId") /* null */ /* Идентификатор точки продаж, заданный магазином. */
    val workingTime = text("workingTime") /* null */ /* Рабочее время. */
    val moderationReason = text("moderationReason") /* null */ /* Статус модерации. */

    /**
     * Create an entity of type FullOutletDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FullOutletDTO(
        name = row[name] ?: "" /* kotlin.String */ /* Название точки продаж.  */,
        type = OutletTypes.createEntity(row, withReferences) /* OutletType */,
        address = OutletAddressDTOs.createEntity(row, withReferences) /* OutletAddressDTO */,
        phones = emptyList() /* kotlin.Array<kotlin.String> */ /* Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.  */,
        workingSchedule = OutletWorkingScheduleDTOs.createEntity(row, withReferences) /* OutletWorkingScheduleDTO */,
        coords = row[coords]  /* kotlin.String? */ /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */,
        isMain = row[isMain]  /* kotlin.Boolean? */ /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */,
        shopOutletCode = row[shopOutletCode]  /* kotlin.String? */ /* Идентификатор точки продаж, присвоенный магазином. */,
        visibility = OutletVisibilityTypes.createEntity(row, withReferences) /* OutletVisibilityType? */,
        deliveryRules = emptyList() /* kotlin.Array<OutletDeliveryRuleDTO>? */ /* Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.  */,
        storagePeriod = row[storagePeriod]  /* kotlin.Long? */ /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор точки продаж, присвоенный Маркетом. */,
        status = OutletStatusTypes.createEntity(row, withReferences) /* OutletStatusType? */,
        region = RegionDTOs.createEntity(row, withReferences) /* RegionDTO? */,
        shopOutletId = row[shopOutletId]  /* kotlin.String? */ /* Идентификатор точки продаж, заданный магазином. */,
        workingTime = row[workingTime]  /* kotlin.String? */ /* Рабочее время. */,
        moderationReason = row[moderationReason]  /* kotlin.String? */ /* Статус модерации. */
    )

    /**
    * Assign all the columns from the entity of type FullOutletDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FullOutletDTO()
    * database.update(FullOutletDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FullOutletDTO) {
        this.apply {
            set(FullOutletDTOs.name, entity.name)
            set(FullOutletDTOs.type, entity.type)
            set(FullOutletDTOs.address, entity.address)
            set(FullOutletDTOs.workingSchedule, entity.workingSchedule)
            set(FullOutletDTOs.coords, entity.coords)
            set(FullOutletDTOs.isMain, entity.isMain)
            set(FullOutletDTOs.shopOutletCode, entity.shopOutletCode)
            set(FullOutletDTOs.visibility, entity.visibility)
            set(FullOutletDTOs.storagePeriod, entity.storagePeriod)
            set(FullOutletDTOs.id, entity.id)
            set(FullOutletDTOs.status, entity.status)
            set(FullOutletDTOs.region, entity.region)
            set(FullOutletDTOs.shopOutletId, entity.shopOutletId)
            set(FullOutletDTOs.workingTime, entity.workingTime)
            set(FullOutletDTOs.moderationReason, entity.moderationReason)
        }
    }

}


object FullOutletDTOPhones : BaseTable<Pair<kotlin.Long, kotlin.String>>("FullOutletDTOPhones") {
    val fullOutletDTO = long("fullOutletDTO")
    val phones = text("phones")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[fullOutletDTO] ?: 0, row[phones] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(FullOutletDTOPhones.fullOutletDTO, entity.first)
            set(FullOutletDTOPhones.phones, entity.second)
        }
    }

}

object FullOutletDTOOutletDeliveryRuleDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FullOutletDTOOutletDeliveryRuleDTO") {
    val fullOutletDTO = long("fullOutletDTO")
    val outletDeliveryRuleDTO = long("outletDeliveryRuleDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[fullOutletDTO] ?: 0, row[outletDeliveryRuleDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FullOutletDTOOutletDeliveryRuleDTO.fullOutletDTO, entity.first)
            set(FullOutletDTOOutletDeliveryRuleDTO.outletDeliveryRuleDTO, entity.second)
        }
    }

}

