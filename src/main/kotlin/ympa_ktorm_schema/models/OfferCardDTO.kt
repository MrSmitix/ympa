/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param mapping 
 * @param parameterValues Список характеристик с их значениями. 
 * @param cardStatus 
 * @param contentRating Процент заполненности карточки.
 * @param recommendations Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
 * @param errors Ошибки в контенте, препятствующие размещению товара на витрине.
 * @param warnings Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
 */
object OfferCardDTOs : BaseTable<OfferCardDTO>("OfferCardDTO") {
    val offerId = text("offerId") /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val mapping = long("mapping") /* null */
    val cardStatus = long("cardStatus") /* null */
    val contentRating = int("contentRating") /* null */ /* Процент заполненности карточки. */

    /**
     * Create an entity of type OfferCardDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OfferCardDTO(
        offerId = row[offerId] ?: "" /* kotlin.String */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        mapping = GetMappingDTOs.createEntity(row, withReferences) /* GetMappingDTO? */,
        parameterValues = emptyList() /* kotlin.Array<ParameterValueDTO>? */ /* Список характеристик с их значениями.  */,
        cardStatus = OfferCardStatusTypes.createEntity(row, withReferences) /* OfferCardStatusType? */,
        contentRating = row[contentRating]  /* kotlin.Int? */ /* Процент заполненности карточки. */,
        recommendations = emptyList() /* kotlin.Array<OfferCardRecommendationDTO>? */ /* Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку.  */,
        errors = emptyList() /* kotlin.Array<OfferErrorDTO>? */ /* Ошибки в контенте, препятствующие размещению товара на витрине. */,
        warnings = emptyList() /* kotlin.Array<OfferErrorDTO>? */ /* Связанные с контентом предупреждения, не препятствующие размещению товара на витрине. */
    )

    /**
    * Assign all the columns from the entity of type OfferCardDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OfferCardDTO()
    * database.update(OfferCardDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OfferCardDTO) {
        this.apply {
            set(OfferCardDTOs.offerId, entity.offerId)
            set(OfferCardDTOs.mapping, entity.mapping)
            set(OfferCardDTOs.cardStatus, entity.cardStatus)
            set(OfferCardDTOs.contentRating, entity.contentRating)
        }
    }

}


object OfferCardDTOParameterValueDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OfferCardDTOParameterValueDTO") {
    val offerCardDTO = long("offerCardDTO")
    val parameterValueDTO = long("parameterValueDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[offerCardDTO] ?: 0, row[parameterValueDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OfferCardDTOParameterValueDTO.offerCardDTO, entity.first)
            set(OfferCardDTOParameterValueDTO.parameterValueDTO, entity.second)
        }
    }

}

object OfferCardDTOOfferCardRecommendationDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OfferCardDTOOfferCardRecommendationDTO") {
    val offerCardDTO = long("offerCardDTO")
    val offerCardRecommendationDTO = long("offerCardRecommendationDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[offerCardDTO] ?: 0, row[offerCardRecommendationDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OfferCardDTOOfferCardRecommendationDTO.offerCardDTO, entity.first)
            set(OfferCardDTOOfferCardRecommendationDTO.offerCardRecommendationDTO, entity.second)
        }
    }

}

object OfferCardDTOOfferErrorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OfferCardDTOOfferErrorDTO") {
    val offerCardDTO = long("offerCardDTO")
    val offerErrorDTO = long("offerErrorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[offerCardDTO] ?: 0, row[offerErrorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OfferCardDTOOfferErrorDTO.offerCardDTO, entity.first)
            set(OfferCardDTOOfferErrorDTO.offerErrorDTO, entity.second)
        }
    }

}

object OfferCardDTOOfferErrorDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OfferCardDTOOfferErrorDTO") {
    val offerCardDTO = long("offerCardDTO")
    val offerErrorDTO = long("offerErrorDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[offerCardDTO] ?: 0, row[offerErrorDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OfferCardDTOOfferErrorDTO.offerCardDTO, entity.first)
            set(OfferCardDTOOfferErrorDTO.offerErrorDTO, entity.second)
        }
    }

}

