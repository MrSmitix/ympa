/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Адрес склада.
 * @param city Город.
 * @param gps 
 * @param street Улица.
 * @param number Номер дома.
 * @param building Номер строения.
 * @param block Номер корпуса.
 */
object WarehouseAddressDTOs : BaseTable<WarehouseAddressDTO>("WarehouseAddressDTO") {
    val city = text("city") /* Город. */
    val gps = long("gps")
    val street = text("street") /* null */ /* Улица. */
    val number = text("number") /* null */ /* Номер дома. */
    val building = text("building") /* null */ /* Номер строения. */
    val block = text("block") /* null */ /* Номер корпуса. */

    /**
     * Create an entity of type WarehouseAddressDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = WarehouseAddressDTO(
        city = row[city] ?: "" /* kotlin.String */ /* Город. */,
        gps = GpsDTOs.createEntity(row, withReferences) /* GpsDTO */,
        street = row[street]  /* kotlin.String? */ /* Улица. */,
        number = row[number]  /* kotlin.String? */ /* Номер дома. */,
        building = row[building]  /* kotlin.String? */ /* Номер строения. */,
        block = row[block]  /* kotlin.String? */ /* Номер корпуса. */
    )

    /**
    * Assign all the columns from the entity of type WarehouseAddressDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = WarehouseAddressDTO()
    * database.update(WarehouseAddressDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: WarehouseAddressDTO) {
        this.apply {
            set(WarehouseAddressDTOs.city, entity.city)
            set(WarehouseAddressDTOs.gps, entity.gps)
            set(WarehouseAddressDTOs.street, entity.street)
            set(WarehouseAddressDTOs.number, entity.number)
            set(WarehouseAddressDTOs.building, entity.building)
            set(WarehouseAddressDTOs.block, entity.block)
        }
    }

}


