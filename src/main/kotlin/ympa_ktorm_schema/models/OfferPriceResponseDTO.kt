/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об установленной цене на товар.
 * @param id Идентификатор предложения из прайс-листа.
 * @param price 
 * @param marketSku SKU на Маркете.
 * @param updatedAt Дата и время последнего обновления цены на товар.
 */
object OfferPriceResponseDTOs : BaseTable<OfferPriceResponseDTO>("OfferPriceResponseDTO") {
    val id = text("id") /* null */ /* Идентификатор предложения из прайс-листа. */
    val price = long("price") /* null */
    val marketSku = long("marketSku") /* null */ /* SKU на Маркете. */
    val updatedAt = datetime("updatedAt") /* null */ /* Дата и время последнего обновления цены на товар. */

    /**
     * Create an entity of type OfferPriceResponseDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OfferPriceResponseDTO(
        id = row[id]  /* kotlin.String? */ /* Идентификатор предложения из прайс-листа. */,
        price = PriceDTOs.createEntity(row, withReferences) /* PriceDTO? */,
        marketSku = row[marketSku]  /* kotlin.Long? */ /* SKU на Маркете. */,
        updatedAt = row[updatedAt]  /* java.time.LocalDateTime? */ /* Дата и время последнего обновления цены на товар. */
    )

    /**
    * Assign all the columns from the entity of type OfferPriceResponseDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OfferPriceResponseDTO()
    * database.update(OfferPriceResponseDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OfferPriceResponseDTO) {
        this.apply {
            set(OfferPriceResponseDTOs.id, entity.id)
            set(OfferPriceResponseDTOs.price, entity.price)
            set(OfferPriceResponseDTOs.marketSku, entity.marketSku)
            set(OfferPriceResponseDTOs.updatedAt, entity.updatedAt)
        }
    }

}


