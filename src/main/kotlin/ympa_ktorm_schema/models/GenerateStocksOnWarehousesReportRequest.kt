/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Данные, необходимые для генерации отчета. 
 * @param campaignId Идентификатор магазина.
 * @param warehouseIds Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
 * @param reportDate Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
 * @param categoryIds Фильтр по категориям на Маркете (кроме модели FBY).
 * @param hasStocks Фильтр по наличию остатков (кроме модели FBY).
 */
object GenerateStocksOnWarehousesReportRequests : BaseTable<GenerateStocksOnWarehousesReportRequest>("GenerateStocksOnWarehousesReportRequest") {
    val campaignId = long("campaignId") /* Идентификатор магазина. */
    val reportDate = date("reportDate") /* null */ /* Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день. */
    val hasStocks = boolean("hasStocks") /* null */ /* Фильтр по наличию остатков (кроме модели FBY). */

    /**
     * Create an entity of type GenerateStocksOnWarehousesReportRequest from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GenerateStocksOnWarehousesReportRequest(
        campaignId = row[campaignId] ?: 0 /* kotlin.Long */ /* Идентификатор магазина. */,
        warehouseIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md). */,
        reportDate = row[reportDate]  /* java.time.LocalDate? */ /* Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день. */,
        categoryIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Фильтр по категориям на Маркете (кроме модели FBY). */,
        hasStocks = row[hasStocks]  /* kotlin.Boolean? */ /* Фильтр по наличию остатков (кроме модели FBY). */
    )

    /**
    * Assign all the columns from the entity of type GenerateStocksOnWarehousesReportRequest to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GenerateStocksOnWarehousesReportRequest()
    * database.update(GenerateStocksOnWarehousesReportRequests, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GenerateStocksOnWarehousesReportRequest) {
        this.apply {
            set(GenerateStocksOnWarehousesReportRequests.campaignId, entity.campaignId)
            set(GenerateStocksOnWarehousesReportRequests.reportDate, entity.reportDate)
            set(GenerateStocksOnWarehousesReportRequests.hasStocks, entity.hasStocks)
        }
    }

}


object GenerateStocksOnWarehousesReportRequestWarehouseIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GenerateStocksOnWarehousesReportRequestWarehouseIds") {
    val generateStocksOnWarehousesReportRequest = long("generateStocksOnWarehousesReportRequest")
    val warehouseIds = long("warehouseIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[generateStocksOnWarehousesReportRequest] ?: 0, row[warehouseIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GenerateStocksOnWarehousesReportRequestWarehouseIds.generateStocksOnWarehousesReportRequest, entity.first)
            set(GenerateStocksOnWarehousesReportRequestWarehouseIds.warehouseIds, entity.second)
        }
    }

}

object GenerateStocksOnWarehousesReportRequestCategoryIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GenerateStocksOnWarehousesReportRequestCategoryIds") {
    val generateStocksOnWarehousesReportRequest = long("generateStocksOnWarehousesReportRequest")
    val categoryIds = long("categoryIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[generateStocksOnWarehousesReportRequest] ?: 0, row[categoryIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GenerateStocksOnWarehousesReportRequestCategoryIds.generateStocksOnWarehousesReportRequest, entity.first)
            set(GenerateStocksOnWarehousesReportRequestCategoryIds.categoryIds, entity.second)
        }
    }

}

