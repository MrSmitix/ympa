/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Адрес доставки.
 * @param country Страна.
 * @param city Город.
 * @param street Улица.
 * @param house Номер дома.
 * @param postcode Почтовый индекс.
 */
object PickupAddressDTOs : BaseTable<PickupAddressDTO>("PickupAddressDTO") {
    val country = text("country") /* null */ /* Страна. */
    val city = text("city") /* null */ /* Город. */
    val street = text("street") /* null */ /* Улица. */
    val house = text("house") /* null */ /* Номер дома. */
    val postcode = text("postcode") /* null */ /* Почтовый индекс. */

    /**
     * Create an entity of type PickupAddressDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PickupAddressDTO(
        country = row[country]  /* kotlin.String? */ /* Страна. */,
        city = row[city]  /* kotlin.String? */ /* Город. */,
        street = row[street]  /* kotlin.String? */ /* Улица. */,
        house = row[house]  /* kotlin.String? */ /* Номер дома. */,
        postcode = row[postcode]  /* kotlin.String? */ /* Почтовый индекс. */
    )

    /**
    * Assign all the columns from the entity of type PickupAddressDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PickupAddressDTO()
    * database.update(PickupAddressDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PickupAddressDTO) {
        this.apply {
            set(PickupAddressDTOs.country, entity.country)
            set(PickupAddressDTOs.city, entity.city)
            set(PickupAddressDTOs.street, entity.street)
            set(PickupAddressDTOs.house, entity.house)
            set(PickupAddressDTOs.postcode, entity.postcode)
        }
    }

}


