/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Комментарий к отзыву на магазин.
 * @param id Идентификатор ответа.
 * @param parentId Идентификатор родительского ответа.
 * @param body Текст ответа.
 * @param createdAt Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @param updatedAt Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @param author 
 * @param children Дочерние ответы.
 */
object FeedbackCommentDTOs : BaseTable<FeedbackCommentDTO>("FeedbackCommentDTO") {
    val id = long("id") /* null */ /* Идентификатор ответа. */
    val parentId = long("parentId") /* null */ /* Идентификатор родительского ответа. */
    val body = text("body") /* null */ /* Текст ответа. */
    val createdAt = datetime("createdAt") /* null */ /* Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    val updatedAt = datetime("updatedAt") /* null */ /* Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
    val author = long("author") /* null */

    /**
     * Create an entity of type FeedbackCommentDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedbackCommentDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор ответа. */,
        parentId = row[parentId]  /* kotlin.Long? */ /* Идентификатор родительского ответа. */,
        body = row[body]  /* kotlin.String? */ /* Текст ответа. */,
        createdAt = row[createdAt]  /* java.time.LocalDateTime? */ /* Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */,
        updatedAt = row[updatedAt]  /* java.time.LocalDateTime? */ /* Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */,
        author = FeedbackCommentAuthorDTOs.createEntity(row, withReferences) /* FeedbackCommentAuthorDTO? */,
        children = emptyList() /* kotlin.Array<FeedbackCommentDTO>? */ /* Дочерние ответы. */
    )

    /**
    * Assign all the columns from the entity of type FeedbackCommentDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedbackCommentDTO()
    * database.update(FeedbackCommentDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedbackCommentDTO) {
        this.apply {
            set(FeedbackCommentDTOs.id, entity.id)
            set(FeedbackCommentDTOs.parentId, entity.parentId)
            set(FeedbackCommentDTOs.body, entity.body)
            set(FeedbackCommentDTOs.createdAt, entity.createdAt)
            set(FeedbackCommentDTOs.updatedAt, entity.updatedAt)
            set(FeedbackCommentDTOs.author, entity.author)
        }
    }

}


object FeedbackCommentDTOFeedbackCommentDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FeedbackCommentDTOFeedbackCommentDTO") {
    val feedbackCommentDTO = long("feedbackCommentDTO")
    val feedbackCommentDTO = long("feedbackCommentDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[feedbackCommentDTO] ?: 0, row[feedbackCommentDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FeedbackCommentDTOFeedbackCommentDTO.feedbackCommentDTO, entity.first)
            set(FeedbackCommentDTOFeedbackCommentDTO.feedbackCommentDTO, entity.second)
        }
    }

}

