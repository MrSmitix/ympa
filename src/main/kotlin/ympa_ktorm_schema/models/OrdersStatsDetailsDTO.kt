/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об удалении товара из заказа.
 * @param itemStatus 
 * @param itemCount Количество товара со статусом, указанном в параметре `itemStatus`.
 * @param updateDate Дата, когда товар получил статус, указанный в параметре `itemStatus`.  Формат даты: `ГГГГ-ММ-ДД`. 
 * @param stockType 
 */
object OrdersStatsDetailsDTOs : BaseTable<OrdersStatsDetailsDTO>("OrdersStatsDetailsDTO") {
    val itemStatus = long("itemStatus") /* null */
    val itemCount = long("itemCount") /* null */ /* Количество товара со статусом, указанном в параметре `itemStatus`. */
    val updateDate = date("updateDate") /* null */ /* Дата, когда товар получил статус, указанный в параметре `itemStatus`.  Формат даты: `ГГГГ-ММ-ДД`.  */
    val stockType = long("stockType") /* null */

    /**
     * Create an entity of type OrdersStatsDetailsDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersStatsDetailsDTO(
        itemStatus = OrdersStatsItemStatusTypes.createEntity(row, withReferences) /* OrdersStatsItemStatusType? */,
        itemCount = row[itemCount]  /* kotlin.Long? */ /* Количество товара со статусом, указанном в параметре `itemStatus`. */,
        updateDate = row[updateDate]  /* java.time.LocalDate? */ /* Дата, когда товар получил статус, указанный в параметре `itemStatus`.  Формат даты: `ГГГГ-ММ-ДД`.  */,
        stockType = OrdersStatsStockTypes.createEntity(row, withReferences) /* OrdersStatsStockType? */
    )

    /**
    * Assign all the columns from the entity of type OrdersStatsDetailsDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersStatsDetailsDTO()
    * database.update(OrdersStatsDetailsDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersStatsDetailsDTO) {
        this.apply {
            set(OrdersStatsDetailsDTOs.itemStatus, entity.itemStatus)
            set(OrdersStatsDetailsDTOs.itemCount, entity.itemCount)
            set(OrdersStatsDetailsDTOs.updateDate, entity.updateDate)
            set(OrdersStatsDetailsDTOs.stockType, entity.stockType)
        }
    }

}


