/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о состоянии цены на товар.
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param price 
 * @param cofinancePrice 
 * @param competitiveness 
 * @param shows Количество показов карточки товара за последние 7 дней.
 */
object OfferForRecommendationDTOs : BaseTable<OfferForRecommendationDTO>("OfferForRecommendationDTO") {
    val offerId = text("offerId") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val price = long("price") /* null */
    val cofinancePrice = long("cofinancePrice") /* null */
    val competitiveness = long("competitiveness") /* null */
    val shows = long("shows") /* null */ /* Количество показов карточки товара за последние 7 дней. */

    /**
     * Create an entity of type OfferForRecommendationDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OfferForRecommendationDTO(
        offerId = row[offerId]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        price = BasePriceDTOs.createEntity(row, withReferences) /* BasePriceDTO? */,
        cofinancePrice = GetPriceDTOs.createEntity(row, withReferences) /* GetPriceDTO? */,
        competitiveness = PriceCompetitivenessTypes.createEntity(row, withReferences) /* PriceCompetitivenessType? */,
        shows = row[shows]  /* kotlin.Long? */ /* Количество показов карточки товара за последние 7 дней. */
    )

    /**
    * Assign all the columns from the entity of type OfferForRecommendationDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OfferForRecommendationDTO()
    * database.update(OfferForRecommendationDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OfferForRecommendationDTO) {
        this.apply {
            set(OfferForRecommendationDTOs.offerId, entity.offerId)
            set(OfferForRecommendationDTOs.price, entity.price)
            set(OfferForRecommendationDTOs.cofinancePrice, entity.cofinancePrice)
            set(OfferForRecommendationDTOs.competitiveness, entity.competitiveness)
            set(OfferForRecommendationDTOs.shows, entity.shows)
        }
    }

}


