/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
 * @param rejectedOffers Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
 * @param warningOffers Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
 */
object UpdatePromoOffersResultDTOs : BaseTable<UpdatePromoOffersResultDTO>("UpdatePromoOffersResultDTO") {

    /**
     * Create an entity of type UpdatePromoOffersResultDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UpdatePromoOffersResultDTO(
        rejectedOffers = emptyList() /* kotlin.Array<RejectedPromoOfferUpdateDTO>? */ /* Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения.  */,
        warningOffers = emptyList() /* kotlin.Array<WarningPromoOfferUpdateDTO>? */ /* Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения.  */
    )

    /**
    * Assign all the columns from the entity of type UpdatePromoOffersResultDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UpdatePromoOffersResultDTO()
    * database.update(UpdatePromoOffersResultDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UpdatePromoOffersResultDTO) {
        this.apply {
        }
    }

}


object UpdatePromoOffersResultDTORejectedPromoOfferUpdateDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdatePromoOffersResultDTORejectedPromoOfferUpdateDTO") {
    val updatePromoOffersResultDTO = long("updatePromoOffersResultDTO")
    val rejectedPromoOfferUpdateDTO = long("rejectedPromoOfferUpdateDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updatePromoOffersResultDTO] ?: 0, row[rejectedPromoOfferUpdateDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdatePromoOffersResultDTORejectedPromoOfferUpdateDTO.updatePromoOffersResultDTO, entity.first)
            set(UpdatePromoOffersResultDTORejectedPromoOfferUpdateDTO.rejectedPromoOfferUpdateDTO, entity.second)
        }
    }

}

object UpdatePromoOffersResultDTOWarningPromoOfferUpdateDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("UpdatePromoOffersResultDTOWarningPromoOfferUpdateDTO") {
    val updatePromoOffersResultDTO = long("updatePromoOffersResultDTO")
    val warningPromoOfferUpdateDTO = long("warningPromoOfferUpdateDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[updatePromoOffersResultDTO] ?: 0, row[warningPromoOfferUpdateDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(UpdatePromoOffersResultDTOWarningPromoOfferUpdateDTO.updatePromoOffersResultDTO, entity.first)
            set(UpdatePromoOffersResultDTOWarningPromoOfferUpdateDTO.warningPromoOfferUpdateDTO, entity.second)
        }
    }

}

