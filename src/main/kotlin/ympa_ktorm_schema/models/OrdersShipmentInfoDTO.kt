/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Годные/негодные ярлыки по заказам в отгрузке.
 * @param orderIdsWithLabels Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки.
 * @param orderIdsWithoutLabels Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки.
 */
object OrdersShipmentInfoDTOs : BaseTable<OrdersShipmentInfoDTO>("OrdersShipmentInfoDTO") {

    /**
     * Create an entity of type OrdersShipmentInfoDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrdersShipmentInfoDTO(
        orderIdsWithLabels = emptyList() /* kotlin.collections.Set<kotlin.Long> */ /* Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки. */,
        orderIdsWithoutLabels = emptyList() /* kotlin.collections.Set<kotlin.Long> */ /* Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки. */
    )

    /**
    * Assign all the columns from the entity of type OrdersShipmentInfoDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrdersShipmentInfoDTO()
    * database.update(OrdersShipmentInfoDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrdersShipmentInfoDTO) {
        this.apply {
        }
    }

}


object OrdersShipmentInfoDTOOrderIdsWithLabels : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersShipmentInfoDTOOrderIdsWithLabels") {
    val ordersShipmentInfoDTO = long("ordersShipmentInfoDTO")
    val orderIdsWithLabels = long("orderIdsWithLabels")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersShipmentInfoDTO] ?: 0, row[orderIdsWithLabels] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersShipmentInfoDTOOrderIdsWithLabels.ordersShipmentInfoDTO, entity.first)
            set(OrdersShipmentInfoDTOOrderIdsWithLabels.orderIdsWithLabels, entity.second)
        }
    }

}

object OrdersShipmentInfoDTOOrderIdsWithoutLabels : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrdersShipmentInfoDTOOrderIdsWithoutLabels") {
    val ordersShipmentInfoDTO = long("ordersShipmentInfoDTO")
    val orderIdsWithoutLabels = long("orderIdsWithoutLabels")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[ordersShipmentInfoDTO] ?: 0, row[orderIdsWithoutLabels] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrdersShipmentInfoDTOOrderIdsWithoutLabels.ordersShipmentInfoDTO, entity.first)
            set(OrdersShipmentInfoDTOOrderIdsWithoutLabels.orderIdsWithoutLabels, entity.second)
        }
    }

}

