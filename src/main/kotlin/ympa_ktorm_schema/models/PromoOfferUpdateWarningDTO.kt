/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Предупреждение, которое появилось при добавлении товара в акцию или изменении его цен.
 * @param code 
 * @param campaignIds Идентификаторы магазинов в кабинете, для которых получены предупреждения.  Не возвращается, если предупреждения действуют для всех магазинов в кабинете. 
 */
object PromoOfferUpdateWarningDTOs : BaseTable<PromoOfferUpdateWarningDTO>("PromoOfferUpdateWarningDTO") {
    val code = long("code")

    /**
     * Create an entity of type PromoOfferUpdateWarningDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PromoOfferUpdateWarningDTO(
        code = PromoOfferUpdateWarningCodeTypes.createEntity(row, withReferences) /* PromoOfferUpdateWarningCodeType */,
        campaignIds = emptyList() /* kotlin.Array<kotlin.Long>? */ /* Идентификаторы магазинов в кабинете, для которых получены предупреждения.  Не возвращается, если предупреждения действуют для всех магазинов в кабинете.  */
    )

    /**
    * Assign all the columns from the entity of type PromoOfferUpdateWarningDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PromoOfferUpdateWarningDTO()
    * database.update(PromoOfferUpdateWarningDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PromoOfferUpdateWarningDTO) {
        this.apply {
            set(PromoOfferUpdateWarningDTOs.code, entity.code)
        }
    }

}


object PromoOfferUpdateWarningDTOCampaignIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("PromoOfferUpdateWarningDTOCampaignIds") {
    val promoOfferUpdateWarningDTO = long("promoOfferUpdateWarningDTO")
    val campaignIds = long("campaignIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[promoOfferUpdateWarningDTO] ?: 0, row[campaignIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(PromoOfferUpdateWarningDTOCampaignIds.promoOfferUpdateWarningDTO, entity.first)
            set(PromoOfferUpdateWarningDTOCampaignIds.campaignIds, entity.second)
        }
    }

}

