/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 * @param categoryId Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
 * @param price Цена на товар в рублях.
 * @param length Длина товара в сантиметрах.
 * @param width Ширина товара в сантиметрах.
 * @param height Высота товара в сантиметрах.
 * @param weight Вес товара в килограммах.
 * @param quantity Квант продажи — количество единиц товара в одном товарном предложении.
 */
object CalculateTariffsOfferDTOs : BaseTable<CalculateTariffsOfferDTO>("CalculateTariffsOfferDTO") {
    val categoryId = long("categoryId") /* Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */
    val price = decimal("price") /* Цена на товар в рублях. */
    val length = decimal("length") /* Длина товара в сантиметрах. */
    val width = decimal("width") /* Ширина товара в сантиметрах. */
    val height = decimal("height") /* Высота товара в сантиметрах. */
    val weight = decimal("weight") /* Вес товара в килограммах. */
    val quantity = int("quantity") /* null */ /* Квант продажи — количество единиц товара в одном товарном предложении. */

    /**
     * Create an entity of type CalculateTariffsOfferDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CalculateTariffsOfferDTO(
        categoryId = row[categoryId] ?: 0 /* kotlin.Long */ /* Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */,
        price = row[price] ?: 0 /* java.math.BigDecimal */ /* Цена на товар в рублях. */,
        length = row[length] ?: 0 /* java.math.BigDecimal */ /* Длина товара в сантиметрах. */,
        width = row[width] ?: 0 /* java.math.BigDecimal */ /* Ширина товара в сантиметрах. */,
        height = row[height] ?: 0 /* java.math.BigDecimal */ /* Высота товара в сантиметрах. */,
        weight = row[weight] ?: 0 /* java.math.BigDecimal */ /* Вес товара в килограммах. */,
        quantity = row[quantity] ?: 1 /* kotlin.Int? */ /* Квант продажи — количество единиц товара в одном товарном предложении. */
    )

    /**
    * Assign all the columns from the entity of type CalculateTariffsOfferDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CalculateTariffsOfferDTO()
    * database.update(CalculateTariffsOfferDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CalculateTariffsOfferDTO) {
        this.apply {
            set(CalculateTariffsOfferDTOs.categoryId, entity.categoryId)
            set(CalculateTariffsOfferDTOs.price, entity.price)
            set(CalculateTariffsOfferDTOs.length, entity.length)
            set(CalculateTariffsOfferDTOs.width, entity.width)
            set(CalculateTariffsOfferDTOs.height, entity.height)
            set(CalculateTariffsOfferDTOs.weight, entity.weight)
            set(CalculateTariffsOfferDTOs.quantity, entity.quantity)
        }
    }

}


