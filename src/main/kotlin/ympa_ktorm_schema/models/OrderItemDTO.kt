/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Список товаров в заказе.
 * @param id Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
 * @param offerId Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param offerName Название товара.
 * @param price Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
 * @param buyerPrice Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
 * @param buyerPriceBeforeDiscount Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
 * @param priceBeforeDiscount {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
 * @param count Количество единиц товара.
 * @param vat 
 * @param shopSku Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @param subsidy {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
 * @param partnerWarehouseId {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
 * @param promos Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 * @param instances Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
 * @param details Информация об удалении товара из заказа. 
 * @param subsidies Список субсидий по типам.
 * @param requiredInstanceTypes Список необходимых маркировок товара.
 */
object OrderItemDTOs : BaseTable<OrderItemDTO>("OrderItemDTO") {
    val id = long("id") /* null */ /* Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */
    val offerId = text("offerId") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    val offerName = text("offerName") /* null */ /* Название товара. */
    val price = decimal("price") /* null */ /* Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`).  */
    val buyerPrice = decimal("buyerPrice") /* null */ /* Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.  */
    val buyerPriceBeforeDiscount = decimal("buyerPriceBeforeDiscount") /* null */ /* Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.  */
    @Deprecated(message = "This property is deprecated.")
    val priceBeforeDiscount = decimal("priceBeforeDiscount") /* null */ /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.  */
    val count = int("count") /* null */ /* Количество единиц товара. */
    val vat = long("vat") /* null */
    val shopSku = text("shopSku") /* null */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
    @Deprecated(message = "This property is deprecated.")
    val subsidy = decimal("subsidy") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.  */
    @Deprecated(message = "This property is deprecated.")
    val partnerWarehouseId = text("partnerWarehouseId") /* null */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.  */

    /**
     * Create an entity of type OrderItemDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = OrderItemDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */,
        offerId = row[offerId]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        offerName = row[offerName]  /* kotlin.String? */ /* Название товара. */,
        price = row[price]  /* java.math.BigDecimal? */ /* Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`).  */,
        buyerPrice = row[buyerPrice]  /* java.math.BigDecimal? */ /* Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.  */,
        buyerPriceBeforeDiscount = row[buyerPriceBeforeDiscount]  /* java.math.BigDecimal? */ /* Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.  */,
        priceBeforeDiscount = row[priceBeforeDiscount]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.  */,
        count = row[count]  /* kotlin.Int? */ /* Количество единиц товара. */,
        vat = OrderVatTypes.createEntity(row, withReferences) /* OrderVatType? */,
        shopSku = row[shopSku]  /* kotlin.String? */ /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */,
        subsidy = row[subsidy]  /* java.math.BigDecimal? */ /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.  */,
        partnerWarehouseId = row[partnerWarehouseId]  /* kotlin.String? */ /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.  */,
        promos = emptyList() /* kotlin.Array<OrderItemPromoDTO>? */ /* Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям. */,
        instances = emptyList() /* kotlin.Array<OrderItemInstanceDTO>? */ /* Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует.  */,
        details = emptyList() /* kotlin.Array<OrderItemDetailDTO>? */ /* Информация об удалении товара из заказа.  */,
        subsidies = emptyList() /* kotlin.Array<OrderItemSubsidyDTO>? */ /* Список субсидий по типам. */,
        requiredInstanceTypes = emptyList() /* kotlin.Array<OrderItemInstanceType>? */ /* Список необходимых маркировок товара. */
    )

    /**
    * Assign all the columns from the entity of type OrderItemDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = OrderItemDTO()
    * database.update(OrderItemDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: OrderItemDTO) {
        this.apply {
            set(OrderItemDTOs.id, entity.id)
            set(OrderItemDTOs.offerId, entity.offerId)
            set(OrderItemDTOs.offerName, entity.offerName)
            set(OrderItemDTOs.price, entity.price)
            set(OrderItemDTOs.buyerPrice, entity.buyerPrice)
            set(OrderItemDTOs.buyerPriceBeforeDiscount, entity.buyerPriceBeforeDiscount)
            set(OrderItemDTOs.priceBeforeDiscount, entity.priceBeforeDiscount)
            set(OrderItemDTOs.count, entity.count)
            set(OrderItemDTOs.vat, entity.vat)
            set(OrderItemDTOs.shopSku, entity.shopSku)
            set(OrderItemDTOs.subsidy, entity.subsidy)
            set(OrderItemDTOs.partnerWarehouseId, entity.partnerWarehouseId)
        }
    }

}


object OrderItemDTOOrderItemPromoDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemDTOOrderItemPromoDTO") {
    val orderItemDTO = long("orderItemDTO")
    val orderItemPromoDTO = long("orderItemPromoDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemDTO] ?: 0, row[orderItemPromoDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemDTOOrderItemPromoDTO.orderItemDTO, entity.first)
            set(OrderItemDTOOrderItemPromoDTO.orderItemPromoDTO, entity.second)
        }
    }

}

object OrderItemDTOOrderItemInstanceDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemDTOOrderItemInstanceDTO") {
    val orderItemDTO = long("orderItemDTO")
    val orderItemInstanceDTO = long("orderItemInstanceDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemDTO] ?: 0, row[orderItemInstanceDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemDTOOrderItemInstanceDTO.orderItemDTO, entity.first)
            set(OrderItemDTOOrderItemInstanceDTO.orderItemInstanceDTO, entity.second)
        }
    }

}

object OrderItemDTOOrderItemDetailDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemDTOOrderItemDetailDTO") {
    val orderItemDTO = long("orderItemDTO")
    val orderItemDetailDTO = long("orderItemDetailDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemDTO] ?: 0, row[orderItemDetailDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemDTOOrderItemDetailDTO.orderItemDTO, entity.first)
            set(OrderItemDTOOrderItemDetailDTO.orderItemDetailDTO, entity.second)
        }
    }

}

object OrderItemDTOOrderItemSubsidyDTO : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemDTOOrderItemSubsidyDTO") {
    val orderItemDTO = long("orderItemDTO")
    val orderItemSubsidyDTO = long("orderItemSubsidyDTO")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemDTO] ?: 0, row[orderItemSubsidyDTO] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemDTOOrderItemSubsidyDTO.orderItemDTO, entity.first)
            set(OrderItemDTOOrderItemSubsidyDTO.orderItemSubsidyDTO, entity.second)
        }
    }

}

object OrderItemDTOOrderItemInstanceType : BaseTable<Pair<kotlin.Long, kotlin.Long>>("OrderItemDTOOrderItemInstanceType") {
    val orderItemDTO = long("orderItemDTO")
    val orderItemInstanceType = long("orderItemInstanceType")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[orderItemDTO] ?: 0, row[orderItemInstanceType] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(OrderItemDTOOrderItemInstanceType.orderItemDTO, entity.first)
            set(OrderItemDTOOrderItemInstanceType.orderItemInstanceType, entity.second)
        }
    }

}

