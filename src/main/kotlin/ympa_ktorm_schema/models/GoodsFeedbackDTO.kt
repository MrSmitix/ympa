/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Отзыв о товаре.
 * @param feedbackId Идентификатор отзыва. 
 * @param createdAt Дата и время создания отзыва.
 * @param needReaction Нужен ли ответ на отзыв.
 * @param identifiers 
 * @param statistics 
 * @param author Имя автора отзыва.
 * @param description 
 * @param media 
 */
object GoodsFeedbackDTOs : BaseTable<GoodsFeedbackDTO>("GoodsFeedbackDTO") {
    val feedbackId = long("feedbackId") /* Идентификатор отзыва.  */
    val createdAt = datetime("createdAt") /* Дата и время создания отзыва. */
    val needReaction = boolean("needReaction") /* Нужен ли ответ на отзыв. */
    val identifiers = long("identifiers")
    val statistics = long("statistics")
    val author = text("author") /* null */ /* Имя автора отзыва. */
    val description = long("description") /* null */
    val media = long("media") /* null */

    /**
     * Create an entity of type GoodsFeedbackDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GoodsFeedbackDTO(
        feedbackId = row[feedbackId] ?: 0 /* kotlin.Long */ /* Идентификатор отзыва.  */,
        createdAt = row[createdAt] /* java.time.LocalDateTime */ /* Дата и время создания отзыва. */,
        needReaction = row[needReaction] ?: false /* kotlin.Boolean */ /* Нужен ли ответ на отзыв. */,
        identifiers = GoodsFeedbackIdentifiersDTOs.createEntity(row, withReferences) /* GoodsFeedbackIdentifiersDTO */,
        statistics = GoodsFeedbackStatisticsDTOs.createEntity(row, withReferences) /* GoodsFeedbackStatisticsDTO */,
        author = row[author]  /* kotlin.String? */ /* Имя автора отзыва. */,
        description = GoodsFeedbackDescriptionDTOs.createEntity(row, withReferences) /* GoodsFeedbackDescriptionDTO? */,
        media = GoodsFeedbackMediaDTOs.createEntity(row, withReferences) /* GoodsFeedbackMediaDTO? */
    )

    /**
    * Assign all the columns from the entity of type GoodsFeedbackDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GoodsFeedbackDTO()
    * database.update(GoodsFeedbackDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GoodsFeedbackDTO) {
        this.apply {
            set(GoodsFeedbackDTOs.feedbackId, entity.feedbackId)
            set(GoodsFeedbackDTOs.createdAt, entity.createdAt)
            set(GoodsFeedbackDTOs.needReaction, entity.needReaction)
            set(GoodsFeedbackDTOs.identifiers, entity.identifiers)
            set(GoodsFeedbackDTOs.statistics, entity.statistics)
            set(GoodsFeedbackDTOs.author, entity.author)
            set(GoodsFeedbackDTOs.description, entity.description)
            set(GoodsFeedbackDTOs.media, entity.media)
        }
    }

}


