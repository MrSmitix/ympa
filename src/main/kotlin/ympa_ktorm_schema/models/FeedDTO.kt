/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о прайс-листе.
 * @param id Идентификатор прайс-листа.
 * @param login Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
 * @param name Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
 * @param password Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
 * @param uploadDate Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
 * @param url URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
 * @param content 
 * @param download 
 * @param placement 
 * @param publication 
 */
object FeedDTOs : BaseTable<FeedDTO>("FeedDTO") {
    val id = long("id") /* null */ /* Идентификатор прайс-листа. */
    val login = text("login") /* null */ /* Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
    val name = text("name") /* null */ /* Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.  */
    val password = text("password") /* null */ /* Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
    val uploadDate = datetime("uploadDate") /* null */ /* Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.  */
    val url = text("url") /* null */ /* URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.  */
    val content = long("content") /* null */
    val download = long("download") /* null */
    val placement = long("placement") /* null */
    val publication = long("publication") /* null */

    /**
     * Create an entity of type FeedDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FeedDTO(
        id = row[id]  /* kotlin.Long? */ /* Идентификатор прайс-листа. */,
        login = row[login]  /* kotlin.String? */ /* Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */,
        name = row[name]  /* kotlin.String? */ /* Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.  */,
        password = row[password]  /* kotlin.String? */ /* Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */,
        uploadDate = row[uploadDate]  /* java.time.LocalDateTime? */ /* Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.  */,
        url = row[url]  /* kotlin.String? */ /* URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.  */,
        content = FeedContentDTOs.createEntity(row, withReferences) /* FeedContentDTO? */,
        download = FeedDownloadDTOs.createEntity(row, withReferences) /* FeedDownloadDTO? */,
        placement = FeedPlacementDTOs.createEntity(row, withReferences) /* FeedPlacementDTO? */,
        publication = FeedPublicationDTOs.createEntity(row, withReferences) /* FeedPublicationDTO? */
    )

    /**
    * Assign all the columns from the entity of type FeedDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FeedDTO()
    * database.update(FeedDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FeedDTO) {
        this.apply {
            set(FeedDTOs.id, entity.id)
            set(FeedDTOs.login, entity.login)
            set(FeedDTOs.name, entity.name)
            set(FeedDTOs.password, entity.password)
            set(FeedDTOs.uploadDate, entity.uploadDate)
            set(FeedDTOs.url, entity.url)
            set(FeedDTOs.content, entity.content)
            set(FeedDTOs.download, entity.download)
            set(FeedDTOs.placement, entity.placement)
            set(FeedDTOs.publication, entity.publication)
        }
    }

}


