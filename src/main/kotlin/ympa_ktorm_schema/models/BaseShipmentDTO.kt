/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация об отгрузке.
 * @param orderIds Идентификаторы заказов в отгрузке.
 * @param id Идентификатор отгрузки.
 * @param planIntervalFrom Начало планового интервала отгрузки.
 * @param planIntervalTo Конец планового интервала отгрузки.
 * @param shipmentType 
 * @param warehouse 
 * @param warehouseTo 
 * @param externalId Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
 * @param deliveryService 
 * @param palletsCount 
 * @param draftCount Количество заказов, которое Маркет запланировал к отгрузке.
 * @param plannedCount Количество заказов, которое Маркет подтвердил к отгрузке.
 * @param factCount Количество заказов, принятых в сортировочном центре или пункте приема.
 */
object BaseShipmentDTOs : BaseTable<BaseShipmentDTO>("BaseShipmentDTO") {
    val id = long("id") /* null */ /* Идентификатор отгрузки. */
    val planIntervalFrom = datetime("planIntervalFrom") /* null */ /* Начало планового интервала отгрузки. */
    val planIntervalTo = datetime("planIntervalTo") /* null */ /* Конец планового интервала отгрузки. */
    val shipmentType = long("shipmentType") /* null */
    val warehouse = long("warehouse") /* null */
    val warehouseTo = long("warehouseTo") /* null */
    val externalId = text("externalId") /* null */ /* Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`. */
    val deliveryService = long("deliveryService") /* null */
    val palletsCount = long("palletsCount") /* null */
    val draftCount = int("draftCount") /* null */ /* Количество заказов, которое Маркет запланировал к отгрузке. */
    val plannedCount = int("plannedCount") /* null */ /* Количество заказов, которое Маркет подтвердил к отгрузке. */
    val factCount = int("factCount") /* null */ /* Количество заказов, принятых в сортировочном центре или пункте приема. */

    /**
     * Create an entity of type BaseShipmentDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BaseShipmentDTO(
        orderIds = emptyList() /* kotlin.collections.Set<kotlin.Long> */ /* Идентификаторы заказов в отгрузке. */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор отгрузки. */,
        planIntervalFrom = row[planIntervalFrom]  /* java.time.LocalDateTime? */ /* Начало планового интервала отгрузки. */,
        planIntervalTo = row[planIntervalTo]  /* java.time.LocalDateTime? */ /* Конец планового интервала отгрузки. */,
        shipmentType = ShipmentTypes.createEntity(row, withReferences) /* ShipmentType? */,
        warehouse = PartnerShipmentWarehouseDTOs.createEntity(row, withReferences) /* PartnerShipmentWarehouseDTO? */,
        warehouseTo = PartnerShipmentWarehouseDTOs.createEntity(row, withReferences) /* PartnerShipmentWarehouseDTO? */,
        externalId = row[externalId]  /* kotlin.String? */ /* Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`. */,
        deliveryService = DeliveryServiceDTOs.createEntity(row, withReferences) /* DeliveryServiceDTO? */,
        palletsCount = PalletsCountDTOs.createEntity(row, withReferences) /* PalletsCountDTO? */,
        draftCount = row[draftCount]  /* kotlin.Int? */ /* Количество заказов, которое Маркет запланировал к отгрузке. */,
        plannedCount = row[plannedCount]  /* kotlin.Int? */ /* Количество заказов, которое Маркет подтвердил к отгрузке. */,
        factCount = row[factCount]  /* kotlin.Int? */ /* Количество заказов, принятых в сортировочном центре или пункте приема. */
    )

    /**
    * Assign all the columns from the entity of type BaseShipmentDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BaseShipmentDTO()
    * database.update(BaseShipmentDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BaseShipmentDTO) {
        this.apply {
            set(BaseShipmentDTOs.id, entity.id)
            set(BaseShipmentDTOs.planIntervalFrom, entity.planIntervalFrom)
            set(BaseShipmentDTOs.planIntervalTo, entity.planIntervalTo)
            set(BaseShipmentDTOs.shipmentType, entity.shipmentType)
            set(BaseShipmentDTOs.warehouse, entity.warehouse)
            set(BaseShipmentDTOs.warehouseTo, entity.warehouseTo)
            set(BaseShipmentDTOs.externalId, entity.externalId)
            set(BaseShipmentDTOs.deliveryService, entity.deliveryService)
            set(BaseShipmentDTOs.palletsCount, entity.palletsCount)
            set(BaseShipmentDTOs.draftCount, entity.draftCount)
            set(BaseShipmentDTOs.plannedCount, entity.plannedCount)
            set(BaseShipmentDTOs.factCount, entity.factCount)
        }
    }

}


object BaseShipmentDTOOrderIds : BaseTable<Pair<kotlin.Long, kotlin.Long>>("BaseShipmentDTOOrderIds") {
    val baseShipmentDTO = long("baseShipmentDTO")
    val orderIds = long("orderIds")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[baseShipmentDTO] ?: 0, row[orderIds] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(BaseShipmentDTOOrderIds.baseShipmentDTO, entity.first)
            set(BaseShipmentDTOOrderIds.orderIds, entity.second)
        }
    }

}

