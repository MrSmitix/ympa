/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_ktorm_schema.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Информация о магазине.
 * @param domain URL магазина.
 * @param id Идентификатор кампании.
 * @param clientId Идентификатор плательщика в Яндекс Балансе.
 * @param business 
 * @param placementType 
 */
object CampaignDTOs : BaseTable<CampaignDTO>("CampaignDTO") {
    val domain = text("domain") /* null */ /* URL магазина. */
    val id = long("id") /* null */ /* Идентификатор кампании. */
    val clientId = long("clientId") /* null */ /* Идентификатор плательщика в Яндекс Балансе. */
    val business = long("business") /* null */
    val placementType = long("placementType") /* null */

    /**
     * Create an entity of type CampaignDTO from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CampaignDTO(
        domain = row[domain]  /* kotlin.String? */ /* URL магазина. */,
        id = row[id]  /* kotlin.Long? */ /* Идентификатор кампании. */,
        clientId = row[clientId]  /* kotlin.Long? */ /* Идентификатор плательщика в Яндекс Балансе. */,
        business = BusinessDTOs.createEntity(row, withReferences) /* BusinessDTO? */,
        placementType = PlacementTypes.createEntity(row, withReferences) /* PlacementType? */
    )

    /**
    * Assign all the columns from the entity of type CampaignDTO to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CampaignDTO()
    * database.update(CampaignDTOs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CampaignDTO) {
        this.apply {
            set(CampaignDTOs.domain, entity.domain)
            set(CampaignDTOs.id, entity.id)
            set(CampaignDTOs.clientId, entity.clientId)
            set(CampaignDTOs.business, entity.business)
            set(CampaignDTOs.placementType, entity.placementType)
        }
    }

}


