/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_vertx_server.models


        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 * @param categoryId Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
 * @param price Цена на товар в рублях.
 * @param length Длина товара в сантиметрах.
 * @param width Ширина товара в сантиметрах.
 * @param height Высота товара в сантиметрах.
 * @param weight Вес товара в килограммах.
 * @param quantity Квант продажи — количество единиц товара в одном товарном предложении.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CalculateTariffsOfferDTO (
    /* Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */
    @SerializedName("categoryId") private val _categoryId: kotlin.Long?,
    /* Цена на товар в рублях. */
    @SerializedName("price") private val _price: java.math.BigDecimal?,
    /* Длина товара в сантиметрах. */
    @SerializedName("length") private val _length: java.math.BigDecimal?,
    /* Ширина товара в сантиметрах. */
    @SerializedName("width") private val _width: java.math.BigDecimal?,
    /* Высота товара в сантиметрах. */
    @SerializedName("height") private val _height: java.math.BigDecimal?,
    /* Вес товара в килограммах. */
    @SerializedName("weight") private val _weight: java.math.BigDecimal?,
    /* Квант продажи — количество единиц товара в одном товарном предложении. */
    val quantity: kotlin.Int? = 1
) {

        val categoryId get() = _categoryId ?: throw IllegalArgumentException("categoryId is required")
                    
        val price get() = _price ?: throw IllegalArgumentException("price is required")
                    
        val length get() = _length ?: throw IllegalArgumentException("length is required")
                    
        val width get() = _width ?: throw IllegalArgumentException("width is required")
                    
        val height get() = _height ?: throw IllegalArgumentException("height is required")
                    
        val weight get() = _weight ?: throw IllegalArgumentException("weight is required")
                    
}

