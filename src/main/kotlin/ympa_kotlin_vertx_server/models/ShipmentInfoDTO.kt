/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_vertx_server.models

import ympa_kotlin_vertx_server.models.DeliveryServiceDTO
import ympa_kotlin_vertx_server.models.PalletsCountDTO
import ympa_kotlin_vertx_server.models.PartnerShipmentWarehouseDTO
import ympa_kotlin_vertx_server.models.ShipmentStatusType
import ympa_kotlin_vertx_server.models.ShipmentType

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Список с информацией об отгрузках.
 * @param orderIds Идентификаторы заказов в отгрузке.
 * @param id Идентификатор отгрузки.
 * @param planIntervalFrom Начало планового интервала отгрузки.
 * @param planIntervalTo Конец планового интервала отгрузки.
 * @param shipmentType 
 * @param warehouse 
 * @param warehouseTo 
 * @param externalId Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
 * @param deliveryService 
 * @param palletsCount 
 * @param draftCount Количество заказов, которое Маркет запланировал к отгрузке.
 * @param plannedCount Количество заказов, которое Маркет подтвердил к отгрузке.
 * @param factCount Количество заказов, принятых в сортировочном центре или пункте приема.
 * @param status 
 * @param statusDescription Описание статуса отгрузки.
 * @param statusUpdateTime Время последнего изменения статуса отгрузки.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class ShipmentInfoDTO (
    /* Идентификаторы заказов в отгрузке. */
    @SerializedName("orderIds") private val _orderIds: kotlin.collections.Set<kotlin.Long>?,
    /* Идентификатор отгрузки. */
    val id: kotlin.Long? = null,
    /* Начало планового интервала отгрузки. */
    val planIntervalFrom: java.time.OffsetDateTime? = null,
    /* Конец планового интервала отгрузки. */
    val planIntervalTo: java.time.OffsetDateTime? = null,
    val shipmentType: ShipmentType? = null,
    val warehouse: PartnerShipmentWarehouseDTO? = null,
    val warehouseTo: PartnerShipmentWarehouseDTO? = null,
    /* Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`. */
    val externalId: kotlin.String? = null,
    val deliveryService: DeliveryServiceDTO? = null,
    val palletsCount: PalletsCountDTO? = null,
    /* Количество заказов, которое Маркет запланировал к отгрузке. */
    val draftCount: kotlin.Int? = null,
    /* Количество заказов, которое Маркет подтвердил к отгрузке. */
    val plannedCount: kotlin.Int? = null,
    /* Количество заказов, принятых в сортировочном центре или пункте приема. */
    val factCount: kotlin.Int? = null,
    val status: ShipmentStatusType? = null,
    /* Описание статуса отгрузки. */
    val statusDescription: kotlin.String? = null,
    /* Время последнего изменения статуса отгрузки. */
    val statusUpdateTime: java.time.OffsetDateTime? = null
) {

        val orderIds get() = _orderIds ?: throw IllegalArgumentException("orderIds is required")
                    
}

