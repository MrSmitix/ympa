/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_vertx_server.models

import ympa_kotlin_vertx_server.models.CategoryParameterUnitDTO
import ympa_kotlin_vertx_server.models.OfferCardRecommendationType
import ympa_kotlin_vertx_server.models.ParameterType
import ympa_kotlin_vertx_server.models.ParameterValueConstraintsDTO
import ympa_kotlin_vertx_server.models.ParameterValueOptionDTO
import ympa_kotlin_vertx_server.models.ValueRestrictionDTO

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Характеристика товара.
 * @param id Идентификатор характеристики.
 * @param type 
 * @param required Обязательность характеристики.
 * @param filtering Используется ли характеристика в фильтре.
 * @param distinctive Является ли характеристика особенностью варианта.
 * @param multivalue Можно ли передать сразу несколько значений.
 * @param allowCustomValues Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
 * @param name Название характеристики.
 * @param unit 
 * @param description Описание характеристики.
 * @param recommendationTypes Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
 * @param propertyValues Список допустимых значений параметра. Только для характеристик типа `ENUM`.
 * @param constraints 
 * @param valueRestrictions Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class CategoryParameterDTO (
    /* Идентификатор характеристики. */
    @SerializedName("id") private val _id: kotlin.Long?,
    @SerializedName("type") private val _type: ParameterType?,
    /* Обязательность характеристики. */
    @SerializedName("required") private val _required: kotlin.Boolean?,
    /* Используется ли характеристика в фильтре. */
    @SerializedName("filtering") private val _filtering: kotlin.Boolean?,
    /* Является ли характеристика особенностью варианта. */
    @SerializedName("distinctive") private val _distinctive: kotlin.Boolean?,
    /* Можно ли передать сразу несколько значений. */
    @SerializedName("multivalue") private val _multivalue: kotlin.Boolean?,
    /* Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`. */
    @SerializedName("allowCustomValues") private val _allowCustomValues: kotlin.Boolean?,
    /* Название характеристики. */
    val name: kotlin.String? = null,
    val unit: CategoryParameterUnitDTO? = null,
    /* Описание характеристики. */
    val description: kotlin.String? = null,
    /* Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика. */
    val recommendationTypes: kotlin.Array<OfferCardRecommendationType>? = null,
    /* Список допустимых значений параметра. Только для характеристик типа `ENUM`. */
    val propertyValues: kotlin.Array<ParameterValueOptionDTO>? = null,
    val constraints: ParameterValueConstraintsDTO? = null,
    /* Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`. */
    val valueRestrictions: kotlin.Array<ValueRestrictionDTO>? = null
) {

        val id get() = _id ?: throw IllegalArgumentException("id is required")
                    
        val type get() = _type ?: throw IllegalArgumentException("type is required")
                    
        val required get() = _required ?: throw IllegalArgumentException("required is required")
                    
        val filtering get() = _filtering ?: throw IllegalArgumentException("filtering is required")
                    
        val distinctive get() = _distinctive ?: throw IllegalArgumentException("distinctive is required")
                    
        val multivalue get() = _multivalue ?: throw IllegalArgumentException("multivalue is required")
                    
        val allowCustomValues get() = _allowCustomValues ?: throw IllegalArgumentException("allowCustomValues is required")
                    
}

