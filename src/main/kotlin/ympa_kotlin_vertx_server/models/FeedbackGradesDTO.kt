/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_vertx_server.models

import ympa_kotlin_vertx_server.models.FeedbackFactorDTO

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 * @param factors Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
 * @param average Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
 * @param agreeCount Количество пользователей, считающих отзыв полезным.
 * @param rejectCount Количество пользователей, считающих отзыв бесполезным.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class FeedbackGradesDTO (
    /* Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор.  */
    @SerializedName("factors") private val _factors: kotlin.Array<FeedbackFactorDTO>?,
    /* Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»). */
    val average: java.math.BigDecimal? = null,
    /* Количество пользователей, считающих отзыв полезным. */
    val agreeCount: kotlin.Long? = null,
    /* Количество пользователей, считающих отзыв бесполезным. */
    val rejectCount: kotlin.Long? = null
) {

        val factors get() = _factors ?: throw IllegalArgumentException("factors is required")
                    
}

