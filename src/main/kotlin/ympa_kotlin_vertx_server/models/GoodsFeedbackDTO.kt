/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ympa_kotlin_vertx_server.models

import ympa_kotlin_vertx_server.models.GoodsFeedbackDescriptionDTO
import ympa_kotlin_vertx_server.models.GoodsFeedbackIdentifiersDTO
import ympa_kotlin_vertx_server.models.GoodsFeedbackMediaDTO
import ympa_kotlin_vertx_server.models.GoodsFeedbackStatisticsDTO

        
import com.google.gson.annotations.SerializedName
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
/**
 * Отзыв о товаре.
 * @param feedbackId Идентификатор отзыва. 
 * @param createdAt Дата и время создания отзыва.
 * @param needReaction Нужен ли ответ на отзыв.
 * @param identifiers 
 * @param statistics 
 * @param author Имя автора отзыва.
 * @param description 
 * @param media 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class GoodsFeedbackDTO (
    /* Идентификатор отзыва.  */
    @SerializedName("feedbackId") private val _feedbackId: kotlin.Long?,
    /* Дата и время создания отзыва. */
    @SerializedName("createdAt") private val _createdAt: java.time.OffsetDateTime?,
    /* Нужен ли ответ на отзыв. */
    @SerializedName("needReaction") private val _needReaction: kotlin.Boolean?,
    @SerializedName("identifiers") private val _identifiers: GoodsFeedbackIdentifiersDTO?,
    @SerializedName("statistics") private val _statistics: GoodsFeedbackStatisticsDTO?,
    /* Имя автора отзыва. */
    val author: kotlin.String? = null,
    val description: GoodsFeedbackDescriptionDTO? = null,
    val media: GoodsFeedbackMediaDTO? = null
) {

        val feedbackId get() = _feedbackId ?: throw IllegalArgumentException("feedbackId is required")
                    
        val createdAt get() = _createdAt ?: throw IllegalArgumentException("createdAt is required")
                    
        val needReaction get() = _needReaction ?: throw IllegalArgumentException("needReaction is required")
                    
        val identifiers get() = _identifiers ?: throw IllegalArgumentException("identifiers is required")
                    
        val statistics get() = _statistics ?: throw IllegalArgumentException("statistics is required")
                    
}

