/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Параметры товара, для которого нужно рассчитать стоимость услуг.
    /// </summary>
    [DataContract(Name = "CalculateTariffsOfferDTO")]
    public partial class CalculateTariffsOfferDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateTariffsOfferDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CalculateTariffsOfferDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateTariffsOfferDTO" /> class.
        /// </summary>
        /// <param name="categoryId">Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  (required).</param>
        /// <param name="price">Цена на товар в рублях. (required).</param>
        /// <param name="length">Длина товара в сантиметрах. (required).</param>
        /// <param name="width">Ширина товара в сантиметрах. (required).</param>
        /// <param name="height">Высота товара в сантиметрах. (required).</param>
        /// <param name="weight">Вес товара в килограммах. (required).</param>
        /// <param name="quantity">Квант продажи — количество единиц товара в одном товарном предложении. (default to 1).</param>
        public CalculateTariffsOfferDTO(long categoryId = default(long), decimal price = default(decimal), decimal length = default(decimal), decimal width = default(decimal), decimal height = default(decimal), decimal weight = default(decimal), int quantity = 1)
        {
            this.CategoryId = categoryId;
            this.Price = price;
            this.Length = length;
            this.Width = width;
            this.Height = height;
            this.Weight = weight;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
        /// </summary>
        /// <value>Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). </value>
        [DataMember(Name = "categoryId", IsRequired = true, EmitDefaultValue = true)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Цена на товар в рублях.
        /// </summary>
        /// <value>Цена на товар в рублях.</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public decimal Price { get; set; }

        /// <summary>
        /// Длина товара в сантиметрах.
        /// </summary>
        /// <value>Длина товара в сантиметрах.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public decimal Length { get; set; }

        /// <summary>
        /// Ширина товара в сантиметрах.
        /// </summary>
        /// <value>Ширина товара в сантиметрах.</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = true)]
        public decimal Width { get; set; }

        /// <summary>
        /// Высота товара в сантиметрах.
        /// </summary>
        /// <value>Высота товара в сантиметрах.</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public decimal Height { get; set; }

        /// <summary>
        /// Вес товара в килограммах.
        /// </summary>
        /// <value>Вес товара в килограммах.</value>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Квант продажи — количество единиц товара в одном товарном предложении.
        /// </summary>
        /// <value>Квант продажи — количество единиц товара в одном товарном предложении.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalculateTariffsOfferDTO {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CategoryId (long) minimum
            if (this.CategoryId < (long)0)
            {
                yield return new ValidationResult("Invalid value for CategoryId, must be a value greater than 0.", new [] { "CategoryId" });
            }

            // Price (decimal) minimum
            if (this.Price < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than 0.", new [] { "Price" });
            }

            // Length (decimal) minimum
            if (this.Length < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value greater than 0.", new [] { "Length" });
            }

            // Width (decimal) minimum
            if (this.Width < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than 0.", new [] { "Width" });
            }

            // Height (decimal) minimum
            if (this.Height < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than 0.", new [] { "Height" });
            }

            // Weight (decimal) minimum
            if (this.Weight < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value greater than 0.", new [] { "Weight" });
            }

            // Quantity (int) minimum
            if (this.Quantity < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
