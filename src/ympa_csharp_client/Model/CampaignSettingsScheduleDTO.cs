/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Расписание работы службы доставки в своем регионе.
    /// </summary>
    [DataContract(Name = "CampaignSettingsScheduleDTO")]
    public partial class CampaignSettingsScheduleDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignSettingsScheduleDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignSettingsScheduleDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignSettingsScheduleDTO" /> class.
        /// </summary>
        /// <param name="availableOnHolidays">Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. .</param>
        /// <param name="customHolidays">Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете. (required).</param>
        /// <param name="customWorkingDays">Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете. (required).</param>
        /// <param name="period">period.</param>
        /// <param name="totalHolidays">Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете. (required).</param>
        /// <param name="weeklyHolidays">Список выходных дней недели и государственных праздников. (required).</param>
        public CampaignSettingsScheduleDTO(bool availableOnHolidays = default(bool), List<string> customHolidays = default(List<string>), List<string> customWorkingDays = default(List<string>), CampaignSettingsTimePeriodDTO period = default(CampaignSettingsTimePeriodDTO), List<string> totalHolidays = default(List<string>), List<int> weeklyHolidays = default(List<int>))
        {
            // to ensure "customHolidays" is required (not null)
            if (customHolidays == null)
            {
                throw new ArgumentNullException("customHolidays is a required property for CampaignSettingsScheduleDTO and cannot be null");
            }
            this.CustomHolidays = customHolidays;
            // to ensure "customWorkingDays" is required (not null)
            if (customWorkingDays == null)
            {
                throw new ArgumentNullException("customWorkingDays is a required property for CampaignSettingsScheduleDTO and cannot be null");
            }
            this.CustomWorkingDays = customWorkingDays;
            // to ensure "totalHolidays" is required (not null)
            if (totalHolidays == null)
            {
                throw new ArgumentNullException("totalHolidays is a required property for CampaignSettingsScheduleDTO and cannot be null");
            }
            this.TotalHolidays = totalHolidays;
            // to ensure "weeklyHolidays" is required (not null)
            if (weeklyHolidays == null)
            {
                throw new ArgumentNullException("weeklyHolidays is a required property for CampaignSettingsScheduleDTO and cannot be null");
            }
            this.WeeklyHolidays = weeklyHolidays;
            this.AvailableOnHolidays = availableOnHolidays;
            this.Period = period;
        }

        /// <summary>
        /// Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. 
        /// </summary>
        /// <value>Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. </value>
        [DataMember(Name = "availableOnHolidays", EmitDefaultValue = true)]
        public bool AvailableOnHolidays { get; set; }

        /// <summary>
        /// Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
        /// </summary>
        /// <value>Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.</value>
        [DataMember(Name = "customHolidays", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CustomHolidays { get; set; }

        /// <summary>
        /// Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
        /// </summary>
        /// <value>Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.</value>
        [DataMember(Name = "customWorkingDays", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CustomWorkingDays { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public CampaignSettingsTimePeriodDTO Period { get; set; }

        /// <summary>
        /// Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
        /// </summary>
        /// <value>Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.</value>
        [DataMember(Name = "totalHolidays", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TotalHolidays { get; set; }

        /// <summary>
        /// Список выходных дней недели и государственных праздников.
        /// </summary>
        /// <value>Список выходных дней недели и государственных праздников.</value>
        [DataMember(Name = "weeklyHolidays", IsRequired = true, EmitDefaultValue = true)]
        public List<int> WeeklyHolidays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignSettingsScheduleDTO {\n");
            sb.Append("  AvailableOnHolidays: ").Append(AvailableOnHolidays).Append("\n");
            sb.Append("  CustomHolidays: ").Append(CustomHolidays).Append("\n");
            sb.Append("  CustomWorkingDays: ").Append(CustomWorkingDays).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  TotalHolidays: ").Append(TotalHolidays).Append("\n");
            sb.Append("  WeeklyHolidays: ").Append(WeeklyHolidays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
