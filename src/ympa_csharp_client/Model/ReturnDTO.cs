/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Возврат заказа.
    /// </summary>
    [DataContract(Name = "ReturnDTO")]
    public partial class ReturnDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RefundStatus
        /// </summary>
        [DataMember(Name = "refundStatus", EmitDefaultValue = false)]
        public RefundStatusType? RefundStatus { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentRecipientType
        /// </summary>
        [DataMember(Name = "shipmentRecipientType", EmitDefaultValue = false)]
        public RecipientType? ShipmentRecipientType { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name = "shipmentStatus", EmitDefaultValue = false)]
        public ReturnShipmentStatusType? ShipmentStatus { get; set; }

        /// <summary>
        /// Gets or Sets ReturnType
        /// </summary>
        [DataMember(Name = "returnType", EmitDefaultValue = false)]
        public ReturnType? ReturnType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReturnDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор возврата..</param>
        /// <param name="orderId">Номер заказа..</param>
        /// <param name="creationDate">Дата создания возврата клиентом..</param>
        /// <param name="updateDate">Дата обновления возврата..</param>
        /// <param name="refundStatus">refundStatus.</param>
        /// <param name="logisticPickupPoint">logisticPickupPoint.</param>
        /// <param name="shipmentRecipientType">shipmentRecipientType.</param>
        /// <param name="shipmentStatus">shipmentStatus.</param>
        /// <param name="refundAmount">Сумма возврата..</param>
        /// <param name="items">Список товаров в возврате. (required).</param>
        /// <param name="returnType">returnType.</param>
        /// <param name="fastReturn">Используется ли опция **Быстрый возврат денег за дешевый брак**. .</param>
        public ReturnDTO(long id = default(long), long orderId = default(long), DateTime creationDate = default(DateTime), DateTime updateDate = default(DateTime), RefundStatusType? refundStatus = default(RefundStatusType?), LogisticPickupPointDTO logisticPickupPoint = default(LogisticPickupPointDTO), RecipientType? shipmentRecipientType = default(RecipientType?), ReturnShipmentStatusType? shipmentStatus = default(ReturnShipmentStatusType?), long refundAmount = default(long), List<ReturnItemDTO> items = default(List<ReturnItemDTO>), ReturnType? returnType = default(ReturnType?), bool fastReturn = default(bool))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for ReturnDTO and cannot be null");
            }
            this.Items = items;
            this.Id = id;
            this.OrderId = orderId;
            this.CreationDate = creationDate;
            this.UpdateDate = updateDate;
            this.RefundStatus = refundStatus;
            this.LogisticPickupPoint = logisticPickupPoint;
            this.ShipmentRecipientType = shipmentRecipientType;
            this.ShipmentStatus = shipmentStatus;
            this.RefundAmount = refundAmount;
            this.ReturnType = returnType;
            this.FastReturn = fastReturn;
        }

        /// <summary>
        /// Идентификатор возврата.
        /// </summary>
        /// <value>Идентификатор возврата.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Номер заказа.
        /// </summary>
        /// <value>Номер заказа.</value>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public long OrderId { get; set; }

        /// <summary>
        /// Дата создания возврата клиентом.
        /// </summary>
        /// <value>Дата создания возврата клиентом.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Дата обновления возврата.
        /// </summary>
        /// <value>Дата обновления возврата.</value>
        [DataMember(Name = "updateDate", EmitDefaultValue = false)]
        public DateTime UpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets LogisticPickupPoint
        /// </summary>
        [DataMember(Name = "logisticPickupPoint", EmitDefaultValue = false)]
        public LogisticPickupPointDTO LogisticPickupPoint { get; set; }

        /// <summary>
        /// Сумма возврата.
        /// </summary>
        /// <value>Сумма возврата.</value>
        [DataMember(Name = "refundAmount", EmitDefaultValue = false)]
        public long RefundAmount { get; set; }

        /// <summary>
        /// Список товаров в возврате.
        /// </summary>
        /// <value>Список товаров в возврате.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<ReturnItemDTO> Items { get; set; }

        /// <summary>
        /// Используется ли опция **Быстрый возврат денег за дешевый брак**. 
        /// </summary>
        /// <value>Используется ли опция **Быстрый возврат денег за дешевый брак**. </value>
        [DataMember(Name = "fastReturn", EmitDefaultValue = true)]
        public bool FastReturn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  RefundStatus: ").Append(RefundStatus).Append("\n");
            sb.Append("  LogisticPickupPoint: ").Append(LogisticPickupPoint).Append("\n");
            sb.Append("  ShipmentRecipientType: ").Append(ShipmentRecipientType).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ReturnType: ").Append(ReturnType).Append("\n");
            sb.Append("  FastReturn: ").Append(FastReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
