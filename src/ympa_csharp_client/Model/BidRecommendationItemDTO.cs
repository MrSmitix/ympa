/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Рекомендованная ставка и возможная доля показов.
    /// </summary>
    [DataContract(Name = "BidRecommendationItemDTO")]
    public partial class BidRecommendationItemDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BidRecommendationItemDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BidRecommendationItemDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BidRecommendationItemDTO" /> class.
        /// </summary>
        /// <param name="bid">Значение ставки. (required).</param>
        /// <param name="showPercent">Доля показов.  (required).</param>
        public BidRecommendationItemDTO(int bid = default(int), long showPercent = default(long))
        {
            this.Bid = bid;
            this.ShowPercent = showPercent;
        }

        /// <summary>
        /// Значение ставки.
        /// </summary>
        /// <value>Значение ставки.</value>
        /// <example>570</example>
        [DataMember(Name = "bid", IsRequired = true, EmitDefaultValue = true)]
        public int Bid { get; set; }

        /// <summary>
        /// Доля показов. 
        /// </summary>
        /// <value>Доля показов. </value>
        [DataMember(Name = "showPercent", IsRequired = true, EmitDefaultValue = true)]
        public long ShowPercent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BidRecommendationItemDTO {\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  ShowPercent: ").Append(ShowPercent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Bid (int) maximum
            if (this.Bid > (int)9999)
            {
                yield return new ValidationResult("Invalid value for Bid, must be a value less than or equal to 9999.", new [] { "Bid" });
            }

            // Bid (int) minimum
            if (this.Bid < (int)0)
            {
                yield return new ValidationResult("Invalid value for Bid, must be a value greater than or equal to 0.", new [] { "Bid" });
            }

            // ShowPercent (long) maximum
            if (this.ShowPercent > (long)100)
            {
                yield return new ValidationResult("Invalid value for ShowPercent, must be a value less than or equal to 100.", new [] { "ShowPercent" });
            }

            // ShowPercent (long) minimum
            if (this.ShowPercent < (long)0)
            {
                yield return new ValidationResult("Invalid value for ShowPercent, must be a value greater than or equal to 0.", new [] { "ShowPercent" });
            }

            yield break;
        }
    }

}
