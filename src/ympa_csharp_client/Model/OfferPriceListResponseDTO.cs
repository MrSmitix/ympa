/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список цен на товары.
    /// </summary>
    [DataContract(Name = "OfferPriceListResponseDTO")]
    public partial class OfferPriceListResponseDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferPriceListResponseDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferPriceListResponseDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferPriceListResponseDTO" /> class.
        /// </summary>
        /// <param name="offers">Страница списка. (required).</param>
        /// <param name="paging">paging.</param>
        /// <param name="total">Количество всех цен магазина, измененных через API..</param>
        public OfferPriceListResponseDTO(List<OfferPriceResponseDTO> offers = default(List<OfferPriceResponseDTO>), ScrollingPagerDTO paging = default(ScrollingPagerDTO), int total = default(int))
        {
            // to ensure "offers" is required (not null)
            if (offers == null)
            {
                throw new ArgumentNullException("offers is a required property for OfferPriceListResponseDTO and cannot be null");
            }
            this.Offers = offers;
            this.Paging = paging;
            this.Total = total;
        }

        /// <summary>
        /// Страница списка.
        /// </summary>
        /// <value>Страница списка.</value>
        [DataMember(Name = "offers", IsRequired = true, EmitDefaultValue = true)]
        public List<OfferPriceResponseDTO> Offers { get; set; }

        /// <summary>
        /// Gets or Sets Paging
        /// </summary>
        [DataMember(Name = "paging", EmitDefaultValue = false)]
        public ScrollingPagerDTO Paging { get; set; }

        /// <summary>
        /// Количество всех цен магазина, измененных через API.
        /// </summary>
        /// <value>Количество всех цен магазина, измененных через API.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferPriceListResponseDTO {\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  Paging: ").Append(Paging).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
