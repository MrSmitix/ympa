/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// ChangeOutletRequest
    /// </summary>
    [DataContract(Name = "ChangeOutletRequest")]
    public partial class ChangeOutletRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public OutletType Type { get; set; }

        /// <summary>
        /// Gets or Sets Visibility
        /// </summary>
        [DataMember(Name = "visibility", EmitDefaultValue = false)]
        public OutletVisibilityType? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOutletRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeOutletRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOutletRequest" /> class.
        /// </summary>
        /// <param name="name">Название точки продаж.  (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="coords">Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. .</param>
        /// <param name="isMain">Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. .</param>
        /// <param name="shopOutletCode">Идентификатор точки продаж, присвоенный магазином..</param>
        /// <param name="visibility">visibility.</param>
        /// <param name="address">address (required).</param>
        /// <param name="phones">Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;.  (required).</param>
        /// <param name="workingSchedule">workingSchedule (required).</param>
        /// <param name="deliveryRules">Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. .</param>
        /// <param name="storagePeriod">Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях..</param>
        public ChangeOutletRequest(string name = default(string), OutletType type = default(OutletType), string coords = default(string), bool isMain = default(bool), string shopOutletCode = default(string), OutletVisibilityType? visibility = default(OutletVisibilityType?), OutletAddressDTO address = default(OutletAddressDTO), List<string> phones = default(List<string>), OutletWorkingScheduleDTO workingSchedule = default(OutletWorkingScheduleDTO), List<OutletDeliveryRuleDTO> deliveryRules = default(List<OutletDeliveryRuleDTO>), long storagePeriod = default(long))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ChangeOutletRequest and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for ChangeOutletRequest and cannot be null");
            }
            this.Address = address;
            // to ensure "phones" is required (not null)
            if (phones == null)
            {
                throw new ArgumentNullException("phones is a required property for ChangeOutletRequest and cannot be null");
            }
            this.Phones = phones;
            // to ensure "workingSchedule" is required (not null)
            if (workingSchedule == null)
            {
                throw new ArgumentNullException("workingSchedule is a required property for ChangeOutletRequest and cannot be null");
            }
            this.WorkingSchedule = workingSchedule;
            this.Coords = coords;
            this.IsMain = isMain;
            this.ShopOutletCode = shopOutletCode;
            this.Visibility = visibility;
            this.DeliveryRules = deliveryRules;
            this.StoragePeriod = storagePeriod;
        }

        /// <summary>
        /// Название точки продаж. 
        /// </summary>
        /// <value>Название точки продаж. </value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
        /// </summary>
        /// <value>Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. </value>
        [DataMember(Name = "coords", EmitDefaultValue = false)]
        public string Coords { get; set; }

        /// <summary>
        /// Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
        /// </summary>
        /// <value>Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. </value>
        [DataMember(Name = "isMain", EmitDefaultValue = true)]
        public bool IsMain { get; set; }

        /// <summary>
        /// Идентификатор точки продаж, присвоенный магазином.
        /// </summary>
        /// <value>Идентификатор точки продаж, присвоенный магазином.</value>
        [DataMember(Name = "shopOutletCode", EmitDefaultValue = false)]
        public string ShopOutletCode { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public OutletAddressDTO Address { get; set; }

        /// <summary>
        /// Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
        /// </summary>
        /// <value>Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. </value>
        [DataMember(Name = "phones", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Phones { get; set; }

        /// <summary>
        /// Gets or Sets WorkingSchedule
        /// </summary>
        [DataMember(Name = "workingSchedule", IsRequired = true, EmitDefaultValue = true)]
        public OutletWorkingScheduleDTO WorkingSchedule { get; set; }

        /// <summary>
        /// Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
        /// </summary>
        /// <value>Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. </value>
        [DataMember(Name = "deliveryRules", EmitDefaultValue = true)]
        public List<OutletDeliveryRuleDTO> DeliveryRules { get; set; }

        /// <summary>
        /// Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
        /// </summary>
        /// <value>Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.</value>
        [DataMember(Name = "storagePeriod", EmitDefaultValue = false)]
        public long StoragePeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeOutletRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Coords: ").Append(Coords).Append("\n");
            sb.Append("  IsMain: ").Append(IsMain).Append("\n");
            sb.Append("  ShopOutletCode: ").Append(ShopOutletCode).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  WorkingSchedule: ").Append(WorkingSchedule).Append("\n");
            sb.Append("  DeliveryRules: ").Append(DeliveryRules).Append("\n");
            sb.Append("  StoragePeriod: ").Append(StoragePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
