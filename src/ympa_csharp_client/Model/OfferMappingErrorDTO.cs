/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Текст ошибки.
    /// </summary>
    [DataContract(Name = "OfferMappingErrorDTO")]
    public partial class OfferMappingErrorDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public OfferMappingErrorType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferMappingErrorDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferMappingErrorDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferMappingErrorDTO" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="parameterId">Идентификатор характеристики, с которой связана ошибка..</param>
        /// <param name="message">Текст ошибки. (required).</param>
        public OfferMappingErrorDTO(OfferMappingErrorType type = default(OfferMappingErrorType), long parameterId = default(long), string message = default(string))
        {
            this.Type = type;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for OfferMappingErrorDTO and cannot be null");
            }
            this.Message = message;
            this.ParameterId = parameterId;
        }

        /// <summary>
        /// Идентификатор характеристики, с которой связана ошибка.
        /// </summary>
        /// <value>Идентификатор характеристики, с которой связана ошибка.</value>
        [DataMember(Name = "parameterId", EmitDefaultValue = false)]
        public long ParameterId { get; set; }

        /// <summary>
        /// Текст ошибки.
        /// </summary>
        /// <value>Текст ошибки.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferMappingErrorDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ParameterId: ").Append(ParameterId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
