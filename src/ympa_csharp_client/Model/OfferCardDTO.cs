/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
    /// </summary>
    [DataContract(Name = "OfferCardDTO")]
    public partial class OfferCardDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CardStatus
        /// </summary>
        [DataMember(Name = "cardStatus", EmitDefaultValue = false)]
        public OfferCardStatusType? CardStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferCardDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferCardDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferCardDTO" /> class.
        /// </summary>
        /// <param name="offerId">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  (required).</param>
        /// <param name="mapping">mapping.</param>
        /// <param name="parameterValues">Список характеристик с их значениями. .</param>
        /// <param name="cardStatus">cardStatus.</param>
        /// <param name="contentRating">Процент заполненности карточки..</param>
        /// <param name="recommendations">Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. .</param>
        /// <param name="errors">Ошибки в контенте, препятствующие размещению товара на витрине..</param>
        /// <param name="warnings">Связанные с контентом предупреждения, не препятствующие размещению товара на витрине..</param>
        public OfferCardDTO(string offerId = default(string), GetMappingDTO mapping = default(GetMappingDTO), List<ParameterValueDTO> parameterValues = default(List<ParameterValueDTO>), OfferCardStatusType? cardStatus = default(OfferCardStatusType?), int contentRating = default(int), List<OfferCardRecommendationDTO> recommendations = default(List<OfferCardRecommendationDTO>), List<OfferErrorDTO> errors = default(List<OfferErrorDTO>), List<OfferErrorDTO> warnings = default(List<OfferErrorDTO>))
        {
            // to ensure "offerId" is required (not null)
            if (offerId == null)
            {
                throw new ArgumentNullException("offerId is a required property for OfferCardDTO and cannot be null");
            }
            this.OfferId = offerId;
            this.Mapping = mapping;
            this.ParameterValues = parameterValues;
            this.CardStatus = cardStatus;
            this.ContentRating = contentRating;
            this.Recommendations = recommendations;
            this.Errors = errors;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "offerId", IsRequired = true, EmitDefaultValue = true)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets Mapping
        /// </summary>
        [DataMember(Name = "mapping", EmitDefaultValue = false)]
        public GetMappingDTO Mapping { get; set; }

        /// <summary>
        /// Список характеристик с их значениями. 
        /// </summary>
        /// <value>Список характеристик с их значениями. </value>
        [DataMember(Name = "parameterValues", EmitDefaultValue = true)]
        public List<ParameterValueDTO> ParameterValues { get; set; }

        /// <summary>
        /// Процент заполненности карточки.
        /// </summary>
        /// <value>Процент заполненности карточки.</value>
        [DataMember(Name = "contentRating", EmitDefaultValue = false)]
        public int ContentRating { get; set; }

        /// <summary>
        /// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
        /// </summary>
        /// <value>Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. </value>
        [DataMember(Name = "recommendations", EmitDefaultValue = true)]
        public List<OfferCardRecommendationDTO> Recommendations { get; set; }

        /// <summary>
        /// Ошибки в контенте, препятствующие размещению товара на витрине.
        /// </summary>
        /// <value>Ошибки в контенте, препятствующие размещению товара на витрине.</value>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<OfferErrorDTO> Errors { get; set; }

        /// <summary>
        /// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
        /// </summary>
        /// <value>Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = true)]
        public List<OfferErrorDTO> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferCardDTO {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  CardStatus: ").Append(CardStatus).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OfferId (string) maxLength
            if (this.OfferId != null && this.OfferId.Length > 255)
            {
                yield return new ValidationResult("Invalid value for OfferId, length must be less than 255.", new [] { "OfferId" });
            }

            // OfferId (string) minLength
            if (this.OfferId != null && this.OfferId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OfferId, length must be greater than 1.", new [] { "OfferId" });
            }

            if (this.OfferId != null) {
                // OfferId (string) pattern
                Regex regexOfferId = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexOfferId.Match(this.OfferId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfferId, must match a pattern of " + regexOfferId, new [] { "OfferId" });
                }
            }

            yield break;
        }
    }

}
