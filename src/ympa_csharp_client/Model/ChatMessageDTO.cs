/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о сообщениях.
    /// </summary>
    [DataContract(Name = "ChatMessageDTO")]
    public partial class ChatMessageDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name = "sender", IsRequired = true, EmitDefaultValue = true)]
        public ChatMessageSenderType Sender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessageDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChatMessageDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatMessageDTO" /> class.
        /// </summary>
        /// <param name="messageId">Идентификатор сообщения. (required).</param>
        /// <param name="createdAt">Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.  (required).</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="message">Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. .</param>
        /// <param name="payload">Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. .</param>
        public ChatMessageDTO(long messageId = default(long), DateTime createdAt = default(DateTime), ChatMessageSenderType sender = default(ChatMessageSenderType), string message = default(string), List<ChatMessagePayloadDTO> payload = default(List<ChatMessagePayloadDTO>))
        {
            this.MessageId = messageId;
            this.CreatedAt = createdAt;
            this.Sender = sender;
            this.Message = message;
            this.Payload = payload;
        }

        /// <summary>
        /// Идентификатор сообщения.
        /// </summary>
        /// <value>Идентификатор сообщения.</value>
        [DataMember(Name = "messageId", IsRequired = true, EmitDefaultValue = true)]
        public long MessageId { get; set; }

        /// <summary>
        /// Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. </value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
        /// </summary>
        /// <value>Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. </value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
        /// </summary>
        /// <value>Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. </value>
        [DataMember(Name = "payload", EmitDefaultValue = true)]
        public List<ChatMessagePayloadDTO> Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatMessageDTO {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
