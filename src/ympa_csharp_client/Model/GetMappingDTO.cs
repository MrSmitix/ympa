/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о товарах в каталоге. 
    /// </summary>
    [DataContract(Name = "GetMappingDTO")]
    public partial class GetMappingDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMappingDTO" /> class.
        /// </summary>
        /// <param name="marketSku">SKU на Маркете..</param>
        /// <param name="marketSkuName">Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. .</param>
        /// <param name="marketModelId">Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. .</param>
        /// <param name="marketModelName">Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. .</param>
        /// <param name="marketCategoryId">Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. .</param>
        /// <param name="marketCategoryName">Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. .</param>
        public GetMappingDTO(long marketSku = default(long), string marketSkuName = default(string), long marketModelId = default(long), string marketModelName = default(string), long marketCategoryId = default(long), string marketCategoryName = default(string))
        {
            this.MarketSku = marketSku;
            this.MarketSkuName = marketSkuName;
            this.MarketModelId = marketModelId;
            this.MarketModelName = marketModelName;
            this.MarketCategoryId = marketCategoryId;
            this.MarketCategoryName = marketCategoryName;
        }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name = "marketSku", EmitDefaultValue = false)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name = "marketSkuName", EmitDefaultValue = false)]
        public string MarketSkuName { get; set; }

        /// <summary>
        /// Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name = "marketModelId", EmitDefaultValue = false)]
        public long MarketModelId { get; set; }

        /// <summary>
        /// Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name = "marketModelName", EmitDefaultValue = false)]
        public string MarketModelName { get; set; }

        /// <summary>
        /// Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
        /// </summary>
        /// <value>Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. </value>
        [DataMember(Name = "marketCategoryId", EmitDefaultValue = false)]
        public long MarketCategoryId { get; set; }

        /// <summary>
        /// Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
        /// </summary>
        /// <value>Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. </value>
        [DataMember(Name = "marketCategoryName", EmitDefaultValue = false)]
        public string MarketCategoryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMappingDTO {\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  MarketSkuName: ").Append(MarketSkuName).Append("\n");
            sb.Append("  MarketModelId: ").Append(MarketModelId).Append("\n");
            sb.Append("  MarketModelName: ").Append(MarketModelName).Append("\n");
            sb.Append("  MarketCategoryId: ").Append(MarketCategoryId).Append("\n");
            sb.Append("  MarketCategoryName: ").Append(MarketCategoryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
