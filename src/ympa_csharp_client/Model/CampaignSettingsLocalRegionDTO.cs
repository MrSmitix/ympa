/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о своем регионе магазина.
    /// </summary>
    [DataContract(Name = "CampaignSettingsLocalRegionDTO")]
    public partial class CampaignSettingsLocalRegionDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public RegionType? Type { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryOptionsSource
        /// </summary>
        [DataMember(Name = "deliveryOptionsSource", EmitDefaultValue = false)]
        public CampaignSettingsScheduleSourceType? DeliveryOptionsSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignSettingsLocalRegionDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор региона..</param>
        /// <param name="name">Название региона..</param>
        /// <param name="type">type.</param>
        /// <param name="deliveryOptionsSource">deliveryOptionsSource.</param>
        /// <param name="delivery">delivery.</param>
        public CampaignSettingsLocalRegionDTO(long id = default(long), string name = default(string), RegionType? type = default(RegionType?), CampaignSettingsScheduleSourceType? deliveryOptionsSource = default(CampaignSettingsScheduleSourceType?), CampaignSettingsDeliveryDTO delivery = default(CampaignSettingsDeliveryDTO))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.DeliveryOptionsSource = deliveryOptionsSource;
            this.Delivery = delivery;
        }

        /// <summary>
        /// Идентификатор региона.
        /// </summary>
        /// <value>Идентификатор региона.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Название региона.
        /// </summary>
        /// <value>Название региона.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name = "delivery", EmitDefaultValue = false)]
        public CampaignSettingsDeliveryDTO Delivery { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignSettingsLocalRegionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DeliveryOptionsSource: ").Append(DeliveryOptionsSource).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
