/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Статистическая информация по отзыву.
    /// </summary>
    [DataContract(Name = "GoodsFeedbackStatisticsDTO")]
    public partial class GoodsFeedbackStatisticsDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsFeedbackStatisticsDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GoodsFeedbackStatisticsDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsFeedbackStatisticsDTO" /> class.
        /// </summary>
        /// <param name="rating">Оценка товара. (required).</param>
        /// <param name="commentsCount">Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии.  (required).</param>
        /// <param name="recommended">Рекомендуют ли этот товар..</param>
        /// <param name="paidAmount">Количество баллов Плюса, которое автор получил за отзыв..</param>
        public GoodsFeedbackStatisticsDTO(int rating = default(int), long commentsCount = default(long), bool recommended = default(bool), long paidAmount = default(long))
        {
            this.Rating = rating;
            this.CommentsCount = commentsCount;
            this.Recommended = recommended;
            this.PaidAmount = paidAmount;
        }

        /// <summary>
        /// Оценка товара.
        /// </summary>
        /// <value>Оценка товара.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public int Rating { get; set; }

        /// <summary>
        /// Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. 
        /// </summary>
        /// <value>Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. </value>
        [DataMember(Name = "commentsCount", IsRequired = true, EmitDefaultValue = true)]
        public long CommentsCount { get; set; }

        /// <summary>
        /// Рекомендуют ли этот товар.
        /// </summary>
        /// <value>Рекомендуют ли этот товар.</value>
        [DataMember(Name = "recommended", EmitDefaultValue = true)]
        public bool Recommended { get; set; }

        /// <summary>
        /// Количество баллов Плюса, которое автор получил за отзыв.
        /// </summary>
        /// <value>Количество баллов Плюса, которое автор получил за отзыв.</value>
        [DataMember(Name = "paidAmount", EmitDefaultValue = false)]
        public long PaidAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoodsFeedbackStatisticsDTO {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  Recommended: ").Append(Recommended).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Rating (int) maximum
            if (this.Rating > (int)5)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value less than or equal to 5.", new [] { "Rating" });
            }

            // Rating (int) minimum
            if (this.Rating < (int)1)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value greater than or equal to 1.", new [] { "Rating" });
            }

            yield break;
        }
    }

}
