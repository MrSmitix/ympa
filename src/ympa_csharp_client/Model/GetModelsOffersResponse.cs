/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Ответ на запрос списка предложений для моделей.
    /// </summary>
    [DataContract(Name = "GetModelsOffersResponse")]
    public partial class GetModelsOffersResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyType? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetModelsOffersResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetModelsOffersResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetModelsOffersResponse" /> class.
        /// </summary>
        /// <param name="models">Список моделей товаров. (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="regionId">Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). .</param>
        public GetModelsOffersResponse(List<EnrichedModelDTO> models = default(List<EnrichedModelDTO>), CurrencyType? currency = default(CurrencyType?), long regionId = default(long))
        {
            // to ensure "models" is required (not null)
            if (models == null)
            {
                throw new ArgumentNullException("models is a required property for GetModelsOffersResponse and cannot be null");
            }
            this.Models = models;
            this.Currency = currency;
            this.RegionId = regionId;
        }

        /// <summary>
        /// Список моделей товаров.
        /// </summary>
        /// <value>Список моделей товаров.</value>
        [DataMember(Name = "models", IsRequired = true, EmitDefaultValue = true)]
        public List<EnrichedModelDTO> Models { get; set; }

        /// <summary>
        /// Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
        /// </summary>
        /// <value>Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). </value>
        [DataMember(Name = "regionId", EmitDefaultValue = false)]
        public long RegionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetModelsOffersResponse {\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
