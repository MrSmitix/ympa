/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
    /// </summary>
    [DataContract(Name = "ValueRestrictionDTO")]
    public partial class ValueRestrictionDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueRestrictionDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValueRestrictionDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueRestrictionDTO" /> class.
        /// </summary>
        /// <param name="limitingParameterId">Идентификатор ограничивающей характеристики. (required).</param>
        /// <param name="limitedValues">Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики. (required).</param>
        public ValueRestrictionDTO(long limitingParameterId = default(long), List<OptionValuesLimitedDTO> limitedValues = default(List<OptionValuesLimitedDTO>))
        {
            this.LimitingParameterId = limitingParameterId;
            // to ensure "limitedValues" is required (not null)
            if (limitedValues == null)
            {
                throw new ArgumentNullException("limitedValues is a required property for ValueRestrictionDTO and cannot be null");
            }
            this.LimitedValues = limitedValues;
        }

        /// <summary>
        /// Идентификатор ограничивающей характеристики.
        /// </summary>
        /// <value>Идентификатор ограничивающей характеристики.</value>
        [DataMember(Name = "limitingParameterId", IsRequired = true, EmitDefaultValue = true)]
        public long LimitingParameterId { get; set; }

        /// <summary>
        /// Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
        /// </summary>
        /// <value>Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.</value>
        [DataMember(Name = "limitedValues", IsRequired = true, EmitDefaultValue = true)]
        public List<OptionValuesLimitedDTO> LimitedValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValueRestrictionDTO {\n");
            sb.Append("  LimitingParameterId: ").Append(LimitingParameterId).Append("\n");
            sb.Append("  LimitedValues: ").Append(LimitedValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
