/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Фильтр запроса отзывов в кабинете. 
    /// </summary>
    [DataContract(Name = "GetGoodsFeedbackRequest")]
    public partial class GetGoodsFeedbackRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReactionStatus
        /// </summary>
        [DataMember(Name = "reactionStatus", EmitDefaultValue = false)]
        public FeedbackReactionStatusType? ReactionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGoodsFeedbackRequest" /> class.
        /// </summary>
        /// <param name="dateTimeFrom">Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. .</param>
        /// <param name="dateTimeTo">Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. .</param>
        /// <param name="reactionStatus">reactionStatus.</param>
        /// <param name="ratingValues">Оценка товара..</param>
        /// <param name="modelIds">Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). .</param>
        /// <param name="paid">Фильтр отзывов за баллы Плюса..</param>
        public GetGoodsFeedbackRequest(DateTime dateTimeFrom = default(DateTime), DateTime dateTimeTo = default(DateTime), FeedbackReactionStatusType? reactionStatus = default(FeedbackReactionStatusType?), List<int> ratingValues = default(List<int>), List<long> modelIds = default(List<long>), bool paid = default(bool))
        {
            this.DateTimeFrom = dateTimeFrom;
            this.DateTimeTo = dateTimeTo;
            this.ReactionStatus = reactionStatus;
            this.RatingValues = ratingValues;
            this.ModelIds = modelIds;
            this.Paid = paid;
        }

        /// <summary>
        /// Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
        /// </summary>
        /// <value>Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. </value>
        [DataMember(Name = "dateTimeFrom", EmitDefaultValue = false)]
        public DateTime DateTimeFrom { get; set; }

        /// <summary>
        /// Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
        /// </summary>
        /// <value>Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. </value>
        [DataMember(Name = "dateTimeTo", EmitDefaultValue = false)]
        public DateTime DateTimeTo { get; set; }

        /// <summary>
        /// Оценка товара.
        /// </summary>
        /// <value>Оценка товара.</value>
        [DataMember(Name = "ratingValues", EmitDefaultValue = true)]
        public List<int> RatingValues { get; set; }

        /// <summary>
        /// Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
        /// </summary>
        /// <value>Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). </value>
        [DataMember(Name = "modelIds", EmitDefaultValue = true)]
        public List<long> ModelIds { get; set; }

        /// <summary>
        /// Фильтр отзывов за баллы Плюса.
        /// </summary>
        /// <value>Фильтр отзывов за баллы Плюса.</value>
        [DataMember(Name = "paid", EmitDefaultValue = true)]
        public bool Paid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGoodsFeedbackRequest {\n");
            sb.Append("  DateTimeFrom: ").Append(DateTimeFrom).Append("\n");
            sb.Append("  DateTimeTo: ").Append(DateTimeTo).Append("\n");
            sb.Append("  ReactionStatus: ").Append(ReactionStatus).Append("\n");
            sb.Append("  RatingValues: ").Append(RatingValues).Append("\n");
            sb.Append("  ModelIds: ").Append(ModelIds).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
