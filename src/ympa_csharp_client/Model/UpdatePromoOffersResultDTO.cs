/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
    /// </summary>
    [DataContract(Name = "UpdatePromoOffersResultDTO")]
    public partial class UpdatePromoOffersResultDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePromoOffersResultDTO" /> class.
        /// </summary>
        /// <param name="rejectedOffers">Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. .</param>
        /// <param name="warningOffers">Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. .</param>
        public UpdatePromoOffersResultDTO(List<RejectedPromoOfferUpdateDTO> rejectedOffers = default(List<RejectedPromoOfferUpdateDTO>), List<WarningPromoOfferUpdateDTO> warningOffers = default(List<WarningPromoOfferUpdateDTO>))
        {
            this.RejectedOffers = rejectedOffers;
            this.WarningOffers = warningOffers;
        }

        /// <summary>
        /// Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
        /// </summary>
        /// <value>Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. </value>
        [DataMember(Name = "rejectedOffers", EmitDefaultValue = true)]
        public List<RejectedPromoOfferUpdateDTO> RejectedOffers { get; set; }

        /// <summary>
        /// Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
        /// </summary>
        /// <value>Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. </value>
        [DataMember(Name = "warningOffers", EmitDefaultValue = true)]
        public List<WarningPromoOfferUpdateDTO> WarningOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePromoOffersResultDTO {\n");
            sb.Append("  RejectedOffers: ").Append(RejectedOffers).Append("\n");
            sb.Append("  WarningOffers: ").Append(WarningOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
