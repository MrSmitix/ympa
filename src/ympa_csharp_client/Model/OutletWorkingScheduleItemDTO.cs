/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Расписание работы точки продаж.
    /// </summary>
    [DataContract(Name = "OutletWorkingScheduleItemDTO")]
    public partial class OutletWorkingScheduleItemDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StartDay
        /// </summary>
        [DataMember(Name = "startDay", IsRequired = true, EmitDefaultValue = true)]
        public DayOfWeekType StartDay { get; set; }

        /// <summary>
        /// Gets or Sets EndDay
        /// </summary>
        [DataMember(Name = "endDay", IsRequired = true, EmitDefaultValue = true)]
        public DayOfWeekType EndDay { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutletWorkingScheduleItemDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutletWorkingScheduleItemDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutletWorkingScheduleItemDTO" /> class.
        /// </summary>
        /// <param name="startDay">startDay (required).</param>
        /// <param name="endDay">endDay (required).</param>
        /// <param name="startTime">Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;.  (required).</param>
        /// <param name="endTime">Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;.  (required).</param>
        public OutletWorkingScheduleItemDTO(DayOfWeekType startDay = default(DayOfWeekType), DayOfWeekType endDay = default(DayOfWeekType), string startTime = default(string), string endTime = default(string))
        {
            this.StartDay = startDay;
            this.EndDay = endDay;
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new ArgumentNullException("startTime is a required property for OutletWorkingScheduleItemDTO and cannot be null");
            }
            this.StartTime = startTime;
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new ArgumentNullException("endTime is a required property for OutletWorkingScheduleItemDTO and cannot be null");
            }
            this.EndTime = endTime;
        }

        /// <summary>
        /// Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
        /// </summary>
        /// <value>Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. </value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
        /// </summary>
        /// <value>Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. </value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutletWorkingScheduleItemDTO {\n");
            sb.Append("  StartDay: ").Append(StartDay).Append("\n");
            sb.Append("  EndDay: ").Append(EndDay).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartTime (string) minLength
            if (this.StartTime != null && this.StartTime.Length < 1)
            {
                yield return new ValidationResult("Invalid value for StartTime, length must be greater than 1.", new [] { "StartTime" });
            }

            // EndTime (string) minLength
            if (this.EndTime != null && this.EndTime.Length < 1)
            {
                yield return new ValidationResult("Invalid value for EndTime, length must be greater than 1.", new [] { "EndTime" });
            }

            yield break;
        }
    }

}
