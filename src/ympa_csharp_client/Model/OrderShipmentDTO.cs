/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список посылок.  В параметре может указываться несколько посылок. 
    /// </summary>
    [DataContract(Name = "OrderShipmentDTO")]
    public partial class OrderShipmentDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderShipmentDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор посылки, присвоенный Маркетом..</param>
        /// <param name="shipmentDate">Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. .</param>
        /// <param name="shipmentTime">**Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. .</param>
        /// <param name="tracks">**Только для модели DBS**  Информация для отслеживания перемещений посылки. .</param>
        /// <param name="boxes">Список грузовых мест..</param>
        public OrderShipmentDTO(long id = default(long), string shipmentDate = default(string), string shipmentTime = default(string), List<OrderTrackDTO> tracks = default(List<OrderTrackDTO>), List<OrderParcelBoxDTO> boxes = default(List<OrderParcelBoxDTO>))
        {
            this.Id = id;
            this.ShipmentDate = shipmentDate;
            this.ShipmentTime = shipmentTime;
            this.Tracks = tracks;
            this.Boxes = boxes;
        }

        /// <summary>
        /// Идентификатор посылки, присвоенный Маркетом.
        /// </summary>
        /// <value>Идентификатор посылки, присвоенный Маркетом.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        /// <example>23-09-2022</example>
        [DataMember(Name = "shipmentDate", EmitDefaultValue = false)]
        public string ShipmentDate { get; set; }

        /// <summary>
        /// **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
        /// </summary>
        /// <value>**Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. </value>
        [DataMember(Name = "shipmentTime", EmitDefaultValue = false)]
        public string ShipmentTime { get; set; }

        /// <summary>
        /// **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
        /// </summary>
        /// <value>**Только для модели DBS**  Информация для отслеживания перемещений посылки. </value>
        [DataMember(Name = "tracks", EmitDefaultValue = true)]
        public List<OrderTrackDTO> Tracks { get; set; }

        /// <summary>
        /// Список грузовых мест.
        /// </summary>
        /// <value>Список грузовых мест.</value>
        [DataMember(Name = "boxes", EmitDefaultValue = true)]
        public List<OrderParcelBoxDTO> Boxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderShipmentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShipmentDate: ").Append(ShipmentDate).Append("\n");
            sb.Append("  ShipmentTime: ").Append(ShipmentTime).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
