/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о курьере.
    /// </summary>
    [DataContract(Name = "OrderCourierDTO")]
    public partial class OrderCourierDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCourierDTO" /> class.
        /// </summary>
        /// <param name="fullName">Полное имя курьера..</param>
        /// <param name="phone">Номер телефона курьера..</param>
        /// <param name="phoneExtension">Добавочный номер телефона..</param>
        /// <param name="vehicleNumber">Номер транспортного средства..</param>
        /// <param name="vehicleDescription">Описание машины. Например, модель и цвет..</param>
        public OrderCourierDTO(string fullName = default(string), string phone = default(string), string phoneExtension = default(string), string vehicleNumber = default(string), string vehicleDescription = default(string))
        {
            this.FullName = fullName;
            this.Phone = phone;
            this.PhoneExtension = phoneExtension;
            this.VehicleNumber = vehicleNumber;
            this.VehicleDescription = vehicleDescription;
        }

        /// <summary>
        /// Полное имя курьера.
        /// </summary>
        /// <value>Полное имя курьера.</value>
        [DataMember(Name = "fullName", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Номер телефона курьера.
        /// </summary>
        /// <value>Номер телефона курьера.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Добавочный номер телефона.
        /// </summary>
        /// <value>Добавочный номер телефона.</value>
        [DataMember(Name = "phoneExtension", EmitDefaultValue = false)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Номер транспортного средства.
        /// </summary>
        /// <value>Номер транспортного средства.</value>
        [DataMember(Name = "vehicleNumber", EmitDefaultValue = false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Описание машины. Например, модель и цвет.
        /// </summary>
        /// <value>Описание машины. Например, модель и цвет.</value>
        [DataMember(Name = "vehicleDescription", EmitDefaultValue = false)]
        public string VehicleDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderCourierDTO {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneExtension: ").Append(PhoneExtension).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  VehicleDescription: ").Append(VehicleDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
