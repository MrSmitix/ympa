/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о денежных переводах по заказу.
    /// </summary>
    [DataContract(Name = "OrdersStatsPaymentDTO")]
    public partial class OrdersStatsPaymentDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public OrdersStatsPaymentType? Type { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public OrdersStatsPaymentSourceType? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersStatsPaymentDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор денежного перевода..</param>
        /// <param name="date">Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. .</param>
        /// <param name="type">type.</param>
        /// <param name="source">source.</param>
        /// <param name="total">Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. .</param>
        /// <param name="paymentOrder">paymentOrder.</param>
        public OrdersStatsPaymentDTO(string id = default(string), DateOnly date = default(DateOnly), OrdersStatsPaymentType? type = default(OrdersStatsPaymentType?), OrdersStatsPaymentSourceType? source = default(OrdersStatsPaymentSourceType?), decimal total = default(decimal), OrdersStatsPaymentOrderDTO paymentOrder = default(OrdersStatsPaymentOrderDTO))
        {
            this.Id = id;
            this.Date = date;
            this.Type = type;
            this.Source = source;
            this.Total = total;
            this.PaymentOrder = paymentOrder;
        }

        /// <summary>
        /// Идентификатор денежного перевода.
        /// </summary>
        /// <value>Идентификатор денежного перевода.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
        /// </summary>
        /// <value>Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateOnly Date { get; set; }

        /// <summary>
        /// Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
        /// </summary>
        /// <value>Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. </value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Gets or Sets PaymentOrder
        /// </summary>
        [DataMember(Name = "paymentOrder", EmitDefaultValue = false)]
        public OrdersStatsPaymentOrderDTO PaymentOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrdersStatsPaymentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  PaymentOrder: ").Append(PaymentOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
