/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список отчетов по индексации прайс-листа.
    /// </summary>
    [DataContract(Name = "FeedIndexLogsRecordDTO")]
    public partial class FeedIndexLogsRecordDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets IndexType
        /// </summary>
        [DataMember(Name = "indexType", EmitDefaultValue = false)]
        public FeedIndexLogsIndexType? IndexType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public FeedIndexLogsStatusType? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedIndexLogsRecordDTO" /> class.
        /// </summary>
        /// <param name="downloadTime">Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. .</param>
        /// <param name="fileTime">Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. .</param>
        /// <param name="generationId">Идентификатор индексации..</param>
        /// <param name="indexType">indexType.</param>
        /// <param name="publishedTime">Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. .</param>
        /// <param name="status">status.</param>
        /// <param name="error">error.</param>
        /// <param name="offers">offers.</param>
        public FeedIndexLogsRecordDTO(DateTime downloadTime = default(DateTime), DateTime fileTime = default(DateTime), long generationId = default(long), FeedIndexLogsIndexType? indexType = default(FeedIndexLogsIndexType?), DateTime publishedTime = default(DateTime), FeedIndexLogsStatusType? status = default(FeedIndexLogsStatusType?), FeedIndexLogsErrorDTO error = default(FeedIndexLogsErrorDTO), FeedIndexLogsOffersDTO offers = default(FeedIndexLogsOffersDTO))
        {
            this.DownloadTime = downloadTime;
            this.FileTime = fileTime;
            this.GenerationId = generationId;
            this.IndexType = indexType;
            this.PublishedTime = publishedTime;
            this.Status = status;
            this.Error = error;
            this.Offers = offers;
        }

        /// <summary>
        /// Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name = "downloadTime", EmitDefaultValue = false)]
        public DateTime DownloadTime { get; set; }

        /// <summary>
        /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name = "fileTime", EmitDefaultValue = false)]
        public DateTime FileTime { get; set; }

        /// <summary>
        /// Идентификатор индексации.
        /// </summary>
        /// <value>Идентификатор индексации.</value>
        [DataMember(Name = "generationId", EmitDefaultValue = false)]
        public long GenerationId { get; set; }

        /// <summary>
        /// Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name = "publishedTime", EmitDefaultValue = false)]
        public DateTime PublishedTime { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public FeedIndexLogsErrorDTO Error { get; set; }

        /// <summary>
        /// Gets or Sets Offers
        /// </summary>
        [DataMember(Name = "offers", EmitDefaultValue = false)]
        public FeedIndexLogsOffersDTO Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedIndexLogsRecordDTO {\n");
            sb.Append("  DownloadTime: ").Append(DownloadTime).Append("\n");
            sb.Append("  FileTime: ").Append(FileTime).Append("\n");
            sb.Append("  GenerationId: ").Append(GenerationId).Append("\n");
            sb.Append("  IndexType: ").Append(IndexType).Append("\n");
            sb.Append("  PublishedTime: ").Append(PublishedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
