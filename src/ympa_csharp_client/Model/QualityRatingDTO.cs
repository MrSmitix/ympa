/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация об индексе качества.
    /// </summary>
    [DataContract(Name = "QualityRatingDTO")]
    public partial class QualityRatingDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityRatingDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QualityRatingDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityRatingDTO" /> class.
        /// </summary>
        /// <param name="rating">Значение индекса качества. (required).</param>
        /// <param name="calculationDate">Дата вычисления.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  (required).</param>
        /// <param name="components">Составляющие индекса качества. (required).</param>
        public QualityRatingDTO(long rating = default(long), DateOnly calculationDate = default(DateOnly), List<QualityRatingComponentDTO> components = default(List<QualityRatingComponentDTO>))
        {
            this.Rating = rating;
            // to ensure "calculationDate" is required (not null)
            if (calculationDate == null)
            {
                throw new ArgumentNullException("calculationDate is a required property for QualityRatingDTO and cannot be null");
            }
            this.CalculationDate = calculationDate;
            // to ensure "components" is required (not null)
            if (components == null)
            {
                throw new ArgumentNullException("components is a required property for QualityRatingDTO and cannot be null");
            }
            this.Components = components;
        }

        /// <summary>
        /// Значение индекса качества.
        /// </summary>
        /// <value>Значение индекса качества.</value>
        [DataMember(Name = "rating", IsRequired = true, EmitDefaultValue = true)]
        public long Rating { get; set; }

        /// <summary>
        /// Дата вычисления.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;. 
        /// </summary>
        /// <value>Дата вычисления.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;. </value>
        [DataMember(Name = "calculationDate", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly CalculationDate { get; set; }

        /// <summary>
        /// Составляющие индекса качества.
        /// </summary>
        /// <value>Составляющие индекса качества.</value>
        [DataMember(Name = "components", IsRequired = true, EmitDefaultValue = true)]
        public List<QualityRatingComponentDTO> Components { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QualityRatingDTO {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  CalculationDate: ").Append(CalculationDate).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Rating (long) maximum
            if (this.Rating > (long)100)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value less than or equal to 100.", new [] { "Rating" });
            }

            // Rating (long) minimum
            if (this.Rating < (long)0)
            {
                yield return new ValidationResult("Invalid value for Rating, must be a value greater than or equal to 0.", new [] { "Rating" });
            }

            yield break;
        }
    }

}
