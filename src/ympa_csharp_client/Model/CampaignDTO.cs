/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о магазине.
    /// </summary>
    [DataContract(Name = "CampaignDTO")]
    public partial class CampaignDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PlacementType
        /// </summary>
        [DataMember(Name = "placementType", EmitDefaultValue = false)]
        public PlacementType? PlacementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignDTO" /> class.
        /// </summary>
        /// <param name="domain">URL магазина..</param>
        /// <param name="id">Идентификатор кампании..</param>
        /// <param name="clientId">Идентификатор плательщика в Яндекс Балансе..</param>
        /// <param name="business">business.</param>
        /// <param name="placementType">placementType.</param>
        public CampaignDTO(string domain = default(string), long id = default(long), long clientId = default(long), BusinessDTO business = default(BusinessDTO), PlacementType? placementType = default(PlacementType?))
        {
            this.Domain = domain;
            this.Id = id;
            this.ClientId = clientId;
            this.Business = business;
            this.PlacementType = placementType;
        }

        /// <summary>
        /// URL магазина.
        /// </summary>
        /// <value>URL магазина.</value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Идентификатор кампании.
        /// </summary>
        /// <value>Идентификатор кампании.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Идентификатор плательщика в Яндекс Балансе.
        /// </summary>
        /// <value>Идентификатор плательщика в Яндекс Балансе.</value>
        [DataMember(Name = "clientId", EmitDefaultValue = false)]
        public long ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Business
        /// </summary>
        [DataMember(Name = "business", EmitDefaultValue = false)]
        public BusinessDTO Business { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignDTO {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Business: ").Append(Business).Append("\n");
            sb.Append("  PlacementType: ").Append(PlacementType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
