/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
    /// </summary>
    [DataContract(Name = "GenerateGoodsRealizationReportRequest")]
    public partial class GenerateGoodsRealizationReportRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateGoodsRealizationReportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateGoodsRealizationReportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateGoodsRealizationReportRequest" /> class.
        /// </summary>
        /// <param name="campaignId">Идентификатор кампании. (required).</param>
        /// <param name="year">Год. (required).</param>
        /// <param name="month">Номер месяца. (required).</param>
        public GenerateGoodsRealizationReportRequest(long campaignId = default(long), int year = default(int), int month = default(int))
        {
            this.CampaignId = campaignId;
            this.Year = year;
            this.Month = month;
        }

        /// <summary>
        /// Идентификатор кампании.
        /// </summary>
        /// <value>Идентификатор кампании.</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = true)]
        public long CampaignId { get; set; }

        /// <summary>
        /// Год.
        /// </summary>
        /// <value>Год.</value>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Номер месяца.
        /// </summary>
        /// <value>Номер месяца.</value>
        [DataMember(Name = "month", IsRequired = true, EmitDefaultValue = true)]
        public int Month { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateGoodsRealizationReportRequest {\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Month (int) maximum
            if (this.Month > (int)12)
            {
                yield return new ValidationResult("Invalid value for Month, must be a value less than or equal to 12.", new [] { "Month" });
            }

            // Month (int) minimum
            if (this.Month < (int)1)
            {
                yield return new ValidationResult("Invalid value for Month, must be a value greater than or equal to 1.", new [] { "Month" });
            }

            yield break;
        }
    }

}
