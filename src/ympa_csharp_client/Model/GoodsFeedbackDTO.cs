/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Отзыв о товаре.
    /// </summary>
    [DataContract(Name = "GoodsFeedbackDTO")]
    public partial class GoodsFeedbackDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsFeedbackDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GoodsFeedbackDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsFeedbackDTO" /> class.
        /// </summary>
        /// <param name="feedbackId">Идентификатор отзыва.  (required).</param>
        /// <param name="createdAt">Дата и время создания отзыва. (required).</param>
        /// <param name="needReaction">Нужен ли ответ на отзыв. (required).</param>
        /// <param name="identifiers">identifiers (required).</param>
        /// <param name="author">Имя автора отзыва..</param>
        /// <param name="description">description.</param>
        /// <param name="media">media.</param>
        /// <param name="statistics">statistics (required).</param>
        public GoodsFeedbackDTO(long feedbackId = default(long), DateTime createdAt = default(DateTime), bool needReaction = default(bool), GoodsFeedbackIdentifiersDTO identifiers = default(GoodsFeedbackIdentifiersDTO), string author = default(string), GoodsFeedbackDescriptionDTO description = default(GoodsFeedbackDescriptionDTO), GoodsFeedbackMediaDTO media = default(GoodsFeedbackMediaDTO), GoodsFeedbackStatisticsDTO statistics = default(GoodsFeedbackStatisticsDTO))
        {
            this.FeedbackId = feedbackId;
            this.CreatedAt = createdAt;
            this.NeedReaction = needReaction;
            // to ensure "identifiers" is required (not null)
            if (identifiers == null)
            {
                throw new ArgumentNullException("identifiers is a required property for GoodsFeedbackDTO and cannot be null");
            }
            this.Identifiers = identifiers;
            // to ensure "statistics" is required (not null)
            if (statistics == null)
            {
                throw new ArgumentNullException("statistics is a required property for GoodsFeedbackDTO and cannot be null");
            }
            this.Statistics = statistics;
            this.Author = author;
            this.Description = description;
            this.Media = media;
        }

        /// <summary>
        /// Идентификатор отзыва. 
        /// </summary>
        /// <value>Идентификатор отзыва. </value>
        [DataMember(Name = "feedbackId", IsRequired = true, EmitDefaultValue = true)]
        public long FeedbackId { get; set; }

        /// <summary>
        /// Дата и время создания отзыва.
        /// </summary>
        /// <value>Дата и время создания отзыва.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Нужен ли ответ на отзыв.
        /// </summary>
        /// <value>Нужен ли ответ на отзыв.</value>
        [DataMember(Name = "needReaction", IsRequired = true, EmitDefaultValue = true)]
        public bool NeedReaction { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = true)]
        public GoodsFeedbackIdentifiersDTO Identifiers { get; set; }

        /// <summary>
        /// Имя автора отзыва.
        /// </summary>
        /// <value>Имя автора отзыва.</value>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public GoodsFeedbackDescriptionDTO Description { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public GoodsFeedbackMediaDTO Media { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name = "statistics", IsRequired = true, EmitDefaultValue = true)]
        public GoodsFeedbackStatisticsDTO Statistics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoodsFeedbackDTO {\n");
            sb.Append("  FeedbackId: ").Append(FeedbackId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  NeedReaction: ").Append(NeedReaction).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
