/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о прайс-листе.
    /// </summary>
    [DataContract(Name = "FeedDTO")]
    public partial class FeedDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор прайс-листа..</param>
        /// <param name="login">Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. .</param>
        /// <param name="name">Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. .</param>
        /// <param name="password">Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. .</param>
        /// <param name="uploadDate">Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. .</param>
        /// <param name="url">URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. .</param>
        /// <param name="content">content.</param>
        /// <param name="download">download.</param>
        /// <param name="placement">placement.</param>
        /// <param name="publication">publication.</param>
        public FeedDTO(long id = default(long), string login = default(string), string name = default(string), string password = default(string), DateTime uploadDate = default(DateTime), string url = default(string), FeedContentDTO content = default(FeedContentDTO), FeedDownloadDTO download = default(FeedDownloadDTO), FeedPlacementDTO placement = default(FeedPlacementDTO), FeedPublicationDTO publication = default(FeedPublicationDTO))
        {
            this.Id = id;
            this.Login = login;
            this.Name = name;
            this.Password = password;
            this.UploadDate = uploadDate;
            this.Url = url;
            this.Content = content;
            this.Download = download;
            this.Placement = placement;
            this.Publication = publication;
        }

        /// <summary>
        /// Идентификатор прайс-листа.
        /// </summary>
        /// <value>Идентификатор прайс-листа.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
        /// </summary>
        /// <value>Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. </value>
        [DataMember(Name = "login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
        /// </summary>
        /// <value>Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. </value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
        /// </summary>
        /// <value>Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. </value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
        /// </summary>
        /// <value>Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. </value>
        [DataMember(Name = "uploadDate", EmitDefaultValue = false)]
        public DateTime UploadDate { get; set; }

        /// <summary>
        /// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
        /// </summary>
        /// <value>URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. </value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public FeedContentDTO Content { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name = "download", EmitDefaultValue = false)]
        public FeedDownloadDTO Download { get; set; }

        /// <summary>
        /// Gets or Sets Placement
        /// </summary>
        [DataMember(Name = "placement", EmitDefaultValue = false)]
        public FeedPlacementDTO Placement { get; set; }

        /// <summary>
        /// Gets or Sets Publication
        /// </summary>
        [DataMember(Name = "publication", EmitDefaultValue = false)]
        public FeedPublicationDTO Publication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  Publication: ").Append(Publication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
