/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Модель товара.
    /// </summary>
    [DataContract(Name = "EnrichedModelDTO")]
    public partial class EnrichedModelDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichedModelDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор модели товара..</param>
        /// <param name="name">Название модели товара..</param>
        /// <param name="prices">prices.</param>
        /// <param name="offers">Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. .</param>
        /// <param name="offlineOffers">Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина..</param>
        /// <param name="onlineOffers">Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина..</param>
        public EnrichedModelDTO(long id = default(long), string name = default(string), ModelPriceDTO prices = default(ModelPriceDTO), List<ModelOfferDTO> offers = default(List<ModelOfferDTO>), int offlineOffers = default(int), int onlineOffers = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.Prices = prices;
            this.Offers = offers;
            this.OfflineOffers = offlineOffers;
            this.OnlineOffers = onlineOffers;
        }

        /// <summary>
        /// Идентификатор модели товара.
        /// </summary>
        /// <value>Идентификатор модели товара.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Название модели товара.
        /// </summary>
        /// <value>Название модели товара.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name = "prices", EmitDefaultValue = false)]
        public ModelPriceDTO Prices { get; set; }

        /// <summary>
        /// Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
        /// </summary>
        /// <value>Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. </value>
        [DataMember(Name = "offers", EmitDefaultValue = true)]
        public List<ModelOfferDTO> Offers { get; set; }

        /// <summary>
        /// Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
        /// </summary>
        /// <value>Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.</value>
        [DataMember(Name = "offlineOffers", EmitDefaultValue = false)]
        public int OfflineOffers { get; set; }

        /// <summary>
        /// Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
        /// </summary>
        /// <value>Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.</value>
        [DataMember(Name = "onlineOffers", EmitDefaultValue = false)]
        public int OnlineOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnrichedModelDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  OfflineOffers: ").Append(OfflineOffers).Append("\n");
            sb.Append("  OnlineOffers: ").Append(OnlineOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
