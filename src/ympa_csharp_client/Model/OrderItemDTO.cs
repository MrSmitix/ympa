/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список товаров в заказе.
    /// </summary>
    [DataContract(Name = "OrderItemDTO")]
    public partial class OrderItemDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = false)]
        public OrderVatType? Vat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItemDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. .</param>
        /// <param name="offerId">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="offerName">Название товара..</param>
        /// <param name="price">Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). .</param>
        /// <param name="buyerPrice">Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. .</param>
        /// <param name="buyerPriceBeforeDiscount">Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. .</param>
        /// <param name="priceBeforeDiscount">{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. .</param>
        /// <param name="count">Количество единиц товара..</param>
        /// <param name="vat">vat.</param>
        /// <param name="shopSku">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="subsidy">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. .</param>
        /// <param name="partnerWarehouseId">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. .</param>
        /// <param name="promos">Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям..</param>
        /// <param name="instances">Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. .</param>
        /// <param name="details">Информация об удалении товара из заказа. .</param>
        /// <param name="subsidies">Список субсидий по типам..</param>
        /// <param name="requiredInstanceTypes">Список необходимых маркировок товара..</param>
        public OrderItemDTO(long id = default(long), string offerId = default(string), string offerName = default(string), decimal price = default(decimal), decimal buyerPrice = default(decimal), decimal buyerPriceBeforeDiscount = default(decimal), decimal priceBeforeDiscount = default(decimal), int count = default(int), OrderVatType? vat = default(OrderVatType?), string shopSku = default(string), decimal subsidy = default(decimal), string partnerWarehouseId = default(string), List<OrderItemPromoDTO> promos = default(List<OrderItemPromoDTO>), List<OrderItemInstanceDTO> instances = default(List<OrderItemInstanceDTO>), List<OrderItemDetailDTO> details = default(List<OrderItemDetailDTO>), List<OrderItemSubsidyDTO> subsidies = default(List<OrderItemSubsidyDTO>), List<OrderItemInstanceType> requiredInstanceTypes = default(List<OrderItemInstanceType>))
        {
            this.Id = id;
            this.OfferId = offerId;
            this.OfferName = offerName;
            this.Price = price;
            this.BuyerPrice = buyerPrice;
            this.BuyerPriceBeforeDiscount = buyerPriceBeforeDiscount;
            this.PriceBeforeDiscount = priceBeforeDiscount;
            this.Count = count;
            this.Vat = vat;
            this.ShopSku = shopSku;
            this.Subsidy = subsidy;
            this.PartnerWarehouseId = partnerWarehouseId;
            this.Promos = promos;
            this.Instances = instances;
            this.Details = details;
            this.Subsidies = subsidies;
            this.RequiredInstanceTypes = requiredInstanceTypes;
        }

        /// <summary>
        /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
        /// </summary>
        /// <value>Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "offerId", EmitDefaultValue = false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name = "offerName", EmitDefaultValue = false)]
        public string OfferName { get; set; }

        /// <summary>
        /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
        /// </summary>
        /// <value>Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). </value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name = "buyerPrice", EmitDefaultValue = false)]
        public decimal BuyerPrice { get; set; }

        /// <summary>
        /// Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name = "buyerPriceBeforeDiscount", EmitDefaultValue = false)]
        public decimal BuyerPriceBeforeDiscount { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. </value>
        [DataMember(Name = "priceBeforeDiscount", EmitDefaultValue = false)]
        [Obsolete]
        public decimal PriceBeforeDiscount { get; set; }

        /// <summary>
        /// Количество единиц товара.
        /// </summary>
        /// <value>Количество единиц товара.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "shopSku", EmitDefaultValue = false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. </value>
        [DataMember(Name = "subsidy", EmitDefaultValue = false)]
        [Obsolete]
        public decimal Subsidy { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. </value>
        [DataMember(Name = "partnerWarehouseId", EmitDefaultValue = false)]
        [Obsolete]
        public string PartnerWarehouseId { get; set; }

        /// <summary>
        /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
        /// </summary>
        /// <value>Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.</value>
        [DataMember(Name = "promos", EmitDefaultValue = true)]
        public List<OrderItemPromoDTO> Promos { get; set; }

        /// <summary>
        /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
        /// </summary>
        /// <value>Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. </value>
        [DataMember(Name = "instances", EmitDefaultValue = true)]
        public List<OrderItemInstanceDTO> Instances { get; set; }

        /// <summary>
        /// Информация об удалении товара из заказа. 
        /// </summary>
        /// <value>Информация об удалении товара из заказа. </value>
        [DataMember(Name = "details", EmitDefaultValue = true)]
        public List<OrderItemDetailDTO> Details { get; set; }

        /// <summary>
        /// Список субсидий по типам.
        /// </summary>
        /// <value>Список субсидий по типам.</value>
        [DataMember(Name = "subsidies", EmitDefaultValue = true)]
        public List<OrderItemSubsidyDTO> Subsidies { get; set; }

        /// <summary>
        /// Список необходимых маркировок товара.
        /// </summary>
        /// <value>Список необходимых маркировок товара.</value>
        [DataMember(Name = "requiredInstanceTypes", EmitDefaultValue = true)]
        public List<OrderItemInstanceType> RequiredInstanceTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderItemDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BuyerPrice: ").Append(BuyerPrice).Append("\n");
            sb.Append("  BuyerPriceBeforeDiscount: ").Append(BuyerPriceBeforeDiscount).Append("\n");
            sb.Append("  PriceBeforeDiscount: ").Append(PriceBeforeDiscount).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Subsidy: ").Append(Subsidy).Append("\n");
            sb.Append("  PartnerWarehouseId: ").Append(PartnerWarehouseId).Append("\n");
            sb.Append("  Promos: ").Append(Promos).Append("\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Subsidies: ").Append(Subsidies).Append("\n");
            sb.Append("  RequiredInstanceTypes: ").Append(RequiredInstanceTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OfferId (string) maxLength
            if (this.OfferId != null && this.OfferId.Length > 255)
            {
                yield return new ValidationResult("Invalid value for OfferId, length must be less than 255.", new [] { "OfferId" });
            }

            // OfferId (string) minLength
            if (this.OfferId != null && this.OfferId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for OfferId, length must be greater than 1.", new [] { "OfferId" });
            }

            if (this.OfferId != null) {
                // OfferId (string) pattern
                Regex regexOfferId = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexOfferId.Match(this.OfferId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfferId, must match a pattern of " + regexOfferId, new [] { "OfferId" });
                }
            }

            // ShopSku (string) maxLength
            if (this.ShopSku != null && this.ShopSku.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be less than 255.", new [] { "ShopSku" });
            }

            // ShopSku (string) minLength
            if (this.ShopSku != null && this.ShopSku.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be greater than 1.", new [] { "ShopSku" });
            }

            if (this.ShopSku != null) {
                // ShopSku (string) pattern
                Regex regexShopSku = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexShopSku.Match(this.ShopSku).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShopSku, must match a pattern of " + regexShopSku, new [] { "ShopSku" });
                }
            }

            yield break;
        }
    }

}
