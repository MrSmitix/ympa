/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о товаре.
    /// </summary>
    [DataContract(Name = "GoodsStatsGoodsDTO")]
    public partial class GoodsStatsGoodsDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoodsStatsGoodsDTO" /> class.
        /// </summary>
        /// <param name="shopSku">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="marketSku">SKU на Маркете..</param>
        /// <param name="name">Название товара..</param>
        /// <param name="price">Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/)..</param>
        /// <param name="categoryId">Идентификатор категории товара на Маркете..</param>
        /// <param name="categoryName">Название категории товара на Маркете..</param>
        /// <param name="weightDimensions">weightDimensions.</param>
        /// <param name="warehouses">Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. .</param>
        /// <param name="tariffs">Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). .</param>
        /// <param name="pictures">Ссылки (URL) изображений товара в хорошем качестве..</param>
        public GoodsStatsGoodsDTO(string shopSku = default(string), long marketSku = default(long), string name = default(string), decimal price = default(decimal), long categoryId = default(long), string categoryName = default(string), GoodsStatsWeightDimensionsDTO weightDimensions = default(GoodsStatsWeightDimensionsDTO), List<GoodsStatsWarehouseDTO> warehouses = default(List<GoodsStatsWarehouseDTO>), List<TariffDTO> tariffs = default(List<TariffDTO>), List<string> pictures = default(List<string>))
        {
            this.ShopSku = shopSku;
            this.MarketSku = marketSku;
            this.Name = name;
            this.Price = price;
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.WeightDimensions = weightDimensions;
            this.Warehouses = warehouses;
            this.Tariffs = tariffs;
            this.Pictures = pictures;
        }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "shopSku", EmitDefaultValue = false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name = "marketSku", EmitDefaultValue = false)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
        /// </summary>
        /// <value>Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор категории товара на Маркете.
        /// </summary>
        /// <value>Идентификатор категории товара на Маркете.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Название категории товара на Маркете.
        /// </summary>
        /// <value>Название категории товара на Маркете.</value>
        [DataMember(Name = "categoryName", EmitDefaultValue = false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets WeightDimensions
        /// </summary>
        [DataMember(Name = "weightDimensions", EmitDefaultValue = false)]
        public GoodsStatsWeightDimensionsDTO WeightDimensions { get; set; }

        /// <summary>
        /// Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
        /// </summary>
        /// <value>Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. </value>
        [DataMember(Name = "warehouses", EmitDefaultValue = true)]
        public List<GoodsStatsWarehouseDTO> Warehouses { get; set; }

        /// <summary>
        /// Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
        /// </summary>
        /// <value>Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). </value>
        [DataMember(Name = "tariffs", EmitDefaultValue = true)]
        public List<TariffDTO> Tariffs { get; set; }

        /// <summary>
        /// Ссылки (URL) изображений товара в хорошем качестве.
        /// </summary>
        /// <value>Ссылки (URL) изображений товара в хорошем качестве.</value>
        [DataMember(Name = "pictures", EmitDefaultValue = true)]
        public List<string> Pictures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoodsStatsGoodsDTO {\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  WeightDimensions: ").Append(WeightDimensions).Append("\n");
            sb.Append("  Warehouses: ").Append(Warehouses).Append("\n");
            sb.Append("  Tariffs: ").Append(Tariffs).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShopSku (string) maxLength
            if (this.ShopSku != null && this.ShopSku.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be less than 255.", new [] { "ShopSku" });
            }

            // ShopSku (string) minLength
            if (this.ShopSku != null && this.ShopSku.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be greater than 1.", new [] { "ShopSku" });
            }

            if (this.ShopSku != null) {
                // ShopSku (string) pattern
                Regex regexShopSku = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexShopSku.Match(this.ShopSku).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShopSku, must match a pattern of " + regexShopSku, new [] { "ShopSku" });
                }
            }

            yield break;
        }
    }

}
