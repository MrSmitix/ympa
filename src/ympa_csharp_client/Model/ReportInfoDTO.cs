/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Статус генерации и ссылка на готовый отчет.
    /// </summary>
    [DataContract(Name = "ReportInfoDTO")]
    public partial class ReportInfoDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ReportStatusType Status { get; set; }

        /// <summary>
        /// Gets or Sets SubStatus
        /// </summary>
        [DataMember(Name = "subStatus", EmitDefaultValue = false)]
        public ReportSubStatusType? SubStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInfoDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportInfoDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportInfoDTO" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="subStatus">subStatus.</param>
        /// <param name="generationRequestedAt">Дата и время запроса на генерацию. (required).</param>
        /// <param name="generationFinishedAt">Дата и время завершения генерации..</param>
        /// <param name="file">Ссылка на готовый отчет..</param>
        /// <param name="estimatedGenerationTime">Ожидаемая продолжительность генерации в миллисекундах..</param>
        public ReportInfoDTO(ReportStatusType status = default(ReportStatusType), ReportSubStatusType? subStatus = default(ReportSubStatusType?), DateTime generationRequestedAt = default(DateTime), DateTime generationFinishedAt = default(DateTime), string file = default(string), long estimatedGenerationTime = default(long))
        {
            this.Status = status;
            this.GenerationRequestedAt = generationRequestedAt;
            this.SubStatus = subStatus;
            this.GenerationFinishedAt = generationFinishedAt;
            this.File = file;
            this.EstimatedGenerationTime = estimatedGenerationTime;
        }

        /// <summary>
        /// Дата и время запроса на генерацию.
        /// </summary>
        /// <value>Дата и время запроса на генерацию.</value>
        [DataMember(Name = "generationRequestedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime GenerationRequestedAt { get; set; }

        /// <summary>
        /// Дата и время завершения генерации.
        /// </summary>
        /// <value>Дата и время завершения генерации.</value>
        [DataMember(Name = "generationFinishedAt", EmitDefaultValue = false)]
        public DateTime GenerationFinishedAt { get; set; }

        /// <summary>
        /// Ссылка на готовый отчет.
        /// </summary>
        /// <value>Ссылка на готовый отчет.</value>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// Ожидаемая продолжительность генерации в миллисекундах.
        /// </summary>
        /// <value>Ожидаемая продолжительность генерации в миллисекундах.</value>
        [DataMember(Name = "estimatedGenerationTime", EmitDefaultValue = false)]
        public long EstimatedGenerationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportInfoDTO {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubStatus: ").Append(SubStatus).Append("\n");
            sb.Append("  GenerationRequestedAt: ").Append(GenerationRequestedAt).Append("\n");
            sb.Append("  GenerationFinishedAt: ").Append(GenerationFinishedAt).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  EstimatedGenerationTime: ").Append(EstimatedGenerationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
