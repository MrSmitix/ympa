/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о предложении.
    /// </summary>
    [DataContract(Name = "ModelOfferDTO")]
    public partial class ModelOfferDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOfferDTO" /> class.
        /// </summary>
        /// <param name="discount">Скидка на предложение в процентах..</param>
        /// <param name="name">Наименование предложения..</param>
        /// <param name="pos">Позиция предложения в выдаче Маркета на карточке модели..</param>
        /// <param name="preDiscountPrice">Цена предложения без скидки магазина..</param>
        /// <param name="price">Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay..</param>
        /// <param name="regionId">Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. .</param>
        /// <param name="shippingCost">Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. .</param>
        /// <param name="shopName">Название магазина (в том виде, в котором отображается на Маркете)..</param>
        /// <param name="shopRating">Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. .</param>
        /// <param name="inStock">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} .</param>
        public ModelOfferDTO(int discount = default(int), string name = default(string), int pos = default(int), decimal preDiscountPrice = default(decimal), decimal price = default(decimal), long regionId = default(long), decimal shippingCost = default(decimal), string shopName = default(string), int shopRating = default(int), int inStock = default(int))
        {
            this.Discount = discount;
            this.Name = name;
            this.Pos = pos;
            this.PreDiscountPrice = preDiscountPrice;
            this.Price = price;
            this.RegionId = regionId;
            this.ShippingCost = shippingCost;
            this.ShopName = shopName;
            this.ShopRating = shopRating;
            this.InStock = inStock;
        }

        /// <summary>
        /// Скидка на предложение в процентах.
        /// </summary>
        /// <value>Скидка на предложение в процентах.</value>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public int Discount { get; set; }

        /// <summary>
        /// Наименование предложения.
        /// </summary>
        /// <value>Наименование предложения.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Позиция предложения в выдаче Маркета на карточке модели.
        /// </summary>
        /// <value>Позиция предложения в выдаче Маркета на карточке модели.</value>
        [DataMember(Name = "pos", EmitDefaultValue = false)]
        public int Pos { get; set; }

        /// <summary>
        /// Цена предложения без скидки магазина.
        /// </summary>
        /// <value>Цена предложения без скидки магазина.</value>
        [DataMember(Name = "preDiscountPrice", EmitDefaultValue = false)]
        public decimal PreDiscountPrice { get; set; }

        /// <summary>
        /// Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
        /// </summary>
        /// <value>Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
        /// </summary>
        /// <value>Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. </value>
        [DataMember(Name = "regionId", EmitDefaultValue = false)]
        public long RegionId { get; set; }

        /// <summary>
        /// Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
        /// </summary>
        /// <value>Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. </value>
        [DataMember(Name = "shippingCost", EmitDefaultValue = false)]
        public decimal ShippingCost { get; set; }

        /// <summary>
        /// Название магазина (в том виде, в котором отображается на Маркете).
        /// </summary>
        /// <value>Название магазина (в том виде, в котором отображается на Маркете).</value>
        [DataMember(Name = "shopName", EmitDefaultValue = false)]
        public string ShopName { get; set; }

        /// <summary>
        /// Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
        /// </summary>
        /// <value>Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. </value>
        [DataMember(Name = "shopRating", EmitDefaultValue = false)]
        public int ShopRating { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} </value>
        [DataMember(Name = "inStock", EmitDefaultValue = false)]
        [Obsolete]
        public int InStock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelOfferDTO {\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pos: ").Append(Pos).Append("\n");
            sb.Append("  PreDiscountPrice: ").Append(PreDiscountPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShopName: ").Append(ShopName).Append("\n");
            sb.Append("  ShopRating: ").Append(ShopRating).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
