/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о части товара в коробке.
    /// </summary>
    [DataContract(Name = "OrderBoxLayoutPartialCountDTO")]
    public partial class OrderBoxLayoutPartialCountDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBoxLayoutPartialCountDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderBoxLayoutPartialCountDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderBoxLayoutPartialCountDTO" /> class.
        /// </summary>
        /// <param name="current">Номер части, начиная с 1. (required).</param>
        /// <param name="total">На сколько всего частей разделен товар. (required).</param>
        public OrderBoxLayoutPartialCountDTO(int current = default(int), int total = default(int))
        {
            this.Current = current;
            this.Total = total;
        }

        /// <summary>
        /// Номер части, начиная с 1.
        /// </summary>
        /// <value>Номер части, начиная с 1.</value>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public int Current { get; set; }

        /// <summary>
        /// На сколько всего частей разделен товар.
        /// </summary>
        /// <value>На сколько всего частей разделен товар.</value>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderBoxLayoutPartialCountDTO {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Current (int) minimum
            if (this.Current < (int)1)
            {
                yield return new ValidationResult("Invalid value for Current, must be a value greater than or equal to 1.", new [] { "Current" });
            }

            // Total (int) minimum
            if (this.Total < (int)2)
            {
                yield return new ValidationResult("Invalid value for Total, must be a value greater than or equal to 2.", new [] { "Total" });
            }

            yield break;
        }
    }

}
