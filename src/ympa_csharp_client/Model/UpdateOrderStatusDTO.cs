/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список заказов.
    /// </summary>
    [DataContract(Name = "UpdateOrderStatusDTO")]
    public partial class UpdateOrderStatusDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OrderStatusType? Status { get; set; }

        /// <summary>
        /// Gets or Sets Substatus
        /// </summary>
        [DataMember(Name = "substatus", EmitDefaultValue = false)]
        public OrderSubstatusType? Substatus { get; set; }

        /// <summary>
        /// Gets or Sets UpdateStatus
        /// </summary>
        [DataMember(Name = "updateStatus", EmitDefaultValue = false)]
        public OrderUpdateStatusType? UpdateStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOrderStatusDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор заказа..</param>
        /// <param name="status">status.</param>
        /// <param name="substatus">substatus.</param>
        /// <param name="updateStatus">updateStatus.</param>
        /// <param name="errorDetails">Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. .</param>
        public UpdateOrderStatusDTO(long id = default(long), OrderStatusType? status = default(OrderStatusType?), OrderSubstatusType? substatus = default(OrderSubstatusType?), OrderUpdateStatusType? updateStatus = default(OrderUpdateStatusType?), string errorDetails = default(string))
        {
            this.Id = id;
            this.Status = status;
            this.Substatus = substatus;
            this.UpdateStatus = updateStatus;
            this.ErrorDetails = errorDetails;
        }

        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. 
        /// </summary>
        /// <value>Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. </value>
        [DataMember(Name = "errorDetails", EmitDefaultValue = false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOrderStatusDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Substatus: ").Append(Substatus).Append("\n");
            sb.Append("  UpdateStatus: ").Append(UpdateStatus).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
