/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о доставке.
    /// </summary>
    [DataContract(Name = "OrderDeliveryDTO")]
    public partial class OrderDeliveryDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public OrderDeliveryType? Type { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPartnerType
        /// </summary>
        [DataMember(Name = "deliveryPartnerType", EmitDefaultValue = false)]
        public OrderDeliveryPartnerType? DeliveryPartnerType { get; set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = false)]
        public OrderVatType? Vat { get; set; }

        /// <summary>
        /// Gets or Sets LiftType
        /// </summary>
        [DataMember(Name = "liftType", EmitDefaultValue = false)]
        public OrderLiftType? LiftType { get; set; }

        /// <summary>
        /// Gets or Sets DispatchType
        /// </summary>
        [DataMember(Name = "dispatchType", EmitDefaultValue = false)]
        public OrderDeliveryDispatchType? DispatchType { get; set; }

        /// <summary>
        /// Gets or Sets EacType
        /// </summary>
        [DataMember(Name = "eacType", EmitDefaultValue = false)]
        public OrderDeliveryEacType? EacType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDeliveryDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). .</param>
        /// <param name="type">type.</param>
        /// <param name="serviceName">Наименование службы доставки..</param>
        /// <param name="price">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. .</param>
        /// <param name="deliveryPartnerType">deliveryPartnerType.</param>
        /// <param name="courier">courier.</param>
        /// <param name="dates">dates.</param>
        /// <param name="region">region.</param>
        /// <param name="address">address.</param>
        /// <param name="vat">vat.</param>
        /// <param name="deliveryServiceId">Идентификатор службы доставки..</param>
        /// <param name="liftType">liftType.</param>
        /// <param name="liftPrice">Стоимость подъема на этаж..</param>
        /// <param name="outletCode">Идентификатор пункта самовывоза, присвоенный магазином..</param>
        /// <param name="outletStorageLimitDate">Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. .</param>
        /// <param name="dispatchType">dispatchType.</param>
        /// <param name="tracks">Информация для отслеживания перемещений посылки..</param>
        /// <param name="shipments">Информация о посылках..</param>
        /// <param name="estimated">Приблизительная ли дата доставки..</param>
        /// <param name="eacType">eacType.</param>
        /// <param name="eacCode">Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). .</param>
        public OrderDeliveryDTO(string id = default(string), OrderDeliveryType? type = default(OrderDeliveryType?), string serviceName = default(string), decimal price = default(decimal), OrderDeliveryPartnerType? deliveryPartnerType = default(OrderDeliveryPartnerType?), OrderCourierDTO courier = default(OrderCourierDTO), OrderDeliveryDatesDTO dates = default(OrderDeliveryDatesDTO), RegionDTO region = default(RegionDTO), OrderDeliveryAddressDTO address = default(OrderDeliveryAddressDTO), OrderVatType? vat = default(OrderVatType?), long deliveryServiceId = default(long), OrderLiftType? liftType = default(OrderLiftType?), decimal liftPrice = default(decimal), string outletCode = default(string), string outletStorageLimitDate = default(string), OrderDeliveryDispatchType? dispatchType = default(OrderDeliveryDispatchType?), List<OrderTrackDTO> tracks = default(List<OrderTrackDTO>), List<OrderShipmentDTO> shipments = default(List<OrderShipmentDTO>), bool estimated = default(bool), OrderDeliveryEacType? eacType = default(OrderDeliveryEacType?), string eacCode = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.ServiceName = serviceName;
            this.Price = price;
            this.DeliveryPartnerType = deliveryPartnerType;
            this.Courier = courier;
            this.Dates = dates;
            this.Region = region;
            this.Address = address;
            this.Vat = vat;
            this.DeliveryServiceId = deliveryServiceId;
            this.LiftType = liftType;
            this.LiftPrice = liftPrice;
            this.OutletCode = outletCode;
            this.OutletStorageLimitDate = outletStorageLimitDate;
            this.DispatchType = dispatchType;
            this.Tracks = tracks;
            this.Shipments = shipments;
            this.Estimated = estimated;
            this.EacType = eacType;
            this.EacCode = eacCode;
        }

        /// <summary>
        /// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
        /// </summary>
        /// <value>Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Наименование службы доставки.
        /// </summary>
        /// <value>Наименование службы доставки.</value>
        [DataMember(Name = "serviceName", EmitDefaultValue = false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. </value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        [Obsolete]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets Courier
        /// </summary>
        [DataMember(Name = "courier", EmitDefaultValue = false)]
        public OrderCourierDTO Courier { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public OrderDeliveryDatesDTO Dates { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public RegionDTO Region { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public OrderDeliveryAddressDTO Address { get; set; }

        /// <summary>
        /// Идентификатор службы доставки.
        /// </summary>
        /// <value>Идентификатор службы доставки.</value>
        [DataMember(Name = "deliveryServiceId", EmitDefaultValue = false)]
        public long DeliveryServiceId { get; set; }

        /// <summary>
        /// Стоимость подъема на этаж.
        /// </summary>
        /// <value>Стоимость подъема на этаж.</value>
        [DataMember(Name = "liftPrice", EmitDefaultValue = false)]
        public decimal LiftPrice { get; set; }

        /// <summary>
        /// Идентификатор пункта самовывоза, присвоенный магазином.
        /// </summary>
        /// <value>Идентификатор пункта самовывоза, присвоенный магазином.</value>
        [DataMember(Name = "outletCode", EmitDefaultValue = false)]
        public string OutletCode { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        /// <example>23-09-2022</example>
        [DataMember(Name = "outletStorageLimitDate", EmitDefaultValue = false)]
        public string OutletStorageLimitDate { get; set; }

        /// <summary>
        /// Информация для отслеживания перемещений посылки.
        /// </summary>
        /// <value>Информация для отслеживания перемещений посылки.</value>
        [DataMember(Name = "tracks", EmitDefaultValue = true)]
        public List<OrderTrackDTO> Tracks { get; set; }

        /// <summary>
        /// Информация о посылках.
        /// </summary>
        /// <value>Информация о посылках.</value>
        [DataMember(Name = "shipments", EmitDefaultValue = true)]
        public List<OrderShipmentDTO> Shipments { get; set; }

        /// <summary>
        /// Приблизительная ли дата доставки.
        /// </summary>
        /// <value>Приблизительная ли дата доставки.</value>
        [DataMember(Name = "estimated", EmitDefaultValue = true)]
        public bool Estimated { get; set; }

        /// <summary>
        /// Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
        /// </summary>
        /// <value>Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). </value>
        [DataMember(Name = "eacCode", EmitDefaultValue = false)]
        public string EacCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDeliveryDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DeliveryPartnerType: ").Append(DeliveryPartnerType).Append("\n");
            sb.Append("  Courier: ").Append(Courier).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  DeliveryServiceId: ").Append(DeliveryServiceId).Append("\n");
            sb.Append("  LiftType: ").Append(LiftType).Append("\n");
            sb.Append("  LiftPrice: ").Append(LiftPrice).Append("\n");
            sb.Append("  OutletCode: ").Append(OutletCode).Append("\n");
            sb.Append("  OutletStorageLimitDate: ").Append(OutletStorageLimitDate).Append("\n");
            sb.Append("  DispatchType: ").Append(DispatchType).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  Estimated: ").Append(Estimated).Append("\n");
            sb.Append("  EacType: ").Append(EacType).Append("\n");
            sb.Append("  EacCode: ").Append(EacCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
