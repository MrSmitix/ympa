/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Предложение.
    /// </summary>
    [DataContract(Name = "OfferDTO")]
    public partial class OfferDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyType? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDTO" /> class.
        /// </summary>
        /// <param name="price">Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. .</param>
        /// <param name="feedId">Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. .</param>
        /// <param name="id">Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. .</param>
        /// <param name="shopCategoryId">Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. .</param>
        /// <param name="marketCategoryId">Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. .</param>
        /// <param name="preDiscountPrice">Цена предложения без скидки..</param>
        /// <param name="discount">Скидка на предложение в процентах..</param>
        /// <param name="cutPrice">Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. .</param>
        /// <param name="url">URL-адрес предложения на сайте магазина..</param>
        /// <param name="modelId">Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %}  (required).</param>
        /// <param name="name">Наименование предложения..</param>
        /// <param name="currency">currency.</param>
        /// <param name="bid">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. .</param>
        /// <param name="cbid">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. .</param>
        /// <param name="fee">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. .</param>
        /// <param name="blocked">Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. .</param>
        public OfferDTO(decimal price = default(decimal), long feedId = default(long), string id = default(string), string shopCategoryId = default(string), int marketCategoryId = default(int), decimal preDiscountPrice = default(decimal), int discount = default(int), bool cutPrice = default(bool), string url = default(string), long modelId = default(long), string name = default(string), CurrencyType? currency = default(CurrencyType?), decimal bid = default(decimal), decimal cbid = default(decimal), decimal fee = default(decimal), bool blocked = default(bool))
        {
            this.ModelId = modelId;
            this.Price = price;
            this.FeedId = feedId;
            this.Id = id;
            this.ShopCategoryId = shopCategoryId;
            this.MarketCategoryId = marketCategoryId;
            this.PreDiscountPrice = preDiscountPrice;
            this.Discount = discount;
            this.CutPrice = cutPrice;
            this.Url = url;
            this.Name = name;
            this.Currency = currency;
            this.Bid = bid;
            this.Cbid = cbid;
            this.Fee = fee;
            this.Blocked = blocked;
        }

        /// <summary>
        /// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
        /// </summary>
        /// <value>Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. </value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name = "feedId", EmitDefaultValue = false)]
        public long FeedId { get; set; }

        /// <summary>
        /// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name = "shopCategoryId", EmitDefaultValue = false)]
        public string ShopCategoryId { get; set; }

        /// <summary>
        /// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name = "marketCategoryId", EmitDefaultValue = false)]
        public int MarketCategoryId { get; set; }

        /// <summary>
        /// Цена предложения без скидки.
        /// </summary>
        /// <value>Цена предложения без скидки.</value>
        [DataMember(Name = "preDiscountPrice", EmitDefaultValue = false)]
        public decimal PreDiscountPrice { get; set; }

        /// <summary>
        /// Скидка на предложение в процентах.
        /// </summary>
        /// <value>Скидка на предложение в процентах.</value>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public int Discount { get; set; }

        /// <summary>
        /// Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
        /// </summary>
        /// <value>Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. </value>
        [DataMember(Name = "cutPrice", EmitDefaultValue = true)]
        public bool CutPrice { get; set; }

        /// <summary>
        /// URL-адрес предложения на сайте магазина.
        /// </summary>
        /// <value>URL-адрес предложения на сайте магазина.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
        /// </summary>
        /// <value>Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} </value>
        [DataMember(Name = "modelId", IsRequired = true, EmitDefaultValue = true)]
        public long ModelId { get; set; }

        /// <summary>
        /// Наименование предложения.
        /// </summary>
        /// <value>Наименование предложения.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. </value>
        [DataMember(Name = "bid", EmitDefaultValue = false)]
        public decimal Bid { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. </value>
        [DataMember(Name = "cbid", EmitDefaultValue = false)]
        public decimal Cbid { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. </value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
        /// </summary>
        /// <value>Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. </value>
        [DataMember(Name = "blocked", EmitDefaultValue = true)]
        public bool Blocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferDTO {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShopCategoryId: ").Append(ShopCategoryId).Append("\n");
            sb.Append("  MarketCategoryId: ").Append(MarketCategoryId).Append("\n");
            sb.Append("  PreDiscountPrice: ").Append(PreDiscountPrice).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  CutPrice: ").Append(CutPrice).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  Cbid: ").Append(Cbid).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
