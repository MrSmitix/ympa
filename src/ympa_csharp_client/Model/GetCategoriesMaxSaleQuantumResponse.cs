/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// GetCategoriesMaxSaleQuantumResponse
    /// </summary>
    [DataContract(Name = "GetCategoriesMaxSaleQuantumResponse")]
    public partial class GetCategoriesMaxSaleQuantumResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ApiResponseStatusType? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCategoriesMaxSaleQuantumResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCategoriesMaxSaleQuantumResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCategoriesMaxSaleQuantumResponse" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="results">Категории и лимит на установку кванта и минимального количества товаров. (required).</param>
        /// <param name="errors">Ошибки, которые появились из-за переданных категорий..</param>
        public GetCategoriesMaxSaleQuantumResponse(ApiResponseStatusType? status = default(ApiResponseStatusType?), List<MaxSaleQuantumDTO> results = default(List<MaxSaleQuantumDTO>), List<CategoryErrorDTO> errors = default(List<CategoryErrorDTO>))
        {
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new ArgumentNullException("results is a required property for GetCategoriesMaxSaleQuantumResponse and cannot be null");
            }
            this.Results = results;
            this.Status = status;
            this.Errors = errors;
        }

        /// <summary>
        /// Категории и лимит на установку кванта и минимального количества товаров.
        /// </summary>
        /// <value>Категории и лимит на установку кванта и минимального количества товаров.</value>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = true)]
        public List<MaxSaleQuantumDTO> Results { get; set; }

        /// <summary>
        /// Ошибки, которые появились из-за переданных категорий.
        /// </summary>
        /// <value>Ошибки, которые появились из-за переданных категорий.</value>
        [DataMember(Name = "errors", EmitDefaultValue = true)]
        public List<CategoryErrorDTO> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCategoriesMaxSaleQuantumResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
