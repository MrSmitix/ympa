/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Характеристика товара.
    /// </summary>
    [DataContract(Name = "CategoryParameterDTO")]
    public partial class CategoryParameterDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ParameterType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryParameterDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CategoryParameterDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryParameterDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор характеристики. (required).</param>
        /// <param name="name">Название характеристики..</param>
        /// <param name="type">type (required).</param>
        /// <param name="unit">unit.</param>
        /// <param name="description">Описание характеристики..</param>
        /// <param name="recommendationTypes">Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика..</param>
        /// <param name="required">Обязательность характеристики. (required).</param>
        /// <param name="filtering">Используется ли характеристика в фильтре. (required).</param>
        /// <param name="distinctive">Является ли характеристика особенностью варианта. (required).</param>
        /// <param name="multivalue">Можно ли передать сразу несколько значений. (required).</param>
        /// <param name="allowCustomValues">Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;. (required).</param>
        /// <param name="values">Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;..</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="valueRestrictions">Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;..</param>
        public CategoryParameterDTO(long id = default(long), string name = default(string), ParameterType type = default(ParameterType), CategoryParameterUnitDTO unit = default(CategoryParameterUnitDTO), string description = default(string), List<OfferCardRecommendationType> recommendationTypes = default(List<OfferCardRecommendationType>), bool required = default(bool), bool filtering = default(bool), bool distinctive = default(bool), bool multivalue = default(bool), bool allowCustomValues = default(bool), List<ParameterValueOptionDTO> values = default(List<ParameterValueOptionDTO>), ParameterValueConstraintsDTO constraints = default(ParameterValueConstraintsDTO), List<ValueRestrictionDTO> valueRestrictions = default(List<ValueRestrictionDTO>))
        {
            this.Id = id;
            this.Type = type;
            this.Required = required;
            this.Filtering = filtering;
            this.Distinctive = distinctive;
            this.Multivalue = multivalue;
            this.AllowCustomValues = allowCustomValues;
            this.Name = name;
            this.Unit = unit;
            this.Description = description;
            this.RecommendationTypes = recommendationTypes;
            this.Values = values;
            this.Constraints = constraints;
            this.ValueRestrictions = valueRestrictions;
        }

        /// <summary>
        /// Идентификатор характеристики.
        /// </summary>
        /// <value>Идентификатор характеристики.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Название характеристики.
        /// </summary>
        /// <value>Название характеристики.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public CategoryParameterUnitDTO Unit { get; set; }

        /// <summary>
        /// Описание характеристики.
        /// </summary>
        /// <value>Описание характеристики.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
        /// </summary>
        /// <value>Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.</value>
        [DataMember(Name = "recommendationTypes", EmitDefaultValue = true)]
        public List<OfferCardRecommendationType> RecommendationTypes { get; set; }

        /// <summary>
        /// Обязательность характеристики.
        /// </summary>
        /// <value>Обязательность характеристики.</value>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Используется ли характеристика в фильтре.
        /// </summary>
        /// <value>Используется ли характеристика в фильтре.</value>
        [DataMember(Name = "filtering", IsRequired = true, EmitDefaultValue = true)]
        public bool Filtering { get; set; }

        /// <summary>
        /// Является ли характеристика особенностью варианта.
        /// </summary>
        /// <value>Является ли характеристика особенностью варианта.</value>
        [DataMember(Name = "distinctive", IsRequired = true, EmitDefaultValue = true)]
        public bool Distinctive { get; set; }

        /// <summary>
        /// Можно ли передать сразу несколько значений.
        /// </summary>
        /// <value>Можно ли передать сразу несколько значений.</value>
        [DataMember(Name = "multivalue", IsRequired = true, EmitDefaultValue = true)]
        public bool Multivalue { get; set; }

        /// <summary>
        /// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [DataMember(Name = "allowCustomValues", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowCustomValues { get; set; }

        /// <summary>
        /// Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [DataMember(Name = "values", EmitDefaultValue = true)]
        public List<ParameterValueOptionDTO> Values { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public ParameterValueConstraintsDTO Constraints { get; set; }

        /// <summary>
        /// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [DataMember(Name = "valueRestrictions", EmitDefaultValue = true)]
        public List<ValueRestrictionDTO> ValueRestrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoryParameterDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RecommendationTypes: ").Append(RecommendationTypes).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Filtering: ").Append(Filtering).Append("\n");
            sb.Append("  Distinctive: ").Append(Distinctive).Append("\n");
            sb.Append("  Multivalue: ").Append(Multivalue).Append("\n");
            sb.Append("  AllowCustomValues: ").Append(AllowCustomValues).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  ValueRestrictions: ").Append(ValueRestrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
