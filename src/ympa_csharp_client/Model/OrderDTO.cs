/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Заказ.
    /// </summary>
    [DataContract(Name = "OrderDTO")]
    public partial class OrderDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public OrderStatusType? Status { get; set; }

        /// <summary>
        /// Gets or Sets Substatus
        /// </summary>
        [DataMember(Name = "substatus", EmitDefaultValue = false)]
        public OrderSubstatusType? Substatus { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyType? Currency { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "paymentType", EmitDefaultValue = false)]
        public OrderPaymentType? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "paymentMethod", EmitDefaultValue = false)]
        public OrderPaymentMethodType? PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets TaxSystem
        /// </summary>
        [DataMember(Name = "taxSystem", EmitDefaultValue = false)]
        public OrderTaxSystemType? TaxSystem { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор заказа..</param>
        /// <param name="status">status.</param>
        /// <param name="substatus">substatus.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="currency">currency.</param>
        /// <param name="itemsTotal">Платеж покупателя. .</param>
        /// <param name="deliveryTotal">Стоимость доставки. .</param>
        /// <param name="buyerItemsTotal">{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. .</param>
        /// <param name="buyerTotal">{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. .</param>
        /// <param name="buyerItemsTotalBeforeDiscount">Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. .</param>
        /// <param name="buyerTotalBeforeDiscount">{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). .</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="fake">Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. .</param>
        /// <param name="items">Список товаров в заказе. (required).</param>
        /// <param name="subsidies">Список субсидий по типам..</param>
        /// <param name="delivery">delivery.</param>
        /// <param name="buyer">buyer.</param>
        /// <param name="notes">Комментарий к заказу..</param>
        /// <param name="taxSystem">taxSystem.</param>
        /// <param name="cancelRequested">**Только для модели DBS**  Запрошена ли отмена. .</param>
        /// <param name="expiryDate">expiryDate.</param>
        public OrderDTO(long id = default(long), OrderStatusType? status = default(OrderStatusType?), OrderSubstatusType? substatus = default(OrderSubstatusType?), string creationDate = default(string), string updatedAt = default(string), CurrencyType? currency = default(CurrencyType?), decimal itemsTotal = default(decimal), decimal deliveryTotal = default(decimal), decimal buyerItemsTotal = default(decimal), decimal buyerTotal = default(decimal), decimal buyerItemsTotalBeforeDiscount = default(decimal), decimal buyerTotalBeforeDiscount = default(decimal), OrderPaymentType? paymentType = default(OrderPaymentType?), OrderPaymentMethodType? paymentMethod = default(OrderPaymentMethodType?), bool fake = default(bool), List<OrderItemDTO> items = default(List<OrderItemDTO>), List<OrderSubsidyDTO> subsidies = default(List<OrderSubsidyDTO>), OrderDeliveryDTO delivery = default(OrderDeliveryDTO), OrderBuyerDTO buyer = default(OrderBuyerDTO), string notes = default(string), OrderTaxSystemType? taxSystem = default(OrderTaxSystemType?), bool cancelRequested = default(bool), string expiryDate = default(string))
        {
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for OrderDTO and cannot be null");
            }
            this.Items = items;
            this.Id = id;
            this.Status = status;
            this.Substatus = substatus;
            this.CreationDate = creationDate;
            this.UpdatedAt = updatedAt;
            this.Currency = currency;
            this.ItemsTotal = itemsTotal;
            this.DeliveryTotal = deliveryTotal;
            this.BuyerItemsTotal = buyerItemsTotal;
            this.BuyerTotal = buyerTotal;
            this.BuyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount;
            this.BuyerTotalBeforeDiscount = buyerTotalBeforeDiscount;
            this.PaymentType = paymentType;
            this.PaymentMethod = paymentMethod;
            this.Fake = fake;
            this.Subsidies = subsidies;
            this.Delivery = delivery;
            this.Buyer = buyer;
            this.Notes = notes;
            this.TaxSystem = taxSystem;
            this.CancelRequested = cancelRequested;
            this.ExpiryDate = expiryDate;
        }

        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Платеж покупателя. 
        /// </summary>
        /// <value>Платеж покупателя. </value>
        [DataMember(Name = "itemsTotal", EmitDefaultValue = false)]
        public decimal ItemsTotal { get; set; }

        /// <summary>
        /// Стоимость доставки. 
        /// </summary>
        /// <value>Стоимость доставки. </value>
        [DataMember(Name = "deliveryTotal", EmitDefaultValue = false)]
        public decimal DeliveryTotal { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. </value>
        [DataMember(Name = "buyerItemsTotal", EmitDefaultValue = false)]
        [Obsolete]
        public decimal BuyerItemsTotal { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. </value>
        [DataMember(Name = "buyerTotal", EmitDefaultValue = false)]
        [Obsolete]
        public decimal BuyerTotal { get; set; }

        /// <summary>
        /// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name = "buyerItemsTotalBeforeDiscount", EmitDefaultValue = false)]
        public decimal BuyerItemsTotalBeforeDiscount { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). </value>
        [DataMember(Name = "buyerTotalBeforeDiscount", EmitDefaultValue = false)]
        [Obsolete]
        public decimal BuyerTotalBeforeDiscount { get; set; }

        /// <summary>
        /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
        /// </summary>
        /// <value>Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. </value>
        [DataMember(Name = "fake", EmitDefaultValue = true)]
        public bool Fake { get; set; }

        /// <summary>
        /// Список товаров в заказе.
        /// </summary>
        /// <value>Список товаров в заказе.</value>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<OrderItemDTO> Items { get; set; }

        /// <summary>
        /// Список субсидий по типам.
        /// </summary>
        /// <value>Список субсидий по типам.</value>
        [DataMember(Name = "subsidies", EmitDefaultValue = true)]
        public List<OrderSubsidyDTO> Subsidies { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name = "delivery", EmitDefaultValue = false)]
        public OrderDeliveryDTO Delivery { get; set; }

        /// <summary>
        /// Gets or Sets Buyer
        /// </summary>
        [DataMember(Name = "buyer", EmitDefaultValue = false)]
        public OrderBuyerDTO Buyer { get; set; }

        /// <summary>
        /// Комментарий к заказу.
        /// </summary>
        /// <value>Комментарий к заказу.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// **Только для модели DBS**  Запрошена ли отмена. 
        /// </summary>
        /// <value>**Только для модели DBS**  Запрошена ли отмена. </value>
        [DataMember(Name = "cancelRequested", EmitDefaultValue = true)]
        public bool CancelRequested { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Substatus: ").Append(Substatus).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ItemsTotal: ").Append(ItemsTotal).Append("\n");
            sb.Append("  DeliveryTotal: ").Append(DeliveryTotal).Append("\n");
            sb.Append("  BuyerItemsTotal: ").Append(BuyerItemsTotal).Append("\n");
            sb.Append("  BuyerTotal: ").Append(BuyerTotal).Append("\n");
            sb.Append("  BuyerItemsTotalBeforeDiscount: ").Append(BuyerItemsTotalBeforeDiscount).Append("\n");
            sb.Append("  BuyerTotalBeforeDiscount: ").Append(BuyerTotalBeforeDiscount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Fake: ").Append(Fake).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Subsidies: ").Append(Subsidies).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TaxSystem: ").Append(TaxSystem).Append("\n");
            sb.Append("  CancelRequested: ").Append(CancelRequested).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
