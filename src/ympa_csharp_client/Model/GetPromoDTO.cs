/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация об акции.
    /// </summary>
    [DataContract(Name = "GetPromoDTO")]
    public partial class GetPromoDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPromoDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetPromoDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPromoDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор акции. (required).</param>
        /// <param name="name">Название акции. (required).</param>
        /// <param name="period">period (required).</param>
        /// <param name="participating">Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).  (required).</param>
        /// <param name="assortmentInfo">assortmentInfo (required).</param>
        /// <param name="mechanicsInfo">mechanicsInfo (required).</param>
        /// <param name="bestsellerInfo">bestsellerInfo (required).</param>
        /// <param name="channels">Список каналов продвижения товаров..</param>
        /// <param name="constraints">constraints.</param>
        public GetPromoDTO(string id = default(string), string name = default(string), PromoPeriodDTO period = default(PromoPeriodDTO), bool participating = default(bool), GetPromoAssortmentInfoDTO assortmentInfo = default(GetPromoAssortmentInfoDTO), GetPromoMechanicsInfoDTO mechanicsInfo = default(GetPromoMechanicsInfoDTO), GetPromoBestsellerInfoDTO bestsellerInfo = default(GetPromoBestsellerInfoDTO), List<ChannelType> channels = default(List<ChannelType>), GetPromoConstraintsDTO constraints = default(GetPromoConstraintsDTO))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for GetPromoDTO and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GetPromoDTO and cannot be null");
            }
            this.Name = name;
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new ArgumentNullException("period is a required property for GetPromoDTO and cannot be null");
            }
            this.Period = period;
            this.Participating = participating;
            // to ensure "assortmentInfo" is required (not null)
            if (assortmentInfo == null)
            {
                throw new ArgumentNullException("assortmentInfo is a required property for GetPromoDTO and cannot be null");
            }
            this.AssortmentInfo = assortmentInfo;
            // to ensure "mechanicsInfo" is required (not null)
            if (mechanicsInfo == null)
            {
                throw new ArgumentNullException("mechanicsInfo is a required property for GetPromoDTO and cannot be null");
            }
            this.MechanicsInfo = mechanicsInfo;
            // to ensure "bestsellerInfo" is required (not null)
            if (bestsellerInfo == null)
            {
                throw new ArgumentNullException("bestsellerInfo is a required property for GetPromoDTO and cannot be null");
            }
            this.BestsellerInfo = bestsellerInfo;
            this.Channels = channels;
            this.Constraints = constraints;
        }

        /// <summary>
        /// Идентификатор акции.
        /// </summary>
        /// <value>Идентификатор акции.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Название акции.
        /// </summary>
        /// <value>Название акции.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public PromoPeriodDTO Period { get; set; }

        /// <summary>
        /// Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
        /// </summary>
        /// <value>Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). </value>
        [DataMember(Name = "participating", IsRequired = true, EmitDefaultValue = true)]
        public bool Participating { get; set; }

        /// <summary>
        /// Gets or Sets AssortmentInfo
        /// </summary>
        [DataMember(Name = "assortmentInfo", IsRequired = true, EmitDefaultValue = true)]
        public GetPromoAssortmentInfoDTO AssortmentInfo { get; set; }

        /// <summary>
        /// Gets or Sets MechanicsInfo
        /// </summary>
        [DataMember(Name = "mechanicsInfo", IsRequired = true, EmitDefaultValue = true)]
        public GetPromoMechanicsInfoDTO MechanicsInfo { get; set; }

        /// <summary>
        /// Gets or Sets BestsellerInfo
        /// </summary>
        [DataMember(Name = "bestsellerInfo", IsRequired = true, EmitDefaultValue = true)]
        public GetPromoBestsellerInfoDTO BestsellerInfo { get; set; }

        /// <summary>
        /// Список каналов продвижения товаров.
        /// </summary>
        /// <value>Список каналов продвижения товаров.</value>
        [DataMember(Name = "channels", EmitDefaultValue = true)]
        public List<ChannelType> Channels { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public GetPromoConstraintsDTO Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPromoDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Participating: ").Append(Participating).Append("\n");
            sb.Append("  AssortmentInfo: ").Append(AssortmentInfo).Append("\n");
            sb.Append("  MechanicsInfo: ").Append(MechanicsInfo).Append("\n");
            sb.Append("  BestsellerInfo: ").Append(BestsellerInfo).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
