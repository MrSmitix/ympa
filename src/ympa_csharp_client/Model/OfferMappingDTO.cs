/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о текущей карточке товара на Маркете.
    /// </summary>
    [DataContract(Name = "OfferMappingDTO")]
    public partial class OfferMappingDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferMappingDTO" /> class.
        /// </summary>
        /// <param name="marketSku">SKU на Маркете..</param>
        /// <param name="modelId">Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр &#x60;marketSku&#x60;), но одинаковый идентификатор модели товара. .</param>
        /// <param name="categoryId">Идентификатор категории для текущей карточки товара на Маркете..</param>
        public OfferMappingDTO(long marketSku = default(long), long modelId = default(long), long categoryId = default(long))
        {
            this.MarketSku = marketSku;
            this.ModelId = modelId;
            this.CategoryId = categoryId;
        }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name = "marketSku", EmitDefaultValue = false)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр &#x60;marketSku&#x60;), но одинаковый идентификатор модели товара. 
        /// </summary>
        /// <value>Идентификатор модели для текущей карточки товара на Маркете.  Например, две лопатки разных цветов имеют разные SKU на Маркете (параметр &#x60;marketSku&#x60;), но одинаковый идентификатор модели товара. </value>
        [DataMember(Name = "modelId", EmitDefaultValue = false)]
        public long ModelId { get; set; }

        /// <summary>
        /// Идентификатор категории для текущей карточки товара на Маркете.
        /// </summary>
        /// <value>Идентификатор категории для текущей карточки товара на Маркете.</value>
        [DataMember(Name = "categoryId", EmitDefaultValue = false)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OfferMappingDTO {\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
