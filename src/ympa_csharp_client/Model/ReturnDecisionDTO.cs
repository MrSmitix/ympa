/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Решения по возвратам.
    /// </summary>
    [DataContract(Name = "ReturnDecisionDTO")]
    public partial class ReturnDecisionDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ReasonType
        /// </summary>
        [DataMember(Name = "reasonType", EmitDefaultValue = false)]
        public ReturnDecisionReasonType? ReasonType { get; set; }

        /// <summary>
        /// Gets or Sets SubreasonType
        /// </summary>
        [DataMember(Name = "subreasonType", EmitDefaultValue = false)]
        public ReturnDecisionSubreasonType? SubreasonType { get; set; }

        /// <summary>
        /// Gets or Sets DecisionType
        /// </summary>
        [DataMember(Name = "decisionType", EmitDefaultValue = false)]
        public ReturnDecisionType? DecisionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnDecisionDTO" /> class.
        /// </summary>
        /// <param name="returnItemId">Идентификатор товара в возврате..</param>
        /// <param name="count">Количество единиц товара..</param>
        /// <param name="comment">Комментарий..</param>
        /// <param name="reasonType">reasonType.</param>
        /// <param name="subreasonType">subreasonType.</param>
        /// <param name="decisionType">decisionType.</param>
        /// <param name="refundAmount">Сумма возврата..</param>
        /// <param name="partnerCompensation">Компенсация за обратную доставку..</param>
        /// <param name="images">Список хеш-кодов фотографий товара от покупателя..</param>
        public ReturnDecisionDTO(long returnItemId = default(long), int count = default(int), string comment = default(string), ReturnDecisionReasonType? reasonType = default(ReturnDecisionReasonType?), ReturnDecisionSubreasonType? subreasonType = default(ReturnDecisionSubreasonType?), ReturnDecisionType? decisionType = default(ReturnDecisionType?), long refundAmount = default(long), long partnerCompensation = default(long), List<string> images = default(List<string>))
        {
            this.ReturnItemId = returnItemId;
            this.Count = count;
            this.Comment = comment;
            this.ReasonType = reasonType;
            this.SubreasonType = subreasonType;
            this.DecisionType = decisionType;
            this.RefundAmount = refundAmount;
            this.PartnerCompensation = partnerCompensation;
            this.Images = images;
        }

        /// <summary>
        /// Идентификатор товара в возврате.
        /// </summary>
        /// <value>Идентификатор товара в возврате.</value>
        [DataMember(Name = "returnItemId", EmitDefaultValue = false)]
        public long ReturnItemId { get; set; }

        /// <summary>
        /// Количество единиц товара.
        /// </summary>
        /// <value>Количество единиц товара.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Комментарий.
        /// </summary>
        /// <value>Комментарий.</value>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Сумма возврата.
        /// </summary>
        /// <value>Сумма возврата.</value>
        [DataMember(Name = "refundAmount", EmitDefaultValue = false)]
        public long RefundAmount { get; set; }

        /// <summary>
        /// Компенсация за обратную доставку.
        /// </summary>
        /// <value>Компенсация за обратную доставку.</value>
        [DataMember(Name = "partnerCompensation", EmitDefaultValue = false)]
        public long PartnerCompensation { get; set; }

        /// <summary>
        /// Список хеш-кодов фотографий товара от покупателя.
        /// </summary>
        /// <value>Список хеш-кодов фотографий товара от покупателя.</value>
        [DataMember(Name = "images", EmitDefaultValue = true)]
        public List<string> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnDecisionDTO {\n");
            sb.Append("  ReturnItemId: ").Append(ReturnItemId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ReasonType: ").Append(ReasonType).Append("\n");
            sb.Append("  SubreasonType: ").Append(SubreasonType).Append("\n");
            sb.Append("  DecisionType: ").Append(DecisionType).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  PartnerCompensation: ").Append(PartnerCompensation).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
