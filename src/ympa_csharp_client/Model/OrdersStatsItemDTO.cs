/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
    /// </summary>
    [DataContract(Name = "OrdersStatsItemDTO")]
    public partial class OrdersStatsItemDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersStatsItemDTO" /> class.
        /// </summary>
        /// <param name="offerName">Название товара..</param>
        /// <param name="marketSku">SKU на Маркете..</param>
        /// <param name="shopSku">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="count">Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. .</param>
        /// <param name="prices">Цена или скидки на товар..</param>
        /// <param name="warehouse">warehouse.</param>
        /// <param name="details">Информация об удалении товара из заказа..</param>
        /// <param name="cisList">Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/)..</param>
        /// <param name="initialCount">Первоначальное количество единиц товара..</param>
        /// <param name="bidFee">Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. .</param>
        /// <param name="cofinanceThreshold">Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. .</param>
        /// <param name="cofinanceValue">Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. .</param>
        public OrdersStatsItemDTO(string offerName = default(string), long marketSku = default(long), string shopSku = default(string), int count = default(int), List<OrdersStatsPriceDTO> prices = default(List<OrdersStatsPriceDTO>), OrdersStatsWarehouseDTO warehouse = default(OrdersStatsWarehouseDTO), List<OrdersStatsDetailsDTO> details = default(List<OrdersStatsDetailsDTO>), List<string> cisList = default(List<string>), int initialCount = default(int), int bidFee = default(int), decimal cofinanceThreshold = default(decimal), decimal cofinanceValue = default(decimal))
        {
            this.OfferName = offerName;
            this.MarketSku = marketSku;
            this.ShopSku = shopSku;
            this.Count = count;
            this.Prices = prices;
            this.Warehouse = warehouse;
            this.Details = details;
            this.CisList = cisList;
            this.InitialCount = initialCount;
            this.BidFee = bidFee;
            this.CofinanceThreshold = cofinanceThreshold;
            this.CofinanceValue = cofinanceValue;
        }

        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name = "offerName", EmitDefaultValue = false)]
        public string OfferName { get; set; }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name = "marketSku", EmitDefaultValue = false)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "shopSku", EmitDefaultValue = false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
        /// </summary>
        /// <value>Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. </value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Цена или скидки на товар.
        /// </summary>
        /// <value>Цена или скидки на товар.</value>
        [DataMember(Name = "prices", EmitDefaultValue = true)]
        public List<OrdersStatsPriceDTO> Prices { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name = "warehouse", EmitDefaultValue = false)]
        public OrdersStatsWarehouseDTO Warehouse { get; set; }

        /// <summary>
        /// Информация об удалении товара из заказа.
        /// </summary>
        /// <value>Информация об удалении товара из заказа.</value>
        [DataMember(Name = "details", EmitDefaultValue = true)]
        public List<OrdersStatsDetailsDTO> Details { get; set; }

        /// <summary>
        /// Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
        /// </summary>
        /// <value>Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).</value>
        [DataMember(Name = "cisList", EmitDefaultValue = true)]
        public List<string> CisList { get; set; }

        /// <summary>
        /// Первоначальное количество единиц товара.
        /// </summary>
        /// <value>Первоначальное количество единиц товара.</value>
        [DataMember(Name = "initialCount", EmitDefaultValue = false)]
        public int InitialCount { get; set; }

        /// <summary>
        /// Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
        /// </summary>
        /// <value>Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. </value>
        /// <example>570</example>
        [DataMember(Name = "bidFee", EmitDefaultValue = false)]
        public int BidFee { get; set; }

        /// <summary>
        /// Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
        /// </summary>
        /// <value>Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. </value>
        [DataMember(Name = "cofinanceThreshold", EmitDefaultValue = false)]
        public decimal CofinanceThreshold { get; set; }

        /// <summary>
        /// Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
        /// </summary>
        /// <value>Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. </value>
        [DataMember(Name = "cofinanceValue", EmitDefaultValue = false)]
        public decimal CofinanceValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrdersStatsItemDTO {\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  CisList: ").Append(CisList).Append("\n");
            sb.Append("  InitialCount: ").Append(InitialCount).Append("\n");
            sb.Append("  BidFee: ").Append(BidFee).Append("\n");
            sb.Append("  CofinanceThreshold: ").Append(CofinanceThreshold).Append("\n");
            sb.Append("  CofinanceValue: ").Append(CofinanceValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShopSku (string) maxLength
            if (this.ShopSku != null && this.ShopSku.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be less than 255.", new [] { "ShopSku" });
            }

            // ShopSku (string) minLength
            if (this.ShopSku != null && this.ShopSku.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be greater than 1.", new [] { "ShopSku" });
            }

            if (this.ShopSku != null) {
                // ShopSku (string) pattern
                Regex regexShopSku = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexShopSku.Match(this.ShopSku).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShopSku, must match a pattern of " + regexShopSku, new [] { "ShopSku" });
                }
            }

            // BidFee (int) maximum
            if (this.BidFee > (int)10000)
            {
                yield return new ValidationResult("Invalid value for BidFee, must be a value less than or equal to 10000.", new [] { "BidFee" });
            }

            // BidFee (int) minimum
            if (this.BidFee < (int)0)
            {
                yield return new ValidationResult("Invalid value for BidFee, must be a value greater than or equal to 0.", new [] { "BidFee" });
            }

            yield break;
        }
    }

}
