/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Запрос информации об отгрузках.
    /// </summary>
    [DataContract(Name = "SearchShipmentsRequest")]
    public partial class SearchShipmentsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchShipmentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchShipmentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchShipmentsRequest" /> class.
        /// </summary>
        /// <param name="dateFrom">Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  (required).</param>
        /// <param name="dateTo">Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  (required).</param>
        /// <param name="statuses">Список статусов отгрузок..</param>
        /// <param name="orderIds">Список идентификаторов заказов из отгрузок..</param>
        /// <param name="cancelledOrders">Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;.  (default to true).</param>
        public SearchShipmentsRequest(DateOnly dateFrom = default(DateOnly), DateOnly dateTo = default(DateOnly), List<ShipmentStatusType> statuses = default(List<ShipmentStatusType>), List<long> orderIds = default(List<long>), bool cancelledOrders = true)
        {
            // to ensure "dateFrom" is required (not null)
            if (dateFrom == null)
            {
                throw new ArgumentNullException("dateFrom is a required property for SearchShipmentsRequest and cannot be null");
            }
            this.DateFrom = dateFrom;
            // to ensure "dateTo" is required (not null)
            if (dateTo == null)
            {
                throw new ArgumentNullException("dateTo is a required property for SearchShipmentsRequest and cannot be null");
            }
            this.DateTo = dateTo;
            this.Statuses = statuses;
            this.OrderIds = orderIds;
            this.CancelledOrders = cancelledOrders;
        }

        /// <summary>
        /// Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Начальная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name = "dateFrom", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DateFrom { get; set; }

        /// <summary>
        /// Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Конечная дата для фильтрации по дате отгрузки (включительно).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name = "dateTo", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly DateTo { get; set; }

        /// <summary>
        /// Список статусов отгрузок.
        /// </summary>
        /// <value>Список статусов отгрузок.</value>
        [DataMember(Name = "statuses", EmitDefaultValue = true)]
        public List<ShipmentStatusType> Statuses { get; set; }

        /// <summary>
        /// Список идентификаторов заказов из отгрузок.
        /// </summary>
        /// <value>Список идентификаторов заказов из отгрузок.</value>
        [DataMember(Name = "orderIds", EmitDefaultValue = true)]
        public List<long> OrderIds { get; set; }

        /// <summary>
        /// Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. 
        /// </summary>
        /// <value>Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. </value>
        [DataMember(Name = "cancelledOrders", EmitDefaultValue = true)]
        public bool CancelledOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchShipmentsRequest {\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  CancelledOrders: ").Append(CancelledOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
