/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; в параметре &#x60;deleteAllOffers&#x60;;  * часть товаров, передайте их идентификаторы в параметре &#x60;offersIds&#x60;. 
    /// </summary>
    [DataContract(Name = "DeletePromoOffersRequest")]
    public partial class DeletePromoOffersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePromoOffersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeletePromoOffersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePromoOffersRequest" /> class.
        /// </summary>
        /// <param name="promoId">Идентификатор акции. (required).</param>
        /// <param name="deleteAllOffers">Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; и не передавайте параметр &#x60;offerIds&#x60;..</param>
        /// <param name="offerIds">Товары, которые нужно убрать из акции..</param>
        public DeletePromoOffersRequest(string promoId = default(string), bool deleteAllOffers = default(bool), List<string> offerIds = default(List<string>))
        {
            // to ensure "promoId" is required (not null)
            if (promoId == null)
            {
                throw new ArgumentNullException("promoId is a required property for DeletePromoOffersRequest and cannot be null");
            }
            this.PromoId = promoId;
            this.DeleteAllOffers = deleteAllOffers;
            this.OfferIds = offerIds;
        }

        /// <summary>
        /// Идентификатор акции.
        /// </summary>
        /// <value>Идентификатор акции.</value>
        [DataMember(Name = "promoId", IsRequired = true, EmitDefaultValue = true)]
        public string PromoId { get; set; }

        /// <summary>
        /// Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; и не передавайте параметр &#x60;offerIds&#x60;.
        /// </summary>
        /// <value>Чтобы убрать все товары из акции и больше не участвовать в ней, передайте значение &#x60;true&#x60; и не передавайте параметр &#x60;offerIds&#x60;.</value>
        [DataMember(Name = "deleteAllOffers", EmitDefaultValue = true)]
        public bool DeleteAllOffers { get; set; }

        /// <summary>
        /// Товары, которые нужно убрать из акции.
        /// </summary>
        /// <value>Товары, которые нужно убрать из акции.</value>
        [DataMember(Name = "offerIds", EmitDefaultValue = true)]
        public List<string> OfferIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeletePromoOffersRequest {\n");
            sb.Append("  PromoId: ").Append(PromoId).Append("\n");
            sb.Append("  DeleteAllOffers: ").Append(DeleteAllOffers).Append("\n");
            sb.Append("  OfferIds: ").Append(OfferIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
