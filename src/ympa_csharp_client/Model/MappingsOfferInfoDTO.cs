/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Базовая информация о товарах в каталоге.
    /// </summary>
    [DataContract(Name = "MappingsOfferInfoDTO")]
    public partial class MappingsOfferInfoDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name = "availability", EmitDefaultValue = false)]
        public OfferAvailabilityStatusType? Availability { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsOfferInfoDTO" /> class.
        /// </summary>
        /// <param name="name">Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) .</param>
        /// <param name="shopSku">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="category">Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. .</param>
        /// <param name="vendor">Название бренда или производителя. Должно быть записано так, как его пишет сам бренд..</param>
        /// <param name="vendorCode">Артикул товара от производителя..</param>
        /// <param name="description">Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) .</param>
        /// <param name="id">Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) .</param>
        /// <param name="feedId">Идентификатор фида..</param>
        /// <param name="barcodes">Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  .</param>
        /// <param name="urls">URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. .</param>
        /// <param name="pictures">Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;. .</param>
        /// <param name="manufacturer">Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. .</param>
        /// <param name="manufacturerCountries">Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. .</param>
        /// <param name="minShipment">Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. .</param>
        /// <param name="transportUnitSize">Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. .</param>
        /// <param name="quantumOfSupply">Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. .</param>
        /// <param name="deliveryDurationDays">Срок, за который продавец поставляет товары на склад, в днях..</param>
        /// <param name="boxCount">Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. .</param>
        /// <param name="customsCommodityCodes">Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. .</param>
        /// <param name="weightDimensions">weightDimensions.</param>
        /// <param name="supplyScheduleDays">Дни недели, в которые продавец поставляет товары на склад..</param>
        /// <param name="shelfLifeDays">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. .</param>
        /// <param name="lifeTimeDays">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. .</param>
        /// <param name="guaranteePeriodDays">Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. .</param>
        /// <param name="processingState">processingState.</param>
        /// <param name="availability">availability.</param>
        /// <param name="shelfLife">shelfLife.</param>
        /// <param name="lifeTime">lifeTime.</param>
        /// <param name="guaranteePeriod">guaranteePeriod.</param>
        /// <param name="certificate">Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) .</param>
        public MappingsOfferInfoDTO(string name = default(string), string shopSku = default(string), string category = default(string), string vendor = default(string), string vendorCode = default(string), string description = default(string), string id = default(string), long feedId = default(long), List<string> barcodes = default(List<string>), List<string> urls = default(List<string>), List<string> pictures = default(List<string>), string manufacturer = default(string), List<string> manufacturerCountries = default(List<string>), int minShipment = default(int), int transportUnitSize = default(int), int quantumOfSupply = default(int), int deliveryDurationDays = default(int), int boxCount = default(int), List<string> customsCommodityCodes = default(List<string>), OfferWeightDimensionsDTO weightDimensions = default(OfferWeightDimensionsDTO), List<DayOfWeekType> supplyScheduleDays = default(List<DayOfWeekType>), int shelfLifeDays = default(int), int lifeTimeDays = default(int), int guaranteePeriodDays = default(int), OfferProcessingStateDTO processingState = default(OfferProcessingStateDTO), OfferAvailabilityStatusType? availability = default(OfferAvailabilityStatusType?), TimePeriodDTO shelfLife = default(TimePeriodDTO), TimePeriodDTO lifeTime = default(TimePeriodDTO), TimePeriodDTO guaranteePeriod = default(TimePeriodDTO), string certificate = default(string))
        {
            this.Name = name;
            this.ShopSku = shopSku;
            this.Category = category;
            this.Vendor = vendor;
            this.VendorCode = vendorCode;
            this.Description = description;
            this.Id = id;
            this.FeedId = feedId;
            this.Barcodes = barcodes;
            this.Urls = urls;
            this.Pictures = pictures;
            this.Manufacturer = manufacturer;
            this.ManufacturerCountries = manufacturerCountries;
            this.MinShipment = minShipment;
            this.TransportUnitSize = transportUnitSize;
            this.QuantumOfSupply = quantumOfSupply;
            this.DeliveryDurationDays = deliveryDurationDays;
            this.BoxCount = boxCount;
            this.CustomsCommodityCodes = customsCommodityCodes;
            this.WeightDimensions = weightDimensions;
            this.SupplyScheduleDays = supplyScheduleDays;
            this.ShelfLifeDays = shelfLifeDays;
            this.LifeTimeDays = lifeTimeDays;
            this.GuaranteePeriodDays = guaranteePeriodDays;
            this.ProcessingState = processingState;
            this.Availability = availability;
            this.ShelfLife = shelfLife;
            this.LifeTime = lifeTime;
            this.GuaranteePeriod = guaranteePeriod;
            this.Certificate = certificate;
        }

        /// <summary>
        /// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
        /// </summary>
        /// <value>Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) </value>
        /// <example>Ударная дрель Makita HP1630, 710 Вт</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "shopSku", EmitDefaultValue = false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
        /// </summary>
        /// <value>Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. </value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
        /// </summary>
        /// <value>Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.</value>
        /// <example>LEVENHUK</example>
        [DataMember(Name = "vendor", EmitDefaultValue = false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Артикул товара от производителя.
        /// </summary>
        /// <value>Артикул товара от производителя.</value>
        /// <example>VNDR-0005A</example>
        [DataMember(Name = "vendorCode", EmitDefaultValue = false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
        /// </summary>
        /// <value>Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Идентификатор фида.
        /// </summary>
        /// <value>Идентификатор фида.</value>
        [DataMember(Name = "feedId", EmitDefaultValue = false)]
        public long FeedId { get; set; }

        /// <summary>
        /// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
        /// </summary>
        /// <value>Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  </value>
        [DataMember(Name = "barcodes", EmitDefaultValue = true)]
        public List<string> Barcodes { get; set; }

        /// <summary>
        /// URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
        /// </summary>
        /// <value>URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. </value>
        [DataMember(Name = "urls", EmitDefaultValue = true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;. 
        /// </summary>
        /// <value>Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;. </value>
        [DataMember(Name = "pictures", EmitDefaultValue = true)]
        public List<string> Pictures { get; set; }

        /// <summary>
        /// Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
        /// </summary>
        /// <value>Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. </value>
        [DataMember(Name = "manufacturer", EmitDefaultValue = false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
        /// </summary>
        /// <value>Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. </value>
        [DataMember(Name = "manufacturerCountries", EmitDefaultValue = true)]
        public List<string> ManufacturerCountries { get; set; }

        /// <summary>
        /// Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
        /// </summary>
        /// <value>Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. </value>
        [DataMember(Name = "minShipment", EmitDefaultValue = false)]
        public int MinShipment { get; set; }

        /// <summary>
        /// Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
        /// </summary>
        /// <value>Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. </value>
        [DataMember(Name = "transportUnitSize", EmitDefaultValue = false)]
        public int TransportUnitSize { get; set; }

        /// <summary>
        /// Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
        /// </summary>
        /// <value>Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. </value>
        [DataMember(Name = "quantumOfSupply", EmitDefaultValue = false)]
        public int QuantumOfSupply { get; set; }

        /// <summary>
        /// Срок, за который продавец поставляет товары на склад, в днях.
        /// </summary>
        /// <value>Срок, за который продавец поставляет товары на склад, в днях.</value>
        [DataMember(Name = "deliveryDurationDays", EmitDefaultValue = false)]
        public int DeliveryDurationDays { get; set; }

        /// <summary>
        /// Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
        /// </summary>
        /// <value>Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. </value>
        [DataMember(Name = "boxCount", EmitDefaultValue = false)]
        public int BoxCount { get; set; }

        /// <summary>
        /// Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
        /// </summary>
        /// <value>Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. </value>
        [DataMember(Name = "customsCommodityCodes", EmitDefaultValue = true)]
        public List<string> CustomsCommodityCodes { get; set; }

        /// <summary>
        /// Gets or Sets WeightDimensions
        /// </summary>
        [DataMember(Name = "weightDimensions", EmitDefaultValue = false)]
        public OfferWeightDimensionsDTO WeightDimensions { get; set; }

        /// <summary>
        /// Дни недели, в которые продавец поставляет товары на склад.
        /// </summary>
        /// <value>Дни недели, в которые продавец поставляет товары на склад.</value>
        [DataMember(Name = "supplyScheduleDays", EmitDefaultValue = true)]
        public List<DayOfWeekType> SupplyScheduleDays { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. </value>
        [DataMember(Name = "shelfLifeDays", EmitDefaultValue = false)]
        public int ShelfLifeDays { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. </value>
        [DataMember(Name = "lifeTimeDays", EmitDefaultValue = false)]
        public int LifeTimeDays { get; set; }

        /// <summary>
        /// Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
        /// </summary>
        /// <value>Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. </value>
        [DataMember(Name = "guaranteePeriodDays", EmitDefaultValue = false)]
        public int GuaranteePeriodDays { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingState
        /// </summary>
        [DataMember(Name = "processingState", EmitDefaultValue = false)]
        public OfferProcessingStateDTO ProcessingState { get; set; }

        /// <summary>
        /// Gets or Sets ShelfLife
        /// </summary>
        [DataMember(Name = "shelfLife", EmitDefaultValue = false)]
        public TimePeriodDTO ShelfLife { get; set; }

        /// <summary>
        /// Gets or Sets LifeTime
        /// </summary>
        [DataMember(Name = "lifeTime", EmitDefaultValue = false)]
        public TimePeriodDTO LifeTime { get; set; }

        /// <summary>
        /// Gets or Sets GuaranteePeriod
        /// </summary>
        [DataMember(Name = "guaranteePeriod", EmitDefaultValue = false)]
        public TimePeriodDTO GuaranteePeriod { get; set; }

        /// <summary>
        /// Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
        /// </summary>
        /// <value>Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) </value>
        [DataMember(Name = "certificate", EmitDefaultValue = false)]
        public string Certificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappingsOfferInfoDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  Barcodes: ").Append(Barcodes).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerCountries: ").Append(ManufacturerCountries).Append("\n");
            sb.Append("  MinShipment: ").Append(MinShipment).Append("\n");
            sb.Append("  TransportUnitSize: ").Append(TransportUnitSize).Append("\n");
            sb.Append("  QuantumOfSupply: ").Append(QuantumOfSupply).Append("\n");
            sb.Append("  DeliveryDurationDays: ").Append(DeliveryDurationDays).Append("\n");
            sb.Append("  BoxCount: ").Append(BoxCount).Append("\n");
            sb.Append("  CustomsCommodityCodes: ").Append(CustomsCommodityCodes).Append("\n");
            sb.Append("  WeightDimensions: ").Append(WeightDimensions).Append("\n");
            sb.Append("  SupplyScheduleDays: ").Append(SupplyScheduleDays).Append("\n");
            sb.Append("  ShelfLifeDays: ").Append(ShelfLifeDays).Append("\n");
            sb.Append("  LifeTimeDays: ").Append(LifeTimeDays).Append("\n");
            sb.Append("  GuaranteePeriodDays: ").Append(GuaranteePeriodDays).Append("\n");
            sb.Append("  ProcessingState: ").Append(ProcessingState).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  ShelfLife: ").Append(ShelfLife).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  GuaranteePeriod: ").Append(GuaranteePeriod).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // ShopSku (string) maxLength
            if (this.ShopSku != null && this.ShopSku.Length > 255)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be less than 255.", new [] { "ShopSku" });
            }

            // ShopSku (string) minLength
            if (this.ShopSku != null && this.ShopSku.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ShopSku, length must be greater than 1.", new [] { "ShopSku" });
            }

            if (this.ShopSku != null) {
                // ShopSku (string) pattern
                Regex regexShopSku = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexShopSku.Match(this.ShopSku).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShopSku, must match a pattern of " + regexShopSku, new [] { "ShopSku" });
                }
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 6000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 6000.", new [] { "Description" });
            }

            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Id, length must be less than 255.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", RegexOptions.CultureInvariant);
                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

}
