/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Логистическая информация по возврату.
    /// </summary>
    [DataContract(Name = "ReturnInstanceDTO")]
    public partial class ReturnInstanceDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StockType
        /// </summary>
        [DataMember(Name = "stockType", EmitDefaultValue = false)]
        public ReturnInstanceStockType? StockType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ReturnInstanceStatusType? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReturnInstanceDTO" /> class.
        /// </summary>
        /// <param name="stockType">stockType.</param>
        /// <param name="status">status.</param>
        /// <param name="cis">Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/)..</param>
        /// <param name="imei">Международный идентификатор мобильного оборудования..</param>
        public ReturnInstanceDTO(ReturnInstanceStockType? stockType = default(ReturnInstanceStockType?), ReturnInstanceStatusType? status = default(ReturnInstanceStatusType?), string cis = default(string), string imei = default(string))
        {
            this.StockType = stockType;
            this.Status = status;
            this.Cis = cis;
            this.Imei = imei;
        }

        /// <summary>
        /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
        /// </summary>
        /// <value>Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).</value>
        [DataMember(Name = "cis", EmitDefaultValue = false)]
        public string Cis { get; set; }

        /// <summary>
        /// Международный идентификатор мобильного оборудования.
        /// </summary>
        /// <value>Международный идентификатор мобильного оборудования.</value>
        [DataMember(Name = "imei", EmitDefaultValue = false)]
        public string Imei { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReturnInstanceDTO {\n");
            sb.Append("  StockType: ").Append(StockType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Cis: ").Append(Cis).Append("\n");
            sb.Append("  Imei: ").Append(Imei).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
