/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Отзыв пользователя Яндекс Маркета об указанном магазине.
    /// </summary>
    [DataContract(Name = "FeedbackDTO")]
    public partial class FeedbackDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public FeedbackStateType? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeedbackDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор отзыва..</param>
        /// <param name="createdAt">Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. .</param>
        /// <param name="text">Комментарий автора отзыва..</param>
        /// <param name="state">state.</param>
        /// <param name="author">author.</param>
        /// <param name="pro">Достоинства магазина, описанные в отзыве..</param>
        /// <param name="contra">Недостатки магазина, описанные в отзыве..</param>
        /// <param name="comments">Переписка автора отзыва с магазином. (required).</param>
        /// <param name="shop">shop.</param>
        /// <param name="resolved">Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. .</param>
        /// <param name="verified">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. .</param>
        /// <param name="recommend">Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. .</param>
        /// <param name="grades">grades.</param>
        /// <param name="order">order.</param>
        public FeedbackDTO(long id = default(long), DateTime createdAt = default(DateTime), string text = default(string), FeedbackStateType? state = default(FeedbackStateType?), FeedbackAuthorDTO author = default(FeedbackAuthorDTO), string pro = default(string), string contra = default(string), List<FeedbackCommentDTO> comments = default(List<FeedbackCommentDTO>), FeedbackShopDTO shop = default(FeedbackShopDTO), bool resolved = default(bool), bool verified = default(bool), bool recommend = default(bool), FeedbackGradesDTO grades = default(FeedbackGradesDTO), FeedbackOrderDTO order = default(FeedbackOrderDTO))
        {
            // to ensure "comments" is required (not null)
            if (comments == null)
            {
                throw new ArgumentNullException("comments is a required property for FeedbackDTO and cannot be null");
            }
            this.Comments = comments;
            this.Id = id;
            this.CreatedAt = createdAt;
            this.Text = text;
            this.State = state;
            this.Author = author;
            this.Pro = pro;
            this.Contra = contra;
            this.Shop = shop;
            this.Resolved = resolved;
            this.Verified = verified;
            this.Recommend = recommend;
            this.Grades = grades;
            this.Order = order;
        }

        /// <summary>
        /// Идентификатор отзыва.
        /// </summary>
        /// <value>Идентификатор отзыва.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. </value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Комментарий автора отзыва.
        /// </summary>
        /// <value>Комментарий автора отзыва.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public FeedbackAuthorDTO Author { get; set; }

        /// <summary>
        /// Достоинства магазина, описанные в отзыве.
        /// </summary>
        /// <value>Достоинства магазина, описанные в отзыве.</value>
        [DataMember(Name = "pro", EmitDefaultValue = false)]
        public string Pro { get; set; }

        /// <summary>
        /// Недостатки магазина, описанные в отзыве.
        /// </summary>
        /// <value>Недостатки магазина, описанные в отзыве.</value>
        [DataMember(Name = "contra", EmitDefaultValue = false)]
        public string Contra { get; set; }

        /// <summary>
        /// Переписка автора отзыва с магазином.
        /// </summary>
        /// <value>Переписка автора отзыва с магазином.</value>
        [DataMember(Name = "comments", IsRequired = true, EmitDefaultValue = true)]
        public List<FeedbackCommentDTO> Comments { get; set; }

        /// <summary>
        /// Gets or Sets Shop
        /// </summary>
        [DataMember(Name = "shop", EmitDefaultValue = false)]
        public FeedbackShopDTO Shop { get; set; }

        /// <summary>
        /// Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
        /// </summary>
        /// <value>Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. </value>
        [DataMember(Name = "resolved", EmitDefaultValue = true)]
        public bool Resolved { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. </value>
        [DataMember(Name = "verified", EmitDefaultValue = true)]
        public bool Verified { get; set; }

        /// <summary>
        /// Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
        /// </summary>
        /// <value>Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. </value>
        [DataMember(Name = "recommend", EmitDefaultValue = true)]
        public bool Recommend { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [DataMember(Name = "grades", EmitDefaultValue = false)]
        public FeedbackGradesDTO Grades { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public FeedbackOrderDTO Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedbackDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Pro: ").Append(Pro).Append("\n");
            sb.Append("  Contra: ").Append(Contra).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Shop: ").Append(Shop).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Recommend: ").Append(Recommend).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
