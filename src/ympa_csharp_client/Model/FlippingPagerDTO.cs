/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Модель для пагинации.
    /// </summary>
    [DataContract(Name = "FlippingPagerDTO")]
    public partial class FlippingPagerDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlippingPagerDTO" /> class.
        /// </summary>
        /// <param name="total">Сколько всего найдено элементов..</param>
        /// <param name="from">Начальный номер найденного элемента на странице..</param>
        /// <param name="to">Конечный номер найденного элемента на странице..</param>
        /// <param name="currentPage">Текущая страница..</param>
        /// <param name="pagesCount">Общее количество страниц..</param>
        /// <param name="pageSize">Размер страницы..</param>
        public FlippingPagerDTO(int total = default(int), int from = default(int), int to = default(int), int currentPage = default(int), int pagesCount = default(int), int pageSize = default(int))
        {
            this.Total = total;
            this.From = from;
            this.To = to;
            this.CurrentPage = currentPage;
            this.PagesCount = pagesCount;
            this.PageSize = pageSize;
        }

        /// <summary>
        /// Сколько всего найдено элементов.
        /// </summary>
        /// <value>Сколько всего найдено элементов.</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Начальный номер найденного элемента на странице.
        /// </summary>
        /// <value>Начальный номер найденного элемента на странице.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public int From { get; set; }

        /// <summary>
        /// Конечный номер найденного элемента на странице.
        /// </summary>
        /// <value>Конечный номер найденного элемента на странице.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public int To { get; set; }

        /// <summary>
        /// Текущая страница.
        /// </summary>
        /// <value>Текущая страница.</value>
        [DataMember(Name = "currentPage", EmitDefaultValue = false)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Общее количество страниц.
        /// </summary>
        /// <value>Общее количество страниц.</value>
        [DataMember(Name = "pagesCount", EmitDefaultValue = false)]
        public int PagesCount { get; set; }

        /// <summary>
        /// Размер страницы.
        /// </summary>
        /// <value>Размер страницы.</value>
        [DataMember(Name = "pageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlippingPagerDTO {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PagesCount: ").Append(PagesCount).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
