/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о складе.
    /// </summary>
    [DataContract(Name = "WarehouseDTO")]
    public partial class WarehouseDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WarehouseDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор склада. (required).</param>
        /// <param name="name">Название склада. (required).</param>
        /// <param name="campaignId">Идентификатор кампании в API и идентификатор магазина. (required).</param>
        /// <param name="express">Возможна ли доставка по модели Экспресс. (required).</param>
        /// <param name="address">address.</param>
        public WarehouseDTO(long id = default(long), string name = default(string), long campaignId = default(long), bool express = default(bool), WarehouseAddressDTO address = default(WarehouseAddressDTO))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WarehouseDTO and cannot be null");
            }
            this.Name = name;
            this.CampaignId = campaignId;
            this.Express = express;
            this.Address = address;
        }

        /// <summary>
        /// Идентификатор склада.
        /// </summary>
        /// <value>Идентификатор склада.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Название склада.
        /// </summary>
        /// <value>Название склада.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Идентификатор кампании в API и идентификатор магазина.
        /// </summary>
        /// <value>Идентификатор кампании в API и идентификатор магазина.</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = true)]
        public long CampaignId { get; set; }

        /// <summary>
        /// Возможна ли доставка по модели Экспресс.
        /// </summary>
        /// <value>Возможна ли доставка по модели Экспресс.</value>
        [DataMember(Name = "express", IsRequired = true, EmitDefaultValue = true)]
        public bool Express { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public WarehouseAddressDTO Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WarehouseDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Express: ").Append(Express).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
