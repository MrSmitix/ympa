/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
    /// </summary>
    [DataContract(Name = "OrderDeliveryAddressDTO")]
    public partial class OrderDeliveryAddressDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDeliveryAddressDTO" /> class.
        /// </summary>
        /// <param name="country">Страна.  Обязательный параметр. .</param>
        /// <param name="postcode">Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). .</param>
        /// <param name="city">Город или населенный пункт.  Обязательный параметр. .</param>
        /// <param name="district">Район..</param>
        /// <param name="subway">Станция метро..</param>
        /// <param name="street">Улица.  Обязательный параметр. .</param>
        /// <param name="house">Дом или владение.  Обязательный параметр. .</param>
        /// <param name="block">Корпус или строение..</param>
        /// <param name="entrance">Подъезд..</param>
        /// <param name="entryphone">Код домофона..</param>
        /// <param name="floor">Этаж..</param>
        /// <param name="apartment">Квартира или офис..</param>
        /// <param name="phone">Телефон получателя заказа.  Обязательный параметр. .</param>
        /// <param name="recipient">Фамилия, имя и отчество получателя заказа.  Обязательный параметр. .</param>
        /// <param name="gps">gps.</param>
        public OrderDeliveryAddressDTO(string country = default(string), string postcode = default(string), string city = default(string), string district = default(string), string subway = default(string), string street = default(string), string house = default(string), string block = default(string), string entrance = default(string), string entryphone = default(string), string floor = default(string), string apartment = default(string), string phone = default(string), string recipient = default(string), GpsDTO gps = default(GpsDTO))
        {
            this.Country = country;
            this.Postcode = postcode;
            this.City = city;
            this.District = district;
            this.Subway = subway;
            this.Street = street;
            this.House = house;
            this.Block = block;
            this.Entrance = entrance;
            this.Entryphone = entryphone;
            this.Floor = floor;
            this.Apartment = apartment;
            this.Phone = phone;
            this.Recipient = recipient;
            this.Gps = gps;
        }

        /// <summary>
        /// Страна.  Обязательный параметр. 
        /// </summary>
        /// <value>Страна.  Обязательный параметр. </value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
        /// </summary>
        /// <value>Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). </value>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Город или населенный пункт.  Обязательный параметр. 
        /// </summary>
        /// <value>Город или населенный пункт.  Обязательный параметр. </value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Район.
        /// </summary>
        /// <value>Район.</value>
        [DataMember(Name = "district", EmitDefaultValue = false)]
        public string District { get; set; }

        /// <summary>
        /// Станция метро.
        /// </summary>
        /// <value>Станция метро.</value>
        [DataMember(Name = "subway", EmitDefaultValue = false)]
        public string Subway { get; set; }

        /// <summary>
        /// Улица.  Обязательный параметр. 
        /// </summary>
        /// <value>Улица.  Обязательный параметр. </value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Дом или владение.  Обязательный параметр. 
        /// </summary>
        /// <value>Дом или владение.  Обязательный параметр. </value>
        [DataMember(Name = "house", EmitDefaultValue = false)]
        public string House { get; set; }

        /// <summary>
        /// Корпус или строение.
        /// </summary>
        /// <value>Корпус или строение.</value>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public string Block { get; set; }

        /// <summary>
        /// Подъезд.
        /// </summary>
        /// <value>Подъезд.</value>
        [DataMember(Name = "entrance", EmitDefaultValue = false)]
        public string Entrance { get; set; }

        /// <summary>
        /// Код домофона.
        /// </summary>
        /// <value>Код домофона.</value>
        [DataMember(Name = "entryphone", EmitDefaultValue = false)]
        public string Entryphone { get; set; }

        /// <summary>
        /// Этаж.
        /// </summary>
        /// <value>Этаж.</value>
        [DataMember(Name = "floor", EmitDefaultValue = false)]
        public string Floor { get; set; }

        /// <summary>
        /// Квартира или офис.
        /// </summary>
        /// <value>Квартира или офис.</value>
        [DataMember(Name = "apartment", EmitDefaultValue = false)]
        public string Apartment { get; set; }

        /// <summary>
        /// Телефон получателя заказа.  Обязательный параметр. 
        /// </summary>
        /// <value>Телефон получателя заказа.  Обязательный параметр. </value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
        /// </summary>
        /// <value>Фамилия, имя и отчество получателя заказа.  Обязательный параметр. </value>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Gps
        /// </summary>
        [DataMember(Name = "gps", EmitDefaultValue = false)]
        public GpsDTO Gps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDeliveryAddressDTO {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Subway: ").Append(Subway).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Entrance: ").Append(Entrance).Append("\n");
            sb.Append("  Entryphone: ").Append(Entryphone).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Apartment: ").Append(Apartment).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Gps: ").Append(Gps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
