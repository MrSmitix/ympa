/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Адрес точки продаж. 
    /// </summary>
    [DataContract(Name = "OutletAddressDTO")]
    public partial class OutletAddressDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutletAddressDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutletAddressDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutletAddressDTO" /> class.
        /// </summary>
        /// <param name="regionId">Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}  (required).</param>
        /// <param name="street">Улица..</param>
        /// <param name="number">Номер дома..</param>
        /// <param name="building">Номер строения..</param>
        /// <param name="estate">Номер владения..</param>
        /// <param name="block">Номер корпуса..</param>
        /// <param name="additional">Дополнительная информация..</param>
        /// <param name="km">Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица..</param>
        /// <param name="city">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} .</param>
        public OutletAddressDTO(long regionId = default(long), string street = default(string), string number = default(string), string building = default(string), string estate = default(string), string block = default(string), string additional = default(string), int km = default(int), string city = default(string))
        {
            this.RegionId = regionId;
            this.Street = street;
            this.Number = number;
            this.Building = building;
            this.Estate = estate;
            this.Block = block;
            this.Additional = additional;
            this.Km = km;
            this.City = city;
        }

        /// <summary>
        /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
        /// </summary>
        /// <value>Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} </value>
        [DataMember(Name = "regionId", IsRequired = true, EmitDefaultValue = true)]
        public long RegionId { get; set; }

        /// <summary>
        /// Улица.
        /// </summary>
        /// <value>Улица.</value>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Номер дома.
        /// </summary>
        /// <value>Номер дома.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Номер строения.
        /// </summary>
        /// <value>Номер строения.</value>
        [DataMember(Name = "building", EmitDefaultValue = false)]
        public string Building { get; set; }

        /// <summary>
        /// Номер владения.
        /// </summary>
        /// <value>Номер владения.</value>
        [DataMember(Name = "estate", EmitDefaultValue = false)]
        public string Estate { get; set; }

        /// <summary>
        /// Номер корпуса.
        /// </summary>
        /// <value>Номер корпуса.</value>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public string Block { get; set; }

        /// <summary>
        /// Дополнительная информация.
        /// </summary>
        /// <value>Дополнительная информация.</value>
        [DataMember(Name = "additional", EmitDefaultValue = false)]
        public string Additional { get; set; }

        /// <summary>
        /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
        /// </summary>
        /// <value>Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.</value>
        [DataMember(Name = "km", EmitDefaultValue = false)]
        public int Km { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} </value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutletAddressDTO {\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Estate: ").Append(Estate).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Additional: ").Append(Additional).Append("\n");
            sb.Append("  Km: ").Append(Km).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 512)
            {
                yield return new ValidationResult("Invalid value for Street, length must be less than 512.", new [] { "Street" });
            }

            // Number (string) maxLength
            if (this.Number != null && this.Number.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Number, length must be less than 256.", new [] { "Number" });
            }

            // Building (string) maxLength
            if (this.Building != null && this.Building.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Building, length must be less than 16.", new [] { "Building" });
            }

            // Estate (string) maxLength
            if (this.Estate != null && this.Estate.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Estate, length must be less than 16.", new [] { "Estate" });
            }

            // Block (string) maxLength
            if (this.Block != null && this.Block.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Block, length must be less than 16.", new [] { "Block" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 200)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 200.", new [] { "City" });
            }

            yield break;
        }
    }

}
