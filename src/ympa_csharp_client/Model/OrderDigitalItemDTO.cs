/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Ключ цифрового товара.
    /// </summary>
    [DataContract(Name = "OrderDigitalItemDTO")]
    public partial class OrderDigitalItemDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDigitalItemDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderDigitalItemDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderDigitalItemDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.  (required).</param>
        /// <param name="code">Сам ключ. (required).</param>
        /// <param name="slip">Инструкция по активации. (required).</param>
        /// <param name="activateTill">Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.  (required).</param>
        public OrderDigitalItemDTO(long id = default(long), string code = default(string), string slip = default(string), DateOnly activateTill = default(DateOnly))
        {
            this.Id = id;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for OrderDigitalItemDTO and cannot be null");
            }
            this.Code = code;
            // to ensure "slip" is required (not null)
            if (slip == null)
            {
                throw new ArgumentNullException("slip is a required property for OrderDigitalItemDTO and cannot be null");
            }
            this.Slip = slip;
            // to ensure "activateTill" is required (not null)
            if (activateTill == null)
            {
                throw new ArgumentNullException("activateTill is a required property for OrderDigitalItemDTO and cannot be null");
            }
            this.ActivateTill = activateTill;
        }

        /// <summary>
        /// Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;. 
        /// </summary>
        /// <value>Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;. </value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Сам ключ.
        /// </summary>
        /// <value>Сам ключ.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Инструкция по активации.
        /// </summary>
        /// <value>Инструкция по активации.</value>
        [DataMember(Name = "slip", IsRequired = true, EmitDefaultValue = true)]
        public string Slip { get; set; }

        /// <summary>
        /// Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
        /// </summary>
        /// <value>Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </value>
        [DataMember(Name = "activate_till", IsRequired = true, EmitDefaultValue = true)]
        public DateOnly ActivateTill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderDigitalItemDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Slip: ").Append(Slip).Append("\n");
            sb.Append("  ActivateTill: ").Append(ActivateTill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
