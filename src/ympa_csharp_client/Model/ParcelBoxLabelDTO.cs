/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация о ярлыке для коробки.
    /// </summary>
    [DataContract(Name = "ParcelBoxLabelDTO")]
    public partial class ParcelBoxLabelDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelBoxLabelDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParcelBoxLabelDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelBoxLabelDTO" /> class.
        /// </summary>
        /// <param name="url">Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).  (required).</param>
        /// <param name="supplierName">Юридическое название магазина. (required).</param>
        /// <param name="deliveryServiceName">Юридическое название службы доставки. (required).</param>
        /// <param name="orderId">Идентификатор заказа в системе Маркета. (required).</param>
        /// <param name="orderNum">Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина.  (required).</param>
        /// <param name="recipientName">Фамилия и инициалы получателя заказа. (required).</param>
        /// <param name="boxId">Идентификатор коробки. (required).</param>
        /// <param name="fulfilmentId">Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д.  (required).</param>
        /// <param name="place">Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;.  (required).</param>
        /// <param name="weight">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;.  (required).</param>
        /// <param name="deliveryServiceId">Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). (required).</param>
        /// <param name="deliveryAddress">Адрес получателя..</param>
        /// <param name="shipmentDate">Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;..</param>
        public ParcelBoxLabelDTO(string url = default(string), string supplierName = default(string), string deliveryServiceName = default(string), long orderId = default(long), string orderNum = default(string), string recipientName = default(string), long boxId = default(long), string fulfilmentId = default(string), string place = default(string), string weight = default(string), string deliveryServiceId = default(string), string deliveryAddress = default(string), string shipmentDate = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.Url = url;
            // to ensure "supplierName" is required (not null)
            if (supplierName == null)
            {
                throw new ArgumentNullException("supplierName is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.SupplierName = supplierName;
            // to ensure "deliveryServiceName" is required (not null)
            if (deliveryServiceName == null)
            {
                throw new ArgumentNullException("deliveryServiceName is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.DeliveryServiceName = deliveryServiceName;
            this.OrderId = orderId;
            // to ensure "orderNum" is required (not null)
            if (orderNum == null)
            {
                throw new ArgumentNullException("orderNum is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.OrderNum = orderNum;
            // to ensure "recipientName" is required (not null)
            if (recipientName == null)
            {
                throw new ArgumentNullException("recipientName is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.RecipientName = recipientName;
            this.BoxId = boxId;
            // to ensure "fulfilmentId" is required (not null)
            if (fulfilmentId == null)
            {
                throw new ArgumentNullException("fulfilmentId is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.FulfilmentId = fulfilmentId;
            // to ensure "place" is required (not null)
            if (place == null)
            {
                throw new ArgumentNullException("place is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.Place = place;
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new ArgumentNullException("weight is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.Weight = weight;
            // to ensure "deliveryServiceId" is required (not null)
            if (deliveryServiceId == null)
            {
                throw new ArgumentNullException("deliveryServiceId is a required property for ParcelBoxLabelDTO and cannot be null");
            }
            this.DeliveryServiceId = deliveryServiceId;
            this.DeliveryAddress = deliveryAddress;
            this.ShipmentDate = shipmentDate;
        }

        /// <summary>
        /// Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
        /// </summary>
        /// <value>Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). </value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Юридическое название магазина.
        /// </summary>
        /// <value>Юридическое название магазина.</value>
        [DataMember(Name = "supplierName", IsRequired = true, EmitDefaultValue = true)]
        public string SupplierName { get; set; }

        /// <summary>
        /// Юридическое название службы доставки.
        /// </summary>
        /// <value>Юридическое название службы доставки.</value>
        [DataMember(Name = "deliveryServiceName", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryServiceName { get; set; }

        /// <summary>
        /// Идентификатор заказа в системе Маркета.
        /// </summary>
        /// <value>Идентификатор заказа в системе Маркета.</value>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public long OrderId { get; set; }

        /// <summary>
        /// Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина. 
        /// </summary>
        /// <value>Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина. </value>
        [DataMember(Name = "orderNum", IsRequired = true, EmitDefaultValue = true)]
        public string OrderNum { get; set; }

        /// <summary>
        /// Фамилия и инициалы получателя заказа.
        /// </summary>
        /// <value>Фамилия и инициалы получателя заказа.</value>
        [DataMember(Name = "recipientName", IsRequired = true, EmitDefaultValue = true)]
        public string RecipientName { get; set; }

        /// <summary>
        /// Идентификатор коробки.
        /// </summary>
        /// <value>Идентификатор коробки.</value>
        [DataMember(Name = "boxId", IsRequired = true, EmitDefaultValue = true)]
        public long BoxId { get; set; }

        /// <summary>
        /// Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д. 
        /// </summary>
        /// <value>Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д. </value>
        [DataMember(Name = "fulfilmentId", IsRequired = true, EmitDefaultValue = true)]
        public string FulfilmentId { get; set; }

        /// <summary>
        /// Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;. 
        /// </summary>
        /// <value>Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;. </value>
        [DataMember(Name = "place", IsRequired = true, EmitDefaultValue = true)]
        public string Place { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;. </value>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public string Weight { get; set; }

        /// <summary>
        /// Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
        /// </summary>
        /// <value>Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).</value>
        [DataMember(Name = "deliveryServiceId", IsRequired = true, EmitDefaultValue = true)]
        public string DeliveryServiceId { get; set; }

        /// <summary>
        /// Адрес получателя.
        /// </summary>
        /// <value>Адрес получателя.</value>
        [DataMember(Name = "deliveryAddress", EmitDefaultValue = false)]
        public string DeliveryAddress { get; set; }

        /// <summary>
        /// Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;.
        /// </summary>
        /// <value>Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;.</value>
        [DataMember(Name = "shipmentDate", EmitDefaultValue = false)]
        public string ShipmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParcelBoxLabelDTO {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("  DeliveryServiceName: ").Append(DeliveryServiceName).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderNum: ").Append(OrderNum).Append("\n");
            sb.Append("  RecipientName: ").Append(RecipientName).Append("\n");
            sb.Append("  BoxId: ").Append(BoxId).Append("\n");
            sb.Append("  FulfilmentId: ").Append(FulfilmentId).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  DeliveryServiceId: ").Append(DeliveryServiceId).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  ShipmentDate: ").Append(ShipmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
