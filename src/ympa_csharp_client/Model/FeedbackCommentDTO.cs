/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Комментарий к отзыву на магазин.
    /// </summary>
    [DataContract(Name = "FeedbackCommentDTO")]
    public partial class FeedbackCommentDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackCommentDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор ответа..</param>
        /// <param name="parentId">Идентификатор родительского ответа..</param>
        /// <param name="body">Текст ответа..</param>
        /// <param name="createdAt">Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. .</param>
        /// <param name="updatedAt">Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. .</param>
        /// <param name="author">author.</param>
        /// <param name="children">Дочерние ответы..</param>
        public FeedbackCommentDTO(long id = default(long), long parentId = default(long), string body = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), FeedbackCommentAuthorDTO author = default(FeedbackCommentAuthorDTO), List<FeedbackCommentDTO> children = default(List<FeedbackCommentDTO>))
        {
            this.Id = id;
            this.ParentId = parentId;
            this.Body = body;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Author = author;
            this.Children = children;
        }

        /// <summary>
        /// Идентификатор ответа.
        /// </summary>
        /// <value>Идентификатор ответа.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Идентификатор родительского ответа.
        /// </summary>
        /// <value>Идентификатор родительского ответа.</value>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public long ParentId { get; set; }

        /// <summary>
        /// Текст ответа.
        /// </summary>
        /// <value>Текст ответа.</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. </value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. </value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public FeedbackCommentAuthorDTO Author { get; set; }

        /// <summary>
        /// Дочерние ответы.
        /// </summary>
        /// <value>Дочерние ответы.</value>
        [DataMember(Name = "children", EmitDefaultValue = true)]
        public List<FeedbackCommentDTO> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedbackCommentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
