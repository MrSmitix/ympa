/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Запрос информации по индексу качества.
    /// </summary>
    [DataContract(Name = "GetQualityRatingRequest")]
    public partial class GetQualityRatingRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQualityRatingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetQualityRatingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQualityRatingRequest" /> class.
        /// </summary>
        /// <param name="dateFrom">Начало периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть раньше 30 дней от текущей даты. .</param>
        /// <param name="dateTo">Конец периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть позже текущей даты. .</param>
        /// <param name="campaignIds">Список идентификаторов магазинов. (required).</param>
        public GetQualityRatingRequest(DateOnly dateFrom = default(DateOnly), DateOnly dateTo = default(DateOnly), List<long> campaignIds = default(List<long>))
        {
            // to ensure "campaignIds" is required (not null)
            if (campaignIds == null)
            {
                throw new ArgumentNullException("campaignIds is a required property for GetQualityRatingRequest and cannot be null");
            }
            this.CampaignIds = campaignIds;
            this.DateFrom = dateFrom;
            this.DateTo = dateTo;
        }

        /// <summary>
        /// Начало периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть раньше 30 дней от текущей даты. 
        /// </summary>
        /// <value>Начало периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть раньше 30 дней от текущей даты. </value>
        [DataMember(Name = "dateFrom", EmitDefaultValue = false)]
        public DateOnly DateFrom { get; set; }

        /// <summary>
        /// Конец периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть позже текущей даты. 
        /// </summary>
        /// <value>Конец периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть позже текущей даты. </value>
        [DataMember(Name = "dateTo", EmitDefaultValue = false)]
        public DateOnly DateTo { get; set; }

        /// <summary>
        /// Список идентификаторов магазинов.
        /// </summary>
        /// <value>Список идентификаторов магазинов.</value>
        [DataMember(Name = "campaignIds", IsRequired = true, EmitDefaultValue = true)]
        public List<long> CampaignIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetQualityRatingRequest {\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
