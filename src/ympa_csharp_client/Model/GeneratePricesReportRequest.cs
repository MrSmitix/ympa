/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Данные, необходимые для генерации отчета.
    /// </summary>
    [DataContract(Name = "GeneratePricesReportRequest")]
    public partial class GeneratePricesReportRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneratePricesReportRequest" /> class.
        /// </summary>
        /// <param name="businessId">Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. .</param>
        /// <param name="campaignId">Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. .</param>
        /// <param name="categoryIds">Фильтр по категориям на Маркете..</param>
        /// <param name="creationDateFrom">Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. .</param>
        /// <param name="creationDateTo">Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. .</param>
        public GeneratePricesReportRequest(long businessId = default(long), long campaignId = default(long), List<long> categoryIds = default(List<long>), DateOnly creationDateFrom = default(DateOnly), DateOnly creationDateTo = default(DateOnly))
        {
            this.BusinessId = businessId;
            this.CampaignId = campaignId;
            this.CategoryIds = categoryIds;
            this.CreationDateFrom = creationDateFrom;
            this.CreationDateTo = creationDateTo;
        }

        /// <summary>
        /// Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
        /// </summary>
        /// <value>Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. </value>
        [DataMember(Name = "businessId", EmitDefaultValue = false)]
        public long BusinessId { get; set; }

        /// <summary>
        /// Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
        /// </summary>
        /// <value>Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. </value>
        [DataMember(Name = "campaignId", EmitDefaultValue = false)]
        public long CampaignId { get; set; }

        /// <summary>
        /// Фильтр по категориям на Маркете.
        /// </summary>
        /// <value>Фильтр по категориям на Маркете.</value>
        [DataMember(Name = "categoryIds", EmitDefaultValue = true)]
        public List<long> CategoryIds { get; set; }

        /// <summary>
        /// Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name = "creationDateFrom", EmitDefaultValue = false)]
        public DateOnly CreationDateFrom { get; set; }

        /// <summary>
        /// Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name = "creationDateTo", EmitDefaultValue = false)]
        public DateOnly CreationDateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneratePricesReportRequest {\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  CreationDateFrom: ").Append(CreationDateFrom).Append("\n");
            sb.Append("  CreationDateTo: ").Append(CreationDateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
