/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Данные, необходимые для генерации отчета. 
    /// </summary>
    [DataContract(Name = "GenerateStocksOnWarehousesReportRequest")]
    public partial class GenerateStocksOnWarehousesReportRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateStocksOnWarehousesReportRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GenerateStocksOnWarehousesReportRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateStocksOnWarehousesReportRequest" /> class.
        /// </summary>
        /// <param name="campaignId">Идентификатор магазина. (required).</param>
        /// <param name="warehouseIds">Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md)..</param>
        /// <param name="reportDate">Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день..</param>
        /// <param name="categoryIds">Фильтр по категориям на Маркете (кроме модели FBY)..</param>
        /// <param name="hasStocks">Фильтр по наличию остатков (кроме модели FBY)..</param>
        public GenerateStocksOnWarehousesReportRequest(long campaignId = default(long), List<long> warehouseIds = default(List<long>), DateOnly reportDate = default(DateOnly), List<long> categoryIds = default(List<long>), bool hasStocks = default(bool))
        {
            this.CampaignId = campaignId;
            this.WarehouseIds = warehouseIds;
            this.ReportDate = reportDate;
            this.CategoryIds = categoryIds;
            this.HasStocks = hasStocks;
        }

        /// <summary>
        /// Идентификатор магазина.
        /// </summary>
        /// <value>Идентификатор магазина.</value>
        [DataMember(Name = "campaignId", IsRequired = true, EmitDefaultValue = true)]
        public long CampaignId { get; set; }

        /// <summary>
        /// Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
        /// </summary>
        /// <value>Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).</value>
        [DataMember(Name = "warehouseIds", EmitDefaultValue = true)]
        public List<long> WarehouseIds { get; set; }

        /// <summary>
        /// Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
        /// </summary>
        /// <value>Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.</value>
        [DataMember(Name = "reportDate", EmitDefaultValue = false)]
        public DateOnly ReportDate { get; set; }

        /// <summary>
        /// Фильтр по категориям на Маркете (кроме модели FBY).
        /// </summary>
        /// <value>Фильтр по категориям на Маркете (кроме модели FBY).</value>
        [DataMember(Name = "categoryIds", EmitDefaultValue = true)]
        public List<long> CategoryIds { get; set; }

        /// <summary>
        /// Фильтр по наличию остатков (кроме модели FBY).
        /// </summary>
        /// <value>Фильтр по наличию остатков (кроме модели FBY).</value>
        [DataMember(Name = "hasStocks", EmitDefaultValue = true)]
        public bool HasStocks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateStocksOnWarehousesReportRequest {\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  WarehouseIds: ").Append(WarehouseIds).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  HasStocks: ").Append(HasStocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
