/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Параметры товара в акции с типом &#x60;DIRECT_DISCOUNT&#x60; или &#x60;BLUE_FLASH&#x60;.  Обязательный параметр для акций с этими типами. 
    /// </summary>
    [DataContract(Name = "UpdatePromoOfferDiscountParamsDTO")]
    public partial class UpdatePromoOfferDiscountParamsDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePromoOfferDiscountParamsDTO" /> class.
        /// </summary>
        /// <param name="price">Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Число должно быть целым. .</param>
        /// <param name="promoPrice">Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Число должно быть целым. .</param>
        public UpdatePromoOfferDiscountParamsDTO(long price = default(long), long promoPrice = default(long))
        {
            this.Price = price;
            this.PromoPrice = promoPrice;
        }

        /// <summary>
        /// Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Число должно быть целым. 
        /// </summary>
        /// <value>Зачеркнутая цена — та, по которой товар продавался до акции.  Указывается в рублях.  Число должно быть целым. </value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public long Price { get; set; }

        /// <summary>
        /// Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Число должно быть целым. 
        /// </summary>
        /// <value>Цена по акции — та, по которой вы хотите продавать товар.  Указывается в рублях.  Число должно быть целым. </value>
        [DataMember(Name = "promoPrice", EmitDefaultValue = false)]
        public long PromoPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdatePromoOfferDiscountParamsDTO {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PromoPrice: ").Append(PromoPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Price (long) minimum
            if (this.Price < (long)1)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than or equal to 1.", new [] { "Price" });
            }

            // PromoPrice (long) minimum
            if (this.PromoPrice < (long)1)
            {
                yield return new ValidationResult("Invalid value for PromoPrice, must be a value greater than or equal to 1.", new [] { "PromoPrice" });
            }

            yield break;
        }
    }

}
