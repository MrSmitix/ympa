/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Единица измерения.
    /// </summary>
    [DataContract(Name = "UnitDTO")]
    public partial class UnitDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnitDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор единицы измерения. (required).</param>
        /// <param name="name">Сокращенное название единицы измерения. (required).</param>
        /// <param name="fullName">Полное название единицы измерения. (required).</param>
        public UnitDTO(long id = default(long), string name = default(string), string fullName = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UnitDTO and cannot be null");
            }
            this.Name = name;
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new ArgumentNullException("fullName is a required property for UnitDTO and cannot be null");
            }
            this.FullName = fullName;
        }

        /// <summary>
        /// Идентификатор единицы измерения.
        /// </summary>
        /// <value>Идентификатор единицы измерения.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id { get; set; }

        /// <summary>
        /// Сокращенное название единицы измерения.
        /// </summary>
        /// <value>Сокращенное название единицы измерения.</value>
        /// <example>кг</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Полное название единицы измерения.
        /// </summary>
        /// <value>Полное название единицы измерения.</value>
        /// <example>килограмм</example>
        [DataMember(Name = "fullName", IsRequired = true, EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnitDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
