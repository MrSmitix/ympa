/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация об отгрузке.
    /// </summary>
    [DataContract(Name = "BaseShipmentDTO")]
    public partial class BaseShipmentDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name = "shipmentType", EmitDefaultValue = false)]
        public ShipmentType? ShipmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseShipmentDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaseShipmentDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseShipmentDTO" /> class.
        /// </summary>
        /// <param name="id">Идентификатор отгрузки..</param>
        /// <param name="planIntervalFrom">Начало планового интервала отгрузки..</param>
        /// <param name="planIntervalTo">Конец планового интервала отгрузки..</param>
        /// <param name="shipmentType">shipmentType.</param>
        /// <param name="warehouse">warehouse.</param>
        /// <param name="warehouseTo">warehouseTo.</param>
        /// <param name="externalId">Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;..</param>
        /// <param name="deliveryService">deliveryService.</param>
        /// <param name="palletsCount">palletsCount.</param>
        /// <param name="orderIds">Идентификаторы заказов в отгрузке. (required).</param>
        /// <param name="draftCount">Количество заказов, которое Маркет запланировал к отгрузке..</param>
        /// <param name="plannedCount">Количество заказов, которое Маркет подтвердил к отгрузке..</param>
        /// <param name="factCount">Количество заказов, принятых в сортировочном центре или пункте приема..</param>
        public BaseShipmentDTO(long id = default(long), DateTime planIntervalFrom = default(DateTime), DateTime planIntervalTo = default(DateTime), ShipmentType? shipmentType = default(ShipmentType?), PartnerShipmentWarehouseDTO warehouse = default(PartnerShipmentWarehouseDTO), PartnerShipmentWarehouseDTO warehouseTo = default(PartnerShipmentWarehouseDTO), string externalId = default(string), DeliveryServiceDTO deliveryService = default(DeliveryServiceDTO), PalletsCountDTO palletsCount = default(PalletsCountDTO), List<long> orderIds = default(List<long>), int draftCount = default(int), int plannedCount = default(int), int factCount = default(int))
        {
            // to ensure "orderIds" is required (not null)
            if (orderIds == null)
            {
                throw new ArgumentNullException("orderIds is a required property for BaseShipmentDTO and cannot be null");
            }
            this.OrderIds = orderIds;
            this.Id = id;
            this.PlanIntervalFrom = planIntervalFrom;
            this.PlanIntervalTo = planIntervalTo;
            this.ShipmentType = shipmentType;
            this.Warehouse = warehouse;
            this.WarehouseTo = warehouseTo;
            this.ExternalId = externalId;
            this.DeliveryService = deliveryService;
            this.PalletsCount = palletsCount;
            this.DraftCount = draftCount;
            this.PlannedCount = plannedCount;
            this.FactCount = factCount;
        }

        /// <summary>
        /// Идентификатор отгрузки.
        /// </summary>
        /// <value>Идентификатор отгрузки.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Начало планового интервала отгрузки.
        /// </summary>
        /// <value>Начало планового интервала отгрузки.</value>
        [DataMember(Name = "planIntervalFrom", EmitDefaultValue = false)]
        public DateTime PlanIntervalFrom { get; set; }

        /// <summary>
        /// Конец планового интервала отгрузки.
        /// </summary>
        /// <value>Конец планового интервала отгрузки.</value>
        [DataMember(Name = "planIntervalTo", EmitDefaultValue = false)]
        public DateTime PlanIntervalTo { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name = "warehouse", EmitDefaultValue = false)]
        public PartnerShipmentWarehouseDTO Warehouse { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseTo
        /// </summary>
        [DataMember(Name = "warehouseTo", EmitDefaultValue = false)]
        public PartnerShipmentWarehouseDTO WarehouseTo { get; set; }

        /// <summary>
        /// Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
        /// </summary>
        /// <value>Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.</value>
        [DataMember(Name = "externalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryService
        /// </summary>
        [DataMember(Name = "deliveryService", EmitDefaultValue = false)]
        public DeliveryServiceDTO DeliveryService { get; set; }

        /// <summary>
        /// Gets or Sets PalletsCount
        /// </summary>
        [DataMember(Name = "palletsCount", EmitDefaultValue = false)]
        public PalletsCountDTO PalletsCount { get; set; }

        /// <summary>
        /// Идентификаторы заказов в отгрузке.
        /// </summary>
        /// <value>Идентификаторы заказов в отгрузке.</value>
        [DataMember(Name = "orderIds", IsRequired = true, EmitDefaultValue = true)]
        public List<long> OrderIds { get; set; }

        /// <summary>
        /// Количество заказов, которое Маркет запланировал к отгрузке.
        /// </summary>
        /// <value>Количество заказов, которое Маркет запланировал к отгрузке.</value>
        [DataMember(Name = "draftCount", EmitDefaultValue = false)]
        public int DraftCount { get; set; }

        /// <summary>
        /// Количество заказов, которое Маркет подтвердил к отгрузке.
        /// </summary>
        /// <value>Количество заказов, которое Маркет подтвердил к отгрузке.</value>
        [DataMember(Name = "plannedCount", EmitDefaultValue = false)]
        public int PlannedCount { get; set; }

        /// <summary>
        /// Количество заказов, принятых в сортировочном центре или пункте приема.
        /// </summary>
        /// <value>Количество заказов, принятых в сортировочном центре или пункте приема.</value>
        [DataMember(Name = "factCount", EmitDefaultValue = false)]
        public int FactCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BaseShipmentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanIntervalFrom: ").Append(PlanIntervalFrom).Append("\n");
            sb.Append("  PlanIntervalTo: ").Append(PlanIntervalTo).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("  WarehouseTo: ").Append(WarehouseTo).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  DeliveryService: ").Append(DeliveryService).Append("\n");
            sb.Append("  PalletsCount: ").Append(PalletsCount).Append("\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  DraftCount: ").Append(DraftCount).Append("\n");
            sb.Append("  PlannedCount: ").Append(PlannedCount).Append("\n");
            sb.Append("  FactCount: ").Append(FactCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
