/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ympa_csharp_client.Client.OpenAPIDateConverter;

namespace ympa_csharp_client.Model
{
    /// <summary>
    /// Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
    /// </summary>
    [DataContract(Name = "FeedbackGradesDTO")]
    public partial class FeedbackGradesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackGradesDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeedbackGradesDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackGradesDTO" /> class.
        /// </summary>
        /// <param name="average">Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»)..</param>
        /// <param name="agreeCount">Количество пользователей, считающих отзыв полезным..</param>
        /// <param name="rejectCount">Количество пользователей, считающих отзыв бесполезным..</param>
        /// <param name="factors">Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор.  (required).</param>
        public FeedbackGradesDTO(decimal average = default(decimal), long agreeCount = default(long), long rejectCount = default(long), List<FeedbackFactorDTO> factors = default(List<FeedbackFactorDTO>))
        {
            // to ensure "factors" is required (not null)
            if (factors == null)
            {
                throw new ArgumentNullException("factors is a required property for FeedbackGradesDTO and cannot be null");
            }
            this.Factors = factors;
            this.Average = average;
            this.AgreeCount = agreeCount;
            this.RejectCount = rejectCount;
        }

        /// <summary>
        /// Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
        /// </summary>
        /// <value>Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).</value>
        [DataMember(Name = "average", EmitDefaultValue = false)]
        public decimal Average { get; set; }

        /// <summary>
        /// Количество пользователей, считающих отзыв полезным.
        /// </summary>
        /// <value>Количество пользователей, считающих отзыв полезным.</value>
        [DataMember(Name = "agreeCount", EmitDefaultValue = false)]
        public long AgreeCount { get; set; }

        /// <summary>
        /// Количество пользователей, считающих отзыв бесполезным.
        /// </summary>
        /// <value>Количество пользователей, считающих отзыв бесполезным.</value>
        [DataMember(Name = "rejectCount", EmitDefaultValue = false)]
        public long RejectCount { get; set; }

        /// <summary>
        /// Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
        /// </summary>
        /// <value>Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. </value>
        [DataMember(Name = "factors", IsRequired = true, EmitDefaultValue = true)]
        public List<FeedbackFactorDTO> Factors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedbackGradesDTO {\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  AgreeCount: ").Append(AgreeCount).Append("\n");
            sb.Append("  RejectCount: ").Append(RejectCount).Append("\n");
            sb.Append("  Factors: ").Append(Factors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
