/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация об удалении товара из заказа.
    /// </summary>
    [DataContract]
    public partial class OrdersStatsDetailsDTO : IEquatable<OrdersStatsDetailsDTO>
    {
        /// <summary>
        /// Gets or Sets ItemStatus
        /// </summary>
        [DataMember(Name="itemStatus", EmitDefaultValue=true)]
        public OrdersStatsItemStatusType ItemStatus { get; set; }

        /// <summary>
        /// Количество товара со статусом, указанном в параметре &#x60;itemStatus&#x60;.
        /// </summary>
        /// <value>Количество товара со статусом, указанном в параметре &#x60;itemStatus&#x60;.</value>
        [DataMember(Name="itemCount", EmitDefaultValue=true)]
        public long ItemCount { get; set; }

        /// <summary>
        /// Дата, когда товар получил статус, указанный в параметре &#x60;itemStatus&#x60;.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
        /// </summary>
        /// <value>Дата, когда товар получил статус, указанный в параметре &#x60;itemStatus&#x60;.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </value>
        [DataMember(Name="updateDate", EmitDefaultValue=true)]
        public DateOnly UpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets StockType
        /// </summary>
        [DataMember(Name="stockType", EmitDefaultValue=true)]
        public OrdersStatsStockType StockType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersStatsDetailsDTO {\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  StockType: ").Append(StockType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrdersStatsDetailsDTO)obj);
        }

        /// <summary>
        /// Returns true if OrdersStatsDetailsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrdersStatsDetailsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersStatsDetailsDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ItemStatus == other.ItemStatus ||
                    
                    ItemStatus.Equals(other.ItemStatus)
                ) && 
                (
                    ItemCount == other.ItemCount ||
                    
                    ItemCount.Equals(other.ItemCount)
                ) && 
                (
                    UpdateDate == other.UpdateDate ||
                    
                    UpdateDate.Equals(other.UpdateDate)
                ) && 
                (
                    StockType == other.StockType ||
                    
                    StockType.Equals(other.StockType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ItemStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ItemCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + StockType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrdersStatsDetailsDTO left, OrdersStatsDetailsDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrdersStatsDetailsDTO left, OrdersStatsDetailsDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
