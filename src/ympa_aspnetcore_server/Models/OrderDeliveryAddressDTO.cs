/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
    /// </summary>
    [DataContract]
    public partial class OrderDeliveryAddressDTO : IEquatable<OrderDeliveryAddressDTO>
    {
        /// <summary>
        /// Страна.  Обязательный параметр. 
        /// </summary>
        /// <value>Страна.  Обязательный параметр. </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
        /// </summary>
        /// <value>Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). </value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// Город или населенный пункт.  Обязательный параметр. 
        /// </summary>
        /// <value>Город или населенный пункт.  Обязательный параметр. </value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Район.
        /// </summary>
        /// <value>Район.</value>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Станция метро.
        /// </summary>
        /// <value>Станция метро.</value>
        [DataMember(Name="subway", EmitDefaultValue=false)]
        public string Subway { get; set; }

        /// <summary>
        /// Улица.  Обязательный параметр. 
        /// </summary>
        /// <value>Улица.  Обязательный параметр. </value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Дом или владение.  Обязательный параметр. 
        /// </summary>
        /// <value>Дом или владение.  Обязательный параметр. </value>
        [DataMember(Name="house", EmitDefaultValue=false)]
        public string House { get; set; }

        /// <summary>
        /// Корпус или строение.
        /// </summary>
        /// <value>Корпус или строение.</value>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public string Block { get; set; }

        /// <summary>
        /// Подъезд.
        /// </summary>
        /// <value>Подъезд.</value>
        [DataMember(Name="entrance", EmitDefaultValue=false)]
        public string Entrance { get; set; }

        /// <summary>
        /// Код домофона.
        /// </summary>
        /// <value>Код домофона.</value>
        [DataMember(Name="entryphone", EmitDefaultValue=false)]
        public string Entryphone { get; set; }

        /// <summary>
        /// Этаж.
        /// </summary>
        /// <value>Этаж.</value>
        [DataMember(Name="floor", EmitDefaultValue=false)]
        public string Floor { get; set; }

        /// <summary>
        /// Квартира или офис.
        /// </summary>
        /// <value>Квартира или офис.</value>
        [DataMember(Name="apartment", EmitDefaultValue=false)]
        public string Apartment { get; set; }

        /// <summary>
        /// Телефон получателя заказа.  Обязательный параметр. 
        /// </summary>
        /// <value>Телефон получателя заказа.  Обязательный параметр. </value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
        /// </summary>
        /// <value>Фамилия, имя и отчество получателя заказа.  Обязательный параметр. </value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Gps
        /// </summary>
        [DataMember(Name="gps", EmitDefaultValue=false)]
        public GpsDTO Gps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDeliveryAddressDTO {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Subway: ").Append(Subway).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Entrance: ").Append(Entrance).Append("\n");
            sb.Append("  Entryphone: ").Append(Entryphone).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Apartment: ").Append(Apartment).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Gps: ").Append(Gps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderDeliveryAddressDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderDeliveryAddressDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDeliveryAddressDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDeliveryAddressDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Postcode == other.Postcode ||
                    Postcode != null &&
                    Postcode.Equals(other.Postcode)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    Subway == other.Subway ||
                    Subway != null &&
                    Subway.Equals(other.Subway)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    House == other.House ||
                    House != null &&
                    House.Equals(other.House)
                ) && 
                (
                    Block == other.Block ||
                    Block != null &&
                    Block.Equals(other.Block)
                ) && 
                (
                    Entrance == other.Entrance ||
                    Entrance != null &&
                    Entrance.Equals(other.Entrance)
                ) && 
                (
                    Entryphone == other.Entryphone ||
                    Entryphone != null &&
                    Entryphone.Equals(other.Entryphone)
                ) && 
                (
                    Floor == other.Floor ||
                    Floor != null &&
                    Floor.Equals(other.Floor)
                ) && 
                (
                    Apartment == other.Apartment ||
                    Apartment != null &&
                    Apartment.Equals(other.Apartment)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.Equals(other.Recipient)
                ) && 
                (
                    Gps == other.Gps ||
                    Gps != null &&
                    Gps.Equals(other.Gps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Postcode != null)
                    hashCode = hashCode * 59 + Postcode.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (Subway != null)
                    hashCode = hashCode * 59 + Subway.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (House != null)
                    hashCode = hashCode * 59 + House.GetHashCode();
                    if (Block != null)
                    hashCode = hashCode * 59 + Block.GetHashCode();
                    if (Entrance != null)
                    hashCode = hashCode * 59 + Entrance.GetHashCode();
                    if (Entryphone != null)
                    hashCode = hashCode * 59 + Entryphone.GetHashCode();
                    if (Floor != null)
                    hashCode = hashCode * 59 + Floor.GetHashCode();
                    if (Apartment != null)
                    hashCode = hashCode * 59 + Apartment.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Gps != null)
                    hashCode = hashCode * 59 + Gps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderDeliveryAddressDTO left, OrderDeliveryAddressDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDeliveryAddressDTO left, OrderDeliveryAddressDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
