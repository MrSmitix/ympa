/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Описание пункта вывоза для возврата.
    /// </summary>
    [DataContract]
    public partial class LogisticPickupPointDTO : IEquatable<LogisticPickupPointDTO>
    {
        /// <summary>
        /// Идентификатор пункта вывоза.
        /// </summary>
        /// <value>Идентификатор пункта вывоза.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Название пункта вывоза.
        /// </summary>
        /// <value>Название пункта вывоза.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public PickupAddressDTO Address { get; set; }

        /// <summary>
        /// Дополнительные инструкции к вывозу.
        /// </summary>
        /// <value>Дополнительные инструкции к вывозу.</value>
        [DataMember(Name="instruction", EmitDefaultValue=false)]
        public string Instruction { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public LogisticPointType Type { get; set; }

        /// <summary>
        /// Идентификатор логистического партнера, к которому относится логистическая точка.
        /// </summary>
        /// <value>Идентификатор логистического партнера, к которому относится логистическая точка.</value>
        [DataMember(Name="logisticPartnerId", EmitDefaultValue=true)]
        public long LogisticPartnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogisticPickupPointDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Instruction: ").Append(Instruction).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  LogisticPartnerId: ").Append(LogisticPartnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LogisticPickupPointDTO)obj);
        }

        /// <summary>
        /// Returns true if LogisticPickupPointDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of LogisticPickupPointDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogisticPickupPointDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Instruction == other.Instruction ||
                    Instruction != null &&
                    Instruction.Equals(other.Instruction)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    LogisticPartnerId == other.LogisticPartnerId ||
                    
                    LogisticPartnerId.Equals(other.LogisticPartnerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Instruction != null)
                    hashCode = hashCode * 59 + Instruction.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + LogisticPartnerId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LogisticPickupPointDTO left, LogisticPickupPointDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LogisticPickupPointDTO left, LogisticPickupPointDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
