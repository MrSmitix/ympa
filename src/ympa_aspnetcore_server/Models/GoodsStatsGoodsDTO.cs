/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о товаре.
    /// </summary>
    [DataContract]
    public partial class GoodsStatsGoodsDTO : IEquatable<GoodsStatsGoodsDTO>
    {
        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="shopSku", EmitDefaultValue=false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name="marketSku", EmitDefaultValue=true)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
        /// </summary>
        /// <value>Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).</value>
        [DataMember(Name="price", EmitDefaultValue=true)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор категории товара на Маркете.
        /// </summary>
        /// <value>Идентификатор категории товара на Маркете.</value>
        [DataMember(Name="categoryId", EmitDefaultValue=true)]
        public long CategoryId { get; set; }

        /// <summary>
        /// Название категории товара на Маркете.
        /// </summary>
        /// <value>Название категории товара на Маркете.</value>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets WeightDimensions
        /// </summary>
        [DataMember(Name="weightDimensions", EmitDefaultValue=false)]
        public GoodsStatsWeightDimensionsDTO WeightDimensions { get; set; }

        /// <summary>
        /// Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
        /// </summary>
        /// <value>Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. </value>
        [DataMember(Name="warehouses", EmitDefaultValue=true)]
        public List<GoodsStatsWarehouseDTO> Warehouses { get; set; }

        /// <summary>
        /// Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
        /// </summary>
        /// <value>Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). </value>
        [DataMember(Name="tariffs", EmitDefaultValue=true)]
        public List<TariffDTO> Tariffs { get; set; }

        /// <summary>
        /// Ссылки (URL) изображений товара в хорошем качестве.
        /// </summary>
        /// <value>Ссылки (URL) изображений товара в хорошем качестве.</value>
        [DataMember(Name="pictures", EmitDefaultValue=true)]
        public List<string> Pictures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoodsStatsGoodsDTO {\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  WeightDimensions: ").Append(WeightDimensions).Append("\n");
            sb.Append("  Warehouses: ").Append(Warehouses).Append("\n");
            sb.Append("  Tariffs: ").Append(Tariffs).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GoodsStatsGoodsDTO)obj);
        }

        /// <summary>
        /// Returns true if GoodsStatsGoodsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GoodsStatsGoodsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoodsStatsGoodsDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ShopSku == other.ShopSku ||
                    ShopSku != null &&
                    ShopSku.Equals(other.ShopSku)
                ) && 
                (
                    MarketSku == other.MarketSku ||
                    
                    MarketSku.Equals(other.MarketSku)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    CategoryName == other.CategoryName ||
                    CategoryName != null &&
                    CategoryName.Equals(other.CategoryName)
                ) && 
                (
                    WeightDimensions == other.WeightDimensions ||
                    WeightDimensions != null &&
                    WeightDimensions.Equals(other.WeightDimensions)
                ) && 
                (
                    Warehouses == other.Warehouses ||
                    Warehouses != null &&
                    other.Warehouses != null &&
                    Warehouses.SequenceEqual(other.Warehouses)
                ) && 
                (
                    Tariffs == other.Tariffs ||
                    Tariffs != null &&
                    other.Tariffs != null &&
                    Tariffs.SequenceEqual(other.Tariffs)
                ) && 
                (
                    Pictures == other.Pictures ||
                    Pictures != null &&
                    other.Pictures != null &&
                    Pictures.SequenceEqual(other.Pictures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ShopSku != null)
                    hashCode = hashCode * 59 + ShopSku.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketSku.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (CategoryName != null)
                    hashCode = hashCode * 59 + CategoryName.GetHashCode();
                    if (WeightDimensions != null)
                    hashCode = hashCode * 59 + WeightDimensions.GetHashCode();
                    if (Warehouses != null)
                    hashCode = hashCode * 59 + Warehouses.GetHashCode();
                    if (Tariffs != null)
                    hashCode = hashCode * 59 + Tariffs.GetHashCode();
                    if (Pictures != null)
                    hashCode = hashCode * 59 + Pictures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GoodsStatsGoodsDTO left, GoodsStatsGoodsDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GoodsStatsGoodsDTO left, GoodsStatsGoodsDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
