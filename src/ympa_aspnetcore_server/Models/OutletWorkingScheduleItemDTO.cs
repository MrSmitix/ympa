/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Расписание работы точки продаж.
    /// </summary>
    [DataContract]
    public partial class OutletWorkingScheduleItemDTO : IEquatable<OutletWorkingScheduleItemDTO>
    {
        /// <summary>
        /// Gets or Sets StartDay
        /// </summary>
        [Required]
        [DataMember(Name="startDay", EmitDefaultValue=true)]
        public DayOfWeekType StartDay { get; set; }

        /// <summary>
        /// Gets or Sets EndDay
        /// </summary>
        [Required]
        [DataMember(Name="endDay", EmitDefaultValue=true)]
        public DayOfWeekType EndDay { get; set; }

        /// <summary>
        /// Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
        /// </summary>
        /// <value>Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. </value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
        /// </summary>
        /// <value>Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. </value>
        [Required]
        [MinLength(1)]
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutletWorkingScheduleItemDTO {\n");
            sb.Append("  StartDay: ").Append(StartDay).Append("\n");
            sb.Append("  EndDay: ").Append(EndDay).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OutletWorkingScheduleItemDTO)obj);
        }

        /// <summary>
        /// Returns true if OutletWorkingScheduleItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OutletWorkingScheduleItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutletWorkingScheduleItemDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StartDay == other.StartDay ||
                    
                    StartDay.Equals(other.StartDay)
                ) && 
                (
                    EndDay == other.EndDay ||
                    
                    EndDay.Equals(other.EndDay)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + StartDay.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndDay.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OutletWorkingScheduleItemDTO left, OutletWorkingScheduleItemDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OutletWorkingScheduleItemDTO left, OutletWorkingScheduleItemDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
