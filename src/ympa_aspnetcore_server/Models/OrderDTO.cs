/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Заказ.
    /// </summary>
    [DataContract]
    public partial class OrderDTO : IEquatable<OrderDTO>
    {
        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public OrderStatusType Status { get; set; }

        /// <summary>
        /// Gets or Sets Substatus
        /// </summary>
        [DataMember(Name="substatus", EmitDefaultValue=true)]
        public OrderSubstatusType Substatus { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public CurrencyType Currency { get; set; }

        /// <summary>
        /// Платеж покупателя. 
        /// </summary>
        /// <value>Платеж покупателя. </value>
        [DataMember(Name="itemsTotal", EmitDefaultValue=true)]
        public decimal ItemsTotal { get; set; }

        /// <summary>
        /// Стоимость доставки. 
        /// </summary>
        /// <value>Стоимость доставки. </value>
        [DataMember(Name="deliveryTotal", EmitDefaultValue=true)]
        public decimal DeliveryTotal { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. </value>
        [DataMember(Name="buyerItemsTotal", EmitDefaultValue=true)]
        public decimal BuyerItemsTotal { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. </value>
        [DataMember(Name="buyerTotal", EmitDefaultValue=true)]
        public decimal BuyerTotal { get; set; }

        /// <summary>
        /// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name="buyerItemsTotalBeforeDiscount", EmitDefaultValue=true)]
        public decimal BuyerItemsTotalBeforeDiscount { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). </value>
        [DataMember(Name="buyerTotalBeforeDiscount", EmitDefaultValue=true)]
        public decimal BuyerTotalBeforeDiscount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=true)]
        public OrderPaymentType PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="paymentMethod", EmitDefaultValue=true)]
        public OrderPaymentMethodType PaymentMethod { get; set; }

        /// <summary>
        /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
        /// </summary>
        /// <value>Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. </value>
        [DataMember(Name="fake", EmitDefaultValue=true)]
        public bool Fake { get; set; }

        /// <summary>
        /// Список товаров в заказе.
        /// </summary>
        /// <value>Список товаров в заказе.</value>
        [Required]
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrderItemDTO> Items { get; set; }

        /// <summary>
        /// Список субсидий по типам.
        /// </summary>
        /// <value>Список субсидий по типам.</value>
        [DataMember(Name="subsidies", EmitDefaultValue=true)]
        public List<OrderSubsidyDTO> Subsidies { get; set; }

        /// <summary>
        /// Gets or Sets Delivery
        /// </summary>
        [DataMember(Name="delivery", EmitDefaultValue=false)]
        public OrderDeliveryDTO Delivery { get; set; }

        /// <summary>
        /// Gets or Sets Buyer
        /// </summary>
        [DataMember(Name="buyer", EmitDefaultValue=false)]
        public OrderBuyerDTO Buyer { get; set; }

        /// <summary>
        /// Комментарий к заказу.
        /// </summary>
        /// <value>Комментарий к заказу.</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or Sets TaxSystem
        /// </summary>
        [DataMember(Name="taxSystem", EmitDefaultValue=true)]
        public OrderTaxSystemType TaxSystem { get; set; }

        /// <summary>
        /// **Только для модели DBS**  Запрошена ли отмена. 
        /// </summary>
        /// <value>**Только для модели DBS**  Запрошена ли отмена. </value>
        [DataMember(Name="cancelRequested", EmitDefaultValue=true)]
        public bool CancelRequested { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        /// <example>23-09-2022 09:12:41</example>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public string ExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Substatus: ").Append(Substatus).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ItemsTotal: ").Append(ItemsTotal).Append("\n");
            sb.Append("  DeliveryTotal: ").Append(DeliveryTotal).Append("\n");
            sb.Append("  BuyerItemsTotal: ").Append(BuyerItemsTotal).Append("\n");
            sb.Append("  BuyerTotal: ").Append(BuyerTotal).Append("\n");
            sb.Append("  BuyerItemsTotalBeforeDiscount: ").Append(BuyerItemsTotalBeforeDiscount).Append("\n");
            sb.Append("  BuyerTotalBeforeDiscount: ").Append(BuyerTotalBeforeDiscount).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Fake: ").Append(Fake).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Subsidies: ").Append(Subsidies).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  TaxSystem: ").Append(TaxSystem).Append("\n");
            sb.Append("  CancelRequested: ").Append(CancelRequested).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Substatus == other.Substatus ||
                    
                    Substatus.Equals(other.Substatus)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != null &&
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    ItemsTotal == other.ItemsTotal ||
                    
                    ItemsTotal.Equals(other.ItemsTotal)
                ) && 
                (
                    DeliveryTotal == other.DeliveryTotal ||
                    
                    DeliveryTotal.Equals(other.DeliveryTotal)
                ) && 
                (
                    BuyerItemsTotal == other.BuyerItemsTotal ||
                    
                    BuyerItemsTotal.Equals(other.BuyerItemsTotal)
                ) && 
                (
                    BuyerTotal == other.BuyerTotal ||
                    
                    BuyerTotal.Equals(other.BuyerTotal)
                ) && 
                (
                    BuyerItemsTotalBeforeDiscount == other.BuyerItemsTotalBeforeDiscount ||
                    
                    BuyerItemsTotalBeforeDiscount.Equals(other.BuyerItemsTotalBeforeDiscount)
                ) && 
                (
                    BuyerTotalBeforeDiscount == other.BuyerTotalBeforeDiscount ||
                    
                    BuyerTotalBeforeDiscount.Equals(other.BuyerTotalBeforeDiscount)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    PaymentMethod == other.PaymentMethod ||
                    
                    PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    Fake == other.Fake ||
                    
                    Fake.Equals(other.Fake)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    other.Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    Subsidies == other.Subsidies ||
                    Subsidies != null &&
                    other.Subsidies != null &&
                    Subsidies.SequenceEqual(other.Subsidies)
                ) && 
                (
                    Delivery == other.Delivery ||
                    Delivery != null &&
                    Delivery.Equals(other.Delivery)
                ) && 
                (
                    Buyer == other.Buyer ||
                    Buyer != null &&
                    Buyer.Equals(other.Buyer)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    TaxSystem == other.TaxSystem ||
                    
                    TaxSystem.Equals(other.TaxSystem)
                ) && 
                (
                    CancelRequested == other.CancelRequested ||
                    
                    CancelRequested.Equals(other.CancelRequested)
                ) && 
                (
                    ExpiryDate == other.ExpiryDate ||
                    ExpiryDate != null &&
                    ExpiryDate.Equals(other.ExpiryDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Substatus.GetHashCode();
                    if (CreationDate != null)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + ItemsTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveryTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerItemsTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerTotal.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerItemsTotalBeforeDiscount.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerTotalBeforeDiscount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaymentMethod.GetHashCode();
                    
                    hashCode = hashCode * 59 + Fake.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (Subsidies != null)
                    hashCode = hashCode * 59 + Subsidies.GetHashCode();
                    if (Delivery != null)
                    hashCode = hashCode * 59 + Delivery.GetHashCode();
                    if (Buyer != null)
                    hashCode = hashCode * 59 + Buyer.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + TaxSystem.GetHashCode();
                    
                    hashCode = hashCode * 59 + CancelRequested.GetHashCode();
                    if (ExpiryDate != null)
                    hashCode = hashCode * 59 + ExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderDTO left, OrderDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDTO left, OrderDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
