/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о документах. 
    /// </summary>
    [DataContract]
    public partial class OrderBusinessDocumentsDTO : IEquatable<OrderBusinessDocumentsDTO>
    {
        /// <summary>
        /// Gets or Sets Upd
        /// </summary>
        [DataMember(Name="upd", EmitDefaultValue=false)]
        public DocumentDTO Upd { get; set; }

        /// <summary>
        /// Gets or Sets Ukd
        /// </summary>
        [DataMember(Name="ukd", EmitDefaultValue=false)]
        public DocumentDTO Ukd { get; set; }

        /// <summary>
        /// Gets or Sets TorgTwelve
        /// </summary>
        [DataMember(Name="torgTwelve", EmitDefaultValue=false)]
        public DocumentDTO TorgTwelve { get; set; }

        /// <summary>
        /// Gets or Sets Sf
        /// </summary>
        [DataMember(Name="sf", EmitDefaultValue=false)]
        public DocumentDTO Sf { get; set; }

        /// <summary>
        /// Gets or Sets Ksf
        /// </summary>
        [DataMember(Name="ksf", EmitDefaultValue=false)]
        public DocumentDTO Ksf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderBusinessDocumentsDTO {\n");
            sb.Append("  Upd: ").Append(Upd).Append("\n");
            sb.Append("  Ukd: ").Append(Ukd).Append("\n");
            sb.Append("  TorgTwelve: ").Append(TorgTwelve).Append("\n");
            sb.Append("  Sf: ").Append(Sf).Append("\n");
            sb.Append("  Ksf: ").Append(Ksf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderBusinessDocumentsDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderBusinessDocumentsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderBusinessDocumentsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBusinessDocumentsDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Upd == other.Upd ||
                    Upd != null &&
                    Upd.Equals(other.Upd)
                ) && 
                (
                    Ukd == other.Ukd ||
                    Ukd != null &&
                    Ukd.Equals(other.Ukd)
                ) && 
                (
                    TorgTwelve == other.TorgTwelve ||
                    TorgTwelve != null &&
                    TorgTwelve.Equals(other.TorgTwelve)
                ) && 
                (
                    Sf == other.Sf ||
                    Sf != null &&
                    Sf.Equals(other.Sf)
                ) && 
                (
                    Ksf == other.Ksf ||
                    Ksf != null &&
                    Ksf.Equals(other.Ksf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Upd != null)
                    hashCode = hashCode * 59 + Upd.GetHashCode();
                    if (Ukd != null)
                    hashCode = hashCode * 59 + Ukd.GetHashCode();
                    if (TorgTwelve != null)
                    hashCode = hashCode * 59 + TorgTwelve.GetHashCode();
                    if (Sf != null)
                    hashCode = hashCode * 59 + Sf.GetHashCode();
                    if (Ksf != null)
                    hashCode = hashCode * 59 + Ksf.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderBusinessDocumentsDTO left, OrderBusinessDocumentsDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderBusinessDocumentsDTO left, OrderBusinessDocumentsDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
