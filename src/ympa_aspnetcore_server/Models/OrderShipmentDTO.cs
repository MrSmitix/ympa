/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Список посылок.  В параметре может указываться несколько посылок. 
    /// </summary>
    [DataContract]
    public partial class OrderShipmentDTO : IEquatable<OrderShipmentDTO>
    {
        /// <summary>
        /// Идентификатор посылки, присвоенный Маркетом.
        /// </summary>
        /// <value>Идентификатор посылки, присвоенный Маркетом.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        /// <example>23-09-2022</example>
        [DataMember(Name="shipmentDate", EmitDefaultValue=false)]
        public string ShipmentDate { get; set; }

        /// <summary>
        /// **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
        /// </summary>
        /// <value>**Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. </value>
        [DataMember(Name="shipmentTime", EmitDefaultValue=false)]
        public string ShipmentTime { get; set; }

        /// <summary>
        /// **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
        /// </summary>
        /// <value>**Только для модели DBS**  Информация для отслеживания перемещений посылки. </value>
        [DataMember(Name="tracks", EmitDefaultValue=true)]
        public List<OrderTrackDTO> Tracks { get; set; }

        /// <summary>
        /// Список грузовых мест.
        /// </summary>
        /// <value>Список грузовых мест.</value>
        [DataMember(Name="boxes", EmitDefaultValue=true)]
        public List<OrderParcelBoxDTO> Boxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderShipmentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShipmentDate: ").Append(ShipmentDate).Append("\n");
            sb.Append("  ShipmentTime: ").Append(ShipmentTime).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderShipmentDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderShipmentDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderShipmentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderShipmentDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    ShipmentDate == other.ShipmentDate ||
                    ShipmentDate != null &&
                    ShipmentDate.Equals(other.ShipmentDate)
                ) && 
                (
                    ShipmentTime == other.ShipmentTime ||
                    ShipmentTime != null &&
                    ShipmentTime.Equals(other.ShipmentTime)
                ) && 
                (
                    Tracks == other.Tracks ||
                    Tracks != null &&
                    other.Tracks != null &&
                    Tracks.SequenceEqual(other.Tracks)
                ) && 
                (
                    Boxes == other.Boxes ||
                    Boxes != null &&
                    other.Boxes != null &&
                    Boxes.SequenceEqual(other.Boxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ShipmentDate != null)
                    hashCode = hashCode * 59 + ShipmentDate.GetHashCode();
                    if (ShipmentTime != null)
                    hashCode = hashCode * 59 + ShipmentTime.GetHashCode();
                    if (Tracks != null)
                    hashCode = hashCode * 59 + Tracks.GetHashCode();
                    if (Boxes != null)
                    hashCode = hashCode * 59 + Boxes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderShipmentDTO left, OrderShipmentDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderShipmentDTO left, OrderShipmentDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
