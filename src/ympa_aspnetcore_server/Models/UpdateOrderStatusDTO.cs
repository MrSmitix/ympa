/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Список заказов.
    /// </summary>
    [DataContract]
    public partial class UpdateOrderStatusDTO : IEquatable<UpdateOrderStatusDTO>
    {
        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public OrderStatusType Status { get; set; }

        /// <summary>
        /// Gets or Sets Substatus
        /// </summary>
        [DataMember(Name="substatus", EmitDefaultValue=true)]
        public OrderSubstatusType Substatus { get; set; }

        /// <summary>
        /// Gets or Sets UpdateStatus
        /// </summary>
        [DataMember(Name="updateStatus", EmitDefaultValue=true)]
        public OrderUpdateStatusType UpdateStatus { get; set; }

        /// <summary>
        /// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. 
        /// </summary>
        /// <value>Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. </value>
        [DataMember(Name="errorDetails", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateOrderStatusDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Substatus: ").Append(Substatus).Append("\n");
            sb.Append("  UpdateStatus: ").Append(UpdateStatus).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateOrderStatusDTO)obj);
        }

        /// <summary>
        /// Returns true if UpdateOrderStatusDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateOrderStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOrderStatusDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Substatus == other.Substatus ||
                    
                    Substatus.Equals(other.Substatus)
                ) && 
                (
                    UpdateStatus == other.UpdateStatus ||
                    
                    UpdateStatus.Equals(other.UpdateStatus)
                ) && 
                (
                    ErrorDetails == other.ErrorDetails ||
                    ErrorDetails != null &&
                    ErrorDetails.Equals(other.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Substatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateStatus.GetHashCode();
                    if (ErrorDetails != null)
                    hashCode = hashCode * 59 + ErrorDetails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateOrderStatusDTO left, UpdateOrderStatusDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateOrderStatusDTO left, UpdateOrderStatusDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
