/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация об акции.
    /// </summary>
    [DataContract]
    public partial class GetPromoDTO : IEquatable<GetPromoDTO>
    {
        /// <summary>
        /// Идентификатор акции.
        /// </summary>
        /// <value>Идентификатор акции.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Название акции.
        /// </summary>
        /// <value>Название акции.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [Required]
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PromoPeriodDTO Period { get; set; }

        /// <summary>
        /// Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
        /// </summary>
        /// <value>Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). </value>
        [Required]
        [DataMember(Name="participating", EmitDefaultValue=true)]
        public bool Participating { get; set; }

        /// <summary>
        /// Gets or Sets AssortmentInfo
        /// </summary>
        [Required]
        [DataMember(Name="assortmentInfo", EmitDefaultValue=false)]
        public GetPromoAssortmentInfoDTO AssortmentInfo { get; set; }

        /// <summary>
        /// Gets or Sets MechanicsInfo
        /// </summary>
        [Required]
        [DataMember(Name="mechanicsInfo", EmitDefaultValue=false)]
        public GetPromoMechanicsInfoDTO MechanicsInfo { get; set; }

        /// <summary>
        /// Gets or Sets BestsellerInfo
        /// </summary>
        [Required]
        [DataMember(Name="bestsellerInfo", EmitDefaultValue=false)]
        public GetPromoBestsellerInfoDTO BestsellerInfo { get; set; }

        /// <summary>
        /// Список каналов продвижения товаров.
        /// </summary>
        /// <value>Список каналов продвижения товаров.</value>
        [DataMember(Name="channels", EmitDefaultValue=true)]
        public List<ChannelType> Channels { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public GetPromoConstraintsDTO Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPromoDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Participating: ").Append(Participating).Append("\n");
            sb.Append("  AssortmentInfo: ").Append(AssortmentInfo).Append("\n");
            sb.Append("  MechanicsInfo: ").Append(MechanicsInfo).Append("\n");
            sb.Append("  BestsellerInfo: ").Append(BestsellerInfo).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetPromoDTO)obj);
        }

        /// <summary>
        /// Returns true if GetPromoDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GetPromoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPromoDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    Participating == other.Participating ||
                    
                    Participating.Equals(other.Participating)
                ) && 
                (
                    AssortmentInfo == other.AssortmentInfo ||
                    AssortmentInfo != null &&
                    AssortmentInfo.Equals(other.AssortmentInfo)
                ) && 
                (
                    MechanicsInfo == other.MechanicsInfo ||
                    MechanicsInfo != null &&
                    MechanicsInfo.Equals(other.MechanicsInfo)
                ) && 
                (
                    BestsellerInfo == other.BestsellerInfo ||
                    BestsellerInfo != null &&
                    BestsellerInfo.Equals(other.BestsellerInfo)
                ) && 
                (
                    Channels == other.Channels ||
                    Channels != null &&
                    other.Channels != null &&
                    Channels.SequenceEqual(other.Channels)
                ) && 
                (
                    Constraints == other.Constraints ||
                    Constraints != null &&
                    Constraints.Equals(other.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    
                    hashCode = hashCode * 59 + Participating.GetHashCode();
                    if (AssortmentInfo != null)
                    hashCode = hashCode * 59 + AssortmentInfo.GetHashCode();
                    if (MechanicsInfo != null)
                    hashCode = hashCode * 59 + MechanicsInfo.GetHashCode();
                    if (BestsellerInfo != null)
                    hashCode = hashCode * 59 + BestsellerInfo.GetHashCode();
                    if (Channels != null)
                    hashCode = hashCode * 59 + Channels.GetHashCode();
                    if (Constraints != null)
                    hashCode = hashCode * 59 + Constraints.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetPromoDTO left, GetPromoDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetPromoDTO left, GetPromoDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
