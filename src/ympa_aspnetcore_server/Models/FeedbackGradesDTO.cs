/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
    /// </summary>
    [DataContract]
    public partial class FeedbackGradesDTO : IEquatable<FeedbackGradesDTO>
    {
        /// <summary>
        /// Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
        /// </summary>
        /// <value>Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).</value>
        [DataMember(Name="average", EmitDefaultValue=true)]
        public decimal Average { get; set; }

        /// <summary>
        /// Количество пользователей, считающих отзыв полезным.
        /// </summary>
        /// <value>Количество пользователей, считающих отзыв полезным.</value>
        [DataMember(Name="agreeCount", EmitDefaultValue=true)]
        public long AgreeCount { get; set; }

        /// <summary>
        /// Количество пользователей, считающих отзыв бесполезным.
        /// </summary>
        /// <value>Количество пользователей, считающих отзыв бесполезным.</value>
        [DataMember(Name="rejectCount", EmitDefaultValue=true)]
        public long RejectCount { get; set; }

        /// <summary>
        /// Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
        /// </summary>
        /// <value>Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. </value>
        [Required]
        [DataMember(Name="factors", EmitDefaultValue=false)]
        public List<FeedbackFactorDTO> Factors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedbackGradesDTO {\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  AgreeCount: ").Append(AgreeCount).Append("\n");
            sb.Append("  RejectCount: ").Append(RejectCount).Append("\n");
            sb.Append("  Factors: ").Append(Factors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeedbackGradesDTO)obj);
        }

        /// <summary>
        /// Returns true if FeedbackGradesDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FeedbackGradesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedbackGradesDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Average == other.Average ||
                    
                    Average.Equals(other.Average)
                ) && 
                (
                    AgreeCount == other.AgreeCount ||
                    
                    AgreeCount.Equals(other.AgreeCount)
                ) && 
                (
                    RejectCount == other.RejectCount ||
                    
                    RejectCount.Equals(other.RejectCount)
                ) && 
                (
                    Factors == other.Factors ||
                    Factors != null &&
                    other.Factors != null &&
                    Factors.SequenceEqual(other.Factors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Average.GetHashCode();
                    
                    hashCode = hashCode * 59 + AgreeCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + RejectCount.GetHashCode();
                    if (Factors != null)
                    hashCode = hashCode * 59 + Factors.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeedbackGradesDTO left, FeedbackGradesDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeedbackGradesDTO left, FeedbackGradesDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
