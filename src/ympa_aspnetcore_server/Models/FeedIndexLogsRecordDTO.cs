/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Список отчетов по индексации прайс-листа.
    /// </summary>
    [DataContract]
    public partial class FeedIndexLogsRecordDTO : IEquatable<FeedIndexLogsRecordDTO>
    {
        /// <summary>
        /// Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name="downloadTime", EmitDefaultValue=true)]
        public DateTime DownloadTime { get; set; }

        /// <summary>
        /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name="fileTime", EmitDefaultValue=true)]
        public DateTime FileTime { get; set; }

        /// <summary>
        /// Идентификатор индексации.
        /// </summary>
        /// <value>Идентификатор индексации.</value>
        [DataMember(Name="generationId", EmitDefaultValue=true)]
        public long GenerationId { get; set; }

        /// <summary>
        /// Gets or Sets IndexType
        /// </summary>
        [DataMember(Name="indexType", EmitDefaultValue=true)]
        public FeedIndexLogsIndexType IndexType { get; set; }

        /// <summary>
        /// Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
        /// </summary>
        /// <value>Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. </value>
        [DataMember(Name="publishedTime", EmitDefaultValue=true)]
        public DateTime PublishedTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public FeedIndexLogsStatusType Status { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public FeedIndexLogsErrorDTO Error { get; set; }

        /// <summary>
        /// Gets or Sets Offers
        /// </summary>
        [DataMember(Name="offers", EmitDefaultValue=false)]
        public FeedIndexLogsOffersDTO Offers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedIndexLogsRecordDTO {\n");
            sb.Append("  DownloadTime: ").Append(DownloadTime).Append("\n");
            sb.Append("  FileTime: ").Append(FileTime).Append("\n");
            sb.Append("  GenerationId: ").Append(GenerationId).Append("\n");
            sb.Append("  IndexType: ").Append(IndexType).Append("\n");
            sb.Append("  PublishedTime: ").Append(PublishedTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeedIndexLogsRecordDTO)obj);
        }

        /// <summary>
        /// Returns true if FeedIndexLogsRecordDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FeedIndexLogsRecordDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedIndexLogsRecordDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DownloadTime == other.DownloadTime ||
                    
                    DownloadTime.Equals(other.DownloadTime)
                ) && 
                (
                    FileTime == other.FileTime ||
                    
                    FileTime.Equals(other.FileTime)
                ) && 
                (
                    GenerationId == other.GenerationId ||
                    
                    GenerationId.Equals(other.GenerationId)
                ) && 
                (
                    IndexType == other.IndexType ||
                    
                    IndexType.Equals(other.IndexType)
                ) && 
                (
                    PublishedTime == other.PublishedTime ||
                    
                    PublishedTime.Equals(other.PublishedTime)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Offers == other.Offers ||
                    Offers != null &&
                    Offers.Equals(other.Offers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DownloadTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + FileTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + GenerationId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IndexType.GetHashCode();
                    
                    hashCode = hashCode * 59 + PublishedTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeedIndexLogsRecordDTO left, FeedIndexLogsRecordDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeedIndexLogsRecordDTO left, FeedIndexLogsRecordDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
