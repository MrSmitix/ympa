/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация об отгрузке.
    /// </summary>
    [DataContract]
    public partial class ShipmentDTO : IEquatable<ShipmentDTO>
    {
        /// <summary>
        /// Идентификатор отгрузки.
        /// </summary>
        /// <value>Идентификатор отгрузки.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Начало планового интервала отгрузки.
        /// </summary>
        /// <value>Начало планового интервала отгрузки.</value>
        [DataMember(Name="planIntervalFrom", EmitDefaultValue=true)]
        public DateTime PlanIntervalFrom { get; set; }

        /// <summary>
        /// Конец планового интервала отгрузки.
        /// </summary>
        /// <value>Конец планового интервала отгрузки.</value>
        [DataMember(Name="planIntervalTo", EmitDefaultValue=true)]
        public DateTime PlanIntervalTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name="shipmentType", EmitDefaultValue=true)]
        public ShipmentType ShipmentType { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name="warehouse", EmitDefaultValue=false)]
        public PartnerShipmentWarehouseDTO Warehouse { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseTo
        /// </summary>
        [DataMember(Name="warehouseTo", EmitDefaultValue=false)]
        public PartnerShipmentWarehouseDTO WarehouseTo { get; set; }

        /// <summary>
        /// Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
        /// </summary>
        /// <value>Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryService
        /// </summary>
        [DataMember(Name="deliveryService", EmitDefaultValue=false)]
        public DeliveryServiceDTO DeliveryService { get; set; }

        /// <summary>
        /// Gets or Sets PalletsCount
        /// </summary>
        [DataMember(Name="palletsCount", EmitDefaultValue=false)]
        public PalletsCountDTO PalletsCount { get; set; }

        /// <summary>
        /// Идентификаторы заказов в отгрузке.
        /// </summary>
        /// <value>Идентификаторы заказов в отгрузке.</value>
        [Required]
        [DataMember(Name="orderIds", EmitDefaultValue=false)]
        public List<long> OrderIds { get; set; }

        /// <summary>
        /// Количество заказов, которое Маркет запланировал к отгрузке.
        /// </summary>
        /// <value>Количество заказов, которое Маркет запланировал к отгрузке.</value>
        [DataMember(Name="draftCount", EmitDefaultValue=true)]
        public int DraftCount { get; set; }

        /// <summary>
        /// Количество заказов, которое Маркет подтвердил к отгрузке.
        /// </summary>
        /// <value>Количество заказов, которое Маркет подтвердил к отгрузке.</value>
        [DataMember(Name="plannedCount", EmitDefaultValue=true)]
        public int PlannedCount { get; set; }

        /// <summary>
        /// Количество заказов, принятых в сортировочном центре или пункте приема.
        /// </summary>
        /// <value>Количество заказов, принятых в сортировочном центре или пункте приема.</value>
        [DataMember(Name="factCount", EmitDefaultValue=true)]
        public int FactCount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name="currentStatus", EmitDefaultValue=false)]
        public ShipmentStatusChangeDTO CurrentStatus { get; set; }

        /// <summary>
        /// Доступные действия над отгрузкой.
        /// </summary>
        /// <value>Доступные действия над отгрузкой.</value>
        [Required]
        [DataMember(Name="availableActions", EmitDefaultValue=false)]
        public List<ShipmentActionType> AvailableActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanIntervalFrom: ").Append(PlanIntervalFrom).Append("\n");
            sb.Append("  PlanIntervalTo: ").Append(PlanIntervalTo).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("  WarehouseTo: ").Append(WarehouseTo).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  DeliveryService: ").Append(DeliveryService).Append("\n");
            sb.Append("  PalletsCount: ").Append(PalletsCount).Append("\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  DraftCount: ").Append(DraftCount).Append("\n");
            sb.Append("  PlannedCount: ").Append(PlannedCount).Append("\n");
            sb.Append("  FactCount: ").Append(FactCount).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  AvailableActions: ").Append(AvailableActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShipmentDTO)obj);
        }

        /// <summary>
        /// Returns true if ShipmentDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ShipmentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    PlanIntervalFrom == other.PlanIntervalFrom ||
                    
                    PlanIntervalFrom.Equals(other.PlanIntervalFrom)
                ) && 
                (
                    PlanIntervalTo == other.PlanIntervalTo ||
                    
                    PlanIntervalTo.Equals(other.PlanIntervalTo)
                ) && 
                (
                    ShipmentType == other.ShipmentType ||
                    
                    ShipmentType.Equals(other.ShipmentType)
                ) && 
                (
                    Warehouse == other.Warehouse ||
                    Warehouse != null &&
                    Warehouse.Equals(other.Warehouse)
                ) && 
                (
                    WarehouseTo == other.WarehouseTo ||
                    WarehouseTo != null &&
                    WarehouseTo.Equals(other.WarehouseTo)
                ) && 
                (
                    ExternalId == other.ExternalId ||
                    ExternalId != null &&
                    ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    DeliveryService == other.DeliveryService ||
                    DeliveryService != null &&
                    DeliveryService.Equals(other.DeliveryService)
                ) && 
                (
                    PalletsCount == other.PalletsCount ||
                    PalletsCount != null &&
                    PalletsCount.Equals(other.PalletsCount)
                ) && 
                (
                    OrderIds == other.OrderIds ||
                    OrderIds != null &&
                    other.OrderIds != null &&
                    OrderIds.SequenceEqual(other.OrderIds)
                ) && 
                (
                    DraftCount == other.DraftCount ||
                    
                    DraftCount.Equals(other.DraftCount)
                ) && 
                (
                    PlannedCount == other.PlannedCount ||
                    
                    PlannedCount.Equals(other.PlannedCount)
                ) && 
                (
                    FactCount == other.FactCount ||
                    
                    FactCount.Equals(other.FactCount)
                ) && 
                (
                    CurrentStatus == other.CurrentStatus ||
                    CurrentStatus != null &&
                    CurrentStatus.Equals(other.CurrentStatus)
                ) && 
                (
                    AvailableActions == other.AvailableActions ||
                    AvailableActions != null &&
                    other.AvailableActions != null &&
                    AvailableActions.SequenceEqual(other.AvailableActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlanIntervalFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlanIntervalTo.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShipmentType.GetHashCode();
                    if (Warehouse != null)
                    hashCode = hashCode * 59 + Warehouse.GetHashCode();
                    if (WarehouseTo != null)
                    hashCode = hashCode * 59 + WarehouseTo.GetHashCode();
                    if (ExternalId != null)
                    hashCode = hashCode * 59 + ExternalId.GetHashCode();
                    if (DeliveryService != null)
                    hashCode = hashCode * 59 + DeliveryService.GetHashCode();
                    if (PalletsCount != null)
                    hashCode = hashCode * 59 + PalletsCount.GetHashCode();
                    if (OrderIds != null)
                    hashCode = hashCode * 59 + OrderIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + DraftCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlannedCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + FactCount.GetHashCode();
                    if (CurrentStatus != null)
                    hashCode = hashCode * 59 + CurrentStatus.GetHashCode();
                    if (AvailableActions != null)
                    hashCode = hashCode * 59 + AvailableActions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShipmentDTO left, ShipmentDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShipmentDTO left, ShipmentDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
