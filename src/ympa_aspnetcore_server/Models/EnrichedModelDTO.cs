/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Модель товара.
    /// </summary>
    [DataContract]
    public partial class EnrichedModelDTO : IEquatable<EnrichedModelDTO>
    {
        /// <summary>
        /// Идентификатор модели товара.
        /// </summary>
        /// <value>Идентификатор модели товара.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Название модели товара.
        /// </summary>
        /// <value>Название модели товара.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Prices
        /// </summary>
        [DataMember(Name="prices", EmitDefaultValue=false)]
        public ModelPriceDTO Prices { get; set; }

        /// <summary>
        /// Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
        /// </summary>
        /// <value>Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. </value>
        [DataMember(Name="offers", EmitDefaultValue=true)]
        public List<ModelOfferDTO> Offers { get; set; }

        /// <summary>
        /// Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
        /// </summary>
        /// <value>Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.</value>
        [DataMember(Name="offlineOffers", EmitDefaultValue=true)]
        public int OfflineOffers { get; set; }

        /// <summary>
        /// Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
        /// </summary>
        /// <value>Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.</value>
        [DataMember(Name="onlineOffers", EmitDefaultValue=true)]
        public int OnlineOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrichedModelDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Offers: ").Append(Offers).Append("\n");
            sb.Append("  OfflineOffers: ").Append(OfflineOffers).Append("\n");
            sb.Append("  OnlineOffers: ").Append(OnlineOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnrichedModelDTO)obj);
        }

        /// <summary>
        /// Returns true if EnrichedModelDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of EnrichedModelDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrichedModelDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Prices == other.Prices ||
                    Prices != null &&
                    Prices.Equals(other.Prices)
                ) && 
                (
                    Offers == other.Offers ||
                    Offers != null &&
                    other.Offers != null &&
                    Offers.SequenceEqual(other.Offers)
                ) && 
                (
                    OfflineOffers == other.OfflineOffers ||
                    
                    OfflineOffers.Equals(other.OfflineOffers)
                ) && 
                (
                    OnlineOffers == other.OnlineOffers ||
                    
                    OnlineOffers.Equals(other.OnlineOffers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Prices != null)
                    hashCode = hashCode * 59 + Prices.GetHashCode();
                    if (Offers != null)
                    hashCode = hashCode * 59 + Offers.GetHashCode();
                    
                    hashCode = hashCode * 59 + OfflineOffers.GetHashCode();
                    
                    hashCode = hashCode * 59 + OnlineOffers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnrichedModelDTO left, EnrichedModelDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnrichedModelDTO left, EnrichedModelDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
