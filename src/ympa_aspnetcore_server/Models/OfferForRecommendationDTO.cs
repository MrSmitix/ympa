/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о состоянии цены на товар.
    /// </summary>
    [DataContract]
    public partial class OfferForRecommendationDTO : IEquatable<OfferForRecommendationDTO>
    {
        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public BasePriceDTO Price { get; set; }

        /// <summary>
        /// Gets or Sets CofinancePrice
        /// </summary>
        [DataMember(Name="cofinancePrice", EmitDefaultValue=false)]
        public GetPriceDTO CofinancePrice { get; set; }

        /// <summary>
        /// Gets or Sets Competitiveness
        /// </summary>
        [DataMember(Name="competitiveness", EmitDefaultValue=true)]
        public PriceCompetitivenessType Competitiveness { get; set; }

        /// <summary>
        /// Количество показов карточки товара за последние 7 дней.
        /// </summary>
        /// <value>Количество показов карточки товара за последние 7 дней.</value>
        [DataMember(Name="shows", EmitDefaultValue=true)]
        public long Shows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferForRecommendationDTO {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CofinancePrice: ").Append(CofinancePrice).Append("\n");
            sb.Append("  Competitiveness: ").Append(Competitiveness).Append("\n");
            sb.Append("  Shows: ").Append(Shows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OfferForRecommendationDTO)obj);
        }

        /// <summary>
        /// Returns true if OfferForRecommendationDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferForRecommendationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferForRecommendationDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OfferId == other.OfferId ||
                    OfferId != null &&
                    OfferId.Equals(other.OfferId)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    CofinancePrice == other.CofinancePrice ||
                    CofinancePrice != null &&
                    CofinancePrice.Equals(other.CofinancePrice)
                ) && 
                (
                    Competitiveness == other.Competitiveness ||
                    
                    Competitiveness.Equals(other.Competitiveness)
                ) && 
                (
                    Shows == other.Shows ||
                    
                    Shows.Equals(other.Shows)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OfferId != null)
                    hashCode = hashCode * 59 + OfferId.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (CofinancePrice != null)
                    hashCode = hashCode * 59 + CofinancePrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Competitiveness.GetHashCode();
                    
                    hashCode = hashCode * 59 + Shows.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OfferForRecommendationDTO left, OfferForRecommendationDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OfferForRecommendationDTO left, OfferForRecommendationDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
