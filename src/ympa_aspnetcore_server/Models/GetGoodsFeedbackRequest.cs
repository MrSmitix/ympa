/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Фильтр запроса отзывов в кабинете. 
    /// </summary>
    [DataContract]
    public partial class GetGoodsFeedbackRequest : IEquatable<GetGoodsFeedbackRequest>
    {
        /// <summary>
        /// Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
        /// </summary>
        /// <value>Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. </value>
        [DataMember(Name="dateTimeFrom", EmitDefaultValue=true)]
        public DateTime DateTimeFrom { get; set; }

        /// <summary>
        /// Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
        /// </summary>
        /// <value>Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. </value>
        [DataMember(Name="dateTimeTo", EmitDefaultValue=true)]
        public DateTime DateTimeTo { get; set; }

        /// <summary>
        /// Gets or Sets ReactionStatus
        /// </summary>
        [DataMember(Name="reactionStatus", EmitDefaultValue=true)]
        public FeedbackReactionStatusType ReactionStatus { get; set; }

        /// <summary>
        /// Оценка товара.
        /// </summary>
        /// <value>Оценка товара.</value>
        [DataMember(Name="ratingValues", EmitDefaultValue=true)]
        public List<int> RatingValues { get; set; }

        /// <summary>
        /// Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
        /// </summary>
        /// <value>Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). </value>
        [DataMember(Name="modelIds", EmitDefaultValue=true)]
        public List<long> ModelIds { get; set; }

        /// <summary>
        /// Фильтр отзывов за баллы Плюса.
        /// </summary>
        /// <value>Фильтр отзывов за баллы Плюса.</value>
        [DataMember(Name="paid", EmitDefaultValue=true)]
        public bool Paid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetGoodsFeedbackRequest {\n");
            sb.Append("  DateTimeFrom: ").Append(DateTimeFrom).Append("\n");
            sb.Append("  DateTimeTo: ").Append(DateTimeTo).Append("\n");
            sb.Append("  ReactionStatus: ").Append(ReactionStatus).Append("\n");
            sb.Append("  RatingValues: ").Append(RatingValues).Append("\n");
            sb.Append("  ModelIds: ").Append(ModelIds).Append("\n");
            sb.Append("  Paid: ").Append(Paid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetGoodsFeedbackRequest)obj);
        }

        /// <summary>
        /// Returns true if GetGoodsFeedbackRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GetGoodsFeedbackRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetGoodsFeedbackRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DateTimeFrom == other.DateTimeFrom ||
                    
                    DateTimeFrom.Equals(other.DateTimeFrom)
                ) && 
                (
                    DateTimeTo == other.DateTimeTo ||
                    
                    DateTimeTo.Equals(other.DateTimeTo)
                ) && 
                (
                    ReactionStatus == other.ReactionStatus ||
                    
                    ReactionStatus.Equals(other.ReactionStatus)
                ) && 
                (
                    RatingValues == other.RatingValues ||
                    RatingValues != null &&
                    other.RatingValues != null &&
                    RatingValues.SequenceEqual(other.RatingValues)
                ) && 
                (
                    ModelIds == other.ModelIds ||
                    ModelIds != null &&
                    other.ModelIds != null &&
                    ModelIds.SequenceEqual(other.ModelIds)
                ) && 
                (
                    Paid == other.Paid ||
                    
                    Paid.Equals(other.Paid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DateTimeFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateTimeTo.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReactionStatus.GetHashCode();
                    if (RatingValues != null)
                    hashCode = hashCode * 59 + RatingValues.GetHashCode();
                    if (ModelIds != null)
                    hashCode = hashCode * 59 + ModelIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Paid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetGoodsFeedbackRequest left, GetGoodsFeedbackRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetGoodsFeedbackRequest left, GetGoodsFeedbackRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
