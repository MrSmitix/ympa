/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Предложение.
    /// </summary>
    [DataContract]
    public partial class OfferDTO : IEquatable<OfferDTO>
    {
        /// <summary>
        /// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
        /// </summary>
        /// <value>Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. </value>
        [DataMember(Name="price", EmitDefaultValue=true)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name="feedId", EmitDefaultValue=true)]
        public long FeedId { get; set; }

        /// <summary>
        /// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name="shopCategoryId", EmitDefaultValue=false)]
        public string ShopCategoryId { get; set; }

        /// <summary>
        /// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
        /// </summary>
        /// <value>Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. </value>
        [DataMember(Name="marketCategoryId", EmitDefaultValue=true)]
        public int MarketCategoryId { get; set; }

        /// <summary>
        /// Цена предложения без скидки.
        /// </summary>
        /// <value>Цена предложения без скидки.</value>
        [DataMember(Name="preDiscountPrice", EmitDefaultValue=true)]
        public decimal PreDiscountPrice { get; set; }

        /// <summary>
        /// Скидка на предложение в процентах.
        /// </summary>
        /// <value>Скидка на предложение в процентах.</value>
        [DataMember(Name="discount", EmitDefaultValue=true)]
        public int Discount { get; set; }

        /// <summary>
        /// Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
        /// </summary>
        /// <value>Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. </value>
        [DataMember(Name="cutPrice", EmitDefaultValue=true)]
        public bool CutPrice { get; set; }

        /// <summary>
        /// URL-адрес предложения на сайте магазина.
        /// </summary>
        /// <value>URL-адрес предложения на сайте магазина.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
        /// </summary>
        /// <value>Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} </value>
        [Required]
        [DataMember(Name="modelId", EmitDefaultValue=true)]
        public long ModelId { get; set; }

        /// <summary>
        /// Наименование предложения.
        /// </summary>
        /// <value>Наименование предложения.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public CurrencyType Currency { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. </value>
        [DataMember(Name="bid", EmitDefaultValue=true)]
        public decimal Bid { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. </value>
        [DataMember(Name="cbid", EmitDefaultValue=true)]
        public decimal Cbid { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. </value>
        [DataMember(Name="fee", EmitDefaultValue=true)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
        /// </summary>
        /// <value>Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. </value>
        [DataMember(Name="blocked", EmitDefaultValue=true)]
        public bool Blocked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferDTO {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShopCategoryId: ").Append(ShopCategoryId).Append("\n");
            sb.Append("  MarketCategoryId: ").Append(MarketCategoryId).Append("\n");
            sb.Append("  PreDiscountPrice: ").Append(PreDiscountPrice).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  CutPrice: ").Append(CutPrice).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  Cbid: ").Append(Cbid).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OfferDTO)obj);
        }

        /// <summary>
        /// Returns true if OfferDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    FeedId == other.FeedId ||
                    
                    FeedId.Equals(other.FeedId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ShopCategoryId == other.ShopCategoryId ||
                    ShopCategoryId != null &&
                    ShopCategoryId.Equals(other.ShopCategoryId)
                ) && 
                (
                    MarketCategoryId == other.MarketCategoryId ||
                    
                    MarketCategoryId.Equals(other.MarketCategoryId)
                ) && 
                (
                    PreDiscountPrice == other.PreDiscountPrice ||
                    
                    PreDiscountPrice.Equals(other.PreDiscountPrice)
                ) && 
                (
                    Discount == other.Discount ||
                    
                    Discount.Equals(other.Discount)
                ) && 
                (
                    CutPrice == other.CutPrice ||
                    
                    CutPrice.Equals(other.CutPrice)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    ModelId == other.ModelId ||
                    
                    ModelId.Equals(other.ModelId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Currency == other.Currency ||
                    
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Bid == other.Bid ||
                    
                    Bid.Equals(other.Bid)
                ) && 
                (
                    Cbid == other.Cbid ||
                    
                    Cbid.Equals(other.Cbid)
                ) && 
                (
                    Fee == other.Fee ||
                    
                    Fee.Equals(other.Fee)
                ) && 
                (
                    Blocked == other.Blocked ||
                    
                    Blocked.Equals(other.Blocked)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + FeedId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ShopCategoryId != null)
                    hashCode = hashCode * 59 + ShopCategoryId.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketCategoryId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PreDiscountPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Discount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CutPrice.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    
                    hashCode = hashCode * 59 + ModelId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + Bid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Cbid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    
                    hashCode = hashCode * 59 + Blocked.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OfferDTO left, OfferDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OfferDTO left, OfferDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
