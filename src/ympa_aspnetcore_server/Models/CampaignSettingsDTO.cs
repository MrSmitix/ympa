/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Настройки магазина.
    /// </summary>
    [DataContract]
    public partial class CampaignSettingsDTO : IEquatable<CampaignSettingsDTO>
    {
        /// <summary>
        /// Идентификатор региона, в котором находится магазин.
        /// </summary>
        /// <value>Идентификатор региона, в котором находится магазин.</value>
        [DataMember(Name="countryRegion", EmitDefaultValue=true)]
        public long CountryRegion { get; set; }

        /// <summary>
        /// Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. 
        /// </summary>
        /// <value>Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. </value>
        [DataMember(Name="shopName", EmitDefaultValue=false)]
        public string ShopName { get; set; }

        /// <summary>
        /// Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
        /// </summary>
        /// <value>Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. </value>
        [DataMember(Name="showInContext", EmitDefaultValue=true)]
        public bool ShowInContext { get; set; }

        /// <summary>
        /// Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. 
        /// </summary>
        /// <value>Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. </value>
        [DataMember(Name="showInPremium", EmitDefaultValue=true)]
        public bool ShowInPremium { get; set; }

        /// <summary>
        /// Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. 
        /// </summary>
        /// <value>Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. </value>
        [DataMember(Name="useOpenStat", EmitDefaultValue=true)]
        public bool UseOpenStat { get; set; }

        /// <summary>
        /// Gets or Sets LocalRegion
        /// </summary>
        [DataMember(Name="localRegion", EmitDefaultValue=false)]
        public CampaignSettingsLocalRegionDTO LocalRegion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignSettingsDTO {\n");
            sb.Append("  CountryRegion: ").Append(CountryRegion).Append("\n");
            sb.Append("  ShopName: ").Append(ShopName).Append("\n");
            sb.Append("  ShowInContext: ").Append(ShowInContext).Append("\n");
            sb.Append("  ShowInPremium: ").Append(ShowInPremium).Append("\n");
            sb.Append("  UseOpenStat: ").Append(UseOpenStat).Append("\n");
            sb.Append("  LocalRegion: ").Append(LocalRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CampaignSettingsDTO)obj);
        }

        /// <summary>
        /// Returns true if CampaignSettingsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of CampaignSettingsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignSettingsDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CountryRegion == other.CountryRegion ||
                    
                    CountryRegion.Equals(other.CountryRegion)
                ) && 
                (
                    ShopName == other.ShopName ||
                    ShopName != null &&
                    ShopName.Equals(other.ShopName)
                ) && 
                (
                    ShowInContext == other.ShowInContext ||
                    
                    ShowInContext.Equals(other.ShowInContext)
                ) && 
                (
                    ShowInPremium == other.ShowInPremium ||
                    
                    ShowInPremium.Equals(other.ShowInPremium)
                ) && 
                (
                    UseOpenStat == other.UseOpenStat ||
                    
                    UseOpenStat.Equals(other.UseOpenStat)
                ) && 
                (
                    LocalRegion == other.LocalRegion ||
                    LocalRegion != null &&
                    LocalRegion.Equals(other.LocalRegion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CountryRegion.GetHashCode();
                    if (ShopName != null)
                    hashCode = hashCode * 59 + ShopName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowInContext.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowInPremium.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseOpenStat.GetHashCode();
                    if (LocalRegion != null)
                    hashCode = hashCode * 59 + LocalRegion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CampaignSettingsDTO left, CampaignSettingsDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CampaignSettingsDTO left, CampaignSettingsDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
