/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о товаре в коробке.
    /// </summary>
    [DataContract]
    public partial class OrderBoxLayoutItemDTO : IEquatable<OrderBoxLayoutItemDTO>
    {
        /// <summary>
        /// Идентификатор товара в заказе.  {% cut \&quot;Где его взять\&quot; %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.  {% endcut %}   
        /// </summary>
        /// <value>Идентификатор товара в заказе.  {% cut \&quot;Где его взять\&quot; %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.  {% endcut %}   </value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с &#x60;partialCount&#x60;. 
        /// </summary>
        /// <value>Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с &#x60;partialCount&#x60;. </value>
        [DataMember(Name="fullCount", EmitDefaultValue=true)]
        public int FullCount { get; set; }

        /// <summary>
        /// Gets or Sets PartialCount
        /// </summary>
        [DataMember(Name="partialCount", EmitDefaultValue=false)]
        public OrderBoxLayoutPartialCountDTO PartialCount { get; set; }

        /// <summary>
        /// Переданные вами коды маркировки.
        /// </summary>
        /// <value>Переданные вами коды маркировки.</value>
        [DataMember(Name="instances", EmitDefaultValue=true)]
        public List<BriefOrderItemInstanceDTO> Instances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderBoxLayoutItemDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FullCount: ").Append(FullCount).Append("\n");
            sb.Append("  PartialCount: ").Append(PartialCount).Append("\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderBoxLayoutItemDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderBoxLayoutItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderBoxLayoutItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBoxLayoutItemDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    FullCount == other.FullCount ||
                    
                    FullCount.Equals(other.FullCount)
                ) && 
                (
                    PartialCount == other.PartialCount ||
                    PartialCount != null &&
                    PartialCount.Equals(other.PartialCount)
                ) && 
                (
                    Instances == other.Instances ||
                    Instances != null &&
                    other.Instances != null &&
                    Instances.SequenceEqual(other.Instances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + FullCount.GetHashCode();
                    if (PartialCount != null)
                    hashCode = hashCode * 59 + PartialCount.GetHashCode();
                    if (Instances != null)
                    hashCode = hashCode * 59 + Instances.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderBoxLayoutItemDTO left, OrderBoxLayoutItemDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderBoxLayoutItemDTO left, OrderBoxLayoutItemDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
