/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Список товаров в заказе.
    /// </summary>
    [DataContract]
    public partial class OrderItemDTO : IEquatable<OrderItemDTO>
    {
        /// <summary>
        /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
        /// </summary>
        /// <value>Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. </value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name="offerName", EmitDefaultValue=false)]
        public string OfferName { get; set; }

        /// <summary>
        /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
        /// </summary>
        /// <value>Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). </value>
        [DataMember(Name="price", EmitDefaultValue=true)]
        public decimal Price { get; set; }

        /// <summary>
        /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name="buyerPrice", EmitDefaultValue=true)]
        public decimal BuyerPrice { get; set; }

        /// <summary>
        /// Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
        /// </summary>
        /// <value>Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. </value>
        [DataMember(Name="buyerPriceBeforeDiscount", EmitDefaultValue=true)]
        public decimal BuyerPriceBeforeDiscount { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. </value>
        [DataMember(Name="priceBeforeDiscount", EmitDefaultValue=true)]
        public decimal PriceBeforeDiscount { get; set; }

        /// <summary>
        /// Количество единиц товара.
        /// </summary>
        /// <value>Количество единиц товара.</value>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name="vat", EmitDefaultValue=true)]
        public OrderVatType Vat { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="shopSku", EmitDefaultValue=false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. </value>
        [DataMember(Name="subsidy", EmitDefaultValue=true)]
        public decimal Subsidy { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. </value>
        [DataMember(Name="partnerWarehouseId", EmitDefaultValue=false)]
        public string PartnerWarehouseId { get; set; }

        /// <summary>
        /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
        /// </summary>
        /// <value>Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.</value>
        [DataMember(Name="promos", EmitDefaultValue=true)]
        public List<OrderItemPromoDTO> Promos { get; set; }

        /// <summary>
        /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
        /// </summary>
        /// <value>Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. </value>
        [DataMember(Name="instances", EmitDefaultValue=true)]
        public List<OrderItemInstanceDTO> Instances { get; set; }

        /// <summary>
        /// Информация об удалении товара из заказа. 
        /// </summary>
        /// <value>Информация об удалении товара из заказа. </value>
        [DataMember(Name="details", EmitDefaultValue=true)]
        public List<OrderItemDetailDTO> Details { get; set; }

        /// <summary>
        /// Список субсидий по типам.
        /// </summary>
        /// <value>Список субсидий по типам.</value>
        [DataMember(Name="subsidies", EmitDefaultValue=true)]
        public List<OrderItemSubsidyDTO> Subsidies { get; set; }

        /// <summary>
        /// Список необходимых маркировок товара.
        /// </summary>
        /// <value>Список необходимых маркировок товара.</value>
        [DataMember(Name="requiredInstanceTypes", EmitDefaultValue=true)]
        public List<OrderItemInstanceType> RequiredInstanceTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  BuyerPrice: ").Append(BuyerPrice).Append("\n");
            sb.Append("  BuyerPriceBeforeDiscount: ").Append(BuyerPriceBeforeDiscount).Append("\n");
            sb.Append("  PriceBeforeDiscount: ").Append(PriceBeforeDiscount).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Subsidy: ").Append(Subsidy).Append("\n");
            sb.Append("  PartnerWarehouseId: ").Append(PartnerWarehouseId).Append("\n");
            sb.Append("  Promos: ").Append(Promos).Append("\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Subsidies: ").Append(Subsidies).Append("\n");
            sb.Append("  RequiredInstanceTypes: ").Append(RequiredInstanceTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderItemDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    OfferId == other.OfferId ||
                    OfferId != null &&
                    OfferId.Equals(other.OfferId)
                ) && 
                (
                    OfferName == other.OfferName ||
                    OfferName != null &&
                    OfferName.Equals(other.OfferName)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    BuyerPrice == other.BuyerPrice ||
                    
                    BuyerPrice.Equals(other.BuyerPrice)
                ) && 
                (
                    BuyerPriceBeforeDiscount == other.BuyerPriceBeforeDiscount ||
                    
                    BuyerPriceBeforeDiscount.Equals(other.BuyerPriceBeforeDiscount)
                ) && 
                (
                    PriceBeforeDiscount == other.PriceBeforeDiscount ||
                    
                    PriceBeforeDiscount.Equals(other.PriceBeforeDiscount)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Vat == other.Vat ||
                    
                    Vat.Equals(other.Vat)
                ) && 
                (
                    ShopSku == other.ShopSku ||
                    ShopSku != null &&
                    ShopSku.Equals(other.ShopSku)
                ) && 
                (
                    Subsidy == other.Subsidy ||
                    
                    Subsidy.Equals(other.Subsidy)
                ) && 
                (
                    PartnerWarehouseId == other.PartnerWarehouseId ||
                    PartnerWarehouseId != null &&
                    PartnerWarehouseId.Equals(other.PartnerWarehouseId)
                ) && 
                (
                    Promos == other.Promos ||
                    Promos != null &&
                    other.Promos != null &&
                    Promos.SequenceEqual(other.Promos)
                ) && 
                (
                    Instances == other.Instances ||
                    Instances != null &&
                    other.Instances != null &&
                    Instances.SequenceEqual(other.Instances)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    other.Details != null &&
                    Details.SequenceEqual(other.Details)
                ) && 
                (
                    Subsidies == other.Subsidies ||
                    Subsidies != null &&
                    other.Subsidies != null &&
                    Subsidies.SequenceEqual(other.Subsidies)
                ) && 
                (
                    RequiredInstanceTypes == other.RequiredInstanceTypes ||
                    RequiredInstanceTypes != null &&
                    other.RequiredInstanceTypes != null &&
                    RequiredInstanceTypes.SequenceEqual(other.RequiredInstanceTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (OfferId != null)
                    hashCode = hashCode * 59 + OfferId.GetHashCode();
                    if (OfferName != null)
                    hashCode = hashCode * 59 + OfferName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuyerPriceBeforeDiscount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PriceBeforeDiscount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    
                    hashCode = hashCode * 59 + Vat.GetHashCode();
                    if (ShopSku != null)
                    hashCode = hashCode * 59 + ShopSku.GetHashCode();
                    
                    hashCode = hashCode * 59 + Subsidy.GetHashCode();
                    if (PartnerWarehouseId != null)
                    hashCode = hashCode * 59 + PartnerWarehouseId.GetHashCode();
                    if (Promos != null)
                    hashCode = hashCode * 59 + Promos.GetHashCode();
                    if (Instances != null)
                    hashCode = hashCode * 59 + Instances.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (Subsidies != null)
                    hashCode = hashCode * 59 + Subsidies.GetHashCode();
                    if (RequiredInstanceTypes != null)
                    hashCode = hashCode * 59 + RequiredInstanceTypes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderItemDTO left, OrderItemDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderItemDTO left, OrderItemDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
