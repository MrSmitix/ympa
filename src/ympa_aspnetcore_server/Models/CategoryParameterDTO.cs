/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Характеристика товара.
    /// </summary>
    [DataContract]
    public partial class CategoryParameterDTO : IEquatable<CategoryParameterDTO>
    {
        /// <summary>
        /// Идентификатор характеристики.
        /// </summary>
        /// <value>Идентификатор характеристики.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Название характеристики.
        /// </summary>
        /// <value>Название характеристики.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public ParameterType Type { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public CategoryParameterUnitDTO Unit { get; set; }

        /// <summary>
        /// Описание характеристики.
        /// </summary>
        /// <value>Описание характеристики.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
        /// </summary>
        /// <value>Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.</value>
        [DataMember(Name="recommendationTypes", EmitDefaultValue=true)]
        public List<OfferCardRecommendationType> RecommendationTypes { get; set; }

        /// <summary>
        /// Обязательность характеристики.
        /// </summary>
        /// <value>Обязательность характеристики.</value>
        [Required]
        [DataMember(Name="required", EmitDefaultValue=true)]
        public bool Required { get; set; }

        /// <summary>
        /// Используется ли характеристика в фильтре.
        /// </summary>
        /// <value>Используется ли характеристика в фильтре.</value>
        [Required]
        [DataMember(Name="filtering", EmitDefaultValue=true)]
        public bool Filtering { get; set; }

        /// <summary>
        /// Является ли характеристика особенностью варианта.
        /// </summary>
        /// <value>Является ли характеристика особенностью варианта.</value>
        [Required]
        [DataMember(Name="distinctive", EmitDefaultValue=true)]
        public bool Distinctive { get; set; }

        /// <summary>
        /// Можно ли передать сразу несколько значений.
        /// </summary>
        /// <value>Можно ли передать сразу несколько значений.</value>
        [Required]
        [DataMember(Name="multivalue", EmitDefaultValue=true)]
        public bool Multivalue { get; set; }

        /// <summary>
        /// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [Required]
        [DataMember(Name="allowCustomValues", EmitDefaultValue=true)]
        public bool AllowCustomValues { get; set; }

        /// <summary>
        /// Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [DataMember(Name="values", EmitDefaultValue=true)]
        public List<ParameterValueOptionDTO> Values { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public ParameterValueConstraintsDTO Constraints { get; set; }

        /// <summary>
        /// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
        /// </summary>
        /// <value>Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.</value>
        [DataMember(Name="valueRestrictions", EmitDefaultValue=true)]
        public List<ValueRestrictionDTO> ValueRestrictions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryParameterDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RecommendationTypes: ").Append(RecommendationTypes).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Filtering: ").Append(Filtering).Append("\n");
            sb.Append("  Distinctive: ").Append(Distinctive).Append("\n");
            sb.Append("  Multivalue: ").Append(Multivalue).Append("\n");
            sb.Append("  AllowCustomValues: ").Append(AllowCustomValues).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  ValueRestrictions: ").Append(ValueRestrictions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CategoryParameterDTO)obj);
        }

        /// <summary>
        /// Returns true if CategoryParameterDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of CategoryParameterDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryParameterDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RecommendationTypes == other.RecommendationTypes ||
                    RecommendationTypes != null &&
                    other.RecommendationTypes != null &&
                    RecommendationTypes.SequenceEqual(other.RecommendationTypes)
                ) && 
                (
                    Required == other.Required ||
                    
                    Required.Equals(other.Required)
                ) && 
                (
                    Filtering == other.Filtering ||
                    
                    Filtering.Equals(other.Filtering)
                ) && 
                (
                    Distinctive == other.Distinctive ||
                    
                    Distinctive.Equals(other.Distinctive)
                ) && 
                (
                    Multivalue == other.Multivalue ||
                    
                    Multivalue.Equals(other.Multivalue)
                ) && 
                (
                    AllowCustomValues == other.AllowCustomValues ||
                    
                    AllowCustomValues.Equals(other.AllowCustomValues)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    Constraints == other.Constraints ||
                    Constraints != null &&
                    Constraints.Equals(other.Constraints)
                ) && 
                (
                    ValueRestrictions == other.ValueRestrictions ||
                    ValueRestrictions != null &&
                    other.ValueRestrictions != null &&
                    ValueRestrictions.SequenceEqual(other.ValueRestrictions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RecommendationTypes != null)
                    hashCode = hashCode * 59 + RecommendationTypes.GetHashCode();
                    
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    
                    hashCode = hashCode * 59 + Filtering.GetHashCode();
                    
                    hashCode = hashCode * 59 + Distinctive.GetHashCode();
                    
                    hashCode = hashCode * 59 + Multivalue.GetHashCode();
                    
                    hashCode = hashCode * 59 + AllowCustomValues.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    if (Constraints != null)
                    hashCode = hashCode * 59 + Constraints.GetHashCode();
                    if (ValueRestrictions != null)
                    hashCode = hashCode * 59 + ValueRestrictions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CategoryParameterDTO left, CategoryParameterDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CategoryParameterDTO left, CategoryParameterDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
