/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о товарах в каталоге. 
    /// </summary>
    [DataContract]
    public partial class GetMappingDTO : IEquatable<GetMappingDTO>
    {
        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name="marketSku", EmitDefaultValue=true)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name="marketSkuName", EmitDefaultValue=false)]
        public string MarketSkuName { get; set; }

        /// <summary>
        /// Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name="marketModelId", EmitDefaultValue=true)]
        public long MarketModelId { get; set; }

        /// <summary>
        /// Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
        /// </summary>
        /// <value>Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. </value>
        [DataMember(Name="marketModelName", EmitDefaultValue=false)]
        public string MarketModelName { get; set; }

        /// <summary>
        /// Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
        /// </summary>
        /// <value>Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. </value>
        [DataMember(Name="marketCategoryId", EmitDefaultValue=true)]
        public long MarketCategoryId { get; set; }

        /// <summary>
        /// Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
        /// </summary>
        /// <value>Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. </value>
        [DataMember(Name="marketCategoryName", EmitDefaultValue=false)]
        public string MarketCategoryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMappingDTO {\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  MarketSkuName: ").Append(MarketSkuName).Append("\n");
            sb.Append("  MarketModelId: ").Append(MarketModelId).Append("\n");
            sb.Append("  MarketModelName: ").Append(MarketModelName).Append("\n");
            sb.Append("  MarketCategoryId: ").Append(MarketCategoryId).Append("\n");
            sb.Append("  MarketCategoryName: ").Append(MarketCategoryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetMappingDTO)obj);
        }

        /// <summary>
        /// Returns true if GetMappingDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GetMappingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMappingDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MarketSku == other.MarketSku ||
                    
                    MarketSku.Equals(other.MarketSku)
                ) && 
                (
                    MarketSkuName == other.MarketSkuName ||
                    MarketSkuName != null &&
                    MarketSkuName.Equals(other.MarketSkuName)
                ) && 
                (
                    MarketModelId == other.MarketModelId ||
                    
                    MarketModelId.Equals(other.MarketModelId)
                ) && 
                (
                    MarketModelName == other.MarketModelName ||
                    MarketModelName != null &&
                    MarketModelName.Equals(other.MarketModelName)
                ) && 
                (
                    MarketCategoryId == other.MarketCategoryId ||
                    
                    MarketCategoryId.Equals(other.MarketCategoryId)
                ) && 
                (
                    MarketCategoryName == other.MarketCategoryName ||
                    MarketCategoryName != null &&
                    MarketCategoryName.Equals(other.MarketCategoryName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + MarketSku.GetHashCode();
                    if (MarketSkuName != null)
                    hashCode = hashCode * 59 + MarketSkuName.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketModelId.GetHashCode();
                    if (MarketModelName != null)
                    hashCode = hashCode * 59 + MarketModelName.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketCategoryId.GetHashCode();
                    if (MarketCategoryName != null)
                    hashCode = hashCode * 59 + MarketCategoryName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetMappingDTO left, GetMappingDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetMappingDTO left, GetMappingDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
