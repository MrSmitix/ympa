/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о покупателе. 
    /// </summary>
    [DataContract]
    public partial class OrderBusinessBuyerDTO : IEquatable<OrderBusinessBuyerDTO>
    {
        /// <summary>
        /// ИНН.
        /// </summary>
        /// <value>ИНН.</value>
        [DataMember(Name="inn", EmitDefaultValue=false)]
        public string Inn { get; set; }

        /// <summary>
        /// КПП.
        /// </summary>
        /// <value>КПП.</value>
        [DataMember(Name="kpp", EmitDefaultValue=false)]
        public string Kpp { get; set; }

        /// <summary>
        /// Наименование юридического лица.
        /// </summary>
        /// <value>Наименование юридического лица.</value>
        [DataMember(Name="organizationName", EmitDefaultValue=false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Юридический адрес.
        /// </summary>
        /// <value>Юридический адрес.</value>
        [DataMember(Name="organizationJurAddress", EmitDefaultValue=false)]
        public string OrganizationJurAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderBusinessBuyerDTO {\n");
            sb.Append("  Inn: ").Append(Inn).Append("\n");
            sb.Append("  Kpp: ").Append(Kpp).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationJurAddress: ").Append(OrganizationJurAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderBusinessBuyerDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderBusinessBuyerDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderBusinessBuyerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderBusinessBuyerDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Inn == other.Inn ||
                    Inn != null &&
                    Inn.Equals(other.Inn)
                ) && 
                (
                    Kpp == other.Kpp ||
                    Kpp != null &&
                    Kpp.Equals(other.Kpp)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.Equals(other.OrganizationName)
                ) && 
                (
                    OrganizationJurAddress == other.OrganizationJurAddress ||
                    OrganizationJurAddress != null &&
                    OrganizationJurAddress.Equals(other.OrganizationJurAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Inn != null)
                    hashCode = hashCode * 59 + Inn.GetHashCode();
                    if (Kpp != null)
                    hashCode = hashCode * 59 + Kpp.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (OrganizationJurAddress != null)
                    hashCode = hashCode * 59 + OrganizationJurAddress.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderBusinessBuyerDTO left, OrderBusinessBuyerDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderBusinessBuyerDTO left, OrderBusinessBuyerDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
