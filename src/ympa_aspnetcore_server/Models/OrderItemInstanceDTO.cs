/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
    /// </summary>
    [DataContract]
    public partial class OrderItemInstanceDTO : IEquatable<OrderItemInstanceDTO>
    {
        /// <summary>
        /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) без криптохвоста.
        /// </summary>
        /// <value>Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) без криптохвоста.</value>
        [DataMember(Name="cis", EmitDefaultValue=false)]
        public string Cis { get; set; }

        /// <summary>
        /// Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) с криптохвостом.
        /// </summary>
        /// <value>Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) с криптохвостом.</value>
        [DataMember(Name="cisFull", EmitDefaultValue=false)]
        public string CisFull { get; set; }

        /// <summary>
        /// УИН ювелирного изделия (16-значный код) Производитель получает УИН, когда регистрирует изделие в системе контроля за оборотом драгоценных металлов и камней — ГИИС ДМДК. 
        /// </summary>
        /// <value>УИН ювелирного изделия (16-значный код) Производитель получает УИН, когда регистрирует изделие в системе контроля за оборотом драгоценных металлов и камней — ГИИС ДМДК. </value>
        [DataMember(Name="uin", EmitDefaultValue=false)]
        public string Uin { get; set; }

        /// <summary>
        /// Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
        /// </summary>
        /// <value>Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. </value>
        [DataMember(Name="rnpt", EmitDefaultValue=false)]
        public string Rnpt { get; set; }

        /// <summary>
        /// Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
        /// </summary>
        /// <value>Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. </value>
        [DataMember(Name="gtd", EmitDefaultValue=false)]
        public string Gtd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemInstanceDTO {\n");
            sb.Append("  Cis: ").Append(Cis).Append("\n");
            sb.Append("  CisFull: ").Append(CisFull).Append("\n");
            sb.Append("  Uin: ").Append(Uin).Append("\n");
            sb.Append("  Rnpt: ").Append(Rnpt).Append("\n");
            sb.Append("  Gtd: ").Append(Gtd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderItemInstanceDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderItemInstanceDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItemInstanceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemInstanceDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cis == other.Cis ||
                    Cis != null &&
                    Cis.Equals(other.Cis)
                ) && 
                (
                    CisFull == other.CisFull ||
                    CisFull != null &&
                    CisFull.Equals(other.CisFull)
                ) && 
                (
                    Uin == other.Uin ||
                    Uin != null &&
                    Uin.Equals(other.Uin)
                ) && 
                (
                    Rnpt == other.Rnpt ||
                    Rnpt != null &&
                    Rnpt.Equals(other.Rnpt)
                ) && 
                (
                    Gtd == other.Gtd ||
                    Gtd != null &&
                    Gtd.Equals(other.Gtd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cis != null)
                    hashCode = hashCode * 59 + Cis.GetHashCode();
                    if (CisFull != null)
                    hashCode = hashCode * 59 + CisFull.GetHashCode();
                    if (Uin != null)
                    hashCode = hashCode * 59 + Uin.GetHashCode();
                    if (Rnpt != null)
                    hashCode = hashCode * 59 + Rnpt.GetHashCode();
                    if (Gtd != null)
                    hashCode = hashCode * 59 + Gtd.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderItemInstanceDTO left, OrderItemInstanceDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderItemInstanceDTO left, OrderItemInstanceDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
