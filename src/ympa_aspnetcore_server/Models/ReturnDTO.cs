/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Возврат заказа.
    /// </summary>
    [DataContract]
    public partial class ReturnDTO : IEquatable<ReturnDTO>
    {
        /// <summary>
        /// Идентификатор возврата.
        /// </summary>
        /// <value>Идентификатор возврата.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Номер заказа.
        /// </summary>
        /// <value>Номер заказа.</value>
        [DataMember(Name="orderId", EmitDefaultValue=true)]
        public long OrderId { get; set; }

        /// <summary>
        /// Дата создания возврата клиентом.
        /// </summary>
        /// <value>Дата создания возврата клиентом.</value>
        [DataMember(Name="creationDate", EmitDefaultValue=true)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Дата обновления возврата.
        /// </summary>
        /// <value>Дата обновления возврата.</value>
        [DataMember(Name="updateDate", EmitDefaultValue=true)]
        public DateTime UpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets RefundStatus
        /// </summary>
        [DataMember(Name="refundStatus", EmitDefaultValue=true)]
        public RefundStatusType RefundStatus { get; set; }

        /// <summary>
        /// Gets or Sets LogisticPickupPoint
        /// </summary>
        [DataMember(Name="logisticPickupPoint", EmitDefaultValue=false)]
        public LogisticPickupPointDTO LogisticPickupPoint { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentRecipientType
        /// </summary>
        [DataMember(Name="shipmentRecipientType", EmitDefaultValue=true)]
        public RecipientType ShipmentRecipientType { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentStatus
        /// </summary>
        [DataMember(Name="shipmentStatus", EmitDefaultValue=true)]
        public ReturnShipmentStatusType ShipmentStatus { get; set; }

        /// <summary>
        /// Сумма возврата.
        /// </summary>
        /// <value>Сумма возврата.</value>
        [DataMember(Name="refundAmount", EmitDefaultValue=true)]
        public long RefundAmount { get; set; }

        /// <summary>
        /// Список товаров в возврате.
        /// </summary>
        /// <value>Список товаров в возврате.</value>
        [Required]
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ReturnItemDTO> Items { get; set; }

        /// <summary>
        /// Gets or Sets ReturnType
        /// </summary>
        [DataMember(Name="returnType", EmitDefaultValue=true)]
        public ReturnType ReturnType { get; set; }

        /// <summary>
        /// Используется ли опция **Быстрый возврат денег за дешевый брак**. 
        /// </summary>
        /// <value>Используется ли опция **Быстрый возврат денег за дешевый брак**. </value>
        [DataMember(Name="fastReturn", EmitDefaultValue=true)]
        public bool FastReturn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  RefundStatus: ").Append(RefundStatus).Append("\n");
            sb.Append("  LogisticPickupPoint: ").Append(LogisticPickupPoint).Append("\n");
            sb.Append("  ShipmentRecipientType: ").Append(ShipmentRecipientType).Append("\n");
            sb.Append("  ShipmentStatus: ").Append(ShipmentStatus).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  ReturnType: ").Append(ReturnType).Append("\n");
            sb.Append("  FastReturn: ").Append(FastReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnDTO)obj);
        }

        /// <summary>
        /// Returns true if ReturnDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    OrderId == other.OrderId ||
                    
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    UpdateDate == other.UpdateDate ||
                    
                    UpdateDate.Equals(other.UpdateDate)
                ) && 
                (
                    RefundStatus == other.RefundStatus ||
                    
                    RefundStatus.Equals(other.RefundStatus)
                ) && 
                (
                    LogisticPickupPoint == other.LogisticPickupPoint ||
                    LogisticPickupPoint != null &&
                    LogisticPickupPoint.Equals(other.LogisticPickupPoint)
                ) && 
                (
                    ShipmentRecipientType == other.ShipmentRecipientType ||
                    
                    ShipmentRecipientType.Equals(other.ShipmentRecipientType)
                ) && 
                (
                    ShipmentStatus == other.ShipmentStatus ||
                    
                    ShipmentStatus.Equals(other.ShipmentStatus)
                ) && 
                (
                    RefundAmount == other.RefundAmount ||
                    
                    RefundAmount.Equals(other.RefundAmount)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    other.Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    ReturnType == other.ReturnType ||
                    
                    ReturnType.Equals(other.ReturnType)
                ) && 
                (
                    FastReturn == other.FastReturn ||
                    
                    FastReturn.Equals(other.FastReturn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefundStatus.GetHashCode();
                    if (LogisticPickupPoint != null)
                    hashCode = hashCode * 59 + LogisticPickupPoint.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShipmentRecipientType.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShipmentStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefundAmount.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReturnType.GetHashCode();
                    
                    hashCode = hashCode * 59 + FastReturn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnDTO left, ReturnDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnDTO left, ReturnDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
