/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Модель для пагинации.
    /// </summary>
    [DataContract]
    public partial class FlippingPagerDTO : IEquatable<FlippingPagerDTO>
    {
        /// <summary>
        /// Сколько всего найдено элементов.
        /// </summary>
        /// <value>Сколько всего найдено элементов.</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public int Total { get; set; }

        /// <summary>
        /// Начальный номер найденного элемента на странице.
        /// </summary>
        /// <value>Начальный номер найденного элемента на странице.</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public int From { get; set; }

        /// <summary>
        /// Конечный номер найденного элемента на странице.
        /// </summary>
        /// <value>Конечный номер найденного элемента на странице.</value>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public int To { get; set; }

        /// <summary>
        /// Текущая страница.
        /// </summary>
        /// <value>Текущая страница.</value>
        [DataMember(Name="currentPage", EmitDefaultValue=true)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Общее количество страниц.
        /// </summary>
        /// <value>Общее количество страниц.</value>
        [DataMember(Name="pagesCount", EmitDefaultValue=true)]
        public int PagesCount { get; set; }

        /// <summary>
        /// Размер страницы.
        /// </summary>
        /// <value>Размер страницы.</value>
        [DataMember(Name="pageSize", EmitDefaultValue=true)]
        public int PageSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlippingPagerDTO {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PagesCount: ").Append(PagesCount).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlippingPagerDTO)obj);
        }

        /// <summary>
        /// Returns true if FlippingPagerDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FlippingPagerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlippingPagerDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                ) && 
                (
                    From == other.From ||
                    
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    
                    To.Equals(other.To)
                ) && 
                (
                    CurrentPage == other.CurrentPage ||
                    
                    CurrentPage.Equals(other.CurrentPage)
                ) && 
                (
                    PagesCount == other.PagesCount ||
                    
                    PagesCount.Equals(other.PagesCount)
                ) && 
                (
                    PageSize == other.PageSize ||
                    
                    PageSize.Equals(other.PageSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    
                    hashCode = hashCode * 59 + From.GetHashCode();
                    
                    hashCode = hashCode * 59 + To.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentPage.GetHashCode();
                    
                    hashCode = hashCode * 59 + PagesCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlippingPagerDTO left, FlippingPagerDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlippingPagerDTO left, FlippingPagerDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
