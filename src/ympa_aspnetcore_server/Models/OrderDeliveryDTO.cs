/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Информация о доставке.
    /// </summary>
    [DataContract]
    public partial class OrderDeliveryDTO : IEquatable<OrderDeliveryDTO>
    {
        /// <summary>
        /// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
        /// </summary>
        /// <value>Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public OrderDeliveryType Type { get; set; }

        /// <summary>
        /// Наименование службы доставки.
        /// </summary>
        /// <value>Наименование службы доставки.</value>
        [DataMember(Name="serviceName", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. </value>
        [DataMember(Name="price", EmitDefaultValue=true)]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPartnerType
        /// </summary>
        [DataMember(Name="deliveryPartnerType", EmitDefaultValue=true)]
        public OrderDeliveryPartnerType DeliveryPartnerType { get; set; }

        /// <summary>
        /// Gets or Sets Courier
        /// </summary>
        [DataMember(Name="courier", EmitDefaultValue=false)]
        public OrderCourierDTO Courier { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name="dates", EmitDefaultValue=false)]
        public OrderDeliveryDatesDTO Dates { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public RegionDTO Region { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public OrderDeliveryAddressDTO Address { get; set; }

        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name="vat", EmitDefaultValue=true)]
        public OrderVatType Vat { get; set; }

        /// <summary>
        /// Идентификатор службы доставки.
        /// </summary>
        /// <value>Идентификатор службы доставки.</value>
        [DataMember(Name="deliveryServiceId", EmitDefaultValue=true)]
        public long DeliveryServiceId { get; set; }

        /// <summary>
        /// Gets or Sets LiftType
        /// </summary>
        [DataMember(Name="liftType", EmitDefaultValue=true)]
        public OrderLiftType LiftType { get; set; }

        /// <summary>
        /// Стоимость подъема на этаж.
        /// </summary>
        /// <value>Стоимость подъема на этаж.</value>
        [DataMember(Name="liftPrice", EmitDefaultValue=true)]
        public decimal LiftPrice { get; set; }

        /// <summary>
        /// Идентификатор пункта самовывоза, присвоенный магазином.
        /// </summary>
        /// <value>Идентификатор пункта самовывоза, присвоенный магазином.</value>
        [DataMember(Name="outletCode", EmitDefaultValue=false)]
        public string OutletCode { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        /// <example>23-09-2022</example>
        [DataMember(Name="outletStorageLimitDate", EmitDefaultValue=false)]
        public string OutletStorageLimitDate { get; set; }

        /// <summary>
        /// Gets or Sets DispatchType
        /// </summary>
        [DataMember(Name="dispatchType", EmitDefaultValue=true)]
        public OrderDeliveryDispatchType DispatchType { get; set; }

        /// <summary>
        /// Информация для отслеживания перемещений посылки.
        /// </summary>
        /// <value>Информация для отслеживания перемещений посылки.</value>
        [DataMember(Name="tracks", EmitDefaultValue=true)]
        public List<OrderTrackDTO> Tracks { get; set; }

        /// <summary>
        /// Информация о посылках.
        /// </summary>
        /// <value>Информация о посылках.</value>
        [DataMember(Name="shipments", EmitDefaultValue=true)]
        public List<OrderShipmentDTO> Shipments { get; set; }

        /// <summary>
        /// Приблизительная ли дата доставки.
        /// </summary>
        /// <value>Приблизительная ли дата доставки.</value>
        [DataMember(Name="estimated", EmitDefaultValue=true)]
        public bool Estimated { get; set; }

        /// <summary>
        /// Gets or Sets EacType
        /// </summary>
        [DataMember(Name="eacType", EmitDefaultValue=true)]
        public OrderDeliveryEacType EacType { get; set; }

        /// <summary>
        /// Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
        /// </summary>
        /// <value>Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). </value>
        [DataMember(Name="eacCode", EmitDefaultValue=false)]
        public string EacCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDeliveryDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DeliveryPartnerType: ").Append(DeliveryPartnerType).Append("\n");
            sb.Append("  Courier: ").Append(Courier).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  DeliveryServiceId: ").Append(DeliveryServiceId).Append("\n");
            sb.Append("  LiftType: ").Append(LiftType).Append("\n");
            sb.Append("  LiftPrice: ").Append(LiftPrice).Append("\n");
            sb.Append("  OutletCode: ").Append(OutletCode).Append("\n");
            sb.Append("  OutletStorageLimitDate: ").Append(OutletStorageLimitDate).Append("\n");
            sb.Append("  DispatchType: ").Append(DispatchType).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  Estimated: ").Append(Estimated).Append("\n");
            sb.Append("  EacType: ").Append(EacType).Append("\n");
            sb.Append("  EacCode: ").Append(EacCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderDeliveryDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderDeliveryDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDeliveryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDeliveryDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    DeliveryPartnerType == other.DeliveryPartnerType ||
                    
                    DeliveryPartnerType.Equals(other.DeliveryPartnerType)
                ) && 
                (
                    Courier == other.Courier ||
                    Courier != null &&
                    Courier.Equals(other.Courier)
                ) && 
                (
                    Dates == other.Dates ||
                    Dates != null &&
                    Dates.Equals(other.Dates)
                ) && 
                (
                    Region == other.Region ||
                    Region != null &&
                    Region.Equals(other.Region)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Vat == other.Vat ||
                    
                    Vat.Equals(other.Vat)
                ) && 
                (
                    DeliveryServiceId == other.DeliveryServiceId ||
                    
                    DeliveryServiceId.Equals(other.DeliveryServiceId)
                ) && 
                (
                    LiftType == other.LiftType ||
                    
                    LiftType.Equals(other.LiftType)
                ) && 
                (
                    LiftPrice == other.LiftPrice ||
                    
                    LiftPrice.Equals(other.LiftPrice)
                ) && 
                (
                    OutletCode == other.OutletCode ||
                    OutletCode != null &&
                    OutletCode.Equals(other.OutletCode)
                ) && 
                (
                    OutletStorageLimitDate == other.OutletStorageLimitDate ||
                    OutletStorageLimitDate != null &&
                    OutletStorageLimitDate.Equals(other.OutletStorageLimitDate)
                ) && 
                (
                    DispatchType == other.DispatchType ||
                    
                    DispatchType.Equals(other.DispatchType)
                ) && 
                (
                    Tracks == other.Tracks ||
                    Tracks != null &&
                    other.Tracks != null &&
                    Tracks.SequenceEqual(other.Tracks)
                ) && 
                (
                    Shipments == other.Shipments ||
                    Shipments != null &&
                    other.Shipments != null &&
                    Shipments.SequenceEqual(other.Shipments)
                ) && 
                (
                    Estimated == other.Estimated ||
                    
                    Estimated.Equals(other.Estimated)
                ) && 
                (
                    EacType == other.EacType ||
                    
                    EacType.Equals(other.EacType)
                ) && 
                (
                    EacCode == other.EacCode ||
                    EacCode != null &&
                    EacCode.Equals(other.EacCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveryPartnerType.GetHashCode();
                    if (Courier != null)
                    hashCode = hashCode * 59 + Courier.GetHashCode();
                    if (Dates != null)
                    hashCode = hashCode * 59 + Dates.GetHashCode();
                    if (Region != null)
                    hashCode = hashCode * 59 + Region.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    
                    hashCode = hashCode * 59 + Vat.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveryServiceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LiftType.GetHashCode();
                    
                    hashCode = hashCode * 59 + LiftPrice.GetHashCode();
                    if (OutletCode != null)
                    hashCode = hashCode * 59 + OutletCode.GetHashCode();
                    if (OutletStorageLimitDate != null)
                    hashCode = hashCode * 59 + OutletStorageLimitDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + DispatchType.GetHashCode();
                    if (Tracks != null)
                    hashCode = hashCode * 59 + Tracks.GetHashCode();
                    if (Shipments != null)
                    hashCode = hashCode * 59 + Shipments.GetHashCode();
                    
                    hashCode = hashCode * 59 + Estimated.GetHashCode();
                    
                    hashCode = hashCode * 59 + EacType.GetHashCode();
                    if (EacCode != null)
                    hashCode = hashCode * 59 + EacCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderDeliveryDTO left, OrderDeliveryDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDeliveryDTO left, OrderDeliveryDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
