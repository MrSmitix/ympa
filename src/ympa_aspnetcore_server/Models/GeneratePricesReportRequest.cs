/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Converters;

namespace ympa_aspnetcore_server.Models
{ 
    /// <summary>
    /// Данные, необходимые для генерации отчета.
    /// </summary>
    [DataContract]
    public partial class GeneratePricesReportRequest : IEquatable<GeneratePricesReportRequest>
    {
        /// <summary>
        /// Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
        /// </summary>
        /// <value>Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. </value>
        [DataMember(Name="businessId", EmitDefaultValue=true)]
        public long BusinessId { get; set; }

        /// <summary>
        /// Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
        /// </summary>
        /// <value>Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. </value>
        [DataMember(Name="campaignId", EmitDefaultValue=true)]
        public long CampaignId { get; set; }

        /// <summary>
        /// Фильтр по категориям на Маркете.
        /// </summary>
        /// <value>Фильтр по категориям на Маркете.</value>
        [DataMember(Name="categoryIds", EmitDefaultValue=true)]
        public List<long> CategoryIds { get; set; }

        /// <summary>
        /// Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name="creationDateFrom", EmitDefaultValue=true)]
        public DateOnly CreationDateFrom { get; set; }

        /// <summary>
        /// Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name="creationDateTo", EmitDefaultValue=true)]
        public DateOnly CreationDateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneratePricesReportRequest {\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  CreationDateFrom: ").Append(CreationDateFrom).Append("\n");
            sb.Append("  CreationDateTo: ").Append(CreationDateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GeneratePricesReportRequest)obj);
        }

        /// <summary>
        /// Returns true if GeneratePricesReportRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GeneratePricesReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneratePricesReportRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BusinessId == other.BusinessId ||
                    
                    BusinessId.Equals(other.BusinessId)
                ) && 
                (
                    CampaignId == other.CampaignId ||
                    
                    CampaignId.Equals(other.CampaignId)
                ) && 
                (
                    CategoryIds == other.CategoryIds ||
                    CategoryIds != null &&
                    other.CategoryIds != null &&
                    CategoryIds.SequenceEqual(other.CategoryIds)
                ) && 
                (
                    CreationDateFrom == other.CreationDateFrom ||
                    
                    CreationDateFrom.Equals(other.CreationDateFrom)
                ) && 
                (
                    CreationDateTo == other.CreationDateTo ||
                    
                    CreationDateTo.Equals(other.CreationDateTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BusinessId.GetHashCode();
                    
                    hashCode = hashCode * 59 + CampaignId.GetHashCode();
                    if (CategoryIds != null)
                    hashCode = hashCode * 59 + CategoryIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDateFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDateTo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GeneratePricesReportRequest left, GeneratePricesReportRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GeneratePricesReportRequest left, GeneratePricesReportRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
