/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReturnsApiController : ControllerBase
    { 
        /// <summary>
        /// Информация о невыкупе или возврате
        /// </summary>
        /// <remarks>Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <response code="200">Детали возврата.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}")]
        [ValidateModelState]
        [SwaggerOperation("GetReturn")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReturnResponse), description: "Детали возврата.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturn([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReturnResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"fastReturn\" : true,\n    \"orderId\" : 6,\n    \"shipmentRecipientType\" : \"SHOP\",\n    \"refundStatus\" : \"STARTED_BY_USER\",\n    \"logisticPickupPoint\" : {\n      \"logisticPartnerId\" : 5,\n      \"address\" : {\n        \"country\" : \"Россия\",\n        \"city\" : \"Москва\",\n        \"street\" : \"Стрелецкая улица\",\n        \"postcode\" : \"123518\",\n        \"house\" : \"9к2\"\n      },\n      \"instruction\" : \"instruction\",\n      \"name\" : \"name\",\n      \"id\" : 1,\n      \"type\" : \"WAREHOUSE\"\n    },\n    \"id\" : 0,\n    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"items\" : [ {\n      \"shopSku\" : \"shopSku\",\n      \"instances\" : [ {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      }, {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      } ],\n      \"marketSku\" : 2,\n      \"count\" : 7,\n      \"decisions\" : [ {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      }, {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\"\n      }, {\n        \"trackCode\" : \"trackCode\"\n      } ]\n    }, {\n      \"shopSku\" : \"shopSku\",\n      \"instances\" : [ {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      }, {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      } ],\n      \"marketSku\" : 2,\n      \"count\" : 7,\n      \"decisions\" : [ {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      }, {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\"\n      }, {\n        \"trackCode\" : \"trackCode\"\n      } ]\n    } ],\n    \"returnType\" : \"UNREDEEMED\",\n    \"shipmentStatus\" : \"CREATED\",\n    \"refundAmount\" : 5\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetReturnResponse>(exampleJson)
            : default(GetReturnResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение заявления на возврат
        /// </summary>
        /// <remarks>Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <response code="200">Заявление на возврат.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application")]
        [ValidateModelState]
        [SwaggerOperation("GetReturnApplication")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Заявление на возврат.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturnApplication([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение фотографии возврата
        /// </summary>
        /// <remarks>Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <param name="itemId">Идентификатор товара в возврате.</param>
        /// <param name="imageHash">Хеш ссылки изображения для загрузки.</param>
        /// <response code="200">Фотография возврата.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}")]
        [ValidateModelState]
        [SwaggerOperation("GetReturnPhoto")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Фотография возврата.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturnPhoto([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId, [FromRoute (Name = "itemId")][Required]long itemId, [FromRoute (Name = "imageHash")][Required]string imageHash)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список невыкупов и возвратов
        /// </summary>
        /// <remarks>Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="orderIds">Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. </param>
        /// <param name="statuses">Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. </param>
        /// <param name="type">Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. </param>
        /// <param name="fromDate">Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <param name="toDate">Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <param name="fromDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (deprecated)</param>
        /// <param name="toDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (deprecated)</param>
        /// <response code="200">Постраничные возвраты партнера.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/returns")]
        [ValidateModelState]
        [SwaggerOperation("GetReturns")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReturnsResponse), description: "Постраничные возвраты партнера.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturns([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "orderIds")]List<long> orderIds, [FromQuery (Name = "statuses")]List<RefundStatusType> statuses, [FromQuery (Name = "type")]ReturnType? type, [FromQuery (Name = "fromDate")]DateOnly? fromDate, [FromQuery (Name = "toDate")]DateOnly? toDate, [FromQuery (Name = "from_date")]DateOnly? fromDate2, [FromQuery (Name = "to_date")]DateOnly? toDate2)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReturnsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"returns\" : [ {\n      \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"fastReturn\" : true,\n      \"orderId\" : 6,\n      \"shipmentRecipientType\" : \"SHOP\",\n      \"refundStatus\" : \"STARTED_BY_USER\",\n      \"logisticPickupPoint\" : {\n        \"logisticPartnerId\" : 5,\n        \"address\" : {\n          \"country\" : \"Россия\",\n          \"city\" : \"Москва\",\n          \"street\" : \"Стрелецкая улица\",\n          \"postcode\" : \"123518\",\n          \"house\" : \"9к2\"\n        },\n        \"instruction\" : \"instruction\",\n        \"name\" : \"name\",\n        \"id\" : 1,\n        \"type\" : \"WAREHOUSE\"\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"items\" : [ {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      }, {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      } ],\n      \"returnType\" : \"UNREDEEMED\",\n      \"shipmentStatus\" : \"CREATED\",\n      \"refundAmount\" : 5\n    }, {\n      \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"fastReturn\" : true,\n      \"orderId\" : 6,\n      \"shipmentRecipientType\" : \"SHOP\",\n      \"refundStatus\" : \"STARTED_BY_USER\",\n      \"logisticPickupPoint\" : {\n        \"logisticPartnerId\" : 5,\n        \"address\" : {\n          \"country\" : \"Россия\",\n          \"city\" : \"Москва\",\n          \"street\" : \"Стрелецкая улица\",\n          \"postcode\" : \"123518\",\n          \"house\" : \"9к2\"\n        },\n        \"instruction\" : \"instruction\",\n        \"name\" : \"name\",\n        \"id\" : 1,\n        \"type\" : \"WAREHOUSE\"\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"items\" : [ {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      }, {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      } ],\n      \"returnType\" : \"UNREDEEMED\",\n      \"shipmentStatus\" : \"CREATED\",\n      \"refundAmount\" : 5\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetReturnsResponse>(exampleJson)
            : default(GetReturnsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Принятие или изменение решения по возврату
        /// </summary>
        /// <remarks>Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <param name="setReturnDecisionRequest"></param>
        /// <response code="200">Детали возврата.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetReturnDecision")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Детали возврата.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetReturnDecision([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId, [FromBody]SetReturnDecisionRequest setReturnDecisionRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Подтверждение решения по возврату
        /// </summary>
        /// <remarks>Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <response code="200">Статус выполнения операции.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit")]
        [ValidateModelState]
        [SwaggerOperation("SubmitReturnDecision")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Статус выполнения операции.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SubmitReturnDecision([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
