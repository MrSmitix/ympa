/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehousesApiController : ControllerBase
    { 
        /// <summary>
        /// Идентификаторы складов Маркета (FBY)
        /// </summary>
        /// <remarks>Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <response code="200">Список складов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/warehouses")]
        [ValidateModelState]
        [SwaggerOperation("GetFulfillmentWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFulfillmentWarehousesResponse), description: "Список складов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetFulfillmentWarehouses()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFulfillmentWarehousesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"warehouses\" : [ {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"name\" : \"name\",\n      \"id\" : 0\n    }, {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"name\" : \"name\",\n      \"id\" : 0\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFulfillmentWarehousesResponse>(exampleJson)
            : default(GetFulfillmentWarehousesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список складов и групп складов
        /// </summary>
        /// <remarks>Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Список складов и групп складов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/businesses/{businessId}/warehouses")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWarehousesResponse), description: "Список складов и групп складов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetWarehouses([FromRoute (Name = "businessId")][Required]long businessId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWarehousesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"warehouses\" : [ {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"campaignId\" : 6,\n      \"name\" : \"name\",\n      \"express\" : true,\n      \"id\" : 0\n    }, {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"campaignId\" : 6,\n      \"name\" : \"name\",\n      \"express\" : true,\n      \"id\" : 0\n    } ],\n    \"warehouseGroups\" : [ {\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }, {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      } ],\n      \"mainWarehouse\" : {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }\n    }, {\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }, {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      } ],\n      \"mainWarehouse\" : {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetWarehousesResponse>(exampleJson)
            : default(GetWarehousesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
