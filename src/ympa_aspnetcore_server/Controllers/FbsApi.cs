/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FbsApiController : ControllerBase
    { 
        /// <summary>
        /// Скрытие товаров и настройки скрытия
        /// </summary>
        /// <remarks>Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="addHiddenOffersRequest">Запрос на скрытие оферов.</param>
        /// <response code="200">Настройки скрытия получены и скоро вступят в силу.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/hidden-offers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddHiddenOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Настройки скрытия получены и скоро вступят в силу.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult AddHiddenOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]AddHiddenOffersRequest addHiddenOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление товаров в архив
        /// </summary>
        /// <remarks>Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="addOffersToArchiveRequest"></param>
        /// <response code="200">Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/archive")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddOffersToArchive")]
        [SwaggerResponse(statusCode: 200, type: typeof(AddOffersToArchiveResponse), description: "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult AddOffersToArchive([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]AddOffersToArchiveRequest addOffersToArchiveRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AddOffersToArchiveResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notArchivedOffers\" : [ {\n      \"offerId\" : \"offerId\",\n      \"error\" : \"OFFER_HAS_STOCKS\"\n    }, {\n      \"offerId\" : \"offerId\",\n      \"error\" : \"OFFER_HAS_STOCKS\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AddOffersToArchiveResponse>(exampleJson)
            : default(AddOffersToArchiveResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Калькулятор стоимости услуг
        /// </summary>
        /// <remarks>Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <param name="calculateTariffsRequest"></param>
        /// <response code="200">Стоимость услуг.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/tariffs/calculate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalculateTariffs")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalculateTariffsResponse), description: "Стоимость услуг.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult CalculateTariffs([FromBody]CalculateTariffsRequest calculateTariffsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CalculateTariffsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"offer\" : {\n        \"quantity\" : 1,\n        \"price\" : 0.6027456183070403,\n        \"length\" : 0.14658129805029452,\n        \"width\" : 0.5962133916683182,\n        \"weight\" : 0.23021358869347652,\n        \"categoryId\" : 0,\n        \"height\" : 0.5637376656633328\n      },\n      \"tariffs\" : [ {\n        \"amount\" : 9.301444243932576,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"amount\" : 9.301444243932576,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      } ]\n    }, {\n      \"offer\" : {\n        \"quantity\" : 1,\n        \"price\" : 0.6027456183070403,\n        \"length\" : 0.14658129805029452,\n        \"width\" : 0.5962133916683182,\n        \"weight\" : 0.23021358869347652,\n        \"categoryId\" : 0,\n        \"height\" : 0.5637376656633328\n      },\n      \"tariffs\" : [ {\n        \"amount\" : 9.301444243932576,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"amount\" : 9.301444243932576,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      } ]\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CalculateTariffsResponse>(exampleJson)
            : default(CalculateTariffsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товара из карантина по цене в кабинете
        /// </summary>
        /// <remarks>Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="confirmPricesRequest"></param>
        /// <response code="200">Ответ 200 обозначает, что цены подтверждены.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/price-quarantine/confirm")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ConfirmBusinessPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Ответ 200 обозначает, что цены подтверждены.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ConfirmBusinessPrices([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]ConfirmPricesRequest confirmPricesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товара из карантина по цене в магазине
        /// </summary>
        /// <remarks>Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="confirmPricesRequest"></param>
        /// <response code="200">Ответ 200 обозначает, что цены подтверждены.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/price-quarantine/confirm")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ConfirmCampaignPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Ответ 200 обозначает, что цены подтверждены.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ConfirmCampaignPrices([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]ConfirmPricesRequest confirmPricesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Подтверждение отгрузки
        /// </summary>
        /// <remarks>Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <param name="confirmShipmentRequest"></param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ConfirmShipment")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ConfirmShipment([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromBody]ConfirmShipmentRequest confirmShipmentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Создание нового чата с покупателем
        /// </summary>
        /// <remarks>Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="createChatRequest">description</param>
        /// <response code="200">Все получилось: чат создан. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/chats/new")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateChat")]
        [SwaggerResponse(statusCode: 200, type: typeof(CreateChatResponse), description: "Все получилось: чат создан. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult CreateChat([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]CreateChatRequest createChatRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CreateChatResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"chatId\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CreateChatResponse>(exampleJson)
            : default(CreateChatResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из ассортимента магазина
        /// </summary>
        /// <remarks>Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteCampaignOffersRequest"></param>
        /// <response code="200">Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offers/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCampaignOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteCampaignOffersResponse), description: "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteCampaignOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]DeleteCampaignOffersRequest deleteCampaignOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteCampaignOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notDeletedOfferIds\" : [ null, null ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteCampaignOffersResponse>(exampleJson)
            : default(DeleteCampaignOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление комментария к отзыву
        /// </summary>
        /// <remarks>Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteGoodsFeedbackCommentRequest"></param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/goods-feedback/comments/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteGoodsFeedbackComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteGoodsFeedbackComment([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeleteGoodsFeedbackCommentRequest deleteGoodsFeedbackCommentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Возобновление показа товаров
        /// </summary>
        /// <remarks>Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteHiddenOffersRequest">Запрос на возобновление показа оферов.</param>
        /// <response code="200">Показ товаров возобновлен.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/hidden-offers/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteHiddenOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Показ товаров возобновлен.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteHiddenOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]DeleteHiddenOffersRequest deleteHiddenOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из каталога
        /// </summary>
        /// <remarks>Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteOffersRequest"></param>
        /// <response code="200">Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteOffersResponse), description: "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeleteOffersRequest deleteOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notDeletedOfferIds\" : [ null, null ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteOffersResponse>(exampleJson)
            : default(DeleteOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из архива
        /// </summary>
        /// <remarks>Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteOffersFromArchiveRequest"></param>
        /// <response code="200">Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/unarchive")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteOffersFromArchive")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteOffersFromArchiveResponse), description: "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteOffersFromArchive([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeleteOffersFromArchiveRequest deleteOffersFromArchiveRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteOffersFromArchiveResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notUnarchivedOfferIds\" : [ null, null ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteOffersFromArchiveResponse>(exampleJson)
            : default(DeleteOffersFromArchiveResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из акции
        /// </summary>
        /// <remarks>Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deletePromoOffersRequest"></param>
        /// <response code="200">Результат удаления товаров из акции.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/promos/offers/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeletePromoOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeletePromoOffersResponse), description: "Результат удаления товаров из акции.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeletePromoOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeletePromoOffersRequest deletePromoOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeletePromoOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"rejectedOffers\" : [ {\n      \"reason\" : \"OFFER_DOES_NOT_EXIST\",\n      \"offerId\" : \"offerId\"\n    }, {\n      \"reason\" : \"OFFER_DOES_NOT_EXIST\",\n      \"offerId\" : \"offerId\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeletePromoOffersResponse>(exampleJson)
            : default(DeletePromoOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение акта приема-передачи
        /// </summary>
        /// <remarks>{% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <response code="200">Акт приема-передачи для отгрузки в формате PDF.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentAct")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Акт приема-передачи для отгрузки в формате PDF.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentAct([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение акта расхождений
        /// </summary>
        /// <remarks>Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <response code="200">Акт расхождений в формате XLSX.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentDiscrepancyAct")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Акт расхождений в формате XLSX.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentDiscrepancyAct([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение фактического акта приема-передачи
        /// </summary>
        /// <remarks>Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <response code="200">Акт в формате PDF.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentInboundAct")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Акт в формате PDF.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentInboundAct([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Ярлыки для доверительной приемки (FBS)
        /// </summary>
        /// <remarks>PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <param name="format">Формат страниц PDF-файла с ярлыками:  * &#x60;A4&#x60; — по 16 ярлыков на странице. * &#x60;A8&#x60; — по одному ярлыку на странице. </param>
        /// <response code="200">PDF‑файл с ярлыками на все упаковки в отгрузке.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentPalletLabels")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "PDF‑файл с ярлыками на все упаковки в отгрузке.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentPalletLabels([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromQuery (Name = "format")]ShipmentPalletLabelPageFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
        /// </summary>
        /// <remarks>Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \&quot;Экспресс‑доставка\&quot; %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \&quot;Данные, из которых Маркет формирует акт\&quot; %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="warehouseId">Идентификатор склада.</param>
        /// <response code="200">Акт приема-передачи в формате PDF.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/shipments/reception-transfer-act")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentReceptionTransferAct")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Акт приема-передачи в формате PDF.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentReceptionTransferAct([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "warehouse_id")]int? warehouseId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение транспортной накладной
        /// </summary>
        /// <remarks>Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <response code="200">Транспортная накладная в формате XLSX.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill")]
        [ValidateModelState]
        [SwaggerOperation("DownloadShipmentTransportationWaybill")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Транспортная накладная в формате XLSX.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DownloadShipmentTransportationWaybill([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по бусту продаж
        /// </summary>
        /// <remarks>Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateBoostConsolidatedRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/boost-consolidated/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateBoostConsolidatedReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateBoostConsolidatedReport([FromBody]GenerateBoostConsolidatedRequest generateBoostConsolidatedRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет «Конкурентная позиция»
        /// </summary>
        /// <remarks>Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| </remarks>
        /// <param name="generateCompetitorsPositionReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/competitors-position/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateCompetitorsPositionReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateCompetitorsPositionReport([FromBody]GenerateCompetitorsPositionReportRequest generateCompetitorsPositionReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по отзывам о товарах
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateGoodsFeedbackRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/goods-feedback/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateGoodsFeedbackReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateGoodsFeedbackReport([FromBody]GenerateGoodsFeedbackRequest generateGoodsFeedbackRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по реализации
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateGoodsRealizationReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/goods-realization/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateGoodsRealizationReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateGoodsRealizationReport([FromBody]GenerateGoodsRealizationReportRequest generateGoodsRealizationReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
        /// </summary>
        /// <remarks>Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="generateMassOrderLabelsRequest"></param>
        /// <param name="format">Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус &#x60;RESOURCE_NOT_FOUND&#x60;. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/documents/labels/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateMassOrderLabelsReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус &#x60;RESOURCE_NOT_FOUND&#x60;. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateMassOrderLabelsReport([FromBody]GenerateMassOrderLabelsRequest generateMassOrderLabelsRequest, [FromQuery (Name = "format")]PageFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Готовый ярлык‑наклейка для коробки в заказе
        /// </summary>
        /// <remarks>Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="shipmentId">Идентификатор грузоместа.</param>
        /// <param name="boxId">Идентификатор коробки.</param>
        /// <param name="format">Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.</param>
        /// <response code="200">PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label")]
        [ValidateModelState]
        [SwaggerOperation("GenerateOrderLabel")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "PDF‑файл с ярлыками для коробки. Файл содержит одну страницу с ярлыком.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateOrderLabel([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromRoute (Name = "boxId")][Required]long boxId, [FromQuery (Name = "format")]PageFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Готовые ярлыки‑наклейки на все коробки в одном заказе
        /// </summary>
        /// <remarks>Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="format">Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A6.</param>
        /// <response code="200">PDF‑файл с ярлыками на все коробки.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/delivery/labels")]
        [ValidateModelState]
        [SwaggerOperation("GenerateOrderLabels")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "PDF‑файл с ярлыками на все коробки.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateOrderLabels([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromQuery (Name = "format")]PageFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет «Цены на рынке»
        /// </summary>
        /// <remarks>Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generatePricesReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/prices/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GeneratePricesReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GeneratePricesReport([FromBody]GeneratePricesReportRequest generatePricesReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по полкам
        /// </summary>
        /// <remarks>Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateShelfsStatisticsRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/shelf-statistics/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateShelfsStatisticsReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateShelfsStatisticsReport([FromBody]GenerateShelfsStatisticsRequest generateShelfsStatisticsRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение листа сборки
        /// </summary>
        /// <remarks>Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateShipmentListDocumentReportRequest"></param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/documents/shipment-list/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateShipmentListDocumentReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateShipmentListDocumentReport([FromBody]GenerateShipmentListDocumentReportRequest generateShipmentListDocumentReportRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет «Аналитика продаж»
        /// </summary>
        /// <remarks>Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| </remarks>
        /// <param name="generateShowsSalesReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/shows-sales/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateShowsSalesReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateShowsSalesReport([FromBody]GenerateShowsSalesReportRequest generateShowsSalesReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по остаткам на складах
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateStocksOnWarehousesReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/stocks-on-warehouses/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateStocksOnWarehousesReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateStocksOnWarehousesReport([FromBody]GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по стоимости услуг
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateUnitedMarketplaceServicesReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/united-marketplace-services/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateUnitedMarketplaceServicesReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateUnitedMarketplaceServicesReport([FromBody]GenerateUnitedMarketplaceServicesReportRequest generateUnitedMarketplaceServicesReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по платежам
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateUnitedNettingReportRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/united-netting/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateUnitedNettingReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateUnitedNettingReport([FromBody]GenerateUnitedNettingReportRequest generateUnitedNettingReportRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по заказам
        /// </summary>
        /// <remarks>Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="generateUnitedOrdersRequest"></param>
        /// <param name="format">Формат отчета.</param>
        /// <response code="200">В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/reports/united-orders/generate")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GenerateUnitedOrdersReport")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenerateReportResponse), description: "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GenerateUnitedOrdersReport([FromBody]GenerateUnitedOrdersRequest generateUnitedOrdersRequest, [FromQuery (Name = "format")]ReportFormatType? format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenerateReportResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"reportId\" : \"reportId\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GenerateReportResponse>(exampleJson)
            : default(GenerateReportResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Все предложения магазина
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <param name="chunk">Номер сегмента с результатами.  Значение по умолчанию: &#x60;0&#x60;.  {% note info %}  Номера сегментов запрашиваются последовательно, пока не будет получен сегмент с пустым ответом. Пустой ответ означает, что все предложения магазина получены.  {% endnote %}  {% note alert %}  Нумерация начинается с 0. Чтобы запросить первую страницу, необходимо указать &#x60;chunk&#x3D;0&#x60; и т. д.  {% endnote %} </param>
        /// <response code="200">Предложения магазина.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/offers/all")]
        [ValidateModelState]
        [SwaggerOperation("GetAllOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetAllOffersResponse), description: "Предложения магазина.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetAllOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "feedId")]long? feedId, [FromQuery (Name = "chunk")]int? chunk)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetAllOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"offers\" : [ {\n    \"marketCategoryId\" : 1,\n    \"preDiscountPrice\" : 5.962133916683182,\n    \"shopCategoryId\" : \"shopCategoryId\",\n    \"modelId\" : 2,\n    \"fee\" : 3.616076749251911,\n    \"discount\" : 5,\n    \"url\" : \"url\",\n    \"cbid\" : 9.301444243932576,\n    \"blocked\" : true,\n    \"feedId\" : 6,\n    \"price\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"currency\" : \"RUR\",\n    \"id\" : \"id\",\n    \"cutPrice\" : true,\n    \"bid\" : 7.061401241503109\n  }, {\n    \"marketCategoryId\" : 1,\n    \"preDiscountPrice\" : 5.962133916683182,\n    \"shopCategoryId\" : \"shopCategoryId\",\n    \"modelId\" : 2,\n    \"fee\" : 3.616076749251911,\n    \"discount\" : 5,\n    \"url\" : \"url\",\n    \"cbid\" : 9.301444243932576,\n    \"blocked\" : true,\n    \"feedId\" : 6,\n    \"price\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"currency\" : \"RUR\",\n    \"id\" : \"id\",\n    \"cutPrice\" : true,\n    \"bid\" : 7.061401241503109\n  } ]\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetAllOffersResponse>(exampleJson)
            : default(GetAllOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация об установленных ставках
        /// </summary>
        /// <remarks>Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getBidsInfoRequest">description</param>
        /// <response code="200">Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/bids/info")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetBidsInfoForBusiness")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBidsInfoResponse), description: "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetBidsInfoForBusiness([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetBidsInfoRequest getBidsInfoRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBidsInfoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"bids\" : [ {\n      \"sku\" : \"sku\",\n      \"bid\" : 570\n    }, {\n      \"sku\" : \"sku\",\n      \"bid\" : 570\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBidsInfoResponse>(exampleJson)
            : default(GetBidsInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Рекомендованные ставки для заданных товаров
        /// </summary>
        /// <remarks>Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getBidsRecommendationsRequest">description.</param>
        /// <response code="200">Рекомендованные ставки для заданных товаров.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/bids/recommendations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetBidsRecommendations")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBidsRecommendationsResponse), description: "Рекомендованные ставки для заданных товаров.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetBidsRecommendations([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetBidsRecommendationsRequest getBidsRecommendationsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBidsRecommendationsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"recommendations\" : [ {\n      \"bidRecommendations\" : [ {\n        \"showPercent\" : 8,\n        \"bid\" : 570\n      }, {\n        \"showPercent\" : 8,\n        \"bid\" : 570\n      } ],\n      \"priceRecommendations\" : [ {\n        \"campaignId\" : 6,\n        \"price\" : 1.1465812980502945\n      }, {\n        \"campaignId\" : 6,\n        \"price\" : 1.1465812980502945\n      } ],\n      \"sku\" : \"sku\",\n      \"bid\" : 570\n    }, {\n      \"bidRecommendations\" : [ {\n        \"showPercent\" : 8,\n        \"bid\" : 570\n      }, {\n        \"showPercent\" : 8,\n        \"bid\" : 570\n      } ],\n      \"priceRecommendations\" : [ {\n        \"campaignId\" : 6,\n        \"price\" : 1.1465812980502945\n      }, {\n        \"campaignId\" : 6,\n        \"price\" : 1.1465812980502945\n      } ],\n      \"sku\" : \"sku\",\n      \"bid\" : 570\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBidsRecommendationsResponse>(exampleJson)
            : default(GetBidsRecommendationsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список товаров, находящихся в карантине по цене в кабинете
        /// </summary>
        /// <remarks>Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getQuarantineOffersRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список товаров в карантине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/price-quarantine")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetBusinessQuarantineOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetQuarantineOffersResponse), description: "Список товаров в карантине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetBusinessQuarantineOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetQuarantineOffersRequest getQuarantineOffersRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetQuarantineOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"verdicts\" : [ {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      } ],\n      \"offerId\" : \"offerId\",\n      \"currentPrice\" : {\n        \"value\" : 0.9301444243932576\n      },\n      \"lastValidPrice\" : {\n        \"value\" : 0.9301444243932576\n      }\n    }, {\n      \"verdicts\" : [ {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      } ],\n      \"offerId\" : \"offerId\",\n      \"currentPrice\" : {\n        \"value\" : 0.9301444243932576\n      },\n      \"lastValidPrice\" : {\n        \"value\" : 0.9301444243932576\n      }\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetQuarantineOffersResponse>(exampleJson)
            : default(GetQuarantineOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Настройки кабинета
        /// </summary>
        /// <remarks>Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Настройки кабинета.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/settings")]
        [ValidateModelState]
        [SwaggerOperation("GetBusinessSettings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBusinessSettingsResponse), description: "Настройки кабинета.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetBusinessSettings([FromRoute (Name = "businessId")][Required]long businessId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBusinessSettingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"settings\" : {\n      \"currency\" : \"RUR\",\n      \"onlyDefaultPrice\" : true\n    },\n    \"info\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBusinessSettingsResponse>(exampleJson)
            : default(GetBusinessSettingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о магазине
        /// </summary>
        /// <remarks>Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Информация о магазине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaign")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignResponse), description: "Информация о магазине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaign([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"campaign\" : {\n    \"clientId\" : 6,\n    \"business\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    },\n    \"domain\" : \"domain\",\n    \"placementType\" : \"FBS\",\n    \"id\" : 0\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignResponse>(exampleJson)
            : default(GetCampaignResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Логины, связанные с магазином
        /// </summary>
        /// <remarks>Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Список логинов, связанных с магазином.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/logins")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignLogins")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignLoginsResponse), description: "Список логинов, связанных с магазином.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaignLogins([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignLoginsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"logins\" : [ \"logins\", \"logins\" ]\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignLoginsResponse>(exampleJson)
            : default(GetCampaignLoginsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о товарах, которые размещены в заданном магазине
        /// </summary>
        /// <remarks>Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getCampaignOffersRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список товаров, размещенных в заданном магазине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignOffersResponse), description: "Список товаров, размещенных в заданном магазине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaignOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]GetCampaignOffersRequest getCampaignOffersRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"campaignPrice\" : {\n        \"vat\" : 5,\n        \"discountBase\" : 5.962133916683182,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 1.4658129805029452,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"basicPrice\" : {\n        \"discountBase\" : 0.23021358869347652,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.5637376656633328,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"available\" : true,\n      \"offerId\" : \"offerId\",\n      \"quantum\" : {\n        \"minQuantity\" : 1,\n        \"stepQuantity\" : 60\n      },\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"status\" : \"PUBLISHED\"\n    }, {\n      \"campaignPrice\" : {\n        \"vat\" : 5,\n        \"discountBase\" : 5.962133916683182,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 1.4658129805029452,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"basicPrice\" : {\n        \"discountBase\" : 0.23021358869347652,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.5637376656633328,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"available\" : true,\n      \"offerId\" : \"offerId\",\n      \"quantum\" : {\n        \"minQuantity\" : 1,\n        \"stepQuantity\" : 60\n      },\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"status\" : \"PUBLISHED\"\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignOffersResponse>(exampleJson)
            : default(GetCampaignOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список товаров, находящихся в карантине по цене в магазине
        /// </summary>
        /// <remarks>Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getQuarantineOffersRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список товаров в карантине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/price-quarantine")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignQuarantineOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetQuarantineOffersResponse), description: "Список товаров в карантине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaignQuarantineOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]GetQuarantineOffersRequest getQuarantineOffersRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetQuarantineOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"verdicts\" : [ {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      } ],\n      \"offerId\" : \"offerId\",\n      \"currentPrice\" : {\n        \"value\" : 0.9301444243932576\n      },\n      \"lastValidPrice\" : {\n        \"value\" : 0.9301444243932576\n      }\n    }, {\n      \"verdicts\" : [ {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"type\" : \"PRICE_CHANGE\",\n        \"params\" : [ {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"CURRENT_PRICE\",\n          \"value\" : \"value\"\n        } ]\n      } ],\n      \"offerId\" : \"offerId\",\n      \"currentPrice\" : {\n        \"value\" : 0.9301444243932576\n      },\n      \"lastValidPrice\" : {\n        \"value\" : 0.9301444243932576\n      }\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetQuarantineOffersResponse>(exampleJson)
            : default(GetQuarantineOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Регион магазина
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/region")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignRegion")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignRegionResponse), description: "Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-| ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetCampaignRegion([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignRegionResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"region\" : {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignRegionResponse>(exampleJson)
            : default(GetCampaignRegionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Настройки магазина
        /// </summary>
        /// <remarks>Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Настройки магазина.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/settings")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignSettings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignSettingsResponse), description: "Настройки магазина.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaignSettings([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignSettingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"settings\" : {\n    \"showInPremium\" : true,\n    \"showInContext\" : true,\n    \"localRegion\" : {\n      \"delivery\" : {\n        \"schedule\" : {\n          \"customWorkingDays\" : [ \"23-09-2022\", \"23-09-2022\" ],\n          \"period\" : {\n            \"fromDate\" : \"23-09-2022\",\n            \"toDate\" : \"23-09-2022\"\n          },\n          \"customHolidays\" : [ \"23-09-2022\", \"23-09-2022\" ],\n          \"weeklyHolidays\" : [ 1, 1 ],\n          \"availableOnHolidays\" : true,\n          \"totalHolidays\" : [ \"23-09-2022\", \"23-09-2022\" ]\n        }\n      },\n      \"name\" : \"name\",\n      \"id\" : 6,\n      \"type\" : \"OTHER\",\n      \"deliveryOptionsSource\" : \"WEB\"\n    },\n    \"countryRegion\" : 0,\n    \"shopName\" : \"shopName\",\n    \"useOpenStat\" : true\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignSettingsResponse>(exampleJson)
            : default(GetCampaignSettingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список магазинов пользователя
        /// </summary>
        /// <remarks>Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <response code="200">Магазины пользователя.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaigns")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignsResponse), description: "Магазины пользователя.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaigns([FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"campaigns\" : [ {\n    \"clientId\" : 6,\n    \"business\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    },\n    \"domain\" : \"domain\",\n    \"placementType\" : \"FBS\",\n    \"id\" : 0\n  }, {\n    \"clientId\" : 6,\n    \"business\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    },\n    \"domain\" : \"domain\",\n    \"placementType\" : \"FBS\",\n    \"id\" : 0\n  } ],\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignsResponse>(exampleJson)
            : default(GetCampaignsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Магазины, доступные логину
        /// </summary>
        /// <remarks>Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="login">Логин пользователя.</param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <response code="200">Информация о магазинах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/by_login/{login}")]
        [ValidateModelState]
        [SwaggerOperation("GetCampaignsByLogin")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCampaignsResponse), description: "Информация о магазинах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCampaignsByLogin([FromRoute (Name = "login")][Required]string login, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCampaignsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"campaigns\" : [ {\n    \"clientId\" : 6,\n    \"business\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    },\n    \"domain\" : \"domain\",\n    \"placementType\" : \"FBS\",\n    \"id\" : 0\n  }, {\n    \"clientId\" : 6,\n    \"business\" : {\n      \"name\" : \"name\",\n      \"id\" : 0\n    },\n    \"domain\" : \"domain\",\n    \"placementType\" : \"FBS\",\n    \"id\" : 0\n  } ],\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCampaignsResponse>(exampleJson)
            : default(GetCampaignsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Лимит на установку кванта продажи и минимального количества товаров в заказе
        /// </summary>
        /// <remarks>Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="getCategoriesMaxSaleQuantumRequest"></param>
        /// <response code="200">Лимит на установку кванта и минимального количества товаров.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/categories/max-sale-quantum")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCategoriesMaxSaleQuantum")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCategoriesMaxSaleQuantumResponse), description: "Лимит на установку кванта и минимального количества товаров.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCategoriesMaxSaleQuantum([FromBody]GetCategoriesMaxSaleQuantumRequest getCategoriesMaxSaleQuantumRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCategoriesMaxSaleQuantumResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"maxSaleQuantum\" : 6,\n    \"name\" : \"name\",\n    \"id\" : 0\n  }, {\n    \"maxSaleQuantum\" : 6,\n    \"name\" : \"name\",\n    \"id\" : 0\n  } ],\n  \"errors\" : [ {\n    \"type\" : \"UNKNOWN_CATEGORY\",\n    \"categoryId\" : 1\n  }, {\n    \"type\" : \"UNKNOWN_CATEGORY\",\n    \"categoryId\" : 1\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCategoriesMaxSaleQuantumResponse>(exampleJson)
            : default(GetCategoriesMaxSaleQuantumResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Дерево категорий
        /// </summary>
        /// <remarks>Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="getCategoriesRequest"></param>
        /// <response code="200">Категории Маркета.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/categories/tree")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCategoriesTree")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCategoriesResponse), description: "Категории Маркета.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCategoriesTree([FromBody]GetCategoriesRequest getCategoriesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCategoriesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCategoriesResponse>(exampleJson)
            : default(GetCategoriesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Списки характеристик товаров по категориям
        /// </summary>
        /// <remarks>Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| </remarks>
        /// <param name="categoryId">Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). </param>
        /// <response code="200">Список характеристик товаров из заданной категории.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/category/{categoryId}/parameters")]
        [ValidateModelState]
        [SwaggerOperation("GetCategoryContentParameters")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCategoryContentParametersResponse), description: "Список характеристик товаров из заданной категории.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCategoryContentParameters([FromRoute (Name = "categoryId")][Required]long categoryId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCategoryContentParametersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"parameters\" : [ {\n      \"values\" : [ {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      } ],\n      \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ],\n      \"description\" : \"description\",\n      \"type\" : \"TEXT\",\n      \"constraints\" : {\n        \"minValue\" : 2.3021358869347655,\n        \"maxValue\" : 7.061401241503109,\n        \"maxLength\" : 9\n      },\n      \"required\" : true,\n      \"multivalue\" : true,\n      \"unit\" : {\n        \"defaultUnitId\" : 1,\n        \"units\" : [ {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        }, {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        } ]\n      },\n      \"valueRestrictions\" : [ {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      }, {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      } ],\n      \"distinctive\" : true,\n      \"name\" : \"name\",\n      \"id\" : 6,\n      \"filtering\" : true,\n      \"allowCustomValues\" : true\n    }, {\n      \"values\" : [ {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      } ],\n      \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ],\n      \"description\" : \"description\",\n      \"type\" : \"TEXT\",\n      \"constraints\" : {\n        \"minValue\" : 2.3021358869347655,\n        \"maxValue\" : 7.061401241503109,\n        \"maxLength\" : 9\n      },\n      \"required\" : true,\n      \"multivalue\" : true,\n      \"unit\" : {\n        \"defaultUnitId\" : 1,\n        \"units\" : [ {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        }, {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        } ]\n      },\n      \"valueRestrictions\" : [ {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      }, {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      } ],\n      \"distinctive\" : true,\n      \"name\" : \"name\",\n      \"id\" : 6,\n      \"filtering\" : true,\n      \"allowCustomValues\" : true\n    } ],\n    \"categoryId\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCategoryContentParametersResponse>(exampleJson)
            : default(GetCategoryContentParametersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение истории сообщений в чате
        /// </summary>
        /// <remarks>Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="chatId">Идентификатор чата.</param>
        /// <param name="getChatHistoryRequest">description</param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">История сообщений успешно получена. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/chats/history")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetChatHistory")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetChatHistoryResponse), description: "История сообщений успешно получена. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetChatHistory([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "chatId")][Required()]long chatId, [FromBody]GetChatHistoryRequest getChatHistoryRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetChatHistoryResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"orderId\" : 0,\n    \"messages\" : [ {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"sender\" : \"PARTNER\",\n      \"payload\" : [ {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"url\" : \"url\"\n      }, {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"url\" : \"url\"\n      } ],\n      \"messageId\" : 6,\n      \"message\" : \"message\"\n    }, {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"sender\" : \"PARTNER\",\n      \"payload\" : [ {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"url\" : \"url\"\n      }, {\n        \"size\" : 1,\n        \"name\" : \"name\",\n        \"url\" : \"url\"\n      } ],\n      \"messageId\" : 6,\n      \"message\" : \"message\"\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetChatHistoryResponse>(exampleJson)
            : default(GetChatHistoryResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение доступных чатов
        /// </summary>
        /// <remarks>Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getChatsRequest">description</param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список чатов. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/chats")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetChats")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetChatsResponse), description: "Список чатов. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetChats([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetChatsRequest getChatsRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetChatsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"chats\" : [ {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"chatId\" : 0,\n      \"orderId\" : 6,\n      \"type\" : \"CHAT\",\n      \"status\" : \"NEW\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"chatId\" : 0,\n      \"orderId\" : 6,\n      \"type\" : \"CHAT\",\n      \"status\" : \"NEW\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetChatsResponse>(exampleJson)
            : default(GetChatsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Справочник служб доставки
        /// </summary>
        /// <remarks>Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| </remarks>
        /// <response code="200">Информация о службах доставки.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/delivery/services")]
        [ValidateModelState]
        [SwaggerOperation("GetDeliveryServices")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetDeliveryServicesResponse), description: "Информация о службах доставки.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetDeliveryServices()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetDeliveryServicesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"deliveryService\" : [ {\n      \"name\" : \"name\",\n      \"id\" : 0\n    }, {\n      \"name\" : \"name\",\n      \"id\" : 0\n    } ]\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetDeliveryServicesResponse>(exampleJson)
            : default(GetDeliveryServicesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о прайс-листе
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <response code="200">Информация о прайс-листе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/feeds/{feedId}")]
        [ValidateModelState]
        [SwaggerOperation("GetFeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFeedResponse), description: "Информация о прайс-листе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetFeed([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "feedId")][Required]long feedId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFeedResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"feed\" : {\n    \"password\" : \"password\",\n    \"download\" : {\n      \"error\" : {\n        \"description\" : \"description\",\n        \"type\" : \"DOWNLOAD_ERROR\",\n        \"httpStatusCode\" : 5\n      }\n    },\n    \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"publication\" : {\n      \"priceAndStockUpdate\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"full\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      }\n    },\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"placement\" : {\n      \"totalOffersCount\" : 5\n    },\n    \"login\" : \"login\",\n    \"url\" : \"url\",\n    \"content\" : {\n      \"rejectedOffersCount\" : 6,\n      \"error\" : {\n        \"type\" : \"PARSE_ERROR\"\n      },\n      \"status\" : \"ERROR\",\n      \"totalOffersCount\" : 1\n    }\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFeedResponse>(exampleJson)
            : default(GetFeedResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по индексации прайс-листа
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="publishedTimeFrom">Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Значение по умолчанию: последние восемь дней со времени отправки запроса. </param>
        /// <param name="publishedTimeTo">Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-31T00:42:42+03:00&#x60;.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра &#x60;published_time_to&#x60;. Значение параметра не должно быть датой из будущего.  {% endnote %} </param>
        /// <param name="status">Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * &#x60;ERROR&#x60; — произошли ошибки. * &#x60;OK&#x60; — обработан без ошибок. * &#x60;WARNING&#x60; — наблюдались некритичные проблемы. </param>
        /// <response code="200">Отчет по индексации прайс-листа.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/feeds/{feedId}/index-logs")]
        [ValidateModelState]
        [SwaggerOperation("GetFeedIndexLogs")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFeedIndexLogsResponse), description: "Отчет по индексации прайс-листа.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetFeedIndexLogs([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "feedId")][Required]long feedId, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "published_time_from")]DateTime? publishedTimeFrom, [FromQuery (Name = "published_time_to")]DateTime? publishedTimeTo, [FromQuery (Name = "status")]FeedIndexLogsStatusType? status)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFeedIndexLogsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"feed\" : {\n      \"id\" : 0\n    },\n    \"total\" : 2,\n    \"indexLogRecords\" : [ {\n      \"offers\" : {\n        \"rejectedCount\" : 5,\n        \"totalCount\" : 5\n      },\n      \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"generationId\" : 6,\n      \"indexType\" : \"DIFF\",\n      \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"error\" : {\n        \"description\" : \"description\",\n        \"type\" : \"DOWNLOAD_ERROR\",\n        \"httpStatusCode\" : 1\n      },\n      \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"status\" : \"ERROR\"\n    }, {\n      \"offers\" : {\n        \"rejectedCount\" : 5,\n        \"totalCount\" : 5\n      },\n      \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"generationId\" : 6,\n      \"indexType\" : \"DIFF\",\n      \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"error\" : {\n        \"description\" : \"description\",\n        \"type\" : \"DOWNLOAD_ERROR\",\n        \"httpStatusCode\" : 1\n      },\n      \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"status\" : \"ERROR\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFeedIndexLogsResponse>(exampleJson)
            : default(GetFeedIndexLogsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Новые и обновленные отзывы о магазине
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="fromDate">Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <response code="200">Список отзывов для магазина.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/feedback/updates")]
        [ValidateModelState]
        [SwaggerOperation("GetFeedbackAndCommentUpdates")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFeedbackListResponse), description: "Список отзывов для магазина.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetFeedbackAndCommentUpdates([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "from_date")]DateOnly? fromDate)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFeedbackListResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"feedbackList\" : [ {\n      \"comments\" : [ {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"shop\" : {\n        \"name\" : \"name\"\n      },\n      \"author\" : {\n        \"name\" : \"name\",\n        \"region\" : {\n          \"children\" : [ null, null ],\n          \"name\" : \"name\",\n          \"id\" : 0,\n          \"type\" : \"OTHER\"\n        }\n      },\n      \"verified\" : true,\n      \"recommend\" : true,\n      \"grades\" : {\n        \"average\" : 5.962133916683182,\n        \"agreeCount\" : 5,\n        \"rejectCount\" : 2,\n        \"factors\" : [ {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        }, {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        } ]\n      },\n      \"pro\" : \"pro\",\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"state\" : \"LAST\",\n      \"contra\" : \"contra\",\n      \"resolved\" : true,\n      \"order\" : {\n        \"delivery\" : \"DELIVERY\",\n        \"shopOrderId\" : \"shopOrderId\"\n      }\n    }, {\n      \"comments\" : [ {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"shop\" : {\n        \"name\" : \"name\"\n      },\n      \"author\" : {\n        \"name\" : \"name\",\n        \"region\" : {\n          \"children\" : [ null, null ],\n          \"name\" : \"name\",\n          \"id\" : 0,\n          \"type\" : \"OTHER\"\n        }\n      },\n      \"verified\" : true,\n      \"recommend\" : true,\n      \"grades\" : {\n        \"average\" : 5.962133916683182,\n        \"agreeCount\" : 5,\n        \"rejectCount\" : 2,\n        \"factors\" : [ {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        }, {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        } ]\n      },\n      \"pro\" : \"pro\",\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"state\" : \"LAST\",\n      \"contra\" : \"contra\",\n      \"resolved\" : true,\n      \"order\" : {\n        \"delivery\" : \"DELIVERY\",\n        \"shopOrderId\" : \"shopOrderId\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFeedbackListResponse>(exampleJson)
            : default(GetFeedbackListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список прайс-листов магазина
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Список прайс-листов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/feeds")]
        [ValidateModelState]
        [SwaggerOperation("GetFeeds")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFeedsResponse), description: "Список прайс-листов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetFeeds([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFeedsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"feeds\" : [ {\n    \"password\" : \"password\",\n    \"download\" : {\n      \"error\" : {\n        \"description\" : \"description\",\n        \"type\" : \"DOWNLOAD_ERROR\",\n        \"httpStatusCode\" : 5\n      }\n    },\n    \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"publication\" : {\n      \"priceAndStockUpdate\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"full\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      }\n    },\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"placement\" : {\n      \"totalOffersCount\" : 5\n    },\n    \"login\" : \"login\",\n    \"url\" : \"url\",\n    \"content\" : {\n      \"rejectedOffersCount\" : 6,\n      \"error\" : {\n        \"type\" : \"PARSE_ERROR\"\n      },\n      \"status\" : \"ERROR\",\n      \"totalOffersCount\" : 1\n    }\n  }, {\n    \"password\" : \"password\",\n    \"download\" : {\n      \"error\" : {\n        \"description\" : \"description\",\n        \"type\" : \"DOWNLOAD_ERROR\",\n        \"httpStatusCode\" : 5\n      }\n    },\n    \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"publication\" : {\n      \"priceAndStockUpdate\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"full\" : {\n        \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\"\n      }\n    },\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"placement\" : {\n      \"totalOffersCount\" : 5\n    },\n    \"login\" : \"login\",\n    \"url\" : \"url\",\n    \"content\" : {\n      \"rejectedOffersCount\" : 6,\n      \"error\" : {\n        \"type\" : \"PARSE_ERROR\"\n      },\n      \"status\" : \"ERROR\",\n      \"totalOffersCount\" : 1\n    }\n  } ]\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFeedsResponse>(exampleJson)
            : default(GetFeedsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение комментариев к отзыву
        /// </summary>
        /// <remarks>Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getGoodsFeedbackCommentsRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Дерево комментариев к отзыву.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/goods-feedback/comments")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetGoodsFeedbackComments")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetGoodsFeedbackCommentsResponse), description: "Дерево комментариев к отзыву.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetGoodsFeedbackComments([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetGoodsFeedbackCommentsRequest getGoodsFeedbackCommentsRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetGoodsFeedbackCommentsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"comments\" : [ {\n      \"author\" : {\n        \"name\" : \"name\",\n        \"type\" : \"USER\"\n      },\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"canModify\" : true,\n      \"parentId\" : 6,\n      \"status\" : \"PUBLISHED\"\n    }, {\n      \"author\" : {\n        \"name\" : \"name\",\n        \"type\" : \"USER\"\n      },\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"canModify\" : true,\n      \"parentId\" : 6,\n      \"status\" : \"PUBLISHED\"\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetGoodsFeedbackCommentsResponse>(exampleJson)
            : default(GetGoodsFeedbackCommentsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение отзывов о товарах продавца
        /// </summary>
        /// <remarks>Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getGoodsFeedbackRequest"></param>
        /// <response code="200">Список отзывов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/goods-feedback")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetGoodsFeedbacks")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetGoodsFeedbackResponse), description: "Список отзывов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetGoodsFeedbacks([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetGoodsFeedbackRequest getGoodsFeedbackRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetGoodsFeedbackResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"feedbacks\" : [ {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"needReaction\" : true,\n      \"identifiers\" : {\n        \"orderId\" : 6,\n        \"modelId\" : 1\n      },\n      \"author\" : \"author\",\n      \"feedbackId\" : 0,\n      \"description\" : {\n        \"advantages\" : \"advantages\",\n        \"disadvantages\" : \"disadvantages\",\n        \"comment\" : \"comment\"\n      },\n      \"media\" : {\n        \"videos\" : [ \"videos\", \"videos\" ],\n        \"photos\" : [ \"photos\", \"photos\" ]\n      },\n      \"statistics\" : {\n        \"commentsCount\" : 5,\n        \"rating\" : 3,\n        \"paidAmount\" : 2,\n        \"recommended\" : true\n      }\n    }, {\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"needReaction\" : true,\n      \"identifiers\" : {\n        \"orderId\" : 6,\n        \"modelId\" : 1\n      },\n      \"author\" : \"author\",\n      \"feedbackId\" : 0,\n      \"description\" : {\n        \"advantages\" : \"advantages\",\n        \"disadvantages\" : \"disadvantages\",\n        \"comment\" : \"comment\"\n      },\n      \"media\" : {\n        \"videos\" : [ \"videos\", \"videos\" ],\n        \"photos\" : [ \"photos\", \"photos\" ]\n      },\n      \"statistics\" : {\n        \"commentsCount\" : 5,\n        \"rating\" : 3,\n        \"paidAmount\" : 2,\n        \"recommended\" : true\n      }\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetGoodsFeedbackResponse>(exampleJson)
            : default(GetGoodsFeedbackResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отчет по товарам
        /// </summary>
        /// <remarks>Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getGoodsStatsRequest"></param>
        /// <response code="200">Отчет по товарам.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/stats/skus")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetGoodsStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetGoodsStatsResponse), description: "Отчет по товарам.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetGoodsStats([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]GetGoodsStatsRequest getGoodsStatsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetGoodsStatsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"shopSkus\" : [ {\n      \"shopSku\" : \"shopSku\",\n      \"marketSku\" : 0,\n      \"price\" : 6.027456183070403,\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"name\" : \"name\",\n        \"id\" : 9,\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"id\" : 9,\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ]\n      } ],\n      \"weightDimensions\" : {\n        \"length\" : 5.962133916683182,\n        \"width\" : 5.637376656633329,\n        \"weight\" : 7.061401241503109,\n        \"height\" : 2.3021358869347655\n      },\n      \"categoryName\" : \"categoryName\",\n      \"categoryId\" : 1,\n      \"pictures\" : [ \"pictures\", \"pictures\" ],\n      \"tariffs\" : [ {\n        \"amount\" : 2.027123023002322,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"percent\" : 3.616076749251911,\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"amount\" : 2.027123023002322,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"percent\" : 3.616076749251911,\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      } ]\n    }, {\n      \"shopSku\" : \"shopSku\",\n      \"marketSku\" : 0,\n      \"price\" : 6.027456183070403,\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"name\" : \"name\",\n        \"id\" : 9,\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ]\n      }, {\n        \"name\" : \"name\",\n        \"id\" : 9,\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ]\n      } ],\n      \"weightDimensions\" : {\n        \"length\" : 5.962133916683182,\n        \"width\" : 5.637376656633329,\n        \"weight\" : 7.061401241503109,\n        \"height\" : 2.3021358869347655\n      },\n      \"categoryName\" : \"categoryName\",\n      \"categoryId\" : 1,\n      \"pictures\" : [ \"pictures\", \"pictures\" ],\n      \"tariffs\" : [ {\n        \"amount\" : 2.027123023002322,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"percent\" : 3.616076749251911,\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      }, {\n        \"amount\" : 2.027123023002322,\n        \"type\" : \"AGENCY_COMMISSION\",\n        \"percent\" : 3.616076749251911,\n        \"parameters\" : [ {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        }, {\n          \"name\" : \"name\",\n          \"value\" : \"value\"\n        } ]\n      } ]\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetGoodsStatsResponse>(exampleJson)
            : default(GetGoodsStatsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о скрытых вами товарах
        /// </summary>
        /// <remarks>Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="offerId">Идентификатор скрытого предложения. </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="offset">Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром &#x60;limit&#x60;.  Если задан &#x60;offset&#x60;, параметры &#x60;page_number&#x60; и &#x60;page_size&#x60; игнорируются.  &#x60;offset&#x60; игнорируется, если задан &#x60;page_token&#x60;. </param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <response code="200">Информация о скрытых вами товарах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/hidden-offers")]
        [ValidateModelState]
        [SwaggerOperation("GetHiddenOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetHiddenOffersResponse), description: "Информация о скрытых вами товарах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetHiddenOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "offer_id")]List<string> offerId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetHiddenOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"hiddenOffers\" : [ {\n      \"offerId\" : \"offerId\"\n    }, {\n      \"offerId\" : \"offerId\"\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetHiddenOffersResponse>(exampleJson)
            : default(GetHiddenOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение информации о заполненности карточек магазина
        /// </summary>
        /// <remarks>Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getOfferCardsContentStatusRequest"></param>
        /// <response code="200">Информация о карточках указанных товаров.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-cards")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferCardsContentStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferCardsContentStatusResponse), description: "Информация о карточках указанных товаров.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOfferCardsContentStatus([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetOfferCardsContentStatusRequest getOfferCardsContentStatusRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferCardsContentStatusResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offerCards\" : [ {\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"contentRating\" : 0,\n      \"recommendations\" : [ {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      }, {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      } ],\n      \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"parameterValues\" : [ {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      } ]\n    }, {\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"contentRating\" : 0,\n      \"recommendations\" : [ {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      }, {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      } ],\n      \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"parameterValues\" : [ {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      } ]\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferCardsContentStatusResponse>(exampleJson)
            : default(GetOfferCardsContentStatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список товаров в каталоге
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="offerId">Идентификатор товара в каталоге.</param>
        /// <param name="shopSku">Ваш SKU товара.  Параметр может быть указан несколько раз, например:  &#x60;&#x60;&#x60; ...shop_sku&#x3D;123&amp;shop_sku&#x3D;129&amp;shop_sku&#x3D;141... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. </param>
        /// <param name="mappingKind">Тип маппинга.</param>
        /// <param name="status">Фильтрация по статусу публикации товара:  * &#x60;READY&#x60; — товар прошел модерацию. * &#x60;IN_WORK&#x60; — товар проходит модерацию. * &#x60;NEED_CONTENT&#x60; — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * &#x60;NEED_INFO&#x60; — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * &#x60;REJECTED&#x60; — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * &#x60;SUSPENDED&#x60; — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * &#x60;OTHER&#x60; — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...status&#x3D;READY,IN_WORK... ...status&#x3D;READY&amp;status&#x3D;IN_WORK... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. </param>
        /// <param name="availability">Фильтрация по планам поставок товара:  * &#x60;ACTIVE&#x60; — поставки будут. * &#x60;INACTIVE&#x60; — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * &#x60;DELISTED&#x60; — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...availability&#x3D;INACTIVE,DELISTED... ...availability&#x3D;INACTIVE&amp;availability&#x3D;DELISTED... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. </param>
        /// <param name="categoryId">Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...category_id&#x3D;14727164,14382343... ...category_id&#x3D;14727164&amp;category_id&#x3D;14382343... &#x60;&#x60;&#x60;  В запросе можно указать либо параметр &#x60;shopSku&#x60;, либо любые параметры для фильтрации товаров. Совместное использование параметра &#x60;shopSku&#x60; и параметров для фильтрации приведет к ошибке. </param>
        /// <param name="vendor">Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  &#x60;&#x60;&#x60; ...vendor&#x3D;Aqua%20Minerale,Borjomi... ...vendor&#x3D;Aqua%20Minerale&amp;vendor&#x3D;Borjomi... &#x60;&#x60;&#x60;  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «&#39;» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Информация о товарах в каталоге.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/offer-mapping-entries")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferMappingEntries")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferMappingEntriesResponse), description: "Информация о товарах в каталоге.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetOfferMappingEntries([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "offer_id")]List<string> offerId, [FromQuery (Name = "shop_sku")]List<string> shopSku, [FromQuery (Name = "mapping_kind")]OfferMappingKindType? mappingKind, [FromQuery (Name = "status")]List<OfferProcessingStatusType> status, [FromQuery (Name = "availability")]List<OfferAvailabilityStatusType> availability, [FromQuery (Name = "category_id")]List<int> categoryId, [FromQuery (Name = "vendor")]List<string> vendor, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferMappingEntriesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offerMappingEntries\" : [ {\n      \"offer\" : {\n        \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ],\n        \"certificate\" : \"certificate\",\n        \"description\" : \"description\",\n        \"availability\" : \"ACTIVE\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"manufacturer\" : \"manufacturer\",\n        \"urls\" : [ \"urls\", \"urls\" ],\n        \"deliveryDurationDays\" : 5,\n        \"feedId\" : 0,\n        \"vendor\" : \"LEVENHUK\",\n        \"price\" : 2.027123023002322,\n        \"transportUnitSize\" : 1,\n        \"id\" : \"id\",\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ],\n        \"lifeTimeDays\" : 9,\n        \"quantumOfSupply\" : 5,\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ],\n        \"processingState\" : {\n          \"notes\" : [ {\n            \"payload\" : \"payload\",\n            \"type\" : \"ASSORTMENT\"\n          }, {\n            \"payload\" : \"payload\",\n            \"type\" : \"ASSORTMENT\"\n          } ],\n          \"status\" : \"UNKNOWN\"\n        },\n        \"shopSku\" : \"shopSku\",\n        \"boxCount\" : 2,\n        \"minShipment\" : 6,\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"shelfLifeDays\" : 7,\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"guaranteePeriodDays\" : 3\n      },\n      \"mapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      },\n      \"awaitingModerationMapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      },\n      \"rejectedMapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      }\n    }, {\n      \"offer\" : {\n        \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ],\n        \"certificate\" : \"certificate\",\n        \"description\" : \"description\",\n        \"availability\" : \"ACTIVE\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"manufacturer\" : \"manufacturer\",\n        \"urls\" : [ \"urls\", \"urls\" ],\n        \"deliveryDurationDays\" : 5,\n        \"feedId\" : 0,\n        \"vendor\" : \"LEVENHUK\",\n        \"price\" : 2.027123023002322,\n        \"transportUnitSize\" : 1,\n        \"id\" : \"id\",\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ],\n        \"lifeTimeDays\" : 9,\n        \"quantumOfSupply\" : 5,\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ],\n        \"processingState\" : {\n          \"notes\" : [ {\n            \"payload\" : \"payload\",\n            \"type\" : \"ASSORTMENT\"\n          }, {\n            \"payload\" : \"payload\",\n            \"type\" : \"ASSORTMENT\"\n          } ],\n          \"status\" : \"UNKNOWN\"\n        },\n        \"shopSku\" : \"shopSku\",\n        \"boxCount\" : 2,\n        \"minShipment\" : 6,\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"shelfLifeDays\" : 7,\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"guaranteePeriodDays\" : 3\n      },\n      \"mapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      },\n      \"awaitingModerationMapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      },\n      \"rejectedMapping\" : {\n        \"modelId\" : 7,\n        \"marketSku\" : 4,\n        \"categoryId\" : 1\n      }\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferMappingEntriesResponse>(exampleJson)
            : default(GetOfferMappingEntriesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о товарах в каталоге
        /// </summary>
        /// <remarks>Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getOfferMappingsRequest"></param>
        /// <response code="200">Информация о товарах в каталоге.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferMappingsResponse), description: "Информация о товарах в каталоге.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetOfferMappingsRequest getOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"offerMappings\" : [ {\n      \"offer\" : {\n        \"downloadable\" : true,\n        \"sellingPrograms\" : [ {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        }, {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        } ],\n        \"marketCategoryId\" : 0,\n        \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ],\n        \"description\" : \"description\",\n        \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ],\n        \"purchasePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"type\" : \"DEFAULT\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"archived\" : true,\n        \"campaigns\" : [ {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        }, {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        } ],\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"discountBase\" : 0.23021358869347652,\n          \"currencyId\" : \"RUR\",\n          \"value\" : 0.5637376656633328,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"params\" : [ {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        }, {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        } ],\n        \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ],\n        \"condition\" : {\n          \"reason\" : \"reason\",\n          \"type\" : \"PREOWNED\",\n          \"quality\" : \"PERFECT\"\n        },\n        \"certificates\" : [ \"certificates\", \"certificates\" ],\n        \"boxCount\" : 1,\n        \"additionalExpenses\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"customsCommodityCode\" : \"8517610008\",\n        \"adult\" : true,\n        \"age\" : {\n          \"ageUnit\" : \"YEAR\",\n          \"value\" : 0.5962133916683182\n        },\n        \"manuals\" : [ {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        } ]\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    }, {\n      \"offer\" : {\n        \"downloadable\" : true,\n        \"sellingPrograms\" : [ {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        }, {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        } ],\n        \"marketCategoryId\" : 0,\n        \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ],\n        \"description\" : \"description\",\n        \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ],\n        \"purchasePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"type\" : \"DEFAULT\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"archived\" : true,\n        \"campaigns\" : [ {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        }, {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        } ],\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"discountBase\" : 0.23021358869347652,\n          \"currencyId\" : \"RUR\",\n          \"value\" : 0.5637376656633328,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"params\" : [ {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        }, {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        } ],\n        \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ],\n        \"condition\" : {\n          \"reason\" : \"reason\",\n          \"type\" : \"PREOWNED\",\n          \"quality\" : \"PERFECT\"\n        },\n        \"certificates\" : [ \"certificates\", \"certificates\" ],\n        \"boxCount\" : 1,\n        \"additionalExpenses\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"customsCommodityCode\" : \"8517610008\",\n        \"adult\" : true,\n        \"age\" : {\n          \"ageUnit\" : \"YEAR\",\n          \"value\" : 0.5962133916683182\n        },\n        \"manuals\" : [ {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        } ]\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferMappingsResponse>(exampleJson)
            : default(GetOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Рекомендации Маркета, касающиеся цен
        /// </summary>
        /// <remarks>Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getOfferRecommendationsRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список товаров с рекомендациями.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offers/recommendations")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferRecommendations")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferRecommendationsResponse), description: "Список товаров с рекомендациями.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOfferRecommendations([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetOfferRecommendationsRequest getOfferRecommendationsRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferRecommendationsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"offerRecommendations\" : [ {\n      \"offer\" : {\n        \"shows\" : 0,\n        \"price\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"offerId\" : \"offerId\",\n        \"competitiveness\" : \"OPTIMAL\",\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        }\n      },\n      \"recommendation\" : {\n        \"recommendedCofinancePrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"offerId\" : \"offerId\",\n        \"competitivenessThresholds\" : {\n          \"optimalPrice\" : {\n            \"value\" : 0.9301444243932576\n          },\n          \"averagePrice\" : {\n            \"value\" : 0.9301444243932576\n          }\n        }\n      }\n    }, {\n      \"offer\" : {\n        \"shows\" : 0,\n        \"price\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"offerId\" : \"offerId\",\n        \"competitiveness\" : \"OPTIMAL\",\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        }\n      },\n      \"recommendation\" : {\n        \"recommendedCofinancePrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"offerId\" : \"offerId\",\n        \"competitivenessThresholds\" : {\n          \"optimalPrice\" : {\n            \"value\" : 0.9301444243932576\n          },\n          \"averagePrice\" : {\n            \"value\" : 0.9301444243932576\n          }\n        }\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferRecommendationsResponse>(exampleJson)
            : default(GetOfferRecommendationsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Предложения магазина
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="query">Поисковый запрос.  Поддерживается язык запросов.  Значение по умолчанию: все предложения магазина, размещенные на Маркете. </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <param name="shopCategoryId">Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. </param>
        /// <param name="currency">Валюта, в которой указана цена предложения.  Возможные значения:  * &#x60;BYN&#x60; — белорусский рубль.  * &#x60;KZT&#x60; — казахстанский тенге.  * &#x60;RUR&#x60; — российский рубль.  * &#x60;UAH&#x60; — украинская гривна. </param>
        /// <param name="matched">Фильтр по признаку соотнесения предложения и карточки модели.  Возможные значения:  * &#x60;0 / FALSE / NO&#x60; — поиск выполняется среди предложений, не соотнесенных ни с какой карточкой модели.  * &#x60;1 / TRUE / YES&#x60; — поиск выполняется среди предложений, соотнесенных с карточками моделей). </param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <response code="200">Предложения магазина.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/offers")]
        [ValidateModelState]
        [SwaggerOperation("GetOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOffersResponse), description: "Предложения магазина.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "query")]string query, [FromQuery (Name = "feedId")]long? feedId, [FromQuery (Name = "shopCategoryId")]string shopCategoryId, [FromQuery (Name = "currency")]CurrencyType? currency, [FromQuery (Name = "matched")]bool? matched, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"offers\" : [ {\n    \"marketCategoryId\" : 1,\n    \"preDiscountPrice\" : 5.962133916683182,\n    \"shopCategoryId\" : \"shopCategoryId\",\n    \"modelId\" : 2,\n    \"fee\" : 3.616076749251911,\n    \"discount\" : 5,\n    \"url\" : \"url\",\n    \"cbid\" : 9.301444243932576,\n    \"blocked\" : true,\n    \"feedId\" : 6,\n    \"price\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"currency\" : \"RUR\",\n    \"id\" : \"id\",\n    \"cutPrice\" : true,\n    \"bid\" : 7.061401241503109\n  }, {\n    \"marketCategoryId\" : 1,\n    \"preDiscountPrice\" : 5.962133916683182,\n    \"shopCategoryId\" : \"shopCategoryId\",\n    \"modelId\" : 2,\n    \"fee\" : 3.616076749251911,\n    \"discount\" : 5,\n    \"url\" : \"url\",\n    \"cbid\" : 9.301444243932576,\n    \"blocked\" : true,\n    \"feedId\" : 6,\n    \"price\" : 0.8008281904610115,\n    \"name\" : \"name\",\n    \"currency\" : \"RUR\",\n    \"id\" : \"id\",\n    \"cutPrice\" : true,\n    \"bid\" : 7.061401241503109\n  } ],\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOffersResponse>(exampleJson)
            : default(GetOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация об одном заказе
        /// </summary>
        /// <remarks>Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <response code="200">Информация о заказе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrder")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrderResponse), description: "Информация о заказе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrder([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrderResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"order\" : {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrderResponse>(exampleJson)
            : default(GetOrderResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о покупателе — юридическом лице
        /// </summary>
        /// <remarks>Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <response code="200">Информация о покупателе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/{orderId}/business-buyer")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderBusinessBuyerInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBusinessBuyerInfoResponse), description: "Информация о покупателе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrderBusinessBuyerInfo([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBusinessBuyerInfoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"organizationName\" : \"organizationName\",\n    \"organizationJurAddress\" : \"organizationJurAddress\",\n    \"inn\" : \"inn\",\n    \"kpp\" : \"kpp\"\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBusinessBuyerInfoResponse>(exampleJson)
            : default(GetBusinessBuyerInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о документах
        /// </summary>
        /// <remarks>Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <response code="200">Информация о документах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/{orderId}/documents")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderBusinessDocumentsInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetBusinessDocumentsInfoResponse), description: "Информация о документах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrderBusinessDocumentsInfo([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetBusinessDocumentsInfoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"sf\" : {\n      \"date\" : \"2000-01-23\",\n      \"number\" : \"number\",\n      \"status\" : \"READY\"\n    },\n    \"torgTwelve\" : {\n      \"date\" : \"2000-01-23\",\n      \"number\" : \"number\",\n      \"status\" : \"READY\"\n    },\n    \"upd\" : {\n      \"date\" : \"2000-01-23\",\n      \"number\" : \"number\",\n      \"status\" : \"READY\"\n    },\n    \"ukd\" : {\n      \"date\" : \"2000-01-23\",\n      \"number\" : \"number\",\n      \"status\" : \"READY\"\n    },\n    \"ksf\" : {\n      \"date\" : \"2000-01-23\",\n      \"number\" : \"number\",\n      \"status\" : \"READY\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetBusinessDocumentsInfoResponse>(exampleJson)
            : default(GetBusinessDocumentsInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Данные для самостоятельного изготовления ярлыков
        /// </summary>
        /// <remarks>Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <response code="200">Информация для печати ярлыков.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderLabelsData")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrderLabelsDataResponse), description: "Информация для печати ярлыков.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrderLabelsData([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrderLabelsDataResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"parcelBoxLabels\" : [ {\n      \"supplierName\" : \"supplierName\",\n      \"deliveryServiceId\" : \"deliveryServiceId\",\n      \"orderId\" : 1,\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"orderNum\" : \"orderNum\",\n      \"weight\" : \"weight\",\n      \"url\" : \"url\",\n      \"deliveryServiceName\" : \"deliveryServiceName\",\n      \"deliveryAddress\" : \"deliveryAddress\",\n      \"recipientName\" : \"recipientName\",\n      \"place\" : \"place\",\n      \"shipmentDate\" : \"shipmentDate\",\n      \"boxId\" : 5\n    }, {\n      \"supplierName\" : \"supplierName\",\n      \"deliveryServiceId\" : \"deliveryServiceId\",\n      \"orderId\" : 1,\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"orderNum\" : \"orderNum\",\n      \"weight\" : \"weight\",\n      \"url\" : \"url\",\n      \"deliveryServiceName\" : \"deliveryServiceName\",\n      \"deliveryAddress\" : \"deliveryAddress\",\n      \"recipientName\" : \"recipientName\",\n      \"place\" : \"place\",\n      \"shipmentDate\" : \"shipmentDate\",\n      \"boxId\" : 5\n    } ],\n    \"orderId\" : 0,\n    \"placesNumber\" : 6,\n    \"url\" : \"url\"\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrderLabelsDataResponse>(exampleJson)
            : default(GetOrderLabelsDataResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о нескольких заказах
        /// </summary>
        /// <remarks>Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderIds">Фильтрация заказов по идентификаторам. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. </param>
        /// <param name="status">Статус заказа:  * &#x60;CANCELLED&#x60; — заказ отменен.  * &#x60;DELIVERED&#x60; — заказ получен покупателем.  * &#x60;DELIVERY&#x60; — заказ передан в службу доставки.  * &#x60;PICKUP&#x60; — заказ доставлен в пункт самовывоза.  * &#x60;PROCESSING&#x60; — заказ находится в обработке.  * &#x60;UNPAID&#x60; — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. </param>
        /// <param name="substatus">Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  Возможные значения для заказа в статусе &#x60;PROCESSING&#x60;:  * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать. * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке. * &#x60;SHIPPED&#x60; — заказ передан службе доставки.  Возможные значения для заказа в статусе &#x60;CANCELLED&#x60;:  * &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60; — служба доставки не смогла доставить заказ.  * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.  * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.  * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * &#x60;RESERVATION_FAILED&#x60; — Маркет не может продолжить дальнейшую обработку заказа.  * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.  * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.  * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.  * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.  * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.  * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.  * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * &#x60;USER_WANTS_TO_CHANGE_DELIVERY_DATE&#x60; — покупатель хочет получить заказ в другой день. * &#x60;CANCELLED_COURIER_NOT_FOUND&#x60; — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. </param>
        /// <param name="fromDate">Начальная дата для фильтрации заказов по дате оформления.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;toDate&#x60;) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. </param>
        /// <param name="toDate">Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;fromDate&#x60;) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. </param>
        /// <param name="supplierShipmentDateFrom">Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;supplierShipmentDateTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. </param>
        /// <param name="supplierShipmentDateTo">Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;supplierShipmentDateFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. </param>
        /// <param name="updatedAtFrom">Начальная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной и конечной датой (параметр &#x60;updatedAtTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. </param>
        /// <param name="updatedAtTo">Конечная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной (параметр &#x60;updatedAtFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. </param>
        /// <param name="dispatchType">Способ отгрузки</param>
        /// <param name="fake">Фильтрация заказов по типам:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. </param>
        /// <param name="hasCis">Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да.  * &#x60;false&#x60; — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. </param>
        /// <param name="onlyWaitingForCancellationApprove">**Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение &#x60;true&#x60; возвращаются только заказы, которые находятся в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60; и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). </param>
        /// <param name="onlyEstimatedDelivery">Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * &#x60;true&#x60; — возвращаются только заказы с неподтвержденной датой доставки. * &#x60;false&#x60; — фильтрация не применяется. </param>
        /// <param name="buyerType">Фильтрация заказов по типу покупателя. </param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Информация о заказах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders")]
        [ValidateModelState]
        [SwaggerOperation("GetOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrdersResponse), description: "Информация о заказах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrders([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "orderIds")]List<long> orderIds, [FromQuery (Name = "status")]List<OrderStatusType> status, [FromQuery (Name = "substatus")]List<OrderSubstatusType> substatus, [FromQuery (Name = "fromDate")]DateOnly? fromDate, [FromQuery (Name = "toDate")]DateOnly? toDate, [FromQuery (Name = "supplierShipmentDateFrom")]DateOnly? supplierShipmentDateFrom, [FromQuery (Name = "supplierShipmentDateTo")]DateOnly? supplierShipmentDateTo, [FromQuery (Name = "updatedAtFrom")]DateTime? updatedAtFrom, [FromQuery (Name = "updatedAtTo")]DateTime? updatedAtTo, [FromQuery (Name = "dispatchType")]OrderDeliveryDispatchType? dispatchType, [FromQuery (Name = "fake")]bool? fake, [FromQuery (Name = "hasCis")]bool? hasCis, [FromQuery (Name = "onlyWaitingForCancellationApprove")]bool? onlyWaitingForCancellationApprove, [FromQuery (Name = "onlyEstimatedDelivery")]bool? onlyEstimatedDelivery, [FromQuery (Name = "buyerType")]OrderBuyerType? buyerType, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrdersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  },\n  \"orders\" : [ {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }, {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  } ],\n  \"paging\" : {\n    \"nextPageToken\" : \"nextPageToken\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrdersResponse>(exampleJson)
            : default(GetOrdersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Детальная информация по заказам
        /// </summary>
        /// <remarks>Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \&quot;\&quot; %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getOrdersStatsRequest"></param>
        /// <response code="200">Информация по заказам.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/stats/orders")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOrdersStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrdersStatsResponse), description: "Информация по заказам.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrdersStats([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetOrdersStatsRequest getOrdersStatsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrdersStatsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"orders\" : [ {\n      \"partnerOrderId\" : \"partnerOrderId\",\n      \"commissions\" : [ {\n        \"actual\" : 1.2315135367772556,\n        \"type\" : \"FEE\"\n      }, {\n        \"actual\" : 1.2315135367772556,\n        \"type\" : \"FEE\"\n      } ],\n      \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"payments\" : [ {\n        \"date\" : \"2000-01-23\",\n        \"total\" : 7.386281948385884,\n        \"paymentOrder\" : {\n          \"date\" : \"2000-01-23\",\n          \"id\" : \"id\"\n        },\n        \"id\" : \"id\",\n        \"source\" : \"BUYER\",\n        \"type\" : \"PAYMENT\"\n      }, {\n        \"date\" : \"2000-01-23\",\n        \"total\" : 7.386281948385884,\n        \"paymentOrder\" : {\n          \"date\" : \"2000-01-23\",\n          \"id\" : \"id\"\n        },\n        \"id\" : \"id\",\n        \"source\" : \"BUYER\",\n        \"type\" : \"PAYMENT\"\n      } ],\n      \"fake\" : true,\n      \"deliveryRegion\" : {\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23\",\n      \"items\" : [ {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      }, {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      } ],\n      \"initialItems\" : [ {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      }, {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      } ],\n      \"status\" : \"CANCELLED_BEFORE_PROCESSING\",\n      \"paymentType\" : \"CREDIT\"\n    }, {\n      \"partnerOrderId\" : \"partnerOrderId\",\n      \"commissions\" : [ {\n        \"actual\" : 1.2315135367772556,\n        \"type\" : \"FEE\"\n      }, {\n        \"actual\" : 1.2315135367772556,\n        \"type\" : \"FEE\"\n      } ],\n      \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"payments\" : [ {\n        \"date\" : \"2000-01-23\",\n        \"total\" : 7.386281948385884,\n        \"paymentOrder\" : {\n          \"date\" : \"2000-01-23\",\n          \"id\" : \"id\"\n        },\n        \"id\" : \"id\",\n        \"source\" : \"BUYER\",\n        \"type\" : \"PAYMENT\"\n      }, {\n        \"date\" : \"2000-01-23\",\n        \"total\" : 7.386281948385884,\n        \"paymentOrder\" : {\n          \"date\" : \"2000-01-23\",\n          \"id\" : \"id\"\n        },\n        \"id\" : \"id\",\n        \"source\" : \"BUYER\",\n        \"type\" : \"PAYMENT\"\n      } ],\n      \"fake\" : true,\n      \"deliveryRegion\" : {\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23\",\n      \"items\" : [ {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      }, {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      } ],\n      \"initialItems\" : [ {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      }, {\n        \"cofinanceValue\" : 4.145608029883936,\n        \"initialCount\" : 3,\n        \"offerName\" : \"offerName\",\n        \"shopSku\" : \"shopSku\",\n        \"cisList\" : [ \"cisList\", \"cisList\" ],\n        \"marketSku\" : 1,\n        \"count\" : 5,\n        \"bidFee\" : 570,\n        \"cofinanceThreshold\" : 2.027123023002322,\n        \"details\" : [ {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        }, {\n          \"updateDate\" : \"2000-01-23\",\n          \"stockType\" : \"FIT\",\n          \"itemStatus\" : \"REJECTED\",\n          \"itemCount\" : 9\n        } ],\n        \"prices\" : [ {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        }, {\n          \"total\" : 2.3021358869347655,\n          \"costPerItem\" : 5.637376656633329,\n          \"type\" : \"BUYER\"\n        } ],\n        \"warehouse\" : {\n          \"name\" : \"name\",\n          \"id\" : 7\n        }\n      } ],\n      \"status\" : \"CANCELLED_BEFORE_PROCESSING\",\n      \"paymentType\" : \"CREDIT\"\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrdersStatsResponse>(exampleJson)
            : default(GetOrdersStatsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список цен
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="archived">Фильтр по нахождению в архиве.</param>
        /// <response code="200">Список всех товаров с установленными ценами.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/offer-prices")]
        [ValidateModelState]
        [SwaggerOperation("GetPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPricesResponse), description: "Список всех товаров с установленными ценами.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetPrices([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "archived")]bool? archived)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetPricesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"price\" : {\n        \"vat\" : 1,\n        \"discountBase\" : 6.027456183070403,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.8008281904610115\n      },\n      \"marketSku\" : 0,\n      \"id\" : \"id\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"price\" : {\n        \"vat\" : 1,\n        \"discountBase\" : 6.027456183070403,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.8008281904610115\n      },\n      \"marketSku\" : 0,\n      \"id\" : \"id\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"total\" : 6,\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetPricesResponse>(exampleJson)
            : default(GetPricesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Просмотр цен на указанные товары в магазине
        /// </summary>
        /// <remarks>Возвращает список цен на указанные товары в магазине.  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров на витрине * 25) </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getPricesByOfferIdsRequest"></param>
        /// <response code="200">Список товаров с установленными для заданного магазина ценами.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offer-prices")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetPricesByOfferIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPricesByOfferIdsResponse), description: "Список товаров с установленными для заданного магазина ценами.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetPricesByOfferIds([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetPricesByOfferIdsRequest getPricesByOfferIdsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetPricesByOfferIdsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"price\" : {\n        \"vat\" : 1,\n        \"discountBase\" : 6.027456183070403,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.8008281904610115\n      },\n      \"offerId\" : \"offerId\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"price\" : {\n        \"vat\" : 1,\n        \"discountBase\" : 6.027456183070403,\n        \"currencyId\" : \"RUR\",\n        \"value\" : 0.8008281904610115\n      },\n      \"offerId\" : \"offerId\",\n      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetPricesByOfferIdsResponse>(exampleJson)
            : default(GetPricesByOfferIdsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение списка товаров, которые участвуют или могут участвовать в акции
        /// </summary>
        /// <remarks>Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getPromoOffersRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список товаров, которые участвуют или могут участвовать в акции.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/promos/offers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetPromoOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPromoOffersResponse), description: "Список товаров, которые участвуют или могут участвовать в акции.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetPromoOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetPromoOffersRequest getPromoOffersRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetPromoOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"offerId\" : \"offerId\",\n      \"params\" : {\n        \"discountParams\" : {\n          \"promoPrice\" : 6,\n          \"maxPromoPrice\" : 1,\n          \"price\" : 0\n        },\n        \"promocodeParams\" : {\n          \"maxPrice\" : 5\n        }\n      },\n      \"status\" : \"AUTO\",\n      \"autoParticipatingDetails\" : {\n        \"campaignIds\" : [ 5, 5 ]\n      }\n    }, {\n      \"offerId\" : \"offerId\",\n      \"params\" : {\n        \"discountParams\" : {\n          \"promoPrice\" : 6,\n          \"maxPromoPrice\" : 1,\n          \"price\" : 0\n        },\n        \"promocodeParams\" : {\n          \"maxPrice\" : 5\n        }\n      },\n      \"status\" : \"AUTO\",\n      \"autoParticipatingDetails\" : {\n        \"campaignIds\" : [ 5, 5 ]\n      }\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetPromoOffersResponse>(exampleJson)
            : default(GetPromoOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение списка акций
        /// </summary>
        /// <remarks>Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getPromosRequest"></param>
        /// <response code="200">Список акций Маркета.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/promos")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetPromos")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetPromosResponse), description: "Список акций Маркета.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetPromos([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetPromosRequest getPromosRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetPromosResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"promos\" : [ {\n      \"period\" : {\n        \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"channels\" : [ \"{}\", \"{}\" ],\n      \"mechanicsInfo\" : {\n        \"promocodeInfo\" : {\n          \"promocode\" : \"promocode\",\n          \"discount\" : 1\n        },\n        \"type\" : \"DIRECT_DISCOUNT\"\n      },\n      \"bestsellerInfo\" : {\n        \"bestseller\" : true,\n        \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"name\" : \"name\",\n      \"participating\" : true,\n      \"id\" : \"id\",\n      \"constraints\" : {\n        \"warehouseIds\" : [ 5, 5 ]\n      },\n      \"assortmentInfo\" : {\n        \"activeOffers\" : 0,\n        \"processing\" : true,\n        \"potentialOffers\" : 6\n      }\n    }, {\n      \"period\" : {\n        \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"channels\" : [ \"{}\", \"{}\" ],\n      \"mechanicsInfo\" : {\n        \"promocodeInfo\" : {\n          \"promocode\" : \"promocode\",\n          \"discount\" : 1\n        },\n        \"type\" : \"DIRECT_DISCOUNT\"\n      },\n      \"bestsellerInfo\" : {\n        \"bestseller\" : true,\n        \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\"\n      },\n      \"name\" : \"name\",\n      \"participating\" : true,\n      \"id\" : \"id\",\n      \"constraints\" : {\n        \"warehouseIds\" : [ 5, 5 ]\n      },\n      \"assortmentInfo\" : {\n        \"activeOffers\" : 0,\n        \"processing\" : true,\n        \"potentialOffers\" : 6\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetPromosResponse>(exampleJson)
            : default(GetPromosResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Заказы, которые повлияли на индекс качества
        /// </summary>
        /// <remarks>Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Информация о заказах, которые повлияли на индекс качества.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/ratings/quality/details")]
        [ValidateModelState]
        [SwaggerOperation("GetQualityRatingDetails")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetQualityRatingDetailsResponse), description: "Информация о заказах, которые повлияли на индекс качества.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetQualityRatingDetails([FromRoute (Name = "campaignId")][Required]long campaignId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetQualityRatingDetailsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"affectedOrders\" : [ {\n      \"componentType\" : \"DBS_CANCELLATION_RATE\",\n      \"orderId\" : 0,\n      \"description\" : \"description\"\n    }, {\n      \"componentType\" : \"DBS_CANCELLATION_RATE\",\n      \"orderId\" : 0,\n      \"description\" : \"description\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetQualityRatingDetailsResponse>(exampleJson)
            : default(GetQualityRatingDetailsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Индекс качества магазинов
        /// </summary>
        /// <remarks>Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getQualityRatingRequest"></param>
        /// <response code="200">Значение индекса качества магазинов и его составляющие.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/ratings/quality")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetQualityRatings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetQualityRatingResponse), description: "Значение индекса качества магазинов и его составляющие.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetQualityRatings([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetQualityRatingRequest getQualityRatingRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetQualityRatingResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"campaignRatings\" : [ {\n      \"campaignId\" : 0,\n      \"ratings\" : [ {\n        \"components\" : [ {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        }, {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        } ],\n        \"rating\" : 60,\n        \"calculationDate\" : \"2000-01-23\"\n      }, {\n        \"components\" : [ {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        }, {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        } ],\n        \"rating\" : 60,\n        \"calculationDate\" : \"2000-01-23\"\n      } ]\n    }, {\n      \"campaignId\" : 0,\n      \"ratings\" : [ {\n        \"components\" : [ {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        }, {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        } ],\n        \"rating\" : 60,\n        \"calculationDate\" : \"2000-01-23\"\n      }, {\n        \"components\" : [ {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        }, {\n          \"componentType\" : \"DBS_CANCELLATION_RATE\",\n          \"value\" : 14.658129805029452\n        } ],\n        \"rating\" : 60,\n        \"calculationDate\" : \"2000-01-23\"\n      } ]\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetQualityRatingResponse>(exampleJson)
            : default(GetQualityRatingResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение заданного отчета
        /// </summary>
        /// <remarks>Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <param name="reportId">Идентификатор отчета, который вы получили после запуска генерации. </param>
        /// <response code="200">Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — &#x60;FAILED&#x60; или &#x60;NO_DATA&#x60;, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/reports/info/{reportId}")]
        [ValidateModelState]
        [SwaggerOperation("GetReportInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReportInfoResponse), description: "Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — &#x60;FAILED&#x60; или &#x60;NO_DATA&#x60;, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReportInfo([FromRoute (Name = "reportId")][Required]string reportId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReportInfoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"generationRequestedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"file\" : \"file\",\n    \"generationFinishedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"subStatus\" : \"NO_DATA\",\n    \"status\" : \"PENDING\",\n    \"estimatedGenerationTime\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetReportInfoResponse>(exampleJson)
            : default(GetReportInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о невыкупе или возврате
        /// </summary>
        /// <remarks>Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <response code="200">Детали возврата.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}")]
        [ValidateModelState]
        [SwaggerOperation("GetReturn")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReturnResponse), description: "Детали возврата.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturn([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReturnResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"fastReturn\" : true,\n    \"orderId\" : 6,\n    \"shipmentRecipientType\" : \"SHOP\",\n    \"refundStatus\" : \"STARTED_BY_USER\",\n    \"logisticPickupPoint\" : {\n      \"logisticPartnerId\" : 5,\n      \"address\" : {\n        \"country\" : \"Россия\",\n        \"city\" : \"Москва\",\n        \"street\" : \"Стрелецкая улица\",\n        \"postcode\" : \"123518\",\n        \"house\" : \"9к2\"\n      },\n      \"instruction\" : \"instruction\",\n      \"name\" : \"name\",\n      \"id\" : 1,\n      \"type\" : \"WAREHOUSE\"\n    },\n    \"id\" : 0,\n    \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"items\" : [ {\n      \"shopSku\" : \"shopSku\",\n      \"instances\" : [ {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      }, {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      } ],\n      \"marketSku\" : 2,\n      \"count\" : 7,\n      \"decisions\" : [ {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      }, {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\"\n      }, {\n        \"trackCode\" : \"trackCode\"\n      } ]\n    }, {\n      \"shopSku\" : \"shopSku\",\n      \"instances\" : [ {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      }, {\n        \"stockType\" : \"FIT\",\n        \"imei\" : \"imei\",\n        \"cis\" : \"cis\",\n        \"status\" : \"CREATED\"\n      } ],\n      \"marketSku\" : 2,\n      \"count\" : 7,\n      \"decisions\" : [ {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      }, {\n        \"images\" : [ \"images\", \"images\" ],\n        \"returnItemId\" : 9,\n        \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n        \"count\" : 3,\n        \"comment\" : \"comment\",\n        \"decisionType\" : \"REFUND_MONEY\",\n        \"reasonType\" : \"BAD_QUALITY\",\n        \"partnerCompensation\" : 4,\n        \"refundAmount\" : 2\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\"\n      }, {\n        \"trackCode\" : \"trackCode\"\n      } ]\n    } ],\n    \"returnType\" : \"UNREDEEMED\",\n    \"shipmentStatus\" : \"CREATED\",\n    \"refundAmount\" : 5\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetReturnResponse>(exampleJson)
            : default(GetReturnResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение заявления на возврат
        /// </summary>
        /// <remarks>Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <response code="200">Заявление на возврат.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application")]
        [ValidateModelState]
        [SwaggerOperation("GetReturnApplication")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Заявление на возврат.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturnApplication([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение фотографии возврата
        /// </summary>
        /// <remarks>Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="returnId">Идентификатор возврата.</param>
        /// <param name="itemId">Идентификатор товара в возврате.</param>
        /// <param name="imageHash">Хеш ссылки изображения для загрузки.</param>
        /// <response code="200">Фотография возврата.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}")]
        [ValidateModelState]
        [SwaggerOperation("GetReturnPhoto")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "Фотография возврата.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturnPhoto([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "returnId")][Required]long returnId, [FromRoute (Name = "itemId")][Required]long itemId, [FromRoute (Name = "imageHash")][Required]string imageHash)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список невыкупов и возвратов
        /// </summary>
        /// <remarks>Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="orderIds">Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. </param>
        /// <param name="statuses">Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. </param>
        /// <param name="type">Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. </param>
        /// <param name="fromDate">Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <param name="toDate">Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <param name="fromDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (deprecated)</param>
        /// <param name="toDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (deprecated)</param>
        /// <response code="200">Постраничные возвраты партнера.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/returns")]
        [ValidateModelState]
        [SwaggerOperation("GetReturns")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetReturnsResponse), description: "Постраничные возвраты партнера.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetReturns([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "orderIds")]List<long> orderIds, [FromQuery (Name = "statuses")]List<RefundStatusType> statuses, [FromQuery (Name = "type")]ReturnType? type, [FromQuery (Name = "fromDate")]DateOnly? fromDate, [FromQuery (Name = "toDate")]DateOnly? toDate, [FromQuery (Name = "from_date")]DateOnly? fromDate2, [FromQuery (Name = "to_date")]DateOnly? toDate2)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetReturnsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"returns\" : [ {\n      \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"fastReturn\" : true,\n      \"orderId\" : 6,\n      \"shipmentRecipientType\" : \"SHOP\",\n      \"refundStatus\" : \"STARTED_BY_USER\",\n      \"logisticPickupPoint\" : {\n        \"logisticPartnerId\" : 5,\n        \"address\" : {\n          \"country\" : \"Россия\",\n          \"city\" : \"Москва\",\n          \"street\" : \"Стрелецкая улица\",\n          \"postcode\" : \"123518\",\n          \"house\" : \"9к2\"\n        },\n        \"instruction\" : \"instruction\",\n        \"name\" : \"name\",\n        \"id\" : 1,\n        \"type\" : \"WAREHOUSE\"\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"items\" : [ {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      }, {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      } ],\n      \"returnType\" : \"UNREDEEMED\",\n      \"shipmentStatus\" : \"CREATED\",\n      \"refundAmount\" : 5\n    }, {\n      \"updateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"fastReturn\" : true,\n      \"orderId\" : 6,\n      \"shipmentRecipientType\" : \"SHOP\",\n      \"refundStatus\" : \"STARTED_BY_USER\",\n      \"logisticPickupPoint\" : {\n        \"logisticPartnerId\" : 5,\n        \"address\" : {\n          \"country\" : \"Россия\",\n          \"city\" : \"Москва\",\n          \"street\" : \"Стрелецкая улица\",\n          \"postcode\" : \"123518\",\n          \"house\" : \"9к2\"\n        },\n        \"instruction\" : \"instruction\",\n        \"name\" : \"name\",\n        \"id\" : 1,\n        \"type\" : \"WAREHOUSE\"\n      },\n      \"id\" : 0,\n      \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"items\" : [ {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      }, {\n        \"shopSku\" : \"shopSku\",\n        \"instances\" : [ {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        }, {\n          \"stockType\" : \"FIT\",\n          \"imei\" : \"imei\",\n          \"cis\" : \"cis\",\n          \"status\" : \"CREATED\"\n        } ],\n        \"marketSku\" : 2,\n        \"count\" : 7,\n        \"decisions\" : [ {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        }, {\n          \"images\" : [ \"images\", \"images\" ],\n          \"returnItemId\" : 9,\n          \"subreasonType\" : \"USER_DID_NOT_LIKE\",\n          \"count\" : 3,\n          \"comment\" : \"comment\",\n          \"decisionType\" : \"REFUND_MONEY\",\n          \"reasonType\" : \"BAD_QUALITY\",\n          \"partnerCompensation\" : 4,\n          \"refundAmount\" : 2\n        } ],\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\"\n        }, {\n          \"trackCode\" : \"trackCode\"\n        } ]\n      } ],\n      \"returnType\" : \"UNREDEEMED\",\n      \"shipmentStatus\" : \"CREATED\",\n      \"refundAmount\" : 5\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetReturnsResponse>(exampleJson)
            : default(GetReturnsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение информации об одной отгрузке
        /// </summary>
        /// <remarks>Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <param name="cancelledOrders">Возвращать ли отмененные заказы.  Значение по умолчанию — &#x60;true&#x60;. Если возвращать отмененные заказы не нужно, передайте значение &#x60;false&#x60;. </param>
        /// <response code="200">Найденная отгрузка.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}")]
        [ValidateModelState]
        [SwaggerOperation("GetShipment")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetShipmentResponse), description: "Найденная отгрузка.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetShipment([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromQuery (Name = "cancelledOrders")]bool? cancelledOrders)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetShipmentResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"deliveryService\" : {\n      \"name\" : \"name\",\n      \"id\" : 1\n    },\n    \"availableActions\" : [ \"CONFIRM\", \"CONFIRM\" ],\n    \"draftCount\" : 7,\n    \"plannedCount\" : 9,\n    \"currentStatus\" : {\n      \"description\" : \"description\",\n      \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"status\" : \"OUTBOUND_CREATED\"\n    },\n    \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"externalId\" : \"externalId\",\n    \"warehouse\" : {\n      \"address\" : \"address\",\n      \"name\" : \"name\",\n      \"id\" : 6\n    },\n    \"shipmentType\" : \"IMPORT\",\n    \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"warehouseTo\" : {\n      \"address\" : \"address\",\n      \"name\" : \"name\",\n      \"id\" : 6\n    },\n    \"factCount\" : 3,\n    \"palletsCount\" : {\n      \"fact\" : 5,\n      \"planned\" : 5\n    },\n    \"id\" : 0,\n    \"orderIds\" : [ 2, 2 ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetShipmentResponse>(exampleJson)
            : default(GetShipmentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение информации о возможности печати ярлыков (FBS)
        /// </summary>
        /// <remarks>Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <response code="200">Информация по годным/негодным для печати ярлыков заказам в отгрузке.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info")]
        [ValidateModelState]
        [SwaggerOperation("GetShipmentOrdersInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetShipmentOrdersInfoResponse), description: "Информация по годным/негодным для печати ярлыков заказам в отгрузке.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetShipmentOrdersInfo([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetShipmentOrdersInfoResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"orderIdsWithLabels\" : [ 0, 0 ],\n    \"orderIdsWithoutLabels\" : [ 6, 6 ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetShipmentOrdersInfoResponse>(exampleJson)
            : default(GetShipmentOrdersInfoResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация об остатках и оборачиваемости
        /// </summary>
        /// <remarks>Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getWarehouseStocksRequest"></param>
        /// <response code="200">Остатки товаров на складах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offers/stocks")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWarehouseStocksResponse), description: "Остатки товаров на складах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetStocks([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetWarehouseStocksRequest getWarehouseStocksRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWarehouseStocksResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"warehouses\" : [ {\n      \"offers\" : [ {\n        \"offerId\" : \"offerId\",\n        \"turnoverSummary\" : {\n          \"turnoverDays\" : 6.027456183070403,\n          \"turnover\" : \"LOW\"\n        },\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ],\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"offerId\" : \"offerId\",\n        \"turnoverSummary\" : {\n          \"turnoverDays\" : 6.027456183070403,\n          \"turnover\" : \"LOW\"\n        },\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ],\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"warehouseId\" : 0\n    }, {\n      \"offers\" : [ {\n        \"offerId\" : \"offerId\",\n        \"turnoverSummary\" : {\n          \"turnoverDays\" : 6.027456183070403,\n          \"turnover\" : \"LOW\"\n        },\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ],\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"offerId\" : \"offerId\",\n        \"turnoverSummary\" : {\n          \"turnoverDays\" : 6.027456183070403,\n          \"turnover\" : \"LOW\"\n        },\n        \"stocks\" : [ {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        }, {\n          \"count\" : 1,\n          \"type\" : \"FIT\"\n        } ],\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"warehouseId\" : 0\n    } ],\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetWarehouseStocksResponse>(exampleJson)
            : default(GetWarehouseStocksResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Рекомендованные карточки для товаров
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product- -yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getSuggestedOfferMappingEntriesRequest"></param>
        /// <response code="200">Информация о товарах в каталоге.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offer-mapping-entries/suggestions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetSuggestedOfferMappingEntries")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSuggestedOfferMappingEntriesResponse), description: "Информация о товарах в каталоге.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetSuggestedOfferMappingEntries([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]GetSuggestedOfferMappingEntriesRequest getSuggestedOfferMappingEntriesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSuggestedOfferMappingEntriesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ],\n      \"marketCategoryId\" : 4,\n      \"certificate\" : \"certificate\",\n      \"description\" : \"description\",\n      \"availability\" : \"ACTIVE\",\n      \"marketModelId\" : 7,\n      \"pictures\" : [ \"pictures\", \"pictures\" ],\n      \"vendorCode\" : \"VNDR-0005A\",\n      \"manufacturer\" : \"manufacturer\",\n      \"marketSkuName\" : \"marketSkuName\",\n      \"urls\" : [ \"urls\", \"urls\" ],\n      \"deliveryDurationDays\" : 5,\n      \"feedId\" : 0,\n      \"vendor\" : \"LEVENHUK\",\n      \"price\" : 2.027123023002322,\n      \"transportUnitSize\" : 1,\n      \"id\" : \"id\",\n      \"lifeTime\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"shelfLife\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ],\n      \"marketModelName\" : \"marketModelName\",\n      \"lifeTimeDays\" : 9,\n      \"quantumOfSupply\" : 5,\n      \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n      \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ],\n      \"processingState\" : {\n        \"notes\" : [ {\n          \"payload\" : \"payload\",\n          \"type\" : \"ASSORTMENT\"\n        }, {\n          \"payload\" : \"payload\",\n          \"type\" : \"ASSORTMENT\"\n        } ],\n        \"status\" : \"UNKNOWN\"\n      },\n      \"marketCategoryName\" : \"marketCategoryName\",\n      \"shopSku\" : \"shopSku\",\n      \"boxCount\" : 2,\n      \"minShipment\" : 6,\n      \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n      \"shelfLifeDays\" : 7,\n      \"guaranteePeriod\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"weightDimensions\" : {\n        \"length\" : 65.55,\n        \"width\" : 50.7,\n        \"weight\" : 1.001,\n        \"height\" : 20\n      },\n      \"category\" : \"category\",\n      \"guaranteePeriodDays\" : 3\n    }, {\n      \"manufacturerCountries\" : [ \"manufacturerCountries\", \"manufacturerCountries\" ],\n      \"marketCategoryId\" : 4,\n      \"certificate\" : \"certificate\",\n      \"description\" : \"description\",\n      \"availability\" : \"ACTIVE\",\n      \"marketModelId\" : 7,\n      \"pictures\" : [ \"pictures\", \"pictures\" ],\n      \"vendorCode\" : \"VNDR-0005A\",\n      \"manufacturer\" : \"manufacturer\",\n      \"marketSkuName\" : \"marketSkuName\",\n      \"urls\" : [ \"urls\", \"urls\" ],\n      \"deliveryDurationDays\" : 5,\n      \"feedId\" : 0,\n      \"vendor\" : \"LEVENHUK\",\n      \"price\" : 2.027123023002322,\n      \"transportUnitSize\" : 1,\n      \"id\" : \"id\",\n      \"lifeTime\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"shelfLife\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"supplyScheduleDays\" : [ \"MONDAY\", \"MONDAY\" ],\n      \"marketModelName\" : \"marketModelName\",\n      \"lifeTimeDays\" : 9,\n      \"quantumOfSupply\" : 5,\n      \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n      \"customsCommodityCodes\" : [ \"customsCommodityCodes\", \"customsCommodityCodes\" ],\n      \"processingState\" : {\n        \"notes\" : [ {\n          \"payload\" : \"payload\",\n          \"type\" : \"ASSORTMENT\"\n        }, {\n          \"payload\" : \"payload\",\n          \"type\" : \"ASSORTMENT\"\n        } ],\n        \"status\" : \"UNKNOWN\"\n      },\n      \"marketCategoryName\" : \"marketCategoryName\",\n      \"shopSku\" : \"shopSku\",\n      \"boxCount\" : 2,\n      \"minShipment\" : 6,\n      \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n      \"shelfLifeDays\" : 7,\n      \"guaranteePeriod\" : {\n        \"timePeriod\" : 6,\n        \"comment\" : \"comment\",\n        \"timeUnit\" : \"HOUR\"\n      },\n      \"weightDimensions\" : {\n        \"length\" : 65.55,\n        \"width\" : 50.7,\n        \"weight\" : 1.001,\n        \"height\" : 20\n      },\n      \"category\" : \"category\",\n      \"guaranteePeriodDays\" : 3\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetSuggestedOfferMappingEntriesResponse>(exampleJson)
            : default(GetSuggestedOfferMappingEntriesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Просмотр карточек на Маркете, которые подходят вашим товарам
        /// </summary>
        /// <remarks>Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product- -yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getSuggestedOfferMappingsRequest"></param>
        /// <response code="200">Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/suggestions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetSuggestedOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSuggestedOfferMappingsResponse), description: "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetSuggestedOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetSuggestedOfferMappingsRequest getSuggestedOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSuggestedOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"offer\" : {\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"description\" : \"description\",\n        \"category\" : \"category\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"vendorCode\" : \"VNDR-0005A\"\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    }, {\n      \"offer\" : {\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"description\" : \"description\",\n        \"category\" : \"category\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"vendorCode\" : \"VNDR-0005A\"\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetSuggestedOfferMappingsResponse>(exampleJson)
            : default(GetSuggestedOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Цены для продвижения товаров
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="suggestPricesRequest"></param>
        /// <response code="200">Список цен для продвижения на Маркете.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offer-prices/suggestions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetSuggestedPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(SuggestPricesResponse), description: "Список цен для продвижения на Маркете.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetSuggestedPrices([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]SuggestPricesRequest suggestPricesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SuggestPricesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"marketSku\" : 0,\n      \"offerId\" : \"offerId\",\n      \"priceSuggestion\" : [ {\n        \"price\" : 6.027456183070403,\n        \"type\" : \"BUYBOX\"\n      }, {\n        \"price\" : 6.027456183070403,\n        \"type\" : \"BUYBOX\"\n      } ]\n    }, {\n      \"marketSku\" : 0,\n      \"offerId\" : \"offerId\",\n      \"priceSuggestion\" : [ {\n        \"price\" : 6.027456183070403,\n        \"type\" : \"BUYBOX\"\n      }, {\n        \"price\" : 6.027456183070403,\n        \"type\" : \"BUYBOX\"\n      } ]\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SuggestPricesResponse>(exampleJson)
            : default(SuggestPricesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Список складов и групп складов
        /// </summary>
        /// <remarks>Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <response code="200">Список складов и групп складов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/businesses/{businessId}/warehouses")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetWarehousesResponse), description: "Список складов и групп складов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetWarehouses([FromRoute (Name = "businessId")][Required]long businessId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetWarehousesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"warehouses\" : [ {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"campaignId\" : 6,\n      \"name\" : \"name\",\n      \"express\" : true,\n      \"id\" : 0\n    }, {\n      \"address\" : {\n        \"number\" : \"number\",\n        \"city\" : \"city\",\n        \"street\" : \"street\",\n        \"block\" : \"block\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"building\" : \"building\"\n      },\n      \"campaignId\" : 6,\n      \"name\" : \"name\",\n      \"express\" : true,\n      \"id\" : 0\n    } ],\n    \"warehouseGroups\" : [ {\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }, {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      } ],\n      \"mainWarehouse\" : {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }\n    }, {\n      \"name\" : \"name\",\n      \"warehouses\" : [ {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }, {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      } ],\n      \"mainWarehouse\" : {\n        \"address\" : {\n          \"number\" : \"number\",\n          \"city\" : \"city\",\n          \"street\" : \"street\",\n          \"block\" : \"block\",\n          \"gps\" : {\n            \"latitude\" : 9.965781217890562,\n            \"longitude\" : 9.369310271410669\n          },\n          \"building\" : \"building\"\n        },\n        \"campaignId\" : 6,\n        \"name\" : \"name\",\n        \"express\" : true,\n        \"id\" : 0\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetWarehousesResponse>(exampleJson)
            : default(GetWarehousesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача кодов маркировки единиц товара
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="provideOrderItemIdentifiersRequest"></param>
        /// <response code="200">Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/identifiers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProvideOrderItemIdentifiers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProvideOrderItemIdentifiersResponse), description: "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ProvideOrderItemIdentifiers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]ProvideOrderItemIdentifiersRequest provideOrderItemIdentifiersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProvideOrderItemIdentifiersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"price\" : 1.4658129805029452,\n      \"vat\" : \"NO_VAT\",\n      \"count\" : 6,\n      \"offerId\" : \"offerId\",\n      \"id\" : 0\n    }, {\n      \"offerName\" : \"offerName\",\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"price\" : 1.4658129805029452,\n      \"vat\" : \"NO_VAT\",\n      \"count\" : 6,\n      \"offerId\" : \"offerId\",\n      \"id\" : 0\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProvideOrderItemIdentifiersResponse>(exampleJson)
            : default(ProvideOrderItemIdentifiersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Включение буста продаж и установка ставок
        /// </summary>
        /// <remarks>Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="putSkuBidsRequest">description</param>
        /// <response code="200">Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/businesses/{businessId}/bids")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutBidsForBusiness")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult PutBidsForBusiness([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]PutSkuBidsRequest putSkuBidsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Включение буста продаж и установка ставок для магазина
        /// </summary>
        /// <remarks>Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="putSkuBidsRequest">description</param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/bids")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutBidsForCampaign")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult PutBidsForCampaign([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]PutSkuBidsRequest putSkuBidsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Сообщить, что прайс-лист обновился
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/feeds/{feedId}/refresh")]
        [ValidateModelState]
        [SwaggerOperation("RefreshFeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult RefreshFeed([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "feedId")][Required]long feedId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о дочерних регионах
        /// </summary>
        /// <remarks>Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| </remarks>
        /// <param name="regionId">Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). </param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <response code="200">Регионы, являющиеся дочерними к указанному в запросе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/regions/{regionId}/children")]
        [ValidateModelState]
        [SwaggerOperation("SearchRegionChildren")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetRegionWithChildrenResponse), description: "Регионы, являющиеся дочерними к указанному в запросе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SearchRegionChildren([FromRoute (Name = "regionId")][Required]long regionId, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetRegionWithChildrenResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"regions\" : {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  },\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetRegionWithChildrenResponse>(exampleJson)
            : default(GetRegionWithChildrenResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о регионе
        /// </summary>
        /// <remarks>Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| </remarks>
        /// <param name="regionId">Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). </param>
        /// <response code="200">Найденный регион.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/regions/{regionId}")]
        [ValidateModelState]
        [SwaggerOperation("SearchRegionsById")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetRegionsResponse), description: "Найденный регион.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SearchRegionsById([FromRoute (Name = "regionId")][Required]long regionId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetRegionsResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"regions\" : [ {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  }, {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  } ],\n  \"paging\" : {\n    \"nextPageToken\" : \"nextPageToken\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetRegionsResponse>(exampleJson)
            : default(GetRegionsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Поиск регионов по их имени
        /// </summary>
        /// <remarks>Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| </remarks>
        /// <param name="name">Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;. </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Список найденных регионов.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/regions")]
        [ValidateModelState]
        [SwaggerOperation("SearchRegionsByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetRegionsResponse), description: "Список найденных регионов.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SearchRegionsByName([FromQuery (Name = "name")][Required()]string name, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetRegionsResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"regions\" : [ {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  }, {\n    \"children\" : [ null, null ],\n    \"name\" : \"name\",\n    \"id\" : 0,\n    \"type\" : \"OTHER\"\n  } ],\n  \"paging\" : {\n    \"nextPageToken\" : \"nextPageToken\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetRegionsResponse>(exampleJson)
            : default(GetRegionsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение информации о нескольких отгрузках
        /// </summary>
        /// <remarks>Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="searchShipmentsRequest"></param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Найденные отгрузки.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/first-mile/shipments")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SearchShipments")]
        [SwaggerResponse(statusCode: 200, type: typeof(SearchShipmentsResponse), description: "Найденные отгрузки.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SearchShipments([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]SearchShipmentsRequest searchShipmentsRequest, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SearchShipmentsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"shipments\" : [ {\n      \"deliveryService\" : {\n        \"name\" : \"name\",\n        \"id\" : 1\n      },\n      \"draftCount\" : 1,\n      \"plannedCount\" : 5,\n      \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"externalId\" : \"externalId\",\n      \"warehouse\" : {\n        \"address\" : \"address\",\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"shipmentType\" : \"IMPORT\",\n      \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statusDescription\" : \"statusDescription\",\n      \"warehouseTo\" : {\n        \"address\" : \"address\",\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"factCount\" : 5,\n      \"palletsCount\" : {\n        \"fact\" : 5,\n        \"planned\" : 5\n      },\n      \"id\" : 0,\n      \"orderIds\" : [ 6, 6 ],\n      \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"status\" : \"OUTBOUND_CREATED\"\n    }, {\n      \"deliveryService\" : {\n        \"name\" : \"name\",\n        \"id\" : 1\n      },\n      \"draftCount\" : 1,\n      \"plannedCount\" : 5,\n      \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"externalId\" : \"externalId\",\n      \"warehouse\" : {\n        \"address\" : \"address\",\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"shipmentType\" : \"IMPORT\",\n      \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"statusDescription\" : \"statusDescription\",\n      \"warehouseTo\" : {\n        \"address\" : \"address\",\n        \"name\" : \"name\",\n        \"id\" : 6\n      },\n      \"factCount\" : 5,\n      \"palletsCount\" : {\n        \"fact\" : 5,\n        \"planned\" : 5\n      },\n      \"id\" : 0,\n      \"orderIds\" : [ 6, 6 ],\n      \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"status\" : \"OUTBOUND_CREATED\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SearchShipmentsResponse>(exampleJson)
            : default(SearchShipmentsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отправка файла в чат
        /// </summary>
        /// <remarks>Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="chatId">Идентификатор чата.</param>
        /// <param name="file">Содержимое файла. Максимальный размер файла — 5 Мбайт.</param>
        /// <response code="200">Пустой ответ. Означает, что файл отправлен.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/chats/file/send")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("SendFileToChat")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ. Означает, что файл отправлен.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SendFileToChat([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "chatId")][Required()]long chatId, [Required()]IFormFile file)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отправка сообщения в чат
        /// </summary>
        /// <remarks>Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="chatId">Идентификатор чата.</param>
        /// <param name="sendMessageToChatRequest">description</param>
        /// <response code="200">Пустой ответ. Означает, что сообщение отправлено.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/chats/message")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SendMessageToChat")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ. Означает, что сообщение отправлено.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SendMessageToChat([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "chatId")][Required()]long chatId, [FromBody]SendMessageToChatRequest sendMessageToChatRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Изменение параметров прайс-листа
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="feedId">Идентификатор прайс-листа.</param>
        /// <param name="setFeedParamsRequest"></param>
        /// <response code="200">Статус выполнения операции.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/feeds/{feedId}/params")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetFeedParams")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Статус выполнения операции.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult SetFeedParams([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "feedId")][Required]long feedId, [FromBody]SetFeedParamsRequest setFeedParamsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Подготовка заказа
        /// </summary>
        /// <remarks>{% note tip \&quot;Подходит и для DBS\&quot; %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос &#x60;allowRemove: true&#x60;. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \&quot;Удаление нельзя отменить\&quot; %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \&quot;Товар умещается в коробку\&quot; %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;fullCount\&quot;: 3,                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478gftJ14545762!\\u001dhGt264\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478fRs28323ks23!\\u001dhet201\&quot;                           }                       ]                   },                   {                       \&quot;id\&quot;: 654321,                       \&quot;fullCount\&quot;: 1                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Товар едет в разных коробках\&quot; %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Одинаковые товары, где каждый едет в нескольких коробках\&quot; %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="setOrderBoxLayoutRequest"></param>
        /// <response code="200">В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/boxes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetOrderBoxLayout")]
        [SwaggerResponse(statusCode: 200, type: typeof(SetOrderBoxLayoutResponse), description: "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetOrderBoxLayout([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]SetOrderBoxLayoutRequest setOrderBoxLayoutRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SetOrderBoxLayoutResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"boxes\" : [ {\n      \"items\" : [ {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      }, {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      } ],\n      \"boxId\" : 5\n    }, {\n      \"items\" : [ {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      }, {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      } ],\n      \"boxId\" : 5\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SetOrderBoxLayoutResponse>(exampleJson)
            : default(SetOrderBoxLayoutResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача количества грузовых мест в заказе
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \&quot;Как было раньше\&quot; %}  Структура тела PUT-запроса:  &#x60;&#x60;&#x60; {   \&quot;boxes\&quot;:   [     {       \&quot;fulfilmentId\&quot;: \&quot;{string}\&quot;,       \&quot;weight\&quot;: {int64},       \&quot;width\&quot;: {int64},       \&quot;height\&quot;: {int64},       \&quot;depth\&quot;: {int64},       \&quot;items\&quot;:       [         {           \&quot;id\&quot;: {int64},           \&quot;count\&quot;: {int32}         },         ...       ]     },     ...   ] } &#x60;&#x60;&#x60; | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;boxes&#x60;       |           | Список грузовых мест.       |  **Параметры, вложенные в &#x60;boxes&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. | | &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       | | &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       | | &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        | | &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в &#x60;items&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   | | &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="shipmentId">Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. </param>
        /// <param name="setOrderShipmentBoxesRequest"></param>
        /// <response code="200">Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetOrderShipmentBoxes")]
        [SwaggerResponse(statusCode: 200, type: typeof(SetOrderShipmentBoxesResponse), description: "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetOrderShipmentBoxes([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromBody]SetOrderShipmentBoxesRequest setOrderShipmentBoxesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SetOrderShipmentBoxesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"boxes\" : [ {\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"id\" : 0\n    }, {\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"id\" : 0\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SetOrderShipmentBoxesResponse>(exampleJson)
            : default(SetOrderShipmentBoxesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача количества упаковок в отгрузке
        /// </summary>
        /// <remarks>Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <param name="setShipmentPalletsCountRequest"></param>
        /// <response code="200">Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество упаковок записано.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetShipmentPalletsCount")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество упаковок записано.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetShipmentPalletsCount([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromBody]SetShipmentPalletsCountRequest setShipmentPalletsCountRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Отказ от ответа на отзывы
        /// </summary>
        /// <remarks>Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="skipGoodsFeedbackReactionRequest"></param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/goods-feedback/skip-reaction")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SkipGoodsFeedbacksReaction")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SkipGoodsFeedbacksReaction([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]SkipGoodsFeedbackReactionRequest skipGoodsFeedbackReactionRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Перенос заказов в следующую отгрузку
        /// </summary>
        /// <remarks>Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \&quot;Такие переносы снижают индекс качества магазина\&quot; %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="shipmentId">Идентификатор отгрузки.</param>
        /// <param name="transferOrdersFromShipmentRequest"></param>
        /// <response code="200">Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TransferOrdersFromShipment")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Запрос на перенос заказов проверен и принят, и они будут перенесены спустя несколько минут.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult TransferOrdersFromShipment([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromBody]TransferOrdersFromShipmentRequest transferOrdersFromShipmentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Установка цен на товары во всех магазинах
        /// </summary>
        /// <remarks>Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateBusinessPricesRequest"></param>
        /// <response code="200">Маркет принял информацию о новых ценах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-prices/updates")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateBusinessPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Маркет принял информацию о новых ценах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateBusinessPrices([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateBusinessPricesRequest updateBusinessPricesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Изменение условий продажи товаров в магазине
        /// </summary>
        /// <remarks>Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateCampaignOffersRequest"></param>
        /// <response code="200">Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offers/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCampaignOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Ответ 200 обозначает, что новые параметры получены Маркетом и скоро вступят в силу.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateCampaignOffers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdateCampaignOffersRequest updateCampaignOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление нового или изменение созданного комментария
        /// </summary>
        /// <remarks>Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateGoodsFeedbackCommentRequest"></param>
        /// <response code="200">Информация о добавленном или измененном комментарии.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/goods-feedback/comments/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateGoodsFeedbackComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateGoodsFeedbackCommentResponse), description: "Информация о добавленном или измененном комментарии.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateGoodsFeedbackComment([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateGoodsFeedbackCommentRequest updateGoodsFeedbackCommentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateGoodsFeedbackCommentResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"author\" : {\n      \"name\" : \"name\",\n      \"type\" : \"USER\"\n    },\n    \"id\" : 0,\n    \"text\" : \"text\",\n    \"canModify\" : true,\n    \"parentId\" : 6,\n    \"status\" : \"PUBLISHED\"\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateGoodsFeedbackCommentResponse>(exampleJson)
            : default(UpdateGoodsFeedbackCommentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Редактирование категорийных характеристик товара
        /// </summary>
        /// <remarks>Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOfferContentRequest"></param>
        /// <response code="200">Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-cards/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOfferContent")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOfferContentResponse), description: "Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOfferContent([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateOfferContentRequest updateOfferContentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOfferContentResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ]\n  }, {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ]\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOfferContentResponse>(exampleJson)
            : default(UpdateOfferContentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление и редактирование товаров в каталоге
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOfferMappingEntryRequest"></param>
        /// <response code="200">Статус выполнения операции.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offer-mapping-entries/updates")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOfferMappingEntries")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Статус выполнения операции.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult UpdateOfferMappingEntries([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdateOfferMappingEntryRequest updateOfferMappingEntryRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление товаров в каталог и изменение информации о них
        /// </summary>
        /// <remarks>Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOfferMappingsRequest"></param>
        /// <response code="200">Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOfferMappingsResponse), description: "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateOfferMappingsRequest updateOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ]\n  }, {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ]\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOfferMappingsResponse>(exampleJson)
            : default(UpdateOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товара из заказа или уменьшение числа единиц
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60;. После передачи статуса &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.  Чтобы полностью удалить товар из заказа:  * передайте значение &#x60;0&#x60;; или * не передавайте параметр &#x60;item&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="updateOrderItemRequest"></param>
        /// <response code="200">Маркет успешно обработал ваш запрос. Выходные данные не ожидаются.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/items")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderItems")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderItems([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]UpdateOrderItemRequest updateOrderItemRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Изменение статуса одного заказа
        /// </summary>
        /// <remarks>Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="updateOrderStatusRequest"></param>
        /// <response code="200">В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/status")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOrderStatusResponse), description: "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderStatus([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]UpdateOrderStatusRequest updateOrderStatusRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOrderStatusResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"order\" : {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOrderStatusResponse>(exampleJson)
            : default(UpdateOrderStatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Изменение статусов нескольких заказов
        /// </summary>
        /// <remarks>Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60;и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOrderStatusesRequest"></param>
        /// <response code="200">Возвращается информация об обновленных статусах заказов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/status-update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderStatuses")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOrderStatusesResponse), description: "Возвращается информация об обновленных статусах заказов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderStatuses([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdateOrderStatusesRequest updateOrderStatusesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOrderStatusesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"orders\" : [ {\n      \"substatus\" : \"RESERVATION_EXPIRED\",\n      \"updateStatus\" : \"OK\",\n      \"id\" : 0,\n      \"status\" : \"PLACING\",\n      \"errorDetails\" : \"errorDetails\"\n    }, {\n      \"substatus\" : \"RESERVATION_EXPIRED\",\n      \"updateStatus\" : \"OK\",\n      \"id\" : 0,\n      \"status\" : \"PLACING\",\n      \"errorDetails\" : \"errorDetails\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOrderStatusesResponse>(exampleJson)
            : default(UpdateOrderStatusesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Установка цен на товары в конкретном магазине
        /// </summary>
        /// <remarks>Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updatePricesRequest"></param>
        /// <response code="200">Маркет принял информацию о новых ценах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/offer-prices/updates")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Маркет принял информацию о новых ценах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdatePrices([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdatePricesRequest updatePricesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление товаров в акцию или изменение их цен
        /// </summary>
        /// <remarks>Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updatePromoOffersRequest"></param>
        /// <response code="200">Результат добавления товаров в акцию или обновления их цен.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/promos/offers/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePromoOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdatePromoOffersResponse), description: "Результат добавления товаров в акцию или обновления их цен.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdatePromoOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdatePromoOffersRequest updatePromoOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdatePromoOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"rejectedOffers\" : [ {\n      \"reason\" : \"OFFER_DOES_NOT_EXIST\",\n      \"offerId\" : \"offerId\"\n    }, {\n      \"reason\" : \"OFFER_DOES_NOT_EXIST\",\n      \"offerId\" : \"offerId\"\n    } ],\n    \"warningOffers\" : [ {\n      \"warnings\" : [ {\n        \"code\" : \"DEEP_DISCOUNT_OFFER\",\n        \"campaignIds\" : [ 0, 0 ]\n      }, {\n        \"code\" : \"DEEP_DISCOUNT_OFFER\",\n        \"campaignIds\" : [ 0, 0 ]\n      } ],\n      \"offerId\" : \"offerId\"\n    }, {\n      \"warnings\" : [ {\n        \"code\" : \"DEEP_DISCOUNT_OFFER\",\n        \"campaignIds\" : [ 0, 0 ]\n      }, {\n        \"code\" : \"DEEP_DISCOUNT_OFFER\",\n        \"campaignIds\" : [ 0, 0 ]\n      } ],\n      \"offerId\" : \"offerId\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdatePromoOffersResponse>(exampleJson)
            : default(UpdatePromoOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача информации об остатках
        /// </summary>
        /// <remarks>Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateStocksRequest"></param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/offers/stocks")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateStocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateStocks([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdateStocksRequest updateStocksRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
