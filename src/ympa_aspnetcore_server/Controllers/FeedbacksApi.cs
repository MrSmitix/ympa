/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FeedbacksApiController : ControllerBase
    { 
        /// <summary>
        /// Новые и обновленные отзывы о магазине
        /// </summary>
        /// <remarks>{% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="fromDate">Начальная дата обновления отзывов.  Если параметр указан, возвращаются отзывы, которые были написаны или обновлены с этой даты.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </param>
        /// <response code="200">Список отзывов для магазина.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/feedback/updates")]
        [ValidateModelState]
        [SwaggerOperation("GetFeedbackAndCommentUpdates")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetFeedbackListResponse), description: "Список отзывов для магазина.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        [Obsolete]
        public virtual IActionResult GetFeedbackAndCommentUpdates([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "from_date")]DateOnly? fromDate)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetFeedbackListResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"feedbackList\" : [ {\n      \"comments\" : [ {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"shop\" : {\n        \"name\" : \"name\"\n      },\n      \"author\" : {\n        \"name\" : \"name\",\n        \"region\" : {\n          \"children\" : [ null, null ],\n          \"name\" : \"name\",\n          \"id\" : 0,\n          \"type\" : \"OTHER\"\n        }\n      },\n      \"verified\" : true,\n      \"recommend\" : true,\n      \"grades\" : {\n        \"average\" : 5.962133916683182,\n        \"agreeCount\" : 5,\n        \"rejectCount\" : 2,\n        \"factors\" : [ {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        }, {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        } ]\n      },\n      \"pro\" : \"pro\",\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"state\" : \"LAST\",\n      \"contra\" : \"contra\",\n      \"resolved\" : true,\n      \"order\" : {\n        \"delivery\" : \"DELIVERY\",\n        \"shopOrderId\" : \"shopOrderId\"\n      }\n    }, {\n      \"comments\" : [ {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"children\" : [ null, null ],\n        \"author\" : {\n          \"name\" : \"name\",\n          \"type\" : \"USER\"\n        },\n        \"id\" : 6,\n        \"body\" : \"body\",\n        \"parentId\" : 1,\n        \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"shop\" : {\n        \"name\" : \"name\"\n      },\n      \"author\" : {\n        \"name\" : \"name\",\n        \"region\" : {\n          \"children\" : [ null, null ],\n          \"name\" : \"name\",\n          \"id\" : 0,\n          \"type\" : \"OTHER\"\n        }\n      },\n      \"verified\" : true,\n      \"recommend\" : true,\n      \"grades\" : {\n        \"average\" : 5.962133916683182,\n        \"agreeCount\" : 5,\n        \"rejectCount\" : 2,\n        \"factors\" : [ {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        }, {\n          \"description\" : \"description\",\n          \"id\" : 7,\n          \"title\" : \"title\",\n          \"value\" : 9\n        } ]\n      },\n      \"pro\" : \"pro\",\n      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 0,\n      \"text\" : \"text\",\n      \"state\" : \"LAST\",\n      \"contra\" : \"contra\",\n      \"resolved\" : true,\n      \"order\" : {\n        \"delivery\" : \"DELIVERY\",\n        \"shopOrderId\" : \"shopOrderId\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetFeedbackListResponse>(exampleJson)
            : default(GetFeedbackListResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
