/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContentApiController : ControllerBase
    { 
        /// <summary>
        /// Списки характеристик товаров по категориям
        /// </summary>
        /// <remarks>Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| </remarks>
        /// <param name="categoryId">Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). </param>
        /// <response code="200">Список характеристик товаров из заданной категории.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/category/{categoryId}/parameters")]
        [ValidateModelState]
        [SwaggerOperation("GetCategoryContentParameters")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetCategoryContentParametersResponse), description: "Список характеристик товаров из заданной категории.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetCategoryContentParameters([FromRoute (Name = "categoryId")][Required]long categoryId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetCategoryContentParametersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"parameters\" : [ {\n      \"values\" : [ {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      } ],\n      \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ],\n      \"description\" : \"description\",\n      \"type\" : \"TEXT\",\n      \"constraints\" : {\n        \"minValue\" : 2.3021358869347655,\n        \"maxValue\" : 7.061401241503109,\n        \"maxLength\" : 9\n      },\n      \"required\" : true,\n      \"multivalue\" : true,\n      \"unit\" : {\n        \"defaultUnitId\" : 1,\n        \"units\" : [ {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        }, {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        } ]\n      },\n      \"valueRestrictions\" : [ {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      }, {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      } ],\n      \"distinctive\" : true,\n      \"name\" : \"name\",\n      \"id\" : 6,\n      \"filtering\" : true,\n      \"allowCustomValues\" : true\n    }, {\n      \"values\" : [ {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"description\" : \"description\",\n        \"id\" : 5,\n        \"value\" : \"value\"\n      } ],\n      \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ],\n      \"description\" : \"description\",\n      \"type\" : \"TEXT\",\n      \"constraints\" : {\n        \"minValue\" : 2.3021358869347655,\n        \"maxValue\" : 7.061401241503109,\n        \"maxLength\" : 9\n      },\n      \"required\" : true,\n      \"multivalue\" : true,\n      \"unit\" : {\n        \"defaultUnitId\" : 1,\n        \"units\" : [ {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        }, {\n          \"name\" : \"кг\",\n          \"fullName\" : \"килограмм\",\n          \"id\" : 5\n        } ]\n      },\n      \"valueRestrictions\" : [ {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      }, {\n        \"limitedValues\" : [ {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        }, {\n          \"limitingOptionValueId\" : 2,\n          \"optionValueIds\" : [ 4, 4 ]\n        } ],\n        \"limitingParameterId\" : 3\n      } ],\n      \"distinctive\" : true,\n      \"name\" : \"name\",\n      \"id\" : 6,\n      \"filtering\" : true,\n      \"allowCustomValues\" : true\n    } ],\n    \"categoryId\" : 0\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetCategoryContentParametersResponse>(exampleJson)
            : default(GetCategoryContentParametersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Получение информации о заполненности карточек магазина
        /// </summary>
        /// <remarks>Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getOfferCardsContentStatusRequest"></param>
        /// <response code="200">Информация о карточках указанных товаров.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-cards")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferCardsContentStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferCardsContentStatusResponse), description: "Информация о карточках указанных товаров.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOfferCardsContentStatus([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetOfferCardsContentStatusRequest getOfferCardsContentStatusRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferCardsContentStatusResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offerCards\" : [ {\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"contentRating\" : 0,\n      \"recommendations\" : [ {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      }, {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      } ],\n      \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"parameterValues\" : [ {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      } ]\n    }, {\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      },\n      \"warnings\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"contentRating\" : 0,\n      \"recommendations\" : [ {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      }, {\n        \"type\" : \"HAS_VIDEO\",\n        \"percent\" : 60\n      } ],\n      \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n      \"errors\" : [ {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      }, {\n        \"comment\" : \"comment\",\n        \"message\" : \"message\"\n      } ],\n      \"parameterValues\" : [ {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      }, {\n        \"valueId\" : 5,\n        \"parameterId\" : 1,\n        \"unitId\" : 5,\n        \"value\" : \"value\"\n      } ]\n    } ],\n    \"paging\" : {\n      \"nextPageToken\" : \"nextPageToken\"\n    }\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferCardsContentStatusResponse>(exampleJson)
            : default(GetOfferCardsContentStatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Редактирование категорийных характеристик товара
        /// </summary>
        /// <remarks>Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOfferContentRequest"></param>
        /// <response code="200">Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-cards/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOfferContent")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOfferContentResponse), description: "Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOfferContent([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateOfferContentRequest updateOfferContentRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOfferContentResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ]\n  }, {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"OFFER_NOT_FOUND\",\n      \"message\" : \"message\"\n    } ]\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOfferContentResponse>(exampleJson)
            : default(UpdateOfferContentResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
