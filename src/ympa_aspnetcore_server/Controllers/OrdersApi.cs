/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OrdersApiController : ControllerBase
    { 
        /// <summary>
        /// Отмена заказа покупателем
        /// </summary>
        /// <remarks>Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр &#x60;onlyWaitingForCancellationApprove&#x3D;true&#x60;. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="acceptOrderCancellationRequest"></param>
        /// <response code="200">Ответ на отмену заказа был успешно передан.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/cancellation/accept")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AcceptOrderCancellation")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Ответ на отмену заказа был успешно передан.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult AcceptOrderCancellation([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]AcceptOrderCancellationRequest acceptOrderCancellationRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация об одном заказе
        /// </summary>
        /// <remarks>Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <response code="200">Информация о заказе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrder")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrderResponse), description: "Информация о заказе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrder([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrderResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"order\" : {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrderResponse>(exampleJson)
            : default(GetOrderResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о нескольких заказах
        /// </summary>
        /// <remarks>Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderIds">Фильтрация заказов по идентификаторам. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым. </param>
        /// <param name="status">Статус заказа:  * &#x60;CANCELLED&#x60; — заказ отменен.  * &#x60;DELIVERED&#x60; — заказ получен покупателем.  * &#x60;DELIVERY&#x60; — заказ передан в службу доставки.  * &#x60;PICKUP&#x60; — заказ доставлен в пункт самовывоза.  * &#x60;PROCESSING&#x60; — заказ находится в обработке.  * &#x60;UNPAID&#x60; — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).  Также могут возвращаться другие значения. Обрабатывать их не требуется. </param>
        /// <param name="substatus">Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).  Возможные значения для заказа в статусе &#x60;PROCESSING&#x60;:  * &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать. * &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке. * &#x60;SHIPPED&#x60; — заказ передан службе доставки.  Возможные значения для заказа в статусе &#x60;CANCELLED&#x60;:  * &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60; — служба доставки не смогла доставить заказ.  * &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.  * &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.  * &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.  * &#x60;RESERVATION_FAILED&#x60; — Маркет не может продолжить дальнейшую обработку заказа.  * &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.  * &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.  * &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.  * &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.  * &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.  * &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.  * &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:    * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;   * перерыв между первым и третьим звонком не менее 90 минут;   * соединение не короче 5 секунд.    Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400. * &#x60;USER_WANTS_TO_CHANGE_DELIVERY_DATE&#x60; — покупатель хочет получить заказ в другой день. * &#x60;CANCELLED_COURIER_NOT_FOUND&#x60; — не удалось найти курьера.  Также могут возвращаться другие значения. Обрабатывать их не требуется. </param>
        /// <param name="fromDate">Начальная дата для фильтрации заказов по дате оформления.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;toDate&#x60;) должно быть не больше 30 дней.  Значение по умолчанию: 30 дней назад от текущей даты. </param>
        /// <param name="toDate">Конечная дата для фильтрации заказов по дате оформления.  Показываются заказы, созданные до 00:00 указанного дня.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;fromDate&#x60;) и конечной датой должно быть не больше 30 дней.  Значение по умолчанию: текущая дата. </param>
        /// <param name="supplierShipmentDateFrom">Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной и конечной датой (параметр &#x60;supplierShipmentDateTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. </param>
        /// <param name="supplierShipmentDateTo">Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Между начальной (параметр &#x60;supplierShipmentDateFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. </param>
        /// <param name="updatedAtFrom">Начальная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной и конечной датой (параметр &#x60;updatedAtTo&#x60;) должно быть не больше 30 дней.  Начальная дата включается в интервал для фильтрации. </param>
        /// <param name="updatedAtTo">Конечная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.  Между начальной (параметр &#x60;updatedAtFrom&#x60;) и конечной датой должно быть не больше 30 дней.  Конечная дата не включается в интервал для фильтрации. </param>
        /// <param name="dispatchType">Способ отгрузки</param>
        /// <param name="fake">Фильтрация заказов по типам:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. </param>
        /// <param name="hasCis">Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да.  * &#x60;false&#x60; — нет.  Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. </param>
        /// <param name="onlyWaitingForCancellationApprove">**Только для модели DBS**  Фильтрация заказов по наличию запросов покупателей на отмену.  При значение &#x60;true&#x60; возвращаются только заказы, которые находятся в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60; и которые пользователи решили отменить.  Чтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation). </param>
        /// <param name="onlyEstimatedDelivery">Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:  * &#x60;true&#x60; — возвращаются только заказы с неподтвержденной датой доставки. * &#x60;false&#x60; — фильтрация не применяется. </param>
        /// <param name="buyerType">Фильтрация заказов по типу покупателя. </param>
        /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;. </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <response code="200">Информация о заказах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpGet]
        [Route("/campaigns/{campaignId}/orders")]
        [ValidateModelState]
        [SwaggerOperation("GetOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOrdersResponse), description: "Информация о заказах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOrders([FromRoute (Name = "campaignId")][Required]long campaignId, [FromQuery (Name = "orderIds")]List<long> orderIds, [FromQuery (Name = "status")]List<OrderStatusType> status, [FromQuery (Name = "substatus")]List<OrderSubstatusType> substatus, [FromQuery (Name = "fromDate")]DateOnly? fromDate, [FromQuery (Name = "toDate")]DateOnly? toDate, [FromQuery (Name = "supplierShipmentDateFrom")]DateOnly? supplierShipmentDateFrom, [FromQuery (Name = "supplierShipmentDateTo")]DateOnly? supplierShipmentDateTo, [FromQuery (Name = "updatedAtFrom")]DateTime? updatedAtFrom, [FromQuery (Name = "updatedAtTo")]DateTime? updatedAtTo, [FromQuery (Name = "dispatchType")]OrderDeliveryDispatchType? dispatchType, [FromQuery (Name = "fake")]bool? fake, [FromQuery (Name = "hasCis")]bool? hasCis, [FromQuery (Name = "onlyWaitingForCancellationApprove")]bool? onlyWaitingForCancellationApprove, [FromQuery (Name = "onlyEstimatedDelivery")]bool? onlyEstimatedDelivery, [FromQuery (Name = "buyerType")]OrderBuyerType? buyerType, [FromQuery (Name = "page")]int? page, [FromQuery (Name = "pageSize")]int? pageSize, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOrdersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"pager\" : {\n    \"total\" : 1,\n    \"pagesCount\" : 7,\n    \"pageSize\" : 9,\n    \"from\" : 5,\n    \"to\" : 5,\n    \"currentPage\" : 2\n  },\n  \"orders\" : [ {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }, {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  } ],\n  \"paging\" : {\n    \"nextPageToken\" : \"nextPageToken\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOrdersResponse>(exampleJson)
            : default(GetOrdersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача ключей цифровых товаров
        /// </summary>
        /// <remarks>Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус &#x60;DELIVERED&#x60;.  Ключ нужно передать в течение 30 минут после перехода заказа в статус &#x60;PROCESSING&#x60;.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="provideOrderDigitalCodesRequest"></param>
        /// <response code="200">Пустой ответ.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProvideOrderDigitalCodes")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmptyApiResponse), description: "Пустой ответ.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ProvideOrderDigitalCodes([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]ProvideOrderDigitalCodesRequest provideOrderDigitalCodesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmptyApiResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmptyApiResponse>(exampleJson)
            : default(EmptyApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача кодов маркировки единиц товара
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="provideOrderItemIdentifiersRequest"></param>
        /// <response code="200">Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/identifiers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ProvideOrderItemIdentifiers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProvideOrderItemIdentifiersResponse), description: "Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult ProvideOrderItemIdentifiers([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]ProvideOrderItemIdentifiersRequest provideOrderItemIdentifiersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProvideOrderItemIdentifiersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"price\" : 1.4658129805029452,\n      \"vat\" : \"NO_VAT\",\n      \"count\" : 6,\n      \"offerId\" : \"offerId\",\n      \"id\" : 0\n    }, {\n      \"offerName\" : \"offerName\",\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"price\" : 1.4658129805029452,\n      \"vat\" : \"NO_VAT\",\n      \"count\" : 6,\n      \"offerId\" : \"offerId\",\n      \"id\" : 0\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProvideOrderItemIdentifiersResponse>(exampleJson)
            : default(ProvideOrderItemIdentifiersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Подготовка заказа
        /// </summary>
        /// <remarks>{% note tip \&quot;Подходит и для DBS\&quot; %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос &#x60;allowRemove: true&#x60;. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \&quot;Удаление нельзя отменить\&quot; %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \&quot;Товар умещается в коробку\&quot; %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;fullCount\&quot;: 3,                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478gftJ14545762!\\u001dhGt264\&quot;                           },                           {                               \&quot;cis\&quot;: \&quot;010304109478fRs28323ks23!\\u001dhet201\&quot;                           }                       ]                   },                   {                       \&quot;id\&quot;: 654321,                       \&quot;fullCount\&quot;: 1                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Товар едет в разных коробках\&quot; %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  {% cut \&quot;Одинаковые товары, где каждый едет в нескольких коробках\&quot; %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    &#x60;&#x60;&#x60;json   {       \&quot;boxes\&quot;: [           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 1,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           },           {               \&quot;items\&quot;: [                   {                       \&quot;id\&quot;: 123456,                       \&quot;partialCount\&quot;: {                           \&quot;current\&quot;: 2,                           \&quot;total\&quot;: 2                       },                       \&quot;instances\&quot;: [                           {                               \&quot;cis\&quot;: \&quot;01030410947874432155Qbag!\\u001d93Zjqw\&quot;                           }                       ]                   }               ]           }       ]   }   &#x60;&#x60;&#x60;  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="setOrderBoxLayoutRequest"></param>
        /// <response code="200">В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/boxes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetOrderBoxLayout")]
        [SwaggerResponse(statusCode: 200, type: typeof(SetOrderBoxLayoutResponse), description: "В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetOrderBoxLayout([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]SetOrderBoxLayoutRequest setOrderBoxLayoutRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SetOrderBoxLayoutResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"boxes\" : [ {\n      \"items\" : [ {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      }, {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      } ],\n      \"boxId\" : 5\n    }, {\n      \"items\" : [ {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      }, {\n        \"partialCount\" : {\n          \"current\" : 1,\n          \"total\" : 2\n        },\n        \"instances\" : [ {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        }, {\n          \"rnpt\" : \"rnpt\",\n          \"gtd\" : \"gtd\",\n          \"uin\" : \"uin\",\n          \"cis\" : \"cis\"\n        } ],\n        \"id\" : 0,\n        \"fullCount\" : 1\n      } ],\n      \"boxId\" : 5\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SetOrderBoxLayoutResponse>(exampleJson)
            : default(SetOrderBoxLayoutResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Передача количества грузовых мест в заказе
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \&quot;Как было раньше\&quot; %}  Структура тела PUT-запроса:  &#x60;&#x60;&#x60; {   \&quot;boxes\&quot;:   [     {       \&quot;fulfilmentId\&quot;: \&quot;{string}\&quot;,       \&quot;weight\&quot;: {int64},       \&quot;width\&quot;: {int64},       \&quot;height\&quot;: {int64},       \&quot;depth\&quot;: {int64},       \&quot;items\&quot;:       [         {           \&quot;id\&quot;: {int64},           \&quot;count\&quot;: {int32}         },         ...       ]     },     ...   ] } &#x60;&#x60;&#x60; | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;boxes&#x60;       |           | Список грузовых мест.       |  **Параметры, вложенные в &#x60;boxes&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. | | &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       | | &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       | | &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        | | &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в &#x60;items&#x60;** | **Параметр**  | **Тип**  | **Значение**  | | - -- -- -- -- -- | - -- -- -- -- -- | - -- -- -- -- -- | | &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   | | &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="shipmentId">Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL. </param>
        /// <param name="setOrderShipmentBoxesRequest"></param>
        /// <response code="200">Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetOrderShipmentBoxes")]
        [SwaggerResponse(statusCode: 200, type: typeof(SetOrderShipmentBoxesResponse), description: "Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult SetOrderShipmentBoxes([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromRoute (Name = "shipmentId")][Required]long shipmentId, [FromBody]SetOrderShipmentBoxesRequest setOrderShipmentBoxesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SetOrderShipmentBoxesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"boxes\" : [ {\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"id\" : 0\n    }, {\n      \"fulfilmentId\" : \"fulfilmentId\",\n      \"id\" : 0\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SetOrderShipmentBoxesResponse>(exampleJson)
            : default(SetOrderShipmentBoxesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товара из заказа или уменьшение числа единиц
        /// </summary>
        /// <remarks>{% note warning \&quot;Этот запрос только для DBS\&quot; %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60;. После передачи статуса &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.  Чтобы полностью удалить товар из заказа:  * передайте значение &#x60;0&#x60;; или * не передавайте параметр &#x60;item&#x60;.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.  {% note info \&quot;Увеличить заказ нельзя\&quot; %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="updateOrderItemRequest"></param>
        /// <response code="200">Маркет успешно обработал ваш запрос. Выходные данные не ожидаются.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/items")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderItems")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderItems([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]UpdateOrderItemRequest updateOrderItemRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Изменение статуса одного заказа
        /// </summary>
        /// <remarks>Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="orderId">Идентификатор заказа.</param>
        /// <param name="updateOrderStatusRequest"></param>
        /// <response code="200">В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPut]
        [Route("/campaigns/{campaignId}/orders/{orderId}/status")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOrderStatusResponse), description: "В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderStatus([FromRoute (Name = "campaignId")][Required]long campaignId, [FromRoute (Name = "orderId")][Required]long orderId, [FromBody]UpdateOrderStatusRequest updateOrderStatusRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOrderStatusResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"order\" : {\n    \"delivery\" : {\n      \"dispatchType\" : \"UNKNOWN\",\n      \"address\" : {\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"postcode\" : \"postcode\",\n        \"gps\" : {\n          \"latitude\" : 9.965781217890562,\n          \"longitude\" : 9.369310271410669\n        },\n        \"house\" : \"house\",\n        \"subway\" : \"subway\",\n        \"phone\" : \"phone\",\n        \"street\" : \"street\",\n        \"district\" : \"district\",\n        \"recipient\" : \"recipient\",\n        \"entryphone\" : \"entryphone\",\n        \"block\" : \"block\",\n        \"entrance\" : \"entrance\",\n        \"floor\" : \"floor\",\n        \"apartment\" : \"apartment\"\n      },\n      \"liftType\" : \"NOT_NEEDED\",\n      \"deliveryServiceId\" : 6,\n      \"estimated\" : true,\n      \"dates\" : {\n        \"fromDate\" : \"23-09-2022\",\n        \"toDate\" : \"23-09-2022\",\n        \"fromTime\" : \"fromTime\",\n        \"toTime\" : \"toTime\",\n        \"realDeliveryDate\" : \"23-09-2022\"\n      },\n      \"type\" : \"DELIVERY\",\n      \"serviceName\" : \"serviceName\",\n      \"shipments\" : [ {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      }, {\n        \"boxes\" : [ {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        }, {\n          \"fulfilmentId\" : \"fulfilmentId\",\n          \"id\" : 3\n        } ],\n        \"id\" : 6,\n        \"shipmentDate\" : \"23-09-2022\",\n        \"shipmentTime\" : \"shipmentTime\",\n        \"tracks\" : [ {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        }, {\n          \"trackCode\" : \"trackCode\",\n          \"deliveryServiceId\" : 9\n        } ]\n      } ],\n      \"tracks\" : [ {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      }, {\n        \"trackCode\" : \"trackCode\",\n        \"deliveryServiceId\" : 9\n      } ],\n      \"courier\" : {\n        \"vehicleDescription\" : \"vehicleDescription\",\n        \"phone\" : \"phone\",\n        \"phoneExtension\" : \"phoneExtension\",\n        \"fullName\" : \"fullName\",\n        \"vehicleNumber\" : \"vehicleNumber\"\n      },\n      \"price\" : 5.025004791520295,\n      \"outletStorageLimitDate\" : \"23-09-2022\",\n      \"eacType\" : \"MERCHANT_TO_COURIER\",\n      \"liftPrice\" : 8.762042012749001,\n      \"eacCode\" : \"eacCode\",\n      \"id\" : \"id\",\n      \"region\" : {\n        \"children\" : [ null, null ],\n        \"name\" : \"name\",\n        \"id\" : 0,\n        \"type\" : \"OTHER\"\n      },\n      \"deliveryPartnerType\" : \"SHOP\",\n      \"outletCode\" : \"outletCode\"\n    },\n    \"notes\" : \"notes\",\n    \"substatus\" : \"RESERVATION_EXPIRED\",\n    \"deliveryTotal\" : 1.4658129805029452,\n    \"buyerItemsTotalBeforeDiscount\" : 2.3021358869347655,\n    \"creationDate\" : \"23-09-2022 09:12:41\",\n    \"buyerItemsTotal\" : 5.962133916683182,\n    \"paymentType\" : \"PREPAID\",\n    \"buyer\" : {\n      \"lastName\" : \"lastName\",\n      \"firstName\" : \"firstName\",\n      \"middleName\" : \"middleName\",\n      \"id\" : \"id\",\n      \"type\" : \"PERSON\"\n    },\n    \"expiryDate\" : \"23-09-2022 09:12:41\",\n    \"buyerTotalBeforeDiscount\" : 7.061401241503109,\n    \"itemsTotal\" : 6.027456183070403,\n    \"buyerTotal\" : 5.637376656633329,\n    \"subsidies\" : [ {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    }, {\n      \"amount\" : 4.965218492984954,\n      \"type\" : \"YANDEX_CASHBACK\"\n    } ],\n    \"paymentMethod\" : \"CASH_ON_DELIVERY\",\n    \"currency\" : \"RUR\",\n    \"fake\" : true,\n    \"id\" : 0,\n    \"taxSystem\" : \"OSN\",\n    \"cancelRequested\" : true,\n    \"items\" : [ {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    }, {\n      \"offerName\" : \"offerName\",\n      \"subsidy\" : 1.0246457001441578,\n      \"instances\" : [ {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      }, {\n        \"rnpt\" : \"rnpt\",\n        \"gtd\" : \"gtd\",\n        \"cisFull\" : \"cisFull\",\n        \"uin\" : \"uin\",\n        \"cis\" : \"cis\"\n      } ],\n      \"priceBeforeDiscount\" : 7.386281948385884,\n      \"count\" : 1,\n      \"vat\" : \"NO_VAT\",\n      \"requiredInstanceTypes\" : [ \"CIS\", \"CIS\" ],\n      \"buyerPriceBeforeDiscount\" : 4.145608029883936,\n      \"shopSku\" : \"shopSku\",\n      \"price\" : 3.616076749251911,\n      \"partnerWarehouseId\" : \"partnerWarehouseId\",\n      \"subsidies\" : [ {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      }, {\n        \"amount\" : 1.1730742509559433,\n        \"type\" : \"YANDEX_CASHBACK\"\n      } ],\n      \"offerId\" : \"offerId\",\n      \"buyerPrice\" : 2.027123023002322,\n      \"details\" : [ {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      }, {\n        \"updateDate\" : \"23-09-2022\",\n        \"itemStatus\" : \"REJECTED\",\n        \"itemCount\" : 7\n      } ],\n      \"id\" : 9,\n      \"promos\" : [ {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      }, {\n        \"subsidy\" : 6.84685269835264,\n        \"shopPromoId\" : \"shopPromoId\",\n        \"discount\" : 1.4894159098541704,\n        \"marketPromoId\" : \"marketPromoId\",\n        \"type\" : \"DIRECT_DISCOUNT\"\n      } ]\n    } ],\n    \"status\" : \"PLACING\",\n    \"updatedAt\" : \"23-09-2022 09:12:41\"\n  }\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOrderStatusResponse>(exampleJson)
            : default(UpdateOrderStatusResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Изменение статусов нескольких заказов
        /// </summary>
        /// <remarks>Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60;и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этап обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60;. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;STARTED\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;\&quot;status\&quot;: \&quot;PROCESSING\&quot;&#x60; и этапа обработки &#x60;\&quot;substatus\&quot;: \&quot;READY_TO_SHIP\&quot;&#x60; нужно перевести в статус &#x60;\&quot;status\&quot;: \&quot;CANCELLED\&quot;&#x60; с причиной отмены заказа &#x60;\&quot;substatus\&quot;: \&quot;SHOP_FAILED\&quot;&#x60;.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| </remarks>
        /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOrderStatusesRequest"></param>
        /// <response code="200">Возвращается информация об обновленных статусах заказов.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/campaigns/{campaignId}/orders/status-update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrderStatuses")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOrderStatusesResponse), description: "Возвращается информация об обновленных статусах заказов.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOrderStatuses([FromRoute (Name = "campaignId")][Required]long campaignId, [FromBody]UpdateOrderStatusesRequest updateOrderStatusesRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOrderStatusesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"orders\" : [ {\n      \"substatus\" : \"RESERVATION_EXPIRED\",\n      \"updateStatus\" : \"OK\",\n      \"id\" : 0,\n      \"status\" : \"PLACING\",\n      \"errorDetails\" : \"errorDetails\"\n    }, {\n      \"substatus\" : \"RESERVATION_EXPIRED\",\n      \"updateStatus\" : \"OK\",\n      \"id\" : 0,\n      \"status\" : \"PLACING\",\n      \"errorDetails\" : \"errorDetails\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOrderStatusesResponse>(exampleJson)
            : default(UpdateOrderStatusesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
