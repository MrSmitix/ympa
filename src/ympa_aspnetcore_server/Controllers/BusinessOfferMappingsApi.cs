/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using ympa_aspnetcore_server.Attributes;
using ympa_aspnetcore_server.Models;

namespace ympa_aspnetcore_server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BusinessOfferMappingsApiController : ControllerBase
    { 
        /// <summary>
        /// Добавление товаров в архив
        /// </summary>
        /// <remarks>Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="addOffersToArchiveRequest"></param>
        /// <response code="200">Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/archive")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddOffersToArchive")]
        [SwaggerResponse(statusCode: 200, type: typeof(AddOffersToArchiveResponse), description: "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult AddOffersToArchive([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]AddOffersToArchiveRequest addOffersToArchiveRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AddOffersToArchiveResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notArchivedOffers\" : [ {\n      \"offerId\" : \"offerId\",\n      \"error\" : \"OFFER_HAS_STOCKS\"\n    }, {\n      \"offerId\" : \"offerId\",\n      \"error\" : \"OFFER_HAS_STOCKS\"\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AddOffersToArchiveResponse>(exampleJson)
            : default(AddOffersToArchiveResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из каталога
        /// </summary>
        /// <remarks>Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteOffersRequest"></param>
        /// <response code="200">Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteOffers")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteOffersResponse), description: "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteOffers([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeleteOffersRequest deleteOffersRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteOffersResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notDeletedOfferIds\" : [ null, null ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteOffersResponse>(exampleJson)
            : default(DeleteOffersResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Удаление товаров из архива
        /// </summary>
        /// <remarks>Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="deleteOffersFromArchiveRequest"></param>
        /// <response code="200">Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/unarchive")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteOffersFromArchive")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeleteOffersFromArchiveResponse), description: "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult DeleteOffersFromArchive([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]DeleteOffersFromArchiveRequest deleteOffersFromArchiveRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeleteOffersFromArchiveResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"notUnarchivedOfferIds\" : [ null, null ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeleteOffersFromArchiveResponse>(exampleJson)
            : default(DeleteOffersFromArchiveResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Информация о товарах в каталоге
        /// </summary>
        /// <remarks>Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. </param>
        /// <param name="limit">Количество значений на одной странице. </param>
        /// <param name="getOfferMappingsRequest"></param>
        /// <response code="200">Информация о товарах в каталоге.</response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetOfferMappingsResponse), description: "Информация о товарах в каталоге.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromQuery (Name = "page_token")]string pageToken, [FromQuery (Name = "limit")]int? limit, [FromBody]GetOfferMappingsRequest getOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"paging\" : {\n      \"prevPageToken\" : \"prevPageToken\",\n      \"nextPageToken\" : \"nextPageToken\"\n    },\n    \"offerMappings\" : [ {\n      \"offer\" : {\n        \"downloadable\" : true,\n        \"sellingPrograms\" : [ {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        }, {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        } ],\n        \"marketCategoryId\" : 0,\n        \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ],\n        \"description\" : \"description\",\n        \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ],\n        \"purchasePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"type\" : \"DEFAULT\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"archived\" : true,\n        \"campaigns\" : [ {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        }, {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        } ],\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"discountBase\" : 0.23021358869347652,\n          \"currencyId\" : \"RUR\",\n          \"value\" : 0.5637376656633328,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"params\" : [ {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        }, {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        } ],\n        \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ],\n        \"condition\" : {\n          \"reason\" : \"reason\",\n          \"type\" : \"PREOWNED\",\n          \"quality\" : \"PERFECT\"\n        },\n        \"certificates\" : [ \"certificates\", \"certificates\" ],\n        \"boxCount\" : 1,\n        \"additionalExpenses\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"customsCommodityCode\" : \"8517610008\",\n        \"adult\" : true,\n        \"age\" : {\n          \"ageUnit\" : \"YEAR\",\n          \"value\" : 0.5962133916683182\n        },\n        \"manuals\" : [ {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        } ]\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    }, {\n      \"offer\" : {\n        \"downloadable\" : true,\n        \"sellingPrograms\" : [ {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        }, {\n          \"sellingProgram\" : \"FBY\",\n          \"status\" : \"FINE\"\n        } ],\n        \"marketCategoryId\" : 0,\n        \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ],\n        \"description\" : \"description\",\n        \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ],\n        \"purchasePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"type\" : \"DEFAULT\",\n        \"pictures\" : [ \"pictures\", \"pictures\" ],\n        \"vendorCode\" : \"VNDR-0005A\",\n        \"archived\" : true,\n        \"campaigns\" : [ {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        }, {\n          \"campaignId\" : 9,\n          \"status\" : \"PUBLISHED\"\n        } ],\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"discountBase\" : 0.23021358869347652,\n          \"currencyId\" : \"RUR\",\n          \"value\" : 0.5637376656633328,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"lifeTime\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"shelfLife\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"cofinancePrice\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"params\" : [ {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        }, {\n          \"name\" : \"Wi-Fi\",\n          \"value\" : \"есть\"\n        } ],\n        \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ],\n        \"condition\" : {\n          \"reason\" : \"reason\",\n          \"type\" : \"PREOWNED\",\n          \"quality\" : \"PERFECT\"\n        },\n        \"certificates\" : [ \"certificates\", \"certificates\" ],\n        \"boxCount\" : 1,\n        \"additionalExpenses\" : {\n          \"value\" : 0.7061401241503109,\n          \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"guaranteePeriod\" : {\n          \"timePeriod\" : 6,\n          \"comment\" : \"comment\",\n          \"timeUnit\" : \"HOUR\"\n        },\n        \"weightDimensions\" : {\n          \"length\" : 65.55,\n          \"width\" : 50.7,\n          \"weight\" : 1.001,\n          \"height\" : 20\n        },\n        \"category\" : \"category\",\n        \"customsCommodityCode\" : \"8517610008\",\n        \"adult\" : true,\n        \"age\" : {\n          \"ageUnit\" : \"YEAR\",\n          \"value\" : 0.5962133916683182\n        },\n        \"manuals\" : [ {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        }, {\n          \"title\" : \"title\",\n          \"url\" : \"url\"\n        } ]\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetOfferMappingsResponse>(exampleJson)
            : default(GetOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Просмотр карточек на Маркете, которые подходят вашим товарам
        /// </summary>
        /// <remarks>Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product- -yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="getSuggestedOfferMappingsRequest"></param>
        /// <response code="200">Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/suggestions")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetSuggestedOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(GetSuggestedOfferMappingsResponse), description: "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult GetSuggestedOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]GetSuggestedOfferMappingsRequest getSuggestedOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GetSuggestedOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : {\n    \"offers\" : [ {\n      \"offer\" : {\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"description\" : \"description\",\n        \"category\" : \"category\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"vendorCode\" : \"VNDR-0005A\"\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    }, {\n      \"offer\" : {\n        \"vendor\" : \"LEVENHUK\",\n        \"basicPrice\" : {\n          \"value\" : 0.9301444243932576\n        },\n        \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\",\n        \"offerId\" : \"offerId\",\n        \"description\" : \"description\",\n        \"category\" : \"category\",\n        \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ],\n        \"vendorCode\" : \"VNDR-0005A\"\n      },\n      \"mapping\" : {\n        \"marketSkuName\" : \"marketSkuName\",\n        \"marketCategoryName\" : \"marketCategoryName\",\n        \"marketCategoryId\" : 4,\n        \"marketSku\" : 3,\n        \"marketModelId\" : 2,\n        \"marketModelName\" : \"marketModelName\"\n      }\n    } ]\n  },\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GetSuggestedOfferMappingsResponse>(exampleJson)
            : default(GetSuggestedOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Добавление товаров в каталог и изменение информации о них
        /// </summary>
        /// <remarks>Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| </remarks>
        /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
        /// <param name="updateOfferMappingsRequest"></param>
        /// <response code="200">Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. </response>
        /// <response code="400">Запрос содержит неправильные данные.</response>
        /// <response code="401">В запросе не указаны данные для авторизации.</response>
        /// <response code="403">Данные для авторизации неверны или доступ к ресурсу запрещен.</response>
        /// <response code="404">Запрашиваемый ресурс не найден.</response>
        /// <response code="420">Превышено ограничение на доступ к ресурсу.</response>
        /// <response code="423">К ресурсу нельзя применить указанный метод.</response>
        /// <response code="500">Внутренняя ошибка сервера.</response>
        [HttpPost]
        [Route("/businesses/{businessId}/offer-mappings/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOfferMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(UpdateOfferMappingsResponse), description: "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiClientDataErrorResponse), description: "Запрос содержит неправильные данные.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiUnauthorizedErrorResponse), description: "В запросе не указаны данные для авторизации.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiForbiddenErrorResponse), description: "Данные для авторизации неверны или доступ к ресурсу запрещен.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiNotFoundErrorResponse), description: "Запрашиваемый ресурс не найден.")]
        [SwaggerResponse(statusCode: 420, type: typeof(ApiLimitErrorResponse), description: "Превышено ограничение на доступ к ресурсу.")]
        [SwaggerResponse(statusCode: 423, type: typeof(ApiLockedErrorResponse), description: "К ресурсу нельзя применить указанный метод.")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiServerErrorResponse), description: "Внутренняя ошибка сервера.")]
        public virtual IActionResult UpdateOfferMappings([FromRoute (Name = "businessId")][Required]long businessId, [FromBody]UpdateOfferMappingsRequest updateOfferMappingsRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UpdateOfferMappingsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiClientDataErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiUnauthorizedErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiForbiddenErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiNotFoundErrorResponse));
            //TODO: Uncomment the next line to return response 420 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(420, default(ApiLimitErrorResponse));
            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423, default(ApiLockedErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ApiServerErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ]\n  }, {\n    \"warnings\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ],\n    \"offerId\" : \"offerId\",\n    \"errors\" : [ {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    }, {\n      \"parameterId\" : 0,\n      \"type\" : \"UNKNOWN_CATEGORY\",\n      \"message\" : \"message\"\n    } ]\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            exampleJson = "{\n  \"errors\" : [ {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  }, {\n    \"code\" : \"code\",\n    \"message\" : \"message\"\n  } ],\n  \"status\" : \"OK\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UpdateOfferMappingsResponse>(exampleJson)
            : default(UpdateOfferMappingsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
