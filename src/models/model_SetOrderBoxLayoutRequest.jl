# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SetOrderBoxLayoutRequest

    SetOrderBoxLayoutRequest(;
        boxes=nothing,
        allowRemove=false,
    )

    - boxes::Vector{OrderBoxLayoutDTO} : Список коробок.
    - allowRemove::Bool : Передайте &#x60;true&#x60;, если вы собираетесь удалить часть товаров из заказа.
"""
Base.@kwdef mutable struct SetOrderBoxLayoutRequest <: OpenAPI.APIModel
    boxes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderBoxLayoutDTO} }
    allowRemove::Union{Nothing, Bool} = false

    function SetOrderBoxLayoutRequest(boxes, allowRemove, )
        OpenAPI.validate_property(SetOrderBoxLayoutRequest, Symbol("boxes"), boxes)
        OpenAPI.validate_property(SetOrderBoxLayoutRequest, Symbol("allowRemove"), allowRemove)
        return new(boxes, allowRemove, )
    end
end # type SetOrderBoxLayoutRequest

const _property_types_SetOrderBoxLayoutRequest = Dict{Symbol,String}(Symbol("boxes")=>"Vector{OrderBoxLayoutDTO}", Symbol("allowRemove")=>"Bool", )
OpenAPI.property_type(::Type{ SetOrderBoxLayoutRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SetOrderBoxLayoutRequest[name]))}

function check_required(o::SetOrderBoxLayoutRequest)
    o.boxes === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SetOrderBoxLayoutRequest }, name::Symbol, val)
    if name === Symbol("boxes")
        OpenAPI.validate_param(name, "SetOrderBoxLayoutRequest", :minItems, val, 1)
    end
end
