# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryContentParametersDTO
Информация о параметрах категории.

    CategoryContentParametersDTO(;
        categoryId=nothing,
        parameters=nothing,
    )

    - categoryId::Int64 : Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
    - parameters::Vector{CategoryParameterDTO} : Список характеристик.
"""
Base.@kwdef mutable struct CategoryContentParametersDTO <: OpenAPI.APIModel
    categoryId::Union{Nothing, Int64} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CategoryParameterDTO} }

    function CategoryContentParametersDTO(categoryId, parameters, )
        OpenAPI.validate_property(CategoryContentParametersDTO, Symbol("categoryId"), categoryId)
        OpenAPI.validate_property(CategoryContentParametersDTO, Symbol("parameters"), parameters)
        return new(categoryId, parameters, )
    end
end # type CategoryContentParametersDTO

const _property_types_CategoryContentParametersDTO = Dict{Symbol,String}(Symbol("categoryId")=>"Int64", Symbol("parameters")=>"Vector{CategoryParameterDTO}", )
OpenAPI.property_type(::Type{ CategoryContentParametersDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryContentParametersDTO[name]))}

function check_required(o::CategoryContentParametersDTO)
    o.categoryId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryContentParametersDTO }, name::Symbol, val)
    if name === Symbol("categoryId")
        OpenAPI.validate_param(name, "CategoryContentParametersDTO", :format, val, "int32")
    end
end
