# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsFeedbackDTO
Отзыв о товаре.

    GoodsFeedbackDTO(;
        feedbackId=nothing,
        createdAt=nothing,
        needReaction=nothing,
        identifiers=nothing,
        author=nothing,
        description=nothing,
        media=nothing,
        statistics=nothing,
    )

    - feedbackId::Int64 : Идентификатор отзыва. 
    - createdAt::ZonedDateTime : Дата и время создания отзыва.
    - needReaction::Bool : Нужен ли ответ на отзыв.
    - identifiers::GoodsFeedbackIdentifiersDTO
    - author::String : Имя автора отзыва.
    - description::GoodsFeedbackDescriptionDTO
    - media::GoodsFeedbackMediaDTO
    - statistics::GoodsFeedbackStatisticsDTO
"""
Base.@kwdef mutable struct GoodsFeedbackDTO <: OpenAPI.APIModel
    feedbackId::Union{Nothing, Int64} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    needReaction::Union{Nothing, Bool} = nothing
    identifiers = nothing # spec type: Union{ Nothing, GoodsFeedbackIdentifiersDTO }
    author::Union{Nothing, String} = nothing
    description = nothing # spec type: Union{ Nothing, GoodsFeedbackDescriptionDTO }
    media = nothing # spec type: Union{ Nothing, GoodsFeedbackMediaDTO }
    statistics = nothing # spec type: Union{ Nothing, GoodsFeedbackStatisticsDTO }

    function GoodsFeedbackDTO(feedbackId, createdAt, needReaction, identifiers, author, description, media, statistics, )
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("feedbackId"), feedbackId)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("needReaction"), needReaction)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("identifiers"), identifiers)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("author"), author)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("description"), description)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("media"), media)
        OpenAPI.validate_property(GoodsFeedbackDTO, Symbol("statistics"), statistics)
        return new(feedbackId, createdAt, needReaction, identifiers, author, description, media, statistics, )
    end
end # type GoodsFeedbackDTO

const _property_types_GoodsFeedbackDTO = Dict{Symbol,String}(Symbol("feedbackId")=>"Int64", Symbol("createdAt")=>"ZonedDateTime", Symbol("needReaction")=>"Bool", Symbol("identifiers")=>"GoodsFeedbackIdentifiersDTO", Symbol("author")=>"String", Symbol("description")=>"GoodsFeedbackDescriptionDTO", Symbol("media")=>"GoodsFeedbackMediaDTO", Symbol("statistics")=>"GoodsFeedbackStatisticsDTO", )
OpenAPI.property_type(::Type{ GoodsFeedbackDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsFeedbackDTO[name]))}

function check_required(o::GoodsFeedbackDTO)
    o.feedbackId === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.needReaction === nothing && (return false)
    o.identifiers === nothing && (return false)
    o.statistics === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GoodsFeedbackDTO }, name::Symbol, val)
    if name === Symbol("feedbackId")
        OpenAPI.validate_param(name, "GoodsFeedbackDTO", :format, val, "int64")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "GoodsFeedbackDTO", :format, val, "date-time")
    end
end
