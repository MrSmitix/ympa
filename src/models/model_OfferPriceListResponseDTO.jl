# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferPriceListResponseDTO
Список цен на товары.

    OfferPriceListResponseDTO(;
        offers=nothing,
        paging=nothing,
        total=nothing,
    )

    - offers::Vector{OfferPriceResponseDTO} : Страница списка.
    - paging::ScrollingPagerDTO
    - total::Int64 : Количество всех цен магазина, измененных через API.
"""
Base.@kwdef mutable struct OfferPriceListResponseDTO <: OpenAPI.APIModel
    offers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferPriceResponseDTO} }
    paging = nothing # spec type: Union{ Nothing, ScrollingPagerDTO }
    total::Union{Nothing, Int64} = nothing

    function OfferPriceListResponseDTO(offers, paging, total, )
        OpenAPI.validate_property(OfferPriceListResponseDTO, Symbol("offers"), offers)
        OpenAPI.validate_property(OfferPriceListResponseDTO, Symbol("paging"), paging)
        OpenAPI.validate_property(OfferPriceListResponseDTO, Symbol("total"), total)
        return new(offers, paging, total, )
    end
end # type OfferPriceListResponseDTO

const _property_types_OfferPriceListResponseDTO = Dict{Symbol,String}(Symbol("offers")=>"Vector{OfferPriceResponseDTO}", Symbol("paging")=>"ScrollingPagerDTO", Symbol("total")=>"Int64", )
OpenAPI.property_type(::Type{ OfferPriceListResponseDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferPriceListResponseDTO[name]))}

function check_required(o::OfferPriceListResponseDTO)
    o.offers === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferPriceListResponseDTO }, name::Symbol, val)
    if name === Symbol("total")
        OpenAPI.validate_param(name, "OfferPriceListResponseDTO", :format, val, "int32")
    end
end
