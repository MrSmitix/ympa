# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PriceCompetitivenessThresholdsDTO
Максимальные значения цены, при которых она является привлекательной или умеренной.

    PriceCompetitivenessThresholdsDTO(;
        optimalPrice=nothing,
        averagePrice=nothing,
    )

    - optimalPrice::BasePriceDTO
    - averagePrice::BasePriceDTO
"""
Base.@kwdef mutable struct PriceCompetitivenessThresholdsDTO <: OpenAPI.APIModel
    optimalPrice = nothing # spec type: Union{ Nothing, BasePriceDTO }
    averagePrice = nothing # spec type: Union{ Nothing, BasePriceDTO }

    function PriceCompetitivenessThresholdsDTO(optimalPrice, averagePrice, )
        OpenAPI.validate_property(PriceCompetitivenessThresholdsDTO, Symbol("optimalPrice"), optimalPrice)
        OpenAPI.validate_property(PriceCompetitivenessThresholdsDTO, Symbol("averagePrice"), averagePrice)
        return new(optimalPrice, averagePrice, )
    end
end # type PriceCompetitivenessThresholdsDTO

const _property_types_PriceCompetitivenessThresholdsDTO = Dict{Symbol,String}(Symbol("optimalPrice")=>"BasePriceDTO", Symbol("averagePrice")=>"BasePriceDTO", )
OpenAPI.property_type(::Type{ PriceCompetitivenessThresholdsDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PriceCompetitivenessThresholdsDTO[name]))}

function check_required(o::PriceCompetitivenessThresholdsDTO)
    true
end

function OpenAPI.validate_property(::Type{ PriceCompetitivenessThresholdsDTO }, name::Symbol, val)
end
