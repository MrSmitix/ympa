# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelOfferDTO
Информация о предложении.

    ModelOfferDTO(;
        discount=nothing,
        name=nothing,
        pos=nothing,
        preDiscountPrice=nothing,
        price=nothing,
        regionId=nothing,
        shippingCost=nothing,
        shopName=nothing,
        shopRating=nothing,
        inStock=nothing,
    )

    - discount::Int64 : Скидка на предложение в процентах.
    - name::String : Наименование предложения.
    - pos::Int64 : Позиция предложения в выдаче Маркета на карточке модели.
    - preDiscountPrice::Float64 : Цена предложения без скидки магазина.
    - price::Float64 : Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
    - regionId::Int64 : Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
    - shippingCost::Float64 : Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
    - shopName::String : Название магазина (в том виде, в котором отображается на Маркете).
    - shopRating::Int64 : Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
    - inStock::Int64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
"""
Base.@kwdef mutable struct ModelOfferDTO <: OpenAPI.APIModel
    discount::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    pos::Union{Nothing, Int64} = nothing
    preDiscountPrice::Union{Nothing, Float64} = nothing
    price::Union{Nothing, Float64} = nothing
    regionId::Union{Nothing, Int64} = nothing
    shippingCost::Union{Nothing, Float64} = nothing
    shopName::Union{Nothing, String} = nothing
    shopRating::Union{Nothing, Int64} = nothing
    inStock::Union{Nothing, Int64} = nothing

    function ModelOfferDTO(discount, name, pos, preDiscountPrice, price, regionId, shippingCost, shopName, shopRating, inStock, )
        OpenAPI.validate_property(ModelOfferDTO, Symbol("discount"), discount)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("name"), name)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("pos"), pos)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("preDiscountPrice"), preDiscountPrice)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("price"), price)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("regionId"), regionId)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("shippingCost"), shippingCost)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("shopName"), shopName)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("shopRating"), shopRating)
        OpenAPI.validate_property(ModelOfferDTO, Symbol("inStock"), inStock)
        return new(discount, name, pos, preDiscountPrice, price, regionId, shippingCost, shopName, shopRating, inStock, )
    end
end # type ModelOfferDTO

const _property_types_ModelOfferDTO = Dict{Symbol,String}(Symbol("discount")=>"Int64", Symbol("name")=>"String", Symbol("pos")=>"Int64", Symbol("preDiscountPrice")=>"Float64", Symbol("price")=>"Float64", Symbol("regionId")=>"Int64", Symbol("shippingCost")=>"Float64", Symbol("shopName")=>"String", Symbol("shopRating")=>"Int64", Symbol("inStock")=>"Int64", )
OpenAPI.property_type(::Type{ ModelOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelOfferDTO[name]))}

function check_required(o::ModelOfferDTO)
    true
end

function OpenAPI.validate_property(::Type{ ModelOfferDTO }, name::Symbol, val)
    if name === Symbol("discount")
        OpenAPI.validate_param(name, "ModelOfferDTO", :format, val, "int32")
    end
    if name === Symbol("pos")
        OpenAPI.validate_param(name, "ModelOfferDTO", :format, val, "int32")
    end
    if name === Symbol("regionId")
        OpenAPI.validate_param(name, "ModelOfferDTO", :format, val, "int64")
    end
    if name === Symbol("shopRating")
        OpenAPI.validate_param(name, "ModelOfferDTO", :format, val, "int32")
    end
    if name === Symbol("inStock")
        OpenAPI.validate_param(name, "ModelOfferDTO", :format, val, "int32")
    end
end
