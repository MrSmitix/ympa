# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""QuantumDTO
Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json {   \&quot;offers\&quot;: [     {       \&quot;offerId\&quot;: \&quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d\&quot;,       \&quot;quantum\&quot;: {}     }   ] } &#x60;&#x60;&#x60;  {% endcut %} 

    QuantumDTO(;
        minQuantity=nothing,
        stepQuantity=nothing,
    )

    - minQuantity::Int64 : Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 
    - stepQuantity::Int64 : На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 
"""
Base.@kwdef mutable struct QuantumDTO <: OpenAPI.APIModel
    minQuantity::Union{Nothing, Int64} = nothing
    stepQuantity::Union{Nothing, Int64} = nothing

    function QuantumDTO(minQuantity, stepQuantity, )
        OpenAPI.validate_property(QuantumDTO, Symbol("minQuantity"), minQuantity)
        OpenAPI.validate_property(QuantumDTO, Symbol("stepQuantity"), stepQuantity)
        return new(minQuantity, stepQuantity, )
    end
end # type QuantumDTO

const _property_types_QuantumDTO = Dict{Symbol,String}(Symbol("minQuantity")=>"Int64", Symbol("stepQuantity")=>"Int64", )
OpenAPI.property_type(::Type{ QuantumDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QuantumDTO[name]))}

function check_required(o::QuantumDTO)
    true
end

function OpenAPI.validate_property(::Type{ QuantumDTO }, name::Symbol, val)
    if name === Symbol("minQuantity")
        OpenAPI.validate_param(name, "QuantumDTO", :format, val, "int32")
    end
    if name === Symbol("minQuantity")
        OpenAPI.validate_param(name, "QuantumDTO", :minimum, val, 1, false)
    end
    if name === Symbol("stepQuantity")
        OpenAPI.validate_param(name, "QuantumDTO", :format, val, "int32")
    end
    if name === Symbol("stepQuantity")
        OpenAPI.validate_param(name, "QuantumDTO", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "QuantumDTO", :minimum, val, 1, false)
    end
end
