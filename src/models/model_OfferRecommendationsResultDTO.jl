# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferRecommendationsResultDTO
Список товаров с рекомендациями.

    OfferRecommendationsResultDTO(;
        paging=nothing,
        offerRecommendations=nothing,
    )

    - paging::ScrollingPagerDTO
    - offerRecommendations::Vector{OfferRecommendationDTO} : Страница списка товаров.
"""
Base.@kwdef mutable struct OfferRecommendationsResultDTO <: OpenAPI.APIModel
    paging = nothing # spec type: Union{ Nothing, ScrollingPagerDTO }
    offerRecommendations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferRecommendationDTO} }

    function OfferRecommendationsResultDTO(paging, offerRecommendations, )
        OpenAPI.validate_property(OfferRecommendationsResultDTO, Symbol("paging"), paging)
        OpenAPI.validate_property(OfferRecommendationsResultDTO, Symbol("offerRecommendations"), offerRecommendations)
        return new(paging, offerRecommendations, )
    end
end # type OfferRecommendationsResultDTO

const _property_types_OfferRecommendationsResultDTO = Dict{Symbol,String}(Symbol("paging")=>"ScrollingPagerDTO", Symbol("offerRecommendations")=>"Vector{OfferRecommendationDTO}", )
OpenAPI.property_type(::Type{ OfferRecommendationsResultDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferRecommendationsResultDTO[name]))}

function check_required(o::OfferRecommendationsResultDTO)
    o.offerRecommendations === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferRecommendationsResultDTO }, name::Symbol, val)
end
