# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ReturnItemDTO
Список товаров в возврате.

    ReturnItemDTO(;
        marketSku=nothing,
        shopSku=nothing,
        count=nothing,
        decisions=nothing,
        instances=nothing,
        tracks=nothing,
    )

    - marketSku::Int64 : SKU на Маркете.
    - shopSku::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - count::Int64 : Количество единиц товара.
    - decisions::Vector{ReturnDecisionDTO} : Список решений по возврату.
    - instances::Vector{ReturnInstanceDTO} : Список логистических позиций возврата.
    - tracks::Vector{TrackDTO} : Список трек-кодов для почтовых отправлений.
"""
Base.@kwdef mutable struct ReturnItemDTO <: OpenAPI.APIModel
    marketSku::Union{Nothing, Int64} = nothing
    shopSku::Union{Nothing, String} = nothing
    count::Union{Nothing, Int64} = nothing
    decisions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReturnDecisionDTO} }
    instances::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ReturnInstanceDTO} }
    tracks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TrackDTO} }

    function ReturnItemDTO(marketSku, shopSku, count, decisions, instances, tracks, )
        OpenAPI.validate_property(ReturnItemDTO, Symbol("marketSku"), marketSku)
        OpenAPI.validate_property(ReturnItemDTO, Symbol("shopSku"), shopSku)
        OpenAPI.validate_property(ReturnItemDTO, Symbol("count"), count)
        OpenAPI.validate_property(ReturnItemDTO, Symbol("decisions"), decisions)
        OpenAPI.validate_property(ReturnItemDTO, Symbol("instances"), instances)
        OpenAPI.validate_property(ReturnItemDTO, Symbol("tracks"), tracks)
        return new(marketSku, shopSku, count, decisions, instances, tracks, )
    end
end # type ReturnItemDTO

const _property_types_ReturnItemDTO = Dict{Symbol,String}(Symbol("marketSku")=>"Int64", Symbol("shopSku")=>"String", Symbol("count")=>"Int64", Symbol("decisions")=>"Vector{ReturnDecisionDTO}", Symbol("instances")=>"Vector{ReturnInstanceDTO}", Symbol("tracks")=>"Vector{TrackDTO}", )
OpenAPI.property_type(::Type{ ReturnItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ReturnItemDTO[name]))}

function check_required(o::ReturnItemDTO)
    o.shopSku === nothing && (return false)
    o.count === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ReturnItemDTO }, name::Symbol, val)
    if name === Symbol("marketSku")
        OpenAPI.validate_param(name, "ReturnItemDTO", :format, val, "int64")
    end
    if name === Symbol("shopSku")
        OpenAPI.validate_param(name, "ReturnItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "ReturnItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "ReturnItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "ReturnItemDTO", :format, val, "int64")
    end
end
