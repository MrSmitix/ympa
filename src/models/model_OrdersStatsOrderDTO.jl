# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrdersStatsOrderDTO
Информация о заказе.

    OrdersStatsOrderDTO(;
        id=nothing,
        creationDate=nothing,
        statusUpdateDate=nothing,
        status=nothing,
        partnerOrderId=nothing,
        paymentType=nothing,
        fake=nothing,
        deliveryRegion=nothing,
        items=nothing,
        initialItems=nothing,
        payments=nothing,
        commissions=nothing,
    )

    - id::Int64 : Идентификатор заказа.
    - creationDate::Date : Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    - statusUpdateDate::ZonedDateTime : Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
    - status::OrderStatsStatusType
    - partnerOrderId::String : Идентификатор заказа в информационной системе магазина.
    - paymentType::OrdersStatsOrderPaymentType
    - fake::Bool : Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    - deliveryRegion::OrdersStatsDeliveryRegionDTO
    - items::Vector{OrdersStatsItemDTO} : Список товаров в заказе после возможных изменений.
    - initialItems::Vector{OrdersStatsItemDTO} : Список товаров в заказе до изменений.
    - payments::Vector{OrdersStatsPaymentDTO} : Информация о денежных переводах по заказу.
    - commissions::Vector{OrdersStatsCommissionDTO} : Информация о комиссиях за заказ.
"""
Base.@kwdef mutable struct OrdersStatsOrderDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    creationDate::Union{Nothing, Date} = nothing
    statusUpdateDate::Union{Nothing, ZonedDateTime} = nothing
    status = nothing # spec type: Union{ Nothing, OrderStatsStatusType }
    partnerOrderId::Union{Nothing, String} = nothing
    paymentType = nothing # spec type: Union{ Nothing, OrdersStatsOrderPaymentType }
    fake::Union{Nothing, Bool} = nothing
    deliveryRegion = nothing # spec type: Union{ Nothing, OrdersStatsDeliveryRegionDTO }
    items::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsItemDTO} }
    initialItems::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsItemDTO} }
    payments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsPaymentDTO} }
    commissions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsCommissionDTO} }

    function OrdersStatsOrderDTO(id, creationDate, statusUpdateDate, status, partnerOrderId, paymentType, fake, deliveryRegion, items, initialItems, payments, commissions, )
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("id"), id)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("creationDate"), creationDate)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("statusUpdateDate"), statusUpdateDate)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("status"), status)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("partnerOrderId"), partnerOrderId)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("paymentType"), paymentType)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("fake"), fake)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("deliveryRegion"), deliveryRegion)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("items"), items)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("initialItems"), initialItems)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("payments"), payments)
        OpenAPI.validate_property(OrdersStatsOrderDTO, Symbol("commissions"), commissions)
        return new(id, creationDate, statusUpdateDate, status, partnerOrderId, paymentType, fake, deliveryRegion, items, initialItems, payments, commissions, )
    end
end # type OrdersStatsOrderDTO

const _property_types_OrdersStatsOrderDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("creationDate")=>"Date", Symbol("statusUpdateDate")=>"ZonedDateTime", Symbol("status")=>"OrderStatsStatusType", Symbol("partnerOrderId")=>"String", Symbol("paymentType")=>"OrdersStatsOrderPaymentType", Symbol("fake")=>"Bool", Symbol("deliveryRegion")=>"OrdersStatsDeliveryRegionDTO", Symbol("items")=>"Vector{OrdersStatsItemDTO}", Symbol("initialItems")=>"Vector{OrdersStatsItemDTO}", Symbol("payments")=>"Vector{OrdersStatsPaymentDTO}", Symbol("commissions")=>"Vector{OrdersStatsCommissionDTO}", )
OpenAPI.property_type(::Type{ OrdersStatsOrderDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrdersStatsOrderDTO[name]))}

function check_required(o::OrdersStatsOrderDTO)
    o.items === nothing && (return false)
    o.payments === nothing && (return false)
    o.commissions === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OrdersStatsOrderDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "OrdersStatsOrderDTO", :format, val, "int64")
    end
    if name === Symbol("creationDate")
        OpenAPI.validate_param(name, "OrdersStatsOrderDTO", :format, val, "date")
    end
    if name === Symbol("statusUpdateDate")
        OpenAPI.validate_param(name, "OrdersStatsOrderDTO", :format, val, "date-time")
    end
end
