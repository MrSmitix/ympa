# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsFeedbackCommentDTO
Комментарий к отзыву.

    GoodsFeedbackCommentDTO(;
        id=nothing,
        text=nothing,
        canModify=nothing,
        parentId=nothing,
        author=nothing,
        status=nothing,
    )

    - id::Int64 : Идентификатор комментария к отзыву. 
    - text::String : Текст комментария.
    - canModify::Bool : Может ли продавец изменять комментарий или удалять его.
    - parentId::Int64 : Идентификатор комментария к отзыву. 
    - author::GoodsFeedbackCommentAuthorDTO
    - status::GoodsFeedbackCommentStatusType
"""
Base.@kwdef mutable struct GoodsFeedbackCommentDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    text::Union{Nothing, String} = nothing
    canModify::Union{Nothing, Bool} = nothing
    parentId::Union{Nothing, Int64} = nothing
    author = nothing # spec type: Union{ Nothing, GoodsFeedbackCommentAuthorDTO }
    status = nothing # spec type: Union{ Nothing, GoodsFeedbackCommentStatusType }

    function GoodsFeedbackCommentDTO(id, text, canModify, parentId, author, status, )
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("id"), id)
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("text"), text)
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("canModify"), canModify)
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("parentId"), parentId)
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("author"), author)
        OpenAPI.validate_property(GoodsFeedbackCommentDTO, Symbol("status"), status)
        return new(id, text, canModify, parentId, author, status, )
    end
end # type GoodsFeedbackCommentDTO

const _property_types_GoodsFeedbackCommentDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("text")=>"String", Symbol("canModify")=>"Bool", Symbol("parentId")=>"Int64", Symbol("author")=>"GoodsFeedbackCommentAuthorDTO", Symbol("status")=>"GoodsFeedbackCommentStatusType", )
OpenAPI.property_type(::Type{ GoodsFeedbackCommentDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsFeedbackCommentDTO[name]))}

function check_required(o::GoodsFeedbackCommentDTO)
    o.id === nothing && (return false)
    o.text === nothing && (return false)
    o.author === nothing && (return false)
    o.status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GoodsFeedbackCommentDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "GoodsFeedbackCommentDTO", :format, val, "int64")
    end
    if name === Symbol("text")
        OpenAPI.validate_param(name, "GoodsFeedbackCommentDTO", :maxLength, val, 4096)
        OpenAPI.validate_param(name, "GoodsFeedbackCommentDTO", :minLength, val, 1)
    end
    if name === Symbol("parentId")
        OpenAPI.validate_param(name, "GoodsFeedbackCommentDTO", :format, val, "int64")
    end
end
