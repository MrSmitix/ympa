# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateGoodsFeedbackCommentRequest
Комментарий к отзыву.

    UpdateGoodsFeedbackCommentRequest(;
        feedbackId=nothing,
        comment=nothing,
    )

    - feedbackId::Int64 : Идентификатор отзыва. 
    - comment::UpdateGoodsFeedbackCommentDTO
"""
Base.@kwdef mutable struct UpdateGoodsFeedbackCommentRequest <: OpenAPI.APIModel
    feedbackId::Union{Nothing, Int64} = nothing
    comment = nothing # spec type: Union{ Nothing, UpdateGoodsFeedbackCommentDTO }

    function UpdateGoodsFeedbackCommentRequest(feedbackId, comment, )
        OpenAPI.validate_property(UpdateGoodsFeedbackCommentRequest, Symbol("feedbackId"), feedbackId)
        OpenAPI.validate_property(UpdateGoodsFeedbackCommentRequest, Symbol("comment"), comment)
        return new(feedbackId, comment, )
    end
end # type UpdateGoodsFeedbackCommentRequest

const _property_types_UpdateGoodsFeedbackCommentRequest = Dict{Symbol,String}(Symbol("feedbackId")=>"Int64", Symbol("comment")=>"UpdateGoodsFeedbackCommentDTO", )
OpenAPI.property_type(::Type{ UpdateGoodsFeedbackCommentRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateGoodsFeedbackCommentRequest[name]))}

function check_required(o::UpdateGoodsFeedbackCommentRequest)
    o.feedbackId === nothing && (return false)
    o.comment === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdateGoodsFeedbackCommentRequest }, name::Symbol, val)
    if name === Symbol("feedbackId")
        OpenAPI.validate_param(name, "UpdateGoodsFeedbackCommentRequest", :format, val, "int64")
    end
end
