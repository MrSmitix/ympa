# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LogisticPickupPointDTO
Описание пункта вывоза для возврата.

    LogisticPickupPointDTO(;
        id=nothing,
        name=nothing,
        address=nothing,
        instruction=nothing,
        type=nothing,
        logisticPartnerId=nothing,
    )

    - id::Int64 : Идентификатор пункта вывоза.
    - name::String : Название пункта вывоза.
    - address::PickupAddressDTO
    - instruction::String : Дополнительные инструкции к вывозу.
    - type::LogisticPointType
    - logisticPartnerId::Int64 : Идентификатор логистического партнера, к которому относится логистическая точка.
"""
Base.@kwdef mutable struct LogisticPickupPointDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    address = nothing # spec type: Union{ Nothing, PickupAddressDTO }
    instruction::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, LogisticPointType }
    logisticPartnerId::Union{Nothing, Int64} = nothing

    function LogisticPickupPointDTO(id, name, address, instruction, type, logisticPartnerId, )
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("id"), id)
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("name"), name)
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("address"), address)
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("instruction"), instruction)
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("type"), type)
        OpenAPI.validate_property(LogisticPickupPointDTO, Symbol("logisticPartnerId"), logisticPartnerId)
        return new(id, name, address, instruction, type, logisticPartnerId, )
    end
end # type LogisticPickupPointDTO

const _property_types_LogisticPickupPointDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("address")=>"PickupAddressDTO", Symbol("instruction")=>"String", Symbol("type")=>"LogisticPointType", Symbol("logisticPartnerId")=>"Int64", )
OpenAPI.property_type(::Type{ LogisticPickupPointDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LogisticPickupPointDTO[name]))}

function check_required(o::LogisticPickupPointDTO)
    true
end

function OpenAPI.validate_property(::Type{ LogisticPickupPointDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "LogisticPickupPointDTO", :format, val, "int64")
    end
    if name === Symbol("logisticPartnerId")
        OpenAPI.validate_param(name, "LogisticPickupPointDTO", :format, val, "int64")
    end
end
