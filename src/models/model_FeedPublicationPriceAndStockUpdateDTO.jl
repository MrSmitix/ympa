# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedPublicationPriceAndStockUpdateDTO
Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре &#x60;full&#x60;. Выводится, если параметр &#x60;publication status&#x3D;OK&#x60;. 

    FeedPublicationPriceAndStockUpdateDTO(;
        fileTime=nothing,
        publishedTime=nothing,
    )

    - fileTime::ZonedDateTime : Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    - publishedTime::ZonedDateTime : Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
"""
Base.@kwdef mutable struct FeedPublicationPriceAndStockUpdateDTO <: OpenAPI.APIModel
    fileTime::Union{Nothing, ZonedDateTime} = nothing
    publishedTime::Union{Nothing, ZonedDateTime} = nothing

    function FeedPublicationPriceAndStockUpdateDTO(fileTime, publishedTime, )
        OpenAPI.validate_property(FeedPublicationPriceAndStockUpdateDTO, Symbol("fileTime"), fileTime)
        OpenAPI.validate_property(FeedPublicationPriceAndStockUpdateDTO, Symbol("publishedTime"), publishedTime)
        return new(fileTime, publishedTime, )
    end
end # type FeedPublicationPriceAndStockUpdateDTO

const _property_types_FeedPublicationPriceAndStockUpdateDTO = Dict{Symbol,String}(Symbol("fileTime")=>"ZonedDateTime", Symbol("publishedTime")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ FeedPublicationPriceAndStockUpdateDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedPublicationPriceAndStockUpdateDTO[name]))}

function check_required(o::FeedPublicationPriceAndStockUpdateDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedPublicationPriceAndStockUpdateDTO }, name::Symbol, val)
    if name === Symbol("fileTime")
        OpenAPI.validate_param(name, "FeedPublicationPriceAndStockUpdateDTO", :format, val, "date-time")
    end
    if name === Symbol("publishedTime")
        OpenAPI.validate_param(name, "FeedPublicationPriceAndStockUpdateDTO", :format, val, "date-time")
    end
end
