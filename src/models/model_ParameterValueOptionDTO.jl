# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ParameterValueOptionDTO
Значение характеристики.

    ParameterValueOptionDTO(;
        id=nothing,
        value=nothing,
        description=nothing,
    )

    - id::Int64 : Идентификатор значения.
    - value::String : Значение.
    - description::String : Описание значения.
"""
Base.@kwdef mutable struct ParameterValueOptionDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    value::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function ParameterValueOptionDTO(id, value, description, )
        OpenAPI.validate_property(ParameterValueOptionDTO, Symbol("id"), id)
        OpenAPI.validate_property(ParameterValueOptionDTO, Symbol("value"), value)
        OpenAPI.validate_property(ParameterValueOptionDTO, Symbol("description"), description)
        return new(id, value, description, )
    end
end # type ParameterValueOptionDTO

const _property_types_ParameterValueOptionDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("value")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ ParameterValueOptionDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ParameterValueOptionDTO[name]))}

function check_required(o::ParameterValueOptionDTO)
    o.id === nothing && (return false)
    o.value === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ParameterValueOptionDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "ParameterValueOptionDTO", :format, val, "int64")
    end
end
