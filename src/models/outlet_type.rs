/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OutletType : Тип точки продаж.  Возможные значения:  * `DEPOT` — пункт выдачи заказов. * `MIXED` — смешанный тип точки продаж (торговый зал и пункт выдачи заказов). * `RETAIL` — розничная точка продаж (торговый зал). 
/// Тип точки продаж.  Возможные значения:  * `DEPOT` — пункт выдачи заказов. * `MIXED` — смешанный тип точки продаж (торговый зал и пункт выдачи заказов). * `RETAIL` — розничная точка продаж (торговый зал). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutletType {
    #[serde(rename = "DEPOT")]
    Depot,
    #[serde(rename = "MIXED")]
    Mixed,
    #[serde(rename = "RETAIL")]
    Retail,
    #[serde(rename = "NOT_DEFINED")]
    NotDefined,

}

impl std::fmt::Display for OutletType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Depot => write!(f, "DEPOT"),
            Self::Mixed => write!(f, "MIXED"),
            Self::Retail => write!(f, "RETAIL"),
            Self::NotDefined => write!(f, "NOT_DEFINED"),
        }
    }
}

impl Default for OutletType {
    fn default() -> OutletType {
        Self::Depot
    }
}

