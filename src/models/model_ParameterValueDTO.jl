# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ParameterValueDTO
Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым. 

    ParameterValueDTO(;
        parameterId=nothing,
        unitId=nothing,
        valueId=nothing,
        value=nothing,
    )

    - parameterId::Int64 : Идентификатор характеристики.
    - unitId::Int64 : Идентификатор единицы измерения. Если вы не передали параметр &#x60;unitId&#x60;, используется единица измерения по умолчанию.
    - valueId::Int64 : Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа &#x60;ENUM&#x60;. 
    - value::String : Значение.
"""
Base.@kwdef mutable struct ParameterValueDTO <: OpenAPI.APIModel
    parameterId::Union{Nothing, Int64} = nothing
    unitId::Union{Nothing, Int64} = nothing
    valueId::Union{Nothing, Int64} = nothing
    value::Union{Nothing, String} = nothing

    function ParameterValueDTO(parameterId, unitId, valueId, value, )
        OpenAPI.validate_property(ParameterValueDTO, Symbol("parameterId"), parameterId)
        OpenAPI.validate_property(ParameterValueDTO, Symbol("unitId"), unitId)
        OpenAPI.validate_property(ParameterValueDTO, Symbol("valueId"), valueId)
        OpenAPI.validate_property(ParameterValueDTO, Symbol("value"), value)
        return new(parameterId, unitId, valueId, value, )
    end
end # type ParameterValueDTO

const _property_types_ParameterValueDTO = Dict{Symbol,String}(Symbol("parameterId")=>"Int64", Symbol("unitId")=>"Int64", Symbol("valueId")=>"Int64", Symbol("value")=>"String", )
OpenAPI.property_type(::Type{ ParameterValueDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ParameterValueDTO[name]))}

function check_required(o::ParameterValueDTO)
    o.parameterId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ParameterValueDTO }, name::Symbol, val)
    if name === Symbol("parameterId")
        OpenAPI.validate_param(name, "ParameterValueDTO", :format, val, "int64")
    end
    if name === Symbol("unitId")
        OpenAPI.validate_param(name, "ParameterValueDTO", :format, val, "int64")
    end
    if name === Symbol("valueId")
        OpenAPI.validate_param(name, "ParameterValueDTO", :format, val, "int64")
    end
end
