# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdatePromoOffersRequest
Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре &#x60;offers&#x60;. 

    UpdatePromoOffersRequest(;
        promoId=nothing,
        offers=nothing,
    )

    - promoId::String : Идентификатор акции.
    - offers::Vector{UpdatePromoOfferDTO} : Товары, которые необходимо добавить в акцию или цены которых нужно изменить.
"""
Base.@kwdef mutable struct UpdatePromoOffersRequest <: OpenAPI.APIModel
    promoId::Union{Nothing, String} = nothing
    offers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UpdatePromoOfferDTO} }

    function UpdatePromoOffersRequest(promoId, offers, )
        OpenAPI.validate_property(UpdatePromoOffersRequest, Symbol("promoId"), promoId)
        OpenAPI.validate_property(UpdatePromoOffersRequest, Symbol("offers"), offers)
        return new(promoId, offers, )
    end
end # type UpdatePromoOffersRequest

const _property_types_UpdatePromoOffersRequest = Dict{Symbol,String}(Symbol("promoId")=>"String", Symbol("offers")=>"Vector{UpdatePromoOfferDTO}", )
OpenAPI.property_type(::Type{ UpdatePromoOffersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdatePromoOffersRequest[name]))}

function check_required(o::UpdatePromoOffersRequest)
    o.promoId === nothing && (return false)
    o.offers === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdatePromoOffersRequest }, name::Symbol, val)
    if name === Symbol("offers")
        OpenAPI.validate_param(name, "UpdatePromoOffersRequest", :maxItems, val, 500)
        OpenAPI.validate_param(name, "UpdatePromoOffersRequest", :minItems, val, 1)
    end
end
