// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderStatsStatusType,
    OrderStatsStatusTypeFromJSON,
    OrderStatsStatusTypeToJSON,
    OrdersStatsCommissionDTO,
    OrdersStatsCommissionDTOFromJSON,
    OrdersStatsCommissionDTOToJSON,
    OrdersStatsDeliveryRegionDTO,
    OrdersStatsDeliveryRegionDTOFromJSON,
    OrdersStatsDeliveryRegionDTOToJSON,
    OrdersStatsItemDTO,
    OrdersStatsItemDTOFromJSON,
    OrdersStatsItemDTOToJSON,
    OrdersStatsOrderPaymentType,
    OrdersStatsOrderPaymentTypeFromJSON,
    OrdersStatsOrderPaymentTypeToJSON,
    OrdersStatsPaymentDTO,
    OrdersStatsPaymentDTOFromJSON,
    OrdersStatsPaymentDTOToJSON,
} from './';

/**
 * Информация о заказе.
 * @export
 * @interface OrdersStatsOrderDTO
 */
export interface OrdersStatsOrderDTO  {
    /**
     * Идентификатор заказа.
     * @type {number}
     * @memberof OrdersStatsOrderDTO
     */
    id?: number;
    /**
     * Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
     * @type {Date}
     * @memberof OrdersStatsOrderDTO
     */
    creationDate?: Date;
    /**
     * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
     * @type {Date}
     * @memberof OrdersStatsOrderDTO
     */
    statusUpdateDate?: Date;
    /**
     * 
     * @type {OrderStatsStatusType}
     * @memberof OrdersStatsOrderDTO
     */
    status?: OrderStatsStatusType;
    /**
     * Идентификатор заказа в информационной системе магазина.
     * @type {string}
     * @memberof OrdersStatsOrderDTO
     */
    partnerOrderId?: string;
    /**
     * 
     * @type {OrdersStatsOrderPaymentType}
     * @memberof OrdersStatsOrderDTO
     */
    paymentType?: OrdersStatsOrderPaymentType;
    /**
     * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
     * @type {boolean}
     * @memberof OrdersStatsOrderDTO
     */
    fake?: boolean;
    /**
     * 
     * @type {OrdersStatsDeliveryRegionDTO}
     * @memberof OrdersStatsOrderDTO
     */
    deliveryRegion?: OrdersStatsDeliveryRegionDTO;
    /**
     * Список товаров в заказе после возможных изменений.
     * @type {Array<OrdersStatsItemDTO>}
     * @memberof OrdersStatsOrderDTO
     */
    items: Array<OrdersStatsItemDTO>;
    /**
     * Список товаров в заказе до изменений.
     * @type {Array<OrdersStatsItemDTO>}
     * @memberof OrdersStatsOrderDTO
     */
    initialItems?: Array<OrdersStatsItemDTO>;
    /**
     * Информация о денежных переводах по заказу.
     * @type {Array<OrdersStatsPaymentDTO>}
     * @memberof OrdersStatsOrderDTO
     */
    payments: Array<OrdersStatsPaymentDTO>;
    /**
     * Информация о комиссиях за заказ.
     * @type {Array<OrdersStatsCommissionDTO>}
     * @memberof OrdersStatsOrderDTO
     */
    commissions: Array<OrdersStatsCommissionDTO>;
}

export function OrdersStatsOrderDTOFromJSON(json: any): OrdersStatsOrderDTO {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'creationDate': !exists(json, 'creationDate') ? undefined : new Date(json['creationDate']),
        'statusUpdateDate': !exists(json, 'statusUpdateDate') ? undefined : new Date(json['statusUpdateDate']),
        'status': !exists(json, 'status') ? undefined : OrderStatsStatusTypeFromJSON(json['status']),
        'partnerOrderId': !exists(json, 'partnerOrderId') ? undefined : json['partnerOrderId'],
        'paymentType': !exists(json, 'paymentType') ? undefined : OrdersStatsOrderPaymentTypeFromJSON(json['paymentType']),
        'fake': !exists(json, 'fake') ? undefined : json['fake'],
        'deliveryRegion': !exists(json, 'deliveryRegion') ? undefined : OrdersStatsDeliveryRegionDTOFromJSON(json['deliveryRegion']),
        'items': (json['items'] as Array<any>).map(OrdersStatsItemDTOFromJSON),
        'initialItems': !exists(json, 'initialItems') ? undefined : (json['initialItems'] as Array<any>).map(OrdersStatsItemDTOFromJSON),
        'payments': (json['payments'] as Array<any>).map(OrdersStatsPaymentDTOFromJSON),
        'commissions': (json['commissions'] as Array<any>).map(OrdersStatsCommissionDTOFromJSON),
    };
}

export function OrdersStatsOrderDTOToJSON(value?: OrdersStatsOrderDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'creationDate': value.creationDate === undefined ? undefined : value.creationDate.toISOString().substring(0,10),
        'statusUpdateDate': value.statusUpdateDate === undefined ? undefined : value.statusUpdateDate.toISOString(),
        'status': OrderStatsStatusTypeToJSON(value.status),
        'partnerOrderId': value.partnerOrderId,
        'paymentType': OrdersStatsOrderPaymentTypeToJSON(value.paymentType),
        'fake': value.fake,
        'deliveryRegion': OrdersStatsDeliveryRegionDTOToJSON(value.deliveryRegion),
        'items': (value.items as Array<any>).map(OrdersStatsItemDTOToJSON),
        'initialItems': value.initialItems === undefined ? undefined : (value.initialItems as Array<any>).map(OrdersStatsItemDTOToJSON),
        'payments': (value.payments as Array<any>).map(OrdersStatsPaymentDTOToJSON),
        'commissions': (value.commissions as Array<any>).map(OrdersStatsCommissionDTOToJSON),
    };
}



