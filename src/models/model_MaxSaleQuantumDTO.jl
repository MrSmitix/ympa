# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MaxSaleQuantumDTO
Лимит на установку кванта и минимального количества товаров по категориям. 

    MaxSaleQuantumDTO(;
        id=nothing,
        name=nothing,
        maxSaleQuantum=nothing,
    )

    - id::Int64 : Идентификатор категории.
    - name::String : Название категории.
    - maxSaleQuantum::Int64 : Лимит на установку кванта и минимального количества товаров.
"""
Base.@kwdef mutable struct MaxSaleQuantumDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    maxSaleQuantum::Union{Nothing, Int64} = nothing

    function MaxSaleQuantumDTO(id, name, maxSaleQuantum, )
        OpenAPI.validate_property(MaxSaleQuantumDTO, Symbol("id"), id)
        OpenAPI.validate_property(MaxSaleQuantumDTO, Symbol("name"), name)
        OpenAPI.validate_property(MaxSaleQuantumDTO, Symbol("maxSaleQuantum"), maxSaleQuantum)
        return new(id, name, maxSaleQuantum, )
    end
end # type MaxSaleQuantumDTO

const _property_types_MaxSaleQuantumDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("maxSaleQuantum")=>"Int64", )
OpenAPI.property_type(::Type{ MaxSaleQuantumDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MaxSaleQuantumDTO[name]))}

function check_required(o::MaxSaleQuantumDTO)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ MaxSaleQuantumDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "MaxSaleQuantumDTO", :format, val, "int64")
    end
end
