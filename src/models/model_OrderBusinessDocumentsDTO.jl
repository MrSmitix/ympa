# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderBusinessDocumentsDTO
Информация о документах. 

    OrderBusinessDocumentsDTO(;
        upd=nothing,
        ukd=nothing,
        torgTwelve=nothing,
        sf=nothing,
        ksf=nothing,
    )

    - upd::DocumentDTO
    - ukd::DocumentDTO
    - torgTwelve::DocumentDTO
    - sf::DocumentDTO
    - ksf::DocumentDTO
"""
Base.@kwdef mutable struct OrderBusinessDocumentsDTO <: OpenAPI.APIModel
    upd = nothing # spec type: Union{ Nothing, DocumentDTO }
    ukd = nothing # spec type: Union{ Nothing, DocumentDTO }
    torgTwelve = nothing # spec type: Union{ Nothing, DocumentDTO }
    sf = nothing # spec type: Union{ Nothing, DocumentDTO }
    ksf = nothing # spec type: Union{ Nothing, DocumentDTO }

    function OrderBusinessDocumentsDTO(upd, ukd, torgTwelve, sf, ksf, )
        OpenAPI.validate_property(OrderBusinessDocumentsDTO, Symbol("upd"), upd)
        OpenAPI.validate_property(OrderBusinessDocumentsDTO, Symbol("ukd"), ukd)
        OpenAPI.validate_property(OrderBusinessDocumentsDTO, Symbol("torgTwelve"), torgTwelve)
        OpenAPI.validate_property(OrderBusinessDocumentsDTO, Symbol("sf"), sf)
        OpenAPI.validate_property(OrderBusinessDocumentsDTO, Symbol("ksf"), ksf)
        return new(upd, ukd, torgTwelve, sf, ksf, )
    end
end # type OrderBusinessDocumentsDTO

const _property_types_OrderBusinessDocumentsDTO = Dict{Symbol,String}(Symbol("upd")=>"DocumentDTO", Symbol("ukd")=>"DocumentDTO", Symbol("torgTwelve")=>"DocumentDTO", Symbol("sf")=>"DocumentDTO", Symbol("ksf")=>"DocumentDTO", )
OpenAPI.property_type(::Type{ OrderBusinessDocumentsDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderBusinessDocumentsDTO[name]))}

function check_required(o::OrderBusinessDocumentsDTO)
    true
end

function OpenAPI.validate_property(::Type{ OrderBusinessDocumentsDTO }, name::Symbol, val)
end
