/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReturnInstanceStatusType : Логистический статус конкретного товара.
/// Логистический статус конкретного товара.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReturnInstanceStatusType {
    #[serde(rename = "CREATED")]
    Created,
    #[serde(rename = "RECEIVED")]
    Received,
    #[serde(rename = "IN_TRANSIT")]
    InTransit,
    #[serde(rename = "READY_FOR_PICKUP")]
    ReadyForPickup,
    #[serde(rename = "PICKED")]
    Picked,
    #[serde(rename = "RECEIVED_ON_FULFILLMENT")]
    ReceivedOnFulfillment,
    #[serde(rename = "CANCELLED")]
    Cancelled,
    #[serde(rename = "LOST")]
    Lost,
    #[serde(rename = "UTILIZED")]
    Utilized,
    #[serde(rename = "PREPARED_FOR_UTILIZATION")]
    PreparedForUtilization,
    #[serde(rename = "EXPROPRIATED")]
    Expropriated,
    #[serde(rename = "NOT_IN_DEMAND")]
    NotInDemand,

}

impl std::fmt::Display for ReturnInstanceStatusType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Created => write!(f, "CREATED"),
            Self::Received => write!(f, "RECEIVED"),
            Self::InTransit => write!(f, "IN_TRANSIT"),
            Self::ReadyForPickup => write!(f, "READY_FOR_PICKUP"),
            Self::Picked => write!(f, "PICKED"),
            Self::ReceivedOnFulfillment => write!(f, "RECEIVED_ON_FULFILLMENT"),
            Self::Cancelled => write!(f, "CANCELLED"),
            Self::Lost => write!(f, "LOST"),
            Self::Utilized => write!(f, "UTILIZED"),
            Self::PreparedForUtilization => write!(f, "PREPARED_FOR_UTILIZATION"),
            Self::Expropriated => write!(f, "EXPROPRIATED"),
            Self::NotInDemand => write!(f, "NOT_IN_DEMAND"),
        }
    }
}

impl Default for ReturnInstanceStatusType {
    fn default() -> ReturnInstanceStatusType {
        Self::Created
    }
}

