# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CampaignSettingsDTO
Настройки магазина.

    CampaignSettingsDTO(;
        countryRegion=nothing,
        shopName=nothing,
        showInContext=nothing,
        showInPremium=nothing,
        useOpenStat=nothing,
        localRegion=nothing,
    )

    - countryRegion::Int64 : Идентификатор региона, в котором находится магазин.
    - shopName::String : Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. 
    - showInContext::Bool : Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
    - showInPremium::Bool : Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. 
    - useOpenStat::Bool : Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. 
    - localRegion::CampaignSettingsLocalRegionDTO
"""
Base.@kwdef mutable struct CampaignSettingsDTO <: OpenAPI.APIModel
    countryRegion::Union{Nothing, Int64} = nothing
    shopName::Union{Nothing, String} = nothing
    showInContext::Union{Nothing, Bool} = nothing
    showInPremium::Union{Nothing, Bool} = nothing
    useOpenStat::Union{Nothing, Bool} = nothing
    localRegion = nothing # spec type: Union{ Nothing, CampaignSettingsLocalRegionDTO }

    function CampaignSettingsDTO(countryRegion, shopName, showInContext, showInPremium, useOpenStat, localRegion, )
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("countryRegion"), countryRegion)
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("shopName"), shopName)
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("showInContext"), showInContext)
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("showInPremium"), showInPremium)
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("useOpenStat"), useOpenStat)
        OpenAPI.validate_property(CampaignSettingsDTO, Symbol("localRegion"), localRegion)
        return new(countryRegion, shopName, showInContext, showInPremium, useOpenStat, localRegion, )
    end
end # type CampaignSettingsDTO

const _property_types_CampaignSettingsDTO = Dict{Symbol,String}(Symbol("countryRegion")=>"Int64", Symbol("shopName")=>"String", Symbol("showInContext")=>"Bool", Symbol("showInPremium")=>"Bool", Symbol("useOpenStat")=>"Bool", Symbol("localRegion")=>"CampaignSettingsLocalRegionDTO", )
OpenAPI.property_type(::Type{ CampaignSettingsDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CampaignSettingsDTO[name]))}

function check_required(o::CampaignSettingsDTO)
    true
end

function OpenAPI.validate_property(::Type{ CampaignSettingsDTO }, name::Symbol, val)
    if name === Symbol("countryRegion")
        OpenAPI.validate_param(name, "CampaignSettingsDTO", :format, val, "int64")
    end
end
