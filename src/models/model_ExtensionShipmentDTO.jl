# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExtensionShipmentDTO
Информация об отгрузке.

    ExtensionShipmentDTO(;
        currentStatus=nothing,
        availableActions=nothing,
    )

    - currentStatus::ShipmentStatusChangeDTO
    - availableActions::Vector{ShipmentActionType} : Доступные действия над отгрузкой.
"""
Base.@kwdef mutable struct ExtensionShipmentDTO <: OpenAPI.APIModel
    currentStatus = nothing # spec type: Union{ Nothing, ShipmentStatusChangeDTO }
    availableActions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ShipmentActionType} }

    function ExtensionShipmentDTO(currentStatus, availableActions, )
        OpenAPI.validate_property(ExtensionShipmentDTO, Symbol("currentStatus"), currentStatus)
        OpenAPI.validate_property(ExtensionShipmentDTO, Symbol("availableActions"), availableActions)
        return new(currentStatus, availableActions, )
    end
end # type ExtensionShipmentDTO

const _property_types_ExtensionShipmentDTO = Dict{Symbol,String}(Symbol("currentStatus")=>"ShipmentStatusChangeDTO", Symbol("availableActions")=>"Vector{ShipmentActionType}", )
OpenAPI.property_type(::Type{ ExtensionShipmentDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExtensionShipmentDTO[name]))}

function check_required(o::ExtensionShipmentDTO)
    o.availableActions === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ExtensionShipmentDTO }, name::Symbol, val)
    if name === Symbol("availableActions")
        OpenAPI.validate_param(name, "ExtensionShipmentDTO", :uniqueItems, val, true)
    end
end
