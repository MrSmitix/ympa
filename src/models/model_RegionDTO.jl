# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RegionDTO
Регион доставки.

    RegionDTO(;
        id=nothing,
        name=nothing,
        type=nothing,
        parent=nothing,
        children=nothing,
    )

    - id::Int64 : Идентификатор региона.
    - name::String : Название региона.
    - type::RegionType
    - parent::RegionDTO
    - children::Vector{RegionDTO} : Дочерние регионы.
"""
Base.@kwdef mutable struct RegionDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, RegionType }
    parent = nothing # spec type: Union{ Nothing, RegionDTO }
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RegionDTO} }

    function RegionDTO(id, name, type, parent, children, )
        OpenAPI.validate_property(RegionDTO, Symbol("id"), id)
        OpenAPI.validate_property(RegionDTO, Symbol("name"), name)
        OpenAPI.validate_property(RegionDTO, Symbol("type"), type)
        OpenAPI.validate_property(RegionDTO, Symbol("parent"), parent)
        OpenAPI.validate_property(RegionDTO, Symbol("children"), children)
        return new(id, name, type, parent, children, )
    end
end # type RegionDTO

const _property_types_RegionDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("type")=>"RegionType", Symbol("parent")=>"RegionDTO", Symbol("children")=>"Vector{RegionDTO}", )
OpenAPI.property_type(::Type{ RegionDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RegionDTO[name]))}

function check_required(o::RegionDTO)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RegionDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "RegionDTO", :format, val, "int64")
    end
end
