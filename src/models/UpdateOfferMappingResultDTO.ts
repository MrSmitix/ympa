// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OfferMappingErrorDTO,
    OfferMappingErrorDTOFromJSON,
    OfferMappingErrorDTOToJSON,
} from './';

/**
 * Ошибки и предупреждения, которые появились из-за переданных характеристик.
 * @export
 * @interface UpdateOfferMappingResultDTO
 */
export interface UpdateOfferMappingResultDTO  {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @type {string}
     * @memberof UpdateOfferMappingResultDTO
     */
    offerId: string;
    /**
     * Ошибки — информация в каталоге не обновится.
     * @type {Array<OfferMappingErrorDTO>}
     * @memberof UpdateOfferMappingResultDTO
     */
    errors?: Array<OfferMappingErrorDTO>;
    /**
     * Предупреждения — информация в каталоге обновится.
     * @type {Array<OfferMappingErrorDTO>}
     * @memberof UpdateOfferMappingResultDTO
     */
    warnings?: Array<OfferMappingErrorDTO>;
}

export function UpdateOfferMappingResultDTOFromJSON(json: any): UpdateOfferMappingResultDTO {
    return {
        'offerId': json['offerId'],
        'errors': !exists(json, 'errors') ? undefined : (json['errors'] as Array<any>).map(OfferMappingErrorDTOFromJSON),
        'warnings': !exists(json, 'warnings') ? undefined : (json['warnings'] as Array<any>).map(OfferMappingErrorDTOFromJSON),
    };
}

export function UpdateOfferMappingResultDTOToJSON(value?: UpdateOfferMappingResultDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'offerId': value.offerId,
        'errors': value.errors === undefined ? undefined : (value.errors as Array<any>).map(OfferMappingErrorDTOToJSON),
        'warnings': value.warnings === undefined ? undefined : (value.warnings as Array<any>).map(OfferMappingErrorDTOToJSON),
    };
}


