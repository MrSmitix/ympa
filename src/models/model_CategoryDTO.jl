# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryDTO
Информация о категории.  Категория считается листовой, если у нее нет дочерних категорий. 

    CategoryDTO(;
        id=nothing,
        name=nothing,
        children=nothing,
    )

    - id::Int64 : Идентификатор категории.
    - name::String : Название категории.
    - children::Vector{CategoryDTO} : Дочерние категории.
"""
Base.@kwdef mutable struct CategoryDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CategoryDTO} }

    function CategoryDTO(id, name, children, )
        OpenAPI.validate_property(CategoryDTO, Symbol("id"), id)
        OpenAPI.validate_property(CategoryDTO, Symbol("name"), name)
        OpenAPI.validate_property(CategoryDTO, Symbol("children"), children)
        return new(id, name, children, )
    end
end # type CategoryDTO

const _property_types_CategoryDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("children")=>"Vector{CategoryDTO}", )
OpenAPI.property_type(::Type{ CategoryDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryDTO[name]))}

function check_required(o::CategoryDTO)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "CategoryDTO", :format, val, "int64")
    end
end
