// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OutletAddressDTO,
    OutletAddressDTOFromJSON,
    OutletAddressDTOToJSON,
    OutletDeliveryRuleDTO,
    OutletDeliveryRuleDTOFromJSON,
    OutletDeliveryRuleDTOToJSON,
    OutletType,
    OutletTypeFromJSON,
    OutletTypeToJSON,
    OutletVisibilityType,
    OutletVisibilityTypeFromJSON,
    OutletVisibilityTypeToJSON,
    OutletWorkingScheduleDTO,
    OutletWorkingScheduleDTOFromJSON,
    OutletWorkingScheduleDTOToJSON,
} from './';

/**
 * Информация о точке продаж.
 * @export
 * @interface OutletDTO
 */
export interface OutletDTO  {
    /**
     * Название точки продаж. 
     * @type {string}
     * @memberof OutletDTO
     */
    name: string;
    /**
     * 
     * @type {OutletType}
     * @memberof OutletDTO
     */
    type: OutletType;
    /**
     * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
     * @type {string}
     * @memberof OutletDTO
     */
    coords?: string;
    /**
     * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
     * @type {boolean}
     * @memberof OutletDTO
     */
    isMain?: boolean;
    /**
     * Идентификатор точки продаж, присвоенный магазином.
     * @type {string}
     * @memberof OutletDTO
     */
    shopOutletCode?: string;
    /**
     * 
     * @type {OutletVisibilityType}
     * @memberof OutletDTO
     */
    visibility?: OutletVisibilityType;
    /**
     * 
     * @type {OutletAddressDTO}
     * @memberof OutletDTO
     */
    address: OutletAddressDTO;
    /**
     * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
     * @type {Array<string>}
     * @memberof OutletDTO
     */
    phones: Array<string>;
    /**
     * 
     * @type {OutletWorkingScheduleDTO}
     * @memberof OutletDTO
     */
    workingSchedule: OutletWorkingScheduleDTO;
    /**
     * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
     * @type {Array<OutletDeliveryRuleDTO>}
     * @memberof OutletDTO
     */
    deliveryRules?: Array<OutletDeliveryRuleDTO>;
    /**
     * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
     * @type {number}
     * @memberof OutletDTO
     */
    storagePeriod?: number;
}

export function OutletDTOFromJSON(json: any): OutletDTO {
    return {
        'name': json['name'],
        'type': OutletTypeFromJSON(json['type']),
        'coords': !exists(json, 'coords') ? undefined : json['coords'],
        'isMain': !exists(json, 'isMain') ? undefined : json['isMain'],
        'shopOutletCode': !exists(json, 'shopOutletCode') ? undefined : json['shopOutletCode'],
        'visibility': !exists(json, 'visibility') ? undefined : OutletVisibilityTypeFromJSON(json['visibility']),
        'address': OutletAddressDTOFromJSON(json['address']),
        'phones': json['phones'],
        'workingSchedule': OutletWorkingScheduleDTOFromJSON(json['workingSchedule']),
        'deliveryRules': !exists(json, 'deliveryRules') ? undefined : (json['deliveryRules'] as Array<any>).map(OutletDeliveryRuleDTOFromJSON),
        'storagePeriod': !exists(json, 'storagePeriod') ? undefined : json['storagePeriod'],
    };
}

export function OutletDTOToJSON(value?: OutletDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'type': OutletTypeToJSON(value.type),
        'coords': value.coords,
        'isMain': value.isMain,
        'shopOutletCode': value.shopOutletCode,
        'visibility': OutletVisibilityTypeToJSON(value.visibility),
        'address': OutletAddressDTOToJSON(value.address),
        'phones': value.phones,
        'workingSchedule': OutletWorkingScheduleDTOToJSON(value.workingSchedule),
        'deliveryRules': value.deliveryRules === undefined ? undefined : (value.deliveryRules as Array<any>).map(OutletDeliveryRuleDTOToJSON),
        'storagePeriod': value.storagePeriod,
    };
}



