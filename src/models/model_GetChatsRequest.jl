# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetChatsRequest
Фильтры по чатам, которые нужно вернуть. 

    GetChatsRequest(;
        orderIds=nothing,
        types=nothing,
        statuses=nothing,
    )

    - orderIds::Vector{Int64} : Фильтр по идентификаторам заказов на Маркете.
    - types::Vector{ChatType} : Фильтр по типам чатов.
    - statuses::Vector{ChatStatusType} : Фильтр по статусам чатов.
"""
Base.@kwdef mutable struct GetChatsRequest <: OpenAPI.APIModel
    orderIds::Union{Nothing, Vector{Int64}} = nothing
    types::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatType} }
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatStatusType} }

    function GetChatsRequest(orderIds, types, statuses, )
        OpenAPI.validate_property(GetChatsRequest, Symbol("orderIds"), orderIds)
        OpenAPI.validate_property(GetChatsRequest, Symbol("types"), types)
        OpenAPI.validate_property(GetChatsRequest, Symbol("statuses"), statuses)
        return new(orderIds, types, statuses, )
    end
end # type GetChatsRequest

const _property_types_GetChatsRequest = Dict{Symbol,String}(Symbol("orderIds")=>"Vector{Int64}", Symbol("types")=>"Vector{ChatType}", Symbol("statuses")=>"Vector{ChatStatusType}", )
OpenAPI.property_type(::Type{ GetChatsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetChatsRequest[name]))}

function check_required(o::GetChatsRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetChatsRequest }, name::Symbol, val)
    if name === Symbol("orderIds")
        OpenAPI.validate_param(name, "GetChatsRequest", :minItems, val, 1)
    end
    if name === Symbol("types")
        OpenAPI.validate_param(name, "GetChatsRequest", :minItems, val, 1)
    end
    if name === Symbol("statuses")
        OpenAPI.validate_param(name, "GetChatsRequest", :minItems, val, 1)
    end
end
