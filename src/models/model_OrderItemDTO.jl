# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderItemDTO
Список товаров в заказе.

    OrderItemDTO(;
        id=nothing,
        offerId=nothing,
        offerName=nothing,
        price=nothing,
        buyerPrice=nothing,
        buyerPriceBeforeDiscount=nothing,
        priceBeforeDiscount=nothing,
        count=nothing,
        vat=nothing,
        shopSku=nothing,
        subsidy=nothing,
        partnerWarehouseId=nothing,
        promos=nothing,
        instances=nothing,
        details=nothing,
        subsidies=nothing,
        requiredInstanceTypes=nothing,
    )

    - id::Int64 : Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - offerName::String : Название товара.
    - price::Float64 : Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
    - buyerPrice::Float64 : Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    - buyerPriceBeforeDiscount::Float64 : Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    - priceBeforeDiscount::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    - count::Int64 : Количество единиц товара.
    - vat::OrderVatType
    - shopSku::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - subsidy::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    - partnerWarehouseId::String : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    - promos::Vector{OrderItemPromoDTO} : Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    - instances::Vector{OrderItemInstanceDTO} : Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
    - details::Vector{OrderItemDetailDTO} : Информация об удалении товара из заказа. 
    - subsidies::Vector{OrderItemSubsidyDTO} : Список субсидий по типам.
    - requiredInstanceTypes::Vector{OrderItemInstanceType} : Список необходимых маркировок товара.
"""
Base.@kwdef mutable struct OrderItemDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    offerId::Union{Nothing, String} = nothing
    offerName::Union{Nothing, String} = nothing
    price::Union{Nothing, Float64} = nothing
    buyerPrice::Union{Nothing, Float64} = nothing
    buyerPriceBeforeDiscount::Union{Nothing, Float64} = nothing
    priceBeforeDiscount::Union{Nothing, Float64} = nothing
    count::Union{Nothing, Int64} = nothing
    vat = nothing # spec type: Union{ Nothing, OrderVatType }
    shopSku::Union{Nothing, String} = nothing
    subsidy::Union{Nothing, Float64} = nothing
    partnerWarehouseId::Union{Nothing, String} = nothing
    promos::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemPromoDTO} }
    instances::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemInstanceDTO} }
    details::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemDetailDTO} }
    subsidies::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemSubsidyDTO} }
    requiredInstanceTypes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemInstanceType} }

    function OrderItemDTO(id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, priceBeforeDiscount, count, vat, shopSku, subsidy, partnerWarehouseId, promos, instances, details, subsidies, requiredInstanceTypes, )
        OpenAPI.validate_property(OrderItemDTO, Symbol("id"), id)
        OpenAPI.validate_property(OrderItemDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(OrderItemDTO, Symbol("offerName"), offerName)
        OpenAPI.validate_property(OrderItemDTO, Symbol("price"), price)
        OpenAPI.validate_property(OrderItemDTO, Symbol("buyerPrice"), buyerPrice)
        OpenAPI.validate_property(OrderItemDTO, Symbol("buyerPriceBeforeDiscount"), buyerPriceBeforeDiscount)
        OpenAPI.validate_property(OrderItemDTO, Symbol("priceBeforeDiscount"), priceBeforeDiscount)
        OpenAPI.validate_property(OrderItemDTO, Symbol("count"), count)
        OpenAPI.validate_property(OrderItemDTO, Symbol("vat"), vat)
        OpenAPI.validate_property(OrderItemDTO, Symbol("shopSku"), shopSku)
        OpenAPI.validate_property(OrderItemDTO, Symbol("subsidy"), subsidy)
        OpenAPI.validate_property(OrderItemDTO, Symbol("partnerWarehouseId"), partnerWarehouseId)
        OpenAPI.validate_property(OrderItemDTO, Symbol("promos"), promos)
        OpenAPI.validate_property(OrderItemDTO, Symbol("instances"), instances)
        OpenAPI.validate_property(OrderItemDTO, Symbol("details"), details)
        OpenAPI.validate_property(OrderItemDTO, Symbol("subsidies"), subsidies)
        OpenAPI.validate_property(OrderItemDTO, Symbol("requiredInstanceTypes"), requiredInstanceTypes)
        return new(id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, priceBeforeDiscount, count, vat, shopSku, subsidy, partnerWarehouseId, promos, instances, details, subsidies, requiredInstanceTypes, )
    end
end # type OrderItemDTO

const _property_types_OrderItemDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("offerId")=>"String", Symbol("offerName")=>"String", Symbol("price")=>"Float64", Symbol("buyerPrice")=>"Float64", Symbol("buyerPriceBeforeDiscount")=>"Float64", Symbol("priceBeforeDiscount")=>"Float64", Symbol("count")=>"Int64", Symbol("vat")=>"OrderVatType", Symbol("shopSku")=>"String", Symbol("subsidy")=>"Float64", Symbol("partnerWarehouseId")=>"String", Symbol("promos")=>"Vector{OrderItemPromoDTO}", Symbol("instances")=>"Vector{OrderItemInstanceDTO}", Symbol("details")=>"Vector{OrderItemDetailDTO}", Symbol("subsidies")=>"Vector{OrderItemSubsidyDTO}", Symbol("requiredInstanceTypes")=>"Vector{OrderItemInstanceType}", )
OpenAPI.property_type(::Type{ OrderItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderItemDTO[name]))}

function check_required(o::OrderItemDTO)
    true
end

function OpenAPI.validate_property(::Type{ OrderItemDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "int64")
    end
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "OrderItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OrderItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OrderItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("price")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "decimal")
    end
    if name === Symbol("buyerPrice")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "decimal")
    end
    if name === Symbol("buyerPriceBeforeDiscount")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "decimal")
    end
    if name === Symbol("priceBeforeDiscount")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "decimal")
    end
    if name === Symbol("shopSku")
        OpenAPI.validate_param(name, "OrderItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OrderItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OrderItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("subsidy")
        OpenAPI.validate_param(name, "OrderItemDTO", :format, val, "decimal")
    end
end
