# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GenerateGoodsTurnoverRequest
Данные, необходимые для генерации отчета. 

    GenerateGoodsTurnoverRequest(;
        campaignId=nothing,
        date=nothing,
    )

    - campaignId::Int64 : Идентификатор кампании.
    - date::Date : Дата, за которую нужно рассчитать оборачиваемость. Если параметр не указан, используется текущая дата.
"""
Base.@kwdef mutable struct GenerateGoodsTurnoverRequest <: OpenAPI.APIModel
    campaignId::Union{Nothing, Int64} = nothing
    date::Union{Nothing, Date} = nothing

    function GenerateGoodsTurnoverRequest(campaignId, date, )
        OpenAPI.validate_property(GenerateGoodsTurnoverRequest, Symbol("campaignId"), campaignId)
        OpenAPI.validate_property(GenerateGoodsTurnoverRequest, Symbol("date"), date)
        return new(campaignId, date, )
    end
end # type GenerateGoodsTurnoverRequest

const _property_types_GenerateGoodsTurnoverRequest = Dict{Symbol,String}(Symbol("campaignId")=>"Int64", Symbol("date")=>"Date", )
OpenAPI.property_type(::Type{ GenerateGoodsTurnoverRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GenerateGoodsTurnoverRequest[name]))}

function check_required(o::GenerateGoodsTurnoverRequest)
    o.campaignId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GenerateGoodsTurnoverRequest }, name::Symbol, val)
    if name === Symbol("campaignId")
        OpenAPI.validate_param(name, "GenerateGoodsTurnoverRequest", :format, val, "int64")
    end
    if name === Symbol("date")
        OpenAPI.validate_param(name, "GenerateGoodsTurnoverRequest", :format, val, "date")
    end
end
