// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FeedIndexLogsErrorDTO,
    FeedIndexLogsErrorDTOFromJSON,
    FeedIndexLogsErrorDTOToJSON,
    FeedIndexLogsIndexType,
    FeedIndexLogsIndexTypeFromJSON,
    FeedIndexLogsIndexTypeToJSON,
    FeedIndexLogsOffersDTO,
    FeedIndexLogsOffersDTOFromJSON,
    FeedIndexLogsOffersDTOToJSON,
    FeedIndexLogsStatusType,
    FeedIndexLogsStatusTypeFromJSON,
    FeedIndexLogsStatusTypeToJSON,
} from './';

/**
 * Список отчетов по индексации прайс-листа.
 * @export
 * @interface FeedIndexLogsRecordDTO
 */
export interface FeedIndexLogsRecordDTO  {
    /**
     * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    downloadTime?: Date;
    /**
     * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    fileTime?: Date;
    /**
     * Идентификатор индексации.
     * @type {number}
     * @memberof FeedIndexLogsRecordDTO
     */
    generationId?: number;
    /**
     * 
     * @type {FeedIndexLogsIndexType}
     * @memberof FeedIndexLogsRecordDTO
     */
    indexType?: FeedIndexLogsIndexType;
    /**
     * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    publishedTime?: Date;
    /**
     * 
     * @type {FeedIndexLogsStatusType}
     * @memberof FeedIndexLogsRecordDTO
     */
    status?: FeedIndexLogsStatusType;
    /**
     * 
     * @type {FeedIndexLogsErrorDTO}
     * @memberof FeedIndexLogsRecordDTO
     */
    error?: FeedIndexLogsErrorDTO;
    /**
     * 
     * @type {FeedIndexLogsOffersDTO}
     * @memberof FeedIndexLogsRecordDTO
     */
    offers?: FeedIndexLogsOffersDTO;
}

export function FeedIndexLogsRecordDTOFromJSON(json: any): FeedIndexLogsRecordDTO {
    return {
        'downloadTime': !exists(json, 'downloadTime') ? undefined : new Date(json['downloadTime']),
        'fileTime': !exists(json, 'fileTime') ? undefined : new Date(json['fileTime']),
        'generationId': !exists(json, 'generationId') ? undefined : json['generationId'],
        'indexType': !exists(json, 'indexType') ? undefined : FeedIndexLogsIndexTypeFromJSON(json['indexType']),
        'publishedTime': !exists(json, 'publishedTime') ? undefined : new Date(json['publishedTime']),
        'status': !exists(json, 'status') ? undefined : FeedIndexLogsStatusTypeFromJSON(json['status']),
        'error': !exists(json, 'error') ? undefined : FeedIndexLogsErrorDTOFromJSON(json['error']),
        'offers': !exists(json, 'offers') ? undefined : FeedIndexLogsOffersDTOFromJSON(json['offers']),
    };
}

export function FeedIndexLogsRecordDTOToJSON(value?: FeedIndexLogsRecordDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'downloadTime': value.downloadTime === undefined ? undefined : value.downloadTime.toISOString(),
        'fileTime': value.fileTime === undefined ? undefined : value.fileTime.toISOString(),
        'generationId': value.generationId,
        'indexType': FeedIndexLogsIndexTypeToJSON(value.indexType),
        'publishedTime': value.publishedTime === undefined ? undefined : value.publishedTime.toISOString(),
        'status': FeedIndexLogsStatusTypeToJSON(value.status),
        'error': FeedIndexLogsErrorDTOToJSON(value.error),
        'offers': FeedIndexLogsOffersDTOToJSON(value.offers),
    };
}



