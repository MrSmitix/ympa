# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateOrderItemRequest
Запрос на обновление состава заказа.

    UpdateOrderItemRequest(;
        items=nothing,
        reason=nothing,
    )

    - items::Vector{OrderItemModificationDTO} : Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
    - reason::OrderItemsModificationRequestReasonType
"""
Base.@kwdef mutable struct UpdateOrderItemRequest <: OpenAPI.APIModel
    items::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemModificationDTO} }
    reason = nothing # spec type: Union{ Nothing, OrderItemsModificationRequestReasonType }

    function UpdateOrderItemRequest(items, reason, )
        OpenAPI.validate_property(UpdateOrderItemRequest, Symbol("items"), items)
        OpenAPI.validate_property(UpdateOrderItemRequest, Symbol("reason"), reason)
        return new(items, reason, )
    end
end # type UpdateOrderItemRequest

const _property_types_UpdateOrderItemRequest = Dict{Symbol,String}(Symbol("items")=>"Vector{OrderItemModificationDTO}", Symbol("reason")=>"OrderItemsModificationRequestReasonType", )
OpenAPI.property_type(::Type{ UpdateOrderItemRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateOrderItemRequest[name]))}

function check_required(o::UpdateOrderItemRequest)
    o.items === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdateOrderItemRequest }, name::Symbol, val)
    if name === Symbol("items")
        OpenAPI.validate_param(name, "UpdateOrderItemRequest", :minItems, val, 1)
    end
end
