# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetWarehouseStocksRequest
Фильтры для запроса остатков. 

    GetWarehouseStocksRequest(;
        withTurnover=false,
        archived=nothing,
        offerIds=nothing,
    )

    - withTurnover::Bool : **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;. 
    - archived::Bool : Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве. 
    - offerIds::Vector{String} : Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}    
"""
Base.@kwdef mutable struct GetWarehouseStocksRequest <: OpenAPI.APIModel
    withTurnover::Union{Nothing, Bool} = false
    archived::Union{Nothing, Bool} = nothing
    offerIds::Union{Nothing, Vector{String}} = nothing

    function GetWarehouseStocksRequest(withTurnover, archived, offerIds, )
        OpenAPI.validate_property(GetWarehouseStocksRequest, Symbol("withTurnover"), withTurnover)
        OpenAPI.validate_property(GetWarehouseStocksRequest, Symbol("archived"), archived)
        OpenAPI.validate_property(GetWarehouseStocksRequest, Symbol("offerIds"), offerIds)
        return new(withTurnover, archived, offerIds, )
    end
end # type GetWarehouseStocksRequest

const _property_types_GetWarehouseStocksRequest = Dict{Symbol,String}(Symbol("withTurnover")=>"Bool", Symbol("archived")=>"Bool", Symbol("offerIds")=>"Vector{String}", )
OpenAPI.property_type(::Type{ GetWarehouseStocksRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetWarehouseStocksRequest[name]))}

function check_required(o::GetWarehouseStocksRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetWarehouseStocksRequest }, name::Symbol, val)
    if name === Symbol("offerIds")
        OpenAPI.validate_param(name, "GetWarehouseStocksRequest", :maxItems, val, 500)
        OpenAPI.validate_param(name, "GetWarehouseStocksRequest", :uniqueItems, val, true)
    end
end
