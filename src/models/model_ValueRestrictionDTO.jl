# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ValueRestrictionDTO
Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 

    ValueRestrictionDTO(;
        limitingParameterId=nothing,
        limitedValues=nothing,
    )

    - limitingParameterId::Int64 : Идентификатор ограничивающей характеристики.
    - limitedValues::Vector{OptionValuesLimitedDTO} : Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
"""
Base.@kwdef mutable struct ValueRestrictionDTO <: OpenAPI.APIModel
    limitingParameterId::Union{Nothing, Int64} = nothing
    limitedValues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OptionValuesLimitedDTO} }

    function ValueRestrictionDTO(limitingParameterId, limitedValues, )
        OpenAPI.validate_property(ValueRestrictionDTO, Symbol("limitingParameterId"), limitingParameterId)
        OpenAPI.validate_property(ValueRestrictionDTO, Symbol("limitedValues"), limitedValues)
        return new(limitingParameterId, limitedValues, )
    end
end # type ValueRestrictionDTO

const _property_types_ValueRestrictionDTO = Dict{Symbol,String}(Symbol("limitingParameterId")=>"Int64", Symbol("limitedValues")=>"Vector{OptionValuesLimitedDTO}", )
OpenAPI.property_type(::Type{ ValueRestrictionDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ValueRestrictionDTO[name]))}

function check_required(o::ValueRestrictionDTO)
    o.limitingParameterId === nothing && (return false)
    o.limitedValues === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ValueRestrictionDTO }, name::Symbol, val)
    if name === Symbol("limitingParameterId")
        OpenAPI.validate_param(name, "ValueRestrictionDTO", :format, val, "int64")
    end
end
