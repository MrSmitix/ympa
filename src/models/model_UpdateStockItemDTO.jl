# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateStockItemDTO
Информация об остатках товара. 

    UpdateStockItemDTO(;
        count=nothing,
        updatedAt=nothing,
    )

    - count::Int64 : Количество доступного товара. 
    - updatedAt::ZonedDateTime : Дата и время последнего обновления информации об остатках. &lt;br&gt;&lt;br&gt; Если вы не передали параметр &#x60;updatedAt&#x60;, используется текущее время. &lt;br&gt;&lt;br&gt; Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
"""
Base.@kwdef mutable struct UpdateStockItemDTO <: OpenAPI.APIModel
    count::Union{Nothing, Int64} = nothing
    updatedAt::Union{Nothing, ZonedDateTime} = nothing

    function UpdateStockItemDTO(count, updatedAt, )
        OpenAPI.validate_property(UpdateStockItemDTO, Symbol("count"), count)
        OpenAPI.validate_property(UpdateStockItemDTO, Symbol("updatedAt"), updatedAt)
        return new(count, updatedAt, )
    end
end # type UpdateStockItemDTO

const _property_types_UpdateStockItemDTO = Dict{Symbol,String}(Symbol("count")=>"Int64", Symbol("updatedAt")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ UpdateStockItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateStockItemDTO[name]))}

function check_required(o::UpdateStockItemDTO)
    o.count === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdateStockItemDTO }, name::Symbol, val)
    if name === Symbol("count")
        OpenAPI.validate_param(name, "UpdateStockItemDTO", :format, val, "int64")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "UpdateStockItemDTO", :maximum, val, 2000000000, false)
        OpenAPI.validate_param(name, "UpdateStockItemDTO", :minimum, val, 0, false)
    end
    if name === Symbol("updatedAt")
        OpenAPI.validate_param(name, "UpdateStockItemDTO", :format, val, "date-time")
    end
end
