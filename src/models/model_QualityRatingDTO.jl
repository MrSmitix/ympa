# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""QualityRatingDTO
Информация об индексе качества.

    QualityRatingDTO(;
        rating=nothing,
        calculationDate=nothing,
        components=nothing,
    )

    - rating::Int64 : Значение индекса качества.
    - calculationDate::Date : Дата вычисления.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;. 
    - components::Vector{QualityRatingComponentDTO} : Составляющие индекса качества.
"""
Base.@kwdef mutable struct QualityRatingDTO <: OpenAPI.APIModel
    rating::Union{Nothing, Int64} = nothing
    calculationDate::Union{Nothing, Date} = nothing
    components::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QualityRatingComponentDTO} }

    function QualityRatingDTO(rating, calculationDate, components, )
        OpenAPI.validate_property(QualityRatingDTO, Symbol("rating"), rating)
        OpenAPI.validate_property(QualityRatingDTO, Symbol("calculationDate"), calculationDate)
        OpenAPI.validate_property(QualityRatingDTO, Symbol("components"), components)
        return new(rating, calculationDate, components, )
    end
end # type QualityRatingDTO

const _property_types_QualityRatingDTO = Dict{Symbol,String}(Symbol("rating")=>"Int64", Symbol("calculationDate")=>"Date", Symbol("components")=>"Vector{QualityRatingComponentDTO}", )
OpenAPI.property_type(::Type{ QualityRatingDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QualityRatingDTO[name]))}

function check_required(o::QualityRatingDTO)
    o.rating === nothing && (return false)
    o.calculationDate === nothing && (return false)
    o.components === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ QualityRatingDTO }, name::Symbol, val)
    if name === Symbol("rating")
        OpenAPI.validate_param(name, "QualityRatingDTO", :format, val, "int64")
    end
    if name === Symbol("rating")
        OpenAPI.validate_param(name, "QualityRatingDTO", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "QualityRatingDTO", :minimum, val, 0, false)
    end
    if name === Symbol("calculationDate")
        OpenAPI.validate_param(name, "QualityRatingDTO", :format, val, "date")
    end
end
