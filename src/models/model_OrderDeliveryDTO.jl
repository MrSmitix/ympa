# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderDeliveryDTO
Информация о доставке.

    OrderDeliveryDTO(;
        id=nothing,
        type=nothing,
        serviceName=nothing,
        price=nothing,
        deliveryPartnerType=nothing,
        courier=nothing,
        dates=nothing,
        region=nothing,
        address=nothing,
        vat=nothing,
        deliveryServiceId=nothing,
        liftType=nothing,
        liftPrice=nothing,
        outletCode=nothing,
        outletStorageLimitDate=nothing,
        dispatchType=nothing,
        tracks=nothing,
        shipments=nothing,
        estimated=nothing,
        eacType=nothing,
        eacCode=nothing,
    )

    - id::String : Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    - type::OrderDeliveryType
    - serviceName::String : Наименование службы доставки.
    - price::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
    - deliveryPartnerType::OrderDeliveryPartnerType
    - courier::OrderCourierDTO
    - dates::OrderDeliveryDatesDTO
    - region::RegionDTO
    - address::OrderDeliveryAddressDTO
    - vat::OrderVatType
    - deliveryServiceId::Int64 : Идентификатор службы доставки.
    - liftType::OrderLiftType
    - liftPrice::Float64 : Стоимость подъема на этаж.
    - outletCode::String : Идентификатор пункта самовывоза, присвоенный магазином.
    - outletStorageLimitDate::String : Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    - dispatchType::OrderDeliveryDispatchType
    - tracks::Vector{OrderTrackDTO} : Информация для отслеживания перемещений посылки.
    - shipments::Vector{OrderShipmentDTO} : Информация о посылках.
    - estimated::Bool : Приблизительная ли дата доставки.
    - eacType::OrderDeliveryEacType
    - eacCode::String : Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
"""
Base.@kwdef mutable struct OrderDeliveryDTO <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, OrderDeliveryType }
    serviceName::Union{Nothing, String} = nothing
    price::Union{Nothing, Float64} = nothing
    deliveryPartnerType = nothing # spec type: Union{ Nothing, OrderDeliveryPartnerType }
    courier = nothing # spec type: Union{ Nothing, OrderCourierDTO }
    dates = nothing # spec type: Union{ Nothing, OrderDeliveryDatesDTO }
    region = nothing # spec type: Union{ Nothing, RegionDTO }
    address = nothing # spec type: Union{ Nothing, OrderDeliveryAddressDTO }
    vat = nothing # spec type: Union{ Nothing, OrderVatType }
    deliveryServiceId::Union{Nothing, Int64} = nothing
    liftType = nothing # spec type: Union{ Nothing, OrderLiftType }
    liftPrice::Union{Nothing, Float64} = nothing
    outletCode::Union{Nothing, String} = nothing
    outletStorageLimitDate::Union{Nothing, String} = nothing
    dispatchType = nothing # spec type: Union{ Nothing, OrderDeliveryDispatchType }
    tracks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderTrackDTO} }
    shipments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderShipmentDTO} }
    estimated::Union{Nothing, Bool} = nothing
    eacType = nothing # spec type: Union{ Nothing, OrderDeliveryEacType }
    eacCode::Union{Nothing, String} = nothing

    function OrderDeliveryDTO(id, type, serviceName, price, deliveryPartnerType, courier, dates, region, address, vat, deliveryServiceId, liftType, liftPrice, outletCode, outletStorageLimitDate, dispatchType, tracks, shipments, estimated, eacType, eacCode, )
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("id"), id)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("type"), type)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("serviceName"), serviceName)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("price"), price)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("deliveryPartnerType"), deliveryPartnerType)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("courier"), courier)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("dates"), dates)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("region"), region)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("address"), address)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("vat"), vat)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("deliveryServiceId"), deliveryServiceId)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("liftType"), liftType)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("liftPrice"), liftPrice)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("outletCode"), outletCode)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("outletStorageLimitDate"), outletStorageLimitDate)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("dispatchType"), dispatchType)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("tracks"), tracks)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("shipments"), shipments)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("estimated"), estimated)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("eacType"), eacType)
        OpenAPI.validate_property(OrderDeliveryDTO, Symbol("eacCode"), eacCode)
        return new(id, type, serviceName, price, deliveryPartnerType, courier, dates, region, address, vat, deliveryServiceId, liftType, liftPrice, outletCode, outletStorageLimitDate, dispatchType, tracks, shipments, estimated, eacType, eacCode, )
    end
end # type OrderDeliveryDTO

const _property_types_OrderDeliveryDTO = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"OrderDeliveryType", Symbol("serviceName")=>"String", Symbol("price")=>"Float64", Symbol("deliveryPartnerType")=>"OrderDeliveryPartnerType", Symbol("courier")=>"OrderCourierDTO", Symbol("dates")=>"OrderDeliveryDatesDTO", Symbol("region")=>"RegionDTO", Symbol("address")=>"OrderDeliveryAddressDTO", Symbol("vat")=>"OrderVatType", Symbol("deliveryServiceId")=>"Int64", Symbol("liftType")=>"OrderLiftType", Symbol("liftPrice")=>"Float64", Symbol("outletCode")=>"String", Symbol("outletStorageLimitDate")=>"String", Symbol("dispatchType")=>"OrderDeliveryDispatchType", Symbol("tracks")=>"Vector{OrderTrackDTO}", Symbol("shipments")=>"Vector{OrderShipmentDTO}", Symbol("estimated")=>"Bool", Symbol("eacType")=>"OrderDeliveryEacType", Symbol("eacCode")=>"String", )
OpenAPI.property_type(::Type{ OrderDeliveryDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderDeliveryDTO[name]))}

function check_required(o::OrderDeliveryDTO)
    true
end

function OpenAPI.validate_property(::Type{ OrderDeliveryDTO }, name::Symbol, val)
    if name === Symbol("price")
        OpenAPI.validate_param(name, "OrderDeliveryDTO", :format, val, "decimal")
    end
    if name === Symbol("deliveryServiceId")
        OpenAPI.validate_param(name, "OrderDeliveryDTO", :format, val, "int64")
    end
    if name === Symbol("liftPrice")
        OpenAPI.validate_param(name, "OrderDeliveryDTO", :format, val, "decimal")
    end
    if name === Symbol("outletStorageLimitDate")
        OpenAPI.validate_param(name, "OrderDeliveryDTO", :format, val, "date-dd-MM-yyyy")
    end
end
