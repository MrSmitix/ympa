# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WarehouseOfferDTO
Информация об остатках товара.

    WarehouseOfferDTO(;
        offerId=nothing,
        turnoverSummary=nothing,
        stocks=nothing,
        updatedAt=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - turnoverSummary::TurnoverDTO
    - stocks::Vector{WarehouseStockDTO} : Информация об остатках.
    - updatedAt::ZonedDateTime : Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, &#x60;2023-11-21T00:42:42+03:00&#x60;. 
"""
Base.@kwdef mutable struct WarehouseOfferDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    turnoverSummary = nothing # spec type: Union{ Nothing, TurnoverDTO }
    stocks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WarehouseStockDTO} }
    updatedAt::Union{Nothing, ZonedDateTime} = nothing

    function WarehouseOfferDTO(offerId, turnoverSummary, stocks, updatedAt, )
        OpenAPI.validate_property(WarehouseOfferDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(WarehouseOfferDTO, Symbol("turnoverSummary"), turnoverSummary)
        OpenAPI.validate_property(WarehouseOfferDTO, Symbol("stocks"), stocks)
        OpenAPI.validate_property(WarehouseOfferDTO, Symbol("updatedAt"), updatedAt)
        return new(offerId, turnoverSummary, stocks, updatedAt, )
    end
end # type WarehouseOfferDTO

const _property_types_WarehouseOfferDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("turnoverSummary")=>"TurnoverDTO", Symbol("stocks")=>"Vector{WarehouseStockDTO}", Symbol("updatedAt")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ WarehouseOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WarehouseOfferDTO[name]))}

function check_required(o::WarehouseOfferDTO)
    o.offerId === nothing && (return false)
    o.stocks === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ WarehouseOfferDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "WarehouseOfferDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "WarehouseOfferDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "WarehouseOfferDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("updatedAt")
        OpenAPI.validate_param(name, "WarehouseOfferDTO", :format, val, "date-time")
    end
end
