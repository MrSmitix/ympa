# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BriefOrderItemDTO
Информация о маркированном товаре.

    BriefOrderItemDTO(;
        id=nothing,
        vat=nothing,
        count=nothing,
        price=nothing,
        offerName=nothing,
        offerId=nothing,
        instances=nothing,
    )

    - id::Int64 : Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    - vat::OrderVatType
    - count::Int64 : Количество единиц товара.
    - price::Float64 : Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
    - offerName::String : Название товара.
    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - instances::Vector{OrderItemInstanceDTO} : Переданные вами коды маркировки.
"""
Base.@kwdef mutable struct BriefOrderItemDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    vat = nothing # spec type: Union{ Nothing, OrderVatType }
    count::Union{Nothing, Int64} = nothing
    price::Union{Nothing, Float64} = nothing
    offerName::Union{Nothing, String} = nothing
    offerId::Union{Nothing, String} = nothing
    instances::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderItemInstanceDTO} }

    function BriefOrderItemDTO(id, vat, count, price, offerName, offerId, instances, )
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("id"), id)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("vat"), vat)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("count"), count)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("price"), price)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("offerName"), offerName)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(BriefOrderItemDTO, Symbol("instances"), instances)
        return new(id, vat, count, price, offerName, offerId, instances, )
    end
end # type BriefOrderItemDTO

const _property_types_BriefOrderItemDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("vat")=>"OrderVatType", Symbol("count")=>"Int64", Symbol("price")=>"Float64", Symbol("offerName")=>"String", Symbol("offerId")=>"String", Symbol("instances")=>"Vector{OrderItemInstanceDTO}", )
OpenAPI.property_type(::Type{ BriefOrderItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BriefOrderItemDTO[name]))}

function check_required(o::BriefOrderItemDTO)
    true
end

function OpenAPI.validate_property(::Type{ BriefOrderItemDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "BriefOrderItemDTO", :format, val, "int64")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "BriefOrderItemDTO", :format, val, "int32")
    end
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "BriefOrderItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "BriefOrderItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "BriefOrderItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
end
