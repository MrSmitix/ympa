# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedIndexLogsOffersDTO
Информация о предложениях прайс-листа.

    FeedIndexLogsOffersDTO(;
        rejectedCount=nothing,
        totalCount=nothing,
    )

    - rejectedCount::Int64 : Количество предложений, который не опубликованы на Маркете из-за найденных ошибок.
    - totalCount::Int64 : Количество предложений в прайс-листе.
"""
Base.@kwdef mutable struct FeedIndexLogsOffersDTO <: OpenAPI.APIModel
    rejectedCount::Union{Nothing, Int64} = nothing
    totalCount::Union{Nothing, Int64} = nothing

    function FeedIndexLogsOffersDTO(rejectedCount, totalCount, )
        OpenAPI.validate_property(FeedIndexLogsOffersDTO, Symbol("rejectedCount"), rejectedCount)
        OpenAPI.validate_property(FeedIndexLogsOffersDTO, Symbol("totalCount"), totalCount)
        return new(rejectedCount, totalCount, )
    end
end # type FeedIndexLogsOffersDTO

const _property_types_FeedIndexLogsOffersDTO = Dict{Symbol,String}(Symbol("rejectedCount")=>"Int64", Symbol("totalCount")=>"Int64", )
OpenAPI.property_type(::Type{ FeedIndexLogsOffersDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedIndexLogsOffersDTO[name]))}

function check_required(o::FeedIndexLogsOffersDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedIndexLogsOffersDTO }, name::Symbol, val)
    if name === Symbol("rejectedCount")
        OpenAPI.validate_param(name, "FeedIndexLogsOffersDTO", :format, val, "int64")
    end
    if name === Symbol("totalCount")
        OpenAPI.validate_param(name, "FeedIndexLogsOffersDTO", :format, val, "int64")
    end
end
