# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GenerateShowsSalesReportRequest
Данные, необходимые для генерации отчета.

    GenerateShowsSalesReportRequest(;
        businessId=nothing,
        campaignId=nothing,
        dateFrom=nothing,
        dateTo=nothing,
        grouping=nothing,
    )

    - businessId::Int64 : Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    - campaignId::Int64 : Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
    - dateFrom::Date : Начало периода, включительно.
    - dateTo::Date : Конец периода, включительно.
    - grouping::ShowsSalesGroupingType
"""
Base.@kwdef mutable struct GenerateShowsSalesReportRequest <: OpenAPI.APIModel
    businessId::Union{Nothing, Int64} = nothing
    campaignId::Union{Nothing, Int64} = nothing
    dateFrom::Union{Nothing, Date} = nothing
    dateTo::Union{Nothing, Date} = nothing
    grouping = nothing # spec type: Union{ Nothing, ShowsSalesGroupingType }

    function GenerateShowsSalesReportRequest(businessId, campaignId, dateFrom, dateTo, grouping, )
        OpenAPI.validate_property(GenerateShowsSalesReportRequest, Symbol("businessId"), businessId)
        OpenAPI.validate_property(GenerateShowsSalesReportRequest, Symbol("campaignId"), campaignId)
        OpenAPI.validate_property(GenerateShowsSalesReportRequest, Symbol("dateFrom"), dateFrom)
        OpenAPI.validate_property(GenerateShowsSalesReportRequest, Symbol("dateTo"), dateTo)
        OpenAPI.validate_property(GenerateShowsSalesReportRequest, Symbol("grouping"), grouping)
        return new(businessId, campaignId, dateFrom, dateTo, grouping, )
    end
end # type GenerateShowsSalesReportRequest

const _property_types_GenerateShowsSalesReportRequest = Dict{Symbol,String}(Symbol("businessId")=>"Int64", Symbol("campaignId")=>"Int64", Symbol("dateFrom")=>"Date", Symbol("dateTo")=>"Date", Symbol("grouping")=>"ShowsSalesGroupingType", )
OpenAPI.property_type(::Type{ GenerateShowsSalesReportRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GenerateShowsSalesReportRequest[name]))}

function check_required(o::GenerateShowsSalesReportRequest)
    o.dateFrom === nothing && (return false)
    o.dateTo === nothing && (return false)
    o.grouping === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GenerateShowsSalesReportRequest }, name::Symbol, val)
    if name === Symbol("businessId")
        OpenAPI.validate_param(name, "GenerateShowsSalesReportRequest", :format, val, "int64")
    end
    if name === Symbol("campaignId")
        OpenAPI.validate_param(name, "GenerateShowsSalesReportRequest", :format, val, "int64")
    end
    if name === Symbol("dateFrom")
        OpenAPI.validate_param(name, "GenerateShowsSalesReportRequest", :format, val, "date")
    end
    if name === Symbol("dateTo")
        OpenAPI.validate_param(name, "GenerateShowsSalesReportRequest", :format, val, "date")
    end
end
