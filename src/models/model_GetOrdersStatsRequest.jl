# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetOrdersStatsRequest
Запрос информации по заказам.

    GetOrdersStatsRequest(;
        dateFrom=nothing,
        dateTo=nothing,
        updateFrom=nothing,
        updateTo=nothing,
        orders=nothing,
        statuses=nothing,
        hasCis=nothing,
    )

    - dateFrom::Date : Начальная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    - dateTo::Date : Конечная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    - updateFrom::Date : Начальная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    - updateTo::Date : Конечная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    - orders::Vector{Int64} : Список идентификаторов заказов.
    - statuses::Vector{OrderStatsStatusType} : Список статусов заказов.
    - hasCis::Bool : Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
"""
Base.@kwdef mutable struct GetOrdersStatsRequest <: OpenAPI.APIModel
    dateFrom::Union{Nothing, Date} = nothing
    dateTo::Union{Nothing, Date} = nothing
    updateFrom::Union{Nothing, Date} = nothing
    updateTo::Union{Nothing, Date} = nothing
    orders::Union{Nothing, Vector{Int64}} = nothing
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrderStatsStatusType} }
    hasCis::Union{Nothing, Bool} = nothing

    function GetOrdersStatsRequest(dateFrom, dateTo, updateFrom, updateTo, orders, statuses, hasCis, )
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("dateFrom"), dateFrom)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("dateTo"), dateTo)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("updateFrom"), updateFrom)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("updateTo"), updateTo)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("orders"), orders)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("statuses"), statuses)
        OpenAPI.validate_property(GetOrdersStatsRequest, Symbol("hasCis"), hasCis)
        return new(dateFrom, dateTo, updateFrom, updateTo, orders, statuses, hasCis, )
    end
end # type GetOrdersStatsRequest

const _property_types_GetOrdersStatsRequest = Dict{Symbol,String}(Symbol("dateFrom")=>"Date", Symbol("dateTo")=>"Date", Symbol("updateFrom")=>"Date", Symbol("updateTo")=>"Date", Symbol("orders")=>"Vector{Int64}", Symbol("statuses")=>"Vector{OrderStatsStatusType}", Symbol("hasCis")=>"Bool", )
OpenAPI.property_type(::Type{ GetOrdersStatsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetOrdersStatsRequest[name]))}

function check_required(o::GetOrdersStatsRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetOrdersStatsRequest }, name::Symbol, val)
    if name === Symbol("dateFrom")
        OpenAPI.validate_param(name, "GetOrdersStatsRequest", :format, val, "date")
    end
    if name === Symbol("dateTo")
        OpenAPI.validate_param(name, "GetOrdersStatsRequest", :format, val, "date")
    end
    if name === Symbol("updateFrom")
        OpenAPI.validate_param(name, "GetOrdersStatsRequest", :format, val, "date")
    end
    if name === Symbol("updateTo")
        OpenAPI.validate_param(name, "GetOrdersStatsRequest", :format, val, "date")
    end
end
