# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrdersShipmentInfoDTO
Годные/негодные ярлыки по заказам в отгрузке.

    OrdersShipmentInfoDTO(;
        orderIdsWithLabels=nothing,
        orderIdsWithoutLabels=nothing,
    )

    - orderIdsWithLabels::Vector{Int64} : Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки.
    - orderIdsWithoutLabels::Vector{Int64} : Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки.
"""
Base.@kwdef mutable struct OrdersShipmentInfoDTO <: OpenAPI.APIModel
    orderIdsWithLabels::Union{Nothing, Vector{Int64}} = nothing
    orderIdsWithoutLabels::Union{Nothing, Vector{Int64}} = nothing

    function OrdersShipmentInfoDTO(orderIdsWithLabels, orderIdsWithoutLabels, )
        OpenAPI.validate_property(OrdersShipmentInfoDTO, Symbol("orderIdsWithLabels"), orderIdsWithLabels)
        OpenAPI.validate_property(OrdersShipmentInfoDTO, Symbol("orderIdsWithoutLabels"), orderIdsWithoutLabels)
        return new(orderIdsWithLabels, orderIdsWithoutLabels, )
    end
end # type OrdersShipmentInfoDTO

const _property_types_OrdersShipmentInfoDTO = Dict{Symbol,String}(Symbol("orderIdsWithLabels")=>"Vector{Int64}", Symbol("orderIdsWithoutLabels")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ OrdersShipmentInfoDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrdersShipmentInfoDTO[name]))}

function check_required(o::OrdersShipmentInfoDTO)
    o.orderIdsWithLabels === nothing && (return false)
    o.orderIdsWithoutLabels === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OrdersShipmentInfoDTO }, name::Symbol, val)
    if name === Symbol("orderIdsWithLabels")
        OpenAPI.validate_param(name, "OrdersShipmentInfoDTO", :uniqueItems, val, true)
    end
    if name === Symbol("orderIdsWithoutLabels")
        OpenAPI.validate_param(name, "OrdersShipmentInfoDTO", :uniqueItems, val, true)
    end
end
