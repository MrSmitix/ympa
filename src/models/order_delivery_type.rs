/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderDeliveryType : Способ доставки заказа:  * `DELIVERY` — курьерская доставка.  * `PICKUP` — самовывоз.  * `POST` — почта.  * `DIGITAL` — для цифровых товаров.  * `UNKNOWN` — неизвестный тип. 
/// Способ доставки заказа:  * `DELIVERY` — курьерская доставка.  * `PICKUP` — самовывоз.  * `POST` — почта.  * `DIGITAL` — для цифровых товаров.  * `UNKNOWN` — неизвестный тип. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderDeliveryType {
    #[serde(rename = "DELIVERY")]
    Delivery,
    #[serde(rename = "PICKUP")]
    Pickup,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "DIGITAL")]
    Digital,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl std::fmt::Display for OrderDeliveryType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Delivery => write!(f, "DELIVERY"),
            Self::Pickup => write!(f, "PICKUP"),
            Self::Post => write!(f, "POST"),
            Self::Digital => write!(f, "DIGITAL"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for OrderDeliveryType {
    fn default() -> OrderDeliveryType {
        Self::Delivery
    }
}

