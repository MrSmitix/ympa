# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrdersStatsItemDTO
Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 

    OrdersStatsItemDTO(;
        offerName=nothing,
        marketSku=nothing,
        shopSku=nothing,
        count=nothing,
        prices=nothing,
        warehouse=nothing,
        details=nothing,
        cisList=nothing,
        initialCount=nothing,
        bidFee=nothing,
        cofinanceThreshold=nothing,
        cofinanceValue=nothing,
    )

    - offerName::String : Название товара.
    - marketSku::Int64 : SKU на Маркете.
    - shopSku::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - count::Int64 : Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
    - prices::Vector{OrdersStatsPriceDTO} : Цена или скидки на товар.
    - warehouse::OrdersStatsWarehouseDTO
    - details::Vector{OrdersStatsDetailsDTO} : Информация об удалении товара из заказа.
    - cisList::Vector{String} : Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    - initialCount::Int64 : Первоначальное количество единиц товара.
    - bidFee::Int64 : Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
    - cofinanceThreshold::Float64 : Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
    - cofinanceValue::Float64 : Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
"""
Base.@kwdef mutable struct OrdersStatsItemDTO <: OpenAPI.APIModel
    offerName::Union{Nothing, String} = nothing
    marketSku::Union{Nothing, Int64} = nothing
    shopSku::Union{Nothing, String} = nothing
    count::Union{Nothing, Int64} = nothing
    prices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsPriceDTO} }
    warehouse = nothing # spec type: Union{ Nothing, OrdersStatsWarehouseDTO }
    details::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OrdersStatsDetailsDTO} }
    cisList::Union{Nothing, Vector{String}} = nothing
    initialCount::Union{Nothing, Int64} = nothing
    bidFee::Union{Nothing, Int64} = nothing
    cofinanceThreshold::Union{Nothing, Float64} = nothing
    cofinanceValue::Union{Nothing, Float64} = nothing

    function OrdersStatsItemDTO(offerName, marketSku, shopSku, count, prices, warehouse, details, cisList, initialCount, bidFee, cofinanceThreshold, cofinanceValue, )
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("offerName"), offerName)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("marketSku"), marketSku)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("shopSku"), shopSku)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("count"), count)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("prices"), prices)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("warehouse"), warehouse)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("details"), details)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("cisList"), cisList)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("initialCount"), initialCount)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("bidFee"), bidFee)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("cofinanceThreshold"), cofinanceThreshold)
        OpenAPI.validate_property(OrdersStatsItemDTO, Symbol("cofinanceValue"), cofinanceValue)
        return new(offerName, marketSku, shopSku, count, prices, warehouse, details, cisList, initialCount, bidFee, cofinanceThreshold, cofinanceValue, )
    end
end # type OrdersStatsItemDTO

const _property_types_OrdersStatsItemDTO = Dict{Symbol,String}(Symbol("offerName")=>"String", Symbol("marketSku")=>"Int64", Symbol("shopSku")=>"String", Symbol("count")=>"Int64", Symbol("prices")=>"Vector{OrdersStatsPriceDTO}", Symbol("warehouse")=>"OrdersStatsWarehouseDTO", Symbol("details")=>"Vector{OrdersStatsDetailsDTO}", Symbol("cisList")=>"Vector{String}", Symbol("initialCount")=>"Int64", Symbol("bidFee")=>"Int64", Symbol("cofinanceThreshold")=>"Float64", Symbol("cofinanceValue")=>"Float64", )
OpenAPI.property_type(::Type{ OrdersStatsItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrdersStatsItemDTO[name]))}

function check_required(o::OrdersStatsItemDTO)
    true
end

function OpenAPI.validate_property(::Type{ OrdersStatsItemDTO }, name::Symbol, val)
    if name === Symbol("marketSku")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :format, val, "int64")
    end
    if name === Symbol("shopSku")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :format, val, "int32")
    end
    if name === Symbol("initialCount")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :format, val, "int32")
    end
    if name === Symbol("bidFee")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :format, val, "int32")
    end
    if name === Symbol("bidFee")
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :maximum, val, 10000, false)
        OpenAPI.validate_param(name, "OrdersStatsItemDTO", :minimum, val, 0, false)
    end
end
