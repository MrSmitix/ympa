# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsStatsWarehouseDTO
Информация о складе.

    GoodsStatsWarehouseDTO(;
        id=nothing,
        name=nothing,
        stocks=nothing,
    )

    - id::Int64 : Идентификатор склада.
    - name::String : Название склада.
    - stocks::Vector{WarehouseStockDTO} : Информация об остатках товаров на складе.
"""
Base.@kwdef mutable struct GoodsStatsWarehouseDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    stocks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WarehouseStockDTO} }

    function GoodsStatsWarehouseDTO(id, name, stocks, )
        OpenAPI.validate_property(GoodsStatsWarehouseDTO, Symbol("id"), id)
        OpenAPI.validate_property(GoodsStatsWarehouseDTO, Symbol("name"), name)
        OpenAPI.validate_property(GoodsStatsWarehouseDTO, Symbol("stocks"), stocks)
        return new(id, name, stocks, )
    end
end # type GoodsStatsWarehouseDTO

const _property_types_GoodsStatsWarehouseDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("stocks")=>"Vector{WarehouseStockDTO}", )
OpenAPI.property_type(::Type{ GoodsStatsWarehouseDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsStatsWarehouseDTO[name]))}

function check_required(o::GoodsStatsWarehouseDTO)
    o.stocks === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GoodsStatsWarehouseDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "GoodsStatsWarehouseDTO", :format, val, "int64")
    end
end
