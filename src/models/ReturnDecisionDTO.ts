// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ReturnDecisionReasonType,
    ReturnDecisionReasonTypeFromJSON,
    ReturnDecisionReasonTypeToJSON,
    ReturnDecisionSubreasonType,
    ReturnDecisionSubreasonTypeFromJSON,
    ReturnDecisionSubreasonTypeToJSON,
    ReturnDecisionType,
    ReturnDecisionTypeFromJSON,
    ReturnDecisionTypeToJSON,
} from './';

/**
 * Решения по возвратам.
 * @export
 * @interface ReturnDecisionDTO
 */
export interface ReturnDecisionDTO  {
    /**
     * Идентификатор товара в возврате.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    returnItemId?: number;
    /**
     * Количество единиц товара.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    count?: number;
    /**
     * Комментарий.
     * @type {string}
     * @memberof ReturnDecisionDTO
     */
    comment?: string;
    /**
     * 
     * @type {ReturnDecisionReasonType}
     * @memberof ReturnDecisionDTO
     */
    reasonType?: ReturnDecisionReasonType;
    /**
     * 
     * @type {ReturnDecisionSubreasonType}
     * @memberof ReturnDecisionDTO
     */
    subreasonType?: ReturnDecisionSubreasonType;
    /**
     * 
     * @type {ReturnDecisionType}
     * @memberof ReturnDecisionDTO
     */
    decisionType?: ReturnDecisionType;
    /**
     * Сумма возврата.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    refundAmount?: number;
    /**
     * Компенсация за обратную доставку.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    partnerCompensation?: number;
    /**
     * Список хеш-кодов фотографий товара от покупателя.
     * @type {Array<string>}
     * @memberof ReturnDecisionDTO
     */
    images?: Array<string>;
}

export function ReturnDecisionDTOFromJSON(json: any): ReturnDecisionDTO {
    return {
        'returnItemId': !exists(json, 'returnItemId') ? undefined : json['returnItemId'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'reasonType': !exists(json, 'reasonType') ? undefined : ReturnDecisionReasonTypeFromJSON(json['reasonType']),
        'subreasonType': !exists(json, 'subreasonType') ? undefined : ReturnDecisionSubreasonTypeFromJSON(json['subreasonType']),
        'decisionType': !exists(json, 'decisionType') ? undefined : ReturnDecisionTypeFromJSON(json['decisionType']),
        'refundAmount': !exists(json, 'refundAmount') ? undefined : json['refundAmount'],
        'partnerCompensation': !exists(json, 'partnerCompensation') ? undefined : json['partnerCompensation'],
        'images': !exists(json, 'images') ? undefined : json['images'],
    };
}

export function ReturnDecisionDTOToJSON(value?: ReturnDecisionDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'returnItemId': value.returnItemId,
        'count': value.count,
        'comment': value.comment,
        'reasonType': ReturnDecisionReasonTypeToJSON(value.reasonType),
        'subreasonType': ReturnDecisionSubreasonTypeToJSON(value.subreasonType),
        'decisionType': ReturnDecisionTypeToJSON(value.decisionType),
        'refundAmount': value.refundAmount,
        'partnerCompensation': value.partnerCompensation,
        'images': value.images,
    };
}



