# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetPromoDTO
Информация об акции.

    GetPromoDTO(;
        id=nothing,
        name=nothing,
        period=nothing,
        participating=nothing,
        assortmentInfo=nothing,
        mechanicsInfo=nothing,
        bestsellerInfo=nothing,
        channels=nothing,
        constraints=nothing,
    )

    - id::String : Идентификатор акции.
    - name::String : Название акции.
    - period::PromoPeriodDTO
    - participating::Bool : Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
    - assortmentInfo::GetPromoAssortmentInfoDTO
    - mechanicsInfo::GetPromoMechanicsInfoDTO
    - bestsellerInfo::GetPromoBestsellerInfoDTO
    - channels::Vector{ChannelType} : Список каналов продвижения товаров.
    - constraints::GetPromoConstraintsDTO
"""
Base.@kwdef mutable struct GetPromoDTO <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    period = nothing # spec type: Union{ Nothing, PromoPeriodDTO }
    participating::Union{Nothing, Bool} = nothing
    assortmentInfo = nothing # spec type: Union{ Nothing, GetPromoAssortmentInfoDTO }
    mechanicsInfo = nothing # spec type: Union{ Nothing, GetPromoMechanicsInfoDTO }
    bestsellerInfo = nothing # spec type: Union{ Nothing, GetPromoBestsellerInfoDTO }
    channels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChannelType} }
    constraints = nothing # spec type: Union{ Nothing, GetPromoConstraintsDTO }

    function GetPromoDTO(id, name, period, participating, assortmentInfo, mechanicsInfo, bestsellerInfo, channels, constraints, )
        OpenAPI.validate_property(GetPromoDTO, Symbol("id"), id)
        OpenAPI.validate_property(GetPromoDTO, Symbol("name"), name)
        OpenAPI.validate_property(GetPromoDTO, Symbol("period"), period)
        OpenAPI.validate_property(GetPromoDTO, Symbol("participating"), participating)
        OpenAPI.validate_property(GetPromoDTO, Symbol("assortmentInfo"), assortmentInfo)
        OpenAPI.validate_property(GetPromoDTO, Symbol("mechanicsInfo"), mechanicsInfo)
        OpenAPI.validate_property(GetPromoDTO, Symbol("bestsellerInfo"), bestsellerInfo)
        OpenAPI.validate_property(GetPromoDTO, Symbol("channels"), channels)
        OpenAPI.validate_property(GetPromoDTO, Symbol("constraints"), constraints)
        return new(id, name, period, participating, assortmentInfo, mechanicsInfo, bestsellerInfo, channels, constraints, )
    end
end # type GetPromoDTO

const _property_types_GetPromoDTO = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("period")=>"PromoPeriodDTO", Symbol("participating")=>"Bool", Symbol("assortmentInfo")=>"GetPromoAssortmentInfoDTO", Symbol("mechanicsInfo")=>"GetPromoMechanicsInfoDTO", Symbol("bestsellerInfo")=>"GetPromoBestsellerInfoDTO", Symbol("channels")=>"Vector{ChannelType}", Symbol("constraints")=>"GetPromoConstraintsDTO", )
OpenAPI.property_type(::Type{ GetPromoDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetPromoDTO[name]))}

function check_required(o::GetPromoDTO)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.period === nothing && (return false)
    o.participating === nothing && (return false)
    o.assortmentInfo === nothing && (return false)
    o.mechanicsInfo === nothing && (return false)
    o.bestsellerInfo === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GetPromoDTO }, name::Symbol, val)
end
