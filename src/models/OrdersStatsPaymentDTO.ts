// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrdersStatsPaymentOrderDTO,
    OrdersStatsPaymentOrderDTOFromJSON,
    OrdersStatsPaymentOrderDTOToJSON,
    OrdersStatsPaymentSourceType,
    OrdersStatsPaymentSourceTypeFromJSON,
    OrdersStatsPaymentSourceTypeToJSON,
    OrdersStatsPaymentType,
    OrdersStatsPaymentTypeFromJSON,
    OrdersStatsPaymentTypeToJSON,
} from './';

/**
 * Информация о денежных переводах по заказу.
 * @export
 * @interface OrdersStatsPaymentDTO
 */
export interface OrdersStatsPaymentDTO  {
    /**
     * Идентификатор денежного перевода.
     * @type {string}
     * @memberof OrdersStatsPaymentDTO
     */
    id?: string;
    /**
     * Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. 
     * @type {Date}
     * @memberof OrdersStatsPaymentDTO
     */
    date?: Date;
    /**
     * 
     * @type {OrdersStatsPaymentType}
     * @memberof OrdersStatsPaymentDTO
     */
    type?: OrdersStatsPaymentType;
    /**
     * 
     * @type {OrdersStatsPaymentSourceType}
     * @memberof OrdersStatsPaymentDTO
     */
    source?: OrdersStatsPaymentSourceType;
    /**
     * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
     * @type {number}
     * @memberof OrdersStatsPaymentDTO
     */
    total?: number;
    /**
     * 
     * @type {OrdersStatsPaymentOrderDTO}
     * @memberof OrdersStatsPaymentDTO
     */
    paymentOrder?: OrdersStatsPaymentOrderDTO;
}

export function OrdersStatsPaymentDTOFromJSON(json: any): OrdersStatsPaymentDTO {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'date': !exists(json, 'date') ? undefined : new Date(json['date']),
        'type': !exists(json, 'type') ? undefined : OrdersStatsPaymentTypeFromJSON(json['type']),
        'source': !exists(json, 'source') ? undefined : OrdersStatsPaymentSourceTypeFromJSON(json['source']),
        'total': !exists(json, 'total') ? undefined : json['total'],
        'paymentOrder': !exists(json, 'paymentOrder') ? undefined : OrdersStatsPaymentOrderDTOFromJSON(json['paymentOrder']),
    };
}

export function OrdersStatsPaymentDTOToJSON(value?: OrdersStatsPaymentDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'date': value.date === undefined ? undefined : value.date.toISOString().substring(0,10),
        'type': OrdersStatsPaymentTypeToJSON(value.type),
        'source': OrdersStatsPaymentSourceTypeToJSON(value.source),
        'total': value.total,
        'paymentOrder': OrdersStatsPaymentOrderDTOToJSON(value.paymentOrder),
    };
}



