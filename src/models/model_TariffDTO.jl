# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TariffDTO
Информация о тарифах, по которым нужно заплатить за услуги Маркета.

    TariffDTO(;
        type=nothing,
        percent=nothing,
        amount=nothing,
        parameters=nothing,
    )

    - type::TariffType
    - percent::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
    - amount::Float64 : Значение тарифа в рублях.
    - parameters::Vector{TariffParameterDTO} : Параметры расчета тарифа.
"""
Base.@kwdef mutable struct TariffDTO <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, TariffType }
    percent::Union{Nothing, Float64} = nothing
    amount::Union{Nothing, Float64} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TariffParameterDTO} }

    function TariffDTO(type, percent, amount, parameters, )
        OpenAPI.validate_property(TariffDTO, Symbol("type"), type)
        OpenAPI.validate_property(TariffDTO, Symbol("percent"), percent)
        OpenAPI.validate_property(TariffDTO, Symbol("amount"), amount)
        OpenAPI.validate_property(TariffDTO, Symbol("parameters"), parameters)
        return new(type, percent, amount, parameters, )
    end
end # type TariffDTO

const _property_types_TariffDTO = Dict{Symbol,String}(Symbol("type")=>"TariffType", Symbol("percent")=>"Float64", Symbol("amount")=>"Float64", Symbol("parameters")=>"Vector{TariffParameterDTO}", )
OpenAPI.property_type(::Type{ TariffDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TariffDTO[name]))}

function check_required(o::TariffDTO)
    o.type === nothing && (return false)
    o.amount === nothing && (return false)
    o.parameters === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ TariffDTO }, name::Symbol, val)
end
