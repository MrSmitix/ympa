# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferDTO
Предложение.

    OfferDTO(;
        price=nothing,
        feedId=nothing,
        id=nothing,
        shopCategoryId=nothing,
        marketCategoryId=nothing,
        preDiscountPrice=nothing,
        discount=nothing,
        cutPrice=nothing,
        url=nothing,
        modelId=nothing,
        name=nothing,
        currency=nothing,
        bid=nothing,
        cbid=nothing,
        fee=nothing,
        blocked=nothing,
    )

    - price::Float64 : Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
    - feedId::Int64 : Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
    - id::String : Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
    - shopCategoryId::String : Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
    - marketCategoryId::Int64 : Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
    - preDiscountPrice::Float64 : Цена предложения без скидки.
    - discount::Int64 : Скидка на предложение в процентах.
    - cutPrice::Bool : Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
    - url::String : URL-адрес предложения на сайте магазина.
    - modelId::Int64 : Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
    - name::String : Наименование предложения.
    - currency::CurrencyType
    - bid::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    - cbid::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    - fee::Float64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
    - blocked::Bool : Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
"""
Base.@kwdef mutable struct OfferDTO <: OpenAPI.APIModel
    price::Union{Nothing, Float64} = nothing
    feedId::Union{Nothing, Int64} = nothing
    id::Union{Nothing, String} = nothing
    shopCategoryId::Union{Nothing, String} = nothing
    marketCategoryId::Union{Nothing, Int64} = nothing
    preDiscountPrice::Union{Nothing, Float64} = nothing
    discount::Union{Nothing, Int64} = nothing
    cutPrice::Union{Nothing, Bool} = nothing
    url::Union{Nothing, String} = nothing
    modelId::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    currency = nothing # spec type: Union{ Nothing, CurrencyType }
    bid::Union{Nothing, Float64} = nothing
    cbid::Union{Nothing, Float64} = nothing
    fee::Union{Nothing, Float64} = nothing
    blocked::Union{Nothing, Bool} = nothing

    function OfferDTO(price, feedId, id, shopCategoryId, marketCategoryId, preDiscountPrice, discount, cutPrice, url, modelId, name, currency, bid, cbid, fee, blocked, )
        OpenAPI.validate_property(OfferDTO, Symbol("price"), price)
        OpenAPI.validate_property(OfferDTO, Symbol("feedId"), feedId)
        OpenAPI.validate_property(OfferDTO, Symbol("id"), id)
        OpenAPI.validate_property(OfferDTO, Symbol("shopCategoryId"), shopCategoryId)
        OpenAPI.validate_property(OfferDTO, Symbol("marketCategoryId"), marketCategoryId)
        OpenAPI.validate_property(OfferDTO, Symbol("preDiscountPrice"), preDiscountPrice)
        OpenAPI.validate_property(OfferDTO, Symbol("discount"), discount)
        OpenAPI.validate_property(OfferDTO, Symbol("cutPrice"), cutPrice)
        OpenAPI.validate_property(OfferDTO, Symbol("url"), url)
        OpenAPI.validate_property(OfferDTO, Symbol("modelId"), modelId)
        OpenAPI.validate_property(OfferDTO, Symbol("name"), name)
        OpenAPI.validate_property(OfferDTO, Symbol("currency"), currency)
        OpenAPI.validate_property(OfferDTO, Symbol("bid"), bid)
        OpenAPI.validate_property(OfferDTO, Symbol("cbid"), cbid)
        OpenAPI.validate_property(OfferDTO, Symbol("fee"), fee)
        OpenAPI.validate_property(OfferDTO, Symbol("blocked"), blocked)
        return new(price, feedId, id, shopCategoryId, marketCategoryId, preDiscountPrice, discount, cutPrice, url, modelId, name, currency, bid, cbid, fee, blocked, )
    end
end # type OfferDTO

const _property_types_OfferDTO = Dict{Symbol,String}(Symbol("price")=>"Float64", Symbol("feedId")=>"Int64", Symbol("id")=>"String", Symbol("shopCategoryId")=>"String", Symbol("marketCategoryId")=>"Int64", Symbol("preDiscountPrice")=>"Float64", Symbol("discount")=>"Int64", Symbol("cutPrice")=>"Bool", Symbol("url")=>"String", Symbol("modelId")=>"Int64", Symbol("name")=>"String", Symbol("currency")=>"CurrencyType", Symbol("bid")=>"Float64", Symbol("cbid")=>"Float64", Symbol("fee")=>"Float64", Symbol("blocked")=>"Bool", )
OpenAPI.property_type(::Type{ OfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferDTO[name]))}

function check_required(o::OfferDTO)
    o.modelId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferDTO }, name::Symbol, val)
    if name === Symbol("feedId")
        OpenAPI.validate_param(name, "OfferDTO", :format, val, "int64")
    end
    if name === Symbol("marketCategoryId")
        OpenAPI.validate_param(name, "OfferDTO", :format, val, "int32")
    end
    if name === Symbol("discount")
        OpenAPI.validate_param(name, "OfferDTO", :format, val, "int32")
    end
    if name === Symbol("modelId")
        OpenAPI.validate_param(name, "OfferDTO", :format, val, "int64")
    end
end
