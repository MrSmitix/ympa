# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderBuyerBasicInfoDTO
Информация о покупателе с базовыми полями.

    OrderBuyerBasicInfoDTO(;
        id=nothing,
        lastName=nothing,
        firstName=nothing,
        middleName=nothing,
        type=nothing,
    )

    - id::String : Идентификатор покупателя.
    - lastName::String : Фамилия покупателя.
    - firstName::String : Имя покупателя.
    - middleName::String : Отчество покупателя.
    - type::OrderBuyerType
"""
Base.@kwdef mutable struct OrderBuyerBasicInfoDTO <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    middleName::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, OrderBuyerType }

    function OrderBuyerBasicInfoDTO(id, lastName, firstName, middleName, type, )
        OpenAPI.validate_property(OrderBuyerBasicInfoDTO, Symbol("id"), id)
        OpenAPI.validate_property(OrderBuyerBasicInfoDTO, Symbol("lastName"), lastName)
        OpenAPI.validate_property(OrderBuyerBasicInfoDTO, Symbol("firstName"), firstName)
        OpenAPI.validate_property(OrderBuyerBasicInfoDTO, Symbol("middleName"), middleName)
        OpenAPI.validate_property(OrderBuyerBasicInfoDTO, Symbol("type"), type)
        return new(id, lastName, firstName, middleName, type, )
    end
end # type OrderBuyerBasicInfoDTO

const _property_types_OrderBuyerBasicInfoDTO = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("lastName")=>"String", Symbol("firstName")=>"String", Symbol("middleName")=>"String", Symbol("type")=>"OrderBuyerType", )
OpenAPI.property_type(::Type{ OrderBuyerBasicInfoDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderBuyerBasicInfoDTO[name]))}

function check_required(o::OrderBuyerBasicInfoDTO)
    true
end

function OpenAPI.validate_property(::Type{ OrderBuyerBasicInfoDTO }, name::Symbol, val)
end
