# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SuggestedOfferDTO
Информация о товаре.

    SuggestedOfferDTO(;
        offerId=nothing,
        name=nothing,
        category=nothing,
        vendor=nothing,
        barcodes=nothing,
        description=nothing,
        vendorCode=nothing,
        basicPrice=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - name::String : Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    - category::String : Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
    - vendor::String : Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    - barcodes::Vector{String} : Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    - description::String : Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    - vendorCode::String : Артикул товара от производителя.
    - basicPrice::BasePriceDTO
"""
Base.@kwdef mutable struct SuggestedOfferDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    category::Union{Nothing, String} = nothing
    vendor::Union{Nothing, String} = nothing
    barcodes::Union{Nothing, Vector{String}} = nothing
    description::Union{Nothing, String} = nothing
    vendorCode::Union{Nothing, String} = nothing
    basicPrice = nothing # spec type: Union{ Nothing, BasePriceDTO }

    function SuggestedOfferDTO(offerId, name, category, vendor, barcodes, description, vendorCode, basicPrice, )
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("name"), name)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("category"), category)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("vendor"), vendor)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("barcodes"), barcodes)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("description"), description)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("vendorCode"), vendorCode)
        OpenAPI.validate_property(SuggestedOfferDTO, Symbol("basicPrice"), basicPrice)
        return new(offerId, name, category, vendor, barcodes, description, vendorCode, basicPrice, )
    end
end # type SuggestedOfferDTO

const _property_types_SuggestedOfferDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("name")=>"String", Symbol("category")=>"String", Symbol("vendor")=>"String", Symbol("barcodes")=>"Vector{String}", Symbol("description")=>"String", Symbol("vendorCode")=>"String", Symbol("basicPrice")=>"BasePriceDTO", )
OpenAPI.property_type(::Type{ SuggestedOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SuggestedOfferDTO[name]))}

function check_required(o::SuggestedOfferDTO)
    true
end

function OpenAPI.validate_property(::Type{ SuggestedOfferDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "SuggestedOfferDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "SuggestedOfferDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "SuggestedOfferDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "SuggestedOfferDTO", :maxLength, val, 256)
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "SuggestedOfferDTO", :maxLength, val, 6000)
    end
end
