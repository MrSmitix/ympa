# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsStatsGoodsDTO
Информация о товаре.

    GoodsStatsGoodsDTO(;
        shopSku=nothing,
        marketSku=nothing,
        name=nothing,
        price=nothing,
        categoryId=nothing,
        categoryName=nothing,
        weightDimensions=nothing,
        warehouses=nothing,
        tariffs=nothing,
        pictures=nothing,
    )

    - shopSku::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - marketSku::Int64 : SKU на Маркете.
    - name::String : Название товара.
    - price::Float64 : Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
    - categoryId::Int64 : Идентификатор категории товара на Маркете.
    - categoryName::String : Название категории товара на Маркете.
    - weightDimensions::GoodsStatsWeightDimensionsDTO
    - warehouses::Vector{GoodsStatsWarehouseDTO} : Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
    - tariffs::Vector{TariffDTO} : Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
    - pictures::Vector{String} : Ссылки (URL) изображений товара в хорошем качестве.
"""
Base.@kwdef mutable struct GoodsStatsGoodsDTO <: OpenAPI.APIModel
    shopSku::Union{Nothing, String} = nothing
    marketSku::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    price::Union{Nothing, Float64} = nothing
    categoryId::Union{Nothing, Int64} = nothing
    categoryName::Union{Nothing, String} = nothing
    weightDimensions = nothing # spec type: Union{ Nothing, GoodsStatsWeightDimensionsDTO }
    warehouses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GoodsStatsWarehouseDTO} }
    tariffs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TariffDTO} }
    pictures::Union{Nothing, Vector{String}} = nothing

    function GoodsStatsGoodsDTO(shopSku, marketSku, name, price, categoryId, categoryName, weightDimensions, warehouses, tariffs, pictures, )
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("shopSku"), shopSku)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("marketSku"), marketSku)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("name"), name)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("price"), price)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("categoryId"), categoryId)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("categoryName"), categoryName)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("weightDimensions"), weightDimensions)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("warehouses"), warehouses)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("tariffs"), tariffs)
        OpenAPI.validate_property(GoodsStatsGoodsDTO, Symbol("pictures"), pictures)
        return new(shopSku, marketSku, name, price, categoryId, categoryName, weightDimensions, warehouses, tariffs, pictures, )
    end
end # type GoodsStatsGoodsDTO

const _property_types_GoodsStatsGoodsDTO = Dict{Symbol,String}(Symbol("shopSku")=>"String", Symbol("marketSku")=>"Int64", Symbol("name")=>"String", Symbol("price")=>"Float64", Symbol("categoryId")=>"Int64", Symbol("categoryName")=>"String", Symbol("weightDimensions")=>"GoodsStatsWeightDimensionsDTO", Symbol("warehouses")=>"Vector{GoodsStatsWarehouseDTO}", Symbol("tariffs")=>"Vector{TariffDTO}", Symbol("pictures")=>"Vector{String}", )
OpenAPI.property_type(::Type{ GoodsStatsGoodsDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsStatsGoodsDTO[name]))}

function check_required(o::GoodsStatsGoodsDTO)
    true
end

function OpenAPI.validate_property(::Type{ GoodsStatsGoodsDTO }, name::Symbol, val)
    if name === Symbol("shopSku")
        OpenAPI.validate_param(name, "GoodsStatsGoodsDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "GoodsStatsGoodsDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "GoodsStatsGoodsDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("marketSku")
        OpenAPI.validate_param(name, "GoodsStatsGoodsDTO", :format, val, "int64")
    end
    if name === Symbol("categoryId")
        OpenAPI.validate_param(name, "GoodsStatsGoodsDTO", :format, val, "int64")
    end
end
