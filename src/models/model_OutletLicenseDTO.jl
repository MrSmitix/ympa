# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OutletLicenseDTO
Информация о лицензии.

    OutletLicenseDTO(;
        id=nothing,
        outletId=nothing,
        licenseType=nothing,
        number=nothing,
        dateOfIssue=nothing,
        dateOfExpiry=nothing,
    )

    - id::Int64 : Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
    - outletId::Int64 : Идентификатор точки продаж, для которой действительна лицензия.
    - licenseType::LicenseType
    - number::String : Номер лицензии.
    - dateOfIssue::ZonedDateTime : Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
    - dateOfExpiry::ZonedDateTime : Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
"""
Base.@kwdef mutable struct OutletLicenseDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    outletId::Union{Nothing, Int64} = nothing
    licenseType = nothing # spec type: Union{ Nothing, LicenseType }
    number::Union{Nothing, String} = nothing
    dateOfIssue::Union{Nothing, ZonedDateTime} = nothing
    dateOfExpiry::Union{Nothing, ZonedDateTime} = nothing

    function OutletLicenseDTO(id, outletId, licenseType, number, dateOfIssue, dateOfExpiry, )
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("id"), id)
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("outletId"), outletId)
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("licenseType"), licenseType)
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("number"), number)
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("dateOfIssue"), dateOfIssue)
        OpenAPI.validate_property(OutletLicenseDTO, Symbol("dateOfExpiry"), dateOfExpiry)
        return new(id, outletId, licenseType, number, dateOfIssue, dateOfExpiry, )
    end
end # type OutletLicenseDTO

const _property_types_OutletLicenseDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("outletId")=>"Int64", Symbol("licenseType")=>"LicenseType", Symbol("number")=>"String", Symbol("dateOfIssue")=>"ZonedDateTime", Symbol("dateOfExpiry")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ OutletLicenseDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OutletLicenseDTO[name]))}

function check_required(o::OutletLicenseDTO)
    true
end

function OpenAPI.validate_property(::Type{ OutletLicenseDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "OutletLicenseDTO", :format, val, "int64")
    end
    if name === Symbol("outletId")
        OpenAPI.validate_param(name, "OutletLicenseDTO", :format, val, "int64")
    end
    if name === Symbol("dateOfIssue")
        OpenAPI.validate_param(name, "OutletLicenseDTO", :format, val, "date-time")
    end
    if name === Symbol("dateOfExpiry")
        OpenAPI.validate_param(name, "OutletLicenseDTO", :format, val, "date-time")
    end
end
