# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetGoodsFeedbackRequest
Фильтр запроса отзывов в кабинете. 

    GetGoodsFeedbackRequest(;
        dateTimeFrom=nothing,
        dateTimeTo=nothing,
        reactionStatus=nothing,
        ratingValues=nothing,
        modelIds=nothing,
        paid=nothing,
    )

    - dateTimeFrom::ZonedDateTime : Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
    - dateTimeTo::ZonedDateTime : Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
    - reactionStatus::FeedbackReactionStatusType
    - ratingValues::Vector{Int64} : Оценка товара.
    - modelIds::Vector{Int64} : Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
    - paid::Bool : Фильтр отзывов за баллы Плюса.
"""
Base.@kwdef mutable struct GetGoodsFeedbackRequest <: OpenAPI.APIModel
    dateTimeFrom::Union{Nothing, ZonedDateTime} = nothing
    dateTimeTo::Union{Nothing, ZonedDateTime} = nothing
    reactionStatus = nothing # spec type: Union{ Nothing, FeedbackReactionStatusType }
    ratingValues::Union{Nothing, Vector{Int64}} = nothing
    modelIds::Union{Nothing, Vector{Int64}} = nothing
    paid::Union{Nothing, Bool} = nothing

    function GetGoodsFeedbackRequest(dateTimeFrom, dateTimeTo, reactionStatus, ratingValues, modelIds, paid, )
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("dateTimeFrom"), dateTimeFrom)
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("dateTimeTo"), dateTimeTo)
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("reactionStatus"), reactionStatus)
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("ratingValues"), ratingValues)
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("modelIds"), modelIds)
        OpenAPI.validate_property(GetGoodsFeedbackRequest, Symbol("paid"), paid)
        return new(dateTimeFrom, dateTimeTo, reactionStatus, ratingValues, modelIds, paid, )
    end
end # type GetGoodsFeedbackRequest

const _property_types_GetGoodsFeedbackRequest = Dict{Symbol,String}(Symbol("dateTimeFrom")=>"ZonedDateTime", Symbol("dateTimeTo")=>"ZonedDateTime", Symbol("reactionStatus")=>"FeedbackReactionStatusType", Symbol("ratingValues")=>"Vector{Int64}", Symbol("modelIds")=>"Vector{Int64}", Symbol("paid")=>"Bool", )
OpenAPI.property_type(::Type{ GetGoodsFeedbackRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetGoodsFeedbackRequest[name]))}

function check_required(o::GetGoodsFeedbackRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetGoodsFeedbackRequest }, name::Symbol, val)
    if name === Symbol("dateTimeFrom")
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :format, val, "date-time")
    end
    if name === Symbol("dateTimeTo")
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :format, val, "date-time")
    end
    if name === Symbol("ratingValues")
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :maxItems, val, 5)
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :uniqueItems, val, true)
    end
    if name === Symbol("modelIds")
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :maxItems, val, 20)
        OpenAPI.validate_param(name, "GetGoodsFeedbackRequest", :uniqueItems, val, true)
    end
end
