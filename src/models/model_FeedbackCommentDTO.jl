# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedbackCommentDTO
Комментарий к отзыву на магазин.

    FeedbackCommentDTO(;
        id=nothing,
        parentId=nothing,
        body=nothing,
        createdAt=nothing,
        updatedAt=nothing,
        author=nothing,
        children=nothing,
    )

    - id::Int64 : Идентификатор ответа.
    - parentId::Int64 : Идентификатор родительского ответа.
    - body::String : Текст ответа.
    - createdAt::ZonedDateTime : Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    - updatedAt::ZonedDateTime : Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    - author::FeedbackCommentAuthorDTO
    - children::Vector{FeedbackCommentDTO} : Дочерние ответы.
"""
Base.@kwdef mutable struct FeedbackCommentDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    parentId::Union{Nothing, Int64} = nothing
    body::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    updatedAt::Union{Nothing, ZonedDateTime} = nothing
    author = nothing # spec type: Union{ Nothing, FeedbackCommentAuthorDTO }
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FeedbackCommentDTO} }

    function FeedbackCommentDTO(id, parentId, body, createdAt, updatedAt, author, children, )
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("id"), id)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("parentId"), parentId)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("body"), body)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("updatedAt"), updatedAt)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("author"), author)
        OpenAPI.validate_property(FeedbackCommentDTO, Symbol("children"), children)
        return new(id, parentId, body, createdAt, updatedAt, author, children, )
    end
end # type FeedbackCommentDTO

const _property_types_FeedbackCommentDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("parentId")=>"Int64", Symbol("body")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("updatedAt")=>"ZonedDateTime", Symbol("author")=>"FeedbackCommentAuthorDTO", Symbol("children")=>"Vector{FeedbackCommentDTO}", )
OpenAPI.property_type(::Type{ FeedbackCommentDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedbackCommentDTO[name]))}

function check_required(o::FeedbackCommentDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedbackCommentDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "FeedbackCommentDTO", :format, val, "int64")
    end
    if name === Symbol("parentId")
        OpenAPI.validate_param(name, "FeedbackCommentDTO", :format, val, "int64")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "FeedbackCommentDTO", :format, val, "date-time")
    end
    if name === Symbol("updatedAt")
        OpenAPI.validate_param(name, "FeedbackCommentDTO", :format, val, "date-time")
    end
end
