# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CalculateTariffsRequest

    CalculateTariffsRequest(;
        parameters=nothing,
        offers=nothing,
    )

    - parameters::CalculateTariffsParametersDTO
    - offers::Vector{CalculateTariffsOfferDTO} : Товары, для которых нужно рассчитать стоимость услуг.
"""
Base.@kwdef mutable struct CalculateTariffsRequest <: OpenAPI.APIModel
    parameters = nothing # spec type: Union{ Nothing, CalculateTariffsParametersDTO }
    offers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CalculateTariffsOfferDTO} }

    function CalculateTariffsRequest(parameters, offers, )
        OpenAPI.validate_property(CalculateTariffsRequest, Symbol("parameters"), parameters)
        OpenAPI.validate_property(CalculateTariffsRequest, Symbol("offers"), offers)
        return new(parameters, offers, )
    end
end # type CalculateTariffsRequest

const _property_types_CalculateTariffsRequest = Dict{Symbol,String}(Symbol("parameters")=>"CalculateTariffsParametersDTO", Symbol("offers")=>"Vector{CalculateTariffsOfferDTO}", )
OpenAPI.property_type(::Type{ CalculateTariffsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CalculateTariffsRequest[name]))}

function check_required(o::CalculateTariffsRequest)
    o.parameters === nothing && (return false)
    o.offers === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CalculateTariffsRequest }, name::Symbol, val)
    if name === Symbol("offers")
        OpenAPI.validate_param(name, "CalculateTariffsRequest", :maxItems, val, 200)
        OpenAPI.validate_param(name, "CalculateTariffsRequest", :minItems, val, 1)
    end
end
