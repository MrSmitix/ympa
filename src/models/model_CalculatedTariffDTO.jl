# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CalculatedTariffDTO
Информация об услугах Маркета.

    CalculatedTariffDTO(;
        type=nothing,
        amount=nothing,
        parameters=nothing,
    )

    - type::CalculatedTariffType
    - amount::Float64 : Стоимость услуги в рублях.
    - parameters::Vector{TariffParameterDTO} : Параметры расчета тарифа.
"""
Base.@kwdef mutable struct CalculatedTariffDTO <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, CalculatedTariffType }
    amount::Union{Nothing, Float64} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TariffParameterDTO} }

    function CalculatedTariffDTO(type, amount, parameters, )
        OpenAPI.validate_property(CalculatedTariffDTO, Symbol("type"), type)
        OpenAPI.validate_property(CalculatedTariffDTO, Symbol("amount"), amount)
        OpenAPI.validate_property(CalculatedTariffDTO, Symbol("parameters"), parameters)
        return new(type, amount, parameters, )
    end
end # type CalculatedTariffDTO

const _property_types_CalculatedTariffDTO = Dict{Symbol,String}(Symbol("type")=>"CalculatedTariffType", Symbol("amount")=>"Float64", Symbol("parameters")=>"Vector{TariffParameterDTO}", )
OpenAPI.property_type(::Type{ CalculatedTariffDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CalculatedTariffDTO[name]))}

function check_required(o::CalculatedTariffDTO)
    o.type === nothing && (return false)
    o.parameters === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CalculatedTariffDTO }, name::Symbol, val)
end
