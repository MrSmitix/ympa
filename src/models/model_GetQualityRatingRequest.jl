# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetQualityRatingRequest
Запрос информации по индексу качества.

    GetQualityRatingRequest(;
        dateFrom=nothing,
        dateTo=nothing,
        campaignIds=nothing,
    )

    - dateFrom::Date : Начало периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть раньше 30 дней от текущей даты. 
    - dateTo::Date : Конец периода.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Не может быть позже текущей даты. 
    - campaignIds::Vector{Int64} : Список идентификаторов магазинов.
"""
Base.@kwdef mutable struct GetQualityRatingRequest <: OpenAPI.APIModel
    dateFrom::Union{Nothing, Date} = nothing
    dateTo::Union{Nothing, Date} = nothing
    campaignIds::Union{Nothing, Vector{Int64}} = nothing

    function GetQualityRatingRequest(dateFrom, dateTo, campaignIds, )
        OpenAPI.validate_property(GetQualityRatingRequest, Symbol("dateFrom"), dateFrom)
        OpenAPI.validate_property(GetQualityRatingRequest, Symbol("dateTo"), dateTo)
        OpenAPI.validate_property(GetQualityRatingRequest, Symbol("campaignIds"), campaignIds)
        return new(dateFrom, dateTo, campaignIds, )
    end
end # type GetQualityRatingRequest

const _property_types_GetQualityRatingRequest = Dict{Symbol,String}(Symbol("dateFrom")=>"Date", Symbol("dateTo")=>"Date", Symbol("campaignIds")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ GetQualityRatingRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetQualityRatingRequest[name]))}

function check_required(o::GetQualityRatingRequest)
    o.campaignIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GetQualityRatingRequest }, name::Symbol, val)
    if name === Symbol("dateFrom")
        OpenAPI.validate_param(name, "GetQualityRatingRequest", :format, val, "date")
    end
    if name === Symbol("dateTo")
        OpenAPI.validate_param(name, "GetQualityRatingRequest", :format, val, "date")
    end
    if name === Symbol("campaignIds")
        OpenAPI.validate_param(name, "GetQualityRatingRequest", :maxItems, val, 50)
        OpenAPI.validate_param(name, "GetQualityRatingRequest", :minItems, val, 1)
        OpenAPI.validate_param(name, "GetQualityRatingRequest", :uniqueItems, val, true)
    end
end
