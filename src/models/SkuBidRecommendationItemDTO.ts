// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BidRecommendationItemDTO,
    BidRecommendationItemDTOFromJSON,
    BidRecommendationItemDTOToJSON,
    PriceRecommendationItemDTO,
    PriceRecommendationItemDTOFromJSON,
    PriceRecommendationItemDTOToJSON,
} from './';

/**
 * Список товаров с рекомендованными ставками.
 * @export
 * @interface SkuBidRecommendationItemDTO
 */
export interface SkuBidRecommendationItemDTO  {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @type {string}
     * @memberof SkuBidRecommendationItemDTO
     */
    sku: string;
    /**
     * Значение ставки.
     * @type {number}
     * @memberof SkuBidRecommendationItemDTO
     */
    bid: number;
    /**
     * Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
     * @type {Array<BidRecommendationItemDTO>}
     * @memberof SkuBidRecommendationItemDTO
     */
    bidRecommendations?: Array<BidRecommendationItemDTO>;
    /**
     * Рекомендованные цены.
     * @type {Array<PriceRecommendationItemDTO>}
     * @memberof SkuBidRecommendationItemDTO
     */
    priceRecommendations?: Array<PriceRecommendationItemDTO>;
}

export function SkuBidRecommendationItemDTOFromJSON(json: any): SkuBidRecommendationItemDTO {
    return {
        'sku': json['sku'],
        'bid': json['bid'],
        'bidRecommendations': !exists(json, 'bidRecommendations') ? undefined : (json['bidRecommendations'] as Array<any>).map(BidRecommendationItemDTOFromJSON),
        'priceRecommendations': !exists(json, 'priceRecommendations') ? undefined : (json['priceRecommendations'] as Array<any>).map(PriceRecommendationItemDTOFromJSON),
    };
}

export function SkuBidRecommendationItemDTOToJSON(value?: SkuBidRecommendationItemDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'sku': value.sku,
        'bid': value.bid,
        'bidRecommendations': value.bidRecommendations === undefined ? undefined : (value.bidRecommendations as Array<any>).map(BidRecommendationItemDTOToJSON),
        'priceRecommendations': value.priceRecommendations === undefined ? undefined : (value.priceRecommendations as Array<any>).map(PriceRecommendationItemDTOToJSON),
    };
}


