# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsFeedbackCommentListDTO
Комментарии к отзыву.

    GoodsFeedbackCommentListDTO(;
        comments=nothing,
        paging=nothing,
    )

    - comments::Vector{GoodsFeedbackCommentDTO} : Список комментариев.
    - paging::ForwardScrollingPagerDTO
"""
Base.@kwdef mutable struct GoodsFeedbackCommentListDTO <: OpenAPI.APIModel
    comments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GoodsFeedbackCommentDTO} }
    paging = nothing # spec type: Union{ Nothing, ForwardScrollingPagerDTO }

    function GoodsFeedbackCommentListDTO(comments, paging, )
        OpenAPI.validate_property(GoodsFeedbackCommentListDTO, Symbol("comments"), comments)
        OpenAPI.validate_property(GoodsFeedbackCommentListDTO, Symbol("paging"), paging)
        return new(comments, paging, )
    end
end # type GoodsFeedbackCommentListDTO

const _property_types_GoodsFeedbackCommentListDTO = Dict{Symbol,String}(Symbol("comments")=>"Vector{GoodsFeedbackCommentDTO}", Symbol("paging")=>"ForwardScrollingPagerDTO", )
OpenAPI.property_type(::Type{ GoodsFeedbackCommentListDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsFeedbackCommentListDTO[name]))}

function check_required(o::GoodsFeedbackCommentListDTO)
    o.comments === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GoodsFeedbackCommentListDTO }, name::Symbol, val)
end
