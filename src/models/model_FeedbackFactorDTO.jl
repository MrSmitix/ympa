# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedbackFactorDTO
Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 

    FeedbackFactorDTO(;
        id=nothing,
        title=nothing,
        description=nothing,
        value=nothing,
    )

    - id::Int64 : Идентификатор параметра.
    - title::String : Название параметра. Например, &#x60;Скорость обработки заказа&#x60;.
    - description::String : Описание параметра. Например, &#x60;Как быстро с вами связались для подтверждения заказа?&#x60;.
    - value::Int64 : Оценка по параметру, указанная в отзыве: от &#x60;1&#x60; (низшая оценка) до &#x60;5&#x60; (высшая оценка). 
"""
Base.@kwdef mutable struct FeedbackFactorDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    value::Union{Nothing, Int64} = nothing

    function FeedbackFactorDTO(id, title, description, value, )
        OpenAPI.validate_property(FeedbackFactorDTO, Symbol("id"), id)
        OpenAPI.validate_property(FeedbackFactorDTO, Symbol("title"), title)
        OpenAPI.validate_property(FeedbackFactorDTO, Symbol("description"), description)
        OpenAPI.validate_property(FeedbackFactorDTO, Symbol("value"), value)
        return new(id, title, description, value, )
    end
end # type FeedbackFactorDTO

const _property_types_FeedbackFactorDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("value")=>"Int64", )
OpenAPI.property_type(::Type{ FeedbackFactorDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedbackFactorDTO[name]))}

function check_required(o::FeedbackFactorDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedbackFactorDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "FeedbackFactorDTO", :format, val, "int64")
    end
    if name === Symbol("value")
        OpenAPI.validate_param(name, "FeedbackFactorDTO", :format, val, "int32")
    end
end
