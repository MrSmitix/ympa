# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EnrichedModelDTO
Модель товара.

    EnrichedModelDTO(;
        id=nothing,
        name=nothing,
        prices=nothing,
        offers=nothing,
        offlineOffers=nothing,
        onlineOffers=nothing,
    )

    - id::Int64 : Идентификатор модели товара.
    - name::String : Название модели товара.
    - prices::ModelPriceDTO
    - offers::Vector{ModelOfferDTO} : Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
    - offlineOffers::Int64 : Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
    - onlineOffers::Int64 : Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
"""
Base.@kwdef mutable struct EnrichedModelDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    prices = nothing # spec type: Union{ Nothing, ModelPriceDTO }
    offers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ModelOfferDTO} }
    offlineOffers::Union{Nothing, Int64} = nothing
    onlineOffers::Union{Nothing, Int64} = nothing

    function EnrichedModelDTO(id, name, prices, offers, offlineOffers, onlineOffers, )
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("id"), id)
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("name"), name)
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("prices"), prices)
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("offers"), offers)
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("offlineOffers"), offlineOffers)
        OpenAPI.validate_property(EnrichedModelDTO, Symbol("onlineOffers"), onlineOffers)
        return new(id, name, prices, offers, offlineOffers, onlineOffers, )
    end
end # type EnrichedModelDTO

const _property_types_EnrichedModelDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("prices")=>"ModelPriceDTO", Symbol("offers")=>"Vector{ModelOfferDTO}", Symbol("offlineOffers")=>"Int64", Symbol("onlineOffers")=>"Int64", )
OpenAPI.property_type(::Type{ EnrichedModelDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EnrichedModelDTO[name]))}

function check_required(o::EnrichedModelDTO)
    true
end

function OpenAPI.validate_property(::Type{ EnrichedModelDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "EnrichedModelDTO", :format, val, "int64")
    end
    if name === Symbol("offlineOffers")
        OpenAPI.validate_param(name, "EnrichedModelDTO", :format, val, "int32")
    end
    if name === Symbol("onlineOffers")
        OpenAPI.validate_param(name, "EnrichedModelDTO", :format, val, "int32")
    end
end
