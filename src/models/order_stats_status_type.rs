/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderStatsStatusType : Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки.  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки.  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки.  * `DELIVERY` — заказ передан службе доставки.  * `DELIVERED` — заказ доставлен.  * `PARTIALLY_DELIVERED` — заказ частично доставлен.  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем.  * `PENDING` — заказ ожидает подтверждения.  * `PICKUP` — заказ доставлен в пункт выдачи.  * `PROCESSING` — заказ в обработке.  * `RESERVED` — товар зарезервирован на складе.  * `RETURNED` — заказ полностью возвращен покупателем.  * `UNKNOWN` — неизвестный статус заказа.  * `UNPAID` — заказ от юридического лица ожидает оплаты.  * `LOST` — заказ утерян. 
/// Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки.  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки.  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки.  * `DELIVERY` — заказ передан службе доставки.  * `DELIVERED` — заказ доставлен.  * `PARTIALLY_DELIVERED` — заказ частично доставлен.  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем.  * `PENDING` — заказ ожидает подтверждения.  * `PICKUP` — заказ доставлен в пункт выдачи.  * `PROCESSING` — заказ в обработке.  * `RESERVED` — товар зарезервирован на складе.  * `RETURNED` — заказ полностью возвращен покупателем.  * `UNKNOWN` — неизвестный статус заказа.  * `UNPAID` — заказ от юридического лица ожидает оплаты.  * `LOST` — заказ утерян. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderStatsStatusType {
    #[serde(rename = "CANCELLED_BEFORE_PROCESSING")]
    CancelledBeforeProcessing,
    #[serde(rename = "CANCELLED_IN_DELIVERY")]
    CancelledInDelivery,
    #[serde(rename = "CANCELLED_IN_PROCESSING")]
    CancelledInProcessing,
    #[serde(rename = "DELIVERY")]
    Delivery,
    #[serde(rename = "DELIVERED")]
    Delivered,
    #[serde(rename = "PARTIALLY_DELIVERED")]
    PartiallyDelivered,
    #[serde(rename = "PARTIALLY_RETURNED")]
    PartiallyReturned,
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "PICKUP")]
    Pickup,
    #[serde(rename = "PROCESSING")]
    Processing,
    #[serde(rename = "RESERVED")]
    Reserved,
    #[serde(rename = "RETURNED")]
    Returned,
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "UNPAID")]
    Unpaid,
    #[serde(rename = "LOST")]
    Lost,

}

impl std::fmt::Display for OrderStatsStatusType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::CancelledBeforeProcessing => write!(f, "CANCELLED_BEFORE_PROCESSING"),
            Self::CancelledInDelivery => write!(f, "CANCELLED_IN_DELIVERY"),
            Self::CancelledInProcessing => write!(f, "CANCELLED_IN_PROCESSING"),
            Self::Delivery => write!(f, "DELIVERY"),
            Self::Delivered => write!(f, "DELIVERED"),
            Self::PartiallyDelivered => write!(f, "PARTIALLY_DELIVERED"),
            Self::PartiallyReturned => write!(f, "PARTIALLY_RETURNED"),
            Self::Pending => write!(f, "PENDING"),
            Self::Pickup => write!(f, "PICKUP"),
            Self::Processing => write!(f, "PROCESSING"),
            Self::Reserved => write!(f, "RESERVED"),
            Self::Returned => write!(f, "RETURNED"),
            Self::Unknown => write!(f, "UNKNOWN"),
            Self::Unpaid => write!(f, "UNPAID"),
            Self::Lost => write!(f, "LOST"),
        }
    }
}

impl Default for OrderStatsStatusType {
    fn default() -> OrderStatsStatusType {
        Self::CancelledBeforeProcessing
    }
}

