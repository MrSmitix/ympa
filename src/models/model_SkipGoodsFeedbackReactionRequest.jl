# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SkipGoodsFeedbackReactionRequest
Идентификаторы отзывов.

    SkipGoodsFeedbackReactionRequest(;
        feedbackIds=nothing,
    )

    - feedbackIds::Vector{Int64} : Список идентификаторов отзывов, на которые магазин не будет отвечать.
"""
Base.@kwdef mutable struct SkipGoodsFeedbackReactionRequest <: OpenAPI.APIModel
    feedbackIds::Union{Nothing, Vector{Int64}} = nothing

    function SkipGoodsFeedbackReactionRequest(feedbackIds, )
        OpenAPI.validate_property(SkipGoodsFeedbackReactionRequest, Symbol("feedbackIds"), feedbackIds)
        return new(feedbackIds, )
    end
end # type SkipGoodsFeedbackReactionRequest

const _property_types_SkipGoodsFeedbackReactionRequest = Dict{Symbol,String}(Symbol("feedbackIds")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ SkipGoodsFeedbackReactionRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SkipGoodsFeedbackReactionRequest[name]))}

function check_required(o::SkipGoodsFeedbackReactionRequest)
    o.feedbackIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SkipGoodsFeedbackReactionRequest }, name::Symbol, val)
    if name === Symbol("feedbackIds")
        OpenAPI.validate_param(name, "SkipGoodsFeedbackReactionRequest", :maxItems, val, 50)
        OpenAPI.validate_param(name, "SkipGoodsFeedbackReactionRequest", :minItems, val, 1)
        OpenAPI.validate_param(name, "SkipGoodsFeedbackReactionRequest", :uniqueItems, val, true)
    end
end
