// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderItemDetailDTO,
    OrderItemDetailDTOFromJSON,
    OrderItemDetailDTOToJSON,
    OrderItemInstanceDTO,
    OrderItemInstanceDTOFromJSON,
    OrderItemInstanceDTOToJSON,
    OrderItemInstanceType,
    OrderItemInstanceTypeFromJSON,
    OrderItemInstanceTypeToJSON,
    OrderItemPromoDTO,
    OrderItemPromoDTOFromJSON,
    OrderItemPromoDTOToJSON,
    OrderItemSubsidyDTO,
    OrderItemSubsidyDTOFromJSON,
    OrderItemSubsidyDTOToJSON,
    OrderVatType,
    OrderVatTypeFromJSON,
    OrderVatTypeToJSON,
} from './';

/**
 * Список товаров в заказе.
 * @export
 * @interface OrderItemDTO
 */
export interface OrderItemDTO  {
    /**
     * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
     * @type {number}
     * @memberof OrderItemDTO
     */
    id?: number;
    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @type {string}
     * @memberof OrderItemDTO
     */
    offerId?: string;
    /**
     * Название товара.
     * @type {string}
     * @memberof OrderItemDTO
     */
    offerName?: string;
    /**
     * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
     * @type {number}
     * @memberof OrderItemDTO
     */
    price?: number;
    /**
     * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
     * @type {number}
     * @memberof OrderItemDTO
     */
    buyerPrice?: number;
    /**
     * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
     * @type {number}
     * @memberof OrderItemDTO
     */
    buyerPriceBeforeDiscount?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
     * @type {number}
     * @memberof OrderItemDTO
     */
    priceBeforeDiscount?: number;
    /**
     * Количество единиц товара.
     * @type {number}
     * @memberof OrderItemDTO
     */
    count?: number;
    /**
     * 
     * @type {OrderVatType}
     * @memberof OrderItemDTO
     */
    vat?: OrderVatType;
    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @type {string}
     * @memberof OrderItemDTO
     */
    shopSku?: string;
    /**
     * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
     * @type {number}
     * @memberof OrderItemDTO
     */
    subsidy?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
     * @type {string}
     * @memberof OrderItemDTO
     */
    partnerWarehouseId?: string;
    /**
     * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
     * @type {Array<OrderItemPromoDTO>}
     * @memberof OrderItemDTO
     */
    promos?: Array<OrderItemPromoDTO>;
    /**
     * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
     * @type {Array<OrderItemInstanceDTO>}
     * @memberof OrderItemDTO
     */
    instances?: Array<OrderItemInstanceDTO>;
    /**
     * Информация об удалении товара из заказа. 
     * @type {Array<OrderItemDetailDTO>}
     * @memberof OrderItemDTO
     */
    details?: Array<OrderItemDetailDTO>;
    /**
     * Список субсидий по типам.
     * @type {Array<OrderItemSubsidyDTO>}
     * @memberof OrderItemDTO
     */
    subsidies?: Array<OrderItemSubsidyDTO>;
    /**
     * Список необходимых маркировок товара.
     * @type {Array<OrderItemInstanceType>}
     * @memberof OrderItemDTO
     */
    requiredInstanceTypes?: Array<OrderItemInstanceType>;
}

export function OrderItemDTOFromJSON(json: any): OrderItemDTO {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'offerId': !exists(json, 'offerId') ? undefined : json['offerId'],
        'offerName': !exists(json, 'offerName') ? undefined : json['offerName'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'buyerPrice': !exists(json, 'buyerPrice') ? undefined : json['buyerPrice'],
        'buyerPriceBeforeDiscount': !exists(json, 'buyerPriceBeforeDiscount') ? undefined : json['buyerPriceBeforeDiscount'],
        'priceBeforeDiscount': !exists(json, 'priceBeforeDiscount') ? undefined : json['priceBeforeDiscount'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'vat': !exists(json, 'vat') ? undefined : OrderVatTypeFromJSON(json['vat']),
        'shopSku': !exists(json, 'shopSku') ? undefined : json['shopSku'],
        'subsidy': !exists(json, 'subsidy') ? undefined : json['subsidy'],
        'partnerWarehouseId': !exists(json, 'partnerWarehouseId') ? undefined : json['partnerWarehouseId'],
        'promos': !exists(json, 'promos') ? undefined : (json['promos'] as Array<any>).map(OrderItemPromoDTOFromJSON),
        'instances': !exists(json, 'instances') ? undefined : (json['instances'] as Array<any>).map(OrderItemInstanceDTOFromJSON),
        'details': !exists(json, 'details') ? undefined : (json['details'] as Array<any>).map(OrderItemDetailDTOFromJSON),
        'subsidies': !exists(json, 'subsidies') ? undefined : (json['subsidies'] as Array<any>).map(OrderItemSubsidyDTOFromJSON),
        'requiredInstanceTypes': !exists(json, 'requiredInstanceTypes') ? undefined : (json['requiredInstanceTypes'] as Array<any>).map(OrderItemInstanceTypeFromJSON),
    };
}

export function OrderItemDTOToJSON(value?: OrderItemDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'offerId': value.offerId,
        'offerName': value.offerName,
        'price': value.price,
        'buyerPrice': value.buyerPrice,
        'buyerPriceBeforeDiscount': value.buyerPriceBeforeDiscount,
        'priceBeforeDiscount': value.priceBeforeDiscount,
        'count': value.count,
        'vat': OrderVatTypeToJSON(value.vat),
        'shopSku': value.shopSku,
        'subsidy': value.subsidy,
        'partnerWarehouseId': value.partnerWarehouseId,
        'promos': value.promos === undefined ? undefined : (value.promos as Array<any>).map(OrderItemPromoDTOToJSON),
        'instances': value.instances === undefined ? undefined : (value.instances as Array<any>).map(OrderItemInstanceDTOToJSON),
        'details': value.details === undefined ? undefined : (value.details as Array<any>).map(OrderItemDetailDTOToJSON),
        'subsidies': value.subsidies === undefined ? undefined : (value.subsidies as Array<any>).map(OrderItemSubsidyDTOToJSON),
        'requiredInstanceTypes': value.requiredInstanceTypes === undefined ? undefined : (value.requiredInstanceTypes as Array<any>).map(OrderItemInstanceTypeToJSON),
    };
}



