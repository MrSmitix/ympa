# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeneratePricesReportRequest
Данные, необходимые для генерации отчета.

    GeneratePricesReportRequest(;
        businessId=nothing,
        campaignId=nothing,
        categoryIds=nothing,
        creationDateFrom=nothing,
        creationDateTo=nothing,
    )

    - businessId::Int64 : Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
    - campaignId::Int64 : Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
    - categoryIds::Vector{Int64} : Фильтр по категориям на Маркете.
    - creationDateFrom::Date : Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    - creationDateTo::Date : Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
"""
Base.@kwdef mutable struct GeneratePricesReportRequest <: OpenAPI.APIModel
    businessId::Union{Nothing, Int64} = nothing
    campaignId::Union{Nothing, Int64} = nothing
    categoryIds::Union{Nothing, Vector{Int64}} = nothing
    creationDateFrom::Union{Nothing, Date} = nothing
    creationDateTo::Union{Nothing, Date} = nothing

    function GeneratePricesReportRequest(businessId, campaignId, categoryIds, creationDateFrom, creationDateTo, )
        OpenAPI.validate_property(GeneratePricesReportRequest, Symbol("businessId"), businessId)
        OpenAPI.validate_property(GeneratePricesReportRequest, Symbol("campaignId"), campaignId)
        OpenAPI.validate_property(GeneratePricesReportRequest, Symbol("categoryIds"), categoryIds)
        OpenAPI.validate_property(GeneratePricesReportRequest, Symbol("creationDateFrom"), creationDateFrom)
        OpenAPI.validate_property(GeneratePricesReportRequest, Symbol("creationDateTo"), creationDateTo)
        return new(businessId, campaignId, categoryIds, creationDateFrom, creationDateTo, )
    end
end # type GeneratePricesReportRequest

const _property_types_GeneratePricesReportRequest = Dict{Symbol,String}(Symbol("businessId")=>"Int64", Symbol("campaignId")=>"Int64", Symbol("categoryIds")=>"Vector{Int64}", Symbol("creationDateFrom")=>"Date", Symbol("creationDateTo")=>"Date", )
OpenAPI.property_type(::Type{ GeneratePricesReportRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeneratePricesReportRequest[name]))}

function check_required(o::GeneratePricesReportRequest)
    true
end

function OpenAPI.validate_property(::Type{ GeneratePricesReportRequest }, name::Symbol, val)
    if name === Symbol("businessId")
        OpenAPI.validate_param(name, "GeneratePricesReportRequest", :format, val, "int64")
    end
    if name === Symbol("campaignId")
        OpenAPI.validate_param(name, "GeneratePricesReportRequest", :format, val, "int64")
    end
    if name === Symbol("creationDateFrom")
        OpenAPI.validate_param(name, "GeneratePricesReportRequest", :format, val, "date")
    end
    if name === Symbol("creationDateTo")
        OpenAPI.validate_param(name, "GeneratePricesReportRequest", :format, val, "date")
    end
end
