# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsFeedbackIdentifiersDTO
Идентификаторы, которые связаны с отзывом.

    GoodsFeedbackIdentifiersDTO(;
        orderId=nothing,
        modelId=nothing,
    )

    - orderId::Int64 : Идентификатор заказа на Маркете.
    - modelId::Int64 : Идентификатор модели товара.
"""
Base.@kwdef mutable struct GoodsFeedbackIdentifiersDTO <: OpenAPI.APIModel
    orderId::Union{Nothing, Int64} = nothing
    modelId::Union{Nothing, Int64} = nothing

    function GoodsFeedbackIdentifiersDTO(orderId, modelId, )
        OpenAPI.validate_property(GoodsFeedbackIdentifiersDTO, Symbol("orderId"), orderId)
        OpenAPI.validate_property(GoodsFeedbackIdentifiersDTO, Symbol("modelId"), modelId)
        return new(orderId, modelId, )
    end
end # type GoodsFeedbackIdentifiersDTO

const _property_types_GoodsFeedbackIdentifiersDTO = Dict{Symbol,String}(Symbol("orderId")=>"Int64", Symbol("modelId")=>"Int64", )
OpenAPI.property_type(::Type{ GoodsFeedbackIdentifiersDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsFeedbackIdentifiersDTO[name]))}

function check_required(o::GoodsFeedbackIdentifiersDTO)
    o.orderId === nothing && (return false)
    o.modelId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GoodsFeedbackIdentifiersDTO }, name::Symbol, val)
    if name === Symbol("orderId")
        OpenAPI.validate_param(name, "GoodsFeedbackIdentifiersDTO", :format, val, "int64")
    end
    if name === Symbol("modelId")
        OpenAPI.validate_param(name, "GoodsFeedbackIdentifiersDTO", :format, val, "int64")
    end
end
