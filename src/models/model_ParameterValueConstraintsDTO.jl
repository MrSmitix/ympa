# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ParameterValueConstraintsDTO
Ограничения на значения характеристик.

    ParameterValueConstraintsDTO(;
        minValue=nothing,
        maxValue=nothing,
        maxLength=nothing,
    )

    - minValue::Float64 : Минимальное число.
    - maxValue::Float64 : Максимальное число.
    - maxLength::Int64 : Максимальная длина текста.
"""
Base.@kwdef mutable struct ParameterValueConstraintsDTO <: OpenAPI.APIModel
    minValue::Union{Nothing, Float64} = nothing
    maxValue::Union{Nothing, Float64} = nothing
    maxLength::Union{Nothing, Int64} = nothing

    function ParameterValueConstraintsDTO(minValue, maxValue, maxLength, )
        OpenAPI.validate_property(ParameterValueConstraintsDTO, Symbol("minValue"), minValue)
        OpenAPI.validate_property(ParameterValueConstraintsDTO, Symbol("maxValue"), maxValue)
        OpenAPI.validate_property(ParameterValueConstraintsDTO, Symbol("maxLength"), maxLength)
        return new(minValue, maxValue, maxLength, )
    end
end # type ParameterValueConstraintsDTO

const _property_types_ParameterValueConstraintsDTO = Dict{Symbol,String}(Symbol("minValue")=>"Float64", Symbol("maxValue")=>"Float64", Symbol("maxLength")=>"Int64", )
OpenAPI.property_type(::Type{ ParameterValueConstraintsDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ParameterValueConstraintsDTO[name]))}

function check_required(o::ParameterValueConstraintsDTO)
    true
end

function OpenAPI.validate_property(::Type{ ParameterValueConstraintsDTO }, name::Symbol, val)
    if name === Symbol("minValue")
        OpenAPI.validate_param(name, "ParameterValueConstraintsDTO", :format, val, "double")
    end
    if name === Symbol("maxValue")
        OpenAPI.validate_param(name, "ParameterValueConstraintsDTO", :format, val, "double")
    end
    if name === Symbol("maxLength")
        OpenAPI.validate_param(name, "ParameterValueConstraintsDTO", :format, val, "int32")
    end
end
