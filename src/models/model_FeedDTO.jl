# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedDTO
Информация о прайс-листе.

    FeedDTO(;
        id=nothing,
        login=nothing,
        name=nothing,
        password=nothing,
        uploadDate=nothing,
        url=nothing,
        content=nothing,
        download=nothing,
        placement=nothing,
        publication=nothing,
    )

    - id::Int64 : Идентификатор прайс-листа.
    - login::String : Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    - name::String : Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
    - password::String : Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    - uploadDate::ZonedDateTime : Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
    - url::String : URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
    - content::FeedContentDTO
    - download::FeedDownloadDTO
    - placement::FeedPlacementDTO
    - publication::FeedPublicationDTO
"""
Base.@kwdef mutable struct FeedDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    login::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    password::Union{Nothing, String} = nothing
    uploadDate::Union{Nothing, ZonedDateTime} = nothing
    url::Union{Nothing, String} = nothing
    content = nothing # spec type: Union{ Nothing, FeedContentDTO }
    download = nothing # spec type: Union{ Nothing, FeedDownloadDTO }
    placement = nothing # spec type: Union{ Nothing, FeedPlacementDTO }
    publication = nothing # spec type: Union{ Nothing, FeedPublicationDTO }

    function FeedDTO(id, login, name, password, uploadDate, url, content, download, placement, publication, )
        OpenAPI.validate_property(FeedDTO, Symbol("id"), id)
        OpenAPI.validate_property(FeedDTO, Symbol("login"), login)
        OpenAPI.validate_property(FeedDTO, Symbol("name"), name)
        OpenAPI.validate_property(FeedDTO, Symbol("password"), password)
        OpenAPI.validate_property(FeedDTO, Symbol("uploadDate"), uploadDate)
        OpenAPI.validate_property(FeedDTO, Symbol("url"), url)
        OpenAPI.validate_property(FeedDTO, Symbol("content"), content)
        OpenAPI.validate_property(FeedDTO, Symbol("download"), download)
        OpenAPI.validate_property(FeedDTO, Symbol("placement"), placement)
        OpenAPI.validate_property(FeedDTO, Symbol("publication"), publication)
        return new(id, login, name, password, uploadDate, url, content, download, placement, publication, )
    end
end # type FeedDTO

const _property_types_FeedDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("login")=>"String", Symbol("name")=>"String", Symbol("password")=>"String", Symbol("uploadDate")=>"ZonedDateTime", Symbol("url")=>"String", Symbol("content")=>"FeedContentDTO", Symbol("download")=>"FeedDownloadDTO", Symbol("placement")=>"FeedPlacementDTO", Symbol("publication")=>"FeedPublicationDTO", )
OpenAPI.property_type(::Type{ FeedDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedDTO[name]))}

function check_required(o::FeedDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "FeedDTO", :format, val, "int64")
    end
    if name === Symbol("uploadDate")
        OpenAPI.validate_param(name, "FeedDTO", :format, val, "date-time")
    end
end
