# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferParamDTO
Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же &#x60;name&#x60;, но разными &#x60;value&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json \&quot;params\&quot;: [   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Зеленый\&quot;   },   {     \&quot;name\&quot;: \&quot;Цвет\&quot;,     \&quot;value\&quot;: \&quot;Желтый\&quot;   } ] &#x60;&#x60;&#x60;  {% endcut %} 

    OfferParamDTO(;
        name=nothing,
        value=nothing,
    )

    - name::String : Название.  Должно совпадать с названием характеристики на Маркете. Узнать его можно из Excel-шаблона категории или через запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). 
    - value::String : Значение. 
"""
Base.@kwdef mutable struct OfferParamDTO <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing

    function OfferParamDTO(name, value, )
        OpenAPI.validate_property(OfferParamDTO, Symbol("name"), name)
        OpenAPI.validate_property(OfferParamDTO, Symbol("value"), value)
        return new(name, value, )
    end
end # type OfferParamDTO

const _property_types_OfferParamDTO = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("value")=>"String", )
OpenAPI.property_type(::Type{ OfferParamDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferParamDTO[name]))}

function check_required(o::OfferParamDTO)
    o.name === nothing && (return false)
    o.value === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferParamDTO }, name::Symbol, val)
end
