// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CategoryParameterUnitDTO,
    CategoryParameterUnitDTOFromJSON,
    CategoryParameterUnitDTOToJSON,
    OfferCardRecommendationType,
    OfferCardRecommendationTypeFromJSON,
    OfferCardRecommendationTypeToJSON,
    ParameterType,
    ParameterTypeFromJSON,
    ParameterTypeToJSON,
    ParameterValueConstraintsDTO,
    ParameterValueConstraintsDTOFromJSON,
    ParameterValueConstraintsDTOToJSON,
    ParameterValueOptionDTO,
    ParameterValueOptionDTOFromJSON,
    ParameterValueOptionDTOToJSON,
    ValueRestrictionDTO,
    ValueRestrictionDTOFromJSON,
    ValueRestrictionDTOToJSON,
} from './';

/**
 * Характеристика товара.
 * @export
 * @interface CategoryParameterDTO
 */
export interface CategoryParameterDTO  {
    /**
     * Идентификатор характеристики.
     * @type {number}
     * @memberof CategoryParameterDTO
     */
    id: number;
    /**
     * Название характеристики.
     * @type {string}
     * @memberof CategoryParameterDTO
     */
    name?: string;
    /**
     * 
     * @type {ParameterType}
     * @memberof CategoryParameterDTO
     */
    type: ParameterType;
    /**
     * 
     * @type {CategoryParameterUnitDTO}
     * @memberof CategoryParameterDTO
     */
    unit?: CategoryParameterUnitDTO;
    /**
     * Описание характеристики.
     * @type {string}
     * @memberof CategoryParameterDTO
     */
    description?: string;
    /**
     * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
     * @type {Array<OfferCardRecommendationType>}
     * @memberof CategoryParameterDTO
     */
    recommendationTypes?: Array<OfferCardRecommendationType>;
    /**
     * Обязательность характеристики.
     * @type {boolean}
     * @memberof CategoryParameterDTO
     */
    required: boolean;
    /**
     * Используется ли характеристика в фильтре.
     * @type {boolean}
     * @memberof CategoryParameterDTO
     */
    filtering: boolean;
    /**
     * Является ли характеристика особенностью варианта.
     * @type {boolean}
     * @memberof CategoryParameterDTO
     */
    distinctive: boolean;
    /**
     * Можно ли передать сразу несколько значений.
     * @type {boolean}
     * @memberof CategoryParameterDTO
     */
    multivalue: boolean;
    /**
     * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
     * @type {boolean}
     * @memberof CategoryParameterDTO
     */
    allowCustomValues: boolean;
    /**
     * Список допустимых значений параметра. Только для характеристик типа `ENUM`.
     * @type {Array<ParameterValueOptionDTO>}
     * @memberof CategoryParameterDTO
     */
    values?: Array<ParameterValueOptionDTO>;
    /**
     * 
     * @type {ParameterValueConstraintsDTO}
     * @memberof CategoryParameterDTO
     */
    constraints?: ParameterValueConstraintsDTO;
    /**
     * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
     * @type {Array<ValueRestrictionDTO>}
     * @memberof CategoryParameterDTO
     */
    valueRestrictions?: Array<ValueRestrictionDTO>;
}

export function CategoryParameterDTOFromJSON(json: any): CategoryParameterDTO {
    return {
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': ParameterTypeFromJSON(json['type']),
        'unit': !exists(json, 'unit') ? undefined : CategoryParameterUnitDTOFromJSON(json['unit']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'recommendationTypes': !exists(json, 'recommendationTypes') ? undefined : (json['recommendationTypes'] as Array<any>).map(OfferCardRecommendationTypeFromJSON),
        'required': json['required'],
        'filtering': json['filtering'],
        'distinctive': json['distinctive'],
        'multivalue': json['multivalue'],
        'allowCustomValues': json['allowCustomValues'],
        'values': !exists(json, 'values') ? undefined : (json['values'] as Array<any>).map(ParameterValueOptionDTOFromJSON),
        'constraints': !exists(json, 'constraints') ? undefined : ParameterValueConstraintsDTOFromJSON(json['constraints']),
        'valueRestrictions': !exists(json, 'valueRestrictions') ? undefined : (json['valueRestrictions'] as Array<any>).map(ValueRestrictionDTOFromJSON),
    };
}

export function CategoryParameterDTOToJSON(value?: CategoryParameterDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'name': value.name,
        'type': ParameterTypeToJSON(value.type),
        'unit': CategoryParameterUnitDTOToJSON(value.unit),
        'description': value.description,
        'recommendationTypes': value.recommendationTypes === undefined ? undefined : (value.recommendationTypes as Array<any>).map(OfferCardRecommendationTypeToJSON),
        'required': value.required,
        'filtering': value.filtering,
        'distinctive': value.distinctive,
        'multivalue': value.multivalue,
        'allowCustomValues': value.allowCustomValues,
        'values': value.values === undefined ? undefined : (value.values as Array<any>).map(ParameterValueOptionDTOToJSON),
        'constraints': ParameterValueConstraintsDTOToJSON(value.constraints),
        'valueRestrictions': value.valueRestrictions === undefined ? undefined : (value.valueRestrictions as Array<any>).map(ValueRestrictionDTOToJSON),
    };
}



