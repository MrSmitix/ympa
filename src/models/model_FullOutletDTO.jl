# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FullOutletDTO
Информация о точке продаж.

    FullOutletDTO(;
        name=nothing,
        type=nothing,
        coords=nothing,
        isMain=nothing,
        shopOutletCode=nothing,
        visibility=nothing,
        address=nothing,
        phones=nothing,
        workingSchedule=nothing,
        deliveryRules=nothing,
        storagePeriod=nothing,
        id=nothing,
        status=nothing,
        region=nothing,
        shopOutletId=nothing,
        workingTime=nothing,
        moderationReason=nothing,
    )

    - name::String : Название точки продаж. 
    - type::OutletType
    - coords::String : Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
    - isMain::Bool : Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
    - shopOutletCode::String : Идентификатор точки продаж, присвоенный магазином.
    - visibility::OutletVisibilityType
    - address::OutletAddressDTO
    - phones::Vector{String} : Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
    - workingSchedule::OutletWorkingScheduleDTO
    - deliveryRules::Vector{OutletDeliveryRuleDTO} : Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
    - storagePeriod::Int64 : Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
    - id::Int64 : Идентификатор точки продаж, присвоенный Маркетом.
    - status::OutletStatusType
    - region::RegionDTO
    - shopOutletId::String : Идентификатор точки продаж, заданный магазином.
    - workingTime::String : Рабочее время.
    - moderationReason::String : Статус модерации.
"""
Base.@kwdef mutable struct FullOutletDTO <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, OutletType }
    coords::Union{Nothing, String} = nothing
    isMain::Union{Nothing, Bool} = nothing
    shopOutletCode::Union{Nothing, String} = nothing
    visibility = nothing # spec type: Union{ Nothing, OutletVisibilityType }
    address = nothing # spec type: Union{ Nothing, OutletAddressDTO }
    phones::Union{Nothing, Vector{String}} = nothing
    workingSchedule = nothing # spec type: Union{ Nothing, OutletWorkingScheduleDTO }
    deliveryRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OutletDeliveryRuleDTO} }
    storagePeriod::Union{Nothing, Int64} = nothing
    id::Union{Nothing, Int64} = nothing
    status = nothing # spec type: Union{ Nothing, OutletStatusType }
    region = nothing # spec type: Union{ Nothing, RegionDTO }
    shopOutletId::Union{Nothing, String} = nothing
    workingTime::Union{Nothing, String} = nothing
    moderationReason::Union{Nothing, String} = nothing

    function FullOutletDTO(name, type, coords, isMain, shopOutletCode, visibility, address, phones, workingSchedule, deliveryRules, storagePeriod, id, status, region, shopOutletId, workingTime, moderationReason, )
        OpenAPI.validate_property(FullOutletDTO, Symbol("name"), name)
        OpenAPI.validate_property(FullOutletDTO, Symbol("type"), type)
        OpenAPI.validate_property(FullOutletDTO, Symbol("coords"), coords)
        OpenAPI.validate_property(FullOutletDTO, Symbol("isMain"), isMain)
        OpenAPI.validate_property(FullOutletDTO, Symbol("shopOutletCode"), shopOutletCode)
        OpenAPI.validate_property(FullOutletDTO, Symbol("visibility"), visibility)
        OpenAPI.validate_property(FullOutletDTO, Symbol("address"), address)
        OpenAPI.validate_property(FullOutletDTO, Symbol("phones"), phones)
        OpenAPI.validate_property(FullOutletDTO, Symbol("workingSchedule"), workingSchedule)
        OpenAPI.validate_property(FullOutletDTO, Symbol("deliveryRules"), deliveryRules)
        OpenAPI.validate_property(FullOutletDTO, Symbol("storagePeriod"), storagePeriod)
        OpenAPI.validate_property(FullOutletDTO, Symbol("id"), id)
        OpenAPI.validate_property(FullOutletDTO, Symbol("status"), status)
        OpenAPI.validate_property(FullOutletDTO, Symbol("region"), region)
        OpenAPI.validate_property(FullOutletDTO, Symbol("shopOutletId"), shopOutletId)
        OpenAPI.validate_property(FullOutletDTO, Symbol("workingTime"), workingTime)
        OpenAPI.validate_property(FullOutletDTO, Symbol("moderationReason"), moderationReason)
        return new(name, type, coords, isMain, shopOutletCode, visibility, address, phones, workingSchedule, deliveryRules, storagePeriod, id, status, region, shopOutletId, workingTime, moderationReason, )
    end
end # type FullOutletDTO

const _property_types_FullOutletDTO = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"OutletType", Symbol("coords")=>"String", Symbol("isMain")=>"Bool", Symbol("shopOutletCode")=>"String", Symbol("visibility")=>"OutletVisibilityType", Symbol("address")=>"OutletAddressDTO", Symbol("phones")=>"Vector{String}", Symbol("workingSchedule")=>"OutletWorkingScheduleDTO", Symbol("deliveryRules")=>"Vector{OutletDeliveryRuleDTO}", Symbol("storagePeriod")=>"Int64", Symbol("id")=>"Int64", Symbol("status")=>"OutletStatusType", Symbol("region")=>"RegionDTO", Symbol("shopOutletId")=>"String", Symbol("workingTime")=>"String", Symbol("moderationReason")=>"String", )
OpenAPI.property_type(::Type{ FullOutletDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FullOutletDTO[name]))}

function check_required(o::FullOutletDTO)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    o.address === nothing && (return false)
    o.phones === nothing && (return false)
    o.workingSchedule === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FullOutletDTO }, name::Symbol, val)
    if name === Symbol("phones")
        OpenAPI.validate_param(name, "FullOutletDTO", :minItems, val, 1)
    end
    if name === Symbol("storagePeriod")
        OpenAPI.validate_param(name, "FullOutletDTO", :format, val, "int64")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "FullOutletDTO", :format, val, "int64")
    end
end
