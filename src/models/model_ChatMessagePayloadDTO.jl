# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatMessagePayloadDTO
Информация о приложенных к сообщению файлах.

    ChatMessagePayloadDTO(;
        name=nothing,
        url=nothing,
        size=nothing,
    )

    - name::String : Имя файла.
    - url::String : Ссылка для скачивания файла.
    - size::Int64 : Размер файла в байтах.
"""
Base.@kwdef mutable struct ChatMessagePayloadDTO <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    size::Union{Nothing, Int64} = nothing

    function ChatMessagePayloadDTO(name, url, size, )
        OpenAPI.validate_property(ChatMessagePayloadDTO, Symbol("name"), name)
        OpenAPI.validate_property(ChatMessagePayloadDTO, Symbol("url"), url)
        OpenAPI.validate_property(ChatMessagePayloadDTO, Symbol("size"), size)
        return new(name, url, size, )
    end
end # type ChatMessagePayloadDTO

const _property_types_ChatMessagePayloadDTO = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("url")=>"String", Symbol("size")=>"Int64", )
OpenAPI.property_type(::Type{ ChatMessagePayloadDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatMessagePayloadDTO[name]))}

function check_required(o::ChatMessagePayloadDTO)
    o.name === nothing && (return false)
    o.url === nothing && (return false)
    o.size === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatMessagePayloadDTO }, name::Symbol, val)
    if name === Symbol("size")
        OpenAPI.validate_param(name, "ChatMessagePayloadDTO", :format, val, "int32")
    end
end
