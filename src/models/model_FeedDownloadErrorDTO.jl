# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedDownloadErrorDTO
Информация об ошибке при загрузке прайс-листа. Выводится, если параметр &#x60;download status&#x3D;ERROR&#x60;. 

    FeedDownloadErrorDTO(;
        httpStatusCode=nothing,
        type=nothing,
        description=nothing,
    )

    - httpStatusCode::Int64 : HTTP-код ошибки индексации прайс-листа. Выводится, если &#x60;type&#x3D;DOWNLOAD_HTTP_ERROR&#x60;. 
    - type::FeedDownloadErrorType
    - description::String : Описание ошибки. Выводится, если &#x60;type&#x3D;DOWNLOAD_ERROR&#x60;. 
"""
Base.@kwdef mutable struct FeedDownloadErrorDTO <: OpenAPI.APIModel
    httpStatusCode::Union{Nothing, Int64} = nothing
    type = nothing # spec type: Union{ Nothing, FeedDownloadErrorType }
    description::Union{Nothing, String} = nothing

    function FeedDownloadErrorDTO(httpStatusCode, type, description, )
        OpenAPI.validate_property(FeedDownloadErrorDTO, Symbol("httpStatusCode"), httpStatusCode)
        OpenAPI.validate_property(FeedDownloadErrorDTO, Symbol("type"), type)
        OpenAPI.validate_property(FeedDownloadErrorDTO, Symbol("description"), description)
        return new(httpStatusCode, type, description, )
    end
end # type FeedDownloadErrorDTO

const _property_types_FeedDownloadErrorDTO = Dict{Symbol,String}(Symbol("httpStatusCode")=>"Int64", Symbol("type")=>"FeedDownloadErrorType", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ FeedDownloadErrorDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedDownloadErrorDTO[name]))}

function check_required(o::FeedDownloadErrorDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedDownloadErrorDTO }, name::Symbol, val)
    if name === Symbol("httpStatusCode")
        OpenAPI.validate_param(name, "FeedDownloadErrorDTO", :format, val, "int32")
    end
end
