# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetOfferMappingsRequest

    GetOfferMappingsRequest(;
        offerIds=nothing,
        cardStatuses=nothing,
        categoryIds=nothing,
        vendorNames=nothing,
        tags=nothing,
        archived=nothing,
    )

    - offerIds::Vector{String} : Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * &#x60;page_token&#x60;; * &#x60;limit&#x60;; * &#x60;cardStatuses&#x60;; * &#x60;categoryIds&#x60;; * &#x60;vendorNames&#x60;; * &#x60;tags&#x60;; * &#x60;archived&#x60;.  {% endnote %}    
    - cardStatuses::Vector{OfferCardStatusType} : Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
    - categoryIds::Vector{Int64} : Фильтр по категориям на Маркете.
    - vendorNames::Vector{String} : Фильтр по брендам.
    - tags::Vector{String} : Фильтр по тегам.
    - archived::Bool : Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращаются товары, не находящиеся в архиве. 
"""
Base.@kwdef mutable struct GetOfferMappingsRequest <: OpenAPI.APIModel
    offerIds::Union{Nothing, Vector{String}} = nothing
    cardStatuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferCardStatusType} }
    categoryIds::Union{Nothing, Vector{Int64}} = nothing
    vendorNames::Union{Nothing, Vector{String}} = nothing
    tags::Union{Nothing, Vector{String}} = nothing
    archived::Union{Nothing, Bool} = nothing

    function GetOfferMappingsRequest(offerIds, cardStatuses, categoryIds, vendorNames, tags, archived, )
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("offerIds"), offerIds)
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("cardStatuses"), cardStatuses)
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("categoryIds"), categoryIds)
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("vendorNames"), vendorNames)
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("tags"), tags)
        OpenAPI.validate_property(GetOfferMappingsRequest, Symbol("archived"), archived)
        return new(offerIds, cardStatuses, categoryIds, vendorNames, tags, archived, )
    end
end # type GetOfferMappingsRequest

const _property_types_GetOfferMappingsRequest = Dict{Symbol,String}(Symbol("offerIds")=>"Vector{String}", Symbol("cardStatuses")=>"Vector{OfferCardStatusType}", Symbol("categoryIds")=>"Vector{Int64}", Symbol("vendorNames")=>"Vector{String}", Symbol("tags")=>"Vector{String}", Symbol("archived")=>"Bool", )
OpenAPI.property_type(::Type{ GetOfferMappingsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetOfferMappingsRequest[name]))}

function check_required(o::GetOfferMappingsRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetOfferMappingsRequest }, name::Symbol, val)
    if name === Symbol("offerIds")
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :maxItems, val, 200)
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :minItems, val, 1)
    end
    if name === Symbol("cardStatuses")
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :minItems, val, 1)
    end
    if name === Symbol("categoryIds")
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :minItems, val, 1)
    end
    if name === Symbol("vendorNames")
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :minItems, val, 1)
    end
    if name === Symbol("tags")
        OpenAPI.validate_param(name, "GetOfferMappingsRequest", :minItems, val, 1)
    end
end
