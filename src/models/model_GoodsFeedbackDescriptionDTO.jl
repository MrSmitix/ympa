# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GoodsFeedbackDescriptionDTO
Текстовая часть отзыва.

    GoodsFeedbackDescriptionDTO(;
        advantages=nothing,
        disadvantages=nothing,
        comment=nothing,
    )

    - advantages::String : Описание плюсов товара в отзыве.
    - disadvantages::String : Описание минусов товара в отзыве.
    - comment::String : Комментарий в отзыве.
"""
Base.@kwdef mutable struct GoodsFeedbackDescriptionDTO <: OpenAPI.APIModel
    advantages::Union{Nothing, String} = nothing
    disadvantages::Union{Nothing, String} = nothing
    comment::Union{Nothing, String} = nothing

    function GoodsFeedbackDescriptionDTO(advantages, disadvantages, comment, )
        OpenAPI.validate_property(GoodsFeedbackDescriptionDTO, Symbol("advantages"), advantages)
        OpenAPI.validate_property(GoodsFeedbackDescriptionDTO, Symbol("disadvantages"), disadvantages)
        OpenAPI.validate_property(GoodsFeedbackDescriptionDTO, Symbol("comment"), comment)
        return new(advantages, disadvantages, comment, )
    end
end # type GoodsFeedbackDescriptionDTO

const _property_types_GoodsFeedbackDescriptionDTO = Dict{Symbol,String}(Symbol("advantages")=>"String", Symbol("disadvantages")=>"String", Symbol("comment")=>"String", )
OpenAPI.property_type(::Type{ GoodsFeedbackDescriptionDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GoodsFeedbackDescriptionDTO[name]))}

function check_required(o::GoodsFeedbackDescriptionDTO)
    true
end

function OpenAPI.validate_property(::Type{ GoodsFeedbackDescriptionDTO }, name::Symbol, val)
end
