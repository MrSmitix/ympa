# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EacVerificationResultDTO
Результат выполнения запроса.

    EacVerificationResultDTO(;
        verificationResult=nothing,
        attemptsLeft=nothing,
    )

    - verificationResult::EacVerificationStatusType
    - attemptsLeft::Int64 : Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится. 
"""
Base.@kwdef mutable struct EacVerificationResultDTO <: OpenAPI.APIModel
    verificationResult = nothing # spec type: Union{ Nothing, EacVerificationStatusType }
    attemptsLeft::Union{Nothing, Int64} = nothing

    function EacVerificationResultDTO(verificationResult, attemptsLeft, )
        OpenAPI.validate_property(EacVerificationResultDTO, Symbol("verificationResult"), verificationResult)
        OpenAPI.validate_property(EacVerificationResultDTO, Symbol("attemptsLeft"), attemptsLeft)
        return new(verificationResult, attemptsLeft, )
    end
end # type EacVerificationResultDTO

const _property_types_EacVerificationResultDTO = Dict{Symbol,String}(Symbol("verificationResult")=>"EacVerificationStatusType", Symbol("attemptsLeft")=>"Int64", )
OpenAPI.property_type(::Type{ EacVerificationResultDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EacVerificationResultDTO[name]))}

function check_required(o::EacVerificationResultDTO)
    true
end

function OpenAPI.validate_property(::Type{ EacVerificationResultDTO }, name::Symbol, val)
    if name === Symbol("attemptsLeft")
        OpenAPI.validate_param(name, "EacVerificationResultDTO", :format, val, "int32")
    end
end
