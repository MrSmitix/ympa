// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Данные, необходимые для генерации отчета. 
 * @export
 * @interface GenerateStocksOnWarehousesReportRequest
 */
export interface GenerateStocksOnWarehousesReportRequest  {
    /**
     * Идентификатор магазина.
     * @type {number}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    campaignId: number;
    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     * @type {Array<number>}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    warehouseIds?: Array<number>;
    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     * @type {Date}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    reportDate?: Date;
    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     * @type {Array<number>}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    categoryIds?: Array<number>;
    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     * @type {boolean}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    hasStocks?: boolean;
}

export function GenerateStocksOnWarehousesReportRequestFromJSON(json: any): GenerateStocksOnWarehousesReportRequest {
    return {
        'campaignId': json['campaignId'],
        'warehouseIds': !exists(json, 'warehouseIds') ? undefined : json['warehouseIds'],
        'reportDate': !exists(json, 'reportDate') ? undefined : new Date(json['reportDate']),
        'categoryIds': !exists(json, 'categoryIds') ? undefined : json['categoryIds'],
        'hasStocks': !exists(json, 'hasStocks') ? undefined : json['hasStocks'],
    };
}

export function GenerateStocksOnWarehousesReportRequestToJSON(value?: GenerateStocksOnWarehousesReportRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'campaignId': value.campaignId,
        'warehouseIds': value.warehouseIds,
        'reportDate': value.reportDate === undefined ? undefined : value.reportDate.toISOString().substring(0,10),
        'categoryIds': value.categoryIds,
        'hasStocks': value.hasStocks,
    };
}


