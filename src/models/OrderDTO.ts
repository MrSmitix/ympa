// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CurrencyType,
    CurrencyTypeFromJSON,
    CurrencyTypeToJSON,
    OrderBuyerDTO,
    OrderBuyerDTOFromJSON,
    OrderBuyerDTOToJSON,
    OrderDeliveryDTO,
    OrderDeliveryDTOFromJSON,
    OrderDeliveryDTOToJSON,
    OrderItemDTO,
    OrderItemDTOFromJSON,
    OrderItemDTOToJSON,
    OrderPaymentMethodType,
    OrderPaymentMethodTypeFromJSON,
    OrderPaymentMethodTypeToJSON,
    OrderPaymentType,
    OrderPaymentTypeFromJSON,
    OrderPaymentTypeToJSON,
    OrderStatusType,
    OrderStatusTypeFromJSON,
    OrderStatusTypeToJSON,
    OrderSubsidyDTO,
    OrderSubsidyDTOFromJSON,
    OrderSubsidyDTOToJSON,
    OrderSubstatusType,
    OrderSubstatusTypeFromJSON,
    OrderSubstatusTypeToJSON,
    OrderTaxSystemType,
    OrderTaxSystemTypeFromJSON,
    OrderTaxSystemTypeToJSON,
} from './';

/**
 * Заказ.
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO  {
    /**
     * Идентификатор заказа.
     * @type {number}
     * @memberof OrderDTO
     */
    id?: number;
    /**
     * 
     * @type {OrderStatusType}
     * @memberof OrderDTO
     */
    status?: OrderStatusType;
    /**
     * 
     * @type {OrderSubstatusType}
     * @memberof OrderDTO
     */
    substatus?: OrderSubstatusType;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    creationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    updatedAt?: string;
    /**
     * 
     * @type {CurrencyType}
     * @memberof OrderDTO
     */
    currency?: CurrencyType;
    /**
     * Платеж покупателя. 
     * @type {number}
     * @memberof OrderDTO
     */
    itemsTotal?: number;
    /**
     * Стоимость доставки. 
     * @type {number}
     * @memberof OrderDTO
     */
    deliveryTotal?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
     * @type {number}
     * @memberof OrderDTO
     */
    buyerItemsTotal?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
     * @type {number}
     * @memberof OrderDTO
     */
    buyerTotal?: number;
    /**
     * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
     * @type {number}
     * @memberof OrderDTO
     */
    buyerItemsTotalBeforeDiscount?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
     * @type {number}
     * @memberof OrderDTO
     */
    buyerTotalBeforeDiscount?: number;
    /**
     * 
     * @type {OrderPaymentType}
     * @memberof OrderDTO
     */
    paymentType?: OrderPaymentType;
    /**
     * 
     * @type {OrderPaymentMethodType}
     * @memberof OrderDTO
     */
    paymentMethod?: OrderPaymentMethodType;
    /**
     * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
     * @type {boolean}
     * @memberof OrderDTO
     */
    fake?: boolean;
    /**
     * Список товаров в заказе.
     * @type {Array<OrderItemDTO>}
     * @memberof OrderDTO
     */
    items: Array<OrderItemDTO>;
    /**
     * Список субсидий по типам.
     * @type {Array<OrderSubsidyDTO>}
     * @memberof OrderDTO
     */
    subsidies?: Array<OrderSubsidyDTO>;
    /**
     * 
     * @type {OrderDeliveryDTO}
     * @memberof OrderDTO
     */
    delivery?: OrderDeliveryDTO;
    /**
     * 
     * @type {OrderBuyerDTO}
     * @memberof OrderDTO
     */
    buyer?: OrderBuyerDTO;
    /**
     * Комментарий к заказу.
     * @type {string}
     * @memberof OrderDTO
     */
    notes?: string;
    /**
     * 
     * @type {OrderTaxSystemType}
     * @memberof OrderDTO
     */
    taxSystem?: OrderTaxSystemType;
    /**
     * **Только для модели DBS**  Запрошена ли отмена. 
     * @type {boolean}
     * @memberof OrderDTO
     */
    cancelRequested?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    expiryDate?: string;
}

export function OrderDTOFromJSON(json: any): OrderDTO {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'status': !exists(json, 'status') ? undefined : OrderStatusTypeFromJSON(json['status']),
        'substatus': !exists(json, 'substatus') ? undefined : OrderSubstatusTypeFromJSON(json['substatus']),
        'creationDate': !exists(json, 'creationDate') ? undefined : json['creationDate'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyTypeFromJSON(json['currency']),
        'itemsTotal': !exists(json, 'itemsTotal') ? undefined : json['itemsTotal'],
        'deliveryTotal': !exists(json, 'deliveryTotal') ? undefined : json['deliveryTotal'],
        'buyerItemsTotal': !exists(json, 'buyerItemsTotal') ? undefined : json['buyerItemsTotal'],
        'buyerTotal': !exists(json, 'buyerTotal') ? undefined : json['buyerTotal'],
        'buyerItemsTotalBeforeDiscount': !exists(json, 'buyerItemsTotalBeforeDiscount') ? undefined : json['buyerItemsTotalBeforeDiscount'],
        'buyerTotalBeforeDiscount': !exists(json, 'buyerTotalBeforeDiscount') ? undefined : json['buyerTotalBeforeDiscount'],
        'paymentType': !exists(json, 'paymentType') ? undefined : OrderPaymentTypeFromJSON(json['paymentType']),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : OrderPaymentMethodTypeFromJSON(json['paymentMethod']),
        'fake': !exists(json, 'fake') ? undefined : json['fake'],
        'items': (json['items'] as Array<any>).map(OrderItemDTOFromJSON),
        'subsidies': !exists(json, 'subsidies') ? undefined : (json['subsidies'] as Array<any>).map(OrderSubsidyDTOFromJSON),
        'delivery': !exists(json, 'delivery') ? undefined : OrderDeliveryDTOFromJSON(json['delivery']),
        'buyer': !exists(json, 'buyer') ? undefined : OrderBuyerDTOFromJSON(json['buyer']),
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'taxSystem': !exists(json, 'taxSystem') ? undefined : OrderTaxSystemTypeFromJSON(json['taxSystem']),
        'cancelRequested': !exists(json, 'cancelRequested') ? undefined : json['cancelRequested'],
        'expiryDate': !exists(json, 'expiryDate') ? undefined : json['expiryDate'],
    };
}

export function OrderDTOToJSON(value?: OrderDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'status': OrderStatusTypeToJSON(value.status),
        'substatus': OrderSubstatusTypeToJSON(value.substatus),
        'creationDate': value.creationDate,
        'updatedAt': value.updatedAt,
        'currency': CurrencyTypeToJSON(value.currency),
        'itemsTotal': value.itemsTotal,
        'deliveryTotal': value.deliveryTotal,
        'buyerItemsTotal': value.buyerItemsTotal,
        'buyerTotal': value.buyerTotal,
        'buyerItemsTotalBeforeDiscount': value.buyerItemsTotalBeforeDiscount,
        'buyerTotalBeforeDiscount': value.buyerTotalBeforeDiscount,
        'paymentType': OrderPaymentTypeToJSON(value.paymentType),
        'paymentMethod': OrderPaymentMethodTypeToJSON(value.paymentMethod),
        'fake': value.fake,
        'items': (value.items as Array<any>).map(OrderItemDTOToJSON),
        'subsidies': value.subsidies === undefined ? undefined : (value.subsidies as Array<any>).map(OrderSubsidyDTOToJSON),
        'delivery': OrderDeliveryDTOToJSON(value.delivery),
        'buyer': OrderBuyerDTOToJSON(value.buyer),
        'notes': value.notes,
        'taxSystem': OrderTaxSystemTypeToJSON(value.taxSystem),
        'cancelRequested': value.cancelRequested,
        'expiryDate': value.expiryDate,
    };
}



