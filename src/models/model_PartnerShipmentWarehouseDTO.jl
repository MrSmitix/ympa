# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PartnerShipmentWarehouseDTO
Данные о складе отправления.

    PartnerShipmentWarehouseDTO(;
        id=nothing,
        name=nothing,
        address=nothing,
    )

    - id::Int64 : Идентификатор склада отправления.
    - name::String : Наименование склада отправления.
    - address::String : Адрес склада отправления.
"""
Base.@kwdef mutable struct PartnerShipmentWarehouseDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    address::Union{Nothing, String} = nothing

    function PartnerShipmentWarehouseDTO(id, name, address, )
        OpenAPI.validate_property(PartnerShipmentWarehouseDTO, Symbol("id"), id)
        OpenAPI.validate_property(PartnerShipmentWarehouseDTO, Symbol("name"), name)
        OpenAPI.validate_property(PartnerShipmentWarehouseDTO, Symbol("address"), address)
        return new(id, name, address, )
    end
end # type PartnerShipmentWarehouseDTO

const _property_types_PartnerShipmentWarehouseDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("address")=>"String", )
OpenAPI.property_type(::Type{ PartnerShipmentWarehouseDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PartnerShipmentWarehouseDTO[name]))}

function check_required(o::PartnerShipmentWarehouseDTO)
    true
end

function OpenAPI.validate_property(::Type{ PartnerShipmentWarehouseDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "PartnerShipmentWarehouseDTO", :format, val, "int64")
    end
end
