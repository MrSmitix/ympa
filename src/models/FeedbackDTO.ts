// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FeedbackAuthorDTO,
    FeedbackAuthorDTOFromJSON,
    FeedbackAuthorDTOToJSON,
    FeedbackCommentDTO,
    FeedbackCommentDTOFromJSON,
    FeedbackCommentDTOToJSON,
    FeedbackGradesDTO,
    FeedbackGradesDTOFromJSON,
    FeedbackGradesDTOToJSON,
    FeedbackOrderDTO,
    FeedbackOrderDTOFromJSON,
    FeedbackOrderDTOToJSON,
    FeedbackShopDTO,
    FeedbackShopDTOFromJSON,
    FeedbackShopDTOToJSON,
    FeedbackStateType,
    FeedbackStateTypeFromJSON,
    FeedbackStateTypeToJSON,
} from './';

/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 * @export
 * @interface FeedbackDTO
 */
export interface FeedbackDTO  {
    /**
     * Идентификатор отзыва.
     * @type {number}
     * @memberof FeedbackDTO
     */
    id?: number;
    /**
     * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
     * @type {Date}
     * @memberof FeedbackDTO
     */
    createdAt?: Date;
    /**
     * Комментарий автора отзыва.
     * @type {string}
     * @memberof FeedbackDTO
     */
    text?: string;
    /**
     * 
     * @type {FeedbackStateType}
     * @memberof FeedbackDTO
     */
    state?: FeedbackStateType;
    /**
     * 
     * @type {FeedbackAuthorDTO}
     * @memberof FeedbackDTO
     */
    author?: FeedbackAuthorDTO;
    /**
     * Достоинства магазина, описанные в отзыве.
     * @type {string}
     * @memberof FeedbackDTO
     */
    pro?: string;
    /**
     * Недостатки магазина, описанные в отзыве.
     * @type {string}
     * @memberof FeedbackDTO
     */
    contra?: string;
    /**
     * Переписка автора отзыва с магазином.
     * @type {Array<FeedbackCommentDTO>}
     * @memberof FeedbackDTO
     */
    comments: Array<FeedbackCommentDTO>;
    /**
     * 
     * @type {FeedbackShopDTO}
     * @memberof FeedbackDTO
     */
    shop?: FeedbackShopDTO;
    /**
     * Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    resolved?: boolean;
    /**
     * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    verified?: boolean;
    /**
     * Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    recommend?: boolean;
    /**
     * 
     * @type {FeedbackGradesDTO}
     * @memberof FeedbackDTO
     */
    grades?: FeedbackGradesDTO;
    /**
     * 
     * @type {FeedbackOrderDTO}
     * @memberof FeedbackDTO
     */
    order?: FeedbackOrderDTO;
}

export function FeedbackDTOFromJSON(json: any): FeedbackDTO {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
        'text': !exists(json, 'text') ? undefined : json['text'],
        'state': !exists(json, 'state') ? undefined : FeedbackStateTypeFromJSON(json['state']),
        'author': !exists(json, 'author') ? undefined : FeedbackAuthorDTOFromJSON(json['author']),
        'pro': !exists(json, 'pro') ? undefined : json['pro'],
        'contra': !exists(json, 'contra') ? undefined : json['contra'],
        'comments': (json['comments'] as Array<any>).map(FeedbackCommentDTOFromJSON),
        'shop': !exists(json, 'shop') ? undefined : FeedbackShopDTOFromJSON(json['shop']),
        'resolved': !exists(json, 'resolved') ? undefined : json['resolved'],
        'verified': !exists(json, 'verified') ? undefined : json['verified'],
        'recommend': !exists(json, 'recommend') ? undefined : json['recommend'],
        'grades': !exists(json, 'grades') ? undefined : FeedbackGradesDTOFromJSON(json['grades']),
        'order': !exists(json, 'order') ? undefined : FeedbackOrderDTOFromJSON(json['order']),
    };
}

export function FeedbackDTOToJSON(value?: FeedbackDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
        'text': value.text,
        'state': FeedbackStateTypeToJSON(value.state),
        'author': FeedbackAuthorDTOToJSON(value.author),
        'pro': value.pro,
        'contra': value.contra,
        'comments': (value.comments as Array<any>).map(FeedbackCommentDTOToJSON),
        'shop': FeedbackShopDTOToJSON(value.shop),
        'resolved': value.resolved,
        'verified': value.verified,
        'recommend': value.recommend,
        'grades': FeedbackGradesDTOToJSON(value.grades),
        'order': FeedbackOrderDTOToJSON(value.order),
    };
}



