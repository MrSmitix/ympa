# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PriceSuggestOfferDTO
Товар с ценами для продвижения.

    PriceSuggestOfferDTO(;
        marketSku=nothing,
        offerId=nothing,
        priceSuggestion=nothing,
    )

    - marketSku::Int64 : SKU на Маркете.
    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - priceSuggestion::Vector{PriceSuggestDTO} : Цены для продвижения. 
"""
Base.@kwdef mutable struct PriceSuggestOfferDTO <: OpenAPI.APIModel
    marketSku::Union{Nothing, Int64} = nothing
    offerId::Union{Nothing, String} = nothing
    priceSuggestion::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PriceSuggestDTO} }

    function PriceSuggestOfferDTO(marketSku, offerId, priceSuggestion, )
        OpenAPI.validate_property(PriceSuggestOfferDTO, Symbol("marketSku"), marketSku)
        OpenAPI.validate_property(PriceSuggestOfferDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(PriceSuggestOfferDTO, Symbol("priceSuggestion"), priceSuggestion)
        return new(marketSku, offerId, priceSuggestion, )
    end
end # type PriceSuggestOfferDTO

const _property_types_PriceSuggestOfferDTO = Dict{Symbol,String}(Symbol("marketSku")=>"Int64", Symbol("offerId")=>"String", Symbol("priceSuggestion")=>"Vector{PriceSuggestDTO}", )
OpenAPI.property_type(::Type{ PriceSuggestOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PriceSuggestOfferDTO[name]))}

function check_required(o::PriceSuggestOfferDTO)
    true
end

function OpenAPI.validate_property(::Type{ PriceSuggestOfferDTO }, name::Symbol, val)
    if name === Symbol("marketSku")
        OpenAPI.validate_param(name, "PriceSuggestOfferDTO", :format, val, "int64")
    end
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "PriceSuggestOfferDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "PriceSuggestOfferDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "PriceSuggestOfferDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
end
