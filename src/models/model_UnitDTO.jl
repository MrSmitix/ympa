# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UnitDTO
Единица измерения.

    UnitDTO(;
        id=nothing,
        name=nothing,
        fullName=nothing,
    )

    - id::Int64 : Идентификатор единицы измерения.
    - name::String : Сокращенное название единицы измерения.
    - fullName::String : Полное название единицы измерения.
"""
Base.@kwdef mutable struct UnitDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    fullName::Union{Nothing, String} = nothing

    function UnitDTO(id, name, fullName, )
        OpenAPI.validate_property(UnitDTO, Symbol("id"), id)
        OpenAPI.validate_property(UnitDTO, Symbol("name"), name)
        OpenAPI.validate_property(UnitDTO, Symbol("fullName"), fullName)
        return new(id, name, fullName, )
    end
end # type UnitDTO

const _property_types_UnitDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("fullName")=>"String", )
OpenAPI.property_type(::Type{ UnitDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UnitDTO[name]))}

function check_required(o::UnitDTO)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.fullName === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UnitDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "UnitDTO", :format, val, "int64")
    end
end
