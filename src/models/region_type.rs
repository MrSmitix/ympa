/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RegionType : Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
/// Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RegionType {
    #[serde(rename = "OTHER")]
    Other,
    #[serde(rename = "CONTINENT")]
    Continent,
    #[serde(rename = "REGION")]
    Region,
    #[serde(rename = "COUNTRY")]
    Country,
    #[serde(rename = "COUNTRY_DISTRICT")]
    CountryDistrict,
    #[serde(rename = "REPUBLIC")]
    Republic,
    #[serde(rename = "CITY")]
    City,
    #[serde(rename = "VILLAGE")]
    Village,
    #[serde(rename = "CITY_DISTRICT")]
    CityDistrict,
    #[serde(rename = "SUBWAY_STATION")]
    SubwayStation,
    #[serde(rename = "REPUBLIC_AREA")]
    RepublicArea,

}

impl std::fmt::Display for RegionType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Other => write!(f, "OTHER"),
            Self::Continent => write!(f, "CONTINENT"),
            Self::Region => write!(f, "REGION"),
            Self::Country => write!(f, "COUNTRY"),
            Self::CountryDistrict => write!(f, "COUNTRY_DISTRICT"),
            Self::Republic => write!(f, "REPUBLIC"),
            Self::City => write!(f, "CITY"),
            Self::Village => write!(f, "VILLAGE"),
            Self::CityDistrict => write!(f, "CITY_DISTRICT"),
            Self::SubwayStation => write!(f, "SUBWAY_STATION"),
            Self::RepublicArea => write!(f, "REPUBLIC_AREA"),
        }
    }
}

impl Default for RegionType {
    fn default() -> RegionType {
        Self::Other
    }
}

