# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryParameterDTO
Характеристика товара.

    CategoryParameterDTO(;
        id=nothing,
        name=nothing,
        type=nothing,
        unit=nothing,
        description=nothing,
        recommendationTypes=nothing,
        required=nothing,
        filtering=nothing,
        distinctive=nothing,
        multivalue=nothing,
        allowCustomValues=nothing,
        values=nothing,
        constraints=nothing,
        valueRestrictions=nothing,
    )

    - id::Int64 : Идентификатор характеристики.
    - name::String : Название характеристики.
    - type::ParameterType
    - unit::CategoryParameterUnitDTO
    - description::String : Описание характеристики.
    - recommendationTypes::Vector{OfferCardRecommendationType} : Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    - required::Bool : Обязательность характеристики.
    - filtering::Bool : Используется ли характеристика в фильтре.
    - distinctive::Bool : Является ли характеристика особенностью варианта.
    - multivalue::Bool : Можно ли передать сразу несколько значений.
    - allowCustomValues::Bool : Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
    - values::Vector{ParameterValueOptionDTO} : Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
    - constraints::ParameterValueConstraintsDTO
    - valueRestrictions::Vector{ValueRestrictionDTO} : Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
"""
Base.@kwdef mutable struct CategoryParameterDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, ParameterType }
    unit = nothing # spec type: Union{ Nothing, CategoryParameterUnitDTO }
    description::Union{Nothing, String} = nothing
    recommendationTypes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferCardRecommendationType} }
    required::Union{Nothing, Bool} = nothing
    filtering::Union{Nothing, Bool} = nothing
    distinctive::Union{Nothing, Bool} = nothing
    multivalue::Union{Nothing, Bool} = nothing
    allowCustomValues::Union{Nothing, Bool} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ParameterValueOptionDTO} }
    constraints = nothing # spec type: Union{ Nothing, ParameterValueConstraintsDTO }
    valueRestrictions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ValueRestrictionDTO} }

    function CategoryParameterDTO(id, name, type, unit, description, recommendationTypes, required, filtering, distinctive, multivalue, allowCustomValues, values, constraints, valueRestrictions, )
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("id"), id)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("name"), name)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("type"), type)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("unit"), unit)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("description"), description)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("recommendationTypes"), recommendationTypes)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("required"), required)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("filtering"), filtering)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("distinctive"), distinctive)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("multivalue"), multivalue)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("allowCustomValues"), allowCustomValues)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("values"), values)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("constraints"), constraints)
        OpenAPI.validate_property(CategoryParameterDTO, Symbol("valueRestrictions"), valueRestrictions)
        return new(id, name, type, unit, description, recommendationTypes, required, filtering, distinctive, multivalue, allowCustomValues, values, constraints, valueRestrictions, )
    end
end # type CategoryParameterDTO

const _property_types_CategoryParameterDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("type")=>"ParameterType", Symbol("unit")=>"CategoryParameterUnitDTO", Symbol("description")=>"String", Symbol("recommendationTypes")=>"Vector{OfferCardRecommendationType}", Symbol("required")=>"Bool", Symbol("filtering")=>"Bool", Symbol("distinctive")=>"Bool", Symbol("multivalue")=>"Bool", Symbol("allowCustomValues")=>"Bool", Symbol("values")=>"Vector{ParameterValueOptionDTO}", Symbol("constraints")=>"ParameterValueConstraintsDTO", Symbol("valueRestrictions")=>"Vector{ValueRestrictionDTO}", )
OpenAPI.property_type(::Type{ CategoryParameterDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryParameterDTO[name]))}

function check_required(o::CategoryParameterDTO)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.required === nothing && (return false)
    o.filtering === nothing && (return false)
    o.distinctive === nothing && (return false)
    o.multivalue === nothing && (return false)
    o.allowCustomValues === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryParameterDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "CategoryParameterDTO", :format, val, "int64")
    end
end
