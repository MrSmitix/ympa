/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OfferProcessingStatusType : Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
/// Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OfferProcessingStatusType {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "READY")]
    Ready,
    #[serde(rename = "IN_WORK")]
    InWork,
    #[serde(rename = "NEED_INFO")]
    NeedInfo,
    #[serde(rename = "NEED_MAPPING")]
    NeedMapping,
    #[serde(rename = "NEED_CONTENT")]
    NeedContent,
    #[serde(rename = "CONTENT_PROCESSING")]
    ContentProcessing,
    #[serde(rename = "SUSPENDED")]
    Suspended,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "REVIEW")]
    Review,
    #[serde(rename = "CREATE_ERROR")]
    CreateError,
    #[serde(rename = "UPDATE_ERROR")]
    UpdateError,

}

impl std::fmt::Display for OfferProcessingStatusType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Unknown => write!(f, "UNKNOWN"),
            Self::Ready => write!(f, "READY"),
            Self::InWork => write!(f, "IN_WORK"),
            Self::NeedInfo => write!(f, "NEED_INFO"),
            Self::NeedMapping => write!(f, "NEED_MAPPING"),
            Self::NeedContent => write!(f, "NEED_CONTENT"),
            Self::ContentProcessing => write!(f, "CONTENT_PROCESSING"),
            Self::Suspended => write!(f, "SUSPENDED"),
            Self::Rejected => write!(f, "REJECTED"),
            Self::Review => write!(f, "REVIEW"),
            Self::CreateError => write!(f, "CREATE_ERROR"),
            Self::UpdateError => write!(f, "UPDATE_ERROR"),
        }
    }
}

impl Default for OfferProcessingStatusType {
    fn default() -> OfferProcessingStatusType {
        Self::Unknown
    }
}

