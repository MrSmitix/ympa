/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReturnInstanceStockType : Тип остатка на складе.
/// Тип остатка на складе.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReturnInstanceStockType {
    #[serde(rename = "FIT")]
    Fit,
    #[serde(rename = "DEFECT")]
    Defect,
    #[serde(rename = "ANOMALY")]
    Anomaly,
    #[serde(rename = "SURPLUS")]
    Surplus,
    #[serde(rename = "EXPIRED")]
    Expired,
    #[serde(rename = "MISGRADING")]
    Misgrading,
    #[serde(rename = "UNDEFINED")]
    Undefined,
    #[serde(rename = "INCORRECT_IMEI")]
    IncorrectImei,
    #[serde(rename = "INCORRECT_SERIAL_NUMBER")]
    IncorrectSerialNumber,
    #[serde(rename = "INCORRECT_CIS")]
    IncorrectCis,
    #[serde(rename = "PART_MISSING")]
    PartMissing,
    #[serde(rename = "NON_COMPLIENT")]
    NonComplient,
    #[serde(rename = "NOT_ACCEPTABLE")]
    NotAcceptable,
    #[serde(rename = "SERVICE")]
    Service,
    #[serde(rename = "MARKDOWN")]
    Markdown,
    #[serde(rename = "DEMO")]
    Demo,
    #[serde(rename = "REPAIR")]
    Repair,
    #[serde(rename = "FIRMWARE")]
    Firmware,
    #[serde(rename = "UNKNOWN")]
    Unknown,

}

impl std::fmt::Display for ReturnInstanceStockType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fit => write!(f, "FIT"),
            Self::Defect => write!(f, "DEFECT"),
            Self::Anomaly => write!(f, "ANOMALY"),
            Self::Surplus => write!(f, "SURPLUS"),
            Self::Expired => write!(f, "EXPIRED"),
            Self::Misgrading => write!(f, "MISGRADING"),
            Self::Undefined => write!(f, "UNDEFINED"),
            Self::IncorrectImei => write!(f, "INCORRECT_IMEI"),
            Self::IncorrectSerialNumber => write!(f, "INCORRECT_SERIAL_NUMBER"),
            Self::IncorrectCis => write!(f, "INCORRECT_CIS"),
            Self::PartMissing => write!(f, "PART_MISSING"),
            Self::NonComplient => write!(f, "NON_COMPLIENT"),
            Self::NotAcceptable => write!(f, "NOT_ACCEPTABLE"),
            Self::Service => write!(f, "SERVICE"),
            Self::Markdown => write!(f, "MARKDOWN"),
            Self::Demo => write!(f, "DEMO"),
            Self::Repair => write!(f, "REPAIR"),
            Self::Firmware => write!(f, "FIRMWARE"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for ReturnInstanceStockType {
    fn default() -> ReturnInstanceStockType {
        Self::Fit
    }
}

