# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferCardDTO
Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 

    OfferCardDTO(;
        offerId=nothing,
        mapping=nothing,
        parameterValues=nothing,
        cardStatus=nothing,
        contentRating=nothing,
        recommendations=nothing,
        errors=nothing,
        warnings=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - mapping::GetMappingDTO
    - parameterValues::Vector{ParameterValueDTO} : Список характеристик с их значениями. 
    - cardStatus::OfferCardStatusType
    - contentRating::Int64 : Процент заполненности карточки.
    - recommendations::Vector{OfferCardRecommendationDTO} : Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
    - errors::Vector{OfferErrorDTO} : Ошибки в контенте, препятствующие размещению товара на витрине.
    - warnings::Vector{OfferErrorDTO} : Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
"""
Base.@kwdef mutable struct OfferCardDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    mapping = nothing # spec type: Union{ Nothing, GetMappingDTO }
    parameterValues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ParameterValueDTO} }
    cardStatus = nothing # spec type: Union{ Nothing, OfferCardStatusType }
    contentRating::Union{Nothing, Int64} = nothing
    recommendations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferCardRecommendationDTO} }
    errors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferErrorDTO} }
    warnings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferErrorDTO} }

    function OfferCardDTO(offerId, mapping, parameterValues, cardStatus, contentRating, recommendations, errors, warnings, )
        OpenAPI.validate_property(OfferCardDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(OfferCardDTO, Symbol("mapping"), mapping)
        OpenAPI.validate_property(OfferCardDTO, Symbol("parameterValues"), parameterValues)
        OpenAPI.validate_property(OfferCardDTO, Symbol("cardStatus"), cardStatus)
        OpenAPI.validate_property(OfferCardDTO, Symbol("contentRating"), contentRating)
        OpenAPI.validate_property(OfferCardDTO, Symbol("recommendations"), recommendations)
        OpenAPI.validate_property(OfferCardDTO, Symbol("errors"), errors)
        OpenAPI.validate_property(OfferCardDTO, Symbol("warnings"), warnings)
        return new(offerId, mapping, parameterValues, cardStatus, contentRating, recommendations, errors, warnings, )
    end
end # type OfferCardDTO

const _property_types_OfferCardDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("mapping")=>"GetMappingDTO", Symbol("parameterValues")=>"Vector{ParameterValueDTO}", Symbol("cardStatus")=>"OfferCardStatusType", Symbol("contentRating")=>"Int64", Symbol("recommendations")=>"Vector{OfferCardRecommendationDTO}", Symbol("errors")=>"Vector{OfferErrorDTO}", Symbol("warnings")=>"Vector{OfferErrorDTO}", )
OpenAPI.property_type(::Type{ OfferCardDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferCardDTO[name]))}

function check_required(o::OfferCardDTO)
    o.offerId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferCardDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "OfferCardDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OfferCardDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OfferCardDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("contentRating")
        OpenAPI.validate_param(name, "OfferCardDTO", :format, val, "int32")
    end
end
