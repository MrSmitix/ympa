# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferCardRecommendationDTO
Рекомендация по заполнению карточки товара.

    OfferCardRecommendationDTO(;
        type=nothing,
        percent=nothing,
    )

    - type::OfferCardRecommendationType
    - percent::Int64 : Процент выполнения рекомендации. Указывается для рекомендаций некоторых типов.
"""
Base.@kwdef mutable struct OfferCardRecommendationDTO <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, OfferCardRecommendationType }
    percent::Union{Nothing, Int64} = nothing

    function OfferCardRecommendationDTO(type, percent, )
        OpenAPI.validate_property(OfferCardRecommendationDTO, Symbol("type"), type)
        OpenAPI.validate_property(OfferCardRecommendationDTO, Symbol("percent"), percent)
        return new(type, percent, )
    end
end # type OfferCardRecommendationDTO

const _property_types_OfferCardRecommendationDTO = Dict{Symbol,String}(Symbol("type")=>"OfferCardRecommendationType", Symbol("percent")=>"Int64", )
OpenAPI.property_type(::Type{ OfferCardRecommendationDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferCardRecommendationDTO[name]))}

function check_required(o::OfferCardRecommendationDTO)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferCardRecommendationDTO }, name::Symbol, val)
    if name === Symbol("percent")
        OpenAPI.validate_param(name, "OfferCardRecommendationDTO", :format, val, "int32")
    end
    if name === Symbol("percent")
        OpenAPI.validate_param(name, "OfferCardRecommendationDTO", :maximum, val, 100, true)
        OpenAPI.validate_param(name, "OfferCardRecommendationDTO", :minimum, val, 0, false)
    end
end
