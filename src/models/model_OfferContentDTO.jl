# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferContentDTO
Товар с указанными характеристиками.

    OfferContentDTO(;
        offerId=nothing,
        categoryId=nothing,
        parameterValues=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - categoryId::Int64 : Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
    - parameterValues::Vector{ParameterValueDTO} : Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. 
"""
Base.@kwdef mutable struct OfferContentDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    categoryId::Union{Nothing, Int64} = nothing
    parameterValues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ParameterValueDTO} }

    function OfferContentDTO(offerId, categoryId, parameterValues, )
        OpenAPI.validate_property(OfferContentDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(OfferContentDTO, Symbol("categoryId"), categoryId)
        OpenAPI.validate_property(OfferContentDTO, Symbol("parameterValues"), parameterValues)
        return new(offerId, categoryId, parameterValues, )
    end
end # type OfferContentDTO

const _property_types_OfferContentDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("categoryId")=>"Int64", Symbol("parameterValues")=>"Vector{ParameterValueDTO}", )
OpenAPI.property_type(::Type{ OfferContentDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferContentDTO[name]))}

function check_required(o::OfferContentDTO)
    o.offerId === nothing && (return false)
    o.categoryId === nothing && (return false)
    o.parameterValues === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferContentDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "OfferContentDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OfferContentDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OfferContentDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("categoryId")
        OpenAPI.validate_param(name, "OfferContentDTO", :format, val, "int32")
    end
    if name === Symbol("parameterValues")
        OpenAPI.validate_param(name, "OfferContentDTO", :maxItems, val, 300)
        OpenAPI.validate_param(name, "OfferContentDTO", :minItems, val, 1)
    end
end
