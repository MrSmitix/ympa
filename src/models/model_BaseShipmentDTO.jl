# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BaseShipmentDTO
Информация об отгрузке.

    BaseShipmentDTO(;
        id=nothing,
        planIntervalFrom=nothing,
        planIntervalTo=nothing,
        shipmentType=nothing,
        warehouse=nothing,
        warehouseTo=nothing,
        externalId=nothing,
        deliveryService=nothing,
        palletsCount=nothing,
        orderIds=nothing,
        draftCount=nothing,
        plannedCount=nothing,
        factCount=nothing,
    )

    - id::Int64 : Идентификатор отгрузки.
    - planIntervalFrom::ZonedDateTime : Начало планового интервала отгрузки.
    - planIntervalTo::ZonedDateTime : Конец планового интервала отгрузки.
    - shipmentType::ShipmentType
    - warehouse::PartnerShipmentWarehouseDTO
    - warehouseTo::PartnerShipmentWarehouseDTO
    - externalId::String : Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
    - deliveryService::DeliveryServiceDTO
    - palletsCount::PalletsCountDTO
    - orderIds::Vector{Int64} : Идентификаторы заказов в отгрузке.
    - draftCount::Int64 : Количество заказов, которое Маркет запланировал к отгрузке.
    - plannedCount::Int64 : Количество заказов, которое Маркет подтвердил к отгрузке.
    - factCount::Int64 : Количество заказов, принятых в сортировочном центре или пункте приема.
"""
Base.@kwdef mutable struct BaseShipmentDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    planIntervalFrom::Union{Nothing, ZonedDateTime} = nothing
    planIntervalTo::Union{Nothing, ZonedDateTime} = nothing
    shipmentType = nothing # spec type: Union{ Nothing, ShipmentType }
    warehouse = nothing # spec type: Union{ Nothing, PartnerShipmentWarehouseDTO }
    warehouseTo = nothing # spec type: Union{ Nothing, PartnerShipmentWarehouseDTO }
    externalId::Union{Nothing, String} = nothing
    deliveryService = nothing # spec type: Union{ Nothing, DeliveryServiceDTO }
    palletsCount = nothing # spec type: Union{ Nothing, PalletsCountDTO }
    orderIds::Union{Nothing, Vector{Int64}} = nothing
    draftCount::Union{Nothing, Int64} = nothing
    plannedCount::Union{Nothing, Int64} = nothing
    factCount::Union{Nothing, Int64} = nothing

    function BaseShipmentDTO(id, planIntervalFrom, planIntervalTo, shipmentType, warehouse, warehouseTo, externalId, deliveryService, palletsCount, orderIds, draftCount, plannedCount, factCount, )
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("id"), id)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("planIntervalFrom"), planIntervalFrom)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("planIntervalTo"), planIntervalTo)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("shipmentType"), shipmentType)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("warehouse"), warehouse)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("warehouseTo"), warehouseTo)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("externalId"), externalId)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("deliveryService"), deliveryService)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("palletsCount"), palletsCount)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("orderIds"), orderIds)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("draftCount"), draftCount)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("plannedCount"), plannedCount)
        OpenAPI.validate_property(BaseShipmentDTO, Symbol("factCount"), factCount)
        return new(id, planIntervalFrom, planIntervalTo, shipmentType, warehouse, warehouseTo, externalId, deliveryService, palletsCount, orderIds, draftCount, plannedCount, factCount, )
    end
end # type BaseShipmentDTO

const _property_types_BaseShipmentDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("planIntervalFrom")=>"ZonedDateTime", Symbol("planIntervalTo")=>"ZonedDateTime", Symbol("shipmentType")=>"ShipmentType", Symbol("warehouse")=>"PartnerShipmentWarehouseDTO", Symbol("warehouseTo")=>"PartnerShipmentWarehouseDTO", Symbol("externalId")=>"String", Symbol("deliveryService")=>"DeliveryServiceDTO", Symbol("palletsCount")=>"PalletsCountDTO", Symbol("orderIds")=>"Vector{Int64}", Symbol("draftCount")=>"Int64", Symbol("plannedCount")=>"Int64", Symbol("factCount")=>"Int64", )
OpenAPI.property_type(::Type{ BaseShipmentDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BaseShipmentDTO[name]))}

function check_required(o::BaseShipmentDTO)
    o.orderIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BaseShipmentDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "int64")
    end
    if name === Symbol("planIntervalFrom")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "date-time")
    end
    if name === Symbol("planIntervalTo")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "date-time")
    end
    if name === Symbol("orderIds")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :uniqueItems, val, true)
    end
    if name === Symbol("draftCount")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "int32")
    end
    if name === Symbol("plannedCount")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "int32")
    end
    if name === Symbol("factCount")
        OpenAPI.validate_param(name, "BaseShipmentDTO", :format, val, "int32")
    end
end
