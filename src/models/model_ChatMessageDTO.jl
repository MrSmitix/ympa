# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatMessageDTO
Информация о сообщениях.

    ChatMessageDTO(;
        messageId=nothing,
        createdAt=nothing,
        sender=nothing,
        message=nothing,
        payload=nothing,
    )

    - messageId::Int64 : Идентификатор сообщения.
    - createdAt::ZonedDateTime : Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    - sender::ChatMessageSenderType
    - message::String : Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
    - payload::Vector{ChatMessagePayloadDTO} : Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
"""
Base.@kwdef mutable struct ChatMessageDTO <: OpenAPI.APIModel
    messageId::Union{Nothing, Int64} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    sender = nothing # spec type: Union{ Nothing, ChatMessageSenderType }
    message::Union{Nothing, String} = nothing
    payload::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatMessagePayloadDTO} }

    function ChatMessageDTO(messageId, createdAt, sender, message, payload, )
        OpenAPI.validate_property(ChatMessageDTO, Symbol("messageId"), messageId)
        OpenAPI.validate_property(ChatMessageDTO, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(ChatMessageDTO, Symbol("sender"), sender)
        OpenAPI.validate_property(ChatMessageDTO, Symbol("message"), message)
        OpenAPI.validate_property(ChatMessageDTO, Symbol("payload"), payload)
        return new(messageId, createdAt, sender, message, payload, )
    end
end # type ChatMessageDTO

const _property_types_ChatMessageDTO = Dict{Symbol,String}(Symbol("messageId")=>"Int64", Symbol("createdAt")=>"ZonedDateTime", Symbol("sender")=>"ChatMessageSenderType", Symbol("message")=>"String", Symbol("payload")=>"Vector{ChatMessagePayloadDTO}", )
OpenAPI.property_type(::Type{ ChatMessageDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatMessageDTO[name]))}

function check_required(o::ChatMessageDTO)
    o.messageId === nothing && (return false)
    o.createdAt === nothing && (return false)
    o.sender === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatMessageDTO }, name::Symbol, val)
    if name === Symbol("messageId")
        OpenAPI.validate_param(name, "ChatMessageDTO", :format, val, "int64")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "ChatMessageDTO", :format, val, "date-time")
    end
end
