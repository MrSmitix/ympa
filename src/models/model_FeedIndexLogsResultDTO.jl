# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedIndexLogsResultDTO
Результат выполнения запроса отчета по индексации прайс-листа.

    FeedIndexLogsResultDTO(;
        feed=nothing,
        indexLogRecords=nothing,
        total=nothing,
    )

    - feed::FeedIndexLogsFeedDTO
    - indexLogRecords::Vector{FeedIndexLogsRecordDTO} : Список отчетов по индексации прайс-листа.
    - total::Int64 : Количество отчетов на всех страницах выходных данных.
"""
Base.@kwdef mutable struct FeedIndexLogsResultDTO <: OpenAPI.APIModel
    feed = nothing # spec type: Union{ Nothing, FeedIndexLogsFeedDTO }
    indexLogRecords::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FeedIndexLogsRecordDTO} }
    total::Union{Nothing, Int64} = nothing

    function FeedIndexLogsResultDTO(feed, indexLogRecords, total, )
        OpenAPI.validate_property(FeedIndexLogsResultDTO, Symbol("feed"), feed)
        OpenAPI.validate_property(FeedIndexLogsResultDTO, Symbol("indexLogRecords"), indexLogRecords)
        OpenAPI.validate_property(FeedIndexLogsResultDTO, Symbol("total"), total)
        return new(feed, indexLogRecords, total, )
    end
end # type FeedIndexLogsResultDTO

const _property_types_FeedIndexLogsResultDTO = Dict{Symbol,String}(Symbol("feed")=>"FeedIndexLogsFeedDTO", Symbol("indexLogRecords")=>"Vector{FeedIndexLogsRecordDTO}", Symbol("total")=>"Int64", )
OpenAPI.property_type(::Type{ FeedIndexLogsResultDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedIndexLogsResultDTO[name]))}

function check_required(o::FeedIndexLogsResultDTO)
    o.indexLogRecords === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FeedIndexLogsResultDTO }, name::Symbol, val)
    if name === Symbol("total")
        OpenAPI.validate_param(name, "FeedIndexLogsResultDTO", :format, val, "int64")
    end
end
