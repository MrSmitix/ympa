# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CategoryParameterUnitDTO
Единицы измерения характеристики товара.

    CategoryParameterUnitDTO(;
        defaultUnitId=nothing,
        units=nothing,
    )

    - defaultUnitId::Int64 : Единица измерения по умолчанию.
    - units::Vector{UnitDTO} : Допустимые единицы измерения.
"""
Base.@kwdef mutable struct CategoryParameterUnitDTO <: OpenAPI.APIModel
    defaultUnitId::Union{Nothing, Int64} = nothing
    units::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UnitDTO} }

    function CategoryParameterUnitDTO(defaultUnitId, units, )
        OpenAPI.validate_property(CategoryParameterUnitDTO, Symbol("defaultUnitId"), defaultUnitId)
        OpenAPI.validate_property(CategoryParameterUnitDTO, Symbol("units"), units)
        return new(defaultUnitId, units, )
    end
end # type CategoryParameterUnitDTO

const _property_types_CategoryParameterUnitDTO = Dict{Symbol,String}(Symbol("defaultUnitId")=>"Int64", Symbol("units")=>"Vector{UnitDTO}", )
OpenAPI.property_type(::Type{ CategoryParameterUnitDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CategoryParameterUnitDTO[name]))}

function check_required(o::CategoryParameterUnitDTO)
    o.defaultUnitId === nothing && (return false)
    o.units === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CategoryParameterUnitDTO }, name::Symbol, val)
    if name === Symbol("defaultUnitId")
        OpenAPI.validate_param(name, "CategoryParameterUnitDTO", :format, val, "int64")
    end
end
