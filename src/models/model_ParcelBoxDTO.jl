# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ParcelBoxDTO
Элемент отображает одно грузовое место. Вложенные поля больше не используются, передавайте элемент пустым в запросах и не обращайте внимание на содержимое в ответах.

    ParcelBoxDTO(;
        id=nothing,
        fulfilmentId=nothing,
    )

    - id::Int64 : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
    - fulfilmentId::String : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
"""
Base.@kwdef mutable struct ParcelBoxDTO <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    fulfilmentId::Union{Nothing, String} = nothing

    function ParcelBoxDTO(id, fulfilmentId, )
        OpenAPI.validate_property(ParcelBoxDTO, Symbol("id"), id)
        OpenAPI.validate_property(ParcelBoxDTO, Symbol("fulfilmentId"), fulfilmentId)
        return new(id, fulfilmentId, )
    end
end # type ParcelBoxDTO

const _property_types_ParcelBoxDTO = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("fulfilmentId")=>"String", )
OpenAPI.property_type(::Type{ ParcelBoxDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ParcelBoxDTO[name]))}

function check_required(o::ParcelBoxDTO)
    true
end

function OpenAPI.validate_property(::Type{ ParcelBoxDTO }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "ParcelBoxDTO", :format, val, "int64")
    end
    if name === Symbol("fulfilmentId")
        OpenAPI.validate_param(name, "ParcelBoxDTO", :pattern, val, r"^[\p{Alnum}- ]*$")
    end
end
