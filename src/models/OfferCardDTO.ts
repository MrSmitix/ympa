// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GetMappingDTO,
    GetMappingDTOFromJSON,
    GetMappingDTOToJSON,
    OfferCardRecommendationDTO,
    OfferCardRecommendationDTOFromJSON,
    OfferCardRecommendationDTOToJSON,
    OfferCardStatusType,
    OfferCardStatusTypeFromJSON,
    OfferCardStatusTypeToJSON,
    OfferErrorDTO,
    OfferErrorDTOFromJSON,
    OfferErrorDTOToJSON,
    ParameterValueDTO,
    ParameterValueDTOFromJSON,
    ParameterValueDTOToJSON,
} from './';

/**
 * Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 * @export
 * @interface OfferCardDTO
 */
export interface OfferCardDTO  {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @type {string}
     * @memberof OfferCardDTO
     */
    offerId: string;
    /**
     * 
     * @type {GetMappingDTO}
     * @memberof OfferCardDTO
     */
    mapping?: GetMappingDTO;
    /**
     * Список характеристик с их значениями. 
     * @type {Array<ParameterValueDTO>}
     * @memberof OfferCardDTO
     */
    parameterValues?: Array<ParameterValueDTO>;
    /**
     * 
     * @type {OfferCardStatusType}
     * @memberof OfferCardDTO
     */
    cardStatus?: OfferCardStatusType;
    /**
     * Процент заполненности карточки.
     * @type {number}
     * @memberof OfferCardDTO
     */
    contentRating?: number;
    /**
     * Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
     * @type {Array<OfferCardRecommendationDTO>}
     * @memberof OfferCardDTO
     */
    recommendations?: Array<OfferCardRecommendationDTO>;
    /**
     * Ошибки в контенте, препятствующие размещению товара на витрине.
     * @type {Array<OfferErrorDTO>}
     * @memberof OfferCardDTO
     */
    errors?: Array<OfferErrorDTO>;
    /**
     * Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
     * @type {Array<OfferErrorDTO>}
     * @memberof OfferCardDTO
     */
    warnings?: Array<OfferErrorDTO>;
}

export function OfferCardDTOFromJSON(json: any): OfferCardDTO {
    return {
        'offerId': json['offerId'],
        'mapping': !exists(json, 'mapping') ? undefined : GetMappingDTOFromJSON(json['mapping']),
        'parameterValues': !exists(json, 'parameterValues') ? undefined : (json['parameterValues'] as Array<any>).map(ParameterValueDTOFromJSON),
        'cardStatus': !exists(json, 'cardStatus') ? undefined : OfferCardStatusTypeFromJSON(json['cardStatus']),
        'contentRating': !exists(json, 'contentRating') ? undefined : json['contentRating'],
        'recommendations': !exists(json, 'recommendations') ? undefined : (json['recommendations'] as Array<any>).map(OfferCardRecommendationDTOFromJSON),
        'errors': !exists(json, 'errors') ? undefined : (json['errors'] as Array<any>).map(OfferErrorDTOFromJSON),
        'warnings': !exists(json, 'warnings') ? undefined : (json['warnings'] as Array<any>).map(OfferErrorDTOFromJSON),
    };
}

export function OfferCardDTOToJSON(value?: OfferCardDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'offerId': value.offerId,
        'mapping': GetMappingDTOToJSON(value.mapping),
        'parameterValues': value.parameterValues === undefined ? undefined : (value.parameterValues as Array<any>).map(ParameterValueDTOToJSON),
        'cardStatus': OfferCardStatusTypeToJSON(value.cardStatus),
        'contentRating': value.contentRating,
        'recommendations': value.recommendations === undefined ? undefined : (value.recommendations as Array<any>).map(OfferCardRecommendationDTOToJSON),
        'errors': value.errors === undefined ? undefined : (value.errors as Array<any>).map(OfferErrorDTOToJSON),
        'warnings': value.warnings === undefined ? undefined : (value.warnings as Array<any>).map(OfferErrorDTOToJSON),
    };
}



