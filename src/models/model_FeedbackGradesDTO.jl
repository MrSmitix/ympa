# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedbackGradesDTO
Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.

    FeedbackGradesDTO(;
        average=nothing,
        agreeCount=nothing,
        rejectCount=nothing,
        factors=nothing,
    )

    - average::Float64 : Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
    - agreeCount::Int64 : Количество пользователей, считающих отзыв полезным.
    - rejectCount::Int64 : Количество пользователей, считающих отзыв бесполезным.
    - factors::Vector{FeedbackFactorDTO} : Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
"""
Base.@kwdef mutable struct FeedbackGradesDTO <: OpenAPI.APIModel
    average::Union{Nothing, Float64} = nothing
    agreeCount::Union{Nothing, Int64} = nothing
    rejectCount::Union{Nothing, Int64} = nothing
    factors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FeedbackFactorDTO} }

    function FeedbackGradesDTO(average, agreeCount, rejectCount, factors, )
        OpenAPI.validate_property(FeedbackGradesDTO, Symbol("average"), average)
        OpenAPI.validate_property(FeedbackGradesDTO, Symbol("agreeCount"), agreeCount)
        OpenAPI.validate_property(FeedbackGradesDTO, Symbol("rejectCount"), rejectCount)
        OpenAPI.validate_property(FeedbackGradesDTO, Symbol("factors"), factors)
        return new(average, agreeCount, rejectCount, factors, )
    end
end # type FeedbackGradesDTO

const _property_types_FeedbackGradesDTO = Dict{Symbol,String}(Symbol("average")=>"Float64", Symbol("agreeCount")=>"Int64", Symbol("rejectCount")=>"Int64", Symbol("factors")=>"Vector{FeedbackFactorDTO}", )
OpenAPI.property_type(::Type{ FeedbackGradesDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedbackGradesDTO[name]))}

function check_required(o::FeedbackGradesDTO)
    o.factors === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FeedbackGradesDTO }, name::Symbol, val)
    if name === Symbol("agreeCount")
        OpenAPI.validate_param(name, "FeedbackGradesDTO", :format, val, "int64")
    end
    if name === Symbol("rejectCount")
        OpenAPI.validate_param(name, "FeedbackGradesDTO", :format, val, "int64")
    end
end
