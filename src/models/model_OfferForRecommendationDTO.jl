# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferForRecommendationDTO
Информация о состоянии цены на товар.

    OfferForRecommendationDTO(;
        offerId=nothing,
        price=nothing,
        cofinancePrice=nothing,
        competitiveness=nothing,
        shows=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - price::BasePriceDTO
    - cofinancePrice::GetPriceDTO
    - competitiveness::PriceCompetitivenessType
    - shows::Int64 : Количество показов карточки товара за последние 7 дней.
"""
Base.@kwdef mutable struct OfferForRecommendationDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    price = nothing # spec type: Union{ Nothing, BasePriceDTO }
    cofinancePrice = nothing # spec type: Union{ Nothing, GetPriceDTO }
    competitiveness = nothing # spec type: Union{ Nothing, PriceCompetitivenessType }
    shows::Union{Nothing, Int64} = nothing

    function OfferForRecommendationDTO(offerId, price, cofinancePrice, competitiveness, shows, )
        OpenAPI.validate_property(OfferForRecommendationDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(OfferForRecommendationDTO, Symbol("price"), price)
        OpenAPI.validate_property(OfferForRecommendationDTO, Symbol("cofinancePrice"), cofinancePrice)
        OpenAPI.validate_property(OfferForRecommendationDTO, Symbol("competitiveness"), competitiveness)
        OpenAPI.validate_property(OfferForRecommendationDTO, Symbol("shows"), shows)
        return new(offerId, price, cofinancePrice, competitiveness, shows, )
    end
end # type OfferForRecommendationDTO

const _property_types_OfferForRecommendationDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("price")=>"BasePriceDTO", Symbol("cofinancePrice")=>"GetPriceDTO", Symbol("competitiveness")=>"PriceCompetitivenessType", Symbol("shows")=>"Int64", )
OpenAPI.property_type(::Type{ OfferForRecommendationDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferForRecommendationDTO[name]))}

function check_required(o::OfferForRecommendationDTO)
    true
end

function OpenAPI.validate_property(::Type{ OfferForRecommendationDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "OfferForRecommendationDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "OfferForRecommendationDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "OfferForRecommendationDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("shows")
        OpenAPI.validate_param(name, "OfferForRecommendationDTO", :format, val, "int64")
    end
end
