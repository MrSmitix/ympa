# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SkuBidRecommendationItemDTO
Список товаров с рекомендованными ставками.

    SkuBidRecommendationItemDTO(;
        sku=nothing,
        bid=nothing,
        bidRecommendations=nothing,
        priceRecommendations=nothing,
    )

    - sku::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - bid::Int64 : Значение ставки.
    - bidRecommendations::Vector{BidRecommendationItemDTO} : Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
    - priceRecommendations::Vector{PriceRecommendationItemDTO} : Рекомендованные цены.
"""
Base.@kwdef mutable struct SkuBidRecommendationItemDTO <: OpenAPI.APIModel
    sku::Union{Nothing, String} = nothing
    bid::Union{Nothing, Int64} = nothing
    bidRecommendations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{BidRecommendationItemDTO} }
    priceRecommendations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PriceRecommendationItemDTO} }

    function SkuBidRecommendationItemDTO(sku, bid, bidRecommendations, priceRecommendations, )
        OpenAPI.validate_property(SkuBidRecommendationItemDTO, Symbol("sku"), sku)
        OpenAPI.validate_property(SkuBidRecommendationItemDTO, Symbol("bid"), bid)
        OpenAPI.validate_property(SkuBidRecommendationItemDTO, Symbol("bidRecommendations"), bidRecommendations)
        OpenAPI.validate_property(SkuBidRecommendationItemDTO, Symbol("priceRecommendations"), priceRecommendations)
        return new(sku, bid, bidRecommendations, priceRecommendations, )
    end
end # type SkuBidRecommendationItemDTO

const _property_types_SkuBidRecommendationItemDTO = Dict{Symbol,String}(Symbol("sku")=>"String", Symbol("bid")=>"Int64", Symbol("bidRecommendations")=>"Vector{BidRecommendationItemDTO}", Symbol("priceRecommendations")=>"Vector{PriceRecommendationItemDTO}", )
OpenAPI.property_type(::Type{ SkuBidRecommendationItemDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SkuBidRecommendationItemDTO[name]))}

function check_required(o::SkuBidRecommendationItemDTO)
    o.sku === nothing && (return false)
    o.bid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SkuBidRecommendationItemDTO }, name::Symbol, val)
    if name === Symbol("sku")
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
    if name === Symbol("bid")
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :format, val, "int32")
    end
    if name === Symbol("bid")
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :maximum, val, 9999, false)
        OpenAPI.validate_param(name, "SkuBidRecommendationItemDTO", :minimum, val, 0, false)
    end
end
