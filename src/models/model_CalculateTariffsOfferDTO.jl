# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CalculateTariffsOfferDTO
Параметры товара, для которого нужно рассчитать стоимость услуг.

    CalculateTariffsOfferDTO(;
        categoryId=nothing,
        price=nothing,
        length=nothing,
        width=nothing,
        height=nothing,
        weight=nothing,
        quantity=1,
    )

    - categoryId::Int64 : Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    - price::Float64 : Цена на товар в рублях.
    - length::Float64 : Длина товара в сантиметрах.
    - width::Float64 : Ширина товара в сантиметрах.
    - height::Float64 : Высота товара в сантиметрах.
    - weight::Float64 : Вес товара в килограммах.
    - quantity::Int64 : Квант продажи — количество единиц товара в одном товарном предложении.
"""
Base.@kwdef mutable struct CalculateTariffsOfferDTO <: OpenAPI.APIModel
    categoryId::Union{Nothing, Int64} = nothing
    price::Union{Nothing, Float64} = nothing
    length::Union{Nothing, Float64} = nothing
    width::Union{Nothing, Float64} = nothing
    height::Union{Nothing, Float64} = nothing
    weight::Union{Nothing, Float64} = nothing
    quantity::Union{Nothing, Int64} = 1

    function CalculateTariffsOfferDTO(categoryId, price, length, width, height, weight, quantity, )
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("categoryId"), categoryId)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("price"), price)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("length"), length)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("width"), width)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("height"), height)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("weight"), weight)
        OpenAPI.validate_property(CalculateTariffsOfferDTO, Symbol("quantity"), quantity)
        return new(categoryId, price, length, width, height, weight, quantity, )
    end
end # type CalculateTariffsOfferDTO

const _property_types_CalculateTariffsOfferDTO = Dict{Symbol,String}(Symbol("categoryId")=>"Int64", Symbol("price")=>"Float64", Symbol("length")=>"Float64", Symbol("width")=>"Float64", Symbol("height")=>"Float64", Symbol("weight")=>"Float64", Symbol("quantity")=>"Int64", )
OpenAPI.property_type(::Type{ CalculateTariffsOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CalculateTariffsOfferDTO[name]))}

function check_required(o::CalculateTariffsOfferDTO)
    o.categoryId === nothing && (return false)
    o.price === nothing && (return false)
    o.length === nothing && (return false)
    o.width === nothing && (return false)
    o.height === nothing && (return false)
    o.weight === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CalculateTariffsOfferDTO }, name::Symbol, val)
    if name === Symbol("categoryId")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :format, val, "int64")
    end
    if name === Symbol("categoryId")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("price")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("length")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("width")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("height")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("weight")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 0, true)
    end
    if name === Symbol("quantity")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :format, val, "int32")
    end
    if name === Symbol("quantity")
        OpenAPI.validate_param(name, "CalculateTariffsOfferDTO", :minimum, val, 1, false)
    end
end
