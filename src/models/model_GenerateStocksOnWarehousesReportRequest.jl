# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GenerateStocksOnWarehousesReportRequest
Данные, необходимые для генерации отчета. 

    GenerateStocksOnWarehousesReportRequest(;
        campaignId=nothing,
        warehouseIds=nothing,
        reportDate=nothing,
        categoryIds=nothing,
        hasStocks=nothing,
    )

    - campaignId::Int64 : Идентификатор магазина.
    - warehouseIds::Vector{Int64} : Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
    - reportDate::Date : Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
    - categoryIds::Vector{Int64} : Фильтр по категориям на Маркете (кроме модели FBY).
    - hasStocks::Bool : Фильтр по наличию остатков (кроме модели FBY).
"""
Base.@kwdef mutable struct GenerateStocksOnWarehousesReportRequest <: OpenAPI.APIModel
    campaignId::Union{Nothing, Int64} = nothing
    warehouseIds::Union{Nothing, Vector{Int64}} = nothing
    reportDate::Union{Nothing, Date} = nothing
    categoryIds::Union{Nothing, Vector{Int64}} = nothing
    hasStocks::Union{Nothing, Bool} = nothing

    function GenerateStocksOnWarehousesReportRequest(campaignId, warehouseIds, reportDate, categoryIds, hasStocks, )
        OpenAPI.validate_property(GenerateStocksOnWarehousesReportRequest, Symbol("campaignId"), campaignId)
        OpenAPI.validate_property(GenerateStocksOnWarehousesReportRequest, Symbol("warehouseIds"), warehouseIds)
        OpenAPI.validate_property(GenerateStocksOnWarehousesReportRequest, Symbol("reportDate"), reportDate)
        OpenAPI.validate_property(GenerateStocksOnWarehousesReportRequest, Symbol("categoryIds"), categoryIds)
        OpenAPI.validate_property(GenerateStocksOnWarehousesReportRequest, Symbol("hasStocks"), hasStocks)
        return new(campaignId, warehouseIds, reportDate, categoryIds, hasStocks, )
    end
end # type GenerateStocksOnWarehousesReportRequest

const _property_types_GenerateStocksOnWarehousesReportRequest = Dict{Symbol,String}(Symbol("campaignId")=>"Int64", Symbol("warehouseIds")=>"Vector{Int64}", Symbol("reportDate")=>"Date", Symbol("categoryIds")=>"Vector{Int64}", Symbol("hasStocks")=>"Bool", )
OpenAPI.property_type(::Type{ GenerateStocksOnWarehousesReportRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GenerateStocksOnWarehousesReportRequest[name]))}

function check_required(o::GenerateStocksOnWarehousesReportRequest)
    o.campaignId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GenerateStocksOnWarehousesReportRequest }, name::Symbol, val)
    if name === Symbol("campaignId")
        OpenAPI.validate_param(name, "GenerateStocksOnWarehousesReportRequest", :format, val, "int64")
    end
    if name === Symbol("reportDate")
        OpenAPI.validate_param(name, "GenerateStocksOnWarehousesReportRequest", :format, val, "date")
    end
end
