# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RejectedPromoOfferDeleteDTO
Информация о товаре и ошибки, которые появились при его удалении.

    RejectedPromoOfferDeleteDTO(;
        offerId=nothing,
        reason=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - reason::RejectedPromoOfferDeleteReasonType
"""
Base.@kwdef mutable struct RejectedPromoOfferDeleteDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    reason = nothing # spec type: Union{ Nothing, RejectedPromoOfferDeleteReasonType }

    function RejectedPromoOfferDeleteDTO(offerId, reason, )
        OpenAPI.validate_property(RejectedPromoOfferDeleteDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(RejectedPromoOfferDeleteDTO, Symbol("reason"), reason)
        return new(offerId, reason, )
    end
end # type RejectedPromoOfferDeleteDTO

const _property_types_RejectedPromoOfferDeleteDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("reason")=>"RejectedPromoOfferDeleteReasonType", )
OpenAPI.property_type(::Type{ RejectedPromoOfferDeleteDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RejectedPromoOfferDeleteDTO[name]))}

function check_required(o::RejectedPromoOfferDeleteDTO)
    o.offerId === nothing && (return false)
    o.reason === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RejectedPromoOfferDeleteDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "RejectedPromoOfferDeleteDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "RejectedPromoOfferDeleteDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "RejectedPromoOfferDeleteDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
end
