# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ReturnDecisionDTO
Решения по возвратам.

    ReturnDecisionDTO(;
        returnItemId=nothing,
        count=nothing,
        comment=nothing,
        reasonType=nothing,
        subreasonType=nothing,
        decisionType=nothing,
        refundAmount=nothing,
        partnerCompensation=nothing,
        images=nothing,
    )

    - returnItemId::Int64 : Идентификатор товара в возврате.
    - count::Int64 : Количество единиц товара.
    - comment::String : Комментарий.
    - reasonType::ReturnDecisionReasonType
    - subreasonType::ReturnDecisionSubreasonType
    - decisionType::ReturnDecisionType
    - refundAmount::Int64 : Сумма возврата.
    - partnerCompensation::Int64 : Компенсация за обратную доставку.
    - images::Vector{String} : Список хеш-кодов фотографий товара от покупателя.
"""
Base.@kwdef mutable struct ReturnDecisionDTO <: OpenAPI.APIModel
    returnItemId::Union{Nothing, Int64} = nothing
    count::Union{Nothing, Int64} = nothing
    comment::Union{Nothing, String} = nothing
    reasonType = nothing # spec type: Union{ Nothing, ReturnDecisionReasonType }
    subreasonType = nothing # spec type: Union{ Nothing, ReturnDecisionSubreasonType }
    decisionType = nothing # spec type: Union{ Nothing, ReturnDecisionType }
    refundAmount::Union{Nothing, Int64} = nothing
    partnerCompensation::Union{Nothing, Int64} = nothing
    images::Union{Nothing, Vector{String}} = nothing

    function ReturnDecisionDTO(returnItemId, count, comment, reasonType, subreasonType, decisionType, refundAmount, partnerCompensation, images, )
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("returnItemId"), returnItemId)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("count"), count)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("comment"), comment)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("reasonType"), reasonType)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("subreasonType"), subreasonType)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("decisionType"), decisionType)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("refundAmount"), refundAmount)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("partnerCompensation"), partnerCompensation)
        OpenAPI.validate_property(ReturnDecisionDTO, Symbol("images"), images)
        return new(returnItemId, count, comment, reasonType, subreasonType, decisionType, refundAmount, partnerCompensation, images, )
    end
end # type ReturnDecisionDTO

const _property_types_ReturnDecisionDTO = Dict{Symbol,String}(Symbol("returnItemId")=>"Int64", Symbol("count")=>"Int64", Symbol("comment")=>"String", Symbol("reasonType")=>"ReturnDecisionReasonType", Symbol("subreasonType")=>"ReturnDecisionSubreasonType", Symbol("decisionType")=>"ReturnDecisionType", Symbol("refundAmount")=>"Int64", Symbol("partnerCompensation")=>"Int64", Symbol("images")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ReturnDecisionDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ReturnDecisionDTO[name]))}

function check_required(o::ReturnDecisionDTO)
    true
end

function OpenAPI.validate_property(::Type{ ReturnDecisionDTO }, name::Symbol, val)
    if name === Symbol("returnItemId")
        OpenAPI.validate_param(name, "ReturnDecisionDTO", :format, val, "int64")
    end
    if name === Symbol("count")
        OpenAPI.validate_param(name, "ReturnDecisionDTO", :format, val, "int32")
    end
    if name === Symbol("refundAmount")
        OpenAPI.validate_param(name, "ReturnDecisionDTO", :format, val, "int64")
    end
    if name === Symbol("partnerCompensation")
        OpenAPI.validate_param(name, "ReturnDecisionDTO", :format, val, "int64")
    end
end
