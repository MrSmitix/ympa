# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeedIndexLogsRecordDTO
Список отчетов по индексации прайс-листа.

    FeedIndexLogsRecordDTO(;
        downloadTime=nothing,
        fileTime=nothing,
        generationId=nothing,
        indexType=nothing,
        publishedTime=nothing,
        status=nothing,
        error=nothing,
        offers=nothing,
    )

    - downloadTime::ZonedDateTime : Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    - fileTime::ZonedDateTime : Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    - generationId::Int64 : Идентификатор индексации.
    - indexType::FeedIndexLogsIndexType
    - publishedTime::ZonedDateTime : Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    - status::FeedIndexLogsStatusType
    - error::FeedIndexLogsErrorDTO
    - offers::FeedIndexLogsOffersDTO
"""
Base.@kwdef mutable struct FeedIndexLogsRecordDTO <: OpenAPI.APIModel
    downloadTime::Union{Nothing, ZonedDateTime} = nothing
    fileTime::Union{Nothing, ZonedDateTime} = nothing
    generationId::Union{Nothing, Int64} = nothing
    indexType = nothing # spec type: Union{ Nothing, FeedIndexLogsIndexType }
    publishedTime::Union{Nothing, ZonedDateTime} = nothing
    status = nothing # spec type: Union{ Nothing, FeedIndexLogsStatusType }
    error = nothing # spec type: Union{ Nothing, FeedIndexLogsErrorDTO }
    offers = nothing # spec type: Union{ Nothing, FeedIndexLogsOffersDTO }

    function FeedIndexLogsRecordDTO(downloadTime, fileTime, generationId, indexType, publishedTime, status, error, offers, )
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("downloadTime"), downloadTime)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("fileTime"), fileTime)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("generationId"), generationId)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("indexType"), indexType)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("publishedTime"), publishedTime)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("status"), status)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("error"), error)
        OpenAPI.validate_property(FeedIndexLogsRecordDTO, Symbol("offers"), offers)
        return new(downloadTime, fileTime, generationId, indexType, publishedTime, status, error, offers, )
    end
end # type FeedIndexLogsRecordDTO

const _property_types_FeedIndexLogsRecordDTO = Dict{Symbol,String}(Symbol("downloadTime")=>"ZonedDateTime", Symbol("fileTime")=>"ZonedDateTime", Symbol("generationId")=>"Int64", Symbol("indexType")=>"FeedIndexLogsIndexType", Symbol("publishedTime")=>"ZonedDateTime", Symbol("status")=>"FeedIndexLogsStatusType", Symbol("error")=>"FeedIndexLogsErrorDTO", Symbol("offers")=>"FeedIndexLogsOffersDTO", )
OpenAPI.property_type(::Type{ FeedIndexLogsRecordDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeedIndexLogsRecordDTO[name]))}

function check_required(o::FeedIndexLogsRecordDTO)
    true
end

function OpenAPI.validate_property(::Type{ FeedIndexLogsRecordDTO }, name::Symbol, val)
    if name === Symbol("downloadTime")
        OpenAPI.validate_param(name, "FeedIndexLogsRecordDTO", :format, val, "date-time")
    end
    if name === Symbol("fileTime")
        OpenAPI.validate_param(name, "FeedIndexLogsRecordDTO", :format, val, "date-time")
    end
    if name === Symbol("generationId")
        OpenAPI.validate_param(name, "FeedIndexLogsRecordDTO", :format, val, "int64")
    end
    if name === Symbol("publishedTime")
        OpenAPI.validate_param(name, "FeedIndexLogsRecordDTO", :format, val, "date-time")
    end
end
