# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetCampaignOfferDTO
Параметры размещения товара в магазине.

    GetCampaignOfferDTO(;
        offerId=nothing,
        quantum=nothing,
        available=nothing,
        basicPrice=nothing,
        campaignPrice=nothing,
        status=nothing,
        errors=nothing,
        warnings=nothing,
    )

    - offerId::String : Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    - quantum::QuantumDTO
    - available::Bool : Есть ли товар в продаже. 
    - basicPrice::GetPriceWithDiscountDTO
    - campaignPrice::GetPriceWithVatDTO
    - status::OfferCampaignStatusType
    - errors::Vector{OfferErrorDTO} : Ошибки, препятствующие размещению товара на витрине. 
    - warnings::Vector{OfferErrorDTO} : Предупреждения, не препятствующие размещению товара на витрине. 
"""
Base.@kwdef mutable struct GetCampaignOfferDTO <: OpenAPI.APIModel
    offerId::Union{Nothing, String} = nothing
    quantum = nothing # spec type: Union{ Nothing, QuantumDTO }
    available::Union{Nothing, Bool} = nothing
    basicPrice = nothing # spec type: Union{ Nothing, GetPriceWithDiscountDTO }
    campaignPrice = nothing # spec type: Union{ Nothing, GetPriceWithVatDTO }
    status = nothing # spec type: Union{ Nothing, OfferCampaignStatusType }
    errors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferErrorDTO} }
    warnings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferErrorDTO} }

    function GetCampaignOfferDTO(offerId, quantum, available, basicPrice, campaignPrice, status, errors, warnings, )
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("offerId"), offerId)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("quantum"), quantum)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("available"), available)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("basicPrice"), basicPrice)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("campaignPrice"), campaignPrice)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("status"), status)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("errors"), errors)
        OpenAPI.validate_property(GetCampaignOfferDTO, Symbol("warnings"), warnings)
        return new(offerId, quantum, available, basicPrice, campaignPrice, status, errors, warnings, )
    end
end # type GetCampaignOfferDTO

const _property_types_GetCampaignOfferDTO = Dict{Symbol,String}(Symbol("offerId")=>"String", Symbol("quantum")=>"QuantumDTO", Symbol("available")=>"Bool", Symbol("basicPrice")=>"GetPriceWithDiscountDTO", Symbol("campaignPrice")=>"GetPriceWithVatDTO", Symbol("status")=>"OfferCampaignStatusType", Symbol("errors")=>"Vector{OfferErrorDTO}", Symbol("warnings")=>"Vector{OfferErrorDTO}", )
OpenAPI.property_type(::Type{ GetCampaignOfferDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetCampaignOfferDTO[name]))}

function check_required(o::GetCampaignOfferDTO)
    o.offerId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GetCampaignOfferDTO }, name::Symbol, val)
    if name === Symbol("offerId")
        OpenAPI.validate_param(name, "GetCampaignOfferDTO", :maxLength, val, 255)
        OpenAPI.validate_param(name, "GetCampaignOfferDTO", :minLength, val, 1)
        OpenAPI.validate_param(name, "GetCampaignOfferDTO", :pattern, val, r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")
    end
end
