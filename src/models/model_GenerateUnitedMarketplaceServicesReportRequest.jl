# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GenerateUnitedMarketplaceServicesReportRequest
Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 

    GenerateUnitedMarketplaceServicesReportRequest(;
        businessId=nothing,
        dateTimeFrom=nothing,
        dateTimeTo=nothing,
        dateFrom=nothing,
        dateTo=nothing,
        yearFrom=nothing,
        monthFrom=nothing,
        yearTo=nothing,
        monthTo=nothing,
        placementPrograms=nothing,
        inns=nothing,
        campaignIds=nothing,
    )

    - businessId::Int64 : Идентификатор бизнеса.
    - dateTimeFrom::ZonedDateTime : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
    - dateTimeTo::ZonedDateTime : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
    - dateFrom::Date : Начало периода, включительно.
    - dateTo::Date : Конец периода, включительно. Максимальный период — 1 год.
    - yearFrom::Int64 : Начальный год формирования акта.
    - monthFrom::Int64 : Начальный номер месяца формирования акта.
    - yearTo::Int64 : Конечный год формирования акта.
    - monthTo::Int64 : Конечный номер месяца формирования акта.
    - placementPrograms::Vector{PlacementType} : Список моделей, которые нужны в отчете. 
    - inns::Vector{String} : Список ИНН, которые нужны в отчете.
    - campaignIds::Vector{Int64} : Список магазинов, которые нужны в отчете.
"""
Base.@kwdef mutable struct GenerateUnitedMarketplaceServicesReportRequest <: OpenAPI.APIModel
    businessId::Union{Nothing, Int64} = nothing
    dateTimeFrom::Union{Nothing, ZonedDateTime} = nothing
    dateTimeTo::Union{Nothing, ZonedDateTime} = nothing
    dateFrom::Union{Nothing, Date} = nothing
    dateTo::Union{Nothing, Date} = nothing
    yearFrom::Union{Nothing, Int64} = nothing
    monthFrom::Union{Nothing, Int64} = nothing
    yearTo::Union{Nothing, Int64} = nothing
    monthTo::Union{Nothing, Int64} = nothing
    placementPrograms::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PlacementType} }
    inns::Union{Nothing, Vector{String}} = nothing
    campaignIds::Union{Nothing, Vector{Int64}} = nothing

    function GenerateUnitedMarketplaceServicesReportRequest(businessId, dateTimeFrom, dateTimeTo, dateFrom, dateTo, yearFrom, monthFrom, yearTo, monthTo, placementPrograms, inns, campaignIds, )
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("businessId"), businessId)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("dateTimeFrom"), dateTimeFrom)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("dateTimeTo"), dateTimeTo)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("dateFrom"), dateFrom)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("dateTo"), dateTo)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("yearFrom"), yearFrom)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("monthFrom"), monthFrom)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("yearTo"), yearTo)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("monthTo"), monthTo)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("placementPrograms"), placementPrograms)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("inns"), inns)
        OpenAPI.validate_property(GenerateUnitedMarketplaceServicesReportRequest, Symbol("campaignIds"), campaignIds)
        return new(businessId, dateTimeFrom, dateTimeTo, dateFrom, dateTo, yearFrom, monthFrom, yearTo, monthTo, placementPrograms, inns, campaignIds, )
    end
end # type GenerateUnitedMarketplaceServicesReportRequest

const _property_types_GenerateUnitedMarketplaceServicesReportRequest = Dict{Symbol,String}(Symbol("businessId")=>"Int64", Symbol("dateTimeFrom")=>"ZonedDateTime", Symbol("dateTimeTo")=>"ZonedDateTime", Symbol("dateFrom")=>"Date", Symbol("dateTo")=>"Date", Symbol("yearFrom")=>"Int64", Symbol("monthFrom")=>"Int64", Symbol("yearTo")=>"Int64", Symbol("monthTo")=>"Int64", Symbol("placementPrograms")=>"Vector{PlacementType}", Symbol("inns")=>"Vector{String}", Symbol("campaignIds")=>"Vector{Int64}", )
OpenAPI.property_type(::Type{ GenerateUnitedMarketplaceServicesReportRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GenerateUnitedMarketplaceServicesReportRequest[name]))}

function check_required(o::GenerateUnitedMarketplaceServicesReportRequest)
    o.businessId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GenerateUnitedMarketplaceServicesReportRequest }, name::Symbol, val)
    if name === Symbol("businessId")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "int64")
    end
    if name === Symbol("dateTimeFrom")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "date-time")
    end
    if name === Symbol("dateTimeTo")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "date-time")
    end
    if name === Symbol("dateFrom")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "date")
    end
    if name === Symbol("dateTo")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "date")
    end
    if name === Symbol("yearFrom")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "int32")
    end
    if name === Symbol("monthFrom")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "int32")
    end
    if name === Symbol("monthFrom")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :maximum, val, 12, false)
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :minimum, val, 1, false)
    end
    if name === Symbol("yearTo")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "int32")
    end
    if name === Symbol("monthTo")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :format, val, "int32")
    end
    if name === Symbol("monthTo")
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :maximum, val, 12, false)
        OpenAPI.validate_param(name, "GenerateUnitedMarketplaceServicesReportRequest", :minimum, val, 1, false)
    end
end
