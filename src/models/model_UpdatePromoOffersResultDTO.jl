# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdatePromoOffersResultDTO
Ошибки и предупреждения, которые появились при добавлении товаров в акцию.

    UpdatePromoOffersResultDTO(;
        rejectedOffers=nothing,
        warningOffers=nothing,
    )

    - rejectedOffers::Vector{RejectedPromoOfferUpdateDTO} : Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
    - warningOffers::Vector{WarningPromoOfferUpdateDTO} : Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
"""
Base.@kwdef mutable struct UpdatePromoOffersResultDTO <: OpenAPI.APIModel
    rejectedOffers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RejectedPromoOfferUpdateDTO} }
    warningOffers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WarningPromoOfferUpdateDTO} }

    function UpdatePromoOffersResultDTO(rejectedOffers, warningOffers, )
        OpenAPI.validate_property(UpdatePromoOffersResultDTO, Symbol("rejectedOffers"), rejectedOffers)
        OpenAPI.validate_property(UpdatePromoOffersResultDTO, Symbol("warningOffers"), warningOffers)
        return new(rejectedOffers, warningOffers, )
    end
end # type UpdatePromoOffersResultDTO

const _property_types_UpdatePromoOffersResultDTO = Dict{Symbol,String}(Symbol("rejectedOffers")=>"Vector{RejectedPromoOfferUpdateDTO}", Symbol("warningOffers")=>"Vector{WarningPromoOfferUpdateDTO}", )
OpenAPI.property_type(::Type{ UpdatePromoOffersResultDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdatePromoOffersResultDTO[name]))}

function check_required(o::UpdatePromoOffersResultDTO)
    true
end

function OpenAPI.validate_property(::Type{ UpdatePromoOffersResultDTO }, name::Symbol, val)
end
