# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OfferMappingErrorDTO
Текст ошибки.

    OfferMappingErrorDTO(;
        type=nothing,
        parameterId=nothing,
        message=nothing,
    )

    - type::OfferMappingErrorType
    - parameterId::Int64 : Идентификатор характеристики, с которой связана ошибка.
    - message::String : Текст ошибки.
"""
Base.@kwdef mutable struct OfferMappingErrorDTO <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, OfferMappingErrorType }
    parameterId::Union{Nothing, Int64} = nothing
    message::Union{Nothing, String} = nothing

    function OfferMappingErrorDTO(type, parameterId, message, )
        OpenAPI.validate_property(OfferMappingErrorDTO, Symbol("type"), type)
        OpenAPI.validate_property(OfferMappingErrorDTO, Symbol("parameterId"), parameterId)
        OpenAPI.validate_property(OfferMappingErrorDTO, Symbol("message"), message)
        return new(type, parameterId, message, )
    end
end # type OfferMappingErrorDTO

const _property_types_OfferMappingErrorDTO = Dict{Symbol,String}(Symbol("type")=>"OfferMappingErrorType", Symbol("parameterId")=>"Int64", Symbol("message")=>"String", )
OpenAPI.property_type(::Type{ OfferMappingErrorDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OfferMappingErrorDTO[name]))}

function check_required(o::OfferMappingErrorDTO)
    o.type === nothing && (return false)
    o.message === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OfferMappingErrorDTO }, name::Symbol, val)
    if name === Symbol("parameterId")
        OpenAPI.validate_param(name, "OfferMappingErrorDTO", :format, val, "int64")
    end
end
