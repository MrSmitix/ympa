# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetCampaignOffersRequest
Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 

    GetCampaignOffersRequest(;
        offerIds=nothing,
        statuses=nothing,
        categoryIds=nothing,
        vendorNames=nothing,
        tags=nothing,
    )

    - offerIds::Vector{String} : Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}    
    - statuses::Vector{OfferCampaignStatusType} : Фильтр по статусам товаров. 
    - categoryIds::Vector{Int64} : Фильтр по категориям на Маркете.
    - vendorNames::Vector{String} : Фильтр по брендам.
    - tags::Vector{String} : Фильтр по тегам.
"""
Base.@kwdef mutable struct GetCampaignOffersRequest <: OpenAPI.APIModel
    offerIds::Union{Nothing, Vector{String}} = nothing
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OfferCampaignStatusType} }
    categoryIds::Union{Nothing, Vector{Int64}} = nothing
    vendorNames::Union{Nothing, Vector{String}} = nothing
    tags::Union{Nothing, Vector{String}} = nothing

    function GetCampaignOffersRequest(offerIds, statuses, categoryIds, vendorNames, tags, )
        OpenAPI.validate_property(GetCampaignOffersRequest, Symbol("offerIds"), offerIds)
        OpenAPI.validate_property(GetCampaignOffersRequest, Symbol("statuses"), statuses)
        OpenAPI.validate_property(GetCampaignOffersRequest, Symbol("categoryIds"), categoryIds)
        OpenAPI.validate_property(GetCampaignOffersRequest, Symbol("vendorNames"), vendorNames)
        OpenAPI.validate_property(GetCampaignOffersRequest, Symbol("tags"), tags)
        return new(offerIds, statuses, categoryIds, vendorNames, tags, )
    end
end # type GetCampaignOffersRequest

const _property_types_GetCampaignOffersRequest = Dict{Symbol,String}(Symbol("offerIds")=>"Vector{String}", Symbol("statuses")=>"Vector{OfferCampaignStatusType}", Symbol("categoryIds")=>"Vector{Int64}", Symbol("vendorNames")=>"Vector{String}", Symbol("tags")=>"Vector{String}", )
OpenAPI.property_type(::Type{ GetCampaignOffersRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetCampaignOffersRequest[name]))}

function check_required(o::GetCampaignOffersRequest)
    true
end

function OpenAPI.validate_property(::Type{ GetCampaignOffersRequest }, name::Symbol, val)
    if name === Symbol("offerIds")
        OpenAPI.validate_param(name, "GetCampaignOffersRequest", :maxItems, val, 200)
    end
end
