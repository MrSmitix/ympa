# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChangeOutletRequest

    ChangeOutletRequest(;
        name=nothing,
        type=nothing,
        coords=nothing,
        isMain=nothing,
        shopOutletCode=nothing,
        visibility=nothing,
        address=nothing,
        phones=nothing,
        workingSchedule=nothing,
        deliveryRules=nothing,
        storagePeriod=nothing,
    )

    - name::String : Название точки продаж. 
    - type::OutletType
    - coords::String : Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
    - isMain::Bool : Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
    - shopOutletCode::String : Идентификатор точки продаж, присвоенный магазином.
    - visibility::OutletVisibilityType
    - address::OutletAddressDTO
    - phones::Vector{String} : Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
    - workingSchedule::OutletWorkingScheduleDTO
    - deliveryRules::Vector{OutletDeliveryRuleDTO} : Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
    - storagePeriod::Int64 : Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
"""
Base.@kwdef mutable struct ChangeOutletRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, OutletType }
    coords::Union{Nothing, String} = nothing
    isMain::Union{Nothing, Bool} = nothing
    shopOutletCode::Union{Nothing, String} = nothing
    visibility = nothing # spec type: Union{ Nothing, OutletVisibilityType }
    address = nothing # spec type: Union{ Nothing, OutletAddressDTO }
    phones::Union{Nothing, Vector{String}} = nothing
    workingSchedule = nothing # spec type: Union{ Nothing, OutletWorkingScheduleDTO }
    deliveryRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OutletDeliveryRuleDTO} }
    storagePeriod::Union{Nothing, Int64} = nothing

    function ChangeOutletRequest(name, type, coords, isMain, shopOutletCode, visibility, address, phones, workingSchedule, deliveryRules, storagePeriod, )
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("name"), name)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("type"), type)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("coords"), coords)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("isMain"), isMain)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("shopOutletCode"), shopOutletCode)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("visibility"), visibility)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("address"), address)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("phones"), phones)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("workingSchedule"), workingSchedule)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("deliveryRules"), deliveryRules)
        OpenAPI.validate_property(ChangeOutletRequest, Symbol("storagePeriod"), storagePeriod)
        return new(name, type, coords, isMain, shopOutletCode, visibility, address, phones, workingSchedule, deliveryRules, storagePeriod, )
    end
end # type ChangeOutletRequest

const _property_types_ChangeOutletRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"OutletType", Symbol("coords")=>"String", Symbol("isMain")=>"Bool", Symbol("shopOutletCode")=>"String", Symbol("visibility")=>"OutletVisibilityType", Symbol("address")=>"OutletAddressDTO", Symbol("phones")=>"Vector{String}", Symbol("workingSchedule")=>"OutletWorkingScheduleDTO", Symbol("deliveryRules")=>"Vector{OutletDeliveryRuleDTO}", Symbol("storagePeriod")=>"Int64", )
OpenAPI.property_type(::Type{ ChangeOutletRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChangeOutletRequest[name]))}

function check_required(o::ChangeOutletRequest)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    o.address === nothing && (return false)
    o.phones === nothing && (return false)
    o.workingSchedule === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChangeOutletRequest }, name::Symbol, val)
    if name === Symbol("phones")
        OpenAPI.validate_param(name, "ChangeOutletRequest", :minItems, val, 1)
    end
    if name === Symbol("storagePeriod")
        OpenAPI.validate_param(name, "ChangeOutletRequest", :format, val, "int64")
    end
end
