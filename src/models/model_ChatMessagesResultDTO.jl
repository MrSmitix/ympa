# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatMessagesResultDTO
Информация о сообщениях.

    ChatMessagesResultDTO(;
        orderId=nothing,
        messages=nothing,
        paging=nothing,
    )

    - orderId::Int64 : Идентификатор заказа.
    - messages::Vector{ChatMessageDTO} : Информация о сообщениях.
    - paging::ForwardScrollingPagerDTO
"""
Base.@kwdef mutable struct ChatMessagesResultDTO <: OpenAPI.APIModel
    orderId::Union{Nothing, Int64} = nothing
    messages::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatMessageDTO} }
    paging = nothing # spec type: Union{ Nothing, ForwardScrollingPagerDTO }

    function ChatMessagesResultDTO(orderId, messages, paging, )
        OpenAPI.validate_property(ChatMessagesResultDTO, Symbol("orderId"), orderId)
        OpenAPI.validate_property(ChatMessagesResultDTO, Symbol("messages"), messages)
        OpenAPI.validate_property(ChatMessagesResultDTO, Symbol("paging"), paging)
        return new(orderId, messages, paging, )
    end
end # type ChatMessagesResultDTO

const _property_types_ChatMessagesResultDTO = Dict{Symbol,String}(Symbol("orderId")=>"Int64", Symbol("messages")=>"Vector{ChatMessageDTO}", Symbol("paging")=>"ForwardScrollingPagerDTO", )
OpenAPI.property_type(::Type{ ChatMessagesResultDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatMessagesResultDTO[name]))}

function check_required(o::ChatMessagesResultDTO)
    o.orderId === nothing && (return false)
    o.messages === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatMessagesResultDTO }, name::Symbol, val)
    if name === Symbol("orderId")
        OpenAPI.validate_param(name, "ChatMessagesResultDTO", :format, val, "int64")
    end
end
