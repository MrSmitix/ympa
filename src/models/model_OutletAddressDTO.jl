# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OutletAddressDTO
Адрес точки продаж. 

    OutletAddressDTO(;
        regionId=nothing,
        street=nothing,
        number=nothing,
        building=nothing,
        estate=nothing,
        block=nothing,
        additional=nothing,
        km=nothing,
        city=nothing,
    )

    - regionId::Int64 : Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    - street::String : Улица.
    - number::String : Номер дома.
    - building::String : Номер строения.
    - estate::String : Номер владения.
    - block::String : Номер корпуса.
    - additional::String : Дополнительная информация.
    - km::Int64 : Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    - city::String : {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
"""
Base.@kwdef mutable struct OutletAddressDTO <: OpenAPI.APIModel
    regionId::Union{Nothing, Int64} = nothing
    street::Union{Nothing, String} = nothing
    number::Union{Nothing, String} = nothing
    building::Union{Nothing, String} = nothing
    estate::Union{Nothing, String} = nothing
    block::Union{Nothing, String} = nothing
    additional::Union{Nothing, String} = nothing
    km::Union{Nothing, Int64} = nothing
    city::Union{Nothing, String} = nothing

    function OutletAddressDTO(regionId, street, number, building, estate, block, additional, km, city, )
        OpenAPI.validate_property(OutletAddressDTO, Symbol("regionId"), regionId)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("street"), street)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("number"), number)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("building"), building)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("estate"), estate)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("block"), block)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("additional"), additional)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("km"), km)
        OpenAPI.validate_property(OutletAddressDTO, Symbol("city"), city)
        return new(regionId, street, number, building, estate, block, additional, km, city, )
    end
end # type OutletAddressDTO

const _property_types_OutletAddressDTO = Dict{Symbol,String}(Symbol("regionId")=>"Int64", Symbol("street")=>"String", Symbol("number")=>"String", Symbol("building")=>"String", Symbol("estate")=>"String", Symbol("block")=>"String", Symbol("additional")=>"String", Symbol("km")=>"Int64", Symbol("city")=>"String", )
OpenAPI.property_type(::Type{ OutletAddressDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OutletAddressDTO[name]))}

function check_required(o::OutletAddressDTO)
    o.regionId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OutletAddressDTO }, name::Symbol, val)
    if name === Symbol("regionId")
        OpenAPI.validate_param(name, "OutletAddressDTO", :format, val, "int64")
    end
    if name === Symbol("street")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 512)
    end
    if name === Symbol("number")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 256)
    end
    if name === Symbol("building")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 16)
    end
    if name === Symbol("estate")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 16)
    end
    if name === Symbol("block")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 16)
    end
    if name === Symbol("km")
        OpenAPI.validate_param(name, "OutletAddressDTO", :format, val, "int32")
    end
    if name === Symbol("city")
        OpenAPI.validate_param(name, "OutletAddressDTO", :maxLength, val, 200)
    end
end
