// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 
 * @export
 * @interface ParameterValueDTO
 */
export interface ParameterValueDTO  {
    /**
     * Идентификатор характеристики.
     * @type {number}
     * @memberof ParameterValueDTO
     */
    parameterId: number;
    /**
     * Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
     * @type {number}
     * @memberof ParameterValueDTO
     */
    unitId?: number;
    /**
     * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. 
     * @type {number}
     * @memberof ParameterValueDTO
     */
    valueId?: number;
    /**
     * Значение.
     * @type {string}
     * @memberof ParameterValueDTO
     */
    value?: string;
}

export function ParameterValueDTOFromJSON(json: any): ParameterValueDTO {
    return {
        'parameterId': json['parameterId'],
        'unitId': !exists(json, 'unitId') ? undefined : json['unitId'],
        'valueId': !exists(json, 'valueId') ? undefined : json['valueId'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function ParameterValueDTOToJSON(value?: ParameterValueDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'parameterId': value.parameterId,
        'unitId': value.unitId,
        'valueId': value.valueId,
        'value': value.value,
    };
}


