# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OrderLabelDTO
Данные для печати ярлыка.

    OrderLabelDTO(;
        orderId=nothing,
        placesNumber=nothing,
        url=nothing,
        parcelBoxLabels=nothing,
    )

    - orderId::Int64 : Идентификатор заказа.
    - placesNumber::Int64 : Количество коробок в заказе.
    - url::String : URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
    - parcelBoxLabels::Vector{ParcelBoxLabelDTO} : Информация на ярлыке.
"""
Base.@kwdef mutable struct OrderLabelDTO <: OpenAPI.APIModel
    orderId::Union{Nothing, Int64} = nothing
    placesNumber::Union{Nothing, Int64} = nothing
    url::Union{Nothing, String} = nothing
    parcelBoxLabels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ParcelBoxLabelDTO} }

    function OrderLabelDTO(orderId, placesNumber, url, parcelBoxLabels, )
        OpenAPI.validate_property(OrderLabelDTO, Symbol("orderId"), orderId)
        OpenAPI.validate_property(OrderLabelDTO, Symbol("placesNumber"), placesNumber)
        OpenAPI.validate_property(OrderLabelDTO, Symbol("url"), url)
        OpenAPI.validate_property(OrderLabelDTO, Symbol("parcelBoxLabels"), parcelBoxLabels)
        return new(orderId, placesNumber, url, parcelBoxLabels, )
    end
end # type OrderLabelDTO

const _property_types_OrderLabelDTO = Dict{Symbol,String}(Symbol("orderId")=>"Int64", Symbol("placesNumber")=>"Int64", Symbol("url")=>"String", Symbol("parcelBoxLabels")=>"Vector{ParcelBoxLabelDTO}", )
OpenAPI.property_type(::Type{ OrderLabelDTO }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OrderLabelDTO[name]))}

function check_required(o::OrderLabelDTO)
    o.orderId === nothing && (return false)
    o.placesNumber === nothing && (return false)
    o.url === nothing && (return false)
    o.parcelBoxLabels === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OrderLabelDTO }, name::Symbol, val)
    if name === Symbol("orderId")
        OpenAPI.validate_param(name, "OrderLabelDTO", :format, val, "int64")
    end
    if name === Symbol("placesNumber")
        OpenAPI.validate_param(name, "OrderLabelDTO", :format, val, "int32")
    end
end
