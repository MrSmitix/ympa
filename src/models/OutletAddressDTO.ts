// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Адрес точки продаж. 
 * @export
 * @interface OutletAddressDTO
 */
export interface OutletAddressDTO  {
    /**
     * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
     * @type {number}
     * @memberof OutletAddressDTO
     */
    regionId: number;
    /**
     * Улица.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    street?: string;
    /**
     * Номер дома.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    number?: string;
    /**
     * Номер строения.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    building?: string;
    /**
     * Номер владения.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    estate?: string;
    /**
     * Номер корпуса.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    block?: string;
    /**
     * Дополнительная информация.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    additional?: string;
    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     * @type {number}
     * @memberof OutletAddressDTO
     */
    km?: number;
    /**
     * {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
     * @type {string}
     * @memberof OutletAddressDTO
     */
    city?: string;
}

export function OutletAddressDTOFromJSON(json: any): OutletAddressDTO {
    return {
        'regionId': json['regionId'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'building': !exists(json, 'building') ? undefined : json['building'],
        'estate': !exists(json, 'estate') ? undefined : json['estate'],
        'block': !exists(json, 'block') ? undefined : json['block'],
        'additional': !exists(json, 'additional') ? undefined : json['additional'],
        'km': !exists(json, 'km') ? undefined : json['km'],
        'city': !exists(json, 'city') ? undefined : json['city'],
    };
}

export function OutletAddressDTOToJSON(value?: OutletAddressDTO): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'regionId': value.regionId,
        'street': value.street,
        'number': value.number,
        'building': value.building,
        'estate': value.estate,
        'block': value.block,
        'additional': value.additional,
        'km': value.km,
        'city': value.city,
    };
}


