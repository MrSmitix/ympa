# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ympa_python_fastapi_server.models.get_mapping_dto import GetMappingDTO
from ympa_python_fastapi_server.models.offer_card_recommendation_dto import OfferCardRecommendationDTO
from ympa_python_fastapi_server.models.offer_card_status_type import OfferCardStatusType
from ympa_python_fastapi_server.models.offer_error_dto import OfferErrorDTO
from ympa_python_fastapi_server.models.parameter_value_dto import ParameterValueDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OfferCardDTO(BaseModel):
    """
    Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
    """ # noqa: E501
    offer_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ", alias="offerId")
    mapping: Optional[GetMappingDTO] = None
    parameter_values: Optional[List[ParameterValueDTO]] = Field(default=None, description="Список характеристик с их значениями. ", alias="parameterValues")
    card_status: Optional[OfferCardStatusType] = Field(default=None, alias="cardStatus")
    content_rating: Optional[StrictInt] = Field(default=None, description="Процент заполненности карточки.", alias="contentRating")
    recommendations: Optional[List[OfferCardRecommendationDTO]] = Field(default=None, description="Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. ")
    errors: Optional[List[OfferErrorDTO]] = Field(default=None, description="Ошибки в контенте, препятствующие размещению товара на витрине.")
    warnings: Optional[List[OfferErrorDTO]] = Field(default=None, description="Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.")
    __properties: ClassVar[List[str]] = ["offerId", "mapping", "parameterValues", "cardStatus", "contentRating", "recommendations", "errors", "warnings"]

    @field_validator('offer_id')
    def offer_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OfferCardDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mapping
        if self.mapping:
            _dict['mapping'] = self.mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_values (list)
        _items = []
        if self.parameter_values:
            for _item in self.parameter_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameterValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recommendations (list)
        _items = []
        if self.recommendations:
            for _item in self.recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        # set to None if parameter_values (nullable) is None
        # and model_fields_set contains the field
        if self.parameter_values is None and "parameter_values" in self.model_fields_set:
            _dict['parameterValues'] = None

        # set to None if recommendations (nullable) is None
        # and model_fields_set contains the field
        if self.recommendations is None and "recommendations" in self.model_fields_set:
            _dict['recommendations'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OfferCardDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offerId": obj.get("offerId"),
            "mapping": GetMappingDTO.from_dict(obj.get("mapping")) if obj.get("mapping") is not None else None,
            "parameterValues": [ParameterValueDTO.from_dict(_item) for _item in obj.get("parameterValues")] if obj.get("parameterValues") is not None else None,
            "cardStatus": obj.get("cardStatus"),
            "contentRating": obj.get("contentRating"),
            "recommendations": [OfferCardRecommendationDTO.from_dict(_item) for _item in obj.get("recommendations")] if obj.get("recommendations") is not None else None,
            "errors": [OfferErrorDTO.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None,
            "warnings": [OfferErrorDTO.from_dict(_item) for _item in obj.get("warnings")] if obj.get("warnings") is not None else None
        })
        return _obj


