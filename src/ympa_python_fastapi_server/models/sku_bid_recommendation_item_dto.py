# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ympa_python_fastapi_server.models.bid_recommendation_item_dto import BidRecommendationItemDTO
from ympa_python_fastapi_server.models.price_recommendation_item_dto import PriceRecommendationItemDTO
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SkuBidRecommendationItemDTO(BaseModel):
    """
    Список товаров с рекомендованными ставками.
    """ # noqa: E501
    sku: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    bid: Annotated[int, Field(le=9999, strict=True, ge=0)] = Field(description="Значение ставки.")
    bid_recommendations: Optional[List[BidRecommendationItemDTO]] = Field(default=None, description="Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. ", alias="bidRecommendations")
    price_recommendations: Optional[List[PriceRecommendationItemDTO]] = Field(default=None, description="Рекомендованные цены.", alias="priceRecommendations")
    __properties: ClassVar[List[str]] = ["sku", "bid", "bidRecommendations", "priceRecommendations"]

    @field_validator('sku')
    def sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SkuBidRecommendationItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bid_recommendations (list)
        _items = []
        if self.bid_recommendations:
            for _item in self.bid_recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bidRecommendations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in price_recommendations (list)
        _items = []
        if self.price_recommendations:
            for _item in self.price_recommendations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['priceRecommendations'] = _items
        # set to None if bid_recommendations (nullable) is None
        # and model_fields_set contains the field
        if self.bid_recommendations is None and "bid_recommendations" in self.model_fields_set:
            _dict['bidRecommendations'] = None

        # set to None if price_recommendations (nullable) is None
        # and model_fields_set contains the field
        if self.price_recommendations is None and "price_recommendations" in self.model_fields_set:
            _dict['priceRecommendations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SkuBidRecommendationItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sku": obj.get("sku"),
            "bid": obj.get("bid"),
            "bidRecommendations": [BidRecommendationItemDTO.from_dict(_item) for _item in obj.get("bidRecommendations")] if obj.get("bidRecommendations") is not None else None,
            "priceRecommendations": [PriceRecommendationItemDTO.from_dict(_item) for _item in obj.get("priceRecommendations")] if obj.get("priceRecommendations") is not None else None
        })
        return _obj


