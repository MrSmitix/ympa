{-
   Партнерский API Маркета
   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   The version of the OpenAPI document: LATEST

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AcceptOrderCancellationRequest
    , AddHiddenOffersRequest
    , AddOffersToArchiveDTO
    , AddOffersToArchiveErrorDTO
    , AddOffersToArchiveErrorType(..), addOffersToArchiveErrorTypeVariants
    , AddOffersToArchiveRequest
    , AddOffersToArchiveResponse
    , AffectedOrderQualityRatingComponentType(..), affectedOrderQualityRatingComponentTypeVariants
    , AgeDTO
    , AgeUnitType(..), ageUnitTypeVariants
    , ApiClientDataErrorResponse
    , ApiErrorDTO
    , ApiErrorResponse
    , ApiForbiddenErrorResponse
    , ApiLimitErrorResponse
    , ApiLockedErrorResponse
    , ApiNotFoundErrorResponse
    , ApiResponse
    , ApiResponseStatusType(..), apiResponseStatusTypeVariants
    , ApiServerErrorResponse
    , ApiUnauthorizedErrorResponse
    , BaseCampaignOfferDTO
    , BaseOfferDTO
    , BasePriceDTO
    , BaseShipmentDTO
    , Bid
    , BidRecommendationItemDTO
    , BriefOrderItemDTO
    , BriefOrderItemInstanceDTO
    , BusinessDTO
    , BusinessSettingsDTO
    , CalculateTariffsOfferDTO
    , CalculateTariffsOfferInfoDTO
    , CalculateTariffsParametersDTO
    , CalculateTariffsRequest
    , CalculateTariffsResponse
    , CalculateTariffsResponseDTO
    , CalculatedTariffDTO
    , CalculatedTariffType(..), calculatedTariffTypeVariants
    , CampaignDTO
    , CampaignQualityRatingDTO
    , CampaignSettingsDTO
    , CampaignSettingsDeliveryDTO
    , CampaignSettingsLocalRegionDTO
    , CampaignSettingsScheduleDTO
    , CampaignSettingsScheduleSourceType(..), campaignSettingsScheduleSourceTypeVariants
    , CampaignSettingsTimePeriodDTO
    , CampaignsQualityRatingDTO
    , CategoryContentParametersDTO
    , CategoryDTO, CategoryDTOChildren(..)
    , CategoryErrorDTO
    , CategoryErrorType(..), categoryErrorTypeVariants
    , CategoryId
    , CategoryParameterDTO
    , CategoryParameterUnitDTO
    , ChangeOutletRequest
    , ChannelType
    , ChatMessageDTO
    , ChatMessagePayloadDTO
    , ChatMessageSenderType(..), chatMessageSenderTypeVariants
    , ChatMessagesResultDTO
    , ChatStatusType(..), chatStatusTypeVariants
    , ChatType(..), chatTypeVariants
    , Cis
    , ConfirmPricesRequest
    , ConfirmShipmentRequest
    , CreateChatRequest
    , CreateChatResponse
    , CreateChatResultDTO
    , CreateOutletResponse
    , CurrencyType(..), currencyTypeVariants
    , DateDdMmYyyy
    , DateDdMmYyyyHhMmSs
    , DayOfWeekType(..), dayOfWeekTypeVariants
    , DeleteCampaignOffersDTO
    , DeleteCampaignOffersRequest
    , DeleteCampaignOffersResponse
    , DeleteGoodsFeedbackCommentRequest
    , DeleteHiddenOffersRequest
    , DeleteOffersDTO
    , DeleteOffersFromArchiveDTO
    , DeleteOffersFromArchiveRequest
    , DeleteOffersFromArchiveResponse
    , DeleteOffersRequest
    , DeleteOffersResponse
    , DeletePromoOffersRequest
    , DeletePromoOffersResponse
    , DeletePromoOffersResultDTO
    , DeliveryServiceDTO
    , DeliveryServiceInfoDTO
    , DeliveryServicesDTO
    , DocumentDTO
    , EacVerificationResultDTO
    , EacVerificationStatusType(..), eacVerificationStatusTypeVariants
    , EmptyApiResponse
    , EnrichedMappingsOfferDTO
    , EnrichedModelDTO
    , EnrichedModelsDTO
    , EnrichedOrderBoxLayoutDTO
    , ExtensionShipmentDTO
    , FeedContentDTO
    , FeedContentErrorDTO
    , FeedContentErrorType(..), feedContentErrorTypeVariants
    , FeedDTO
    , FeedDownloadDTO
    , FeedDownloadErrorDTO
    , FeedDownloadErrorType(..), feedDownloadErrorTypeVariants
    , FeedIndexLogsErrorDTO
    , FeedIndexLogsErrorType(..), feedIndexLogsErrorTypeVariants
    , FeedIndexLogsFeedDTO
    , FeedIndexLogsIndexType(..), feedIndexLogsIndexTypeVariants
    , FeedIndexLogsOffersDTO
    , FeedIndexLogsRecordDTO
    , FeedIndexLogsResultDTO
    , FeedIndexLogsStatusType(..), feedIndexLogsStatusTypeVariants
    , FeedParameterDTO
    , FeedParameterName
    , FeedPlacementDTO
    , FeedPublicationDTO
    , FeedPublicationFullDTO
    , FeedPublicationPriceAndStockUpdateDTO
    , FeedStatusType(..), feedStatusTypeVariants
    , FeedbackAuthorDTO
    , FeedbackCommentAuthorDTO
    , FeedbackCommentAuthorType(..), feedbackCommentAuthorTypeVariants
    , FeedbackCommentDTO, FeedbackCommentDTOChildren(..)
    , FeedbackDTO
    , FeedbackDeliveryType(..), feedbackDeliveryTypeVariants
    , FeedbackFactorDTO
    , FeedbackGradesDTO
    , FeedbackListDTO
    , FeedbackOrderDTO
    , FeedbackReactionStatusType(..), feedbackReactionStatusTypeVariants
    , FeedbackShopDTO
    , FeedbackStateType(..), feedbackStateTypeVariants
    , FieldStateType(..), fieldStateTypeVariants
    , FlippingPagerDTO
    , ForwardScrollingPagerDTO
    , FulfillmentWarehouseDTO
    , FulfillmentWarehousesDTO
    , FullOutletDTO
    , FullOutletLicenseDTO
    , GenerateBoostConsolidatedRequest
    , GenerateCompetitorsPositionReportRequest
    , GenerateGoodsFeedbackRequest
    , GenerateGoodsMovementReportRequest
    , GenerateGoodsRealizationReportRequest
    , GenerateGoodsTurnoverRequest
    , GenerateMassOrderLabelsRequest
    , GeneratePricesReportRequest
    , GenerateReportDTO
    , GenerateReportResponse
    , GenerateShelfsStatisticsRequest
    , GenerateShipmentListDocumentReportRequest
    , GenerateShowsSalesReportRequest
    , GenerateStocksOnWarehousesReportRequest
    , GenerateUnitedMarketplaceServicesReportRequest
    , GenerateUnitedNettingReportRequest
    , GenerateUnitedOrdersRequest
    , GetAllOffersResponse
    , GetBidsInfoRequest
    , GetBidsInfoResponse
    , GetBidsInfoResponseDTO
    , GetBidsRecommendationsRequest
    , GetBidsRecommendationsResponse
    , GetBidsRecommendationsResponseDTO
    , GetBusinessBuyerInfoResponse
    , GetBusinessDocumentsInfoResponse
    , GetBusinessSettingsInfoDTO
    , GetBusinessSettingsResponse
    , GetCampaignLoginsResponse
    , GetCampaignOfferDTO
    , GetCampaignOffersRequest
    , GetCampaignOffersResponse
    , GetCampaignOffersResultDTO
    , GetCampaignRegionResponse
    , GetCampaignResponse
    , GetCampaignSettingsResponse
    , GetCampaignsResponse
    , GetCategoriesMaxSaleQuantumDTO
    , GetCategoriesMaxSaleQuantumRequest
    , GetCategoriesMaxSaleQuantumResponse
    , GetCategoriesRequest
    , GetCategoriesResponse
    , GetCategoryContentParametersResponse
    , GetChatHistoryRequest
    , GetChatHistoryResponse
    , GetChatInfoDTO
    , GetChatsInfoDTO
    , GetChatsRequest
    , GetChatsResponse
    , GetDeliveryServicesResponse
    , GetFeedIndexLogsResponse
    , GetFeedResponse
    , GetFeedbackListResponse
    , GetFeedsResponse
    , GetFulfillmentWarehousesResponse
    , GetGoodsFeedbackCommentsRequest
    , GetGoodsFeedbackCommentsResponse
    , GetGoodsFeedbackRequest
    , GetGoodsFeedbackResponse
    , GetGoodsStatsRequest
    , GetGoodsStatsResponse
    , GetHiddenOffersResponse
    , GetHiddenOffersResultDTO
    , GetMappingDTO
    , GetModelsOffersResponse
    , GetModelsRequest
    , GetModelsResponse
    , GetOfferCardsContentStatusRequest
    , GetOfferCardsContentStatusResponse
    , GetOfferDTO
    , GetOfferMappingDTO
    , GetOfferMappingEntriesResponse
    , GetOfferMappingsRequest
    , GetOfferMappingsResponse
    , GetOfferMappingsResultDTO
    , GetOfferRecommendationsRequest
    , GetOfferRecommendationsResponse
    , GetOffersResponse
    , GetOrderBuyerInfoResponse
    , GetOrderLabelsDataResponse
    , GetOrderResponse
    , GetOrdersResponse
    , GetOrdersStatsRequest
    , GetOrdersStatsResponse
    , GetOutletLicensesResponse
    , GetOutletResponse
    , GetOutletsResponse
    , GetPriceDTO
    , GetPriceWithDiscountDTO
    , GetPriceWithVatDTO
    , GetPricesByOfferIdsRequest
    , GetPricesByOfferIdsResponse
    , GetPricesResponse
    , GetPromoAssortmentInfoDTO
    , GetPromoBestsellerInfoDTO
    , GetPromoConstraintsDTO
    , GetPromoDTO
    , GetPromoMechanicsInfoDTO
    , GetPromoOfferDTO
    , GetPromoOffersRequest
    , GetPromoOffersResponse
    , GetPromoOffersResultDTO
    , GetPromoPromocodeInfoDTO
    , GetPromosRequest
    , GetPromosResponse
    , GetPromosResultDTO
    , GetQualityRatingDetailsResponse
    , GetQualityRatingRequest
    , GetQualityRatingResponse
    , GetQuarantineOffersRequest
    , GetQuarantineOffersResponse
    , GetQuarantineOffersResultDTO
    , GetRegionWithChildrenResponse
    , GetRegionsResponse
    , GetReportInfoResponse
    , GetReturnResponse
    , GetReturnsResponse
    , GetShipmentOrdersInfoResponse
    , GetShipmentResponse
    , GetSuggestedOfferMappingEntriesRequest
    , GetSuggestedOfferMappingEntriesResponse
    , GetSuggestedOfferMappingsRequest
    , GetSuggestedOfferMappingsResponse
    , GetSuggestedOfferMappingsResultDTO
    , GetWarehouseStocksDTO
    , GetWarehouseStocksRequest
    , GetWarehouseStocksResponse
    , GetWarehousesResponse
    , GoodsFeedbackCommentAuthorDTO
    , GoodsFeedbackCommentAuthorType(..), goodsFeedbackCommentAuthorTypeVariants
    , GoodsFeedbackCommentDTO
    , GoodsFeedbackCommentId
    , GoodsFeedbackCommentListDTO
    , GoodsFeedbackCommentStatusType(..), goodsFeedbackCommentStatusTypeVariants
    , GoodsFeedbackCommentText
    , GoodsFeedbackDTO
    , GoodsFeedbackDescriptionDTO
    , GoodsFeedbackId
    , GoodsFeedbackIdentifiersDTO
    , GoodsFeedbackListDTO
    , GoodsFeedbackMediaDTO
    , GoodsFeedbackStatisticsDTO
    , GoodsStatsDTO
    , GoodsStatsGoodsDTO
    , GoodsStatsWarehouseDTO
    , GoodsStatsWeightDimensionsDTO
    , GpsDTO
    , HiddenOfferDTO
    , LanguageType(..), languageTypeVariants
    , LicenseCheckStatusType(..), licenseCheckStatusTypeVariants
    , LicenseType(..), licenseTypeVariants
    , LogisticPickupPointDTO
    , LogisticPointType(..), logisticPointTypeVariants
    , MappingsOfferDTO
    , MappingsOfferInfoDTO
    , MarketSku
    , MaxSaleQuantumDTO
    , MechanicsType(..), mechanicsTypeVariants
    , ModelDTO
    , ModelOfferDTO
    , ModelPriceDTO
    , ModelsDTO
    , OfferAvailabilityStatusType(..), offerAvailabilityStatusTypeVariants
    , OfferCampaignStatusDTO
    , OfferCampaignStatusType(..), offerCampaignStatusTypeVariants
    , OfferCardDTO
    , OfferCardRecommendationDTO
    , OfferCardRecommendationType(..), offerCardRecommendationTypeVariants
    , OfferCardStatusType(..), offerCardStatusTypeVariants
    , OfferCardsContentStatusDTO
    , OfferCategory
    , OfferConditionDTO
    , OfferConditionQualityType(..), offerConditionQualityTypeVariants
    , OfferConditionType(..), offerConditionTypeVariants
    , OfferContentDTO
    , OfferContentErrorDTO
    , OfferContentErrorType(..), offerContentErrorTypeVariants
    , OfferDTO
    , OfferDescription
    , OfferErrorDTO
    , OfferForRecommendationDTO
    , OfferManualDTO
    , OfferMappingDTO
    , OfferMappingEntriesDTO
    , OfferMappingEntryDTO
    , OfferMappingErrorDTO
    , OfferMappingErrorType(..), offerMappingErrorTypeVariants
    , OfferMappingInfoDTO
    , OfferMappingKindType(..), offerMappingKindTypeVariants
    , OfferMappingSuggestionsListDTO
    , OfferName
    , OfferParamDTO
    , OfferPriceByOfferIdsListResponseDTO
    , OfferPriceByOfferIdsResponseDTO
    , OfferPriceDTO
    , OfferPriceListResponseDTO
    , OfferPriceResponseDTO
    , OfferProcessingNoteDTO
    , OfferProcessingNoteType(..), offerProcessingNoteTypeVariants
    , OfferProcessingStateDTO
    , OfferProcessingStatusType(..), offerProcessingStatusTypeVariants
    , OfferRecommendationDTO
    , OfferRecommendationInfoDTO
    , OfferRecommendationsResultDTO
    , OfferSellingProgramDTO
    , OfferSellingProgramStatusType(..), offerSellingProgramStatusTypeVariants
    , OfferType(..), offerTypeVariants
    , OfferVendor
    , OfferVendorCode
    , OfferWeightDimensionsDTO
    , OffersDTO
    , OptionValuesLimitedDTO
    , OrderBoxLayoutDTO
    , OrderBoxLayoutItemDTO
    , OrderBoxLayoutPartialCountDTO
    , OrderBoxesLayoutDTO
    , OrderBusinessBuyerDTO
    , OrderBusinessDocumentsDTO
    , OrderBuyerBasicInfoDTO
    , OrderBuyerDTO
    , OrderBuyerInfoDTO
    , OrderBuyerType(..), orderBuyerTypeVariants
    , OrderCancellationReasonType(..), orderCancellationReasonTypeVariants
    , OrderCourierDTO
    , OrderDTO
    , OrderDeliveryAddressDTO
    , OrderDeliveryDTO
    , OrderDeliveryDateDTO
    , OrderDeliveryDateReasonType(..), orderDeliveryDateReasonTypeVariants
    , OrderDeliveryDatesDTO
    , OrderDeliveryDispatchType(..), orderDeliveryDispatchTypeVariants
    , OrderDeliveryEacType(..), orderDeliveryEacTypeVariants
    , OrderDeliveryPartnerType(..), orderDeliveryPartnerTypeVariants
    , OrderDeliveryType(..), orderDeliveryTypeVariants
    , OrderDigitalItemDTO
    , OrderDocumentStatusType(..), orderDocumentStatusTypeVariants
    , OrderItemDTO
    , OrderItemDetailDTO
    , OrderItemInstanceDTO
    , OrderItemInstanceModificationDTO
    , OrderItemInstanceType(..), orderItemInstanceTypeVariants
    , OrderItemModificationDTO
    , OrderItemPromoDTO
    , OrderItemStatusType(..), orderItemStatusTypeVariants
    , OrderItemSubsidyDTO
    , OrderItemSubsidyType(..), orderItemSubsidyTypeVariants
    , OrderItemsModificationRequestReasonType(..), orderItemsModificationRequestReasonTypeVariants
    , OrderItemsModificationResultDTO
    , OrderLabelDTO
    , OrderLiftType(..), orderLiftTypeVariants
    , OrderParcelBoxDTO
    , OrderPaymentMethodType(..), orderPaymentMethodTypeVariants
    , OrderPaymentType(..), orderPaymentTypeVariants
    , OrderPromoType(..), orderPromoTypeVariants
    , OrderShipmentDTO
    , OrderStateDTO
    , OrderStatsStatusType(..), orderStatsStatusTypeVariants
    , OrderStatusChangeDTO
    , OrderStatusChangeDeliveryDTO
    , OrderStatusChangeDeliveryDatesDTO
    , OrderStatusType(..), orderStatusTypeVariants
    , OrderSubsidyDTO
    , OrderSubsidyType(..), orderSubsidyTypeVariants
    , OrderSubstatusType(..), orderSubstatusTypeVariants
    , OrderTaxSystemType(..), orderTaxSystemTypeVariants
    , OrderTrackDTO
    , OrderUpdateStatusType(..), orderUpdateStatusTypeVariants
    , OrderVatType(..), orderVatTypeVariants
    , OrdersShipmentInfoDTO
    , OrdersStatsCommissionDTO
    , OrdersStatsCommissionType(..), ordersStatsCommissionTypeVariants
    , OrdersStatsDTO
    , OrdersStatsDeliveryRegionDTO
    , OrdersStatsDetailsDTO
    , OrdersStatsItemDTO
    , OrdersStatsItemStatusType(..), ordersStatsItemStatusTypeVariants
    , OrdersStatsOrderDTO
    , OrdersStatsOrderPaymentType(..), ordersStatsOrderPaymentTypeVariants
    , OrdersStatsPaymentDTO
    , OrdersStatsPaymentOrderDTO
    , OrdersStatsPaymentSourceType(..), ordersStatsPaymentSourceTypeVariants
    , OrdersStatsPaymentType(..), ordersStatsPaymentTypeVariants
    , OrdersStatsPriceDTO
    , OrdersStatsPriceType(..), ordersStatsPriceTypeVariants
    , OrdersStatsStockType(..), ordersStatsStockTypeVariants
    , OrdersStatsWarehouseDTO
    , OutletAddressDTO
    , OutletDTO
    , OutletDeliveryRuleDTO
    , OutletLicenseDTO
    , OutletLicensesResponseDTO
    , OutletResponseDTO
    , OutletStatusType(..), outletStatusTypeVariants
    , OutletType(..), outletTypeVariants
    , OutletVisibilityType(..), outletVisibilityTypeVariants
    , OutletWorkingScheduleDTO
    , OutletWorkingScheduleItemDTO
    , PageFormatType(..), pageFormatTypeVariants
    , PagedReturnsDTO
    , PalletsCountDTO
    , ParameterType(..), parameterTypeVariants
    , ParameterValueConstraintsDTO
    , ParameterValueDTO
    , ParameterValueOptionDTO
    , ParcelBoxDTO
    , ParcelBoxLabelDTO
    , ParcelDTO
    , PartnerMarketCategoryId
    , PartnerShipmentWarehouseDTO
    , PaymentFrequencyType(..), paymentFrequencyTypeVariants
    , PickupAddressDTO
    , PlacementType(..), placementTypeVariants
    , PriceCompetitivenessThresholdsDTO
    , PriceCompetitivenessType(..), priceCompetitivenessTypeVariants
    , PriceDTO
    , PriceQuarantineVerdictDTO
    , PriceQuarantineVerdictParamNameType(..), priceQuarantineVerdictParamNameTypeVariants
    , PriceQuarantineVerdictParameterDTO
    , PriceQuarantineVerdictType(..), priceQuarantineVerdictTypeVariants
    , PriceRecommendationItemDTO
    , PriceSuggestDTO
    , PriceSuggestOfferDTO
    , PriceSuggestType(..), priceSuggestTypeVariants
    , PromoOfferAutoParticipatingDetailsDTO
    , PromoOfferDiscountParamsDTO
    , PromoOfferParamsDTO
    , PromoOfferParticipationStatusFilterType(..), promoOfferParticipationStatusFilterTypeVariants
    , PromoOfferParticipationStatusType(..), promoOfferParticipationStatusTypeVariants
    , PromoOfferPromocodeParamsDTO
    , PromoOfferUpdateWarningCodeType(..), promoOfferUpdateWarningCodeTypeVariants
    , PromoOfferUpdateWarningDTO
    , PromoParticipationType(..), promoParticipationTypeVariants
    , PromoPeriodDTO
    , ProvideOrderDigitalCodesRequest
    , ProvideOrderItemIdentifiersRequest
    , ProvideOrderItemIdentifiersResponse
    , PutSkuBidsRequest
    , QualityRatingAffectedOrderDTO
    , QualityRatingComponentDTO
    , QualityRatingComponentType(..), qualityRatingComponentTypeVariants
    , QualityRatingDTO
    , QualityRatingDetailsDTO
    , QuantumDTO
    , QuarantineOfferDTO
    , RecipientType(..), recipientTypeVariants
    , RefundStatusType(..), refundStatusTypeVariants
    , RegionDTO, RegionDTOParent(..), RegionDTOChildren(..)
    , RegionType(..), regionTypeVariants
    , RegionalModelInfoDTO
    , RejectedPromoOfferDeleteDTO
    , RejectedPromoOfferDeleteReasonType(..), rejectedPromoOfferDeleteReasonTypeVariants
    , RejectedPromoOfferUpdateDTO
    , RejectedPromoOfferUpdateReasonType(..), rejectedPromoOfferUpdateReasonTypeVariants
    , ReportFormatType(..), reportFormatTypeVariants
    , ReportInfoDTO
    , ReportStatusType(..), reportStatusTypeVariants
    , ReportSubStatusType(..), reportSubStatusTypeVariants
    , ReturnDTO
    , ReturnDecisionDTO
    , ReturnDecisionReasonType(..), returnDecisionReasonTypeVariants
    , ReturnDecisionSubreasonType(..), returnDecisionSubreasonTypeVariants
    , ReturnDecisionType(..), returnDecisionTypeVariants
    , ReturnInstanceDTO
    , ReturnInstanceStatusType(..), returnInstanceStatusTypeVariants
    , ReturnInstanceStockType(..), returnInstanceStockTypeVariants
    , ReturnItemDTO
    , ReturnRequestDecisionType(..), returnRequestDecisionTypeVariants
    , ReturnShipmentStatusType(..), returnShipmentStatusTypeVariants
    , ReturnType(..), returnTypeVariants
    , ScrollingPagerDTO
    , SearchModelsResponse
    , SearchShipmentsRequest
    , SearchShipmentsResponse
    , SearchShipmentsResponseDTO
    , SellingProgramType(..), sellingProgramTypeVariants
    , SendMessageToChatRequest
    , SetFeedParamsRequest
    , SetOrderBoxLayoutRequest
    , SetOrderBoxLayoutResponse
    , SetOrderDeliveryDateRequest
    , SetOrderDeliveryTrackCodeRequest
    , SetOrderShipmentBoxesRequest
    , SetOrderShipmentBoxesResponse
    , SetReturnDecisionRequest
    , SetShipmentPalletsCountRequest
    , ShelfsStatisticsAttributionType(..), shelfsStatisticsAttributionTypeVariants
    , ShipmentActionType(..), shipmentActionTypeVariants
    , ShipmentBoxesDTO
    , ShipmentDTO
    , ShipmentInfoDTO
    , ShipmentPalletLabelPageFormatType(..), shipmentPalletLabelPageFormatTypeVariants
    , ShipmentStatusChangeDTO
    , ShipmentStatusType(..), shipmentStatusTypeVariants
    , ShipmentType(..), shipmentTypeVariants
    , ShopSku
    , ShowsSalesGroupingType(..), showsSalesGroupingTypeVariants
    , SkipGoodsFeedbackReactionRequest
    , SkuBidItemDTO
    , SkuBidRecommendationItemDTO
    , SortOrderType(..), sortOrderTypeVariants
    , SuggestOfferPriceDTO
    , SuggestPricesRequest
    , SuggestPricesResponse
    , SuggestPricesResultDTO
    , SuggestedOfferDTO
    , SuggestedOfferMappingDTO
    , TariffDTO
    , TariffParameterDTO
    , TariffType(..), tariffTypeVariants
    , TimePeriodDTO
    , TimeUnitType(..), timeUnitTypeVariants
    , TrackDTO
    , TransferOrdersFromShipmentRequest
    , TurnoverDTO
    , TurnoverType(..), turnoverTypeVariants
    , UnitDTO
    , UpdateBusinessOfferPriceDTO
    , UpdateBusinessPricesRequest
    , UpdateCampaignOfferDTO
    , UpdateCampaignOffersRequest
    , UpdateGoodsFeedbackCommentDTO
    , UpdateGoodsFeedbackCommentRequest
    , UpdateGoodsFeedbackCommentResponse
    , UpdateMappingDTO
    , UpdateMappingsOfferDTO
    , UpdateOfferContentRequest
    , UpdateOfferContentResponse
    , UpdateOfferContentResultDTO
    , UpdateOfferDTO
    , UpdateOfferMappingDTO
    , UpdateOfferMappingEntryDTO
    , UpdateOfferMappingEntryRequest
    , UpdateOfferMappingResultDTO
    , UpdateOfferMappingsRequest
    , UpdateOfferMappingsResponse
    , UpdateOrderItemRequest
    , UpdateOrderStatusDTO
    , UpdateOrderStatusRequest
    , UpdateOrderStatusResponse
    , UpdateOrderStatusesDTO
    , UpdateOrderStatusesRequest
    , UpdateOrderStatusesResponse
    , UpdateOrderStorageLimitRequest
    , UpdateOutletLicenseRequest
    , UpdatePriceWithDiscountDTO
    , UpdatePricesRequest
    , UpdatePromoOfferDTO
    , UpdatePromoOfferDiscountParamsDTO
    , UpdatePromoOfferParamsDTO
    , UpdatePromoOffersRequest
    , UpdatePromoOffersResponse
    , UpdatePromoOffersResultDTO
    , UpdateStockDTO
    , UpdateStockItemDTO
    , UpdateStocksRequest
    , UpdateTimeDTO
    , ValueRestrictionDTO
    , VerifyOrderEacRequest
    , VerifyOrderEacResponse
    , WarehouseAddressDTO
    , WarehouseDTO
    , WarehouseGroupDTO
    , WarehouseOfferDTO
    , WarehouseOffersDTO
    , WarehouseStockDTO
    , WarehouseStockType(..), warehouseStockTypeVariants
    , WarehousesDTO
    , WarningPromoOfferUpdateDTO
    , encodeAcceptOrderCancellationRequest
    , encodeAddHiddenOffersRequest
    , encodeAddOffersToArchiveDTO
    , encodeAddOffersToArchiveErrorDTO
    , encodeAddOffersToArchiveErrorType
    , encodeAddOffersToArchiveRequest
    , encodeAddOffersToArchiveResponse
    , encodeAffectedOrderQualityRatingComponentType
    , encodeAgeDTO
    , encodeAgeUnitType
    , encodeApiClientDataErrorResponse
    , encodeApiErrorDTO
    , encodeApiErrorResponse
    , encodeApiForbiddenErrorResponse
    , encodeApiLimitErrorResponse
    , encodeApiLockedErrorResponse
    , encodeApiNotFoundErrorResponse
    , encodeApiResponse
    , encodeApiResponseStatusType
    , encodeApiServerErrorResponse
    , encodeApiUnauthorizedErrorResponse
    , encodeBaseCampaignOfferDTO
    , encodeBaseOfferDTO
    , encodeBasePriceDTO
    , encodeBaseShipmentDTO
    , encodeBid
    , encodeBidRecommendationItemDTO
    , encodeBriefOrderItemDTO
    , encodeBriefOrderItemInstanceDTO
    , encodeBusinessDTO
    , encodeBusinessSettingsDTO
    , encodeCalculateTariffsOfferDTO
    , encodeCalculateTariffsOfferInfoDTO
    , encodeCalculateTariffsParametersDTO
    , encodeCalculateTariffsRequest
    , encodeCalculateTariffsResponse
    , encodeCalculateTariffsResponseDTO
    , encodeCalculatedTariffDTO
    , encodeCalculatedTariffType
    , encodeCampaignDTO
    , encodeCampaignQualityRatingDTO
    , encodeCampaignSettingsDTO
    , encodeCampaignSettingsDeliveryDTO
    , encodeCampaignSettingsLocalRegionDTO
    , encodeCampaignSettingsScheduleDTO
    , encodeCampaignSettingsScheduleSourceType
    , encodeCampaignSettingsTimePeriodDTO
    , encodeCampaignsQualityRatingDTO
    , encodeCategoryContentParametersDTO
    , encodeCategoryDTO
    , encodeCategoryErrorDTO
    , encodeCategoryErrorType
    , encodeCategoryId
    , encodeCategoryParameterDTO
    , encodeCategoryParameterUnitDTO
    , encodeChangeOutletRequest
    , encodeChannelType
    , encodeChatMessageDTO
    , encodeChatMessagePayloadDTO
    , encodeChatMessageSenderType
    , encodeChatMessagesResultDTO
    , encodeChatStatusType
    , encodeChatType
    , encodeCis
    , encodeConfirmPricesRequest
    , encodeConfirmShipmentRequest
    , encodeCreateChatRequest
    , encodeCreateChatResponse
    , encodeCreateChatResultDTO
    , encodeCreateOutletResponse
    , encodeCurrencyType
    , encodeDateDdMmYyyy
    , encodeDateDdMmYyyyHhMmSs
    , encodeDayOfWeekType
    , encodeDeleteCampaignOffersDTO
    , encodeDeleteCampaignOffersRequest
    , encodeDeleteCampaignOffersResponse
    , encodeDeleteGoodsFeedbackCommentRequest
    , encodeDeleteHiddenOffersRequest
    , encodeDeleteOffersDTO
    , encodeDeleteOffersFromArchiveDTO
    , encodeDeleteOffersFromArchiveRequest
    , encodeDeleteOffersFromArchiveResponse
    , encodeDeleteOffersRequest
    , encodeDeleteOffersResponse
    , encodeDeletePromoOffersRequest
    , encodeDeletePromoOffersResponse
    , encodeDeletePromoOffersResultDTO
    , encodeDeliveryServiceDTO
    , encodeDeliveryServiceInfoDTO
    , encodeDeliveryServicesDTO
    , encodeDocumentDTO
    , encodeEacVerificationResultDTO
    , encodeEacVerificationStatusType
    , encodeEmptyApiResponse
    , encodeEnrichedMappingsOfferDTO
    , encodeEnrichedModelDTO
    , encodeEnrichedModelsDTO
    , encodeEnrichedOrderBoxLayoutDTO
    , encodeExtensionShipmentDTO
    , encodeFeedContentDTO
    , encodeFeedContentErrorDTO
    , encodeFeedContentErrorType
    , encodeFeedDTO
    , encodeFeedDownloadDTO
    , encodeFeedDownloadErrorDTO
    , encodeFeedDownloadErrorType
    , encodeFeedIndexLogsErrorDTO
    , encodeFeedIndexLogsErrorType
    , encodeFeedIndexLogsFeedDTO
    , encodeFeedIndexLogsIndexType
    , encodeFeedIndexLogsOffersDTO
    , encodeFeedIndexLogsRecordDTO
    , encodeFeedIndexLogsResultDTO
    , encodeFeedIndexLogsStatusType
    , encodeFeedParameterDTO
    , encodeFeedParameterName
    , encodeFeedPlacementDTO
    , encodeFeedPublicationDTO
    , encodeFeedPublicationFullDTO
    , encodeFeedPublicationPriceAndStockUpdateDTO
    , encodeFeedStatusType
    , encodeFeedbackAuthorDTO
    , encodeFeedbackCommentAuthorDTO
    , encodeFeedbackCommentAuthorType
    , encodeFeedbackCommentDTO
    , encodeFeedbackDTO
    , encodeFeedbackDeliveryType
    , encodeFeedbackFactorDTO
    , encodeFeedbackGradesDTO
    , encodeFeedbackListDTO
    , encodeFeedbackOrderDTO
    , encodeFeedbackReactionStatusType
    , encodeFeedbackShopDTO
    , encodeFeedbackStateType
    , encodeFieldStateType
    , encodeFlippingPagerDTO
    , encodeForwardScrollingPagerDTO
    , encodeFulfillmentWarehouseDTO
    , encodeFulfillmentWarehousesDTO
    , encodeFullOutletDTO
    , encodeFullOutletLicenseDTO
    , encodeGenerateBoostConsolidatedRequest
    , encodeGenerateCompetitorsPositionReportRequest
    , encodeGenerateGoodsFeedbackRequest
    , encodeGenerateGoodsMovementReportRequest
    , encodeGenerateGoodsRealizationReportRequest
    , encodeGenerateGoodsTurnoverRequest
    , encodeGenerateMassOrderLabelsRequest
    , encodeGeneratePricesReportRequest
    , encodeGenerateReportDTO
    , encodeGenerateReportResponse
    , encodeGenerateShelfsStatisticsRequest
    , encodeGenerateShipmentListDocumentReportRequest
    , encodeGenerateShowsSalesReportRequest
    , encodeGenerateStocksOnWarehousesReportRequest
    , encodeGenerateUnitedMarketplaceServicesReportRequest
    , encodeGenerateUnitedNettingReportRequest
    , encodeGenerateUnitedOrdersRequest
    , encodeGetAllOffersResponse
    , encodeGetBidsInfoRequest
    , encodeGetBidsInfoResponse
    , encodeGetBidsInfoResponseDTO
    , encodeGetBidsRecommendationsRequest
    , encodeGetBidsRecommendationsResponse
    , encodeGetBidsRecommendationsResponseDTO
    , encodeGetBusinessBuyerInfoResponse
    , encodeGetBusinessDocumentsInfoResponse
    , encodeGetBusinessSettingsInfoDTO
    , encodeGetBusinessSettingsResponse
    , encodeGetCampaignLoginsResponse
    , encodeGetCampaignOfferDTO
    , encodeGetCampaignOffersRequest
    , encodeGetCampaignOffersResponse
    , encodeGetCampaignOffersResultDTO
    , encodeGetCampaignRegionResponse
    , encodeGetCampaignResponse
    , encodeGetCampaignSettingsResponse
    , encodeGetCampaignsResponse
    , encodeGetCategoriesMaxSaleQuantumDTO
    , encodeGetCategoriesMaxSaleQuantumRequest
    , encodeGetCategoriesMaxSaleQuantumResponse
    , encodeGetCategoriesRequest
    , encodeGetCategoriesResponse
    , encodeGetCategoryContentParametersResponse
    , encodeGetChatHistoryRequest
    , encodeGetChatHistoryResponse
    , encodeGetChatInfoDTO
    , encodeGetChatsInfoDTO
    , encodeGetChatsRequest
    , encodeGetChatsResponse
    , encodeGetDeliveryServicesResponse
    , encodeGetFeedIndexLogsResponse
    , encodeGetFeedResponse
    , encodeGetFeedbackListResponse
    , encodeGetFeedsResponse
    , encodeGetFulfillmentWarehousesResponse
    , encodeGetGoodsFeedbackCommentsRequest
    , encodeGetGoodsFeedbackCommentsResponse
    , encodeGetGoodsFeedbackRequest
    , encodeGetGoodsFeedbackResponse
    , encodeGetGoodsStatsRequest
    , encodeGetGoodsStatsResponse
    , encodeGetHiddenOffersResponse
    , encodeGetHiddenOffersResultDTO
    , encodeGetMappingDTO
    , encodeGetModelsOffersResponse
    , encodeGetModelsRequest
    , encodeGetModelsResponse
    , encodeGetOfferCardsContentStatusRequest
    , encodeGetOfferCardsContentStatusResponse
    , encodeGetOfferDTO
    , encodeGetOfferMappingDTO
    , encodeGetOfferMappingEntriesResponse
    , encodeGetOfferMappingsRequest
    , encodeGetOfferMappingsResponse
    , encodeGetOfferMappingsResultDTO
    , encodeGetOfferRecommendationsRequest
    , encodeGetOfferRecommendationsResponse
    , encodeGetOffersResponse
    , encodeGetOrderBuyerInfoResponse
    , encodeGetOrderLabelsDataResponse
    , encodeGetOrderResponse
    , encodeGetOrdersResponse
    , encodeGetOrdersStatsRequest
    , encodeGetOrdersStatsResponse
    , encodeGetOutletLicensesResponse
    , encodeGetOutletResponse
    , encodeGetOutletsResponse
    , encodeGetPriceDTO
    , encodeGetPriceWithDiscountDTO
    , encodeGetPriceWithVatDTO
    , encodeGetPricesByOfferIdsRequest
    , encodeGetPricesByOfferIdsResponse
    , encodeGetPricesResponse
    , encodeGetPromoAssortmentInfoDTO
    , encodeGetPromoBestsellerInfoDTO
    , encodeGetPromoConstraintsDTO
    , encodeGetPromoDTO
    , encodeGetPromoMechanicsInfoDTO
    , encodeGetPromoOfferDTO
    , encodeGetPromoOffersRequest
    , encodeGetPromoOffersResponse
    , encodeGetPromoOffersResultDTO
    , encodeGetPromoPromocodeInfoDTO
    , encodeGetPromosRequest
    , encodeGetPromosResponse
    , encodeGetPromosResultDTO
    , encodeGetQualityRatingDetailsResponse
    , encodeGetQualityRatingRequest
    , encodeGetQualityRatingResponse
    , encodeGetQuarantineOffersRequest
    , encodeGetQuarantineOffersResponse
    , encodeGetQuarantineOffersResultDTO
    , encodeGetRegionWithChildrenResponse
    , encodeGetRegionsResponse
    , encodeGetReportInfoResponse
    , encodeGetReturnResponse
    , encodeGetReturnsResponse
    , encodeGetShipmentOrdersInfoResponse
    , encodeGetShipmentResponse
    , encodeGetSuggestedOfferMappingEntriesRequest
    , encodeGetSuggestedOfferMappingEntriesResponse
    , encodeGetSuggestedOfferMappingsRequest
    , encodeGetSuggestedOfferMappingsResponse
    , encodeGetSuggestedOfferMappingsResultDTO
    , encodeGetWarehouseStocksDTO
    , encodeGetWarehouseStocksRequest
    , encodeGetWarehouseStocksResponse
    , encodeGetWarehousesResponse
    , encodeGoodsFeedbackCommentAuthorDTO
    , encodeGoodsFeedbackCommentAuthorType
    , encodeGoodsFeedbackCommentDTO
    , encodeGoodsFeedbackCommentId
    , encodeGoodsFeedbackCommentListDTO
    , encodeGoodsFeedbackCommentStatusType
    , encodeGoodsFeedbackCommentText
    , encodeGoodsFeedbackDTO
    , encodeGoodsFeedbackDescriptionDTO
    , encodeGoodsFeedbackId
    , encodeGoodsFeedbackIdentifiersDTO
    , encodeGoodsFeedbackListDTO
    , encodeGoodsFeedbackMediaDTO
    , encodeGoodsFeedbackStatisticsDTO
    , encodeGoodsStatsDTO
    , encodeGoodsStatsGoodsDTO
    , encodeGoodsStatsWarehouseDTO
    , encodeGoodsStatsWeightDimensionsDTO
    , encodeGpsDTO
    , encodeHiddenOfferDTO
    , encodeLanguageType
    , encodeLicenseCheckStatusType
    , encodeLicenseType
    , encodeLogisticPickupPointDTO
    , encodeLogisticPointType
    , encodeMappingsOfferDTO
    , encodeMappingsOfferInfoDTO
    , encodeMarketSku
    , encodeMaxSaleQuantumDTO
    , encodeMechanicsType
    , encodeModelDTO
    , encodeModelOfferDTO
    , encodeModelPriceDTO
    , encodeModelsDTO
    , encodeOfferAvailabilityStatusType
    , encodeOfferCampaignStatusDTO
    , encodeOfferCampaignStatusType
    , encodeOfferCardDTO
    , encodeOfferCardRecommendationDTO
    , encodeOfferCardRecommendationType
    , encodeOfferCardStatusType
    , encodeOfferCardsContentStatusDTO
    , encodeOfferCategory
    , encodeOfferConditionDTO
    , encodeOfferConditionQualityType
    , encodeOfferConditionType
    , encodeOfferContentDTO
    , encodeOfferContentErrorDTO
    , encodeOfferContentErrorType
    , encodeOfferDTO
    , encodeOfferDescription
    , encodeOfferErrorDTO
    , encodeOfferForRecommendationDTO
    , encodeOfferManualDTO
    , encodeOfferMappingDTO
    , encodeOfferMappingEntriesDTO
    , encodeOfferMappingEntryDTO
    , encodeOfferMappingErrorDTO
    , encodeOfferMappingErrorType
    , encodeOfferMappingInfoDTO
    , encodeOfferMappingKindType
    , encodeOfferMappingSuggestionsListDTO
    , encodeOfferName
    , encodeOfferParamDTO
    , encodeOfferPriceByOfferIdsListResponseDTO
    , encodeOfferPriceByOfferIdsResponseDTO
    , encodeOfferPriceDTO
    , encodeOfferPriceListResponseDTO
    , encodeOfferPriceResponseDTO
    , encodeOfferProcessingNoteDTO
    , encodeOfferProcessingNoteType
    , encodeOfferProcessingStateDTO
    , encodeOfferProcessingStatusType
    , encodeOfferRecommendationDTO
    , encodeOfferRecommendationInfoDTO
    , encodeOfferRecommendationsResultDTO
    , encodeOfferSellingProgramDTO
    , encodeOfferSellingProgramStatusType
    , encodeOfferType
    , encodeOfferVendor
    , encodeOfferVendorCode
    , encodeOfferWeightDimensionsDTO
    , encodeOffersDTO
    , encodeOptionValuesLimitedDTO
    , encodeOrderBoxLayoutDTO
    , encodeOrderBoxLayoutItemDTO
    , encodeOrderBoxLayoutPartialCountDTO
    , encodeOrderBoxesLayoutDTO
    , encodeOrderBusinessBuyerDTO
    , encodeOrderBusinessDocumentsDTO
    , encodeOrderBuyerBasicInfoDTO
    , encodeOrderBuyerDTO
    , encodeOrderBuyerInfoDTO
    , encodeOrderBuyerType
    , encodeOrderCancellationReasonType
    , encodeOrderCourierDTO
    , encodeOrderDTO
    , encodeOrderDeliveryAddressDTO
    , encodeOrderDeliveryDTO
    , encodeOrderDeliveryDateDTO
    , encodeOrderDeliveryDateReasonType
    , encodeOrderDeliveryDatesDTO
    , encodeOrderDeliveryDispatchType
    , encodeOrderDeliveryEacType
    , encodeOrderDeliveryPartnerType
    , encodeOrderDeliveryType
    , encodeOrderDigitalItemDTO
    , encodeOrderDocumentStatusType
    , encodeOrderItemDTO
    , encodeOrderItemDetailDTO
    , encodeOrderItemInstanceDTO
    , encodeOrderItemInstanceModificationDTO
    , encodeOrderItemInstanceType
    , encodeOrderItemModificationDTO
    , encodeOrderItemPromoDTO
    , encodeOrderItemStatusType
    , encodeOrderItemSubsidyDTO
    , encodeOrderItemSubsidyType
    , encodeOrderItemsModificationRequestReasonType
    , encodeOrderItemsModificationResultDTO
    , encodeOrderLabelDTO
    , encodeOrderLiftType
    , encodeOrderParcelBoxDTO
    , encodeOrderPaymentMethodType
    , encodeOrderPaymentType
    , encodeOrderPromoType
    , encodeOrderShipmentDTO
    , encodeOrderStateDTO
    , encodeOrderStatsStatusType
    , encodeOrderStatusChangeDTO
    , encodeOrderStatusChangeDeliveryDTO
    , encodeOrderStatusChangeDeliveryDatesDTO
    , encodeOrderStatusType
    , encodeOrderSubsidyDTO
    , encodeOrderSubsidyType
    , encodeOrderSubstatusType
    , encodeOrderTaxSystemType
    , encodeOrderTrackDTO
    , encodeOrderUpdateStatusType
    , encodeOrderVatType
    , encodeOrdersShipmentInfoDTO
    , encodeOrdersStatsCommissionDTO
    , encodeOrdersStatsCommissionType
    , encodeOrdersStatsDTO
    , encodeOrdersStatsDeliveryRegionDTO
    , encodeOrdersStatsDetailsDTO
    , encodeOrdersStatsItemDTO
    , encodeOrdersStatsItemStatusType
    , encodeOrdersStatsOrderDTO
    , encodeOrdersStatsOrderPaymentType
    , encodeOrdersStatsPaymentDTO
    , encodeOrdersStatsPaymentOrderDTO
    , encodeOrdersStatsPaymentSourceType
    , encodeOrdersStatsPaymentType
    , encodeOrdersStatsPriceDTO
    , encodeOrdersStatsPriceType
    , encodeOrdersStatsStockType
    , encodeOrdersStatsWarehouseDTO
    , encodeOutletAddressDTO
    , encodeOutletDTO
    , encodeOutletDeliveryRuleDTO
    , encodeOutletLicenseDTO
    , encodeOutletLicensesResponseDTO
    , encodeOutletResponseDTO
    , encodeOutletStatusType
    , encodeOutletType
    , encodeOutletVisibilityType
    , encodeOutletWorkingScheduleDTO
    , encodeOutletWorkingScheduleItemDTO
    , encodePageFormatType
    , encodePagedReturnsDTO
    , encodePalletsCountDTO
    , encodeParameterType
    , encodeParameterValueConstraintsDTO
    , encodeParameterValueDTO
    , encodeParameterValueOptionDTO
    , encodeParcelBoxDTO
    , encodeParcelBoxLabelDTO
    , encodeParcelDTO
    , encodePartnerMarketCategoryId
    , encodePartnerShipmentWarehouseDTO
    , encodePaymentFrequencyType
    , encodePickupAddressDTO
    , encodePlacementType
    , encodePriceCompetitivenessThresholdsDTO
    , encodePriceCompetitivenessType
    , encodePriceDTO
    , encodePriceQuarantineVerdictDTO
    , encodePriceQuarantineVerdictParamNameType
    , encodePriceQuarantineVerdictParameterDTO
    , encodePriceQuarantineVerdictType
    , encodePriceRecommendationItemDTO
    , encodePriceSuggestDTO
    , encodePriceSuggestOfferDTO
    , encodePriceSuggestType
    , encodePromoOfferAutoParticipatingDetailsDTO
    , encodePromoOfferDiscountParamsDTO
    , encodePromoOfferParamsDTO
    , encodePromoOfferParticipationStatusFilterType
    , encodePromoOfferParticipationStatusType
    , encodePromoOfferPromocodeParamsDTO
    , encodePromoOfferUpdateWarningCodeType
    , encodePromoOfferUpdateWarningDTO
    , encodePromoParticipationType
    , encodePromoPeriodDTO
    , encodeProvideOrderDigitalCodesRequest
    , encodeProvideOrderItemIdentifiersRequest
    , encodeProvideOrderItemIdentifiersResponse
    , encodePutSkuBidsRequest
    , encodeQualityRatingAffectedOrderDTO
    , encodeQualityRatingComponentDTO
    , encodeQualityRatingComponentType
    , encodeQualityRatingDTO
    , encodeQualityRatingDetailsDTO
    , encodeQuantumDTO
    , encodeQuarantineOfferDTO
    , encodeRecipientType
    , encodeRefundStatusType
    , encodeRegionDTO
    , encodeRegionType
    , encodeRegionalModelInfoDTO
    , encodeRejectedPromoOfferDeleteDTO
    , encodeRejectedPromoOfferDeleteReasonType
    , encodeRejectedPromoOfferUpdateDTO
    , encodeRejectedPromoOfferUpdateReasonType
    , encodeReportFormatType
    , encodeReportInfoDTO
    , encodeReportStatusType
    , encodeReportSubStatusType
    , encodeReturnDTO
    , encodeReturnDecisionDTO
    , encodeReturnDecisionReasonType
    , encodeReturnDecisionSubreasonType
    , encodeReturnDecisionType
    , encodeReturnInstanceDTO
    , encodeReturnInstanceStatusType
    , encodeReturnInstanceStockType
    , encodeReturnItemDTO
    , encodeReturnRequestDecisionType
    , encodeReturnShipmentStatusType
    , encodeReturnType
    , encodeScrollingPagerDTO
    , encodeSearchModelsResponse
    , encodeSearchShipmentsRequest
    , encodeSearchShipmentsResponse
    , encodeSearchShipmentsResponseDTO
    , encodeSellingProgramType
    , encodeSendMessageToChatRequest
    , encodeSetFeedParamsRequest
    , encodeSetOrderBoxLayoutRequest
    , encodeSetOrderBoxLayoutResponse
    , encodeSetOrderDeliveryDateRequest
    , encodeSetOrderDeliveryTrackCodeRequest
    , encodeSetOrderShipmentBoxesRequest
    , encodeSetOrderShipmentBoxesResponse
    , encodeSetReturnDecisionRequest
    , encodeSetShipmentPalletsCountRequest
    , encodeShelfsStatisticsAttributionType
    , encodeShipmentActionType
    , encodeShipmentBoxesDTO
    , encodeShipmentDTO
    , encodeShipmentInfoDTO
    , encodeShipmentPalletLabelPageFormatType
    , encodeShipmentStatusChangeDTO
    , encodeShipmentStatusType
    , encodeShipmentType
    , encodeShopSku
    , encodeShowsSalesGroupingType
    , encodeSkipGoodsFeedbackReactionRequest
    , encodeSkuBidItemDTO
    , encodeSkuBidRecommendationItemDTO
    , encodeSortOrderType
    , encodeSuggestOfferPriceDTO
    , encodeSuggestPricesRequest
    , encodeSuggestPricesResponse
    , encodeSuggestPricesResultDTO
    , encodeSuggestedOfferDTO
    , encodeSuggestedOfferMappingDTO
    , encodeTariffDTO
    , encodeTariffParameterDTO
    , encodeTariffType
    , encodeTimePeriodDTO
    , encodeTimeUnitType
    , encodeTrackDTO
    , encodeTransferOrdersFromShipmentRequest
    , encodeTurnoverDTO
    , encodeTurnoverType
    , encodeUnitDTO
    , encodeUpdateBusinessOfferPriceDTO
    , encodeUpdateBusinessPricesRequest
    , encodeUpdateCampaignOfferDTO
    , encodeUpdateCampaignOffersRequest
    , encodeUpdateGoodsFeedbackCommentDTO
    , encodeUpdateGoodsFeedbackCommentRequest
    , encodeUpdateGoodsFeedbackCommentResponse
    , encodeUpdateMappingDTO
    , encodeUpdateMappingsOfferDTO
    , encodeUpdateOfferContentRequest
    , encodeUpdateOfferContentResponse
    , encodeUpdateOfferContentResultDTO
    , encodeUpdateOfferDTO
    , encodeUpdateOfferMappingDTO
    , encodeUpdateOfferMappingEntryDTO
    , encodeUpdateOfferMappingEntryRequest
    , encodeUpdateOfferMappingResultDTO
    , encodeUpdateOfferMappingsRequest
    , encodeUpdateOfferMappingsResponse
    , encodeUpdateOrderItemRequest
    , encodeUpdateOrderStatusDTO
    , encodeUpdateOrderStatusRequest
    , encodeUpdateOrderStatusResponse
    , encodeUpdateOrderStatusesDTO
    , encodeUpdateOrderStatusesRequest
    , encodeUpdateOrderStatusesResponse
    , encodeUpdateOrderStorageLimitRequest
    , encodeUpdateOutletLicenseRequest
    , encodeUpdatePriceWithDiscountDTO
    , encodeUpdatePricesRequest
    , encodeUpdatePromoOfferDTO
    , encodeUpdatePromoOfferDiscountParamsDTO
    , encodeUpdatePromoOfferParamsDTO
    , encodeUpdatePromoOffersRequest
    , encodeUpdatePromoOffersResponse
    , encodeUpdatePromoOffersResultDTO
    , encodeUpdateStockDTO
    , encodeUpdateStockItemDTO
    , encodeUpdateStocksRequest
    , encodeUpdateTimeDTO
    , encodeValueRestrictionDTO
    , encodeVerifyOrderEacRequest
    , encodeVerifyOrderEacResponse
    , encodeWarehouseAddressDTO
    , encodeWarehouseDTO
    , encodeWarehouseGroupDTO
    , encodeWarehouseOfferDTO
    , encodeWarehouseOffersDTO
    , encodeWarehouseStockDTO
    , encodeWarehouseStockType
    , encodeWarehousesDTO
    , encodeWarningPromoOfferUpdateDTO
    , stringFromAddOffersToArchiveErrorType
    , stringFromAffectedOrderQualityRatingComponentType
    , stringFromAgeUnitType
    , stringFromApiResponseStatusType
    , stringFromCalculatedTariffType
    , stringFromCampaignSettingsScheduleSourceType
    , stringFromCategoryErrorType
    , stringFromChatMessageSenderType
    , stringFromChatStatusType
    , stringFromChatType
    , stringFromCurrencyType
    , stringFromDayOfWeekType
    , stringFromEacVerificationStatusType
    , stringFromFeedContentErrorType
    , stringFromFeedDownloadErrorType
    , stringFromFeedIndexLogsErrorType
    , stringFromFeedIndexLogsIndexType
    , stringFromFeedIndexLogsStatusType
    , stringFromFeedStatusType
    , stringFromFeedbackCommentAuthorType
    , stringFromFeedbackDeliveryType
    , stringFromFeedbackReactionStatusType
    , stringFromFeedbackStateType
    , stringFromFieldStateType
    , stringFromGoodsFeedbackCommentAuthorType
    , stringFromGoodsFeedbackCommentStatusType
    , stringFromLanguageType
    , stringFromLicenseCheckStatusType
    , stringFromLicenseType
    , stringFromLogisticPointType
    , stringFromMechanicsType
    , stringFromOfferAvailabilityStatusType
    , stringFromOfferCampaignStatusType
    , stringFromOfferCardRecommendationType
    , stringFromOfferCardStatusType
    , stringFromOfferConditionQualityType
    , stringFromOfferConditionType
    , stringFromOfferContentErrorType
    , stringFromOfferMappingErrorType
    , stringFromOfferMappingKindType
    , stringFromOfferProcessingNoteType
    , stringFromOfferProcessingStatusType
    , stringFromOfferSellingProgramStatusType
    , stringFromOfferType
    , stringFromOrderBuyerType
    , stringFromOrderCancellationReasonType
    , stringFromOrderDeliveryDateReasonType
    , stringFromOrderDeliveryDispatchType
    , stringFromOrderDeliveryEacType
    , stringFromOrderDeliveryPartnerType
    , stringFromOrderDeliveryType
    , stringFromOrderDocumentStatusType
    , stringFromOrderItemInstanceType
    , stringFromOrderItemStatusType
    , stringFromOrderItemSubsidyType
    , stringFromOrderItemsModificationRequestReasonType
    , stringFromOrderLiftType
    , stringFromOrderPaymentMethodType
    , stringFromOrderPaymentType
    , stringFromOrderPromoType
    , stringFromOrderStatsStatusType
    , stringFromOrderStatusType
    , stringFromOrderSubsidyType
    , stringFromOrderSubstatusType
    , stringFromOrderTaxSystemType
    , stringFromOrderUpdateStatusType
    , stringFromOrderVatType
    , stringFromOrdersStatsCommissionType
    , stringFromOrdersStatsItemStatusType
    , stringFromOrdersStatsOrderPaymentType
    , stringFromOrdersStatsPaymentSourceType
    , stringFromOrdersStatsPaymentType
    , stringFromOrdersStatsPriceType
    , stringFromOrdersStatsStockType
    , stringFromOutletStatusType
    , stringFromOutletType
    , stringFromOutletVisibilityType
    , stringFromPageFormatType
    , stringFromParameterType
    , stringFromPaymentFrequencyType
    , stringFromPlacementType
    , stringFromPriceCompetitivenessType
    , stringFromPriceQuarantineVerdictParamNameType
    , stringFromPriceQuarantineVerdictType
    , stringFromPriceSuggestType
    , stringFromPromoOfferParticipationStatusFilterType
    , stringFromPromoOfferParticipationStatusType
    , stringFromPromoOfferUpdateWarningCodeType
    , stringFromPromoParticipationType
    , stringFromQualityRatingComponentType
    , stringFromRecipientType
    , stringFromRefundStatusType
    , stringFromRegionType
    , stringFromRejectedPromoOfferDeleteReasonType
    , stringFromRejectedPromoOfferUpdateReasonType
    , stringFromReportFormatType
    , stringFromReportStatusType
    , stringFromReportSubStatusType
    , stringFromReturnDecisionReasonType
    , stringFromReturnDecisionSubreasonType
    , stringFromReturnDecisionType
    , stringFromReturnInstanceStatusType
    , stringFromReturnInstanceStockType
    , stringFromReturnRequestDecisionType
    , stringFromReturnShipmentStatusType
    , stringFromReturnType
    , stringFromSellingProgramType
    , stringFromShelfsStatisticsAttributionType
    , stringFromShipmentActionType
    , stringFromShipmentPalletLabelPageFormatType
    , stringFromShipmentStatusType
    , stringFromShipmentType
    , stringFromShowsSalesGroupingType
    , stringFromSortOrderType
    , stringFromTariffType
    , stringFromTimeUnitType
    , stringFromTurnoverType
    , stringFromWarehouseStockType
    , acceptOrderCancellationRequestDecoder
    , addHiddenOffersRequestDecoder
    , addOffersToArchiveDTODecoder
    , addOffersToArchiveErrorDTODecoder
    , addOffersToArchiveErrorTypeDecoder
    , addOffersToArchiveRequestDecoder
    , addOffersToArchiveResponseDecoder
    , affectedOrderQualityRatingComponentTypeDecoder
    , ageDTODecoder
    , ageUnitTypeDecoder
    , apiClientDataErrorResponseDecoder
    , apiErrorDTODecoder
    , apiErrorResponseDecoder
    , apiForbiddenErrorResponseDecoder
    , apiLimitErrorResponseDecoder
    , apiLockedErrorResponseDecoder
    , apiNotFoundErrorResponseDecoder
    , apiResponseDecoder
    , apiResponseStatusTypeDecoder
    , apiServerErrorResponseDecoder
    , apiUnauthorizedErrorResponseDecoder
    , baseCampaignOfferDTODecoder
    , baseOfferDTODecoder
    , basePriceDTODecoder
    , baseShipmentDTODecoder
    , bidDecoder
    , bidRecommendationItemDTODecoder
    , briefOrderItemDTODecoder
    , briefOrderItemInstanceDTODecoder
    , businessDTODecoder
    , businessSettingsDTODecoder
    , calculateTariffsOfferDTODecoder
    , calculateTariffsOfferInfoDTODecoder
    , calculateTariffsParametersDTODecoder
    , calculateTariffsRequestDecoder
    , calculateTariffsResponseDecoder
    , calculateTariffsResponseDTODecoder
    , calculatedTariffDTODecoder
    , calculatedTariffTypeDecoder
    , campaignDTODecoder
    , campaignQualityRatingDTODecoder
    , campaignSettingsDTODecoder
    , campaignSettingsDeliveryDTODecoder
    , campaignSettingsLocalRegionDTODecoder
    , campaignSettingsScheduleDTODecoder
    , campaignSettingsScheduleSourceTypeDecoder
    , campaignSettingsTimePeriodDTODecoder
    , campaignsQualityRatingDTODecoder
    , categoryContentParametersDTODecoder
    , categoryDTODecoder
    , categoryErrorDTODecoder
    , categoryErrorTypeDecoder
    , categoryIdDecoder
    , categoryParameterDTODecoder
    , categoryParameterUnitDTODecoder
    , changeOutletRequestDecoder
    , channelTypeDecoder
    , chatMessageDTODecoder
    , chatMessagePayloadDTODecoder
    , chatMessageSenderTypeDecoder
    , chatMessagesResultDTODecoder
    , chatStatusTypeDecoder
    , chatTypeDecoder
    , cisDecoder
    , confirmPricesRequestDecoder
    , confirmShipmentRequestDecoder
    , createChatRequestDecoder
    , createChatResponseDecoder
    , createChatResultDTODecoder
    , createOutletResponseDecoder
    , currencyTypeDecoder
    , dateDdMmYyyyDecoder
    , dateDdMmYyyyHhMmSsDecoder
    , dayOfWeekTypeDecoder
    , deleteCampaignOffersDTODecoder
    , deleteCampaignOffersRequestDecoder
    , deleteCampaignOffersResponseDecoder
    , deleteGoodsFeedbackCommentRequestDecoder
    , deleteHiddenOffersRequestDecoder
    , deleteOffersDTODecoder
    , deleteOffersFromArchiveDTODecoder
    , deleteOffersFromArchiveRequestDecoder
    , deleteOffersFromArchiveResponseDecoder
    , deleteOffersRequestDecoder
    , deleteOffersResponseDecoder
    , deletePromoOffersRequestDecoder
    , deletePromoOffersResponseDecoder
    , deletePromoOffersResultDTODecoder
    , deliveryServiceDTODecoder
    , deliveryServiceInfoDTODecoder
    , deliveryServicesDTODecoder
    , documentDTODecoder
    , eacVerificationResultDTODecoder
    , eacVerificationStatusTypeDecoder
    , emptyApiResponseDecoder
    , enrichedMappingsOfferDTODecoder
    , enrichedModelDTODecoder
    , enrichedModelsDTODecoder
    , enrichedOrderBoxLayoutDTODecoder
    , extensionShipmentDTODecoder
    , feedContentDTODecoder
    , feedContentErrorDTODecoder
    , feedContentErrorTypeDecoder
    , feedDTODecoder
    , feedDownloadDTODecoder
    , feedDownloadErrorDTODecoder
    , feedDownloadErrorTypeDecoder
    , feedIndexLogsErrorDTODecoder
    , feedIndexLogsErrorTypeDecoder
    , feedIndexLogsFeedDTODecoder
    , feedIndexLogsIndexTypeDecoder
    , feedIndexLogsOffersDTODecoder
    , feedIndexLogsRecordDTODecoder
    , feedIndexLogsResultDTODecoder
    , feedIndexLogsStatusTypeDecoder
    , feedParameterDTODecoder
    , feedParameterNameDecoder
    , feedPlacementDTODecoder
    , feedPublicationDTODecoder
    , feedPublicationFullDTODecoder
    , feedPublicationPriceAndStockUpdateDTODecoder
    , feedStatusTypeDecoder
    , feedbackAuthorDTODecoder
    , feedbackCommentAuthorDTODecoder
    , feedbackCommentAuthorTypeDecoder
    , feedbackCommentDTODecoder
    , feedbackDTODecoder
    , feedbackDeliveryTypeDecoder
    , feedbackFactorDTODecoder
    , feedbackGradesDTODecoder
    , feedbackListDTODecoder
    , feedbackOrderDTODecoder
    , feedbackReactionStatusTypeDecoder
    , feedbackShopDTODecoder
    , feedbackStateTypeDecoder
    , fieldStateTypeDecoder
    , flippingPagerDTODecoder
    , forwardScrollingPagerDTODecoder
    , fulfillmentWarehouseDTODecoder
    , fulfillmentWarehousesDTODecoder
    , fullOutletDTODecoder
    , fullOutletLicenseDTODecoder
    , generateBoostConsolidatedRequestDecoder
    , generateCompetitorsPositionReportRequestDecoder
    , generateGoodsFeedbackRequestDecoder
    , generateGoodsMovementReportRequestDecoder
    , generateGoodsRealizationReportRequestDecoder
    , generateGoodsTurnoverRequestDecoder
    , generateMassOrderLabelsRequestDecoder
    , generatePricesReportRequestDecoder
    , generateReportDTODecoder
    , generateReportResponseDecoder
    , generateShelfsStatisticsRequestDecoder
    , generateShipmentListDocumentReportRequestDecoder
    , generateShowsSalesReportRequestDecoder
    , generateStocksOnWarehousesReportRequestDecoder
    , generateUnitedMarketplaceServicesReportRequestDecoder
    , generateUnitedNettingReportRequestDecoder
    , generateUnitedOrdersRequestDecoder
    , getAllOffersResponseDecoder
    , getBidsInfoRequestDecoder
    , getBidsInfoResponseDecoder
    , getBidsInfoResponseDTODecoder
    , getBidsRecommendationsRequestDecoder
    , getBidsRecommendationsResponseDecoder
    , getBidsRecommendationsResponseDTODecoder
    , getBusinessBuyerInfoResponseDecoder
    , getBusinessDocumentsInfoResponseDecoder
    , getBusinessSettingsInfoDTODecoder
    , getBusinessSettingsResponseDecoder
    , getCampaignLoginsResponseDecoder
    , getCampaignOfferDTODecoder
    , getCampaignOffersRequestDecoder
    , getCampaignOffersResponseDecoder
    , getCampaignOffersResultDTODecoder
    , getCampaignRegionResponseDecoder
    , getCampaignResponseDecoder
    , getCampaignSettingsResponseDecoder
    , getCampaignsResponseDecoder
    , getCategoriesMaxSaleQuantumDTODecoder
    , getCategoriesMaxSaleQuantumRequestDecoder
    , getCategoriesMaxSaleQuantumResponseDecoder
    , getCategoriesRequestDecoder
    , getCategoriesResponseDecoder
    , getCategoryContentParametersResponseDecoder
    , getChatHistoryRequestDecoder
    , getChatHistoryResponseDecoder
    , getChatInfoDTODecoder
    , getChatsInfoDTODecoder
    , getChatsRequestDecoder
    , getChatsResponseDecoder
    , getDeliveryServicesResponseDecoder
    , getFeedIndexLogsResponseDecoder
    , getFeedResponseDecoder
    , getFeedbackListResponseDecoder
    , getFeedsResponseDecoder
    , getFulfillmentWarehousesResponseDecoder
    , getGoodsFeedbackCommentsRequestDecoder
    , getGoodsFeedbackCommentsResponseDecoder
    , getGoodsFeedbackRequestDecoder
    , getGoodsFeedbackResponseDecoder
    , getGoodsStatsRequestDecoder
    , getGoodsStatsResponseDecoder
    , getHiddenOffersResponseDecoder
    , getHiddenOffersResultDTODecoder
    , getMappingDTODecoder
    , getModelsOffersResponseDecoder
    , getModelsRequestDecoder
    , getModelsResponseDecoder
    , getOfferCardsContentStatusRequestDecoder
    , getOfferCardsContentStatusResponseDecoder
    , getOfferDTODecoder
    , getOfferMappingDTODecoder
    , getOfferMappingEntriesResponseDecoder
    , getOfferMappingsRequestDecoder
    , getOfferMappingsResponseDecoder
    , getOfferMappingsResultDTODecoder
    , getOfferRecommendationsRequestDecoder
    , getOfferRecommendationsResponseDecoder
    , getOffersResponseDecoder
    , getOrderBuyerInfoResponseDecoder
    , getOrderLabelsDataResponseDecoder
    , getOrderResponseDecoder
    , getOrdersResponseDecoder
    , getOrdersStatsRequestDecoder
    , getOrdersStatsResponseDecoder
    , getOutletLicensesResponseDecoder
    , getOutletResponseDecoder
    , getOutletsResponseDecoder
    , getPriceDTODecoder
    , getPriceWithDiscountDTODecoder
    , getPriceWithVatDTODecoder
    , getPricesByOfferIdsRequestDecoder
    , getPricesByOfferIdsResponseDecoder
    , getPricesResponseDecoder
    , getPromoAssortmentInfoDTODecoder
    , getPromoBestsellerInfoDTODecoder
    , getPromoConstraintsDTODecoder
    , getPromoDTODecoder
    , getPromoMechanicsInfoDTODecoder
    , getPromoOfferDTODecoder
    , getPromoOffersRequestDecoder
    , getPromoOffersResponseDecoder
    , getPromoOffersResultDTODecoder
    , getPromoPromocodeInfoDTODecoder
    , getPromosRequestDecoder
    , getPromosResponseDecoder
    , getPromosResultDTODecoder
    , getQualityRatingDetailsResponseDecoder
    , getQualityRatingRequestDecoder
    , getQualityRatingResponseDecoder
    , getQuarantineOffersRequestDecoder
    , getQuarantineOffersResponseDecoder
    , getQuarantineOffersResultDTODecoder
    , getRegionWithChildrenResponseDecoder
    , getRegionsResponseDecoder
    , getReportInfoResponseDecoder
    , getReturnResponseDecoder
    , getReturnsResponseDecoder
    , getShipmentOrdersInfoResponseDecoder
    , getShipmentResponseDecoder
    , getSuggestedOfferMappingEntriesRequestDecoder
    , getSuggestedOfferMappingEntriesResponseDecoder
    , getSuggestedOfferMappingsRequestDecoder
    , getSuggestedOfferMappingsResponseDecoder
    , getSuggestedOfferMappingsResultDTODecoder
    , getWarehouseStocksDTODecoder
    , getWarehouseStocksRequestDecoder
    , getWarehouseStocksResponseDecoder
    , getWarehousesResponseDecoder
    , goodsFeedbackCommentAuthorDTODecoder
    , goodsFeedbackCommentAuthorTypeDecoder
    , goodsFeedbackCommentDTODecoder
    , goodsFeedbackCommentIdDecoder
    , goodsFeedbackCommentListDTODecoder
    , goodsFeedbackCommentStatusTypeDecoder
    , goodsFeedbackCommentTextDecoder
    , goodsFeedbackDTODecoder
    , goodsFeedbackDescriptionDTODecoder
    , goodsFeedbackIdDecoder
    , goodsFeedbackIdentifiersDTODecoder
    , goodsFeedbackListDTODecoder
    , goodsFeedbackMediaDTODecoder
    , goodsFeedbackStatisticsDTODecoder
    , goodsStatsDTODecoder
    , goodsStatsGoodsDTODecoder
    , goodsStatsWarehouseDTODecoder
    , goodsStatsWeightDimensionsDTODecoder
    , gpsDTODecoder
    , hiddenOfferDTODecoder
    , languageTypeDecoder
    , licenseCheckStatusTypeDecoder
    , licenseTypeDecoder
    , logisticPickupPointDTODecoder
    , logisticPointTypeDecoder
    , mappingsOfferDTODecoder
    , mappingsOfferInfoDTODecoder
    , marketSkuDecoder
    , maxSaleQuantumDTODecoder
    , mechanicsTypeDecoder
    , modelDTODecoder
    , modelOfferDTODecoder
    , modelPriceDTODecoder
    , modelsDTODecoder
    , offerAvailabilityStatusTypeDecoder
    , offerCampaignStatusDTODecoder
    , offerCampaignStatusTypeDecoder
    , offerCardDTODecoder
    , offerCardRecommendationDTODecoder
    , offerCardRecommendationTypeDecoder
    , offerCardStatusTypeDecoder
    , offerCardsContentStatusDTODecoder
    , offerCategoryDecoder
    , offerConditionDTODecoder
    , offerConditionQualityTypeDecoder
    , offerConditionTypeDecoder
    , offerContentDTODecoder
    , offerContentErrorDTODecoder
    , offerContentErrorTypeDecoder
    , offerDTODecoder
    , offerDescriptionDecoder
    , offerErrorDTODecoder
    , offerForRecommendationDTODecoder
    , offerManualDTODecoder
    , offerMappingDTODecoder
    , offerMappingEntriesDTODecoder
    , offerMappingEntryDTODecoder
    , offerMappingErrorDTODecoder
    , offerMappingErrorTypeDecoder
    , offerMappingInfoDTODecoder
    , offerMappingKindTypeDecoder
    , offerMappingSuggestionsListDTODecoder
    , offerNameDecoder
    , offerParamDTODecoder
    , offerPriceByOfferIdsListResponseDTODecoder
    , offerPriceByOfferIdsResponseDTODecoder
    , offerPriceDTODecoder
    , offerPriceListResponseDTODecoder
    , offerPriceResponseDTODecoder
    , offerProcessingNoteDTODecoder
    , offerProcessingNoteTypeDecoder
    , offerProcessingStateDTODecoder
    , offerProcessingStatusTypeDecoder
    , offerRecommendationDTODecoder
    , offerRecommendationInfoDTODecoder
    , offerRecommendationsResultDTODecoder
    , offerSellingProgramDTODecoder
    , offerSellingProgramStatusTypeDecoder
    , offerTypeDecoder
    , offerVendorDecoder
    , offerVendorCodeDecoder
    , offerWeightDimensionsDTODecoder
    , offersDTODecoder
    , optionValuesLimitedDTODecoder
    , orderBoxLayoutDTODecoder
    , orderBoxLayoutItemDTODecoder
    , orderBoxLayoutPartialCountDTODecoder
    , orderBoxesLayoutDTODecoder
    , orderBusinessBuyerDTODecoder
    , orderBusinessDocumentsDTODecoder
    , orderBuyerBasicInfoDTODecoder
    , orderBuyerDTODecoder
    , orderBuyerInfoDTODecoder
    , orderBuyerTypeDecoder
    , orderCancellationReasonTypeDecoder
    , orderCourierDTODecoder
    , orderDTODecoder
    , orderDeliveryAddressDTODecoder
    , orderDeliveryDTODecoder
    , orderDeliveryDateDTODecoder
    , orderDeliveryDateReasonTypeDecoder
    , orderDeliveryDatesDTODecoder
    , orderDeliveryDispatchTypeDecoder
    , orderDeliveryEacTypeDecoder
    , orderDeliveryPartnerTypeDecoder
    , orderDeliveryTypeDecoder
    , orderDigitalItemDTODecoder
    , orderDocumentStatusTypeDecoder
    , orderItemDTODecoder
    , orderItemDetailDTODecoder
    , orderItemInstanceDTODecoder
    , orderItemInstanceModificationDTODecoder
    , orderItemInstanceTypeDecoder
    , orderItemModificationDTODecoder
    , orderItemPromoDTODecoder
    , orderItemStatusTypeDecoder
    , orderItemSubsidyDTODecoder
    , orderItemSubsidyTypeDecoder
    , orderItemsModificationRequestReasonTypeDecoder
    , orderItemsModificationResultDTODecoder
    , orderLabelDTODecoder
    , orderLiftTypeDecoder
    , orderParcelBoxDTODecoder
    , orderPaymentMethodTypeDecoder
    , orderPaymentTypeDecoder
    , orderPromoTypeDecoder
    , orderShipmentDTODecoder
    , orderStateDTODecoder
    , orderStatsStatusTypeDecoder
    , orderStatusChangeDTODecoder
    , orderStatusChangeDeliveryDTODecoder
    , orderStatusChangeDeliveryDatesDTODecoder
    , orderStatusTypeDecoder
    , orderSubsidyDTODecoder
    , orderSubsidyTypeDecoder
    , orderSubstatusTypeDecoder
    , orderTaxSystemTypeDecoder
    , orderTrackDTODecoder
    , orderUpdateStatusTypeDecoder
    , orderVatTypeDecoder
    , ordersShipmentInfoDTODecoder
    , ordersStatsCommissionDTODecoder
    , ordersStatsCommissionTypeDecoder
    , ordersStatsDTODecoder
    , ordersStatsDeliveryRegionDTODecoder
    , ordersStatsDetailsDTODecoder
    , ordersStatsItemDTODecoder
    , ordersStatsItemStatusTypeDecoder
    , ordersStatsOrderDTODecoder
    , ordersStatsOrderPaymentTypeDecoder
    , ordersStatsPaymentDTODecoder
    , ordersStatsPaymentOrderDTODecoder
    , ordersStatsPaymentSourceTypeDecoder
    , ordersStatsPaymentTypeDecoder
    , ordersStatsPriceDTODecoder
    , ordersStatsPriceTypeDecoder
    , ordersStatsStockTypeDecoder
    , ordersStatsWarehouseDTODecoder
    , outletAddressDTODecoder
    , outletDTODecoder
    , outletDeliveryRuleDTODecoder
    , outletLicenseDTODecoder
    , outletLicensesResponseDTODecoder
    , outletResponseDTODecoder
    , outletStatusTypeDecoder
    , outletTypeDecoder
    , outletVisibilityTypeDecoder
    , outletWorkingScheduleDTODecoder
    , outletWorkingScheduleItemDTODecoder
    , pageFormatTypeDecoder
    , pagedReturnsDTODecoder
    , palletsCountDTODecoder
    , parameterTypeDecoder
    , parameterValueConstraintsDTODecoder
    , parameterValueDTODecoder
    , parameterValueOptionDTODecoder
    , parcelBoxDTODecoder
    , parcelBoxLabelDTODecoder
    , parcelDTODecoder
    , partnerMarketCategoryIdDecoder
    , partnerShipmentWarehouseDTODecoder
    , paymentFrequencyTypeDecoder
    , pickupAddressDTODecoder
    , placementTypeDecoder
    , priceCompetitivenessThresholdsDTODecoder
    , priceCompetitivenessTypeDecoder
    , priceDTODecoder
    , priceQuarantineVerdictDTODecoder
    , priceQuarantineVerdictParamNameTypeDecoder
    , priceQuarantineVerdictParameterDTODecoder
    , priceQuarantineVerdictTypeDecoder
    , priceRecommendationItemDTODecoder
    , priceSuggestDTODecoder
    , priceSuggestOfferDTODecoder
    , priceSuggestTypeDecoder
    , promoOfferAutoParticipatingDetailsDTODecoder
    , promoOfferDiscountParamsDTODecoder
    , promoOfferParamsDTODecoder
    , promoOfferParticipationStatusFilterTypeDecoder
    , promoOfferParticipationStatusTypeDecoder
    , promoOfferPromocodeParamsDTODecoder
    , promoOfferUpdateWarningCodeTypeDecoder
    , promoOfferUpdateWarningDTODecoder
    , promoParticipationTypeDecoder
    , promoPeriodDTODecoder
    , provideOrderDigitalCodesRequestDecoder
    , provideOrderItemIdentifiersRequestDecoder
    , provideOrderItemIdentifiersResponseDecoder
    , putSkuBidsRequestDecoder
    , qualityRatingAffectedOrderDTODecoder
    , qualityRatingComponentDTODecoder
    , qualityRatingComponentTypeDecoder
    , qualityRatingDTODecoder
    , qualityRatingDetailsDTODecoder
    , quantumDTODecoder
    , quarantineOfferDTODecoder
    , recipientTypeDecoder
    , refundStatusTypeDecoder
    , regionDTODecoder
    , regionTypeDecoder
    , regionalModelInfoDTODecoder
    , rejectedPromoOfferDeleteDTODecoder
    , rejectedPromoOfferDeleteReasonTypeDecoder
    , rejectedPromoOfferUpdateDTODecoder
    , rejectedPromoOfferUpdateReasonTypeDecoder
    , reportFormatTypeDecoder
    , reportInfoDTODecoder
    , reportStatusTypeDecoder
    , reportSubStatusTypeDecoder
    , returnDTODecoder
    , returnDecisionDTODecoder
    , returnDecisionReasonTypeDecoder
    , returnDecisionSubreasonTypeDecoder
    , returnDecisionTypeDecoder
    , returnInstanceDTODecoder
    , returnInstanceStatusTypeDecoder
    , returnInstanceStockTypeDecoder
    , returnItemDTODecoder
    , returnRequestDecisionTypeDecoder
    , returnShipmentStatusTypeDecoder
    , returnTypeDecoder
    , scrollingPagerDTODecoder
    , searchModelsResponseDecoder
    , searchShipmentsRequestDecoder
    , searchShipmentsResponseDecoder
    , searchShipmentsResponseDTODecoder
    , sellingProgramTypeDecoder
    , sendMessageToChatRequestDecoder
    , setFeedParamsRequestDecoder
    , setOrderBoxLayoutRequestDecoder
    , setOrderBoxLayoutResponseDecoder
    , setOrderDeliveryDateRequestDecoder
    , setOrderDeliveryTrackCodeRequestDecoder
    , setOrderShipmentBoxesRequestDecoder
    , setOrderShipmentBoxesResponseDecoder
    , setReturnDecisionRequestDecoder
    , setShipmentPalletsCountRequestDecoder
    , shelfsStatisticsAttributionTypeDecoder
    , shipmentActionTypeDecoder
    , shipmentBoxesDTODecoder
    , shipmentDTODecoder
    , shipmentInfoDTODecoder
    , shipmentPalletLabelPageFormatTypeDecoder
    , shipmentStatusChangeDTODecoder
    , shipmentStatusTypeDecoder
    , shipmentTypeDecoder
    , shopSkuDecoder
    , showsSalesGroupingTypeDecoder
    , skipGoodsFeedbackReactionRequestDecoder
    , skuBidItemDTODecoder
    , skuBidRecommendationItemDTODecoder
    , sortOrderTypeDecoder
    , suggestOfferPriceDTODecoder
    , suggestPricesRequestDecoder
    , suggestPricesResponseDecoder
    , suggestPricesResultDTODecoder
    , suggestedOfferDTODecoder
    , suggestedOfferMappingDTODecoder
    , tariffDTODecoder
    , tariffParameterDTODecoder
    , tariffTypeDecoder
    , timePeriodDTODecoder
    , timeUnitTypeDecoder
    , trackDTODecoder
    , transferOrdersFromShipmentRequestDecoder
    , turnoverDTODecoder
    , turnoverTypeDecoder
    , unitDTODecoder
    , updateBusinessOfferPriceDTODecoder
    , updateBusinessPricesRequestDecoder
    , updateCampaignOfferDTODecoder
    , updateCampaignOffersRequestDecoder
    , updateGoodsFeedbackCommentDTODecoder
    , updateGoodsFeedbackCommentRequestDecoder
    , updateGoodsFeedbackCommentResponseDecoder
    , updateMappingDTODecoder
    , updateMappingsOfferDTODecoder
    , updateOfferContentRequestDecoder
    , updateOfferContentResponseDecoder
    , updateOfferContentResultDTODecoder
    , updateOfferDTODecoder
    , updateOfferMappingDTODecoder
    , updateOfferMappingEntryDTODecoder
    , updateOfferMappingEntryRequestDecoder
    , updateOfferMappingResultDTODecoder
    , updateOfferMappingsRequestDecoder
    , updateOfferMappingsResponseDecoder
    , updateOrderItemRequestDecoder
    , updateOrderStatusDTODecoder
    , updateOrderStatusRequestDecoder
    , updateOrderStatusResponseDecoder
    , updateOrderStatusesDTODecoder
    , updateOrderStatusesRequestDecoder
    , updateOrderStatusesResponseDecoder
    , updateOrderStorageLimitRequestDecoder
    , updateOutletLicenseRequestDecoder
    , updatePriceWithDiscountDTODecoder
    , updatePricesRequestDecoder
    , updatePromoOfferDTODecoder
    , updatePromoOfferDiscountParamsDTODecoder
    , updatePromoOfferParamsDTODecoder
    , updatePromoOffersRequestDecoder
    , updatePromoOffersResponseDecoder
    , updatePromoOffersResultDTODecoder
    , updateStockDTODecoder
    , updateStockItemDTODecoder
    , updateStocksRequestDecoder
    , updateTimeDTODecoder
    , valueRestrictionDTODecoder
    , verifyOrderEacRequestDecoder
    , verifyOrderEacResponseDecoder
    , warehouseAddressDTODecoder
    , warehouseDTODecoder
    , warehouseGroupDTODecoder
    , warehouseOfferDTODecoder
    , warehouseOffersDTODecoder
    , warehouseStockDTODecoder
    , warehouseStockTypeDecoder
    , warehousesDTODecoder
    , warningPromoOfferUpdateDTODecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias AcceptOrderCancellationRequest =
    { accepted : Bool
    , reason : Maybe OrderCancellationReasonType
    }


{-| Запрос на скрытие оферов.
-}
type alias AddHiddenOffersRequest =
    { hiddenOffers : List HiddenOfferDTO
    }


{-| Товары, которые не удалось поместить в архив.
-}
type alias AddOffersToArchiveDTO =
    { notArchivedOffers : Maybe ( List AddOffersToArchiveErrorDTO )
    }


{-| Товар, который не удалось поместить в архив.
-}
type alias AddOffersToArchiveErrorDTO =
    { offerId : String
    , error : AddOffersToArchiveErrorType
    }


{-| Причина, по которой товар не удалось поместить в архив:  * `OFFER_HAS_STOCKS` — товар хранится на складе Маркета. 
-}
type AddOffersToArchiveErrorType
    = AddOffersToArchiveErrorTypeOFFERHASSTOCKS
    | AddOffersToArchiveErrorTypeUNKNOWN


addOffersToArchiveErrorTypeVariants : List AddOffersToArchiveErrorType
addOffersToArchiveErrorTypeVariants =
    [ AddOffersToArchiveErrorTypeOFFERHASSTOCKS
    , AddOffersToArchiveErrorTypeUNKNOWN
    ]


{-| Товары, которые нужно поместить в архив. 
-}
type alias AddOffersToArchiveRequest =
    { offerIds : List String
    }


{-| Результат архивации товаров.
-}
type alias AddOffersToArchiveResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe AddOffersToArchiveDTO
    }


{-| Составляющие индекса качества.  **Для модели DBS:** * `DBS_CANCELLATION_RATE` — доля отмененных товаров. * `DBS_LATE_DELIVERY_RATE` — доля заказов, доставленных после плановой даты.  **Для моделей FBS и Экспресс:** * `FBS_CANCELLATION_RATE` — доля отмененных товаров. * `FBS_LATE_SHIP_RATE` — доля не вовремя отгруженных заказов. 
-}
type AffectedOrderQualityRatingComponentType
    = AffectedOrderQualityRatingComponentTypeDBSCANCELLATIONRATE
    | AffectedOrderQualityRatingComponentTypeDBSLATEDELIVERYRATE
    | AffectedOrderQualityRatingComponentTypeFBSCANCELLATIONRATE
    | AffectedOrderQualityRatingComponentTypeFBSLATESHIPRATE


affectedOrderQualityRatingComponentTypeVariants : List AffectedOrderQualityRatingComponentType
affectedOrderQualityRatingComponentTypeVariants =
    [ AffectedOrderQualityRatingComponentTypeDBSCANCELLATIONRATE
    , AffectedOrderQualityRatingComponentTypeDBSLATEDELIVERYRATE
    , AffectedOrderQualityRatingComponentTypeFBSCANCELLATIONRATE
    , AffectedOrderQualityRatingComponentTypeFBSLATESHIPRATE
    ]


{-| Возраст в заданных единицах измерения.
-}
type alias AgeDTO =
    { value : Float
    , ageUnit : AgeUnitType
    }


{-| Единицы измерения возраста:  * `YEAR` — год. * `MONTH` — месяц. 
-}
type AgeUnitType
    = AgeUnitTypeYEAR
    | AgeUnitTypeMONTH


ageUnitTypeVariants : List AgeUnitType
ageUnitTypeVariants =
    [ AgeUnitTypeYEAR
    , AgeUnitTypeMONTH
    ]


{-| Ошибка в данных переданных от клиента.
-}
type alias ApiClientDataErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Общий формат ошибки.
-}
type alias ApiErrorDTO =
    { code : String
    , message : Maybe String
    }


{-| Стандартная обертка для ошибок сервера.
-}
type alias ApiErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Неверны авторизационные данные, указанные в запросе, или запрещен доступ к запрашиваемому ресурсу.
-}
type alias ApiForbiddenErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Превышено ограничение на доступ к ресурсу.
-}
type alias ApiLimitErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Ресурс из запроса заблокирован от применения к нему указанного метода.
-}
type alias ApiLockedErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Запрашиваемый ресурс не найден.
-}
type alias ApiNotFoundErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Стандартная обертка для ответов сервера.
-}
type alias ApiResponse =
    { status : Maybe ApiResponseStatusType
    }


{-| Тип ответа.
-}
type ApiResponseStatusType
    = ApiResponseStatusTypeOK
    | ApiResponseStatusTypeERROR


apiResponseStatusTypeVariants : List ApiResponseStatusType
apiResponseStatusTypeVariants =
    [ ApiResponseStatusTypeOK
    , ApiResponseStatusTypeERROR
    ]


{-| Внутренняя ошибка сервера.
-}
type alias ApiServerErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| В запросе не указаны авторизационные данные.
-}
type alias ApiUnauthorizedErrorResponse =
    { status : Maybe ApiResponseStatusType
    , errors : Maybe ( List ApiErrorDTO )
    }


{-| Информация о новой цене на товар.
-}
type alias BaseCampaignOfferDTO =
    { offerId : String
    , quantum : Maybe QuantumDTO
    , available : Maybe Bool
    }


{-| Основные параметры товара.
-}
type alias BaseOfferDTO =
    { offerId : String
    , name : Maybe String
    , marketCategoryId : Maybe Int
    , category : Maybe String
    , pictures : Maybe ( List String )
    , videos : Maybe ( List String )
    , manuals : Maybe ( List OfferManualDTO )
    , vendor : Maybe String
    , barcodes : Maybe ( List String )
    , description : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , vendorCode : Maybe String
    , tags : Maybe ( List String )
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , customsCommodityCode : Maybe String
    , certificates : Maybe ( List String )
    , boxCount : Maybe Int
    , condition : Maybe OfferConditionDTO
    , type_ : Maybe OfferType
    , downloadable : Maybe Bool
    , adult : Maybe Bool
    , age : Maybe AgeDTO
    , params : Maybe ( List OfferParamDTO )
    }


{-| Цена на товар.
-}
type alias BasePriceDTO =
    { value : Float
    , currencyId : CurrencyType
    }


{-| Информация об отгрузке.
-}
type alias BaseShipmentDTO =
    { id : Maybe Int
    , planIntervalFrom : Maybe Posix
    , planIntervalTo : Maybe Posix
    , shipmentType : Maybe ShipmentType
    , warehouse : Maybe PartnerShipmentWarehouseDTO
    , warehouseTo : Maybe PartnerShipmentWarehouseDTO
    , externalId : Maybe String
    , deliveryService : Maybe DeliveryServiceDTO
    , palletsCount : Maybe PalletsCountDTO
    , orderIds : List Int
    , draftCount : Maybe Int
    , plannedCount : Maybe Int
    , factCount : Maybe Int
    }


{-| Значение ставки.
-}
type alias Bid =
    { }


{-| Рекомендованная ставка и возможная доля показов.
-}
type alias BidRecommendationItemDTO =
    { bid : Int
    , showPercent : Int
    }


{-| Информация о маркированном товаре.
-}
type alias BriefOrderItemDTO =
    { id : Maybe Int
    , vat : Maybe OrderVatType
    , count : Maybe Int
    , price : Maybe Float
    , offerName : Maybe String
    , offerId : Maybe String
    , instances : Maybe ( List OrderItemInstanceDTO )
    }


{-| Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 
-}
type alias BriefOrderItemInstanceDTO =
    { cis : Maybe String
    , uin : Maybe String
    , rnpt : Maybe String
    , gtd : Maybe String
    }


{-| Информация о кабинете.
-}
type alias BusinessDTO =
    { id : Maybe Int
    , name : Maybe String
    }


{-| Настройки кабинета.
-}
type alias BusinessSettingsDTO =
    { onlyDefaultPrice : Maybe Bool
    , currency : Maybe CurrencyType
    }


{-| Параметры товара, для которого нужно рассчитать стоимость услуг.
-}
type alias CalculateTariffsOfferDTO =
    { categoryId : Int
    , price : Float
    , length : Float
    , width : Float
    , height : Float
    , weight : Float
    , quantity : Maybe Int
    }


{-| Стоимость услуг.
-}
type alias CalculateTariffsOfferInfoDTO =
    { offer : CalculateTariffsOfferDTO
    , tariffs : List CalculatedTariffDTO
    }


{-| Параметры для расчета стоимости услуг.
-}
type alias CalculateTariffsParametersDTO =
    { campaignId : Maybe Int
    , sellingProgram : Maybe SellingProgramType
    , frequency : Maybe PaymentFrequencyType
    }


type alias CalculateTariffsRequest =
    { parameters : CalculateTariffsParametersDTO
    , offers : List CalculateTariffsOfferDTO
    }


type alias CalculateTariffsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe CalculateTariffsResponseDTO
    }


{-| Расчет стоимости услуг.
-}
type alias CalculateTariffsResponseDTO =
    { offers : List CalculateTariffsOfferInfoDTO
    }


{-| Информация об услугах Маркета.
-}
type alias CalculatedTariffDTO =
    { type_ : CalculatedTariffType
    , amount : Maybe Float
    , parameters : List TariffParameterDTO
    }


{-| Услуга Маркета:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
-}
type CalculatedTariffType
    = CalculatedTariffTypeAGENCYCOMMISSION
    | CalculatedTariffTypePAYMENTTRANSFER
    | CalculatedTariffTypeFEE
    | CalculatedTariffTypeDELIVERYTOCUSTOMER
    | CalculatedTariffTypeCROSSREGIONALDELIVERY
    | CalculatedTariffTypeEXPRESSDELIVERY
    | CalculatedTariffTypeSORTING
    | CalculatedTariffTypeMIDDLEMILE


calculatedTariffTypeVariants : List CalculatedTariffType
calculatedTariffTypeVariants =
    [ CalculatedTariffTypeAGENCYCOMMISSION
    , CalculatedTariffTypePAYMENTTRANSFER
    , CalculatedTariffTypeFEE
    , CalculatedTariffTypeDELIVERYTOCUSTOMER
    , CalculatedTariffTypeCROSSREGIONALDELIVERY
    , CalculatedTariffTypeEXPRESSDELIVERY
    , CalculatedTariffTypeSORTING
    , CalculatedTariffTypeMIDDLEMILE
    ]


{-| Информация о магазине.
-}
type alias CampaignDTO =
    { domain : Maybe String
    , id : Maybe Int
    , clientId : Maybe Int
    , business : Maybe BusinessDTO
    , placementType : Maybe PlacementType
    }


{-| Информация об индексе качества магазина.
-}
type alias CampaignQualityRatingDTO =
    { campaignId : Int
    , ratings : List QualityRatingDTO
    }


{-| Настройки магазина.
-}
type alias CampaignSettingsDTO =
    { countryRegion : Maybe Int
    , shopName : Maybe String
    , showInContext : Maybe Bool
    , showInPremium : Maybe Bool
    , useOpenStat : Maybe Bool
    , localRegion : Maybe CampaignSettingsLocalRegionDTO
    }


{-| Информация о доставке в своем регионе магазина.
-}
type alias CampaignSettingsDeliveryDTO =
    { schedule : Maybe CampaignSettingsScheduleDTO
    }


{-| Информация о своем регионе магазина.
-}
type alias CampaignSettingsLocalRegionDTO =
    { id : Maybe Int
    , name : Maybe String
    , type_ : Maybe RegionType
    , deliveryOptionsSource : Maybe CampaignSettingsScheduleSourceType
    , delivery : Maybe CampaignSettingsDeliveryDTO
    }


{-| Расписание работы службы доставки в своем регионе.
-}
type alias CampaignSettingsScheduleDTO =
    { availableOnHolidays : Maybe Bool
    , customHolidays : List String
    , customWorkingDays : List String
    , period : Maybe CampaignSettingsTimePeriodDTO
    , totalHolidays : List String
    , weeklyHolidays : List Int
    }


{-| Источник информации о расписании работы службы доставки. Возможные значения: * `WEB` — информация получена из настроек кабинета продавца на Маркете. * `YML` — информация получена из прайс-листа магазина. 
-}
type CampaignSettingsScheduleSourceType
    = CampaignSettingsScheduleSourceTypeWEB
    | CampaignSettingsScheduleSourceTypeYML


campaignSettingsScheduleSourceTypeVariants : List CampaignSettingsScheduleSourceType
campaignSettingsScheduleSourceTypeVariants =
    [ CampaignSettingsScheduleSourceTypeWEB
    , CampaignSettingsScheduleSourceTypeYML
    ]


{-| Период, за который рассчитывается итоговый список нерабочих дней службы доставки.
-}
type alias CampaignSettingsTimePeriodDTO =
    { fromDate : Maybe String
    , toDate : Maybe String
    }


{-| Информация об индексе качества магазинов.
-}
type alias CampaignsQualityRatingDTO =
    { campaignRatings : List CampaignQualityRatingDTO
    }


{-| Информация о параметрах категории.
-}
type alias CategoryContentParametersDTO =
    { categoryId : Int
    , parameters : Maybe ( List CategoryParameterDTO )
    }


{-| Информация о категории.  Категория считается листовой, если у нее нет дочерних категорий. 
-}
type alias CategoryDTO =
    { id : Int
    , name : String
    , children : CategoryDTOChildren
    }


type CategoryDTOChildren = CategoryDTOChildren (Maybe ( List CategoryDTO ))


unwrapCategoryDTOChildren : CategoryDTOChildren -> Maybe ( List CategoryDTO )
unwrapCategoryDTOChildren (CategoryDTOChildren children) = children


{-| Текст ошибки.
-}
type alias CategoryErrorDTO =
    { categoryId : Maybe Int
    , type_ : Maybe CategoryErrorType
    }


{-| Типы ошибок:  * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_IS_NOT_LEAF` — указана нелистовая категория. Укажите ту, которая не имеет дочерних категорий. 
-}
type CategoryErrorType
    = CategoryErrorTypeUNKNOWNCATEGORY
    | CategoryErrorTypeCATEGORYISNOTLEAF


categoryErrorTypeVariants : List CategoryErrorType
categoryErrorTypeVariants =
    [ CategoryErrorTypeUNKNOWNCATEGORY
    , CategoryErrorTypeCATEGORYISNOTLEAF
    ]


{-| Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
-}
type alias CategoryId =
    { }


{-| Характеристика товара.
-}
type alias CategoryParameterDTO =
    { id : Int
    , name : Maybe String
    , type_ : ParameterType
    , unit : Maybe CategoryParameterUnitDTO
    , description : Maybe String
    , recommendationTypes : Maybe ( List OfferCardRecommendationType )
    , required : Bool
    , filtering : Bool
    , distinctive : Bool
    , multivalue : Bool
    , allowCustomValues : Bool
    , values : Maybe ( List ParameterValueOptionDTO )
    , constraints : Maybe ParameterValueConstraintsDTO
    , valueRestrictions : Maybe ( List ValueRestrictionDTO )
    }


{-| Единицы измерения характеристики товара.
-}
type alias CategoryParameterUnitDTO =
    { defaultUnitId : Int
    , units : List UnitDTO
    }


type alias ChangeOutletRequest =
    { name : String
    , type_ : OutletType
    , coords : Maybe String
    , isMain : Maybe Bool
    , shopOutletCode : Maybe String
    , visibility : Maybe OutletVisibilityType
    , address : OutletAddressDTO
    , phones : List String
    , workingSchedule : OutletWorkingScheduleDTO
    , deliveryRules : Maybe ( List OutletDeliveryRuleDTO )
    , storagePeriod : Maybe Int
    }


{-| Каналы продвижения товаров:  * `PUSH` — пуш-уведомление из приложения Яндекс Маркет.  * `STRETCH_MAIN` — верхний баннер-растяжка на главной странице Яндекс Маркета.  * `MAIN_PAGE_CAROUSEL` — карусель акций на главной странице Яндекс Маркета.  * `PRODUCT_RETAIL_PAGE` — товар на странице ритейл-повода.  * `MAIN_PAGE_CAROUSEL_WEB` — карусель акций на главной странице веб версии Яндекс Маркета.  * `PRODUCT_SEPARATE_LANDING` — товар на лендинге акции.  * `SUPER_SHELF_CATEGORY` — полка в категориях.  * `CAROUSEL_RETAIL_PAGE` — карусель на лендинге ритейл-повода.  * `POPUP_APPLICATION` — всплывающее окно в приложении Яндекс Маркет.  * `POST_TELEGRAM` — пост в Телеграм-канале Яндекс Маркета.  * `CPA` — реклама в партнерской сети Яндекс Маркета.  * `WEB_PERFORMANCE_DIRECT` — реклама в Яндекс Директе.  * `APP_PERFORMANCE` — реклама в AppStore и Google Play.  * `BANNER_PICKUP_POINT` — баннер в ПВЗ Маркета.  * `BLOGGER_PERFORMANCE` — рекламная интеграция у блогеров.  * `DIGITAL_CHANNEL_BANNER` — баннер в digital-каналах и социальных сетях VK, Одноклассники.  * `YANDEX_ECOSYSTEM_CHANNELS` — реклама в других сервисах Яндекса: GO, Delivery, Еда.  * `PARTNERS_MAIN_BANNER` — баннер на главной странице mail.ru, auto.ru, ya.ru.  * `OTHER` — прочее. 
-}
type alias ChannelType =
    { }


{-| Информация о сообщениях.
-}
type alias ChatMessageDTO =
    { messageId : Int
    , createdAt : Posix
    , sender : ChatMessageSenderType
    , message : Maybe String
    , payload : Maybe ( List ChatMessagePayloadDTO )
    }


{-| Информация о приложенных к сообщению файлах.
-}
type alias ChatMessagePayloadDTO =
    { name : String
    , url : String
    , size : Int
    }


{-| Кто отправил сообщение:  * `PARTNER` — магазин. * `CUSTOMER` — покупатель. * `MARKET` — Маркет. * `SUPPORT` — сотрудник службы поддержки Маркета. 
-}
type ChatMessageSenderType
    = ChatMessageSenderTypePARTNER
    | ChatMessageSenderTypeCUSTOMER
    | ChatMessageSenderTypeMARKET
    | ChatMessageSenderTypeSUPPORT


chatMessageSenderTypeVariants : List ChatMessageSenderType
chatMessageSenderTypeVariants =
    [ ChatMessageSenderTypePARTNER
    , ChatMessageSenderTypeCUSTOMER
    , ChatMessageSenderTypeMARKET
    , ChatMessageSenderTypeSUPPORT
    ]


{-| Информация о сообщениях.
-}
type alias ChatMessagesResultDTO =
    { orderId : Int
    , messages : List ChatMessageDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен. 
-}
type ChatStatusType
    = ChatStatusTypeNEW
    | ChatStatusTypeWAITINGFORCUSTOMER
    | ChatStatusTypeWAITINGFORPARTNER
    | ChatStatusTypeWAITINGFORARBITER
    | ChatStatusTypeWAITINGFORMARKET
    | ChatStatusTypeFINISHED


chatStatusTypeVariants : List ChatStatusType
chatStatusTypeVariants =
    [ ChatStatusTypeNEW
    , ChatStatusTypeWAITINGFORCUSTOMER
    , ChatStatusTypeWAITINGFORPARTNER
    , ChatStatusTypeWAITINGFORARBITER
    , ChatStatusTypeWAITINGFORMARKET
    , ChatStatusTypeFINISHED
    ]


{-| Тип чата:  * `CHAT` — чат с покупателем. * `ARBITRAGE` — спор. 
-}
type ChatType
    = ChatTypeCHAT
    | ChatTypeARBITRAGE


chatTypeVariants : List ChatType
chatTypeVariants =
    [ ChatTypeCHAT
    , ChatTypeARBITRAGE
    ]


{-| Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\\u001d`!  ✅ `01030410947874432155Qbag!\\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\\\` и `\\\"`  {% endnote %} 
-}
type alias Cis =
    { }


{-| Запрос на подтверждение цены. 
-}
type alias ConfirmPricesRequest =
    { offerIds : List String
    }


{-| Запрос для подтверждения отгрузки.
-}
type alias ConfirmShipmentRequest =
    { externalShipmentId : Maybe String
    }


{-| Заказ, для которого нужно создать чат. 
-}
type alias CreateChatRequest =
    { orderId : Int
    }


{-| Результат создания чата.
-}
type alias CreateChatResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe CreateChatResultDTO
    }


{-| Информация о созданном чате.
-}
type alias CreateChatResultDTO =
    { chatId : Int
    }


{-| Ответ на запрос о создании точки продаж.
-}
type alias CreateOutletResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OutletResponseDTO
    }


{-| Коды валют. Возможные значения: * `BYR` — белорусский рубль. * `KZT` — казахстанский тенге. * `RUR` — российский рубль. * `UAH` — украинская гривна. 
-}
type CurrencyType
    = CurrencyTypeRUR
    | CurrencyTypeUSD
    | CurrencyTypeEUR
    | CurrencyTypeUAH
    | CurrencyTypeAUD
    | CurrencyTypeGBP
    | CurrencyTypeBYR
    | CurrencyTypeBYN
    | CurrencyTypeDKK
    | CurrencyTypeISK
    | CurrencyTypeKZT
    | CurrencyTypeCAD
    | CurrencyTypeCNY
    | CurrencyTypeNOK
    | CurrencyTypeXDR
    | CurrencyTypeSGD
    | CurrencyTypeTRY
    | CurrencyTypeSEK
    | CurrencyTypeCHF
    | CurrencyTypeJPY
    | CurrencyTypeAZN
    | CurrencyTypeALL
    | CurrencyTypeDZD
    | CurrencyTypeAOA
    | CurrencyTypeARS
    | CurrencyTypeAMD
    | CurrencyTypeAFN
    | CurrencyTypeBHD
    | CurrencyTypeBGN
    | CurrencyTypeBOB
    | CurrencyTypeBWP
    | CurrencyTypeBND
    | CurrencyTypeBRL
    | CurrencyTypeBIF
    | CurrencyTypeHUF
    | CurrencyTypeVEF
    | CurrencyTypeKPW
    | CurrencyTypeVND
    | CurrencyTypeGMD
    | CurrencyTypeGHS
    | CurrencyTypeGNF
    | CurrencyTypeHKD
    | CurrencyTypeGEL
    | CurrencyTypeAED
    | CurrencyTypeEGP
    | CurrencyTypeZMK
    | CurrencyTypeILS
    | CurrencyTypeINR
    | CurrencyTypeIDR
    | CurrencyTypeJOD
    | CurrencyTypeIQD
    | CurrencyTypeIRR
    | CurrencyTypeYER
    | CurrencyTypeQAR
    | CurrencyTypeKES
    | CurrencyTypeKGS
    | CurrencyTypeCOP
    | CurrencyTypeCDF
    | CurrencyTypeCRC
    | CurrencyTypeKWD
    | CurrencyTypeCUP
    | CurrencyTypeLAK
    | CurrencyTypeLVL
    | CurrencyTypeSLL
    | CurrencyTypeLBP
    | CurrencyTypeLYD
    | CurrencyTypeSZL
    | CurrencyTypeLTL
    | CurrencyTypeMUR
    | CurrencyTypeMRO
    | CurrencyTypeMKD
    | CurrencyTypeMWK
    | CurrencyTypeMGA
    | CurrencyTypeMYR
    | CurrencyTypeMAD
    | CurrencyTypeMXN
    | CurrencyTypeMZN
    | CurrencyTypeMDL
    | CurrencyTypeMNT
    | CurrencyTypeNPR
    | CurrencyTypeNGN
    | CurrencyTypeNIO
    | CurrencyTypeNZD
    | CurrencyTypeOMR
    | CurrencyTypePKR
    | CurrencyTypePYG
    | CurrencyTypePEN
    | CurrencyTypePLN
    | CurrencyTypeKHR
    | CurrencyTypeSAR
    | CurrencyTypeRON
    | CurrencyTypeSCR
    | CurrencyTypeSYP
    | CurrencyTypeSKK
    | CurrencyTypeSOS
    | CurrencyTypeSDG
    | CurrencyTypeSRD
    | CurrencyTypeTJS
    | CurrencyTypeTHB
    | CurrencyTypeTWD
    | CurrencyTypeBDT
    | CurrencyTypeTZS
    | CurrencyTypeTND
    | CurrencyTypeTMM
    | CurrencyTypeUGX
    | CurrencyTypeUZS
    | CurrencyTypeUYU
    | CurrencyTypePHP
    | CurrencyTypeDJF
    | CurrencyTypeXAF
    | CurrencyTypeXOF
    | CurrencyTypeHRK
    | CurrencyTypeCZK
    | CurrencyTypeCLP
    | CurrencyTypeLKR
    | CurrencyTypeEEK
    | CurrencyTypeETB
    | CurrencyTypeRSD
    | CurrencyTypeZAR
    | CurrencyTypeKRW
    | CurrencyTypeNAD
    | CurrencyTypeTL
    | CurrencyTypeUE


currencyTypeVariants : List CurrencyType
currencyTypeVariants =
    [ CurrencyTypeRUR
    , CurrencyTypeUSD
    , CurrencyTypeEUR
    , CurrencyTypeUAH
    , CurrencyTypeAUD
    , CurrencyTypeGBP
    , CurrencyTypeBYR
    , CurrencyTypeBYN
    , CurrencyTypeDKK
    , CurrencyTypeISK
    , CurrencyTypeKZT
    , CurrencyTypeCAD
    , CurrencyTypeCNY
    , CurrencyTypeNOK
    , CurrencyTypeXDR
    , CurrencyTypeSGD
    , CurrencyTypeTRY
    , CurrencyTypeSEK
    , CurrencyTypeCHF
    , CurrencyTypeJPY
    , CurrencyTypeAZN
    , CurrencyTypeALL
    , CurrencyTypeDZD
    , CurrencyTypeAOA
    , CurrencyTypeARS
    , CurrencyTypeAMD
    , CurrencyTypeAFN
    , CurrencyTypeBHD
    , CurrencyTypeBGN
    , CurrencyTypeBOB
    , CurrencyTypeBWP
    , CurrencyTypeBND
    , CurrencyTypeBRL
    , CurrencyTypeBIF
    , CurrencyTypeHUF
    , CurrencyTypeVEF
    , CurrencyTypeKPW
    , CurrencyTypeVND
    , CurrencyTypeGMD
    , CurrencyTypeGHS
    , CurrencyTypeGNF
    , CurrencyTypeHKD
    , CurrencyTypeGEL
    , CurrencyTypeAED
    , CurrencyTypeEGP
    , CurrencyTypeZMK
    , CurrencyTypeILS
    , CurrencyTypeINR
    , CurrencyTypeIDR
    , CurrencyTypeJOD
    , CurrencyTypeIQD
    , CurrencyTypeIRR
    , CurrencyTypeYER
    , CurrencyTypeQAR
    , CurrencyTypeKES
    , CurrencyTypeKGS
    , CurrencyTypeCOP
    , CurrencyTypeCDF
    , CurrencyTypeCRC
    , CurrencyTypeKWD
    , CurrencyTypeCUP
    , CurrencyTypeLAK
    , CurrencyTypeLVL
    , CurrencyTypeSLL
    , CurrencyTypeLBP
    , CurrencyTypeLYD
    , CurrencyTypeSZL
    , CurrencyTypeLTL
    , CurrencyTypeMUR
    , CurrencyTypeMRO
    , CurrencyTypeMKD
    , CurrencyTypeMWK
    , CurrencyTypeMGA
    , CurrencyTypeMYR
    , CurrencyTypeMAD
    , CurrencyTypeMXN
    , CurrencyTypeMZN
    , CurrencyTypeMDL
    , CurrencyTypeMNT
    , CurrencyTypeNPR
    , CurrencyTypeNGN
    , CurrencyTypeNIO
    , CurrencyTypeNZD
    , CurrencyTypeOMR
    , CurrencyTypePKR
    , CurrencyTypePYG
    , CurrencyTypePEN
    , CurrencyTypePLN
    , CurrencyTypeKHR
    , CurrencyTypeSAR
    , CurrencyTypeRON
    , CurrencyTypeSCR
    , CurrencyTypeSYP
    , CurrencyTypeSKK
    , CurrencyTypeSOS
    , CurrencyTypeSDG
    , CurrencyTypeSRD
    , CurrencyTypeTJS
    , CurrencyTypeTHB
    , CurrencyTypeTWD
    , CurrencyTypeBDT
    , CurrencyTypeTZS
    , CurrencyTypeTND
    , CurrencyTypeTMM
    , CurrencyTypeUGX
    , CurrencyTypeUZS
    , CurrencyTypeUYU
    , CurrencyTypePHP
    , CurrencyTypeDJF
    , CurrencyTypeXAF
    , CurrencyTypeXOF
    , CurrencyTypeHRK
    , CurrencyTypeCZK
    , CurrencyTypeCLP
    , CurrencyTypeLKR
    , CurrencyTypeEEK
    , CurrencyTypeETB
    , CurrencyTypeRSD
    , CurrencyTypeZAR
    , CurrencyTypeKRW
    , CurrencyTypeNAD
    , CurrencyTypeTL
    , CurrencyTypeUE
    ]


{-| Формат даты: `ДД-ММ-ГГГГ`. 
-}
type alias DateDdMmYyyy =
    { }


type alias DateDdMmYyyyHhMmSs =
    { }


{-| День недели:  * `MONDAY` — понедельник. * `TUESDAY` — вторник. * `WEDNESDAY` — среда. * `THURSDAY` — четверг. * `FRIDAY` — пятница. * `SATURDAY` — суббота. * `SUNDAY` — воскресенье. 
-}
type DayOfWeekType
    = DayOfWeekTypeMONDAY
    | DayOfWeekTypeTUESDAY
    | DayOfWeekTypeWEDNESDAY
    | DayOfWeekTypeTHURSDAY
    | DayOfWeekTypeFRIDAY
    | DayOfWeekTypeSATURDAY
    | DayOfWeekTypeSUNDAY


dayOfWeekTypeVariants : List DayOfWeekType
dayOfWeekTypeVariants =
    [ DayOfWeekTypeMONDAY
    , DayOfWeekTypeTUESDAY
    , DayOfWeekTypeWEDNESDAY
    , DayOfWeekTypeTHURSDAY
    , DayOfWeekTypeFRIDAY
    , DayOfWeekTypeSATURDAY
    , DayOfWeekTypeSUNDAY
    ]


{-| Список товаров, которые не удалось удалить, потому что они не найдены или хранятся на складе Маркета.
-}
type alias DeleteCampaignOffersDTO =
    { notDeletedOfferIds : Maybe ( List String )
    }


{-| Фильтрации удаляемых товаров по offerIds. 
-}
type alias DeleteCampaignOffersRequest =
    { offerIds : List String
    }


{-| Результат удаления товаров.
-}
type alias DeleteCampaignOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe DeleteCampaignOffersDTO
    }


{-| Фильтр запроса отзывов по бизнесу. 
-}
type alias DeleteGoodsFeedbackCommentRequest =
    { id : Int
    }


{-| Запрос на возобновление показа оферов.
-}
type alias DeleteHiddenOffersRequest =
    { hiddenOffers : List HiddenOfferDTO
    }


{-| Список товаров, которые не удалось удалить, потому что они хранятся на складе Маркета.
-}
type alias DeleteOffersDTO =
    { notDeletedOfferIds : Maybe ( List String )
    }


{-| Товары, которые не удалось восстановить из архива.
-}
type alias DeleteOffersFromArchiveDTO =
    { notUnarchivedOfferIds : Maybe ( List String )
    }


{-| Товары, которые нужно восстановить из архива. 
-}
type alias DeleteOffersFromArchiveRequest =
    { offerIds : List String
    }


{-| Результат разархивации товаров.
-}
type alias DeleteOffersFromArchiveResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe DeleteOffersFromArchiveDTO
    }


{-| Фильтрации удаляемых товаров по offerIds. 
-}
type alias DeleteOffersRequest =
    { offerIds : List String
    }


{-| Результат удаления товаров.
-}
type alias DeleteOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe DeleteOffersDTO
    }


{-| Удаление товаров из акции.  Чтобы убрать:  * все товары из акции и больше не участвовать в ней, передайте значение `true` в параметре `deleteAllOffers`;  * часть товаров, передайте их идентификаторы в параметре `offersIds`. 
-}
type alias DeletePromoOffersRequest =
    { promoId : String
    , deleteAllOffers : Maybe Bool
    , offerIds : Maybe ( List String )
    }


{-| Результат удаления товаров из акции.
-}
type alias DeletePromoOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe DeletePromoOffersResultDTO
    }


{-| Результат удаления товаров из акции.  Возвращается, только если в запросе был передан параметр `offerIds`. 
-}
type alias DeletePromoOffersResultDTO =
    { rejectedOffers : Maybe ( List RejectedPromoOfferDeleteDTO )
    }


{-| Служба доставки.
-}
type alias DeliveryServiceDTO =
    { id : Maybe Int
    , name : Maybe String
    }


{-| Информация о службе доставки.
-}
type alias DeliveryServiceInfoDTO =
    { id : Int
    , name : String
    }


{-| Информация о службах доставки.
-}
type alias DeliveryServicesDTO =
    { deliveryService : List DeliveryServiceInfoDTO
    }


{-| Информация о документе.
-}
type alias DocumentDTO =
    { status : Maybe OrderDocumentStatusType
    , number : Maybe String
    , date : Maybe Posix
    }


{-| Результат выполнения запроса.
-}
type alias EacVerificationResultDTO =
    { verificationResult : Maybe EacVerificationStatusType
    , attemptsLeft : Maybe Int
    }


{-| Статус проверки кода подтверждения:  * `ACCEPTED` — код верный. * `REJECTED` — код неверный. * `NEED_UPDATE` — Маркет отправит новый код. Значение возвращается, если превышено количество попыток отправки кода. 
-}
type EacVerificationStatusType
    = EacVerificationStatusTypeACCEPTED
    | EacVerificationStatusTypeREJECTED
    | EacVerificationStatusTypeNEEDUPDATE


eacVerificationStatusTypeVariants : List EacVerificationStatusType
eacVerificationStatusTypeVariants =
    [ EacVerificationStatusTypeACCEPTED
    , EacVerificationStatusTypeREJECTED
    , EacVerificationStatusTypeNEEDUPDATE
    ]


{-| Пустой ответ сервера.
-}
type alias EmptyApiResponse =
    { status : Maybe ApiResponseStatusType
    }


{-| Информация о рекомендованных карточках товаров.
-}
type alias EnrichedMappingsOfferDTO =
    { name : Maybe String
    , shopSku : Maybe String
    , category : Maybe String
    , vendor : Maybe String
    , vendorCode : Maybe String
    , description : Maybe String
    , id : Maybe String
    , feedId : Maybe Int
    , barcodes : Maybe ( List String )
    , urls : Maybe ( List String )
    , pictures : Maybe ( List String )
    , manufacturer : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , minShipment : Maybe Int
    , transportUnitSize : Maybe Int
    , quantumOfSupply : Maybe Int
    , deliveryDurationDays : Maybe Int
    , boxCount : Maybe Int
    , customsCommodityCodes : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , supplyScheduleDays : Maybe ( List DayOfWeekType )
    , shelfLifeDays : Maybe Int
    , lifeTimeDays : Maybe Int
    , guaranteePeriodDays : Maybe Int
    , processingState : Maybe OfferProcessingStateDTO
    , availability : Maybe OfferAvailabilityStatusType
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , certificate : Maybe String
    , price : Maybe Float
    , marketCategoryId : Maybe Int
    , marketCategoryName : Maybe String
    , marketModelId : Maybe Int
    , marketModelName : Maybe String
    , marketSku : Maybe Int
    , marketSkuName : Maybe String
    }


{-| Модель товара.
-}
type alias EnrichedModelDTO =
    { id : Maybe Int
    , name : Maybe String
    , prices : Maybe ModelPriceDTO
    , offers : Maybe ( List ModelOfferDTO )
    , offlineOffers : Maybe Int
    , onlineOffers : Maybe Int
    }


{-| Список моделей товаров.
-}
type alias EnrichedModelsDTO =
    { models : List EnrichedModelDTO
    }


{-| Информация о коробке.
-}
type alias EnrichedOrderBoxLayoutDTO =
    { items : List OrderBoxLayoutItemDTO
    , boxId : Maybe Int
    }


{-| Информация об отгрузке.
-}
type alias ExtensionShipmentDTO =
    { currentStatus : Maybe ShipmentStatusChangeDTO
    , availableActions : List ShipmentActionType
    }


{-| Информация о проверке содержимого прайс-листа, загруженного на Маркет.
-}
type alias FeedContentDTO =
    { rejectedOffersCount : Maybe Int
    , status : Maybe FeedStatusType
    , totalOffersCount : Maybe Int
    , error : Maybe FeedContentErrorDTO
    }


{-| Информация об ошибке в содержимом прайс-листа. Выводится, если параметр `content status=ERROR`. 
-}
type alias FeedContentErrorDTO =
    { type_ : Maybe FeedContentErrorType
    }


{-| Тип ошибки в содержимом прайс-листа.  Возможные значения:  * `PARSE_ERROR` — ошибка при проверке прайс-листа, не связанная с форматом YML. Например, прайс-лист пустой или его не удалось разархивировать. * `PARSE_XML_ERROR` — несоответствие техническим требованиям формата YML. Например, элементы и их значения описаны некорректно. * `TOO_MANY_REJECTED_OFFERS` — более чем в половине предложений из прайс-листа найдены ошибки. Все предложения из прайс-листа не будут опубликованы на Маркете. 
-}
type FeedContentErrorType
    = FeedContentErrorTypePARSEERROR
    | FeedContentErrorTypePARSEXMLERROR
    | FeedContentErrorTypeTOOMANYREJECTEDOFFERS


feedContentErrorTypeVariants : List FeedContentErrorType
feedContentErrorTypeVariants =
    [ FeedContentErrorTypePARSEERROR
    , FeedContentErrorTypePARSEXMLERROR
    , FeedContentErrorTypeTOOMANYREJECTEDOFFERS
    ]


{-| Информация о прайс-листе.
-}
type alias FeedDTO =
    { id : Maybe Int
    , login : Maybe String
    , name : Maybe String
    , password : Maybe String
    , uploadDate : Maybe Posix
    , url : Maybe String
    , content : Maybe FeedContentDTO
    , download : Maybe FeedDownloadDTO
    , placement : Maybe FeedPlacementDTO
    , publication : Maybe FeedPublicationDTO
    }


{-| Информация о последней загрузке прайс-листа.
-}
type alias FeedDownloadDTO =
    { status : Maybe FeedStatusType
    , error : Maybe FeedDownloadErrorDTO
    }


{-| Информация об ошибке при загрузке прайс-листа. Выводится, если параметр `download status=ERROR`. 
-}
type alias FeedDownloadErrorDTO =
    { httpStatusCode : Maybe Int
    , type_ : Maybe FeedDownloadErrorType
    , description : Maybe String
    }


{-| Тип ошибки загрузки прайс-листа.  Возможные значения:  * `DOWNLOAD_ERROR` — ошибка загрузки прайс-листа. Например, проблема с DNS-сервером или обрыв интернет-соединения.   Проблема описана в параметре `description`.  * `DOWNLOAD_HTTP_ERROR` — Яндекс Маркет передал запрос на получение прайс-листа и получил в ответ HTTP-код, отличный от 2xx.  HTTP-код выведен в параметре `httpStatusCode`. 
-}
type FeedDownloadErrorType
    = FeedDownloadErrorTypeERROR
    | FeedDownloadErrorTypeHTTPERROR


feedDownloadErrorTypeVariants : List FeedDownloadErrorType
feedDownloadErrorTypeVariants =
    [ FeedDownloadErrorTypeERROR
    , FeedDownloadErrorTypeHTTPERROR
    ]


{-| Информация об ошибке, произошедшей во время индексации прайс-листа.  Выводится, если во время индексации произошли ошибки (`index-log-record status=ERROR`). 
-}
type alias FeedIndexLogsErrorDTO =
    { httpStatusCode : Maybe Int
    , type_ : Maybe FeedIndexLogsErrorType
    , description : Maybe String
    }


{-| Тип ошибки индексации прайс-листа.  Возможные значения:  * `DOWNLOAD_ERROR` — ошибка загрузки прайс-листа. Например, проблема с DNS-сервером или обрыв интернет-соединения.    Проблема описана в параметре `description`.  * `DOWNLOAD_HTTP_ERROR` — Маркет передал запрос на получение прайс-листа и получил в ответ HTTP-код, отличный от 2xx.    HTTP-код выведен в параметре `httpStatusCode`.  * `PARSE_ERROR` — ошибка при проверке прайс-листа, не связанная с форматом YML. Например, прайс-лист пустой или его не удалось разархивировать.  * `PARSE_XML_ERROR` — несоответствие техническим требованиям формата YML. Например, элементы и их значения описаны некорректно.  * `TOO_MANY_REJECTED_OFFERS` — более чем в половине предложений из прайс-листа найдены ошибки. Все предложения из прайс-листа не будут опубликованы на Маркете. 
-}
type FeedIndexLogsErrorType
    = FeedIndexLogsErrorTypeDOWNLOADERROR
    | FeedIndexLogsErrorTypeDOWNLOADHTTPERROR
    | FeedIndexLogsErrorTypePARSEERROR
    | FeedIndexLogsErrorTypePARSEXMLERROR
    | FeedIndexLogsErrorTypeTOOMANYREJECTEDOFFERS
    | FeedIndexLogsErrorTypeNOTINDEXED


feedIndexLogsErrorTypeVariants : List FeedIndexLogsErrorType
feedIndexLogsErrorTypeVariants =
    [ FeedIndexLogsErrorTypeDOWNLOADERROR
    , FeedIndexLogsErrorTypeDOWNLOADHTTPERROR
    , FeedIndexLogsErrorTypePARSEERROR
    , FeedIndexLogsErrorTypePARSEXMLERROR
    , FeedIndexLogsErrorTypeTOOMANYREJECTEDOFFERS
    , FeedIndexLogsErrorTypeNOTINDEXED
    ]


{-| Информация о прайс-листе.
-}
type alias FeedIndexLogsFeedDTO =
    { id : Maybe Int
    }


{-| Тип обновления.  Возможные значения:  * `DIFF` — частичное обновление данных на Яндекс Маркете (например, обновление цен ранее опубликованных предложений и публикация новых). * `FAST_PRICE` — только обновление цен ранее опубликованных предложений. * `FULL` — полное обновление данных на Яндекс Маркете. 
-}
type FeedIndexLogsIndexType
    = FeedIndexLogsIndexTypeDIFF
    | FeedIndexLogsIndexTypeFASTPRICE
    | FeedIndexLogsIndexTypeFULL


feedIndexLogsIndexTypeVariants : List FeedIndexLogsIndexType
feedIndexLogsIndexTypeVariants =
    [ FeedIndexLogsIndexTypeDIFF
    , FeedIndexLogsIndexTypeFASTPRICE
    , FeedIndexLogsIndexTypeFULL
    ]


{-| Информация о предложениях прайс-листа.
-}
type alias FeedIndexLogsOffersDTO =
    { rejectedCount : Maybe Int
    , totalCount : Maybe Int
    }


{-| Список отчетов по индексации прайс-листа.
-}
type alias FeedIndexLogsRecordDTO =
    { downloadTime : Maybe Posix
    , fileTime : Maybe Posix
    , generationId : Maybe Int
    , indexType : Maybe FeedIndexLogsIndexType
    , publishedTime : Maybe Posix
    , status : Maybe FeedIndexLogsStatusType
    , error : Maybe FeedIndexLogsErrorDTO
    , offers : Maybe FeedIndexLogsOffersDTO
    }


{-| Результат выполнения запроса отчета по индексации прайс-листа.
-}
type alias FeedIndexLogsResultDTO =
    { feed : Maybe FeedIndexLogsFeedDTO
    , indexLogRecords : List FeedIndexLogsRecordDTO
    , total : Maybe Int
    }


{-| Статус индексации прайс-листа и проверки на соответствие техническим требованиям.  Возможные значения:  * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
-}
type FeedIndexLogsStatusType
    = FeedIndexLogsStatusTypeERROR
    | FeedIndexLogsStatusTypeOK
    | FeedIndexLogsStatusTypeWARNING


feedIndexLogsStatusTypeVariants : List FeedIndexLogsStatusType
feedIndexLogsStatusTypeVariants =
    [ FeedIndexLogsStatusTypeERROR
    , FeedIndexLogsStatusTypeOK
    , FeedIndexLogsStatusTypeWARNING
    ]


{-| Параметр прайс-листа.
-}
type alias FeedParameterDTO =
    { deleted : Maybe Bool
    , name : String
    , values : Maybe ( List Int )
    }


{-| Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр. 
-}
type alias FeedParameterName =
    { }


{-| Информация о размещении предложений из прайс-листа на Маркете на момент выполнения запроса.
-}
type alias FeedPlacementDTO =
    { status : Maybe FeedStatusType
    , totalOffersCount : Maybe Int
    }


{-| Информация о последней публикации предложений из прайс-листа на Маркете.
-}
type alias FeedPublicationDTO =
    { status : Maybe FeedStatusType
    , full : Maybe FeedPublicationFullDTO
    , priceAndStockUpdate : Maybe FeedPublicationPriceAndStockUpdateDTO
    }


{-| Информация о последней публикации предложений из прайс-листа на Маркете. 
-}
type alias FeedPublicationFullDTO =
    { fileTime : Maybe Posix
    , publishedTime : Maybe Posix
    }


{-| Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре `full`. Выводится, если параметр `publication status=OK`. 
-}
type alias FeedPublicationPriceAndStockUpdateDTO =
    { fileTime : Maybe Posix
    , publishedTime : Maybe Posix
    }


{-| Статус прайс-листа.  Возможные значения:    * `ERROR` — найдены ошибки.   * `NA` — прайс-лист не загружался более семи дней или на этапе загрузки произошла ошибка.   * `OK` — ошибок не найдено. 
-}
type FeedStatusType
    = FeedStatusTypeERROR
    | FeedStatusTypeNA
    | FeedStatusTypeOK


feedStatusTypeVariants : List FeedStatusType
feedStatusTypeVariants =
    [ FeedStatusTypeERROR
    , FeedStatusTypeNA
    , FeedStatusTypeOK
    ]


{-| Информация об авторе отзыва.  Если отзыв оставлен анонимно, параметр не возвращается. 
-}
type alias FeedbackAuthorDTO =
    { name : Maybe String
    , region : Maybe RegionDTO
    }


{-| Информация об авторе комментария.
-}
type alias FeedbackCommentAuthorDTO =
    { type_ : Maybe FeedbackCommentAuthorType
    , name : Maybe String
    }


{-| Тип автора:  * `USER` — пользователь. * `SHOP` — магазин. 
-}
type FeedbackCommentAuthorType
    = FeedbackCommentAuthorTypeUSER
    | FeedbackCommentAuthorTypeSHOP


feedbackCommentAuthorTypeVariants : List FeedbackCommentAuthorType
feedbackCommentAuthorTypeVariants =
    [ FeedbackCommentAuthorTypeUSER
    , FeedbackCommentAuthorTypeSHOP
    ]


{-| Комментарий к отзыву на магазин.
-}
type alias FeedbackCommentDTO =
    { id : Maybe Int
    , parentId : Maybe Int
    , body : Maybe String
    , createdAt : Maybe Posix
    , updatedAt : Maybe Posix
    , author : Maybe FeedbackCommentAuthorDTO
    , children : FeedbackCommentDTOChildren
    }


type FeedbackCommentDTOChildren = FeedbackCommentDTOChildren (Maybe ( List FeedbackCommentDTO ))


unwrapFeedbackCommentDTOChildren : FeedbackCommentDTOChildren -> Maybe ( List FeedbackCommentDTO )
unwrapFeedbackCommentDTOChildren (FeedbackCommentDTOChildren children) = children


{-| Отзыв пользователя Яндекс Маркета об указанном магазине.
-}
type alias FeedbackDTO =
    { id : Maybe Int
    , createdAt : Maybe Posix
    , text : Maybe String
    , state : Maybe FeedbackStateType
    , author : Maybe FeedbackAuthorDTO
    , pro : Maybe String
    , contra : Maybe String
    , comments : List FeedbackCommentDTO
    , shop : Maybe FeedbackShopDTO
    , resolved : Maybe Bool
    , verified : Maybe Bool
    , recommend : Maybe Bool
    , grades : Maybe FeedbackGradesDTO
    , order : Maybe FeedbackOrderDTO
    }


{-| Способ покупки, указанный в отзыве:  * `DELIVERY` — доставка. * `PICKUP` — самовывоз. * `INSTORE` — в магазине. 
-}
type FeedbackDeliveryType
    = FeedbackDeliveryTypeDELIVERY
    | FeedbackDeliveryTypePICKUP
    | FeedbackDeliveryTypeINSTORE


feedbackDeliveryTypeVariants : List FeedbackDeliveryType
feedbackDeliveryTypeVariants =
    [ FeedbackDeliveryTypeDELIVERY
    , FeedbackDeliveryTypePICKUP
    , FeedbackDeliveryTypeINSTORE
    ]


{-| Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
-}
type alias FeedbackFactorDTO =
    { id : Maybe Int
    , title : Maybe String
    , description : Maybe String
    , value : Maybe Int
    }


{-| Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
-}
type alias FeedbackGradesDTO =
    { average : Maybe Float
    , agreeCount : Maybe Int
    , rejectCount : Maybe Int
    , factors : List FeedbackFactorDTO
    }


{-| Отзывы пользователей Яндекс Маркета об указанном магазине.
-}
type alias FeedbackListDTO =
    { paging : Maybe ScrollingPagerDTO
    , feedbackList : List FeedbackDTO
    }


{-| Информация о заказе, указанная в отзыве.
-}
type alias FeedbackOrderDTO =
    { shopOrderId : Maybe String
    , delivery : Maybe FeedbackDeliveryType
    }


{-| Статус реакции на отзыв:  * `ALL` — все отзывы.  * `NEED_REACTION` — отзывы, на которые нужно ответить. 
-}
type FeedbackReactionStatusType
    = FeedbackReactionStatusTypeALL
    | FeedbackReactionStatusTypeNEEDREACTION


feedbackReactionStatusTypeVariants : List FeedbackReactionStatusType
feedbackReactionStatusTypeVariants =
    [ FeedbackReactionStatusTypeALL
    , FeedbackReactionStatusTypeNEEDREACTION
    ]


{-| Информация о магазине.
-}
type alias FeedbackShopDTO =
    { name : Maybe String
    }


{-| Статус отзыва:  * `LAST` — актуален. * `PREVIOUS` — устарел. * `DELETED` — удален. 
-}
type FeedbackStateType
    = FeedbackStateTypeLAST
    | FeedbackStateTypePREVIOUS
    | FeedbackStateTypeDELETED


feedbackStateTypeVariants : List FeedbackStateType
feedbackStateTypeVariants =
    [ FeedbackStateTypeLAST
    , FeedbackStateTypePREVIOUS
    , FeedbackStateTypeDELETED
    ]


{-| Фильтр по заполненности или незаполненности поля:  * `SPECIFIED` — вывести товары, у которых поле заполнено. * `EMPTY` — вывести товары, у которых поле не заполнено. 
-}
type FieldStateType
    = FieldStateTypeSPECIFIED
    | FieldStateTypeEMPTY


fieldStateTypeVariants : List FieldStateType
fieldStateTypeVariants =
    [ FieldStateTypeSPECIFIED
    , FieldStateTypeEMPTY
    ]


{-| Модель для пагинации.
-}
type alias FlippingPagerDTO =
    { total : Maybe Int
    , from : Maybe Int
    , to : Maybe Int
    , currentPage : Maybe Int
    , pagesCount : Maybe Int
    , pageSize : Maybe Int
    }


{-| Ссылка на следующую страницу. 
-}
type alias ForwardScrollingPagerDTO =
    { nextPageToken : Maybe String
    }


{-| Склад Маркета (FBY).
-}
type alias FulfillmentWarehouseDTO =
    { id : Int
    , name : String
    , address : Maybe WarehouseAddressDTO
    }


{-| Список складов Маркета (FBY).
-}
type alias FulfillmentWarehousesDTO =
    { warehouses : List FulfillmentWarehouseDTO
    }


{-| Информация о точке продаж.
-}
type alias FullOutletDTO =
    { name : String
    , type_ : OutletType
    , coords : Maybe String
    , isMain : Maybe Bool
    , shopOutletCode : Maybe String
    , visibility : Maybe OutletVisibilityType
    , address : OutletAddressDTO
    , phones : List String
    , workingSchedule : OutletWorkingScheduleDTO
    , deliveryRules : Maybe ( List OutletDeliveryRuleDTO )
    , storagePeriod : Maybe Int
    , id : Maybe Int
    , status : Maybe OutletStatusType
    , region : Maybe RegionDTO
    , shopOutletId : Maybe String
    , workingTime : Maybe String
    , moderationReason : Maybe String
    }


{-| Информация о лицензии.
-}
type alias FullOutletLicenseDTO =
    { id : Maybe Int
    , outletId : Maybe Int
    , licenseType : Maybe LicenseType
    , number : Maybe String
    , dateOfIssue : Maybe Posix
    , dateOfExpiry : Maybe Posix
    , checkStatus : Maybe LicenseCheckStatusType
    , checkComment : Maybe String
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateBoostConsolidatedRequest =
    { businessId : Int
    , dateFrom : Posix
    , dateTo : Posix
    }


{-| Данные, необходимые для генерации отчета.
-}
type alias GenerateCompetitorsPositionReportRequest =
    { businessId : Int
    , categoryId : Int
    , dateFrom : Posix
    , dateTo : Posix
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateGoodsFeedbackRequest =
    { businessId : Int
    }


{-| Данные, необходимые для генерации отчета.
-}
type alias GenerateGoodsMovementReportRequest =
    { campaignId : Int
    , dateFrom : Posix
    , dateTo : Posix
    , shopSku : Maybe String
    }


{-| Данные, необходимые для генерации отчета: идентификатор магазина и период, за который нужен отчет. 
-}
type alias GenerateGoodsRealizationReportRequest =
    { campaignId : Int
    , year : Int
    , month : Int
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateGoodsTurnoverRequest =
    { campaignId : Int
    , date : Maybe Posix
    }


{-| Данные, необходимые для генерации файла. 
-}
type alias GenerateMassOrderLabelsRequest =
    { businessId : Int
    , orderIds : List Int
    }


{-| Данные, необходимые для генерации отчета.
-}
type alias GeneratePricesReportRequest =
    { businessId : Maybe Int
    , campaignId : Maybe Int
    , categoryIds : Maybe ( List Int )
    , creationDateFrom : Maybe Posix
    , creationDateTo : Maybe Posix
    }


{-| Идентификатор, который понадобится для отслеживания статуса генерации и получения готового отчета.
-}
type alias GenerateReportDTO =
    { reportId : String
    , estimatedGenerationTime : Int
    }


{-| Ответ на запрос генерации отчета.
-}
type alias GenerateReportResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GenerateReportDTO
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateShelfsStatisticsRequest =
    { businessId : Int
    , dateFrom : Posix
    , dateTo : Posix
    , attributionType : ShelfsStatisticsAttributionType
    }


{-| Данные, необходимые для генерации документа. 
-}
type alias GenerateShipmentListDocumentReportRequest =
    { campaignId : Int
    , shipmentId : Maybe Int
    , orderIds : Maybe ( List Int )
    }


{-| Данные, необходимые для генерации отчета.
-}
type alias GenerateShowsSalesReportRequest =
    { businessId : Maybe Int
    , campaignId : Maybe Int
    , dateFrom : Posix
    , dateTo : Posix
    , grouping : ShowsSalesGroupingType
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateStocksOnWarehousesReportRequest =
    { campaignId : Int
    , warehouseIds : Maybe ( List Int )
    , reportDate : Maybe Posix
    , categoryIds : Maybe ( List Int )
    , hasStocks : Maybe Bool
    }


{-| Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
-}
type alias GenerateUnitedMarketplaceServicesReportRequest =
    { businessId : Int
    , dateTimeFrom : Maybe Posix
    , dateTimeTo : Maybe Posix
    , dateFrom : Maybe Posix
    , dateTo : Maybe Posix
    , yearFrom : Maybe Int
    , monthFrom : Maybe Int
    , yearTo : Maybe Int
    , monthTo : Maybe Int
    , placementPrograms : Maybe ( List PlacementType )
    , inns : Maybe ( List String )
    , campaignIds : Maybe ( List Int )
    }


{-| Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
-}
type alias GenerateUnitedNettingReportRequest =
    { businessId : Int
    , dateTimeFrom : Maybe Posix
    , dateTimeTo : Maybe Posix
    , dateFrom : Maybe Posix
    , dateTo : Maybe Posix
    , bankOrderId : Maybe Int
    , bankOrderDateTime : Maybe Posix
    , placementPrograms : Maybe ( List PlacementType )
    , inns : Maybe ( List String )
    , campaignIds : Maybe ( List Int )
    }


{-| Данные, необходимые для генерации отчета. 
-}
type alias GenerateUnitedOrdersRequest =
    { businessId : Int
    , dateFrom : Posix
    , dateTo : Posix
    , campaignIds : Maybe ( List Int )
    , promoId : Maybe String
    }


{-| Список предложений.
-}
type alias GetAllOffersResponse =
    { offers : List OfferDTO
    }


{-| description.
-}
type alias GetBidsInfoRequest =
    { skus : Maybe ( List String )
    }


{-| description.
-}
type alias GetBidsInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetBidsInfoResponseDTO
    }


{-| Список товаров с указанными ставками.
-}
type alias GetBidsInfoResponseDTO =
    { bids : List SkuBidItemDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| description.
-}
type alias GetBidsRecommendationsRequest =
    { skus : List String
    }


{-| description.
-}
type alias GetBidsRecommendationsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetBidsRecommendationsResponseDTO
    }


{-| Список товаров с рекомендованными ставками.
-}
type alias GetBidsRecommendationsResponseDTO =
    { recommendations : List SkuBidRecommendationItemDTO
    }


type alias GetBusinessBuyerInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderBusinessBuyerDTO
    }


type alias GetBusinessDocumentsInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderBusinessDocumentsDTO
    }


{-| Информация о кабинете и его настройках.
-}
type alias GetBusinessSettingsInfoDTO =
    { info : Maybe BusinessDTO
    , settings : Maybe BusinessSettingsDTO
    }


{-| Ответ на запрос настроек кабинета.
-}
type alias GetBusinessSettingsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetBusinessSettingsInfoDTO
    }


{-| Ответ на запрос списка логинов, связанных с магазином.
-}
type alias GetCampaignLoginsResponse =
    { logins : List String
    }


{-| Параметры размещения товара в магазине.
-}
type alias GetCampaignOfferDTO =
    { offerId : String
    , quantum : Maybe QuantumDTO
    , available : Maybe Bool
    , basicPrice : Maybe GetPriceWithDiscountDTO
    , campaignPrice : Maybe GetPriceWithVatDTO
    , status : Maybe OfferCampaignStatusType
    , errors : Maybe ( List OfferErrorDTO )
    , warnings : Maybe ( List OfferErrorDTO )
    }


{-| Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
-}
type alias GetCampaignOffersRequest =
    { offerIds : Maybe ( List String )
    , statuses : Maybe ( List OfferCampaignStatusType )
    , categoryIds : Maybe ( List Int )
    , vendorNames : Maybe ( List String )
    , tags : Maybe ( List String )
    }


{-| Ответ на запрос списка товаров в магазине.
-}
type alias GetCampaignOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetCampaignOffersResultDTO
    }


{-| Список товаров в заданном магазине.
-}
type alias GetCampaignOffersResultDTO =
    { paging : Maybe ScrollingPagerDTO
    , offers : List GetCampaignOfferDTO
    }


{-| Ответ на запрос региона магазина.
-}
type alias GetCampaignRegionResponse =
    { region : Maybe RegionDTO
    }


{-| Информация о магазине к данным идентификатора кампании.
-}
type alias GetCampaignResponse =
    { campaign : Maybe CampaignDTO
    }


{-| Ответ на запрос настроек магазина.
-}
type alias GetCampaignSettingsResponse =
    { settings : Maybe CampaignSettingsDTO
    }


{-| Результаты поиска магазинов.
-}
type alias GetCampaignsResponse =
    { campaigns : List CampaignDTO
    , pager : Maybe FlippingPagerDTO
    }


{-| Категории и лимит на установку кванта и минимального количества товаров.
-}
type alias GetCategoriesMaxSaleQuantumDTO =
    { results : List MaxSaleQuantumDTO
    , errors : Maybe ( List CategoryErrorDTO )
    }


{-| Список категорий, для которых нужно вернуть лимит на установку кванта и минимального количества товаров. 
-}
type alias GetCategoriesMaxSaleQuantumRequest =
    { marketCategoryIds : List Int
    }


type alias GetCategoriesMaxSaleQuantumResponse =
    { status : Maybe ApiResponseStatusType
    , results : List MaxSaleQuantumDTO
    , errors : Maybe ( List CategoryErrorDTO )
    }


{-| Параметры запроса категорий. 
-}
type alias GetCategoriesRequest =
    { language : Maybe LanguageType
    }


type alias GetCategoriesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe CategoryDTO
    }


{-| Ответ со списком характеристик для категории и их допустимыми значениями.
-}
type alias GetCategoryContentParametersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe CategoryContentParametersDTO
    }


{-| Историю какого чата нужно получить — и начиная с какого сообщения. 
-}
type alias GetChatHistoryRequest =
    { messageIdFrom : Maybe Int
    }


type alias GetChatHistoryResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe ChatMessagesResultDTO
    }


{-| Информация о чатах.
-}
type alias GetChatInfoDTO =
    { chatId : Int
    , orderId : Int
    , type_ : ChatType
    , status : ChatStatusType
    , createdAt : Posix
    , updatedAt : Posix
    }


{-| Список чатов.
-}
type alias GetChatsInfoDTO =
    { chats : List GetChatInfoDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Фильтры по чатам, которые нужно вернуть. 
-}
type alias GetChatsRequest =
    { orderIds : Maybe ( List Int )
    , types : Maybe ( List ChatType )
    , statuses : Maybe ( List ChatStatusType )
    }


type alias GetChatsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetChatsInfoDTO
    }


{-| Ответ на запрос списка служб доставки.
-}
type alias GetDeliveryServicesResponse =
    { result : Maybe DeliveryServicesDTO
    }


type alias GetFeedIndexLogsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe FeedIndexLogsResultDTO
    }


{-| Ответ на запрос информации о прайс-листе.
-}
type alias GetFeedResponse =
    { feed : Maybe FeedDTO
    }


type alias GetFeedbackListResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe FeedbackListDTO
    }


{-| Ответ на запрос списка прайс-листов.
-}
type alias GetFeedsResponse =
    { feeds : List FeedDTO
    }


type alias GetFulfillmentWarehousesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe FulfillmentWarehousesDTO
    }


{-| Фильтр запроса комментариев отзыва. 
-}
type alias GetGoodsFeedbackCommentsRequest =
    { feedbackId : Int
    }


type alias GetGoodsFeedbackCommentsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GoodsFeedbackCommentListDTO
    }


{-| Фильтр запроса отзывов в кабинете. 
-}
type alias GetGoodsFeedbackRequest =
    { dateTimeFrom : Maybe Posix
    , dateTimeTo : Maybe Posix
    , reactionStatus : Maybe FeedbackReactionStatusType
    , ratingValues : Maybe ( List Int )
    , modelIds : Maybe ( List Int )
    , paid : Maybe Bool
    }


type alias GetGoodsFeedbackResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GoodsFeedbackListDTO
    }


{-| Запрос отчета по товарам.
-}
type alias GetGoodsStatsRequest =
    { shopSkus : List String
    }


{-| Ответ на запрос отчета по товарам.
-}
type alias GetGoodsStatsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GoodsStatsDTO
    }


{-| Ответ на запрос списка скрытий.
-}
type alias GetHiddenOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetHiddenOffersResultDTO
    }


{-| Список скрытых вами товаров. 
-}
type alias GetHiddenOffersResultDTO =
    { paging : Maybe ScrollingPagerDTO
    , hiddenOffers : List HiddenOfferDTO
    }


{-| Информация о товарах в каталоге. 
-}
type alias GetMappingDTO =
    { marketSku : Maybe Int
    , marketSkuName : Maybe String
    , marketModelId : Maybe Int
    , marketModelName : Maybe String
    , marketCategoryId : Maybe Int
    , marketCategoryName : Maybe String
    }


{-| Ответ на запрос списка предложений для моделей.
-}
type alias GetModelsOffersResponse =
    { models : List EnrichedModelDTO
    , currency : Maybe CurrencyType
    , regionId : Maybe Int
    }


{-| Запрос информации о моделях.
-}
type alias GetModelsRequest =
    { models : List Int
    }


{-| Ответ на запрос информации о моделях.
-}
type alias GetModelsResponse =
    { models : List ModelDTO
    , currency : Maybe CurrencyType
    , regionId : Maybe Int
    }


type alias GetOfferCardsContentStatusRequest =
    { offerIds : Maybe ( List String )
    , cardStatuses : Maybe ( List OfferCardStatusType )
    , categoryIds : Maybe ( List Int )
    }


{-| Ответ со списком состояний товаров и пагинацией.
-}
type alias GetOfferCardsContentStatusResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferCardsContentStatusDTO
    }


{-| Параметры товара.
-}
type alias GetOfferDTO =
    { offerId : String
    , name : Maybe String
    , marketCategoryId : Maybe Int
    , category : Maybe String
    , pictures : Maybe ( List String )
    , videos : Maybe ( List String )
    , manuals : Maybe ( List OfferManualDTO )
    , vendor : Maybe String
    , barcodes : Maybe ( List String )
    , description : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , vendorCode : Maybe String
    , tags : Maybe ( List String )
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , customsCommodityCode : Maybe String
    , certificates : Maybe ( List String )
    , boxCount : Maybe Int
    , condition : Maybe OfferConditionDTO
    , type_ : Maybe OfferType
    , downloadable : Maybe Bool
    , adult : Maybe Bool
    , age : Maybe AgeDTO
    , params : Maybe ( List OfferParamDTO )
    , basicPrice : Maybe GetPriceWithDiscountDTO
    , purchasePrice : Maybe GetPriceDTO
    , additionalExpenses : Maybe GetPriceDTO
    , cofinancePrice : Maybe GetPriceDTO
    , cardStatus : Maybe OfferCardStatusType
    , campaigns : Maybe ( List OfferCampaignStatusDTO )
    , sellingPrograms : Maybe ( List OfferSellingProgramDTO )
    , archived : Maybe Bool
    }


{-| Информация о товаре.
-}
type alias GetOfferMappingDTO =
    { offer : Maybe GetOfferDTO
    , mapping : Maybe GetMappingDTO
    }


{-| Ответ на запрос списка товаров в каталоге.
-}
type alias GetOfferMappingEntriesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferMappingEntriesDTO
    }


type alias GetOfferMappingsRequest =
    { offerIds : Maybe ( List String )
    , cardStatuses : Maybe ( List OfferCardStatusType )
    , categoryIds : Maybe ( List Int )
    , vendorNames : Maybe ( List String )
    , tags : Maybe ( List String )
    , archived : Maybe Bool
    }


type alias GetOfferMappingsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetOfferMappingsResultDTO
    }


{-| Информация о товарах.
-}
type alias GetOfferMappingsResultDTO =
    { paging : Maybe ScrollingPagerDTO
    , offerMappings : List GetOfferMappingDTO
    }


type alias GetOfferRecommendationsRequest =
    { offerIds : Maybe ( List String )
    , cofinancePriceFilter : Maybe FieldStateType
    , recommendedCofinancePriceFilter : Maybe FieldStateType
    , competitivenessFilter : Maybe PriceCompetitivenessType
    }


type alias GetOfferRecommendationsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferRecommendationsResultDTO
    }


{-| Список предложений с пагинатором.
-}
type alias GetOffersResponse =
    { offers : List OfferDTO
    , pager : Maybe FlippingPagerDTO
    }


type alias GetOrderBuyerInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderBuyerInfoDTO
    }


{-| Ответ с информацией для печати ярлыков.
-}
type alias GetOrderLabelsDataResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderLabelDTO
    }


type alias GetOrderResponse =
    { order : Maybe OrderDTO
    }


{-| Модель для ответа API списка информации по заказам.
-}
type alias GetOrdersResponse =
    { pager : Maybe FlippingPagerDTO
    , orders : List OrderDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Запрос информации по заказам.
-}
type alias GetOrdersStatsRequest =
    { dateFrom : Maybe Posix
    , dateTo : Maybe Posix
    , updateFrom : Maybe Posix
    , updateTo : Maybe Posix
    , orders : Maybe ( List Int )
    , statuses : Maybe ( List OrderStatsStatusType )
    , hasCis : Maybe Bool
    }


{-| Ответ на запрос информации по заказам.
-}
type alias GetOrdersStatsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrdersStatsDTO
    }


type alias GetOutletLicensesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OutletLicensesResponseDTO
    }


{-| Ответ на запрос информации о точке продаж.
-}
type alias GetOutletResponse =
    { outlet : Maybe FullOutletDTO
    }


{-| Ответ на запрос информации о точках продаж.
-}
type alias GetOutletsResponse =
    { outlets : List FullOutletDTO
    , paging : Maybe ScrollingPagerDTO
    , pager : Maybe FlippingPagerDTO
    }


{-| Цена с указанием времени последнего обновления.
-}
type alias GetPriceDTO =
    { value : Float
    , currencyId : CurrencyType
    , updatedAt : Posix
    }


{-| Цена с указанием скидки и времени последнего обновления.
-}
type alias GetPriceWithDiscountDTO =
    { value : Float
    , currencyId : CurrencyType
    , discountBase : Maybe Float
    , updatedAt : Posix
    }


{-| Цена с указанием ставки НДС и времени последнего обновления.
-}
type alias GetPriceWithVatDTO =
    { value : Maybe Float
    , discountBase : Maybe Float
    , currencyId : Maybe CurrencyType
    , vat : Maybe Int
    , updatedAt : Posix
    }


{-| Запрос списка цен.
-}
type alias GetPricesByOfferIdsRequest =
    { offerIds : Maybe ( List String )
    }


{-| Ответ на запрос списка цен.
-}
type alias GetPricesByOfferIdsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferPriceByOfferIdsListResponseDTO
    }


{-| Ответ на запрос списка цен.
-}
type alias GetPricesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferPriceListResponseDTO
    }


{-| Информация о товарах в акции.
-}
type alias GetPromoAssortmentInfoDTO =
    { activeOffers : Int
    , potentialOffers : Maybe Int
    , processing : Maybe Bool
    }


{-| Информация об акции «Бестселлеры Маркета».
-}
type alias GetPromoBestsellerInfoDTO =
    { bestseller : Bool
    , entryDeadline : Maybe Posix
    }


{-| Ограничения в акции.
-}
type alias GetPromoConstraintsDTO =
    { warehouseIds : Maybe ( List Int )
    }


{-| Информация об акции.
-}
type alias GetPromoDTO =
    { id : String
    , name : String
    , period : PromoPeriodDTO
    , participating : Bool
    , assortmentInfo : GetPromoAssortmentInfoDTO
    , mechanicsInfo : GetPromoMechanicsInfoDTO
    , bestsellerInfo : GetPromoBestsellerInfoDTO
    , channels : Maybe ( List ChannelType )
    , constraints : Maybe GetPromoConstraintsDTO
    }


{-| Информация о типе акции.
-}
type alias GetPromoMechanicsInfoDTO =
    { type_ : MechanicsType
    , promocodeInfo : Maybe GetPromoPromocodeInfoDTO
    }


{-| Товар, который участвует или может участвовать в акции.
-}
type alias GetPromoOfferDTO =
    { offerId : String
    , status : PromoOfferParticipationStatusType
    , params : PromoOfferParamsDTO
    , autoParticipatingDetails : Maybe PromoOfferAutoParticipatingDetailsDTO
    }


{-| Получение списка товаров, которые участвуют или могут участвовать в акции.
-}
type alias GetPromoOffersRequest =
    { promoId : String
    , statusType : Maybe PromoOfferParticipationStatusFilterType
    }


type alias GetPromoOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetPromoOffersResultDTO
    }


{-| Список товаров, которые участвуют или могут участвовать в акции.
-}
type alias GetPromoOffersResultDTO =
    { offers : List GetPromoOfferDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Информация для типа `MARKET_PROMOCODE`.  Параметр заполняется только для этого типа акции. 
-}
type alias GetPromoPromocodeInfoDTO =
    { promocode : String
    , discount : Int
    }


{-| Фильтры для получения списка акций.
-}
type alias GetPromosRequest =
    { participation : Maybe PromoParticipationType
    , mechanics : Maybe MechanicsType
    }


type alias GetPromosResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetPromosResultDTO
    }


{-| Информация об акциях Маркета.
-}
type alias GetPromosResultDTO =
    { promos : List GetPromoDTO
    }


type alias GetQualityRatingDetailsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe QualityRatingDetailsDTO
    }


{-| Запрос информации по индексу качества.
-}
type alias GetQualityRatingRequest =
    { dateFrom : Maybe Posix
    , dateTo : Maybe Posix
    , campaignIds : List Int
    }


{-| Информация об индексе качества магазинов.
-}
type alias GetQualityRatingResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe CampaignsQualityRatingDTO
    }


{-| Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
-}
type alias GetQuarantineOffersRequest =
    { offerIds : Maybe ( List String )
    , cardStatuses : Maybe ( List OfferCardStatusType )
    , categoryIds : Maybe ( List Int )
    , vendorNames : Maybe ( List String )
    , tags : Maybe ( List String )
    }


{-| Ответ на запрос списка товаров в карантине.
-}
type alias GetQuarantineOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetQuarantineOffersResultDTO
    }


{-| Список товаров в карантине.
-}
type alias GetQuarantineOffersResultDTO =
    { paging : Maybe ScrollingPagerDTO
    , offers : List QuarantineOfferDTO
    }


type alias GetRegionWithChildrenResponse =
    { pager : Maybe FlippingPagerDTO
    , regions : Maybe RegionDTO
    }


type alias GetRegionsResponse =
    { regions : List RegionDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Ответ на запрос информации об отчете.
-}
type alias GetReportInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe ReportInfoDTO
    }


type alias GetReturnResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe ReturnDTO
    }


type alias GetReturnsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe PagedReturnsDTO
    }


type alias GetShipmentOrdersInfoResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrdersShipmentInfoDTO
    }


type alias GetShipmentResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe ShipmentDTO
    }


{-| Запрос рекомендованных карточек товара.
-}
type alias GetSuggestedOfferMappingEntriesRequest =
    { offers : List MappingsOfferDTO
    }


{-| Ответ со списком рекомендованных карточек товара.
-}
type alias GetSuggestedOfferMappingEntriesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OfferMappingSuggestionsListDTO
    }


type alias GetSuggestedOfferMappingsRequest =
    { offers : Maybe ( List SuggestedOfferDTO )
    }


type alias GetSuggestedOfferMappingsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetSuggestedOfferMappingsResultDTO
    }


{-| Подобранные карточки на Маркете.
-}
type alias GetSuggestedOfferMappingsResultDTO =
    { offers : List SuggestedOfferMappingDTO
    }


{-| Список складов с информацией об остатках на каждом из них.
-}
type alias GetWarehouseStocksDTO =
    { paging : Maybe ScrollingPagerDTO
    , warehouses : List WarehouseOffersDTO
    }


{-| Фильтры для запроса остатков. 
-}
type alias GetWarehouseStocksRequest =
    { withTurnover : Maybe Bool
    , archived : Maybe Bool
    , offerIds : Maybe ( List String )
    }


type alias GetWarehouseStocksResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GetWarehouseStocksDTO
    }


type alias GetWarehousesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe WarehousesDTO
    }


{-| Информация об авторе комментария.
-}
type alias GoodsFeedbackCommentAuthorDTO =
    { type_ : Maybe GoodsFeedbackCommentAuthorType
    , name : Maybe String
    }


{-| Тип автора:  * `USER` — пользователь. * `BUSINESS` — кабинет. 
-}
type GoodsFeedbackCommentAuthorType
    = GoodsFeedbackCommentAuthorTypeUSER
    | GoodsFeedbackCommentAuthorTypeBUSINESS


goodsFeedbackCommentAuthorTypeVariants : List GoodsFeedbackCommentAuthorType
goodsFeedbackCommentAuthorTypeVariants =
    [ GoodsFeedbackCommentAuthorTypeUSER
    , GoodsFeedbackCommentAuthorTypeBUSINESS
    ]


{-| Комментарий к отзыву.
-}
type alias GoodsFeedbackCommentDTO =
    { id : Int
    , text : String
    , canModify : Maybe Bool
    , parentId : Maybe Int
    , author : GoodsFeedbackCommentAuthorDTO
    , status : GoodsFeedbackCommentStatusType
    }


{-| Идентификатор комментария к отзыву. 
-}
type alias GoodsFeedbackCommentId =
    { }


{-| Комментарии к отзыву.
-}
type alias GoodsFeedbackCommentListDTO =
    { comments : List GoodsFeedbackCommentDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Статус комментария:  * `PUBLISHED` — опубликован. * `UNMODERATED` — не проверен. * `BANNED` — заблокирован. * `DELETED` — удален. 
-}
type GoodsFeedbackCommentStatusType
    = GoodsFeedbackCommentStatusTypePUBLISHED
    | GoodsFeedbackCommentStatusTypeUNMODERATED
    | GoodsFeedbackCommentStatusTypeBANNED
    | GoodsFeedbackCommentStatusTypeDELETED


goodsFeedbackCommentStatusTypeVariants : List GoodsFeedbackCommentStatusType
goodsFeedbackCommentStatusTypeVariants =
    [ GoodsFeedbackCommentStatusTypePUBLISHED
    , GoodsFeedbackCommentStatusTypeUNMODERATED
    , GoodsFeedbackCommentStatusTypeBANNED
    , GoodsFeedbackCommentStatusTypeDELETED
    ]


{-| Текст комментария.
-}
type alias GoodsFeedbackCommentText =
    { }


{-| Отзыв о товаре.
-}
type alias GoodsFeedbackDTO =
    { feedbackId : Int
    , createdAt : Posix
    , needReaction : Bool
    , identifiers : GoodsFeedbackIdentifiersDTO
    , author : Maybe String
    , description : Maybe GoodsFeedbackDescriptionDTO
    , media : Maybe GoodsFeedbackMediaDTO
    , statistics : GoodsFeedbackStatisticsDTO
    }


{-| Текстовая часть отзыва.
-}
type alias GoodsFeedbackDescriptionDTO =
    { advantages : Maybe String
    , disadvantages : Maybe String
    , comment : Maybe String
    }


{-| Идентификатор отзыва. 
-}
type alias GoodsFeedbackId =
    { }


{-| Идентификаторы, которые связаны с отзывом.
-}
type alias GoodsFeedbackIdentifiersDTO =
    { orderId : Int
    , modelId : Int
    }


{-| Список отзывов о товарах. 
-}
type alias GoodsFeedbackListDTO =
    { feedbacks : List GoodsFeedbackDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Фото и видео.
-}
type alias GoodsFeedbackMediaDTO =
    { photos : Maybe ( List String )
    , videos : Maybe ( List String )
    }


{-| Статистическая информация по отзыву.
-}
type alias GoodsFeedbackStatisticsDTO =
    { rating : Int
    , commentsCount : Int
    , recommended : Maybe Bool
    , paidAmount : Maybe Int
    }


{-| Отчет по товарам.
-}
type alias GoodsStatsDTO =
    { shopSkus : List GoodsStatsGoodsDTO
    }


{-| Информация о товаре.
-}
type alias GoodsStatsGoodsDTO =
    { shopSku : Maybe String
    , marketSku : Maybe Int
    , name : Maybe String
    , price : Maybe Float
    , categoryId : Maybe Int
    , categoryName : Maybe String
    , weightDimensions : Maybe GoodsStatsWeightDimensionsDTO
    , warehouses : Maybe ( List GoodsStatsWarehouseDTO )
    , tariffs : Maybe ( List TariffDTO )
    , pictures : Maybe ( List String )
    }


{-| Информация о складе.
-}
type alias GoodsStatsWarehouseDTO =
    { id : Maybe Int
    , name : Maybe String
    , stocks : List WarehouseStockDTO
    }


{-| Информация о весе и габаритах товара.  Если товар уже привязан к карточке (`marketSku`), в ответе вернутся габариты из карточки Маркета, а не размеры, которые вы передаете. 
-}
type alias GoodsStatsWeightDimensionsDTO =
    { length : Maybe Float
    , width : Maybe Float
    , height : Maybe Float
    , weight : Maybe Float
    }


{-| GPS-координаты широты и долготы. 
-}
type alias GpsDTO =
    { latitude : Float
    , longitude : Float
    }


{-| Информация о скрытии.
-}
type alias HiddenOfferDTO =
    { offerId : String
    }


{-| Язык:  * `RU` — русский.  * `EN` — английский. 
-}
type LanguageType
    = LanguageTypeRU
    | LanguageTypeEN


languageTypeVariants : List LanguageType
languageTypeVariants =
    [ LanguageTypeRU
    , LanguageTypeEN
    ]


{-| Статус проверки лицензии:  * `NEW` — лицензия проверяется. * `SUCCESS` — лицензия прошла проверку. * `FAIL` — лицензия не прошла проверку. 
-}
type LicenseCheckStatusType
    = LicenseCheckStatusTypeNEW
    | LicenseCheckStatusTypeSUCCESS
    | LicenseCheckStatusTypeFAIL
    | LicenseCheckStatusTypeREVOKE
    | LicenseCheckStatusTypeDONTWANT
    | LicenseCheckStatusTypeFAILMANUAL


licenseCheckStatusTypeVariants : List LicenseCheckStatusType
licenseCheckStatusTypeVariants =
    [ LicenseCheckStatusTypeNEW
    , LicenseCheckStatusTypeSUCCESS
    , LicenseCheckStatusTypeFAIL
    , LicenseCheckStatusTypeREVOKE
    , LicenseCheckStatusTypeDONTWANT
    , LicenseCheckStatusTypeFAILMANUAL
    ]


{-| Тип лицензии:  * `ALCOHOL` — лицензия на розничную продажу алкогольной продукции. 
-}
type LicenseType
    = LicenseTypeALCOHOL
    | LicenseTypeUNKNOWN


licenseTypeVariants : List LicenseType
licenseTypeVariants =
    [ LicenseTypeALCOHOL
    , LicenseTypeUNKNOWN
    ]


{-| Описание пункта вывоза для возврата.
-}
type alias LogisticPickupPointDTO =
    { id : Maybe Int
    , name : Maybe String
    , address : Maybe PickupAddressDTO
    , instruction : Maybe String
    , type_ : Maybe LogisticPointType
    , logisticPartnerId : Maybe Int
    }


{-| Тип логистической точки:    * `WAREHOUSE` — склад.   * `PICKUP_POINT` — обычная точка выдачи заказов (ПВЗ).   * `PICKUP_TERMINAL` — постамат.   * `PICKUP_POST_OFFICE` — отделение почтовой связи (ОПС).   * `PICKUP_MIXED` — торговый зал и пункт выдачи заказов.   * `PICKUP_RETAIL` — торговый зал. 
-}
type LogisticPointType
    = LogisticPointTypeWAREHOUSE
    | LogisticPointTypePICKUPPOINT
    | LogisticPointTypePICKUPTERMINAL
    | LogisticPointTypePICKUPPOSTOFFICE
    | LogisticPointTypePICKUPMIXED
    | LogisticPointTypePICKUPRETAIL
    | LogisticPointTypeUNKNOWN


logisticPointTypeVariants : List LogisticPointType
logisticPointTypeVariants =
    [ LogisticPointTypeWAREHOUSE
    , LogisticPointTypePICKUPPOINT
    , LogisticPointTypePICKUPTERMINAL
    , LogisticPointTypePICKUPPOSTOFFICE
    , LogisticPointTypePICKUPMIXED
    , LogisticPointTypePICKUPRETAIL
    , LogisticPointTypeUNKNOWN
    ]


{-| Информация о товарах в каталоге.
-}
type alias MappingsOfferDTO =
    { name : Maybe String
    , shopSku : Maybe String
    , category : Maybe String
    , vendor : Maybe String
    , vendorCode : Maybe String
    , description : Maybe String
    , id : Maybe String
    , feedId : Maybe Int
    , barcodes : Maybe ( List String )
    , urls : Maybe ( List String )
    , pictures : Maybe ( List String )
    , manufacturer : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , minShipment : Maybe Int
    , transportUnitSize : Maybe Int
    , quantumOfSupply : Maybe Int
    , deliveryDurationDays : Maybe Int
    , boxCount : Maybe Int
    , customsCommodityCodes : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , supplyScheduleDays : Maybe ( List DayOfWeekType )
    , shelfLifeDays : Maybe Int
    , lifeTimeDays : Maybe Int
    , guaranteePeriodDays : Maybe Int
    , processingState : Maybe OfferProcessingStateDTO
    , availability : Maybe OfferAvailabilityStatusType
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , certificate : Maybe String
    , price : Maybe Float
    }


{-| Базовая информация о товарах в каталоге.
-}
type alias MappingsOfferInfoDTO =
    { name : Maybe String
    , shopSku : Maybe String
    , category : Maybe String
    , vendor : Maybe String
    , vendorCode : Maybe String
    , description : Maybe String
    , id : Maybe String
    , feedId : Maybe Int
    , barcodes : Maybe ( List String )
    , urls : Maybe ( List String )
    , pictures : Maybe ( List String )
    , manufacturer : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , minShipment : Maybe Int
    , transportUnitSize : Maybe Int
    , quantumOfSupply : Maybe Int
    , deliveryDurationDays : Maybe Int
    , boxCount : Maybe Int
    , customsCommodityCodes : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , supplyScheduleDays : Maybe ( List DayOfWeekType )
    , shelfLifeDays : Maybe Int
    , lifeTimeDays : Maybe Int
    , guaranteePeriodDays : Maybe Int
    , processingState : Maybe OfferProcessingStateDTO
    , availability : Maybe OfferAvailabilityStatusType
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , certificate : Maybe String
    }


{-| SKU на Маркете.
-}
type alias MarketSku =
    { }


{-| Лимит на установку кванта и минимального количества товаров по категориям. 
-}
type alias MaxSaleQuantumDTO =
    { id : Int
    , name : Maybe String
    , maxSaleQuantum : Maybe Int
    }


{-| Тип акции:  * `DIRECT_DISCOUNT` — прямая скидка.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_PROMOCODE` — скидка по промокоду. 
-}
type MechanicsType
    = MechanicsTypeDIRECTDISCOUNT
    | MechanicsTypeBLUEFLASH
    | MechanicsTypeMARKETPROMOCODE


mechanicsTypeVariants : List MechanicsType
mechanicsTypeVariants =
    [ MechanicsTypeDIRECTDISCOUNT
    , MechanicsTypeBLUEFLASH
    , MechanicsTypeMARKETPROMOCODE
    ]


{-| Модель товара.
-}
type alias ModelDTO =
    { id : Maybe Int
    , name : Maybe String
    , prices : Maybe ModelPriceDTO
    }


{-| Информация о предложении.
-}
type alias ModelOfferDTO =
    { discount : Maybe Int
    , name : Maybe String
    , pos : Maybe Int
    , preDiscountPrice : Maybe Float
    , price : Maybe Float
    , regionId : Maybe Int
    , shippingCost : Maybe Float
    , shopName : Maybe String
    , shopRating : Maybe Int
    , inStock : Maybe Int
    }


{-| Информация о ценах на модель товара.
-}
type alias ModelPriceDTO =
    { avg : Maybe Float
    , max : Maybe Float
    , min : Maybe Float
    }


{-| Список моделей товаров.
-}
type alias ModelsDTO =
    { models : List ModelDTO
    }


{-| Планы по поставкам:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. Через 60 дней после того, как товар закончится на складе, этот статус изменится на `DELISTED`. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет. Если товар вернется на склад (например, покупатель вернет заказ), этот статус изменится на `INACTIVE`. 
-}
type OfferAvailabilityStatusType
    = OfferAvailabilityStatusTypeACTIVE
    | OfferAvailabilityStatusTypeINACTIVE
    | OfferAvailabilityStatusTypeDELISTED


offerAvailabilityStatusTypeVariants : List OfferAvailabilityStatusType
offerAvailabilityStatusTypeVariants =
    [ OfferAvailabilityStatusTypeACTIVE
    , OfferAvailabilityStatusTypeINACTIVE
    , OfferAvailabilityStatusTypeDELISTED
    ]


{-| Статус товара в магазине.
-}
type alias OfferCampaignStatusDTO =
    { campaignId : Int
    , status : OfferCampaignStatusType
    }


{-| Статус товара:  * `PUBLISHED` — Готов к продаже. * `CHECKING` — На проверке. * `DISABLED_BY_PARTNER` — Скрыт вами. * `REJECTED_BY_MARKET` — Отклонен. * `DISABLED_AUTOMATICALLY` — Исправьте ошибки. * `CREATING_CARD` — Создается карточка. * `NO_CARD` — Нужна карточка. * `NO_STOCKS` — Нет на складе. * `ARCHIVED` — В архиве.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/add/statuses.html) 
-}
type OfferCampaignStatusType
    = OfferCampaignStatusTypePUBLISHED
    | OfferCampaignStatusTypeCHECKING
    | OfferCampaignStatusTypeDISABLEDBYPARTNER
    | OfferCampaignStatusTypeDISABLEDAUTOMATICALLY
    | OfferCampaignStatusTypeREJECTEDBYMARKET
    | OfferCampaignStatusTypeCREATINGCARD
    | OfferCampaignStatusTypeNOCARD
    | OfferCampaignStatusTypeNOSTOCKS
    | OfferCampaignStatusTypeARCHIVED


offerCampaignStatusTypeVariants : List OfferCampaignStatusType
offerCampaignStatusTypeVariants =
    [ OfferCampaignStatusTypePUBLISHED
    , OfferCampaignStatusTypeCHECKING
    , OfferCampaignStatusTypeDISABLEDBYPARTNER
    , OfferCampaignStatusTypeDISABLEDAUTOMATICALLY
    , OfferCampaignStatusTypeREJECTEDBYMARKET
    , OfferCampaignStatusTypeCREATINGCARD
    , OfferCampaignStatusTypeNOCARD
    , OfferCampaignStatusTypeNOSTOCKS
    , OfferCampaignStatusTypeARCHIVED
    ]


{-| Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
-}
type alias OfferCardDTO =
    { offerId : String
    , mapping : Maybe GetMappingDTO
    , parameterValues : Maybe ( List ParameterValueDTO )
    , cardStatus : Maybe OfferCardStatusType
    , contentRating : Maybe Int
    , recommendations : Maybe ( List OfferCardRecommendationDTO )
    , errors : Maybe ( List OfferErrorDTO )
    , warnings : Maybe ( List OfferErrorDTO )
    }


{-| Рекомендация по заполнению карточки товара.
-}
type alias OfferCardRecommendationDTO =
    { type_ : OfferCardRecommendationType
    , percent : Maybe Int
    }


{-| Рекомендация по дополнению или замене контента. Не возвращается для карточек, которые заполнены Маркетом или содержат бывшие в употреблении товары.  Часть рекомендаций относятся к **основным параметрам**, которые есть у товаров любых категорий. Другие — к тем **характеристикам**, которые есть у товара потому, что он относится к определенной категории.  **1. Рекомендации, относящиеся к основным параметрам**  Каждая такая рекомендация относится к **единственному параметру**. Чтобы заполнить этот параметр, пользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  Рекомендации по заполнению параметров в `updateOfferMappings`:  * `RECOGNIZED_VENDOR` — напишите название производителя так, как его пишет сам производитель (параметр `vendor`). * `PICTURE_COUNT` — добавьте изображения (параметр `pictures`). * `FIRST_PICTURE_SIZE` — замените первое изображение более крупным (параметр `pictures`). * `TITLE_LENGTH` — измените название (параметр `name`). Составьте название по схеме: тип + бренд или производитель + модель + особенности, если есть (размер, вес, цвет). * `DESCRIPTION_LENGTH` — добавьте описание рекомендуемого размера (параметр `description`). * `AVERAGE_PICTURE_SIZE` — замените все изображения на изображения высокого качества (параметр `pictures`). * `FIRST_VIDEO_LENGTH` — добавьте первое видео рекомендуемой длины (параметр `videos`). * `AVERAGE_VIDEO_SIZE` — замените все видео на видео высокого качества (параметр `videos`). * `VIDEO_COUNT` — добавьте больше видео (параметр `videos`).  Рекомендуемые значения параметров описаны в [Справке Яндекс Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/add/).  **2. Рекомендации, относящиеся к характеристикам по категориям**  Каждая такая рекомендация предполагает заполнение **одной или нескольких характеристик**. Чтобы узнать, какие именно характеристики нужно заполнить, воспользуйтесь запросом [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). Например, если вы получили рекомендацию `MAIN`, нужно заполнить характеристики, имеющие `MAIN` в массиве `recommendationTypes`.  Рекомендации:  * `MAIN` — заполните ключевые характеристики товара, которые используются в поиске и фильтрах. * `ADDITIONAL` — заполните дополнительные характеристики товара. * `DISTINCTIVE` — заполните характеристики, которыми отличаются друг от друга варианты товара.  **3. Устаревшие рекомендации**  * `HAS_VIDEO`. * `FILTERABLE`. * `HAS_DESCRIPTION`. * `HAS_BARCODE`. 
-}
type OfferCardRecommendationType
    = OfferCardRecommendationTypeHASVIDEO
    | OfferCardRecommendationTypeRECOGNIZEDVENDOR
    | OfferCardRecommendationTypeMAIN
    | OfferCardRecommendationTypeADDITIONAL
    | OfferCardRecommendationTypeDISTINCTIVE
    | OfferCardRecommendationTypeFILTERABLE
    | OfferCardRecommendationTypePICTURECOUNT
    | OfferCardRecommendationTypeHASDESCRIPTION
    | OfferCardRecommendationTypeHASBARCODE
    | OfferCardRecommendationTypeFIRSTPICTURESIZE
    | OfferCardRecommendationTypeTITLELENGTH
    | OfferCardRecommendationTypeDESCRIPTIONLENGTH
    | OfferCardRecommendationTypeAVERAGEPICTURESIZE
    | OfferCardRecommendationTypeFIRSTVIDEOSIZE
    | OfferCardRecommendationTypeFIRSTVIDEOLENGTH
    | OfferCardRecommendationTypeAVERAGEVIDEOSIZE
    | OfferCardRecommendationTypeVIDEOCOUNT


offerCardRecommendationTypeVariants : List OfferCardRecommendationType
offerCardRecommendationTypeVariants =
    [ OfferCardRecommendationTypeHASVIDEO
    , OfferCardRecommendationTypeRECOGNIZEDVENDOR
    , OfferCardRecommendationTypeMAIN
    , OfferCardRecommendationTypeADDITIONAL
    , OfferCardRecommendationTypeDISTINCTIVE
    , OfferCardRecommendationTypeFILTERABLE
    , OfferCardRecommendationTypePICTURECOUNT
    , OfferCardRecommendationTypeHASDESCRIPTION
    , OfferCardRecommendationTypeHASBARCODE
    , OfferCardRecommendationTypeFIRSTPICTURESIZE
    , OfferCardRecommendationTypeTITLELENGTH
    , OfferCardRecommendationTypeDESCRIPTIONLENGTH
    , OfferCardRecommendationTypeAVERAGEPICTURESIZE
    , OfferCardRecommendationTypeFIRSTVIDEOSIZE
    , OfferCardRecommendationTypeFIRSTVIDEOLENGTH
    , OfferCardRecommendationTypeAVERAGEVIDEOSIZE
    , OfferCardRecommendationTypeVIDEOCOUNT
    ]


{-| Статус карточки товара:  * `HAS_CARD_CAN_NOT_UPDATE` — Карточка Маркета. * `HAS_CARD_CAN_UPDATE` — Можно дополнить. * `HAS_CARD_CAN_UPDATE_ERRORS` — Изменения не приняты. * `HAS_CARD_CAN_UPDATE_PROCESSING` — Изменения на проверке. * `NO_CARD_NEED_CONTENT` — Создайте карточку. * `NO_CARD_MARKET_WILL_CREATE` — Создаст Маркет. * `NO_CARD_ERRORS` — Не создана из-за ошибки. * `NO_CARD_PROCESSING` — Проверяем данные. * `NO_CARD_ADD_TO_CAMPAIGN` — Разместите товар в магазине.  [Что обозначает каждый из статусов](https://yandex.ru/support/marketplace/assortment/content/statuses.html) 
-}
type OfferCardStatusType
    = OfferCardStatusTypeHASCARDCANNOTUPDATE
    | OfferCardStatusTypeHASCARDCANUPDATE
    | OfferCardStatusTypeHASCARDCANUPDATEERRORS
    | OfferCardStatusTypeHASCARDCANUPDATEPROCESSING
    | OfferCardStatusTypeNOCARDNEEDCONTENT
    | OfferCardStatusTypeNOCARDMARKETWILLCREATE
    | OfferCardStatusTypeNOCARDERRORS
    | OfferCardStatusTypeNOCARDPROCESSING
    | OfferCardStatusTypeNOCARDADDTOCAMPAIGN


offerCardStatusTypeVariants : List OfferCardStatusType
offerCardStatusTypeVariants =
    [ OfferCardStatusTypeHASCARDCANNOTUPDATE
    , OfferCardStatusTypeHASCARDCANUPDATE
    , OfferCardStatusTypeHASCARDCANUPDATEERRORS
    , OfferCardStatusTypeHASCARDCANUPDATEPROCESSING
    , OfferCardStatusTypeNOCARDNEEDCONTENT
    , OfferCardStatusTypeNOCARDMARKETWILLCREATE
    , OfferCardStatusTypeNOCARDERRORS
    , OfferCardStatusTypeNOCARDPROCESSING
    , OfferCardStatusTypeNOCARDADDTOCAMPAIGN
    ]


{-| Список товаров с информацией о состоянии карточек.
-}
type alias OfferCardsContentStatusDTO =
    { offerCards : List OfferCardDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
-}
type alias OfferCategory =
    { }


{-| Состояние уцененного товара. 
-}
type alias OfferConditionDTO =
    { type_ : Maybe OfferConditionType
    , quality : Maybe OfferConditionQualityType
    , reason : Maybe String
    }


{-| Внешний вид товара:  * `PERFECT` — идеальный. * `EXCELLENT` — отличный. * `GOOD` — хороший. * `NOT_SPECIFIED` — не выбран. 
-}
type OfferConditionQualityType
    = OfferConditionQualityTypePERFECT
    | OfferConditionQualityTypeEXCELLENT
    | OfferConditionQualityTypeGOOD
    | OfferConditionQualityTypeNOTSPECIFIED


offerConditionQualityTypeVariants : List OfferConditionQualityType
offerConditionQualityTypeVariants =
    [ OfferConditionQualityTypePERFECT
    , OfferConditionQualityTypeEXCELLENT
    , OfferConditionQualityTypeGOOD
    , OfferConditionQualityTypeNOTSPECIFIED
    ]


{-| Тип уценки:  * `PREOWNED` —  бывший в употреблении товар, раньше принадлежал другому человеку. * `SHOWCASESAMPLE` — витринный образец. * `REFURBISHED` — повторная продажа товара. * `REDUCTION` — товар с дефектами. * `RENOVATED` — восстановленный товар. * `NOT_SPECIFIED` — не выбран.  `REFURBISHED` — специальное значение для одежды, обуви и аксессуаров. Используется только для уцененных товаров из этой категории. Другие значения для одежды, обуви и аксессуаров не используются. 
-}
type OfferConditionType
    = OfferConditionTypePREOWNED
    | OfferConditionTypeSHOWCASESAMPLE
    | OfferConditionTypeREFURBISHED
    | OfferConditionTypeREDUCTION
    | OfferConditionTypeRENOVATED
    | OfferConditionTypeNOTSPECIFIED


offerConditionTypeVariants : List OfferConditionType
offerConditionTypeVariants =
    [ OfferConditionTypePREOWNED
    , OfferConditionTypeSHOWCASESAMPLE
    , OfferConditionTypeREFURBISHED
    , OfferConditionTypeREDUCTION
    , OfferConditionTypeRENOVATED
    , OfferConditionTypeNOTSPECIFIED
    ]


{-| Товар с указанными характеристиками.
-}
type alias OfferContentDTO =
    { offerId : String
    , categoryId : Int
    , parameterValues : List ParameterValueDTO
    }


{-| Текст ошибки.
-}
type alias OfferContentErrorDTO =
    { type_ : OfferContentErrorType
    , parameterId : Maybe Int
    , message : String
    }


{-| Типы ошибок:  * `OFFER_NOT_FOUND` — такого товара нет в каталоге. * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_MISMATCH` — указана категория, которая не совпадает с категорией товара. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `VALUE_BLANK` — передано пустое значение. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code). 
-}
type OfferContentErrorType
    = OfferContentErrorTypeOFFERNOTFOUND
    | OfferContentErrorTypeUNKNOWNCATEGORY
    | OfferContentErrorTypeCATEGORYMISMATCH
    | OfferContentErrorTypeUNKNOWNPARAMETER
    | OfferContentErrorTypeUNEXPECTEDBOOLEANVALUE
    | OfferContentErrorTypeNUMBERFORMAT
    | OfferContentErrorTypeVALUEBLANK
    | OfferContentErrorTypeINVALIDUNITID
    | OfferContentErrorTypeINVALIDGROUPIDLENGTH
    | OfferContentErrorTypeINVALIDGROUPIDCHARACTERS


offerContentErrorTypeVariants : List OfferContentErrorType
offerContentErrorTypeVariants =
    [ OfferContentErrorTypeOFFERNOTFOUND
    , OfferContentErrorTypeUNKNOWNCATEGORY
    , OfferContentErrorTypeCATEGORYMISMATCH
    , OfferContentErrorTypeUNKNOWNPARAMETER
    , OfferContentErrorTypeUNEXPECTEDBOOLEANVALUE
    , OfferContentErrorTypeNUMBERFORMAT
    , OfferContentErrorTypeVALUEBLANK
    , OfferContentErrorTypeINVALIDUNITID
    , OfferContentErrorTypeINVALIDGROUPIDLENGTH
    , OfferContentErrorTypeINVALIDGROUPIDCHARACTERS
    ]


{-| Предложение.
-}
type alias OfferDTO =
    { price : Maybe Float
    , feedId : Maybe Int
    , id : Maybe String
    , shopCategoryId : Maybe String
    , marketCategoryId : Maybe Int
    , preDiscountPrice : Maybe Float
    , discount : Maybe Int
    , cutPrice : Maybe Bool
    , url : Maybe String
    , modelId : Int
    , name : Maybe String
    , currency : Maybe CurrencyType
    , bid : Maybe Float
    , cbid : Maybe Float
    , fee : Maybe Float
    , blocked : Maybe Bool
    }


{-| Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
-}
type alias OfferDescription =
    { }


{-| Сообщение об ошибке, связанной с размещением товара.
-}
type alias OfferErrorDTO =
    { message : Maybe String
    , comment : Maybe String
    }


{-| Информация о состоянии цены на товар.
-}
type alias OfferForRecommendationDTO =
    { offerId : Maybe String
    , price : Maybe BasePriceDTO
    , cofinancePrice : Maybe GetPriceDTO
    , competitiveness : Maybe PriceCompetitivenessType
    , shows : Maybe Int
    }


{-| Инструкция по использованию товара. 
-}
type alias OfferManualDTO =
    { url : String
    , title : Maybe String
    }


{-| Информация о текущей карточке товара на Маркете.
-}
type alias OfferMappingDTO =
    { marketSku : Maybe Int
    , modelId : Maybe Int
    , categoryId : Maybe Int
    }


{-| Информация о товарах в каталоге.
-}
type alias OfferMappingEntriesDTO =
    { paging : Maybe ScrollingPagerDTO
    , offerMappingEntries : List OfferMappingEntryDTO
    }


{-| Список товаров. 
-}
type alias OfferMappingEntryDTO =
    { mapping : Maybe OfferMappingDTO
    , awaitingModerationMapping : Maybe OfferMappingDTO
    , rejectedMapping : Maybe OfferMappingDTO
    , offer : Maybe MappingsOfferDTO
    }


{-| Текст ошибки.
-}
type alias OfferMappingErrorDTO =
    { type_ : OfferMappingErrorType
    , parameterId : Maybe Int
    , message : String
    }


{-| Типы ошибок:  * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_MISMATCH` — указана категория, которая не совпадает с категорией товара. * `EMPTY_MARKET_CATEGORY` — не указана категория Маркета при передаче характеристик категории. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `VALUE_BLANK` — передано пустое значение. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code). * `INVALID_PICKER_URL` — передана ссылка на изображение для миниатюры, которой нет в переданных ссылках на изображение товара. 
-}
type OfferMappingErrorType
    = OfferMappingErrorTypeUNKNOWNCATEGORY
    | OfferMappingErrorTypeCATEGORYMISMATCH
    | OfferMappingErrorTypeEMPTYMARKETCATEGORY
    | OfferMappingErrorTypeUNKNOWNPARAMETER
    | OfferMappingErrorTypeUNEXPECTEDBOOLEANVALUE
    | OfferMappingErrorTypeNUMBERFORMAT
    | OfferMappingErrorTypeVALUEBLANK
    | OfferMappingErrorTypeINVALIDUNITID
    | OfferMappingErrorTypeINVALIDGROUPIDLENGTH
    | OfferMappingErrorTypeINVALIDGROUPIDCHARACTERS
    | OfferMappingErrorTypeINVALIDPICKERURL


offerMappingErrorTypeVariants : List OfferMappingErrorType
offerMappingErrorTypeVariants =
    [ OfferMappingErrorTypeUNKNOWNCATEGORY
    , OfferMappingErrorTypeCATEGORYMISMATCH
    , OfferMappingErrorTypeEMPTYMARKETCATEGORY
    , OfferMappingErrorTypeUNKNOWNPARAMETER
    , OfferMappingErrorTypeUNEXPECTEDBOOLEANVALUE
    , OfferMappingErrorTypeNUMBERFORMAT
    , OfferMappingErrorTypeVALUEBLANK
    , OfferMappingErrorTypeINVALIDUNITID
    , OfferMappingErrorTypeINVALIDGROUPIDLENGTH
    , OfferMappingErrorTypeINVALIDGROUPIDCHARACTERS
    , OfferMappingErrorTypeINVALIDPICKERURL
    ]


{-| Информация о карточке товара.
-}
type alias OfferMappingInfoDTO =
    { mapping : Maybe OfferMappingDTO
    , awaitingModerationMapping : Maybe OfferMappingDTO
    , rejectedMapping : Maybe OfferMappingDTO
    }


{-| Вид маппинга.
-}
type OfferMappingKindType
    = OfferMappingKindTypeACTIVE
    | OfferMappingKindTypeALL


offerMappingKindTypeVariants : List OfferMappingKindType
offerMappingKindTypeVariants =
    [ OfferMappingKindTypeACTIVE
    , OfferMappingKindTypeALL
    ]


{-| Список рекомендованных карточек товара.
-}
type alias OfferMappingSuggestionsListDTO =
    { offers : List EnrichedMappingsOfferDTO
    }


{-| Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
-}
type alias OfferName =
    { }


{-| Параметры товара.  Если у товара несколько значений одного параметра, передайте их с одним и тем же `name`, но разными `value`.  {% cut \"Пример\" %}  ```json \"params\": [   {     \"name\": \"Цвет\",     \"value\": \"Зеленый\"   },   {     \"name\": \"Цвет\",     \"value\": \"Желтый\"   } ] ```  {% endcut %} 
-}
type alias OfferParamDTO =
    { name : String
    , value : String
    }


{-| Список цен.
-}
type alias OfferPriceByOfferIdsListResponseDTO =
    { offers : List OfferPriceByOfferIdsResponseDTO
    , paging : Maybe ScrollingPagerDTO
    }


{-| Информация об установленной цене.
-}
type alias OfferPriceByOfferIdsResponseDTO =
    { offerId : Maybe String
    , price : Maybe PriceDTO
    , updatedAt : Maybe Posix
    }


{-| Товар с информацией о новой цене на него.
-}
type alias OfferPriceDTO =
    { offerId : Maybe String
    , price : Maybe PriceDTO
    }


{-| Список цен на товары.
-}
type alias OfferPriceListResponseDTO =
    { offers : List OfferPriceResponseDTO
    , paging : Maybe ScrollingPagerDTO
    , total : Maybe Int
    }


{-| Информация об установленной цене на товар.
-}
type alias OfferPriceResponseDTO =
    { id : Maybe String
    , price : Maybe PriceDTO
    , marketSku : Maybe Int
    , updatedAt : Maybe Posix
    }


{-| Причины, по которым товар не прошел модерацию.
-}
type alias OfferProcessingNoteDTO =
    { type_ : Maybe OfferProcessingNoteType
    , payload : Maybe String
    }


{-| Тип причины, по которой товар не прошел модерацию:  * `ASSORTMENT` — товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар (входной параметр `offer-mapping-entry` запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или строка в каталоге, если вы загружаете товары через кабинет продавца на Маркете). * `CANCELLED` — товар отозван с модерации по вашей инициативе. * `CONFLICTING_INFORMATION` _(ранее ошибочно `CONFLICTING`)_ — вы предоставили противоречивую информацию о товаре. Параметры, которые нужно исправить, указаны в параметре `payload`. * `DEPARTMENT_FROZEN` — правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию. * `INCORRECT_INFORMATION` — информация о товаре, которую вы предоставили, противоречит описанию от производителя. Параметры, которые нужно исправить, указаны в параметре `payload`. * `LEGAL_CONFLICT` — товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу. * `NEED_CLASSIFICATION_INFORMATION` — информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар. * `NEED_INFORMATION` — товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку. Подробнее см. в разделе [Работа с карточкой товара](https://yandex.ru/support/marketplace/assortment/content/index.html) Справки Маркета для продавцов. * `NEED_PICTURES` — для идентификации товара нужны его изображения. Отправьте URL изображений товара в запросе [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или загрузите обновленный каталог через кабинет продавца на Маркете. * `NEED_VENDOR` — неверно указан производитель товара. * `NO_CATEGORY`, `NO_KNOWLEDGE` — товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию. * `NO_PARAMETERS_IN_SHOP_TITLE` — товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь. Параметры, которые нужно добавить в название товара, указаны в параметре `payload`. * `NO_SIZE_MEASURE` — для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру. Требования к размерной сетке указаны в параметре `payload`. * `UNKNOWN` — товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру. 
-}
type OfferProcessingNoteType
    = OfferProcessingNoteTypeASSORTMENT
    | OfferProcessingNoteTypeCANCELLED
    | OfferProcessingNoteTypeCONFLICTINGINFORMATION
    | OfferProcessingNoteTypeOTHER
    | OfferProcessingNoteTypeDEPARTMENTFROZEN
    | OfferProcessingNoteTypeINCORRECTINFORMATION
    | OfferProcessingNoteTypeLEGALCONFLICT
    | OfferProcessingNoteTypeNEEDCLASSIFICATIONINFORMATION
    | OfferProcessingNoteTypeNEEDINFORMATION
    | OfferProcessingNoteTypeNEEDPICTURES
    | OfferProcessingNoteTypeNEEDVENDOR
    | OfferProcessingNoteTypeNOCATEGORY
    | OfferProcessingNoteTypeNOKNOWLEDGE
    | OfferProcessingNoteTypeNOPARAMETERSINSHOPTITLE
    | OfferProcessingNoteTypeNOSIZEMEASURE
    | OfferProcessingNoteTypeSAMPLELINE


offerProcessingNoteTypeVariants : List OfferProcessingNoteType
offerProcessingNoteTypeVariants =
    [ OfferProcessingNoteTypeASSORTMENT
    , OfferProcessingNoteTypeCANCELLED
    , OfferProcessingNoteTypeCONFLICTINGINFORMATION
    , OfferProcessingNoteTypeOTHER
    , OfferProcessingNoteTypeDEPARTMENTFROZEN
    , OfferProcessingNoteTypeINCORRECTINFORMATION
    , OfferProcessingNoteTypeLEGALCONFLICT
    , OfferProcessingNoteTypeNEEDCLASSIFICATIONINFORMATION
    , OfferProcessingNoteTypeNEEDINFORMATION
    , OfferProcessingNoteTypeNEEDPICTURES
    , OfferProcessingNoteTypeNEEDVENDOR
    , OfferProcessingNoteTypeNOCATEGORY
    , OfferProcessingNoteTypeNOKNOWLEDGE
    , OfferProcessingNoteTypeNOPARAMETERSINSHOPTITLE
    , OfferProcessingNoteTypeNOSIZEMEASURE
    , OfferProcessingNoteTypeSAMPLELINE
    ]


{-| Информация о статусе публикации товара на Маркете.
-}
type alias OfferProcessingStateDTO =
    { status : Maybe OfferProcessingStatusType
    , notes : Maybe ( List OfferProcessingNoteDTO )
    }


{-| Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
-}
type OfferProcessingStatusType
    = OfferProcessingStatusTypeUNKNOWN
    | OfferProcessingStatusTypeREADY
    | OfferProcessingStatusTypeINWORK
    | OfferProcessingStatusTypeNEEDINFO
    | OfferProcessingStatusTypeNEEDMAPPING
    | OfferProcessingStatusTypeNEEDCONTENT
    | OfferProcessingStatusTypeCONTENTPROCESSING
    | OfferProcessingStatusTypeSUSPENDED
    | OfferProcessingStatusTypeREJECTED
    | OfferProcessingStatusTypeREVIEW
    | OfferProcessingStatusTypeCREATEERROR
    | OfferProcessingStatusTypeUPDATEERROR


offerProcessingStatusTypeVariants : List OfferProcessingStatusType
offerProcessingStatusTypeVariants =
    [ OfferProcessingStatusTypeUNKNOWN
    , OfferProcessingStatusTypeREADY
    , OfferProcessingStatusTypeINWORK
    , OfferProcessingStatusTypeNEEDINFO
    , OfferProcessingStatusTypeNEEDMAPPING
    , OfferProcessingStatusTypeNEEDCONTENT
    , OfferProcessingStatusTypeCONTENTPROCESSING
    , OfferProcessingStatusTypeSUSPENDED
    , OfferProcessingStatusTypeREJECTED
    , OfferProcessingStatusTypeREVIEW
    , OfferProcessingStatusTypeCREATEERROR
    , OfferProcessingStatusTypeUPDATEERROR
    ]


{-| Информация о состоянии цен и рекомендации. 
-}
type alias OfferRecommendationDTO =
    { offer : Maybe OfferForRecommendationDTO
    , recommendation : Maybe OfferRecommendationInfoDTO
    }


{-| Рекомендации, касающиеся цены на товар.
-}
type alias OfferRecommendationInfoDTO =
    { offerId : Maybe String
    , recommendedCofinancePrice : Maybe BasePriceDTO
    , competitivenessThresholds : Maybe PriceCompetitivenessThresholdsDTO
    }


{-| Список товаров с рекомендациями.
-}
type alias OfferRecommendationsResultDTO =
    { paging : Maybe ScrollingPagerDTO
    , offerRecommendations : List OfferRecommendationDTO
    }


{-| Информация о том, по каким моделям можно продавать товар, а по каким нельзя.
-}
type alias OfferSellingProgramDTO =
    { sellingProgram : SellingProgramType
    , status : OfferSellingProgramStatusType
    }


{-| Информация о доступности или недоступности.  * `FINE` — доступно. * `REJECT` — недоступно. 
-}
type OfferSellingProgramStatusType
    = OfferSellingProgramStatusTypeFINE
    | OfferSellingProgramStatusTypeREJECT


offerSellingProgramStatusTypeVariants : List OfferSellingProgramStatusType
offerSellingProgramStatusTypeVariants =
    [ OfferSellingProgramStatusTypeFINE
    , OfferSellingProgramStatusTypeREJECT
    ]


{-| Особый тип товара:  * `MEDICINE` — лекарства. * `BOOK` — бумажные и электронные книги. * `AUDIOBOOK` — аудиокниги. * `ARTIST_TITLE` — музыкальная и видеопродукция. * `ON_DEMAND` — товары на заказ.  {% note info \"Если ваш товар — книга\" %}  Укажите год издания в характеристиках товара. [Подробнее о параметре](../../reference/business-assortment/updateOfferMappings.md#offerparamdto)  {% endnote %} 
-}
type OfferType
    = OfferTypeDEFAULT
    | OfferTypeMEDICINE
    | OfferTypeBOOK
    | OfferTypeAUDIOBOOK
    | OfferTypeARTISTTITLE
    | OfferTypeONDEMAND


offerTypeVariants : List OfferType
offerTypeVariants =
    [ OfferTypeDEFAULT
    , OfferTypeMEDICINE
    , OfferTypeBOOK
    , OfferTypeAUDIOBOOK
    , OfferTypeARTISTTITLE
    , OfferTypeONDEMAND
    ]


{-| Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
-}
type alias OfferVendor =
    { }


{-| Артикул товара от производителя.
-}
type alias OfferVendorCode =
    { }


{-| Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png) 
-}
type alias OfferWeightDimensionsDTO =
    { length : Float
    , width : Float
    , height : Float
    , weight : Float
    }


{-| Найденные предложения магазина.
-}
type alias OffersDTO =
    { offers : List OfferDTO
    }


{-| Значение ограничивающей характеристики и список допустимых значений ограничиваемой характеристики.
-}
type alias OptionValuesLimitedDTO =
    { limitingOptionValueId : Int
    , optionValueIds : List Int
    }


{-| Информация о коробке.
-}
type alias OrderBoxLayoutDTO =
    { items : List OrderBoxLayoutItemDTO
    }


{-| Информация о товаре в коробке.
-}
type alias OrderBoxLayoutItemDTO =
    { id : Int
    , fullCount : Maybe Int
    , partialCount : Maybe OrderBoxLayoutPartialCountDTO
    , instances : Maybe ( List BriefOrderItemInstanceDTO )
    }


{-| Информация о части товара в коробке.
-}
type alias OrderBoxLayoutPartialCountDTO =
    { current : Int
    , total : Int
    }


{-| Распределение товаров по коробкам.
-}
type alias OrderBoxesLayoutDTO =
    { boxes : List EnrichedOrderBoxLayoutDTO
    }


{-| Информация о покупателе. 
-}
type alias OrderBusinessBuyerDTO =
    { inn : Maybe String
    , kpp : Maybe String
    , organizationName : Maybe String
    , organizationJurAddress : Maybe String
    }


{-| Информация о документах. 
-}
type alias OrderBusinessDocumentsDTO =
    { upd : Maybe DocumentDTO
    , ukd : Maybe DocumentDTO
    , torgTwelve : Maybe DocumentDTO
    , sf : Maybe DocumentDTO
    , ksf : Maybe DocumentDTO
    }


{-| Информация о покупателе с базовыми полями.
-}
type alias OrderBuyerBasicInfoDTO =
    { id : Maybe String
    , lastName : Maybe String
    , firstName : Maybe String
    , middleName : Maybe String
    , type_ : Maybe OrderBuyerType
    }


{-| Информация о покупателе.  Параметры `id`, `lastName`, `firstName` и `middleName` возвращаются, только если вы работаете по модели DBS. 
-}
type alias OrderBuyerDTO =
    { id : Maybe String
    , lastName : Maybe String
    , firstName : Maybe String
    , middleName : Maybe String
    , type_ : Maybe OrderBuyerType
    }


{-| Информация о покупателе и его номере телефона.
-}
type alias OrderBuyerInfoDTO =
    { id : Maybe String
    , lastName : Maybe String
    , firstName : Maybe String
    , middleName : Maybe String
    , type_ : Maybe OrderBuyerType
    , phone : Maybe String
    }


{-| Тип покупателя:  * `PERSON` — физическое лицо.  * `BUSINESS` — организация. 
-}
type OrderBuyerType
    = OrderBuyerTypePERSON
    | OrderBuyerTypeBUSINESS


orderBuyerTypeVariants : List OrderBuyerType
orderBuyerTypeVariants =
    [ OrderBuyerTypePERSON
    , OrderBuyerTypeBUSINESS
    ]


{-| Варианты причин, по которым заказ не может быть отменен.  * `ORDER_DELIVERED` — заказ уже доставлен. * `ORDER_IN_DELIVERY` — заказ уже у курьера. 
-}
type OrderCancellationReasonType
    = OrderCancellationReasonTypeDELIVERED
    | OrderCancellationReasonTypeINDELIVERY


orderCancellationReasonTypeVariants : List OrderCancellationReasonType
orderCancellationReasonTypeVariants =
    [ OrderCancellationReasonTypeDELIVERED
    , OrderCancellationReasonTypeINDELIVERY
    ]


{-| Информация о курьере.
-}
type alias OrderCourierDTO =
    { fullName : Maybe String
    , phone : Maybe String
    , phoneExtension : Maybe String
    , vehicleNumber : Maybe String
    , vehicleDescription : Maybe String
    }


{-| Заказ.
-}
type alias OrderDTO =
    { id : Maybe Int
    , status : Maybe OrderStatusType
    , substatus : Maybe OrderSubstatusType
    , creationDate : Maybe String
    , updatedAt : Maybe String
    , currency : Maybe CurrencyType
    , itemsTotal : Maybe Float
    , deliveryTotal : Maybe Float
    , buyerItemsTotal : Maybe Float
    , buyerTotal : Maybe Float
    , buyerItemsTotalBeforeDiscount : Maybe Float
    , buyerTotalBeforeDiscount : Maybe Float
    , paymentType : Maybe OrderPaymentType
    , paymentMethod : Maybe OrderPaymentMethodType
    , fake : Maybe Bool
    , items : List OrderItemDTO
    , subsidies : Maybe ( List OrderSubsidyDTO )
    , delivery : Maybe OrderDeliveryDTO
    , buyer : Maybe OrderBuyerDTO
    , notes : Maybe String
    , taxSystem : Maybe OrderTaxSystemType
    , cancelRequested : Maybe Bool
    , expiryDate : Maybe String
    }


{-| Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
-}
type alias OrderDeliveryAddressDTO =
    { country : Maybe String
    , postcode : Maybe String
    , city : Maybe String
    , district : Maybe String
    , subway : Maybe String
    , street : Maybe String
    , house : Maybe String
    , block : Maybe String
    , entrance : Maybe String
    , entryphone : Maybe String
    , floor : Maybe String
    , apartment : Maybe String
    , phone : Maybe String
    , recipient : Maybe String
    , gps : Maybe GpsDTO
    }


{-| Информация о доставке.
-}
type alias OrderDeliveryDTO =
    { id : Maybe String
    , type_ : Maybe OrderDeliveryType
    , serviceName : Maybe String
    , price : Maybe Float
    , deliveryPartnerType : Maybe OrderDeliveryPartnerType
    , courier : Maybe OrderCourierDTO
    , dates : Maybe OrderDeliveryDatesDTO
    , region : Maybe RegionDTO
    , address : Maybe OrderDeliveryAddressDTO
    , vat : Maybe OrderVatType
    , deliveryServiceId : Maybe Int
    , liftType : Maybe OrderLiftType
    , liftPrice : Maybe Float
    , outletCode : Maybe String
    , outletStorageLimitDate : Maybe String
    , dispatchType : Maybe OrderDeliveryDispatchType
    , tracks : Maybe ( List OrderTrackDTO )
    , shipments : Maybe ( List OrderShipmentDTO )
    , estimated : Maybe Bool
    , eacType : Maybe OrderDeliveryEacType
    , eacCode : Maybe String
    }


{-| Информация о новой дате доставки заказа.
-}
type alias OrderDeliveryDateDTO =
    { toDate : Posix
    }


{-| Причина переноса доставки заказа. Возможные причины изменения даты:   - ```USER_MOVED_DELIVERY_DATES``` — покупатель попросил изменить дату или вы договорились привезти ему заказ раньше изначальной даты. Кроме этого указывается для подтверждения даты доставки товаров на заказ с долгой (31-60 дней) доставкой.   - ```PARTNER_MOVED_DELIVERY_DATES``` — магазин не может доставить заказ в срок. 
-}
type OrderDeliveryDateReasonType
    = OrderDeliveryDateReasonTypeUSERMOVEDDELIVERYDATES
    | OrderDeliveryDateReasonTypePARTNERMOVEDDELIVERYDATES


orderDeliveryDateReasonTypeVariants : List OrderDeliveryDateReasonType
orderDeliveryDateReasonTypeVariants =
    [ OrderDeliveryDateReasonTypeUSERMOVEDDELIVERYDATES
    , OrderDeliveryDateReasonTypePARTNERMOVEDDELIVERYDATES
    ]


{-| Диапазон дат доставки.
-}
type alias OrderDeliveryDatesDTO =
    { fromDate : Maybe String
    , toDate : Maybe String
    , fromTime : Maybe String
    , toTime : Maybe String
    , realDeliveryDate : Maybe String
    }


{-| Способ отгрузки:  * `BUYER` — доставка покупателю.  * `MARKET_PARTNER_OUTLET` — доставка в пункт выдачи партнера.  * `MARKET_BRANDED_OUTLET` — доставка в пункт выдачи заказов Маркета.  * `SHOP_OUTLET` — доставка в пункт выдачи заказов магазина.  * `DROPOFF` — доставка в пункт выдачи, который принимает заказы от продавцов и передает их курьерам.  * `UNKNOWN` — неизвестный тип. 
-}
type OrderDeliveryDispatchType
    = OrderDeliveryDispatchTypeUNKNOWN
    | OrderDeliveryDispatchTypeBUYER
    | OrderDeliveryDispatchTypeMARKETPARTNEROUTLET
    | OrderDeliveryDispatchTypeMARKETBRANDEDOUTLET
    | OrderDeliveryDispatchTypeSHOPOUTLET
    | OrderDeliveryDispatchTypeDROPOFF


orderDeliveryDispatchTypeVariants : List OrderDeliveryDispatchType
orderDeliveryDispatchTypeVariants =
    [ OrderDeliveryDispatchTypeUNKNOWN
    , OrderDeliveryDispatchTypeBUYER
    , OrderDeliveryDispatchTypeMARKETPARTNEROUTLET
    , OrderDeliveryDispatchTypeMARKETBRANDEDOUTLET
    , OrderDeliveryDispatchTypeSHOPOUTLET
    , OrderDeliveryDispatchTypeDROPOFF
    ]


{-| Тип кода подтверждения ЭАПП:  * `MERCHANT_TO_COURIER` — продавец передает код курьеру.  * `COURIER_TO_MERCHANT` — курьер передает код продавцу.  * `CHECKING_BY_MERCHANT` — продавец проверяет код на своей стороне. 
-}
type OrderDeliveryEacType
    = OrderDeliveryEacTypeMERCHANTTOCOURIER
    | OrderDeliveryEacTypeCOURIERTOMERCHANT
    | OrderDeliveryEacTypeCHECKINGBYMERCHANT


orderDeliveryEacTypeVariants : List OrderDeliveryEacType
orderDeliveryEacTypeVariants =
    [ OrderDeliveryEacTypeMERCHANTTOCOURIER
    , OrderDeliveryEacTypeCOURIERTOMERCHANT
    , OrderDeliveryEacTypeCHECKINGBYMERCHANT
    ]


{-| Тип сотрудничества со службой доставки в рамках конкретного заказа:  * `SHOP` — магазин работает со службой доставки напрямую или доставляет заказы самостоятельно.  * `YANDEX_MARKET` — магазин работает со службой доставки через Маркет.  * `UNKNOWN` — неизвестный тип. 
-}
type OrderDeliveryPartnerType
    = OrderDeliveryPartnerTypeSHOP
    | OrderDeliveryPartnerTypeYANDEXMARKET
    | OrderDeliveryPartnerTypeUNKNOWN


orderDeliveryPartnerTypeVariants : List OrderDeliveryPartnerType
orderDeliveryPartnerTypeVariants =
    [ OrderDeliveryPartnerTypeSHOP
    , OrderDeliveryPartnerTypeYANDEXMARKET
    , OrderDeliveryPartnerTypeUNKNOWN
    ]


{-| Способ доставки заказа:  * `DELIVERY` — курьерская доставка.  * `PICKUP` — самовывоз.  * `POST` — почта.  * `DIGITAL` — для цифровых товаров.  * `UNKNOWN` — неизвестный тип. 
-}
type OrderDeliveryType
    = OrderDeliveryTypeDELIVERY
    | OrderDeliveryTypePICKUP
    | OrderDeliveryTypePOST
    | OrderDeliveryTypeDIGITAL
    | OrderDeliveryTypeUNKNOWN


orderDeliveryTypeVariants : List OrderDeliveryType
orderDeliveryTypeVariants =
    [ OrderDeliveryTypeDELIVERY
    , OrderDeliveryTypePICKUP
    , OrderDeliveryTypePOST
    , OrderDeliveryTypeDIGITAL
    , OrderDeliveryTypeUNKNOWN
    ]


{-| Ключ цифрового товара.
-}
type alias OrderDigitalItemDTO =
    { id : Int
    , code : String
    , slip : String
    , activateTill : Posix
    }


{-| Статус документа:  * `READY` — готов. * `NOT_READY` — не готов. 
-}
type OrderDocumentStatusType
    = OrderDocumentStatusTypeREADY
    | OrderDocumentStatusTypeNOTREADY


orderDocumentStatusTypeVariants : List OrderDocumentStatusType
orderDocumentStatusTypeVariants =
    [ OrderDocumentStatusTypeREADY
    , OrderDocumentStatusTypeNOTREADY
    ]


{-| Список товаров в заказе.
-}
type alias OrderItemDTO =
    { id : Maybe Int
    , offerId : Maybe String
    , offerName : Maybe String
    , price : Maybe Float
    , buyerPrice : Maybe Float
    , buyerPriceBeforeDiscount : Maybe Float
    , priceBeforeDiscount : Maybe Float
    , count : Maybe Int
    , vat : Maybe OrderVatType
    , shopSku : Maybe String
    , subsidy : Maybe Float
    , partnerWarehouseId : Maybe String
    , promos : Maybe ( List OrderItemPromoDTO )
    , instances : Maybe ( List OrderItemInstanceDTO )
    , details : Maybe ( List OrderItemDetailDTO )
    , subsidies : Maybe ( List OrderItemSubsidyDTO )
    , requiredInstanceTypes : Maybe ( List OrderItemInstanceType )
    }


{-| Детали по товару в заказе.
-}
type alias OrderItemDetailDTO =
    { itemCount : Maybe Int
    , itemStatus : Maybe OrderItemStatusType
    , updateDate : Maybe String
    }


{-| Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
-}
type alias OrderItemInstanceDTO =
    { cis : Maybe String
    , cisFull : Maybe String
    , uin : Maybe String
    , rnpt : Maybe String
    , gtd : Maybe String
    }


{-| Позиция в корзине, требующая маркировки.
-}
type alias OrderItemInstanceModificationDTO =
    { id : Int
    , instances : List BriefOrderItemInstanceDTO
    }


{-| Вид маркировки товара:  * `CIS` — КИЗ, идентификатор единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  * `UIN` — УИН, уникальный идентификационный номер.  * `RNPT` — РНПТ, регистрационный номер партии товара.  * `GTD` — номер ГТД, грузовой таможенной декларации. 
-}
type OrderItemInstanceType
    = OrderItemInstanceTypeCIS
    | OrderItemInstanceTypeUIN
    | OrderItemInstanceTypeRNPT
    | OrderItemInstanceTypeGTD


orderItemInstanceTypeVariants : List OrderItemInstanceType
orderItemInstanceTypeVariants =
    [ OrderItemInstanceTypeCIS
    , OrderItemInstanceTypeUIN
    , OrderItemInstanceTypeRNPT
    , OrderItemInstanceTypeGTD
    ]


{-| Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр. 
-}
type alias OrderItemModificationDTO =
    { id : Int
    , count : Int
    , instances : Maybe ( List BriefOrderItemInstanceDTO )
    }


{-| Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
-}
type alias OrderItemPromoDTO =
    { type_ : OrderPromoType
    , discount : Maybe Float
    , subsidy : Maybe Float
    , shopPromoId : Maybe String
    , marketPromoId : Maybe String
    }


{-| Возвращенный или невыкупленный товар:  * `REJECTED` — невыкупленный.  * `RETURNED` — возвращенный. 
-}
type OrderItemStatusType
    = OrderItemStatusTypeREJECTED
    | OrderItemStatusTypeRETURNED


orderItemStatusTypeVariants : List OrderItemStatusType
orderItemStatusTypeVariants =
    [ OrderItemStatusTypeREJECTED
    , OrderItemStatusTypeRETURNED
    ]


{-| Общее вознаграждение партнеру за все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса.  Передается в валюте заказа. 
-}
type alias OrderItemSubsidyDTO =
    { type_ : Maybe OrderItemSubsidyType
    , amount : Maybe Float
    }


{-| Тип субсидии:  * `YANDEX_CASHBACK` — скидка по подписке Яндекс Плюс.  * `SUBSIDY` — скидка Маркета (по акциям, промокодам, купонам и т. д.). 
-}
type OrderItemSubsidyType
    = OrderItemSubsidyTypeYANDEXCASHBACK
    | OrderItemSubsidyTypeSUBSIDY


orderItemSubsidyTypeVariants : List OrderItemSubsidyType
orderItemSubsidyTypeVariants =
    [ OrderItemSubsidyTypeYANDEXCASHBACK
    , OrderItemSubsidyTypeSUBSIDY
    ]


{-| Причина обновления состава заказа.
-}
type OrderItemsModificationRequestReasonType
    = OrderItemsModificationRequestReasonTypePARTNERREQUESTEDREMOVE
    | OrderItemsModificationRequestReasonTypeUSERREQUESTEDREMOVE


orderItemsModificationRequestReasonTypeVariants : List OrderItemsModificationRequestReasonType
orderItemsModificationRequestReasonTypeVariants =
    [ OrderItemsModificationRequestReasonTypePARTNERREQUESTEDREMOVE
    , OrderItemsModificationRequestReasonTypeUSERREQUESTEDREMOVE
    ]


{-| Краткие сведения о промаркированных товарах. Параметр возвращается, если ответ `OK`. 
-}
type alias OrderItemsModificationResultDTO =
    { items : List BriefOrderItemDTO
    }


{-| Данные для печати ярлыка.
-}
type alias OrderLabelDTO =
    { orderId : Int
    , placesNumber : Int
    , url : String
    , parcelBoxLabels : List ParcelBoxLabelDTO
    }


{-| Тип подъема заказа на этаж:  * `NOT_NEEDED` — не требуется.  * `MANUAL` — ручной.  * `ELEVATOR` — лифт.  * `CARGO_ELEVATOR` — грузовой лифт.  * `FREE` — любой из перечисленных выше, если включена опция бесплатного подъема.  * `UNKNOWN` — неизвестный тип. 
-}
type OrderLiftType
    = OrderLiftTypeNOTNEEDED
    | OrderLiftTypeMANUAL
    | OrderLiftTypeELEVATOR
    | OrderLiftTypeCARGOELEVATOR
    | OrderLiftTypeFREE
    | OrderLiftTypeUNKNOWN


orderLiftTypeVariants : List OrderLiftType
orderLiftTypeVariants =
    [ OrderLiftTypeNOTNEEDED
    , OrderLiftTypeMANUAL
    , OrderLiftTypeELEVATOR
    , OrderLiftTypeCARGOELEVATOR
    , OrderLiftTypeFREE
    , OrderLiftTypeUNKNOWN
    ]


{-| Информация о грузоместе.
-}
type alias OrderParcelBoxDTO =
    { id : Maybe Int
    , fulfilmentId : Maybe String
    }


{-| Способ оплаты заказа:  * Значения, если выбрана оплата при оформлении заказа (`\"paymentType\": \"PREPAID\"`):    * `YANDEX` — банковской картой.    * `APPLE_PAY` — Apple Pay.    * `GOOGLE_PAY` — Google Pay.    * `CREDIT` — в кредит.    * `TINKOFF_CREDIT` — в кредит в Тинькофф Банке.    * `TINKOFF_INSTALLMENTS` — рассрочка в Тинькофф Банке.    * `EXTERNAL_CERTIFICATE` — подарочным сертификатом (например, из приложения «Сбербанк Онлайн»).    * `SBP` — через систему быстрых платежей.    * `B2B_ACCOUNT_PREPAYMENT` — заказ оплачивает организация.   * Значения, если выбрана оплата при получении заказа (`\"paymentType\": \"POSTPAID\"`):    * `CARD_ON_DELIVERY` — банковской картой.    * `BOUND_CARD_ON_DELIVERY` — привязанной картой при получении.    * `CASH_ON_DELIVERY` — наличными.    * `B2B_ACCOUNT_POSTPAYMENT` — заказ оплачивает организация после доставки.  * `UNKNOWN` — неизвестный тип.  Значение по умолчанию: `CASH_ON_DELIVERY`. 
-}
type OrderPaymentMethodType
    = OrderPaymentMethodTypeCASHONDELIVERY
    | OrderPaymentMethodTypeCARDONDELIVERY
    | OrderPaymentMethodTypeBOUNDCARDONDELIVERY
    | OrderPaymentMethodTypeYANDEX
    | OrderPaymentMethodTypeAPPLEPAY
    | OrderPaymentMethodTypeEXTERNALCERTIFICATE
    | OrderPaymentMethodTypeCREDIT
    | OrderPaymentMethodTypeGOOGLEPAY
    | OrderPaymentMethodTypeTINKOFFCREDIT
    | OrderPaymentMethodTypeSBP
    | OrderPaymentMethodTypeTINKOFFINSTALLMENTS
    | OrderPaymentMethodTypeB2BACCOUNTPREPAYMENT
    | OrderPaymentMethodTypeB2BACCOUNTPOSTPAYMENT
    | OrderPaymentMethodTypeUNKNOWN


orderPaymentMethodTypeVariants : List OrderPaymentMethodType
orderPaymentMethodTypeVariants =
    [ OrderPaymentMethodTypeCASHONDELIVERY
    , OrderPaymentMethodTypeCARDONDELIVERY
    , OrderPaymentMethodTypeBOUNDCARDONDELIVERY
    , OrderPaymentMethodTypeYANDEX
    , OrderPaymentMethodTypeAPPLEPAY
    , OrderPaymentMethodTypeEXTERNALCERTIFICATE
    , OrderPaymentMethodTypeCREDIT
    , OrderPaymentMethodTypeGOOGLEPAY
    , OrderPaymentMethodTypeTINKOFFCREDIT
    , OrderPaymentMethodTypeSBP
    , OrderPaymentMethodTypeTINKOFFINSTALLMENTS
    , OrderPaymentMethodTypeB2BACCOUNTPREPAYMENT
    , OrderPaymentMethodTypeB2BACCOUNTPOSTPAYMENT
    , OrderPaymentMethodTypeUNKNOWN
    ]


{-| Тип оплаты заказа:  * `PREPAID` — оплата при оформлении заказа.  * `POSTPAID` — оплата при получении заказа.  * `UNKNOWN` — неизвестный тип.  Если параметр отсутствует, заказ будет оплачен при получении. 
-}
type OrderPaymentType
    = OrderPaymentTypePREPAID
    | OrderPaymentTypePOSTPAID
    | OrderPaymentTypeUNKNOWN


orderPaymentTypeVariants : List OrderPaymentType
orderPaymentTypeVariants =
    [ OrderPaymentTypePREPAID
    , OrderPaymentTypePOSTPAID
    , OrderPaymentTypeUNKNOWN
    ]


{-| Тип скидки:  * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет.  * `BLUE_SET` — комплекты.  * `BLUE_FLASH` — флеш-акция.  * `MARKET_COUPON` — скидка по промокоду Маркета.  * `MARKET_PROMOCODE` — скидка по промокоду магазина.  * `MARKET_BLUE` — скидка на Маркете.  * `YANDEX_PLUS` — бесплатная доставка с подпиской Яндекс Плюс.  * `YANDEX_EMPLOYEE` — бесплатная доставка по определенным адресам.  * `LIMITED_FREE_DELIVERY_PROMO` — бесплатная доставка по ограниченному предложению.  * `FREE_DELIVERY_THRESHOLD` — бесплатная доставка при достижении определенной суммы заказа.  * `MULTICART_DISCOUNT` — скидка за то, что оформлена мультикорзина.  * `FREE_DELIVERY_FOR_LDI` — бесплатная доставка за то, что один из товаров крупногабаритный.  * `FREE_DELIVERY_FOR_LSC` — бесплатная доставка за то, что одна из корзин в мультикорзине крупногабаритная.  * `FREE_PICKUP` — бесплатная доставка в пункт выдачи заказов.  * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок.  * `CASHBACK` — кешбэк.  * `SUPPLIER_MULTICART_DISCOUNT` — скидка за доставку.  * `SPREAD_DISCOUNT_COUNT` — скидка за количество одинаковых товаров.  * `SPREAD_DISCOUNT_RECEIPT` — скидка от суммы чека.  * `ANNOUNCEMENT_PROMO` — информационная акция, скидка не применяется к товарам.  * `DISCOUNT_BY_PAYMENT_TYPE` — прямая скидка при оплате картой Плюса.  * `PERCENT_DISCOUNT` — прямая скидка в процентах.  * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета.  * `EMPTY_PROMO` — скрытые промокоды.  * `BLOCKING_PROMO` — блокирующее промо.  * `UNKNOWN` — неизвестный тип.  Устаревшие типы:  * `GENERIC_BUNDLE`.  * `MARKET_DEAL`.  * `MARKET_PRIME`.  * `MARKET_COIN`.  * `BERU_PLUS`.  * `PRICE_DROP_AS_YOU_SHOP`.  * `SECRET_SALE`. 
-}
type OrderPromoType
    = OrderPromoTypeDIRECTDISCOUNT
    | OrderPromoTypeBLUESET
    | OrderPromoTypeBLUEFLASH
    | OrderPromoTypeGENERICBUNDLE
    | OrderPromoTypeMARKETCOUPON
    | OrderPromoTypeMARKETPROMOCODE
    | OrderPromoTypeMARKETDEAL
    | OrderPromoTypeMARKETBLUE
    | OrderPromoTypeMARKETPRIME
    | OrderPromoTypeYANDEXPLUS
    | OrderPromoTypeBERUPLUS
    | OrderPromoTypeMARKETCOIN
    | OrderPromoTypeYANDEXEMPLOYEE
    | OrderPromoTypeLIMITEDFREEDELIVERYPROMO
    | OrderPromoTypeFREEDELIVERYTHRESHOLD
    | OrderPromoTypeMULTICARTDISCOUNT
    | OrderPromoTypePRICEDROPASYOUSHOP
    | OrderPromoTypeFREEDELIVERYFORLDI
    | OrderPromoTypeFREEDELIVERYFORLSC
    | OrderPromoTypeSECRETSALE
    | OrderPromoTypeFREEPICKUP
    | OrderPromoTypeCHEAPESTASGIFT
    | OrderPromoTypeCASHBACK
    | OrderPromoTypeSUPPLIERMULTICARTDISCOUNT
    | OrderPromoTypeSPREADDISCOUNTCOUNT
    | OrderPromoTypeSPREADDISCOUNTRECEIPT
    | OrderPromoTypeANNOUNCEMENTPROMO
    | OrderPromoTypeDISCOUNTBYPAYMENTTYPE
    | OrderPromoTypePERCENTDISCOUNT
    | OrderPromoTypeDCOEXTRADISCOUNT
    | OrderPromoTypeEMPTYPROMO
    | OrderPromoTypeBLOCKINGPROMO
    | OrderPromoTypeUNKNOWN


orderPromoTypeVariants : List OrderPromoType
orderPromoTypeVariants =
    [ OrderPromoTypeDIRECTDISCOUNT
    , OrderPromoTypeBLUESET
    , OrderPromoTypeBLUEFLASH
    , OrderPromoTypeGENERICBUNDLE
    , OrderPromoTypeMARKETCOUPON
    , OrderPromoTypeMARKETPROMOCODE
    , OrderPromoTypeMARKETDEAL
    , OrderPromoTypeMARKETBLUE
    , OrderPromoTypeMARKETPRIME
    , OrderPromoTypeYANDEXPLUS
    , OrderPromoTypeBERUPLUS
    , OrderPromoTypeMARKETCOIN
    , OrderPromoTypeYANDEXEMPLOYEE
    , OrderPromoTypeLIMITEDFREEDELIVERYPROMO
    , OrderPromoTypeFREEDELIVERYTHRESHOLD
    , OrderPromoTypeMULTICARTDISCOUNT
    , OrderPromoTypePRICEDROPASYOUSHOP
    , OrderPromoTypeFREEDELIVERYFORLDI
    , OrderPromoTypeFREEDELIVERYFORLSC
    , OrderPromoTypeSECRETSALE
    , OrderPromoTypeFREEPICKUP
    , OrderPromoTypeCHEAPESTASGIFT
    , OrderPromoTypeCASHBACK
    , OrderPromoTypeSUPPLIERMULTICARTDISCOUNT
    , OrderPromoTypeSPREADDISCOUNTCOUNT
    , OrderPromoTypeSPREADDISCOUNTRECEIPT
    , OrderPromoTypeANNOUNCEMENTPROMO
    , OrderPromoTypeDISCOUNTBYPAYMENTTYPE
    , OrderPromoTypePERCENTDISCOUNT
    , OrderPromoTypeDCOEXTRADISCOUNT
    , OrderPromoTypeEMPTYPROMO
    , OrderPromoTypeBLOCKINGPROMO
    , OrderPromoTypeUNKNOWN
    ]


{-| Список посылок.  В параметре может указываться несколько посылок. 
-}
type alias OrderShipmentDTO =
    { id : Maybe Int
    , shipmentDate : Maybe String
    , shipmentTime : Maybe String
    , tracks : Maybe ( List OrderTrackDTO )
    , boxes : Maybe ( List OrderParcelBoxDTO )
    }


{-| Информация по заказу.
-}
type alias OrderStateDTO =
    { id : Int
    , status : OrderStatusType
    , substatus : Maybe OrderSubstatusType
    }


{-| Текущий статус заказа:  * `CANCELLED_BEFORE_PROCESSING` — заказ отменен до начала его обработки.  * `CANCELLED_IN_DELIVERY` — заказ отменен во время его доставки.  * `CANCELLED_IN_PROCESSING` — заказ отменен во время его обработки.  * `DELIVERY` — заказ передан службе доставки.  * `DELIVERED` — заказ доставлен.  * `PARTIALLY_DELIVERED` — заказ частично доставлен.  * `PARTIALLY_RETURNED` — заказ частично возвращен покупателем.  * `PENDING` — заказ ожидает подтверждения.  * `PICKUP` — заказ доставлен в пункт выдачи.  * `PROCESSING` — заказ в обработке.  * `RESERVED` — товар зарезервирован на складе.  * `RETURNED` — заказ полностью возвращен покупателем.  * `UNKNOWN` — неизвестный статус заказа.  * `UNPAID` — заказ от юридического лица ожидает оплаты.  * `LOST` — заказ утерян. 
-}
type OrderStatsStatusType
    = OrderStatsStatusTypeCANCELLEDBEFOREPROCESSING
    | OrderStatsStatusTypeCANCELLEDINDELIVERY
    | OrderStatsStatusTypeCANCELLEDINPROCESSING
    | OrderStatsStatusTypeDELIVERY
    | OrderStatsStatusTypeDELIVERED
    | OrderStatsStatusTypePARTIALLYDELIVERED
    | OrderStatsStatusTypePARTIALLYRETURNED
    | OrderStatsStatusTypePENDING
    | OrderStatsStatusTypePICKUP
    | OrderStatsStatusTypePROCESSING
    | OrderStatsStatusTypeRESERVED
    | OrderStatsStatusTypeRETURNED
    | OrderStatsStatusTypeUNKNOWN
    | OrderStatsStatusTypeUNPAID
    | OrderStatsStatusTypeLOST


orderStatsStatusTypeVariants : List OrderStatsStatusType
orderStatsStatusTypeVariants =
    [ OrderStatsStatusTypeCANCELLEDBEFOREPROCESSING
    , OrderStatsStatusTypeCANCELLEDINDELIVERY
    , OrderStatsStatusTypeCANCELLEDINPROCESSING
    , OrderStatsStatusTypeDELIVERY
    , OrderStatsStatusTypeDELIVERED
    , OrderStatsStatusTypePARTIALLYDELIVERED
    , OrderStatsStatusTypePARTIALLYRETURNED
    , OrderStatsStatusTypePENDING
    , OrderStatsStatusTypePICKUP
    , OrderStatsStatusTypePROCESSING
    , OrderStatsStatusTypeRESERVED
    , OrderStatsStatusTypeRETURNED
    , OrderStatsStatusTypeUNKNOWN
    , OrderStatsStatusTypeUNPAID
    , OrderStatsStatusTypeLOST
    ]


{-| Заказ.
-}
type alias OrderStatusChangeDTO =
    { status : OrderStatusType
    , substatus : Maybe OrderSubstatusType
    , delivery : Maybe OrderStatusChangeDeliveryDTO
    }


{-| Информация о доставке.
-}
type alias OrderStatusChangeDeliveryDTO =
    { dates : Maybe OrderStatusChangeDeliveryDatesDTO
    }


{-| Диапазон дат доставки.
-}
type alias OrderStatusChangeDeliveryDatesDTO =
    { realDeliveryDate : Maybe Posix
    }


{-| Статус заказа:  * `CANCELLED` — отменен.  * `DELIVERED` — получен покупателем.  * `DELIVERY` — передан в службу доставки.  * `PICKUP` — доставлен в пункт самовывоза.  * `PROCESSING` — находится в обработке.  * `PENDING` — ожидает обработки со стороны продавца.  * `UNPAID` — оформлен, но еще не оплачен (если выбрана оплата при оформлении).  * `PLACING` — оформляется, подготовка к резервированию.  * `RESERVED` — зарезервирован, но недооформлен.  * `PARTIALLY_RETURNED` — возвращен частично.  * `RETURNED` — возвращен полностью.  * `UNKNOWN` — неизвестный статус.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
-}
type OrderStatusType
    = OrderStatusTypePLACING
    | OrderStatusTypeRESERVED
    | OrderStatusTypeUNPAID
    | OrderStatusTypePROCESSING
    | OrderStatusTypeDELIVERY
    | OrderStatusTypePICKUP
    | OrderStatusTypeDELIVERED
    | OrderStatusTypeCANCELLED
    | OrderStatusTypePENDING
    | OrderStatusTypePARTIALLYRETURNED
    | OrderStatusTypeRETURNED
    | OrderStatusTypeUNKNOWN


orderStatusTypeVariants : List OrderStatusType
orderStatusTypeVariants =
    [ OrderStatusTypePLACING
    , OrderStatusTypeRESERVED
    , OrderStatusTypeUNPAID
    , OrderStatusTypePROCESSING
    , OrderStatusTypeDELIVERY
    , OrderStatusTypePICKUP
    , OrderStatusTypeDELIVERED
    , OrderStatusTypeCANCELLED
    , OrderStatusTypePENDING
    , OrderStatusTypePARTIALLYRETURNED
    , OrderStatusTypeRETURNED
    , OrderStatusTypeUNKNOWN
    ]


{-| Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам, купонам и акциям; * по баллам Плюса; * по доставке (DBS).  Передается в валюте заказа. 
-}
type alias OrderSubsidyDTO =
    { type_ : Maybe OrderSubsidyType
    , amount : Maybe Float
    }


{-| Тип субсидии:  * `YANDEX_CASHBACK` — скидка по подписке Яндекс Плюс.  * `SUBSIDY` — скидка Маркета (по акциям, промокодам, купонам и т. д.)  * `DELIVERY` — скидка за доставку (DBS). 
-}
type OrderSubsidyType
    = OrderSubsidyTypeYANDEXCASHBACK
    | OrderSubsidyTypeSUBSIDY
    | OrderSubsidyTypeDELIVERY


orderSubsidyTypeVariants : List OrderSubsidyType
orderSubsidyTypeVariants =
    [ OrderSubsidyTypeYANDEXCASHBACK
    , OrderSubsidyTypeSUBSIDY
    , OrderSubsidyTypeDELIVERY
    ]


{-| Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).  * Значения для заказа в статусе `PROCESSING`:      * `STARTED` — заказ подтвержден, его можно начать обрабатывать.      * `READY_TO_SHIP` — заказ собран и готов к отправке.  * Значения для заказа в статусе `CANCELLED`:      * `PROCESSING_EXPIRED` — значение более не используется.      * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.      * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.      * `SHOP_FAILED` — магазин не может выполнить заказ.      * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.      * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.      * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.      * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.      * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.      * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:        * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;       * перерыв между первым и третьим звонком не менее 90 минут;       * соединение не короче 5 секунд.        Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.  * `TECHNICAL_ERROR` — техническая ошибка на стороне Маркета. Обратитесь в поддержку.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
-}
type OrderSubstatusType
    = OrderSubstatusTypeRESERVATIONEXPIRED
    | OrderSubstatusTypeUSERNOTPAID
    | OrderSubstatusTypeUSERUNREACHABLE
    | OrderSubstatusTypeUSERCHANGEDMIND
    | OrderSubstatusTypeUSERREFUSEDDELIVERY
    | OrderSubstatusTypeUSERREFUSEDPRODUCT
    | OrderSubstatusTypeSHOPFAILED
    | OrderSubstatusTypeUSERREFUSEDQUALITY
    | OrderSubstatusTypeREPLACINGORDER
    | OrderSubstatusTypePROCESSINGEXPIRED
    | OrderSubstatusTypePENDINGEXPIRED
    | OrderSubstatusTypeSHOPPENDINGCANCELLED
    | OrderSubstatusTypePENDINGCANCELLED
    | OrderSubstatusTypeUSERFRAUD
    | OrderSubstatusTypeRESERVATIONFAILED
    | OrderSubstatusTypeUSERPLACEDOTHERORDER
    | OrderSubstatusTypeUSERBOUGHTCHEAPER
    | OrderSubstatusTypeMISSINGITEM
    | OrderSubstatusTypeBROKENITEM
    | OrderSubstatusTypeWRONGITEM
    | OrderSubstatusTypePICKUPEXPIRED
    | OrderSubstatusTypeDELIVERYPROBLEMS
    | OrderSubstatusTypeLATECONTACT
    | OrderSubstatusTypeCUSTOM
    | OrderSubstatusTypeDELIVERYSERVICEFAILED
    | OrderSubstatusTypeWAREHOUSEFAILEDTOSHIP
    | OrderSubstatusTypeDELIVERYSERIVCEUNDELIVERED
    | OrderSubstatusTypeDELIVERYSERVICEUNDELIVERED
    | OrderSubstatusTypePREORDER
    | OrderSubstatusTypeAWAITCONFIRMATION
    | OrderSubstatusTypeSTARTED
    | OrderSubstatusTypePACKAGING
    | OrderSubstatusTypeREADYTOSHIP
    | OrderSubstatusTypeSHIPPED
    | OrderSubstatusTypeASYNCPROCESSING
    | OrderSubstatusTypeUSERREFUSEDTOPROVIDEPERSONALDATA
    | OrderSubstatusTypeWAITINGUSERINPUT
    | OrderSubstatusTypeWAITINGBANKDECISION
    | OrderSubstatusTypeBANKREJECTCREDITOFFER
    | OrderSubstatusTypeCUSTOMERREJECTCREDITOFFER
    | OrderSubstatusTypeCREDITOFFERFAILED
    | OrderSubstatusTypeAWAITDELIVERYDATESCONFIRMATION
    | OrderSubstatusTypeSERVICEFAULT
    | OrderSubstatusTypeDELIVERYSERVICERECEIVED
    | OrderSubstatusTypeUSERRECEIVED
    | OrderSubstatusTypeWAITINGFORSTOCKS
    | OrderSubstatusTypeASPARTOFMULTIORDER
    | OrderSubstatusTypeREADYFORLASTMILE
    | OrderSubstatusTypeLASTMILESTARTED
    | OrderSubstatusTypeANTIFRAUD
    | OrderSubstatusTypeDELIVERYUSERNOTRECEIVED
    | OrderSubstatusTypeDELIVERYSERVICEDELIVERED
    | OrderSubstatusTypeDELIVEREDUSERNOTRECEIVED
    | OrderSubstatusTypeUSERWANTEDANOTHERPAYMENTMETHOD
    | OrderSubstatusTypeUSERRECEIVEDTECHNICALERROR
    | OrderSubstatusTypeUSERFORGOTTOUSEBONUS
    | OrderSubstatusTypeRECEIVEDONDISTRIBUTIONCENTER
    | OrderSubstatusTypeDELIVERYSERVICENOTRECEIVED
    | OrderSubstatusTypeDELIVERYSERVICELOST
    | OrderSubstatusTypeSHIPPEDTOWRONGDELIVERYSERVICE
    | OrderSubstatusTypeDELIVEREDUSERRECEIVED
    | OrderSubstatusTypeWAITINGTINKOFFDECISION
    | OrderSubstatusTypeCOURIERSEARCH
    | OrderSubstatusTypeCOURIERFOUND
    | OrderSubstatusTypeCOURIERINTRANSITTOSENDER
    | OrderSubstatusTypeCOURIERARRIVEDTOSENDER
    | OrderSubstatusTypeCOURIERRECEIVED
    | OrderSubstatusTypeCOURIERNOTFOUND
    | OrderSubstatusTypeCOURIERNOTDELIVERORDER
    | OrderSubstatusTypeCOURIERRETURNSORDER
    | OrderSubstatusTypeCOURIERRETURNEDORDER
    | OrderSubstatusTypeWAITINGUSERDELIVERYINPUT
    | OrderSubstatusTypePICKUPSERVICERECEIVED
    | OrderSubstatusTypePICKUPUSERRECEIVED
    | OrderSubstatusTypeCANCELLEDCOURIERNOTFOUND
    | OrderSubstatusTypeCOURIERNOTCOMEFORORDER
    | OrderSubstatusTypeDELIVERYNOTMANAGEDREGION
    | OrderSubstatusTypeINCOMPLETECONTACTINFORMATION
    | OrderSubstatusTypeINCOMPLETEMULTIORDER
    | OrderSubstatusTypeINAPPROPRIATEWEIGHTSIZE
    | OrderSubstatusTypeTECHNICALERROR
    | OrderSubstatusTypeSORTINGCENTERLOST
    | OrderSubstatusTypeCOURIERSEARCHNOTSTARTED
    | OrderSubstatusTypeLOST
    | OrderSubstatusTypeAWAITPAYMENT
    | OrderSubstatusTypeAWAITLAVKARESERVATION
    | OrderSubstatusTypeUSERWANTSTOCHANGEADDRESS
    | OrderSubstatusTypeFULLNOTRANSOM
    | OrderSubstatusTypePRESCRIPTIONMISMATCH
    | OrderSubstatusTypeDROPOFFLOST
    | OrderSubstatusTypeDROPOFFCLOSED
    | OrderSubstatusTypeDELIVERYTOSTORESTARTED
    | OrderSubstatusTypeUSERWANTSTOCHANGEDELIVERYDATE
    | OrderSubstatusTypeWRONGITEMDELIVERED
    | OrderSubstatusTypeDAMAGEDBOX
    | OrderSubstatusTypeAWAITDELIVERYDATES
    | OrderSubstatusTypeLASTMILECOURIERSEARCH
    | OrderSubstatusTypePICKUPPOINTCLOSED
    | OrderSubstatusTypeLEGALINFOCHANGED
    | OrderSubstatusTypeUSERHASNOTIMETOPICKUPORDER
    | OrderSubstatusTypeDELIVERYCUSTOMSARRIVED
    | OrderSubstatusTypeDELIVERYCUSTOMSCLEARED
    | OrderSubstatusTypeFIRSTMILEDELIVERYSERVICERECEIVED
    | OrderSubstatusTypeAWAITAUTODELIVERYDATES
    | OrderSubstatusTypeAWAITUSERPERSONALDATA
    | OrderSubstatusTypeNOPERSONALDATAEXPIRED
    | OrderSubstatusTypeCUSTOMSPROBLEMS
    | OrderSubstatusTypeAWAITCASHIER
    | OrderSubstatusTypeWAITINGPOSTPAIDBUDGETRESERVATION
    | OrderSubstatusTypeAWAITSERVICEABLECONFIRMATION
    | OrderSubstatusTypePOSTPAIDBUDGETRESERVATIONFAILED
    | OrderSubstatusTypeAWAITCUSTOMPRICECONFIRMATION
    | OrderSubstatusTypeREADYFORPICKUP
    | OrderSubstatusTypeUNKNOWN


orderSubstatusTypeVariants : List OrderSubstatusType
orderSubstatusTypeVariants =
    [ OrderSubstatusTypeRESERVATIONEXPIRED
    , OrderSubstatusTypeUSERNOTPAID
    , OrderSubstatusTypeUSERUNREACHABLE
    , OrderSubstatusTypeUSERCHANGEDMIND
    , OrderSubstatusTypeUSERREFUSEDDELIVERY
    , OrderSubstatusTypeUSERREFUSEDPRODUCT
    , OrderSubstatusTypeSHOPFAILED
    , OrderSubstatusTypeUSERREFUSEDQUALITY
    , OrderSubstatusTypeREPLACINGORDER
    , OrderSubstatusTypePROCESSINGEXPIRED
    , OrderSubstatusTypePENDINGEXPIRED
    , OrderSubstatusTypeSHOPPENDINGCANCELLED
    , OrderSubstatusTypePENDINGCANCELLED
    , OrderSubstatusTypeUSERFRAUD
    , OrderSubstatusTypeRESERVATIONFAILED
    , OrderSubstatusTypeUSERPLACEDOTHERORDER
    , OrderSubstatusTypeUSERBOUGHTCHEAPER
    , OrderSubstatusTypeMISSINGITEM
    , OrderSubstatusTypeBROKENITEM
    , OrderSubstatusTypeWRONGITEM
    , OrderSubstatusTypePICKUPEXPIRED
    , OrderSubstatusTypeDELIVERYPROBLEMS
    , OrderSubstatusTypeLATECONTACT
    , OrderSubstatusTypeCUSTOM
    , OrderSubstatusTypeDELIVERYSERVICEFAILED
    , OrderSubstatusTypeWAREHOUSEFAILEDTOSHIP
    , OrderSubstatusTypeDELIVERYSERIVCEUNDELIVERED
    , OrderSubstatusTypeDELIVERYSERVICEUNDELIVERED
    , OrderSubstatusTypePREORDER
    , OrderSubstatusTypeAWAITCONFIRMATION
    , OrderSubstatusTypeSTARTED
    , OrderSubstatusTypePACKAGING
    , OrderSubstatusTypeREADYTOSHIP
    , OrderSubstatusTypeSHIPPED
    , OrderSubstatusTypeASYNCPROCESSING
    , OrderSubstatusTypeUSERREFUSEDTOPROVIDEPERSONALDATA
    , OrderSubstatusTypeWAITINGUSERINPUT
    , OrderSubstatusTypeWAITINGBANKDECISION
    , OrderSubstatusTypeBANKREJECTCREDITOFFER
    , OrderSubstatusTypeCUSTOMERREJECTCREDITOFFER
    , OrderSubstatusTypeCREDITOFFERFAILED
    , OrderSubstatusTypeAWAITDELIVERYDATESCONFIRMATION
    , OrderSubstatusTypeSERVICEFAULT
    , OrderSubstatusTypeDELIVERYSERVICERECEIVED
    , OrderSubstatusTypeUSERRECEIVED
    , OrderSubstatusTypeWAITINGFORSTOCKS
    , OrderSubstatusTypeASPARTOFMULTIORDER
    , OrderSubstatusTypeREADYFORLASTMILE
    , OrderSubstatusTypeLASTMILESTARTED
    , OrderSubstatusTypeANTIFRAUD
    , OrderSubstatusTypeDELIVERYUSERNOTRECEIVED
    , OrderSubstatusTypeDELIVERYSERVICEDELIVERED
    , OrderSubstatusTypeDELIVEREDUSERNOTRECEIVED
    , OrderSubstatusTypeUSERWANTEDANOTHERPAYMENTMETHOD
    , OrderSubstatusTypeUSERRECEIVEDTECHNICALERROR
    , OrderSubstatusTypeUSERFORGOTTOUSEBONUS
    , OrderSubstatusTypeRECEIVEDONDISTRIBUTIONCENTER
    , OrderSubstatusTypeDELIVERYSERVICENOTRECEIVED
    , OrderSubstatusTypeDELIVERYSERVICELOST
    , OrderSubstatusTypeSHIPPEDTOWRONGDELIVERYSERVICE
    , OrderSubstatusTypeDELIVEREDUSERRECEIVED
    , OrderSubstatusTypeWAITINGTINKOFFDECISION
    , OrderSubstatusTypeCOURIERSEARCH
    , OrderSubstatusTypeCOURIERFOUND
    , OrderSubstatusTypeCOURIERINTRANSITTOSENDER
    , OrderSubstatusTypeCOURIERARRIVEDTOSENDER
    , OrderSubstatusTypeCOURIERRECEIVED
    , OrderSubstatusTypeCOURIERNOTFOUND
    , OrderSubstatusTypeCOURIERNOTDELIVERORDER
    , OrderSubstatusTypeCOURIERRETURNSORDER
    , OrderSubstatusTypeCOURIERRETURNEDORDER
    , OrderSubstatusTypeWAITINGUSERDELIVERYINPUT
    , OrderSubstatusTypePICKUPSERVICERECEIVED
    , OrderSubstatusTypePICKUPUSERRECEIVED
    , OrderSubstatusTypeCANCELLEDCOURIERNOTFOUND
    , OrderSubstatusTypeCOURIERNOTCOMEFORORDER
    , OrderSubstatusTypeDELIVERYNOTMANAGEDREGION
    , OrderSubstatusTypeINCOMPLETECONTACTINFORMATION
    , OrderSubstatusTypeINCOMPLETEMULTIORDER
    , OrderSubstatusTypeINAPPROPRIATEWEIGHTSIZE
    , OrderSubstatusTypeTECHNICALERROR
    , OrderSubstatusTypeSORTINGCENTERLOST
    , OrderSubstatusTypeCOURIERSEARCHNOTSTARTED
    , OrderSubstatusTypeLOST
    , OrderSubstatusTypeAWAITPAYMENT
    , OrderSubstatusTypeAWAITLAVKARESERVATION
    , OrderSubstatusTypeUSERWANTSTOCHANGEADDRESS
    , OrderSubstatusTypeFULLNOTRANSOM
    , OrderSubstatusTypePRESCRIPTIONMISMATCH
    , OrderSubstatusTypeDROPOFFLOST
    , OrderSubstatusTypeDROPOFFCLOSED
    , OrderSubstatusTypeDELIVERYTOSTORESTARTED
    , OrderSubstatusTypeUSERWANTSTOCHANGEDELIVERYDATE
    , OrderSubstatusTypeWRONGITEMDELIVERED
    , OrderSubstatusTypeDAMAGEDBOX
    , OrderSubstatusTypeAWAITDELIVERYDATES
    , OrderSubstatusTypeLASTMILECOURIERSEARCH
    , OrderSubstatusTypePICKUPPOINTCLOSED
    , OrderSubstatusTypeLEGALINFOCHANGED
    , OrderSubstatusTypeUSERHASNOTIMETOPICKUPORDER
    , OrderSubstatusTypeDELIVERYCUSTOMSARRIVED
    , OrderSubstatusTypeDELIVERYCUSTOMSCLEARED
    , OrderSubstatusTypeFIRSTMILEDELIVERYSERVICERECEIVED
    , OrderSubstatusTypeAWAITAUTODELIVERYDATES
    , OrderSubstatusTypeAWAITUSERPERSONALDATA
    , OrderSubstatusTypeNOPERSONALDATAEXPIRED
    , OrderSubstatusTypeCUSTOMSPROBLEMS
    , OrderSubstatusTypeAWAITCASHIER
    , OrderSubstatusTypeWAITINGPOSTPAIDBUDGETRESERVATION
    , OrderSubstatusTypeAWAITSERVICEABLECONFIRMATION
    , OrderSubstatusTypePOSTPAIDBUDGETRESERVATIONFAILED
    , OrderSubstatusTypeAWAITCUSTOMPRICECONFIRMATION
    , OrderSubstatusTypeREADYFORPICKUP
    , OrderSubstatusTypeUNKNOWN
    ]


{-| Система налогообложения (СНО) магазина на момент оформления заказа:  * `ECHN` — единый сельскохозяйственный налог (ЕСХН).  * `ENVD` — единый налог на вмененный доход (ЕНВД).  * `OSN` — общая система налогообложения (ОСН).  * `PSN` — патентная система налогообложения (ПСН).  * `USN` — упрощенная система налогообложения (УСН).  * `USN_MINUS_COST` — упрощенная система налогообложения, доходы, уменьшенные на величину расходов (УСН «Доходы минус расходы»).  * `NPD` — налог на профессиональный доход (НПД).  * `UNKNOWN_VALUE` — неизвестное значение. Используется только совместно с параметром `payment-method=YANDEX`. 
-}
type OrderTaxSystemType
    = OrderTaxSystemTypeOSN
    | OrderTaxSystemTypeUSN
    | OrderTaxSystemTypeUSNMINUSCOST
    | OrderTaxSystemTypeENVD
    | OrderTaxSystemTypeECHN
    | OrderTaxSystemTypePSN
    | OrderTaxSystemTypeNPD
    | OrderTaxSystemTypeUNKNOWNVALUE


orderTaxSystemTypeVariants : List OrderTaxSystemType
orderTaxSystemTypeVariants =
    [ OrderTaxSystemTypeOSN
    , OrderTaxSystemTypeUSN
    , OrderTaxSystemTypeUSNMINUSCOST
    , OrderTaxSystemTypeENVD
    , OrderTaxSystemTypeECHN
    , OrderTaxSystemTypePSN
    , OrderTaxSystemTypeNPD
    , OrderTaxSystemTypeUNKNOWNVALUE
    ]


{-| Информация о трек-номере посылки (DBS).
-}
type alias OrderTrackDTO =
    { trackCode : Maybe String
    , deliveryServiceId : Maybe Int
    }


{-| Изменился ли статус заказа:  * `OK` — статус изменен.  * `ERROR` — статус не изменен. В этом случае появится сообщение об ошибке в параметре `errorDetails`. 
-}
type OrderUpdateStatusType
    = OrderUpdateStatusTypeOK
    | OrderUpdateStatusTypeERROR


orderUpdateStatusTypeVariants : List OrderUpdateStatusType
orderUpdateStatusTypeVariants =
    [ OrderUpdateStatusTypeOK
    , OrderUpdateStatusTypeERROR
    ]


{-| Ставка налога на добавленную стоимость (НДС) на товар:  * `NO_VAT` — НДС не облагается, используется только для отдельных видов услуг.  * `VAT_0` — НДС 0%. Например, используется при продаже товаров, вывезенных в таможенной процедуре экспорта, или при оказании услуг по международной перевозке товаров.  * `VAT_10` — НДС 10%. Например, используется при реализации отдельных продовольственных и медицинских товаров.  * `VAT_10_110` — НДС 10/110. Расчетная ставка НДС 10%, применяется только при предоплате.  * `VAT_20` — НДС 20%. Основная ставка с 2019 года.  * `VAT_20_120` — НДС 20/120. Расчетная ставка НДС 20%, применяется только при предоплате.  * `VAT_18` — НДС 18%. Основная ставка до 2019 года.  * `VAT_18_118` — НДС 18/118. Ставка использовалась до 1 января 2019 года при предоплате.  * `UNKNOWN_VALUE` — неизвестный тип.  Используется только совместно с параметром `payment-method=YANDEX`. 
-}
type OrderVatType
    = OrderVatTypeNOVAT
    | OrderVatTypeVAT0
    | OrderVatTypeVAT10
    | OrderVatTypeVAT10110
    | OrderVatTypeVAT20
    | OrderVatTypeVAT20120
    | OrderVatTypeVAT18
    | OrderVatTypeVAT18118
    | OrderVatTypeUNKNOWNVALUE


orderVatTypeVariants : List OrderVatType
orderVatTypeVariants =
    [ OrderVatTypeNOVAT
    , OrderVatTypeVAT0
    , OrderVatTypeVAT10
    , OrderVatTypeVAT10110
    , OrderVatTypeVAT20
    , OrderVatTypeVAT20120
    , OrderVatTypeVAT18
    , OrderVatTypeVAT18118
    , OrderVatTypeUNKNOWNVALUE
    ]


{-| Годные/негодные ярлыки по заказам в отгрузке.
-}
type alias OrdersShipmentInfoDTO =
    { orderIdsWithLabels : List Int
    , orderIdsWithoutLabels : List Int
    }


{-| Информация о стоимости услуг.
-}
type alias OrdersStatsCommissionDTO =
    { type_ : Maybe OrdersStatsCommissionType
    , actual : Maybe Float
    }


{-| Услуга:  * `FEE` — размещение товара на Маркете. * `FULFILLMENT` — складская обработка. Не возвращается с 1 января 2024 года. * `LOYALTY_PARTICIPATION_FEE` — участие в программе лояльности и отзывы за баллы. * `AUCTION_PROMOTION` — буст продаж с оплатой за продажи. * `INSTALLMENT` — рассрочка. Не возвращается с 24 февраля 2022 года. * `DELIVERY_TO_CUSTOMER` — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `EXPRESS_DELIVERY_TO_CUSTOMER` — экспресс-доставка покупателю (Экспресс). * `AGENCY` — прием платежа покупателя. * `PAYMENT_TRANSFER` — перевод платежа покупателя. * `RETURNED_ORDERS_STORAGE` — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `SORTING` — обработка заказа (FBS). * `INTAKE_SORTING` — организация забора заказов со склада продавца (FBS). * `RETURN_PROCESSING` — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * `ILLIQUID_GOODS_SALE` — вознаграждение за продажу невывезенных товаров. 
-}
type OrdersStatsCommissionType
    = OrdersStatsCommissionTypeFEE
    | OrdersStatsCommissionTypeFULFILLMENT
    | OrdersStatsCommissionTypeLOYALTYPARTICIPATIONFEE
    | OrdersStatsCommissionTypeAUCTIONPROMOTION
    | OrdersStatsCommissionTypeINSTALLMENT
    | OrdersStatsCommissionTypeDELIVERYTOCUSTOMER
    | OrdersStatsCommissionTypeEXPRESSDELIVERYTOCUSTOMER
    | OrdersStatsCommissionTypeAGENCY
    | OrdersStatsCommissionTypePAYMENTTRANSFER
    | OrdersStatsCommissionTypeRETURNEDORDERSSTORAGE
    | OrdersStatsCommissionTypeSORTING
    | OrdersStatsCommissionTypeINTAKESORTING
    | OrdersStatsCommissionTypeRETURNPROCESSING
    | OrdersStatsCommissionTypeILLIQUIDGOODSSALE


ordersStatsCommissionTypeVariants : List OrdersStatsCommissionType
ordersStatsCommissionTypeVariants =
    [ OrdersStatsCommissionTypeFEE
    , OrdersStatsCommissionTypeFULFILLMENT
    , OrdersStatsCommissionTypeLOYALTYPARTICIPATIONFEE
    , OrdersStatsCommissionTypeAUCTIONPROMOTION
    , OrdersStatsCommissionTypeINSTALLMENT
    , OrdersStatsCommissionTypeDELIVERYTOCUSTOMER
    , OrdersStatsCommissionTypeEXPRESSDELIVERYTOCUSTOMER
    , OrdersStatsCommissionTypeAGENCY
    , OrdersStatsCommissionTypePAYMENTTRANSFER
    , OrdersStatsCommissionTypeRETURNEDORDERSSTORAGE
    , OrdersStatsCommissionTypeSORTING
    , OrdersStatsCommissionTypeINTAKESORTING
    , OrdersStatsCommissionTypeRETURNPROCESSING
    , OrdersStatsCommissionTypeILLIQUIDGOODSSALE
    ]


{-| Информация по заказам.
-}
type alias OrdersStatsDTO =
    { orders : List OrdersStatsOrderDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Информация о регионе доставки.
-}
type alias OrdersStatsDeliveryRegionDTO =
    { id : Maybe Int
    , name : Maybe String
    }


{-| Информация об удалении товара из заказа.
-}
type alias OrdersStatsDetailsDTO =
    { itemStatus : Maybe OrdersStatsItemStatusType
    , itemCount : Maybe Int
    , updateDate : Maybe Posix
    , stockType : Maybe OrdersStatsStockType
    }


{-| Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 
-}
type alias OrdersStatsItemDTO =
    { offerName : Maybe String
    , marketSku : Maybe Int
    , shopSku : Maybe String
    , count : Maybe Int
    , prices : Maybe ( List OrdersStatsPriceDTO )
    , warehouse : Maybe OrdersStatsWarehouseDTO
    , details : Maybe ( List OrdersStatsDetailsDTO )
    , cisList : Maybe ( List String )
    , initialCount : Maybe Int
    , bidFee : Maybe Int
    , cofinanceThreshold : Maybe Float
    , cofinanceValue : Maybe Float
    }


{-| Статус товара:  * `REJECTED` — товар был добавлен в созданный заказ, но не был оплачен. * `RETURNED` — товар вернули. 
-}
type OrdersStatsItemStatusType
    = OrdersStatsItemStatusTypeREJECTED
    | OrdersStatsItemStatusTypeRETURNED


ordersStatsItemStatusTypeVariants : List OrdersStatsItemStatusType
ordersStatsItemStatusTypeVariants =
    [ OrdersStatsItemStatusTypeREJECTED
    , OrdersStatsItemStatusTypeRETURNED
    ]


{-| Информация о заказе.
-}
type alias OrdersStatsOrderDTO =
    { id : Maybe Int
    , creationDate : Maybe Posix
    , statusUpdateDate : Maybe Posix
    , status : Maybe OrderStatsStatusType
    , partnerOrderId : Maybe String
    , paymentType : Maybe OrdersStatsOrderPaymentType
    , fake : Maybe Bool
    , deliveryRegion : Maybe OrdersStatsDeliveryRegionDTO
    , items : List OrdersStatsItemDTO
    , initialItems : Maybe ( List OrdersStatsItemDTO )
    , payments : List OrdersStatsPaymentDTO
    , commissions : List OrdersStatsCommissionDTO
    }


{-| Тип оплаты заказа: - `CREDIT` — заказ оформлен в кредит. - `POSTPAID` — заказ оплачен после того, как был получен. - `PREPAID` — заказ оплачен до того, как был получен. 
-}
type OrdersStatsOrderPaymentType
    = OrdersStatsOrderPaymentTypeCREDIT
    | OrdersStatsOrderPaymentTypePOSTPAID
    | OrdersStatsOrderPaymentTypePREPAID
    | OrdersStatsOrderPaymentTypeTINKOFFCREDIT


ordersStatsOrderPaymentTypeVariants : List OrdersStatsOrderPaymentType
ordersStatsOrderPaymentTypeVariants =
    [ OrdersStatsOrderPaymentTypeCREDIT
    , OrdersStatsOrderPaymentTypePOSTPAID
    , OrdersStatsOrderPaymentTypePREPAID
    , OrdersStatsOrderPaymentTypeTINKOFFCREDIT
    ]


{-| Информация о денежных переводах по заказу.
-}
type alias OrdersStatsPaymentDTO =
    { id : Maybe String
    , date : Maybe Posix
    , type_ : Maybe OrdersStatsPaymentType
    , source : Maybe OrdersStatsPaymentSourceType
    , total : Maybe Float
    , paymentOrder : Maybe OrdersStatsPaymentOrderDTO
    }


{-| Информация о платежном получении.
-}
type alias OrdersStatsPaymentOrderDTO =
    { id : Maybe String
    , date : Maybe Posix
    }


{-| Способ денежного перевода: - `BUYER` — оплата или возврат деньгами. - `CASHBACK` — оплата или возврат баллами Плюса. - `MARKETPLACE` — оплата или возврат купонами. - `SPLIT` — оплата картой по частям (Сплит). 
-}
type OrdersStatsPaymentSourceType
    = OrdersStatsPaymentSourceTypeBUYER
    | OrdersStatsPaymentSourceTypeCASHBACK
    | OrdersStatsPaymentSourceTypeMARKETPLACE
    | OrdersStatsPaymentSourceTypeSPLIT


ordersStatsPaymentSourceTypeVariants : List OrdersStatsPaymentSourceType
ordersStatsPaymentSourceTypeVariants =
    [ OrdersStatsPaymentSourceTypeBUYER
    , OrdersStatsPaymentSourceTypeCASHBACK
    , OrdersStatsPaymentSourceTypeMARKETPLACE
    , OrdersStatsPaymentSourceTypeSPLIT
    ]


{-| Тип денежного перевода: - `PAYMENT` — оплата. - `REFUND` — возврат. 
-}
type OrdersStatsPaymentType
    = OrdersStatsPaymentTypePAYMENT
    | OrdersStatsPaymentTypeREFUND
    | OrdersStatsPaymentTypeUNKNOWN


ordersStatsPaymentTypeVariants : List OrdersStatsPaymentType
ordersStatsPaymentTypeVariants =
    [ OrdersStatsPaymentTypePAYMENT
    , OrdersStatsPaymentTypeREFUND
    , OrdersStatsPaymentTypeUNKNOWN
    ]


{-| Цена или скидки на товар.
-}
type alias OrdersStatsPriceDTO =
    { type_ : Maybe OrdersStatsPriceType
    , costPerItem : Maybe Float
    , total : Maybe Float
    }


{-| Тип скидки или цена на товар: - `BUYER` — цена на товар с учетом скидок, в том числе купонов. - `CASHBACK` — баллы Плюса. - `MARKETPLACE` — купоны. 
-}
type OrdersStatsPriceType
    = OrdersStatsPriceTypeBUYER
    | OrdersStatsPriceTypeCASHBACK
    | OrdersStatsPriceTypeMARKETPLACE


ordersStatsPriceTypeVariants : List OrdersStatsPriceType
ordersStatsPriceTypeVariants =
    [ OrdersStatsPriceTypeBUYER
    , OrdersStatsPriceTypeCASHBACK
    , OrdersStatsPriceTypeMARKETPLACE
    ]


{-| Тип товара:  * `DEFECT` — товар бракованный.  * `FIT` — товар надлежащего качества. 
-}
type OrdersStatsStockType
    = OrdersStatsStockTypeFIT
    | OrdersStatsStockTypeFREEZE
    | OrdersStatsStockTypeAVAILABLE
    | OrdersStatsStockTypeQUARANTINE
    | OrdersStatsStockTypeUTILIZATION
    | OrdersStatsStockTypeDEFECT
    | OrdersStatsStockTypeEXPIRED


ordersStatsStockTypeVariants : List OrdersStatsStockType
ordersStatsStockTypeVariants =
    [ OrdersStatsStockTypeFIT
    , OrdersStatsStockTypeFREEZE
    , OrdersStatsStockTypeAVAILABLE
    , OrdersStatsStockTypeQUARANTINE
    , OrdersStatsStockTypeUTILIZATION
    , OrdersStatsStockTypeDEFECT
    , OrdersStatsStockTypeEXPIRED
    ]


{-| Информация о складе, на котором хранится товар.
-}
type alias OrdersStatsWarehouseDTO =
    { id : Maybe Int
    , name : Maybe String
    }


{-| Адрес точки продаж. 
-}
type alias OutletAddressDTO =
    { regionId : Int
    , street : Maybe String
    , number : Maybe String
    , building : Maybe String
    , estate : Maybe String
    , block : Maybe String
    , additional : Maybe String
    , km : Maybe Int
    , city : Maybe String
    }


{-| Информация о точке продаж.
-}
type alias OutletDTO =
    { name : String
    , type_ : OutletType
    , coords : Maybe String
    , isMain : Maybe Bool
    , shopOutletCode : Maybe String
    , visibility : Maybe OutletVisibilityType
    , address : OutletAddressDTO
    , phones : List String
    , workingSchedule : OutletWorkingScheduleDTO
    , deliveryRules : Maybe ( List OutletDeliveryRuleDTO )
    , storagePeriod : Maybe Int
    }


{-| Информация об условиях доставки для данной точки продаж.
-}
type alias OutletDeliveryRuleDTO =
    { minDeliveryDays : Maybe Int
    , maxDeliveryDays : Maybe Int
    , deliveryServiceId : Maybe Int
    , orderBefore : Maybe Int
    , priceFreePickup : Maybe Float
    , unspecifiedDeliveryInterval : Maybe Bool
    }


{-| Информация о лицензии.
-}
type alias OutletLicenseDTO =
    { id : Maybe Int
    , outletId : Maybe Int
    , licenseType : Maybe LicenseType
    , number : Maybe String
    , dateOfIssue : Maybe Posix
    , dateOfExpiry : Maybe Posix
    }


{-| Ответ на запрос информации о лицензиях для точек продаж.
-}
type alias OutletLicensesResponseDTO =
    { licenses : List FullOutletLicenseDTO
    }


{-| Результат выполнения запроса. Выводится, если `status=\"OK\"`. 
-}
type alias OutletResponseDTO =
    { id : Maybe Int
    }


{-| Статус точки продаж.  Возможные значения:  * `AT_MODERATION` — проверяется. * `FAILED` — не прошла проверку и отклонена модератором. * `MODERATED` — проверена и одобрена. * `NONMODERATED` — новая точка, нуждается в проверке. 
-}
type OutletStatusType
    = OutletStatusTypeATMODERATION
    | OutletStatusTypeFAILED
    | OutletStatusTypeMODERATED
    | OutletStatusTypeNONMODERATED
    | OutletStatusTypeUNKNOWN


outletStatusTypeVariants : List OutletStatusType
outletStatusTypeVariants =
    [ OutletStatusTypeATMODERATION
    , OutletStatusTypeFAILED
    , OutletStatusTypeMODERATED
    , OutletStatusTypeNONMODERATED
    , OutletStatusTypeUNKNOWN
    ]


{-| Тип точки продаж.  Возможные значения:  * `DEPOT` — пункт выдачи заказов. * `MIXED` — смешанный тип точки продаж (торговый зал и пункт выдачи заказов). * `RETAIL` — розничная точка продаж (торговый зал). 
-}
type OutletType
    = OutletTypeDEPOT
    | OutletTypeMIXED
    | OutletTypeRETAIL
    | OutletTypeNOTDEFINED


outletTypeVariants : List OutletType
outletTypeVariants =
    [ OutletTypeDEPOT
    , OutletTypeMIXED
    , OutletTypeRETAIL
    , OutletTypeNOTDEFINED
    ]


{-| Состояние точки продаж.  Возможные значения:  * `HIDDEN` — точка продаж выключена. * `VISIBLE` — точка продаж включена. 
-}
type OutletVisibilityType
    = OutletVisibilityTypeHIDDEN
    | OutletVisibilityTypeVISIBLE
    | OutletVisibilityTypeUNKNOWN


outletVisibilityTypeVariants : List OutletVisibilityType
outletVisibilityTypeVariants =
    [ OutletVisibilityTypeHIDDEN
    , OutletVisibilityTypeVISIBLE
    , OutletVisibilityTypeUNKNOWN
    ]


{-| Список режимов работы точки продаж. 
-}
type alias OutletWorkingScheduleDTO =
    { workInHoliday : Maybe Bool
    , scheduleItems : List OutletWorkingScheduleItemDTO
    }


{-| Расписание работы точки продаж.
-}
type alias OutletWorkingScheduleItemDTO =
    { startDay : DayOfWeekType
    , endDay : DayOfWeekType
    , startTime : String
    , endTime : String
    }


{-| Размещение ярлыков на странице: * `A7` — в PDF-файле будут страницы формата близкому к A7. На каждой странице размещается ярлык размером 75 × 120 мм (80,4 × 125,6 мм с учетом полей). * `A4` — в PDF-файле будут страницы формата A4. На каждой странице размещаются восемь ярлыков размером 70,6 × 99,1 мм без полей. 
-}
type PageFormatType
    = PageFormatTypeA7
    | PageFormatTypeA4


pageFormatTypeVariants : List PageFormatType
pageFormatTypeVariants =
    [ PageFormatTypeA7
    , PageFormatTypeA4
    ]


{-| Возвраты.
-}
type alias PagedReturnsDTO =
    { paging : Maybe ForwardScrollingPagerDTO
    , returns : List ReturnDTO
    }


{-| Количество палет в отгрузке.
-}
type alias PalletsCountDTO =
    { planned : Maybe Int
    , fact : Maybe Int
    }


{-| Тип данных:  * `TEXT` — текст. * `ENUM` — список возможных значений. * `BOOLEAN` — `true` или `false`. * `NUMERIC` — число. 
-}
type ParameterType
    = ParameterTypeTEXT
    | ParameterTypeENUM
    | ParameterTypeBOOLEAN
    | ParameterTypeNUMERIC


parameterTypeVariants : List ParameterType
parameterTypeVariants =
    [ ParameterTypeTEXT
    , ParameterTypeENUM
    , ParameterTypeBOOLEAN
    , ParameterTypeNUMERIC
    ]


{-| Ограничения на значения характеристик.
-}
type alias ParameterValueConstraintsDTO =
    { minValue : Maybe Float
    , maxValue : Maybe Float
    , maxLength : Maybe Int
    }


{-| Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 
-}
type alias ParameterValueDTO =
    { parameterId : Int
    , unitId : Maybe Int
    , valueId : Maybe Int
    , value : Maybe String
    }


{-| Значение характеристики.
-}
type alias ParameterValueOptionDTO =
    { id : Int
    , value : String
    , description : Maybe String
    }


{-| Элемент отображает одно грузовое место. Вложенные поля больше не используются, передавайте элемент пустым в запросах и не обращайте внимание на содержимое в ответах.
-}
type alias ParcelBoxDTO =
    { id : Maybe Int
    , fulfilmentId : Maybe String
    }


{-| Информация о ярлыке для коробки.
-}
type alias ParcelBoxLabelDTO =
    { url : String
    , supplierName : String
    , deliveryServiceName : String
    , orderId : Int
    , orderNum : String
    , recipientName : String
    , boxId : Int
    , fulfilmentId : String
    , place : String
    , weight : String
    , deliveryServiceId : String
    , deliveryAddress : Maybe String
    , shipmentDate : Maybe String
    }


{-| Информация о грузовых местах в заказе.
-}
type alias ParcelDTO =
    { boxes : List ParcelBoxDTO
    }


{-| Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
-}
type alias PartnerMarketCategoryId =
    { }


{-| Данные о складе отправления.
-}
type alias PartnerShipmentWarehouseDTO =
    { id : Maybe Int
    , name : Maybe String
    , address : Maybe String
    }


{-| Частота выплат:  * `DAILY` — ежедневно. * `WEEKLY` — раз в неделю. * `BIWEEKLY` — раз в две недели. * `MONTHLY` — раз в месяц.  Подробнее о графике выплат читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/acquiring.html). 
-}
type PaymentFrequencyType
    = PaymentFrequencyTypeDAILY
    | PaymentFrequencyTypeWEEKLY
    | PaymentFrequencyTypeBIWEEKLY
    | PaymentFrequencyTypeMONTHLY


paymentFrequencyTypeVariants : List PaymentFrequencyType
paymentFrequencyTypeVariants =
    [ PaymentFrequencyTypeDAILY
    , PaymentFrequencyTypeWEEKLY
    , PaymentFrequencyTypeBIWEEKLY
    , PaymentFrequencyTypeMONTHLY
    ]


{-| Адрес доставки.
-}
type alias PickupAddressDTO =
    { country : Maybe String
    , city : Maybe String
    , street : Maybe String
    , house : Maybe String
    , postcode : Maybe String
    }


{-| Модель, по которой работает магазин:  * `FBS` — FBS или Экспресс. * `FBY` — FBY. * `DBS` — DBS. 
-}
type PlacementType
    = PlacementTypeFBS
    | PlacementTypeFBY
    | PlacementTypeDBS


placementTypeVariants : List PlacementType
placementTypeVariants =
    [ PlacementTypeFBS
    , PlacementTypeFBY
    , PlacementTypeDBS
    ]


{-| Максимальные значения цены, при которых она является привлекательной или умеренной.
-}
type alias PriceCompetitivenessThresholdsDTO =
    { optimalPrice : Maybe BasePriceDTO
    , averagePrice : Maybe BasePriceDTO
    }


{-| Привлекательность цены:  * `OPTIMAL` — привлекательная. * `AVERAGE` — умеренная. * `LOW` — непривлекательная. 
-}
type PriceCompetitivenessType
    = PriceCompetitivenessTypeOPTIMAL
    | PriceCompetitivenessTypeAVERAGE
    | PriceCompetitivenessTypeLOW


priceCompetitivenessTypeVariants : List PriceCompetitivenessType
priceCompetitivenessTypeVariants =
    [ PriceCompetitivenessTypeOPTIMAL
    , PriceCompetitivenessTypeAVERAGE
    , PriceCompetitivenessTypeLOW
    ]


{-| Цена с указанием скидки, валюты и времени последнего обновления.
-}
type alias PriceDTO =
    { value : Maybe Float
    , discountBase : Maybe Float
    , currencyId : Maybe CurrencyType
    , vat : Maybe Int
    }


{-| Причина попадания товара в карантин.
-}
type alias PriceQuarantineVerdictDTO =
    { type_ : Maybe PriceQuarantineVerdictType
    , params : List PriceQuarantineVerdictParameterDTO
    }


{-| Имя параметра причины скрытия товара по цене.  * `CURRENT_PRICE` — цена, из-за которой товар попал в карантин. * `LAST_VALID_PRICE` — последняя цена до попадания в карантин (только для карантина типа `PRICE_CHANGE`). * `MIN_PRICE` — порог попадания в карантин (только для карантина типов `LOW_PRICE` и `LOW_PRICE_PROMO`). * `CURRENCY` — валюта. 
-}
type PriceQuarantineVerdictParamNameType
    = PriceQuarantineVerdictParamNameTypeCURRENTPRICE
    | PriceQuarantineVerdictParamNameTypeLASTVALIDPRICE
    | PriceQuarantineVerdictParamNameTypeMINPRICE
    | PriceQuarantineVerdictParamNameTypeCURRENCY


priceQuarantineVerdictParamNameTypeVariants : List PriceQuarantineVerdictParamNameType
priceQuarantineVerdictParamNameTypeVariants =
    [ PriceQuarantineVerdictParamNameTypeCURRENTPRICE
    , PriceQuarantineVerdictParamNameTypeLASTVALIDPRICE
    , PriceQuarantineVerdictParamNameTypeMINPRICE
    , PriceQuarantineVerdictParamNameTypeCURRENCY
    ]


{-| Параметр карантина.
-}
type alias PriceQuarantineVerdictParameterDTO =
    { name : PriceQuarantineVerdictParamNameType
    , value : String
    }


{-| Типы карантина:  * `PRICE_CHANGE` — новая цена слишком сильно отличается от прежней. В поле `params` будет  новая цена `CURRENT_PRICE` и последняя цена до попадания в карантин `LAST_VALID_PRICE`. * `LOW_PRICE` — установленная цена слишком сильно отличается от рыночной. В поле `params` будет установленная вами цена `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. * `LOW_PRICE_PROMO` — цена после применения акций слишком сильно отличается от рыночной. В поле `params` будет цена после применения акций `CURRENT_PRICE` и порог попадания в карантин `MIN_PRICE`. 
-}
type PriceQuarantineVerdictType
    = PriceQuarantineVerdictTypePRICECHANGE
    | PriceQuarantineVerdictTypeLOWPRICE
    | PriceQuarantineVerdictTypeLOWPRICEPROMO


priceQuarantineVerdictTypeVariants : List PriceQuarantineVerdictType
priceQuarantineVerdictTypeVariants =
    [ PriceQuarantineVerdictTypePRICECHANGE
    , PriceQuarantineVerdictTypeLOWPRICE
    , PriceQuarantineVerdictTypeLOWPRICEPROMO
    ]


{-| Рекомендованная цена.
-}
type alias PriceRecommendationItemDTO =
    { campaignId : Int
    , price : Float
    }


{-| Тип цены.
-}
type alias PriceSuggestDTO =
    { type_ : Maybe PriceSuggestType
    , price : Maybe Float
    }


{-| Товар с ценами для продвижения.
-}
type alias PriceSuggestOfferDTO =
    { marketSku : Maybe Int
    , offerId : Maybe String
    , priceSuggestion : Maybe ( List PriceSuggestDTO )
    }


{-| Тип цены:  * `BUYBOX` — самая низкая цена на товар, по которой он продается сейчас. Эта цена обновляется в режиме реального времени. Если вы установите цену ниже, начнет показываться ваше предложение. Если для этого значения в параметре `price` указана цена, которая совпадает с вашей, значит, ваш товар уже показывается на витрине. Если кроме вас этот товар продают другие продавцы по такой же цене, их предложения также будут отображаться вместе с вашими по очереди. * `DEFAULT_OFFER` — рекомендованная Маркетом цена, которая привлекает покупателей. Рассчитывается только для популярных на сервисе товаров и обновляется раз в четыре часа. * `MIN_PRICE_MARKET` — минимальная цена на Маркете. Самая низкая цена среди всех предложений товара на Маркете во всех регионах, включая те, которые не видны на витрине. Эта цена обновляется в режиме реального времени и обеспечивает большее количество показов на Маркете, чем самая низкая или рекомендованная цена. 
-}
type PriceSuggestType
    = PriceSuggestTypeBUYBOX
    | PriceSuggestTypeDEFAULTOFFER
    | PriceSuggestTypeMINPRICEMARKET


priceSuggestTypeVariants : List PriceSuggestType
priceSuggestTypeVariants =
    [ PriceSuggestTypeBUYBOX
    , PriceSuggestTypeDEFAULTOFFER
    , PriceSuggestTypeMINPRICEMARKET
    ]


{-| Информация об автоматическом добавлении товара в акцию.  Причины, по которым товар не был добавлен автоматически в других магазинах, можно узнать в кабинете продавца на Маркете на странице акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
-}
type alias PromoOfferAutoParticipatingDetailsDTO =
    { campaignIds : Maybe ( List Int )
    }


{-| Параметры товара в акции с типом `DIRECT_DISCOUNT` или `BLUE_FLASH`.
-}
type alias PromoOfferDiscountParamsDTO =
    { price : Maybe Int
    , promoPrice : Maybe Int
    , maxPromoPrice : Int
    }


{-| Параметры товара в акции.  Возвращается параметр, который соответствует типу акции. 
-}
type alias PromoOfferParamsDTO =
    { discountParams : Maybe PromoOfferDiscountParamsDTO
    , promocodeParams : Maybe PromoOfferPromocodeParamsDTO
    }


{-| Фильтр для товаров, которые добавлены в акцию вручную:  * `MANUALLY_ADDED` — товары, которые добавлены вручную.  * `NOT_MANUALLY_ADDED`— товары, которые не участвуют в акции и те, которые добавлены автоматически.  Если не передать параметр `statusType`, вернутся все товары.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
-}
type PromoOfferParticipationStatusFilterType
    = PromoOfferParticipationStatusFilterTypeMANUALLYADDED
    | PromoOfferParticipationStatusFilterTypeNOTMANUALLYADDED


promoOfferParticipationStatusFilterTypeVariants : List PromoOfferParticipationStatusFilterType
promoOfferParticipationStatusFilterTypeVariants =
    [ PromoOfferParticipationStatusFilterTypeMANUALLYADDED
    , PromoOfferParticipationStatusFilterTypeNOTMANUALLYADDED
    ]


{-| Статус товара в акции:  * `AUTO` — добавлен автоматически во всех магазинах кабинета, в которых товар доступен для покупки.  * `PARTIALLY_AUTO` — добавлен автоматически у части магазинов.  * `MANUAL` — добавлен вручную.  * `NOT_PARTICIPATING` — не участвует в акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
-}
type PromoOfferParticipationStatusType
    = PromoOfferParticipationStatusTypeAUTO
    | PromoOfferParticipationStatusTypePARTIALLYAUTO
    | PromoOfferParticipationStatusTypeMANUAL
    | PromoOfferParticipationStatusTypeNOTPARTICIPATING


promoOfferParticipationStatusTypeVariants : List PromoOfferParticipationStatusType
promoOfferParticipationStatusTypeVariants =
    [ PromoOfferParticipationStatusTypeAUTO
    , PromoOfferParticipationStatusTypePARTIALLYAUTO
    , PromoOfferParticipationStatusTypeMANUAL
    , PromoOfferParticipationStatusTypeNOTPARTICIPATING
    ]


{-| Параметры товара в акции с типом `MARKET_PROMOCODE`.
-}
type alias PromoOfferPromocodeParamsDTO =
    { maxPrice : Int
    }


{-| Предупреждение, которое появилось при добавлении товара:  * `DEEP_DISCOUNT_OFFER` — большая разница с ценой в каталоге. Проверьте, нет ли ошибки.  * `CATALOG_PRICE_IS_LOWER_THAN_PROMO` — [базовая цена](*basic-price) в кабинете ниже цены по акции. У товара в акции будет отображаться базовая цена.  * `SHOP_PRICES_ARE_LOWER_THAN_PROMO` — цена в отдельном магазине ниже цены по акции. У товара в акции будет отображаться цена в магазине. Для остальных магазинов будет действовать цена по акции.  * `PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE` — в отдельном магазине цена с учетом промокода выше максимально возможной цены. Товар не будет участвовать в акции.  * `SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO` — товар в отдельном магазине не подходит под условия акции. 
-}
type PromoOfferUpdateWarningCodeType
    = PromoOfferUpdateWarningCodeTypeDEEPDISCOUNTOFFER
    | PromoOfferUpdateWarningCodeTypeCATALOGPRICEISLOWERTHANPROMO
    | PromoOfferUpdateWarningCodeTypeSHOPPRICESARELOWERTHANPROMO
    | PromoOfferUpdateWarningCodeTypePROMOCODEPRICEMORETHANMAXFAIRPRICE
    | PromoOfferUpdateWarningCodeTypeSHOPOFFERNOTELIGIBLEFORPROMO


promoOfferUpdateWarningCodeTypeVariants : List PromoOfferUpdateWarningCodeType
promoOfferUpdateWarningCodeTypeVariants =
    [ PromoOfferUpdateWarningCodeTypeDEEPDISCOUNTOFFER
    , PromoOfferUpdateWarningCodeTypeCATALOGPRICEISLOWERTHANPROMO
    , PromoOfferUpdateWarningCodeTypeSHOPPRICESARELOWERTHANPROMO
    , PromoOfferUpdateWarningCodeTypePROMOCODEPRICEMORETHANMAXFAIRPRICE
    , PromoOfferUpdateWarningCodeTypeSHOPOFFERNOTELIGIBLEFORPROMO
    ]


{-| Предупреждение, которое появилось при добавлении товара в акцию или изменении его цен.
-}
type alias PromoOfferUpdateWarningDTO =
    { code : PromoOfferUpdateWarningCodeType
    , campaignIds : Maybe ( List Int )
    }


{-| Какие акции вернутся:  * `PARTICIPATING_NOW` — текущие и будущие акции продавца.  * `PARTICIPATED` — завершенные акции продавца за последний год. Если за год их было меньше 15, в ответе придут 15 последних акций за все время. 
-}
type PromoParticipationType
    = PromoParticipationTypePARTICIPATINGNOW
    | PromoParticipationTypePARTICIPATED


promoParticipationTypeVariants : List PromoParticipationType
promoParticipationTypeVariants =
    [ PromoParticipationTypePARTICIPATINGNOW
    , PromoParticipationTypePARTICIPATED
    ]


{-| Время проведения акции.
-}
type alias PromoPeriodDTO =
    { dateTimeFrom : Posix
    , dateTimeTo : Posix
    }


{-| Запрос на передачу ключей цифровых товаров.
-}
type alias ProvideOrderDigitalCodesRequest =
    { items : List OrderDigitalItemDTO
    }


type alias ProvideOrderItemIdentifiersRequest =
    { items : List OrderItemInstanceModificationDTO
    }


type alias ProvideOrderItemIdentifiersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderItemsModificationResultDTO
    }


{-| description.
-}
type alias PutSkuBidsRequest =
    { bids : List SkuBidItemDTO
    }


{-| Информация о заказе, который повлиял на индекс качества.
-}
type alias QualityRatingAffectedOrderDTO =
    { orderId : Int
    , description : String
    , componentType : AffectedOrderQualityRatingComponentType
    }


{-| Составляющая индекса качества.
-}
type alias QualityRatingComponentDTO =
    { value : Float
    , componentType : QualityRatingComponentType
    }


{-| Составляющие индекса качества.  **Для модели DBS:** * `DBS_CANCELLATION_RATE` — доля отмененных товаров. * `DBS_LATE_DELIVERY_RATE` — доля заказов, доставленных после плановой даты.  **Для моделей FBS и Экспресс:** * `FBS_CANCELLATION_RATE` — доля отмененных товаров. * `FBS_LATE_SHIP_RATE` — доля не вовремя отгруженных заказов.  **Для модели FBY:** * `FBY_LATE_DELIVERY_RATE` — доля товаров, которые приехали на склад с опозданием. * `FBY_CANCELLATION_RATE` — доля отмененных или недоставленных товаров. * `FBY_DELIVERY_DIFF_RATE` — доля товаров, которые не прибыли вместе с поставкой или которые не приняли. * `FBY_LATE_EDITING_RATE` — доля товаров, которые поздно убрали из заявки. 
-}
type QualityRatingComponentType
    = QualityRatingComponentTypeDBSCANCELLATIONRATE
    | QualityRatingComponentTypeDBSLATEDELIVERYRATE
    | QualityRatingComponentTypeFBSCANCELLATIONRATE
    | QualityRatingComponentTypeFBSLATESHIPRATE
    | QualityRatingComponentTypeFBYLATEDELIVERYRATE
    | QualityRatingComponentTypeFBYCANCELLATIONRATE
    | QualityRatingComponentTypeFBYDELIVERYDIFFRATE
    | QualityRatingComponentTypeFBYLATEEDITINGRATE


qualityRatingComponentTypeVariants : List QualityRatingComponentType
qualityRatingComponentTypeVariants =
    [ QualityRatingComponentTypeDBSCANCELLATIONRATE
    , QualityRatingComponentTypeDBSLATEDELIVERYRATE
    , QualityRatingComponentTypeFBSCANCELLATIONRATE
    , QualityRatingComponentTypeFBSLATESHIPRATE
    , QualityRatingComponentTypeFBYLATEDELIVERYRATE
    , QualityRatingComponentTypeFBYCANCELLATIONRATE
    , QualityRatingComponentTypeFBYDELIVERYDIFFRATE
    , QualityRatingComponentTypeFBYLATEEDITINGRATE
    ]


{-| Информация об индексе качества.
-}
type alias QualityRatingDTO =
    { rating : Int
    , calculationDate : Posix
    , components : List QualityRatingComponentDTO
    }


{-| Информация о заказах, которые повлияли на индекс качества.
-}
type alias QualityRatingDetailsDTO =
    { affectedOrders : List QualityRatingAffectedOrderDTO
    }


{-| Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр `quantum`.  {% cut \"Пример\" %}  ```json {   \"offers\": [     {       \"offerId\": \"08e35dc1-89a2-11e3-8055-0015e9b8c48d\",       \"quantum\": {}     }   ] } ```  {% endcut %} 
-}
type alias QuantumDTO =
    { minQuantity : Maybe Int
    , stepQuantity : Maybe Int
    }


{-| Товар в карантине.
-}
type alias QuarantineOfferDTO =
    { offerId : Maybe String
    , currentPrice : Maybe BasePriceDTO
    , lastValidPrice : Maybe BasePriceDTO
    , verdicts : Maybe ( List PriceQuarantineVerdictDTO )
    }


{-| Способ возврата товара покупателем:  * `SHOP` — в точку возврата магазина.  * `DELIVERY_SERVICE` — отправить курьером.  * `POST` — почта. 
-}
type RecipientType
    = RecipientTypeSHOP
    | RecipientTypeDELIVERYSERVICE
    | RecipientTypePOST


recipientTypeVariants : List RecipientType
recipientTypeVariants =
    [ RecipientTypeSHOP
    , RecipientTypeDELIVERYSERVICE
    , RecipientTypePOST
    ]


{-| Cтатус возврата денег:  * `STARTED_BY_USER` — создан клиентом из личного кабинета.  * `REFUND_IN_PROGRESS` — ждет решение о возврате денег.  * `REFUNDED` — по возврату проведены все возвратные денежные транзакции.  * `FAILED` — невозможно провести возврат покупателю.  * `WAITING_FOR_DECISION` — ожидает решения.  * `DECISION_MADE` — по возврату принято решение.  * `REFUNDED_WITH_BONUSES` — возврат осуществлен баллами Плюса или промокодом.  * `REFUNDED_BY_SHOP` — магазин сделал самостоятельно возврат денег.  * `COMPLETE_WITHOUT_REFUND` — возврат денег не требуется.  * `CANCELLED` — возврат отменен. 
-}
type RefundStatusType
    = RefundStatusTypeSTARTEDBYUSER
    | RefundStatusTypeREFUNDINPROGRESS
    | RefundStatusTypeREFUNDED
    | RefundStatusTypeFAILED
    | RefundStatusTypeWAITINGFORDECISION
    | RefundStatusTypeDECISIONMADE
    | RefundStatusTypeREFUNDEDWITHBONUSES
    | RefundStatusTypeREFUNDEDBYSHOP
    | RefundStatusTypeCANCELLED
    | RefundStatusTypeCOMPLETEWITHOUTREFUND
    | RefundStatusTypeUNKNOWN


refundStatusTypeVariants : List RefundStatusType
refundStatusTypeVariants =
    [ RefundStatusTypeSTARTEDBYUSER
    , RefundStatusTypeREFUNDINPROGRESS
    , RefundStatusTypeREFUNDED
    , RefundStatusTypeFAILED
    , RefundStatusTypeWAITINGFORDECISION
    , RefundStatusTypeDECISIONMADE
    , RefundStatusTypeREFUNDEDWITHBONUSES
    , RefundStatusTypeREFUNDEDBYSHOP
    , RefundStatusTypeCANCELLED
    , RefundStatusTypeCOMPLETEWITHOUTREFUND
    , RefundStatusTypeUNKNOWN
    ]


{-| Регион доставки.
-}
type alias RegionDTO =
    { id : Maybe Int
    , name : String
    , type_ : RegionType
    , parent : RegionDTOParent
    , children : RegionDTOChildren
    }


type RegionDTOParent = RegionDTOParent (Maybe RegionDTO)


unwrapRegionDTOParent : RegionDTOParent -> Maybe RegionDTO
unwrapRegionDTOParent (RegionDTOParent parent) = parent


type RegionDTOChildren = RegionDTOChildren (Maybe ( List RegionDTO ))


unwrapRegionDTOChildren : RegionDTOChildren -> Maybe ( List RegionDTO )
unwrapRegionDTOChildren (RegionDTOChildren children) = children


{-| Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
-}
type RegionType
    = RegionTypeOTHER
    | RegionTypeCONTINENT
    | RegionTypeREGION
    | RegionTypeCOUNTRY
    | RegionTypeCOUNTRYDISTRICT
    | RegionTypeREPUBLIC
    | RegionTypeCITY
    | RegionTypeVILLAGE
    | RegionTypeCITYDISTRICT
    | RegionTypeSUBWAYSTATION
    | RegionTypeREPUBLICAREA


regionTypeVariants : List RegionType
regionTypeVariants =
    [ RegionTypeOTHER
    , RegionTypeCONTINENT
    , RegionTypeREGION
    , RegionTypeCOUNTRY
    , RegionTypeCOUNTRYDISTRICT
    , RegionTypeREPUBLIC
    , RegionTypeCITY
    , RegionTypeVILLAGE
    , RegionTypeCITYDISTRICT
    , RegionTypeSUBWAYSTATION
    , RegionTypeREPUBLICAREA
    ]


{-| Региональная информация.
-}
type alias RegionalModelInfoDTO =
    { currency : Maybe CurrencyType
    , regionId : Maybe Int
    }


{-| Информация о товаре и ошибки, которые появились при его удалении.
-}
type alias RejectedPromoOfferDeleteDTO =
    { offerId : String
    , reason : RejectedPromoOfferDeleteReasonType
    }


{-| Описание ошибки:  * `OFFER_DOES_NOT_EXIST` — в кабинете нет товара с таким SKU. 
-}
type RejectedPromoOfferDeleteReasonType
    = RejectedPromoOfferDeleteReasonTypeOFFERDOESNOTEXIST


rejectedPromoOfferDeleteReasonTypeVariants : List RejectedPromoOfferDeleteReasonType
rejectedPromoOfferDeleteReasonTypeVariants =
    [ RejectedPromoOfferDeleteReasonTypeOFFERDOESNOTEXIST
    ]


{-| Описание отклоненного изменения.
-}
type alias RejectedPromoOfferUpdateDTO =
    { offerId : String
    , reason : RejectedPromoOfferUpdateReasonType
    }


{-| Причина отклонения изменения:  * `OFFER_DOES_NOT_EXIST` — в кабинете нет товара с таким SKU.  * `OFFER_DUPLICATION` — один и тот же товар передан несколько раз.  * `OFFER_NOT_ELIGIBLE_FOR_PROMO` — товар не подходит под условия акции.  * `OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED` — товар не добавлен в акцию по техническим причинам.  * `DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED` — истек срок добавления товаров в акцию.  * `EMPTY_OLD_PRICE` — не указана зачеркнутая цена.  * `EMPTY_PROMO_PRICE` — не указана цена по акции.  * `MAX_PROMO_PRICE_EXCEEDED` — цена по акции превышает максимально возможную цену для участия в акции.  * `PROMO_PRICE_BIGGER_THAN_MAX` — цена по акции больше 95% от зачеркнутой цены.  * `PROMO_PRICE_SMALLER_THAN_MIN` — цена по акции меньше 1% от зачеркнутой цены. 
-}
type RejectedPromoOfferUpdateReasonType
    = RejectedPromoOfferUpdateReasonTypeOFFERDOESNOTEXIST
    | RejectedPromoOfferUpdateReasonTypeOFFERDUPLICATION
    | RejectedPromoOfferUpdateReasonTypeOFFERNOTELIGIBLEFORPROMO
    | RejectedPromoOfferUpdateReasonTypeOFFERPROMOSMAXBYTESIZEEXCEEDED
    | RejectedPromoOfferUpdateReasonTypeDEADLINEFORFOCUSPROMOSEXCEEDED
    | RejectedPromoOfferUpdateReasonTypeEMPTYOLDPRICE
    | RejectedPromoOfferUpdateReasonTypeEMPTYPROMOPRICE
    | RejectedPromoOfferUpdateReasonTypeMAXPROMOPRICEEXCEEDED
    | RejectedPromoOfferUpdateReasonTypePROMOPRICEBIGGERTHANMAX
    | RejectedPromoOfferUpdateReasonTypePROMOPRICESMALLERTHANMIN


rejectedPromoOfferUpdateReasonTypeVariants : List RejectedPromoOfferUpdateReasonType
rejectedPromoOfferUpdateReasonTypeVariants =
    [ RejectedPromoOfferUpdateReasonTypeOFFERDOESNOTEXIST
    , RejectedPromoOfferUpdateReasonTypeOFFERDUPLICATION
    , RejectedPromoOfferUpdateReasonTypeOFFERNOTELIGIBLEFORPROMO
    , RejectedPromoOfferUpdateReasonTypeOFFERPROMOSMAXBYTESIZEEXCEEDED
    , RejectedPromoOfferUpdateReasonTypeDEADLINEFORFOCUSPROMOSEXCEEDED
    , RejectedPromoOfferUpdateReasonTypeEMPTYOLDPRICE
    , RejectedPromoOfferUpdateReasonTypeEMPTYPROMOPRICE
    , RejectedPromoOfferUpdateReasonTypeMAXPROMOPRICEEXCEEDED
    , RejectedPromoOfferUpdateReasonTypePROMOPRICEBIGGERTHANMAX
    , RejectedPromoOfferUpdateReasonTypePROMOPRICESMALLERTHANMIN
    ]


{-| Формат отчета:  * `FILE` — файл с электронной таблицей. * `CSV` — ZIP-архив с CSV-файлами на каждый лист отчета. 
-}
type ReportFormatType
    = ReportFormatTypeFILE
    | ReportFormatTypeCSV


reportFormatTypeVariants : List ReportFormatType
reportFormatTypeVariants =
    [ ReportFormatTypeFILE
    , ReportFormatTypeCSV
    ]


{-| Статус генерации и ссылка на готовый отчет.
-}
type alias ReportInfoDTO =
    { status : ReportStatusType
    , subStatus : Maybe ReportSubStatusType
    , generationRequestedAt : Posix
    , generationFinishedAt : Maybe Posix
    , file : Maybe String
    , estimatedGenerationTime : Maybe Int
    }


{-| Статус генерации отчета:  * `PENDING` — отчет ожидает генерации. * `PROCESSING` — отчет генерируется. * `FAILED` — во время генерации произошла ошибка. * `DONE` — отчет готов. 
-}
type ReportStatusType
    = ReportStatusTypePENDING
    | ReportStatusTypePROCESSING
    | ReportStatusTypeFAILED
    | ReportStatusTypeDONE


reportStatusTypeVariants : List ReportStatusType
reportStatusTypeVariants =
    [ ReportStatusTypePENDING
    , ReportStatusTypePROCESSING
    , ReportStatusTypeFAILED
    , ReportStatusTypeDONE
    ]


{-| Подстатус генерации отчета: * `NO_DATA` — для такого отчета нет данных. * `TOO_LARGE` — отчет превысил допустимый размер — укажите меньший период времени или уточните условия запроса. * `RESOURCE_NOT_FOUND` — для такого отчета не удалось найти часть сущностей. 
-}
type ReportSubStatusType
    = ReportSubStatusTypeNODATA
    | ReportSubStatusTypeTOOLARGE
    | ReportSubStatusTypeRESOURCENOTFOUND


reportSubStatusTypeVariants : List ReportSubStatusType
reportSubStatusTypeVariants =
    [ ReportSubStatusTypeNODATA
    , ReportSubStatusTypeTOOLARGE
    , ReportSubStatusTypeRESOURCENOTFOUND
    ]


{-| Возврат заказа.
-}
type alias ReturnDTO =
    { id : Maybe Int
    , orderId : Maybe Int
    , creationDate : Maybe Posix
    , updateDate : Maybe Posix
    , refundStatus : Maybe RefundStatusType
    , logisticPickupPoint : Maybe LogisticPickupPointDTO
    , shipmentRecipientType : Maybe RecipientType
    , shipmentStatus : Maybe ReturnShipmentStatusType
    , refundAmount : Maybe Int
    , items : List ReturnItemDTO
    , returnType : Maybe ReturnType
    , fastReturn : Maybe Bool
    }


{-| Решения по возвратам.
-}
type alias ReturnDecisionDTO =
    { returnItemId : Maybe Int
    , count : Maybe Int
    , comment : Maybe String
    , reasonType : Maybe ReturnDecisionReasonType
    , subreasonType : Maybe ReturnDecisionSubreasonType
    , decisionType : Maybe ReturnDecisionType
    , refundAmount : Maybe Int
    , partnerCompensation : Maybe Int
    , images : Maybe ( List String )
    }


{-| Причины возврата:  * `BAD_QUALITY` — бракованный товар (есть недостатки).  * `DO_NOT_FIT` — товар не подошел.  * `WRONG_ITEM` — привезли не тот товар.  * `DAMAGE_DELIVERY` — товар поврежден при доставке.  * `LOYALTY_FAIL` — невозможно установить виновного в браке/пересорте.  * `CONTENT_FAIL` — ошибочное описание товара по вине Маркета.  * `UNKNOWN` — причина не известна. 
-}
type ReturnDecisionReasonType
    = ReturnDecisionReasonTypeBADQUALITY
    | ReturnDecisionReasonTypeDOESNOTFIT
    | ReturnDecisionReasonTypeWRONGITEM
    | ReturnDecisionReasonTypeDAMAGEDELIVERY
    | ReturnDecisionReasonTypeLOYALTYFAIL
    | ReturnDecisionReasonTypeCONTENTFAIL
    | ReturnDecisionReasonTypeUNKNOWN


returnDecisionReasonTypeVariants : List ReturnDecisionReasonType
returnDecisionReasonTypeVariants =
    [ ReturnDecisionReasonTypeBADQUALITY
    , ReturnDecisionReasonTypeDOESNOTFIT
    , ReturnDecisionReasonTypeWRONGITEM
    , ReturnDecisionReasonTypeDAMAGEDELIVERY
    , ReturnDecisionReasonTypeLOYALTYFAIL
    , ReturnDecisionReasonTypeCONTENTFAIL
    , ReturnDecisionReasonTypeUNKNOWN
    ]


{-| Детали причин возврата:   * `DO_NOT_FIT`:     * `USER_DID_NOT_LIKE` — товар не понравился.     * `USER_CHANGED_MIND` — передумал покупать.     * `DELIVERED_TOO_LONG` — длительный срок доставки, поэтому передумал.    * `BAD_QUALITY`:     * `BAD_PACKAGE` — упаковка товара была нарушена.     * `DAMAGED` — царапины, сколы.     * `NOT_WORKING` — не включается / не работает.     * `INCOMPLETENESS` — некомплект (не хватает детали в наборе, к товару).    * `WRONG_ITEM`:     * `WRONG_ITEM` — не тот товар.     * `WRONG_COLOR` — не соответствует по цвету.     * `DID_NOT_MATCH_DESCRIPTION` — не соответствует заявленным характеристикам/описанию. 
-}
type ReturnDecisionSubreasonType
    = ReturnDecisionSubreasonTypeUSERDIDNOTLIKE
    | ReturnDecisionSubreasonTypeUSERCHANGEDMIND
    | ReturnDecisionSubreasonTypeDELIVEREDTOOLONG
    | ReturnDecisionSubreasonTypeBADPACKAGE
    | ReturnDecisionSubreasonTypeDAMAGED
    | ReturnDecisionSubreasonTypeNOTWORKING
    | ReturnDecisionSubreasonTypeINCOMPLETENESS
    | ReturnDecisionSubreasonTypeWRONGITEM
    | ReturnDecisionSubreasonTypeWRONGCOLOR
    | ReturnDecisionSubreasonTypeDIDNOTMATCHDESCRIPTION
    | ReturnDecisionSubreasonTypeUNKNOWN


returnDecisionSubreasonTypeVariants : List ReturnDecisionSubreasonType
returnDecisionSubreasonTypeVariants =
    [ ReturnDecisionSubreasonTypeUSERDIDNOTLIKE
    , ReturnDecisionSubreasonTypeUSERCHANGEDMIND
    , ReturnDecisionSubreasonTypeDELIVEREDTOOLONG
    , ReturnDecisionSubreasonTypeBADPACKAGE
    , ReturnDecisionSubreasonTypeDAMAGED
    , ReturnDecisionSubreasonTypeNOTWORKING
    , ReturnDecisionSubreasonTypeINCOMPLETENESS
    , ReturnDecisionSubreasonTypeWRONGITEM
    , ReturnDecisionSubreasonTypeWRONGCOLOR
    , ReturnDecisionSubreasonTypeDIDNOTMATCHDESCRIPTION
    , ReturnDecisionSubreasonTypeUNKNOWN
    ]


{-| Решение по возврату:  * `REFUND_MONEY` — вернуть деньги покупателю.  * `REFUND_MONEY_INCLUDING_SHIPMENT` — вернуть деньги за товар и пересылку.  * `REPAIR` — отремонтировать товар.  * `REPLACE` — заменить товар.  * `SEND_TO_EXAMINATION` — взять товар на экспертизу.  * `DECLINE_REFUND` — отказать в возврате.  * `OTHER_DECISION` — другое решение. 
-}
type ReturnDecisionType
    = ReturnDecisionTypeREFUNDMONEY
    | ReturnDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT
    | ReturnDecisionTypeREPAIR
    | ReturnDecisionTypeREPLACE
    | ReturnDecisionTypeSENDTOEXAMINATION
    | ReturnDecisionTypeDECLINEREFUND
    | ReturnDecisionTypeOTHERDECISION
    | ReturnDecisionTypeUNKNOWN


returnDecisionTypeVariants : List ReturnDecisionType
returnDecisionTypeVariants =
    [ ReturnDecisionTypeREFUNDMONEY
    , ReturnDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT
    , ReturnDecisionTypeREPAIR
    , ReturnDecisionTypeREPLACE
    , ReturnDecisionTypeSENDTOEXAMINATION
    , ReturnDecisionTypeDECLINEREFUND
    , ReturnDecisionTypeOTHERDECISION
    , ReturnDecisionTypeUNKNOWN
    ]


{-| Логистическая информация по возврату.
-}
type alias ReturnInstanceDTO =
    { stockType : Maybe ReturnInstanceStockType
    , status : Maybe ReturnInstanceStatusType
    , cis : Maybe String
    , imei : Maybe String
    }


{-| Логистический статус конкретного товара.
-}
type ReturnInstanceStatusType
    = ReturnInstanceStatusTypeCREATED
    | ReturnInstanceStatusTypeRECEIVED
    | ReturnInstanceStatusTypeINTRANSIT
    | ReturnInstanceStatusTypeREADYFORPICKUP
    | ReturnInstanceStatusTypePICKED
    | ReturnInstanceStatusTypeRECEIVEDONFULFILLMENT
    | ReturnInstanceStatusTypeCANCELLED
    | ReturnInstanceStatusTypeLOST
    | ReturnInstanceStatusTypeUTILIZED
    | ReturnInstanceStatusTypePREPAREDFORUTILIZATION
    | ReturnInstanceStatusTypeEXPROPRIATED
    | ReturnInstanceStatusTypeNOTINDEMAND


returnInstanceStatusTypeVariants : List ReturnInstanceStatusType
returnInstanceStatusTypeVariants =
    [ ReturnInstanceStatusTypeCREATED
    , ReturnInstanceStatusTypeRECEIVED
    , ReturnInstanceStatusTypeINTRANSIT
    , ReturnInstanceStatusTypeREADYFORPICKUP
    , ReturnInstanceStatusTypePICKED
    , ReturnInstanceStatusTypeRECEIVEDONFULFILLMENT
    , ReturnInstanceStatusTypeCANCELLED
    , ReturnInstanceStatusTypeLOST
    , ReturnInstanceStatusTypeUTILIZED
    , ReturnInstanceStatusTypePREPAREDFORUTILIZATION
    , ReturnInstanceStatusTypeEXPROPRIATED
    , ReturnInstanceStatusTypeNOTINDEMAND
    ]


{-| Тип остатка на складе.
-}
type ReturnInstanceStockType
    = ReturnInstanceStockTypeFIT
    | ReturnInstanceStockTypeDEFECT
    | ReturnInstanceStockTypeANOMALY
    | ReturnInstanceStockTypeSURPLUS
    | ReturnInstanceStockTypeEXPIRED
    | ReturnInstanceStockTypeMISGRADING
    | ReturnInstanceStockTypeUNDEFINED
    | ReturnInstanceStockTypeINCORRECTIMEI
    | ReturnInstanceStockTypeINCORRECTSERIALNUMBER
    | ReturnInstanceStockTypeINCORRECTCIS
    | ReturnInstanceStockTypePARTMISSING
    | ReturnInstanceStockTypeNONCOMPLIENT
    | ReturnInstanceStockTypeNOTACCEPTABLE
    | ReturnInstanceStockTypeSERVICE
    | ReturnInstanceStockTypeMARKDOWN
    | ReturnInstanceStockTypeDEMO
    | ReturnInstanceStockTypeREPAIR
    | ReturnInstanceStockTypeFIRMWARE
    | ReturnInstanceStockTypeUNKNOWN


returnInstanceStockTypeVariants : List ReturnInstanceStockType
returnInstanceStockTypeVariants =
    [ ReturnInstanceStockTypeFIT
    , ReturnInstanceStockTypeDEFECT
    , ReturnInstanceStockTypeANOMALY
    , ReturnInstanceStockTypeSURPLUS
    , ReturnInstanceStockTypeEXPIRED
    , ReturnInstanceStockTypeMISGRADING
    , ReturnInstanceStockTypeUNDEFINED
    , ReturnInstanceStockTypeINCORRECTIMEI
    , ReturnInstanceStockTypeINCORRECTSERIALNUMBER
    , ReturnInstanceStockTypeINCORRECTCIS
    , ReturnInstanceStockTypePARTMISSING
    , ReturnInstanceStockTypeNONCOMPLIENT
    , ReturnInstanceStockTypeNOTACCEPTABLE
    , ReturnInstanceStockTypeSERVICE
    , ReturnInstanceStockTypeMARKDOWN
    , ReturnInstanceStockTypeDEMO
    , ReturnInstanceStockTypeREPAIR
    , ReturnInstanceStockTypeFIRMWARE
    , ReturnInstanceStockTypeUNKNOWN
    ]


{-| Список товаров в возврате.
-}
type alias ReturnItemDTO =
    { marketSku : Maybe Int
    , shopSku : String
    , count : Int
    , decisions : Maybe ( List ReturnDecisionDTO )
    , instances : Maybe ( List ReturnInstanceDTO )
    , tracks : Maybe ( List TrackDTO )
    }


{-| Решение по возврату.
-}
type ReturnRequestDecisionType
    = ReturnRequestDecisionTypeREFUNDMONEY
    | ReturnRequestDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT
    | ReturnRequestDecisionTypeREPAIR
    | ReturnRequestDecisionTypeREPLACE
    | ReturnRequestDecisionTypeSENDTOEXAMINATION
    | ReturnRequestDecisionTypeDECLINEREFUND
    | ReturnRequestDecisionTypeOTHERDECISION


returnRequestDecisionTypeVariants : List ReturnRequestDecisionType
returnRequestDecisionTypeVariants =
    [ ReturnRequestDecisionTypeREFUNDMONEY
    , ReturnRequestDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT
    , ReturnRequestDecisionTypeREPAIR
    , ReturnRequestDecisionTypeREPLACE
    , ReturnRequestDecisionTypeSENDTOEXAMINATION
    , ReturnRequestDecisionTypeDECLINEREFUND
    , ReturnRequestDecisionTypeOTHERDECISION
    ]


{-| Статус передачи возврата:  * `CREATED` — возврат создан.  * `RECEIVED` — принят у покупателя.  * `IN_TRANSIT` — возврат в пути.  * `READY_FOR_PICKUP` — возврат готов к выдаче магазину.  * `PICKED` — возврат выдан магазину.  * `LOST` — возврат утерян при транспортировке.  * `CANCELLED` — возврат отменен.  * `FULFILMENT_RECEIVED` — возврат принят на складе Маркета.  * `PREPARED_FOR_UTILIZATION` — возврат передан в утилизацию.  * `UTILIZED` — возврат утилизирован. 
-}
type ReturnShipmentStatusType
    = ReturnShipmentStatusTypeCREATED
    | ReturnShipmentStatusTypeRECEIVED
    | ReturnShipmentStatusTypeINTRANSIT
    | ReturnShipmentStatusTypeREADYFORPICKUP
    | ReturnShipmentStatusTypePICKED
    | ReturnShipmentStatusTypeLOST
    | ReturnShipmentStatusTypeEXPIRED
    | ReturnShipmentStatusTypeCANCELLED
    | ReturnShipmentStatusTypeFULFILMENTRECEIVED
    | ReturnShipmentStatusTypePREPAREDFORUTILIZATION
    | ReturnShipmentStatusTypeNOTINDEMAND
    | ReturnShipmentStatusTypeUTILIZED
    | ReturnShipmentStatusTypeREADYFOREXPROPRIATION
    | ReturnShipmentStatusTypeRECEIVEDFOREXPROPRIATION


returnShipmentStatusTypeVariants : List ReturnShipmentStatusType
returnShipmentStatusTypeVariants =
    [ ReturnShipmentStatusTypeCREATED
    , ReturnShipmentStatusTypeRECEIVED
    , ReturnShipmentStatusTypeINTRANSIT
    , ReturnShipmentStatusTypeREADYFORPICKUP
    , ReturnShipmentStatusTypePICKED
    , ReturnShipmentStatusTypeLOST
    , ReturnShipmentStatusTypeEXPIRED
    , ReturnShipmentStatusTypeCANCELLED
    , ReturnShipmentStatusTypeFULFILMENTRECEIVED
    , ReturnShipmentStatusTypePREPAREDFORUTILIZATION
    , ReturnShipmentStatusTypeNOTINDEMAND
    , ReturnShipmentStatusTypeUTILIZED
    , ReturnShipmentStatusTypeREADYFOREXPROPRIATION
    , ReturnShipmentStatusTypeRECEIVEDFOREXPROPRIATION
    ]


{-| Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
-}
type ReturnType
    = ReturnTypeUNREDEEMED
    | ReturnTypeRETURN


returnTypeVariants : List ReturnType
returnTypeVariants =
    [ ReturnTypeUNREDEEMED
    , ReturnTypeRETURN
    ]


{-| Информация о страницах результатов.
-}
type alias ScrollingPagerDTO =
    { nextPageToken : Maybe String
    , prevPageToken : Maybe String
    }


type alias SearchModelsResponse =
    { models : List ModelDTO
    , currency : Maybe CurrencyType
    , regionId : Maybe Int
    , pager : Maybe FlippingPagerDTO
    }


{-| Запрос информации об отгрузках.
-}
type alias SearchShipmentsRequest =
    { dateFrom : Posix
    , dateTo : Posix
    , statuses : Maybe ( List ShipmentStatusType )
    , orderIds : Maybe ( List Int )
    , cancelledOrders : Maybe Bool
    }


{-| Ответ на запрос информации об отгрузках.
-}
type alias SearchShipmentsResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe SearchShipmentsResponseDTO
    }


{-| Информация об отгрузках.
-}
type alias SearchShipmentsResponseDTO =
    { shipments : List ShipmentInfoDTO
    , paging : Maybe ForwardScrollingPagerDTO
    }


{-| Модель размещения:  * `FBY` — FBY. * `FBS` — FBS. * `DBS` — DBS. * `EXPRESS` — Экспресс. 
-}
type SellingProgramType
    = SellingProgramTypeFBY
    | SellingProgramTypeFBS
    | SellingProgramTypeDBS
    | SellingProgramTypeEXPRESS


sellingProgramTypeVariants : List SellingProgramType
sellingProgramTypeVariants =
    [ SellingProgramTypeFBY
    , SellingProgramTypeFBS
    , SellingProgramTypeDBS
    , SellingProgramTypeEXPRESS
    ]


{-| В какой чат нужно отправить сообщение и текст сообщения.
-}
type alias SendMessageToChatRequest =
    { message : String
    }


{-| Запрос на обновление изменение параметров прайс-листа.
-}
type alias SetFeedParamsRequest =
    { parameters : List FeedParameterDTO
    }


type alias SetOrderBoxLayoutRequest =
    { boxes : List OrderBoxLayoutDTO
    , allowRemove : Maybe Bool
    }


type alias SetOrderBoxLayoutResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe OrderBoxesLayoutDTO
    }


type alias SetOrderDeliveryDateRequest =
    { dates : OrderDeliveryDateDTO
    , reason : OrderDeliveryDateReasonType
    }


type alias SetOrderDeliveryTrackCodeRequest =
    { trackCode : String
    , deliveryServiceId : Int
    }


type alias SetOrderShipmentBoxesRequest =
    { boxes : List ParcelBoxDTO
    }


type alias SetOrderShipmentBoxesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe ShipmentBoxesDTO
    }


{-| Решения по позиции в возврате.
-}
type alias SetReturnDecisionRequest =
    { returnItemId : Int
    , decisionType : ReturnRequestDecisionType
    , comment : Maybe String
    }


{-| Запрос на передачу количества упаковок в отгрузке.
-}
type alias SetShipmentPalletsCountRequest =
    { placesCount : Int
    }


{-| Тип атрибуции:   * `CLICKS` — по кликам.   * `SHOWS` — по показам. <br><br>  О том, какие данные в отчете зависят и не зависят от типа атрибуции, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf#stats). 
-}
type ShelfsStatisticsAttributionType
    = ShelfsStatisticsAttributionTypeCLICKS
    | ShelfsStatisticsAttributionTypeSHOWS


shelfsStatisticsAttributionTypeVariants : List ShelfsStatisticsAttributionType
shelfsStatisticsAttributionTypeVariants =
    [ ShelfsStatisticsAttributionTypeCLICKS
    , ShelfsStatisticsAttributionTypeSHOWS
    ]


{-| Действия с отгрузкой:  * `CONFIRM` — подтвердить отгрузку. * `DOWNLOAD_ACT` — скачать акт приема-передачи отгрузки. * `DOWNLOAD_INBOUND_ACT` — скачать список принятых заказов. * `DOWNLOAD_DISCREPANCY_ACT` — скачать акт расхождений. * `CHANGE_PALLETS_COUNT` — указать количество палет. 
-}
type ShipmentActionType
    = ShipmentActionTypeCONFIRM
    | ShipmentActionTypeDOWNLOADACT
    | ShipmentActionTypeDOWNLOADINBOUNDACT
    | ShipmentActionTypeDOWNLOADDISCREPANCYACT
    | ShipmentActionTypeCHANGEPALLETSCOUNT


shipmentActionTypeVariants : List ShipmentActionType
shipmentActionTypeVariants =
    [ ShipmentActionTypeCONFIRM
    , ShipmentActionTypeDOWNLOADACT
    , ShipmentActionTypeDOWNLOADINBOUNDACT
    , ShipmentActionTypeDOWNLOADDISCREPANCYACT
    , ShipmentActionTypeCHANGEPALLETSCOUNT
    ]


{-| В ответе Маркет возвращает переданный вами список грузовых мест. Не обращайте на это поле внимания. 
-}
type alias ShipmentBoxesDTO =
    { boxes : List ParcelBoxDTO
    }


{-| Информация об отгрузке.
-}
type alias ShipmentDTO =
    { id : Maybe Int
    , planIntervalFrom : Maybe Posix
    , planIntervalTo : Maybe Posix
    , shipmentType : Maybe ShipmentType
    , warehouse : Maybe PartnerShipmentWarehouseDTO
    , warehouseTo : Maybe PartnerShipmentWarehouseDTO
    , externalId : Maybe String
    , deliveryService : Maybe DeliveryServiceDTO
    , palletsCount : Maybe PalletsCountDTO
    , orderIds : List Int
    , draftCount : Maybe Int
    , plannedCount : Maybe Int
    , factCount : Maybe Int
    , currentStatus : Maybe ShipmentStatusChangeDTO
    , availableActions : List ShipmentActionType
    }


{-| Список с информацией об отгрузках.
-}
type alias ShipmentInfoDTO =
    { id : Maybe Int
    , planIntervalFrom : Maybe Posix
    , planIntervalTo : Maybe Posix
    , shipmentType : Maybe ShipmentType
    , warehouse : Maybe PartnerShipmentWarehouseDTO
    , warehouseTo : Maybe PartnerShipmentWarehouseDTO
    , externalId : Maybe String
    , deliveryService : Maybe DeliveryServiceDTO
    , palletsCount : Maybe PalletsCountDTO
    , orderIds : List Int
    , draftCount : Maybe Int
    , plannedCount : Maybe Int
    , factCount : Maybe Int
    , status : Maybe ShipmentStatusType
    , statusDescription : Maybe String
    , statusUpdateTime : Maybe Posix
    }


{-| Формат страницы: * `A4` — формат страницы A4. * `A8` — формат страницы A8. 
-}
type ShipmentPalletLabelPageFormatType
    = ShipmentPalletLabelPageFormatTypeA4
    | ShipmentPalletLabelPageFormatTypeA8


shipmentPalletLabelPageFormatTypeVariants : List ShipmentPalletLabelPageFormatType
shipmentPalletLabelPageFormatTypeVariants =
    [ ShipmentPalletLabelPageFormatTypeA4
    , ShipmentPalletLabelPageFormatTypeA8
    ]


{-| Статус отгрузки.
-}
type alias ShipmentStatusChangeDTO =
    { status : Maybe ShipmentStatusType
    , description : Maybe String
    , updateTime : Maybe Posix
    }


{-| Статус отгрузки:  * `OUTBOUND_CREATED` — формируется. * `OUTBOUND_READY_FOR_CONFIRMATION` — можно обрабатывать. * `OUTBOUND_CONFIRMED` — подтверждена и готова к отправке. * `OUTBOUND_SIGNED` — по ней подписан электронный акт приема-передачи. * `ACCEPTED` — принята в сортировочном центре или пункте приема. * `ACCEPTED_WITH_DISCREPANCIES` — принята с расхождениями. * `FINISHED` — завершена. * `ERROR` — отменена из-за ошибки. 
-}
type ShipmentStatusType
    = ShipmentStatusTypeOUTBOUNDCREATED
    | ShipmentStatusTypeOUTBOUNDREADYFORCONFIRMATION
    | ShipmentStatusTypeOUTBOUNDCONFIRMED
    | ShipmentStatusTypeOUTBOUNDSIGNED
    | ShipmentStatusTypeFINISHED
    | ShipmentStatusTypeACCEPTED
    | ShipmentStatusTypeACCEPTEDWITHDISCREPANCIES
    | ShipmentStatusTypeERROR


shipmentStatusTypeVariants : List ShipmentStatusType
shipmentStatusTypeVariants =
    [ ShipmentStatusTypeOUTBOUNDCREATED
    , ShipmentStatusTypeOUTBOUNDREADYFORCONFIRMATION
    , ShipmentStatusTypeOUTBOUNDCONFIRMED
    , ShipmentStatusTypeOUTBOUNDSIGNED
    , ShipmentStatusTypeFINISHED
    , ShipmentStatusTypeACCEPTED
    , ShipmentStatusTypeACCEPTEDWITHDISCREPANCIES
    , ShipmentStatusTypeERROR
    ]


{-| Способ отгрузки заказов:  * `IMPORT` — вы самостоятельно привозите заказы в выбранный сортировочный центр или пункт приема заказов. * `WITHDRAW` — вы отгружаете заказы со своего склада курьерам Яндекс Маркета. 
-}
type ShipmentType
    = ShipmentTypeIMPORT
    | ShipmentTypeWITHDRAW


shipmentTypeVariants : List ShipmentType
shipmentTypeVariants =
    [ ShipmentTypeIMPORT
    , ShipmentTypeWITHDRAW
    ]


{-| Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
-}
type alias ShopSku =
    { }


{-| Группировка данных отчета. Возможные значения: * `CATEGORIES` — группировка по категориям. * `OFFERS` — группировка по товарам. 
-}
type ShowsSalesGroupingType
    = ShowsSalesGroupingTypeCATEGORIES
    | ShowsSalesGroupingTypeOFFERS


showsSalesGroupingTypeVariants : List ShowsSalesGroupingType
showsSalesGroupingTypeVariants =
    [ ShowsSalesGroupingTypeCATEGORIES
    , ShowsSalesGroupingTypeOFFERS
    ]


{-| Идентификаторы отзывов.
-}
type alias SkipGoodsFeedbackReactionRequest =
    { feedbackIds : List Int
    }


{-| Список товаров и ставок на них.
-}
type alias SkuBidItemDTO =
    { sku : String
    , bid : Int
    }


{-| Список товаров с рекомендованными ставками.
-}
type alias SkuBidRecommendationItemDTO =
    { sku : String
    , bid : Int
    , bidRecommendations : Maybe ( List BidRecommendationItemDTO )
    , priceRecommendations : Maybe ( List PriceRecommendationItemDTO )
    }


{-| Направление сортировки.  Возможные значения: - `ASC` — сортировка по возрастанию. - `DESC` — сортировка по убыванию. 
-}
type SortOrderType
    = SortOrderTypeASC
    | SortOrderTypeDESC


sortOrderTypeVariants : List SortOrderType
sortOrderTypeVariants =
    [ SortOrderTypeASC
    , SortOrderTypeDESC
    ]


{-| Товар, для которого требуется получить цены для продвижения.
-}
type alias SuggestOfferPriceDTO =
    { offerId : Maybe String
    , marketSku : Maybe Int
    }


{-| Запрос на получение списка цен для продвижения.
-}
type alias SuggestPricesRequest =
    { offers : List SuggestOfferPriceDTO
    }


{-| Ответ на запрос списка цен для продвижения.
-}
type alias SuggestPricesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe SuggestPricesResultDTO
    }


{-| Результат запроса цен для продвижения.
-}
type alias SuggestPricesResultDTO =
    { offers : List PriceSuggestOfferDTO
    }


{-| Информация о товаре.
-}
type alias SuggestedOfferDTO =
    { offerId : Maybe String
    , name : Maybe String
    , category : Maybe String
    , vendor : Maybe String
    , barcodes : Maybe ( List String )
    , description : Maybe String
    , vendorCode : Maybe String
    , basicPrice : Maybe BasePriceDTO
    }


{-| Товар с соответствующей карточкой на Маркете.
-}
type alias SuggestedOfferMappingDTO =
    { offer : Maybe SuggestedOfferDTO
    , mapping : Maybe GetMappingDTO
    }


{-| Информация о тарифах, по которым нужно заплатить за услуги Маркета.
-}
type alias TariffDTO =
    { type_ : TariffType
    , percent : Maybe Float
    , amount : Float
    , parameters : List TariffParameterDTO
    }


{-| Детали расчета конкретной услуги Маркета.
-}
type alias TariffParameterDTO =
    { name : String
    , value : String
    }


{-| Услуга Маркета или дополнительный тариф к услуге размещения:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `STORAGE` — хранение товара на складе Маркета в течение суток.  * `SURPLUS` — хранение излишков на складе Маркета.  * `WITHDRAW` — вывоз товара со склада Маркета.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `CROSSREGIONAL_DELIVERY_RETURN` — доставка невыкупов и возвратов.  * `DISPOSAL` — утилизация.  * `SORTING_CENTER_STORAGE` — хранение невыкупов и возвратов.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `FF_XDOC_SUPPLY_BOX` — поставка товара через транзитный склад (за короб).  * `FF_XDOC_SUPPLY_PALLET` — поставка товара через транзитный склад (за палету).  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  * `RETURN_PROCESSING` — обработка невыкупов и возвратов.  * `EXPRESS_CANCELLED_BY_PARTNER` — отмена заказа с экспресс-доставкой.  * `DELIVERY_TO_CUSTOMER_RETURN` — возврат доставляемого товара на склад.  * `CROSSBORDER_DELIVERY` — доставка из-за рубежа.  * `INTAKE_SORTING_BULKY_CARGO` — сортировка заказов с крупногабаритными товарами, которые Маркет забрал со склада продавца.  * `INTAKE_SORTING_SMALL_GOODS` — сортировка заказов с малогабаритными товарами, которые Маркет забрал со склада продавца.  * `INTAKE_SORTING_DAILY` — организация забора заказов со склада продавца.  * `FF_STORAGE_BILLING` — хранения товаров на складе.  * `CANCELLED_ORDER_FEE_QI` — отмена заказа по вине продавца.  * `LATE_ORDER_EXECUTION_FEE_QI` — несвоевременная отгрузка или доставка.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
-}
type TariffType
    = TariffTypeAGENCYCOMMISSION
    | TariffTypePAYMENTTRANSFER
    | TariffTypeSTORAGE
    | TariffTypeWITHDRAW
    | TariffTypeSURPLUS
    | TariffTypeFEE
    | TariffTypeDELIVERYTOCUSTOMER
    | TariffTypeCROSSREGIONALDELIVERY
    | TariffTypeCROSSREGIONALDELIVERYRETURN
    | TariffTypeDISPOSAL
    | TariffTypeSORTINGCENTERSTORAGE
    | TariffTypeEXPRESSDELIVERY
    | TariffTypeFFXDOCSUPPLYBOX
    | TariffTypeFFXDOCSUPPLYPALLET
    | TariffTypeSORTING
    | TariffTypeMIDDLEMILE
    | TariffTypeRETURNPROCESSING
    | TariffTypeEXPRESSCANCELLEDBYPARTNER
    | TariffTypeDELIVERYTOCUSTOMERRETURN
    | TariffTypeCROSSBORDERDELIVERY
    | TariffTypeINTAKESORTINGBULKYCARGO
    | TariffTypeINTAKESORTINGSMALLGOODS
    | TariffTypeINTAKESORTINGDAILY
    | TariffTypeFFSTORAGEBILLING
    | TariffTypeCANCELLEDORDERFEEQI
    | TariffTypeLATEORDEREXECUTIONFEEQI


tariffTypeVariants : List TariffType
tariffTypeVariants =
    [ TariffTypeAGENCYCOMMISSION
    , TariffTypePAYMENTTRANSFER
    , TariffTypeSTORAGE
    , TariffTypeWITHDRAW
    , TariffTypeSURPLUS
    , TariffTypeFEE
    , TariffTypeDELIVERYTOCUSTOMER
    , TariffTypeCROSSREGIONALDELIVERY
    , TariffTypeCROSSREGIONALDELIVERYRETURN
    , TariffTypeDISPOSAL
    , TariffTypeSORTINGCENTERSTORAGE
    , TariffTypeEXPRESSDELIVERY
    , TariffTypeFFXDOCSUPPLYBOX
    , TariffTypeFFXDOCSUPPLYPALLET
    , TariffTypeSORTING
    , TariffTypeMIDDLEMILE
    , TariffTypeRETURNPROCESSING
    , TariffTypeEXPRESSCANCELLEDBYPARTNER
    , TariffTypeDELIVERYTOCUSTOMERRETURN
    , TariffTypeCROSSBORDERDELIVERY
    , TariffTypeINTAKESORTINGBULKYCARGO
    , TariffTypeINTAKESORTINGSMALLGOODS
    , TariffTypeINTAKESORTINGDAILY
    , TariffTypeFFSTORAGEBILLING
    , TariffTypeCANCELLEDORDERFEEQI
    , TariffTypeLATEORDEREXECUTIONFEEQI
    ]


{-| Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
-}
type alias TimePeriodDTO =
    { timePeriod : Int
    , timeUnit : TimeUnitType
    , comment : Maybe String
    }


{-| Единица измерения времени:  * `HOUR` — час. * `DAY` — сутки. * `WEEK` — неделя. * `MONTH` — месяц. * `YEAR` — год. 
-}
type TimeUnitType
    = TimeUnitTypeHOUR
    | TimeUnitTypeDAY
    | TimeUnitTypeWEEK
    | TimeUnitTypeMONTH
    | TimeUnitTypeYEAR


timeUnitTypeVariants : List TimeUnitType
timeUnitTypeVariants =
    [ TimeUnitTypeHOUR
    , TimeUnitTypeDAY
    , TimeUnitTypeWEEK
    , TimeUnitTypeMONTH
    , TimeUnitTypeYEAR
    ]


{-| Информация о трек-номерах.
-}
type alias TrackDTO =
    { trackCode : Maybe String
    }


{-| Запрос переноса заказов из отгрузки.
-}
type alias TransferOrdersFromShipmentRequest =
    { orderIds : List Int
    }


{-| Информация об оборачиваемости товара.
-}
type alias TurnoverDTO =
    { turnover : TurnoverType
    , turnoverDays : Maybe Float
    }


{-| Оценка оборачиваемости.  |enum|Диапазон оборачиваемости|Комментарий| |-|-|-| |`LOW`|`turnoverDays` ≥ 120|| |`ALMOST_LOW`|100 ≤ `turnoverDays` < 120|| |`HIGH`|45 ≤ `turnoverDays` < 100|| |`VERY_HIGH`|0 ≤ `turnoverDays` < 45|| |`NO_SALES`|—|Продаж нет.| |`FREE_STORE`|Любое значение.|Товары этой категории сейчас хранятся бесплатно.| 
-}
type TurnoverType
    = TurnoverTypeLOW
    | TurnoverTypeALMOSTLOW
    | TurnoverTypeHIGH
    | TurnoverTypeVERYHIGH
    | TurnoverTypeNOSALES
    | TurnoverTypeFREESTORE


turnoverTypeVariants : List TurnoverType
turnoverTypeVariants =
    [ TurnoverTypeLOW
    , TurnoverTypeALMOSTLOW
    , TurnoverTypeHIGH
    , TurnoverTypeVERYHIGH
    , TurnoverTypeNOSALES
    , TurnoverTypeFREESTORE
    ]


{-| Единица измерения.
-}
type alias UnitDTO =
    { id : Int
    , name : String
    , fullName : String
    }


{-| Товар с новой ценой.
-}
type alias UpdateBusinessOfferPriceDTO =
    { offerId : String
    , price : UpdatePriceWithDiscountDTO
    }


{-| Запрос на установку базовых цен на товары.
-}
type alias UpdateBusinessPricesRequest =
    { offers : List UpdateBusinessOfferPriceDTO
    }


{-| Параметры размещения товара в магазине.
-}
type alias UpdateCampaignOfferDTO =
    { offerId : String
    , quantum : Maybe QuantumDTO
    , available : Maybe Bool
    , vat : Maybe Int
    }


{-| Запрос на обновление предложений товаров магазина.
-}
type alias UpdateCampaignOffersRequest =
    { offers : List UpdateCampaignOfferDTO
    }


{-| Комментарий к отзыву или другому комментарию.
-}
type alias UpdateGoodsFeedbackCommentDTO =
    { id : Maybe Int
    , parentId : Maybe Int
    , text : String
    }


{-| Комментарий к отзыву.
-}
type alias UpdateGoodsFeedbackCommentRequest =
    { feedbackId : Int
    , comment : UpdateGoodsFeedbackCommentDTO
    }


type alias UpdateGoodsFeedbackCommentResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe GoodsFeedbackCommentDTO
    }


{-| Карточка на Маркете, которая, с вашей точки зрения, подходит товару. Чтобы определить идентификатор подходящей карточки, воспользуйтесь поиском в кабинете (**Товары** → **Каталог** → **Загрузить товары**).  По результатам проверки Маркет может привязать товар к более подходящей карточке. 
-}
type alias UpdateMappingDTO =
    { marketSku : Maybe Int
    }


{-| Информация о товарах в каталоге.
-}
type alias UpdateMappingsOfferDTO =
    { name : Maybe String
    , shopSku : Maybe String
    , category : Maybe String
    , vendor : Maybe String
    , vendorCode : Maybe String
    , description : Maybe String
    , id : Maybe String
    , feedId : Maybe Int
    , barcodes : Maybe ( List String )
    , urls : Maybe ( List String )
    , pictures : Maybe ( List String )
    , manufacturer : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , minShipment : Maybe Int
    , transportUnitSize : Maybe Int
    , quantumOfSupply : Maybe Int
    , deliveryDurationDays : Maybe Int
    , boxCount : Maybe Int
    , customsCommodityCodes : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , supplyScheduleDays : Maybe ( List DayOfWeekType )
    , shelfLifeDays : Maybe Int
    , lifeTimeDays : Maybe Int
    , guaranteePeriodDays : Maybe Int
    , processingState : Maybe OfferProcessingStateDTO
    , availability : Maybe OfferAvailabilityStatusType
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , certificate : Maybe String
    }


{-| Запрос на установку новых значений для параметров.
-}
type alias UpdateOfferContentRequest =
    { offersContent : List OfferContentDTO
    }


{-| Описывает проблемы, которые появились при сохранении товара.
-}
type alias UpdateOfferContentResponse =
    { status : Maybe ApiResponseStatusType
    , results : Maybe ( List UpdateOfferContentResultDTO )
    }


{-| Ошибки и предупреждения, которые появились из-за переданных характеристик.
-}
type alias UpdateOfferContentResultDTO =
    { offerId : String
    , errors : Maybe ( List OfferContentErrorDTO )
    , warnings : Maybe ( List OfferContentErrorDTO )
    }


{-| Параметры товара.
-}
type alias UpdateOfferDTO =
    { offerId : String
    , name : Maybe String
    , marketCategoryId : Maybe Int
    , category : Maybe String
    , pictures : Maybe ( List String )
    , videos : Maybe ( List String )
    , manuals : Maybe ( List OfferManualDTO )
    , vendor : Maybe String
    , barcodes : Maybe ( List String )
    , description : Maybe String
    , manufacturerCountries : Maybe ( List String )
    , weightDimensions : Maybe OfferWeightDimensionsDTO
    , vendorCode : Maybe String
    , tags : Maybe ( List String )
    , shelfLife : Maybe TimePeriodDTO
    , lifeTime : Maybe TimePeriodDTO
    , guaranteePeriod : Maybe TimePeriodDTO
    , customsCommodityCode : Maybe String
    , certificates : Maybe ( List String )
    , boxCount : Maybe Int
    , condition : Maybe OfferConditionDTO
    , type_ : Maybe OfferType
    , downloadable : Maybe Bool
    , adult : Maybe Bool
    , age : Maybe AgeDTO
    , params : Maybe ( List OfferParamDTO )
    , parameterValues : Maybe ( List ParameterValueDTO )
    , basicPrice : Maybe UpdatePriceWithDiscountDTO
    , purchasePrice : Maybe BasePriceDTO
    , additionalExpenses : Maybe BasePriceDTO
    , cofinancePrice : Maybe BasePriceDTO
    }


{-| Информация о товаре.
-}
type alias UpdateOfferMappingDTO =
    { offer : UpdateOfferDTO
    , mapping : Maybe UpdateMappingDTO
    }


{-| Список товаров.  В теле запроса можно передать от одного до 500 товаров.  Обязательный параметр. 
-}
type alias UpdateOfferMappingEntryDTO =
    { mapping : Maybe OfferMappingDTO
    , awaitingModerationMapping : Maybe OfferMappingDTO
    , rejectedMapping : Maybe OfferMappingDTO
    , offer : Maybe UpdateMappingsOfferDTO
    }


{-| Запрос на обновление товаров.
-}
type alias UpdateOfferMappingEntryRequest =
    { offerMappingEntries : List UpdateOfferMappingEntryDTO
    }


{-| Ошибки и предупреждения, которые появились из-за переданных характеристик.
-}
type alias UpdateOfferMappingResultDTO =
    { offerId : String
    , errors : Maybe ( List OfferMappingErrorDTO )
    , warnings : Maybe ( List OfferMappingErrorDTO )
    }


type alias UpdateOfferMappingsRequest =
    { offerMappings : List UpdateOfferMappingDTO
    , onlyPartnerMediaContent : Maybe Bool
    }


{-| Описывает проблемы, возникшие при сохранении товара.
-}
type alias UpdateOfferMappingsResponse =
    { status : Maybe ApiResponseStatusType
    , results : Maybe ( List UpdateOfferMappingResultDTO )
    }


{-| Запрос на обновление состава заказа.
-}
type alias UpdateOrderItemRequest =
    { items : List OrderItemModificationDTO
    , reason : Maybe OrderItemsModificationRequestReasonType
    }


{-| Список заказов.
-}
type alias UpdateOrderStatusDTO =
    { id : Maybe Int
    , status : Maybe OrderStatusType
    , substatus : Maybe OrderSubstatusType
    , updateStatus : Maybe OrderUpdateStatusType
    , errorDetails : Maybe String
    }


type alias UpdateOrderStatusRequest =
    { order : OrderStatusChangeDTO
    }


{-| Информация об изменении статуса заказа.
-}
type alias UpdateOrderStatusResponse =
    { order : Maybe OrderDTO
    }


{-| Список заказов, статус которых обновился.
-}
type alias UpdateOrderStatusesDTO =
    { orders : List UpdateOrderStatusDTO
    }


{-| Список заказов.
-}
type alias UpdateOrderStatusesRequest =
    { orders : List OrderStateDTO
    }


type alias UpdateOrderStatusesResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe UpdateOrderStatusesDTO
    }


{-| Запрос на обновление срока хранения заказа в ПВЗ.
-}
type alias UpdateOrderStorageLimitRequest =
    { newDate : Posix
    }


{-| Запрос на создание или изменение лицензий для точек продаж.
-}
type alias UpdateOutletLicenseRequest =
    { licenses : List OutletLicenseDTO
    }


{-| Цена с указанием скидки.
-}
type alias UpdatePriceWithDiscountDTO =
    { value : Float
    , currencyId : CurrencyType
    , discountBase : Maybe Float
    }


{-| Запрос на установку цен на товары.
-}
type alias UpdatePricesRequest =
    { offers : List OfferPriceDTO
    }


{-| Описание товаров, которые участвуют в акции.
-}
type alias UpdatePromoOfferDTO =
    { offerId : String
    , params : Maybe UpdatePromoOfferParamsDTO
    }


{-| Параметры товара в акции с типом `DIRECT_DISCOUNT` или `BLUE_FLASH`.  Обязательный параметр для акций с этими типами. 
-}
type alias UpdatePromoOfferDiscountParamsDTO =
    { price : Maybe Int
    , promoPrice : Maybe Int
    }


{-| Параметры товара, который участвует в акции.
-}
type alias UpdatePromoOfferParamsDTO =
    { discountParams : Maybe UpdatePromoOfferDiscountParamsDTO
    }


{-| Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре `offers`. 
-}
type alias UpdatePromoOffersRequest =
    { promoId : String
    , offers : List UpdatePromoOfferDTO
    }


{-| Результат добавления товаров в акцию.
-}
type alias UpdatePromoOffersResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe UpdatePromoOffersResultDTO
    }


{-| Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
-}
type alias UpdatePromoOffersResultDTO =
    { rejectedOffers : Maybe ( List RejectedPromoOfferUpdateDTO )
    , warningOffers : Maybe ( List WarningPromoOfferUpdateDTO )
    }


{-| Информация об остатках одного товара на одном из складов.
-}
type alias UpdateStockDTO =
    { sku : String
    , items : List UpdateStockItemDTO
    }


{-| Информация об остатках товара. 
-}
type alias UpdateStockItemDTO =
    { count : Int
    , updatedAt : Maybe Posix
    }


{-| Запрос на изменение информации по остаткам товаров.
-}
type alias UpdateStocksRequest =
    { skus : List UpdateStockDTO
    }


{-| Время последнего обновления.
-}
type alias UpdateTimeDTO =
    { updatedAt : Posix
    }


{-| Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`. 
-}
type alias ValueRestrictionDTO =
    { limitingParameterId : Int
    , limitedValues : List OptionValuesLimitedDTO
    }


type alias VerifyOrderEacRequest =
    { code : Maybe String
    }


type alias VerifyOrderEacResponse =
    { status : Maybe ApiResponseStatusType
    , result : Maybe EacVerificationResultDTO
    }


{-| Адрес склада.
-}
type alias WarehouseAddressDTO =
    { city : String
    , street : Maybe String
    , number : Maybe String
    , building : Maybe String
    , block : Maybe String
    , gps : GpsDTO
    }


{-| Информация о складе.
-}
type alias WarehouseDTO =
    { id : Int
    , name : String
    , campaignId : Int
    , express : Bool
    , address : Maybe WarehouseAddressDTO
    }


{-| Информация о группе складов.
-}
type alias WarehouseGroupDTO =
    { name : String
    , mainWarehouse : WarehouseDTO
    , warehouses : List WarehouseDTO
    }


{-| Информация об остатках товара.
-}
type alias WarehouseOfferDTO =
    { offerId : String
    , turnoverSummary : Maybe TurnoverDTO
    , stocks : List WarehouseStockDTO
    , updatedAt : Maybe Posix
    }


{-| Информация об остатках товаров на складе.
-}
type alias WarehouseOffersDTO =
    { warehouseId : Int
    , offers : List WarehouseOfferDTO
    }


{-| Информация об остатках товара.
-}
type alias WarehouseStockDTO =
    { type_ : WarehouseStockType
    , count : Int
    }


{-| Тип остатков товаров на складе:  * `AVAILABLE` (соответствует типу «Доступный к заказу» в отчете «Остатки на складе» в кабинете продавца на Маркете) — товар, доступный для продажи.  * `DEFECT` (соответствует типу «Брак») — товар с браком.  * `EXPIRED` (соответствует типу «Просрочен») — товар с истекшим сроком годности.  * `FIT` (соответствует типу «Годный») — товар, который доступен для продажи или уже зарезервирован.  * `FREEZE` — товар, который зарезервирован для заказов.  * `QUARANTINE` (соответствует типу «Карантин») — товар, временно недоступный для продажи (например, товар перемещают из одного помещения склада в другое).  * `UTILIZATION` — товар, который будет утилизирован. 
-}
type WarehouseStockType
    = WarehouseStockTypeFIT
    | WarehouseStockTypeFREEZE
    | WarehouseStockTypeAVAILABLE
    | WarehouseStockTypeQUARANTINE
    | WarehouseStockTypeUTILIZATION
    | WarehouseStockTypeDEFECT
    | WarehouseStockTypeEXPIRED


warehouseStockTypeVariants : List WarehouseStockType
warehouseStockTypeVariants =
    [ WarehouseStockTypeFIT
    , WarehouseStockTypeFREEZE
    , WarehouseStockTypeAVAILABLE
    , WarehouseStockTypeQUARANTINE
    , WarehouseStockTypeUTILIZATION
    , WarehouseStockTypeDEFECT
    , WarehouseStockTypeEXPIRED
    ]


{-| Информация о складах и группах складов.
-}
type alias WarehousesDTO =
    { warehouses : List WarehouseDTO
    , warehouseGroups : List WarehouseGroupDTO
    }


{-| Описание предупреждения, которое появилось при добавлении товара.
-}
type alias WarningPromoOfferUpdateDTO =
    { offerId : String
    , warnings : List PromoOfferUpdateWarningDTO
    }


-- ENCODER


encodeAcceptOrderCancellationRequest : AcceptOrderCancellationRequest -> Json.Encode.Value
encodeAcceptOrderCancellationRequest =
    encodeObject << encodeAcceptOrderCancellationRequestPairs


encodeAcceptOrderCancellationRequestWithTag : ( String, String ) -> AcceptOrderCancellationRequest -> Json.Encode.Value
encodeAcceptOrderCancellationRequestWithTag (tagField, tag) model =
    encodeObject (encodeAcceptOrderCancellationRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAcceptOrderCancellationRequestPairs : AcceptOrderCancellationRequest -> List EncodedField
encodeAcceptOrderCancellationRequestPairs model =
    let
        pairs =
            [ encode "accepted" Json.Encode.bool model.accepted
            , maybeEncode "reason" encodeOrderCancellationReasonType model.reason
            ]
    in
    pairs


encodeAddHiddenOffersRequest : AddHiddenOffersRequest -> Json.Encode.Value
encodeAddHiddenOffersRequest =
    encodeObject << encodeAddHiddenOffersRequestPairs


encodeAddHiddenOffersRequestWithTag : ( String, String ) -> AddHiddenOffersRequest -> Json.Encode.Value
encodeAddHiddenOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeAddHiddenOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddHiddenOffersRequestPairs : AddHiddenOffersRequest -> List EncodedField
encodeAddHiddenOffersRequestPairs model =
    let
        pairs =
            [ encode "hiddenOffers" (Json.Encode.list encodeHiddenOfferDTO) model.hiddenOffers
            ]
    in
    pairs


encodeAddOffersToArchiveDTO : AddOffersToArchiveDTO -> Json.Encode.Value
encodeAddOffersToArchiveDTO =
    encodeObject << encodeAddOffersToArchiveDTOPairs


encodeAddOffersToArchiveDTOWithTag : ( String, String ) -> AddOffersToArchiveDTO -> Json.Encode.Value
encodeAddOffersToArchiveDTOWithTag (tagField, tag) model =
    encodeObject (encodeAddOffersToArchiveDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddOffersToArchiveDTOPairs : AddOffersToArchiveDTO -> List EncodedField
encodeAddOffersToArchiveDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "notArchivedOffers" (Json.Encode.list encodeAddOffersToArchiveErrorDTO) model.notArchivedOffers
            ]
    in
    pairs


encodeAddOffersToArchiveErrorDTO : AddOffersToArchiveErrorDTO -> Json.Encode.Value
encodeAddOffersToArchiveErrorDTO =
    encodeObject << encodeAddOffersToArchiveErrorDTOPairs


encodeAddOffersToArchiveErrorDTOWithTag : ( String, String ) -> AddOffersToArchiveErrorDTO -> Json.Encode.Value
encodeAddOffersToArchiveErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeAddOffersToArchiveErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddOffersToArchiveErrorDTOPairs : AddOffersToArchiveErrorDTO -> List EncodedField
encodeAddOffersToArchiveErrorDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "error" encodeAddOffersToArchiveErrorType model.error
            ]
    in
    pairs


stringFromAddOffersToArchiveErrorType : AddOffersToArchiveErrorType -> String
stringFromAddOffersToArchiveErrorType model =
    case model of
        AddOffersToArchiveErrorTypeOFFERHASSTOCKS ->
            "OFFER_HAS_STOCKS"

        AddOffersToArchiveErrorTypeUNKNOWN ->
            "UNKNOWN"


encodeAddOffersToArchiveErrorType : AddOffersToArchiveErrorType -> Json.Encode.Value
encodeAddOffersToArchiveErrorType =
    Json.Encode.string << stringFromAddOffersToArchiveErrorType


encodeAddOffersToArchiveRequest : AddOffersToArchiveRequest -> Json.Encode.Value
encodeAddOffersToArchiveRequest =
    encodeObject << encodeAddOffersToArchiveRequestPairs


encodeAddOffersToArchiveRequestWithTag : ( String, String ) -> AddOffersToArchiveRequest -> Json.Encode.Value
encodeAddOffersToArchiveRequestWithTag (tagField, tag) model =
    encodeObject (encodeAddOffersToArchiveRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddOffersToArchiveRequestPairs : AddOffersToArchiveRequest -> List EncodedField
encodeAddOffersToArchiveRequestPairs model =
    let
        pairs =
            [ encode "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeAddOffersToArchiveResponse : AddOffersToArchiveResponse -> Json.Encode.Value
encodeAddOffersToArchiveResponse =
    encodeObject << encodeAddOffersToArchiveResponsePairs


encodeAddOffersToArchiveResponseWithTag : ( String, String ) -> AddOffersToArchiveResponse -> Json.Encode.Value
encodeAddOffersToArchiveResponseWithTag (tagField, tag) model =
    encodeObject (encodeAddOffersToArchiveResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddOffersToArchiveResponsePairs : AddOffersToArchiveResponse -> List EncodedField
encodeAddOffersToArchiveResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeAddOffersToArchiveDTO model.result
            ]
    in
    pairs


stringFromAffectedOrderQualityRatingComponentType : AffectedOrderQualityRatingComponentType -> String
stringFromAffectedOrderQualityRatingComponentType model =
    case model of
        AffectedOrderQualityRatingComponentTypeDBSCANCELLATIONRATE ->
            "DBS_CANCELLATION_RATE"

        AffectedOrderQualityRatingComponentTypeDBSLATEDELIVERYRATE ->
            "DBS_LATE_DELIVERY_RATE"

        AffectedOrderQualityRatingComponentTypeFBSCANCELLATIONRATE ->
            "FBS_CANCELLATION_RATE"

        AffectedOrderQualityRatingComponentTypeFBSLATESHIPRATE ->
            "FBS_LATE_SHIP_RATE"


encodeAffectedOrderQualityRatingComponentType : AffectedOrderQualityRatingComponentType -> Json.Encode.Value
encodeAffectedOrderQualityRatingComponentType =
    Json.Encode.string << stringFromAffectedOrderQualityRatingComponentType


encodeAgeDTO : AgeDTO -> Json.Encode.Value
encodeAgeDTO =
    encodeObject << encodeAgeDTOPairs


encodeAgeDTOWithTag : ( String, String ) -> AgeDTO -> Json.Encode.Value
encodeAgeDTOWithTag (tagField, tag) model =
    encodeObject (encodeAgeDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAgeDTOPairs : AgeDTO -> List EncodedField
encodeAgeDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "ageUnit" encodeAgeUnitType model.ageUnit
            ]
    in
    pairs


stringFromAgeUnitType : AgeUnitType -> String
stringFromAgeUnitType model =
    case model of
        AgeUnitTypeYEAR ->
            "YEAR"

        AgeUnitTypeMONTH ->
            "MONTH"


encodeAgeUnitType : AgeUnitType -> Json.Encode.Value
encodeAgeUnitType =
    Json.Encode.string << stringFromAgeUnitType


encodeApiClientDataErrorResponse : ApiClientDataErrorResponse -> Json.Encode.Value
encodeApiClientDataErrorResponse =
    encodeObject << encodeApiClientDataErrorResponsePairs


encodeApiClientDataErrorResponseWithTag : ( String, String ) -> ApiClientDataErrorResponse -> Json.Encode.Value
encodeApiClientDataErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiClientDataErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiClientDataErrorResponsePairs : ApiClientDataErrorResponse -> List EncodedField
encodeApiClientDataErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiErrorDTO : ApiErrorDTO -> Json.Encode.Value
encodeApiErrorDTO =
    encodeObject << encodeApiErrorDTOPairs


encodeApiErrorDTOWithTag : ( String, String ) -> ApiErrorDTO -> Json.Encode.Value
encodeApiErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeApiErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiErrorDTOPairs : ApiErrorDTO -> List EncodedField
encodeApiErrorDTOPairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , maybeEncode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeApiErrorResponse : ApiErrorResponse -> Json.Encode.Value
encodeApiErrorResponse =
    encodeObject << encodeApiErrorResponsePairs


encodeApiErrorResponseWithTag : ( String, String ) -> ApiErrorResponse -> Json.Encode.Value
encodeApiErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiErrorResponsePairs : ApiErrorResponse -> List EncodedField
encodeApiErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiForbiddenErrorResponse : ApiForbiddenErrorResponse -> Json.Encode.Value
encodeApiForbiddenErrorResponse =
    encodeObject << encodeApiForbiddenErrorResponsePairs


encodeApiForbiddenErrorResponseWithTag : ( String, String ) -> ApiForbiddenErrorResponse -> Json.Encode.Value
encodeApiForbiddenErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiForbiddenErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiForbiddenErrorResponsePairs : ApiForbiddenErrorResponse -> List EncodedField
encodeApiForbiddenErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiLimitErrorResponse : ApiLimitErrorResponse -> Json.Encode.Value
encodeApiLimitErrorResponse =
    encodeObject << encodeApiLimitErrorResponsePairs


encodeApiLimitErrorResponseWithTag : ( String, String ) -> ApiLimitErrorResponse -> Json.Encode.Value
encodeApiLimitErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiLimitErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiLimitErrorResponsePairs : ApiLimitErrorResponse -> List EncodedField
encodeApiLimitErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiLockedErrorResponse : ApiLockedErrorResponse -> Json.Encode.Value
encodeApiLockedErrorResponse =
    encodeObject << encodeApiLockedErrorResponsePairs


encodeApiLockedErrorResponseWithTag : ( String, String ) -> ApiLockedErrorResponse -> Json.Encode.Value
encodeApiLockedErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiLockedErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiLockedErrorResponsePairs : ApiLockedErrorResponse -> List EncodedField
encodeApiLockedErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiNotFoundErrorResponse : ApiNotFoundErrorResponse -> Json.Encode.Value
encodeApiNotFoundErrorResponse =
    encodeObject << encodeApiNotFoundErrorResponsePairs


encodeApiNotFoundErrorResponseWithTag : ( String, String ) -> ApiNotFoundErrorResponse -> Json.Encode.Value
encodeApiNotFoundErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiNotFoundErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiNotFoundErrorResponsePairs : ApiNotFoundErrorResponse -> List EncodedField
encodeApiNotFoundErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiResponse : ApiResponse -> Json.Encode.Value
encodeApiResponse =
    encodeObject << encodeApiResponsePairs


encodeApiResponseWithTag : ( String, String ) -> ApiResponse -> Json.Encode.Value
encodeApiResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiResponsePairs : ApiResponse -> List EncodedField
encodeApiResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            ]
    in
    pairs


stringFromApiResponseStatusType : ApiResponseStatusType -> String
stringFromApiResponseStatusType model =
    case model of
        ApiResponseStatusTypeOK ->
            "OK"

        ApiResponseStatusTypeERROR ->
            "ERROR"


encodeApiResponseStatusType : ApiResponseStatusType -> Json.Encode.Value
encodeApiResponseStatusType =
    Json.Encode.string << stringFromApiResponseStatusType


encodeApiServerErrorResponse : ApiServerErrorResponse -> Json.Encode.Value
encodeApiServerErrorResponse =
    encodeObject << encodeApiServerErrorResponsePairs


encodeApiServerErrorResponseWithTag : ( String, String ) -> ApiServerErrorResponse -> Json.Encode.Value
encodeApiServerErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiServerErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiServerErrorResponsePairs : ApiServerErrorResponse -> List EncodedField
encodeApiServerErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeApiUnauthorizedErrorResponse : ApiUnauthorizedErrorResponse -> Json.Encode.Value
encodeApiUnauthorizedErrorResponse =
    encodeObject << encodeApiUnauthorizedErrorResponsePairs


encodeApiUnauthorizedErrorResponseWithTag : ( String, String ) -> ApiUnauthorizedErrorResponse -> Json.Encode.Value
encodeApiUnauthorizedErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiUnauthorizedErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiUnauthorizedErrorResponsePairs : ApiUnauthorizedErrorResponse -> List EncodedField
encodeApiUnauthorizedErrorResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeApiErrorDTO) model.errors
            ]
    in
    pairs


encodeBaseCampaignOfferDTO : BaseCampaignOfferDTO -> Json.Encode.Value
encodeBaseCampaignOfferDTO =
    encodeObject << encodeBaseCampaignOfferDTOPairs


encodeBaseCampaignOfferDTOWithTag : ( String, String ) -> BaseCampaignOfferDTO -> Json.Encode.Value
encodeBaseCampaignOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeBaseCampaignOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBaseCampaignOfferDTOPairs : BaseCampaignOfferDTO -> List EncodedField
encodeBaseCampaignOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "quantum" encodeQuantumDTO model.quantum
            , maybeEncode "available" Json.Encode.bool model.available
            ]
    in
    pairs


encodeBaseOfferDTO : BaseOfferDTO -> Json.Encode.Value
encodeBaseOfferDTO =
    encodeObject << encodeBaseOfferDTOPairs


encodeBaseOfferDTOWithTag : ( String, String ) -> BaseOfferDTO -> Json.Encode.Value
encodeBaseOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeBaseOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBaseOfferDTOPairs : BaseOfferDTO -> List EncodedField
encodeBaseOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncodeNullable "videos" (Json.Encode.list Json.Encode.string) model.videos
            , maybeEncodeNullable "manuals" (Json.Encode.list encodeOfferManualDTO) model.manuals
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "customsCommodityCode" Json.Encode.string model.customsCommodityCode
            , maybeEncodeNullable "certificates" (Json.Encode.list Json.Encode.string) model.certificates
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncode "condition" encodeOfferConditionDTO model.condition
            , maybeEncode "type" encodeOfferType model.type_
            , maybeEncode "downloadable" Json.Encode.bool model.downloadable
            , maybeEncode "adult" Json.Encode.bool model.adult
            , maybeEncode "age" encodeAgeDTO model.age
            , maybeEncodeNullable "params" (Json.Encode.list encodeOfferParamDTO) model.params
            ]
    in
    pairs


encodeBasePriceDTO : BasePriceDTO -> Json.Encode.Value
encodeBasePriceDTO =
    encodeObject << encodeBasePriceDTOPairs


encodeBasePriceDTOWithTag : ( String, String ) -> BasePriceDTO -> Json.Encode.Value
encodeBasePriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeBasePriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBasePriceDTOPairs : BasePriceDTO -> List EncodedField
encodeBasePriceDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "currencyId" encodeCurrencyType model.currencyId
            ]
    in
    pairs


encodeBaseShipmentDTO : BaseShipmentDTO -> Json.Encode.Value
encodeBaseShipmentDTO =
    encodeObject << encodeBaseShipmentDTOPairs


encodeBaseShipmentDTOWithTag : ( String, String ) -> BaseShipmentDTO -> Json.Encode.Value
encodeBaseShipmentDTOWithTag (tagField, tag) model =
    encodeObject (encodeBaseShipmentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBaseShipmentDTOPairs : BaseShipmentDTO -> List EncodedField
encodeBaseShipmentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "planIntervalFrom" Api.Time.encodeDateTime model.planIntervalFrom
            , maybeEncode "planIntervalTo" Api.Time.encodeDateTime model.planIntervalTo
            , maybeEncode "shipmentType" encodeShipmentType model.shipmentType
            , maybeEncode "warehouse" encodePartnerShipmentWarehouseDTO model.warehouse
            , maybeEncode "warehouseTo" encodePartnerShipmentWarehouseDTO model.warehouseTo
            , maybeEncode "externalId" Json.Encode.string model.externalId
            , maybeEncode "deliveryService" encodeDeliveryServiceDTO model.deliveryService
            , maybeEncode "palletsCount" encodePalletsCountDTO model.palletsCount
            , encode "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            , maybeEncode "draftCount" Json.Encode.int model.draftCount
            , maybeEncode "plannedCount" Json.Encode.int model.plannedCount
            , maybeEncode "factCount" Json.Encode.int model.factCount
            ]
    in
    pairs


encodeBid : Bid -> Json.Encode.Value
encodeBid =
    encodeObject << encodeBidPairs


encodeBidWithTag : ( String, String ) -> Bid -> Json.Encode.Value
encodeBidWithTag (tagField, tag) model =
    encodeObject (encodeBidPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBidPairs : Bid -> List EncodedField
encodeBidPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeBidRecommendationItemDTO : BidRecommendationItemDTO -> Json.Encode.Value
encodeBidRecommendationItemDTO =
    encodeObject << encodeBidRecommendationItemDTOPairs


encodeBidRecommendationItemDTOWithTag : ( String, String ) -> BidRecommendationItemDTO -> Json.Encode.Value
encodeBidRecommendationItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeBidRecommendationItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBidRecommendationItemDTOPairs : BidRecommendationItemDTO -> List EncodedField
encodeBidRecommendationItemDTOPairs model =
    let
        pairs =
            [ encode "bid" Json.Encode.int model.bid
            , encode "showPercent" Json.Encode.int model.showPercent
            ]
    in
    pairs


encodeBriefOrderItemDTO : BriefOrderItemDTO -> Json.Encode.Value
encodeBriefOrderItemDTO =
    encodeObject << encodeBriefOrderItemDTOPairs


encodeBriefOrderItemDTOWithTag : ( String, String ) -> BriefOrderItemDTO -> Json.Encode.Value
encodeBriefOrderItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeBriefOrderItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBriefOrderItemDTOPairs : BriefOrderItemDTO -> List EncodedField
encodeBriefOrderItemDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "vat" encodeOrderVatType model.vat
            , maybeEncode "count" Json.Encode.int model.count
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "offerName" Json.Encode.string model.offerName
            , maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncodeNullable "instances" (Json.Encode.list encodeOrderItemInstanceDTO) model.instances
            ]
    in
    pairs


encodeBriefOrderItemInstanceDTO : BriefOrderItemInstanceDTO -> Json.Encode.Value
encodeBriefOrderItemInstanceDTO =
    encodeObject << encodeBriefOrderItemInstanceDTOPairs


encodeBriefOrderItemInstanceDTOWithTag : ( String, String ) -> BriefOrderItemInstanceDTO -> Json.Encode.Value
encodeBriefOrderItemInstanceDTOWithTag (tagField, tag) model =
    encodeObject (encodeBriefOrderItemInstanceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBriefOrderItemInstanceDTOPairs : BriefOrderItemInstanceDTO -> List EncodedField
encodeBriefOrderItemInstanceDTOPairs model =
    let
        pairs =
            [ maybeEncode "cis" Json.Encode.string model.cis
            , maybeEncode "uin" Json.Encode.string model.uin
            , maybeEncode "rnpt" Json.Encode.string model.rnpt
            , maybeEncode "gtd" Json.Encode.string model.gtd
            ]
    in
    pairs


encodeBusinessDTO : BusinessDTO -> Json.Encode.Value
encodeBusinessDTO =
    encodeObject << encodeBusinessDTOPairs


encodeBusinessDTOWithTag : ( String, String ) -> BusinessDTO -> Json.Encode.Value
encodeBusinessDTOWithTag (tagField, tag) model =
    encodeObject (encodeBusinessDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBusinessDTOPairs : BusinessDTO -> List EncodedField
encodeBusinessDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeBusinessSettingsDTO : BusinessSettingsDTO -> Json.Encode.Value
encodeBusinessSettingsDTO =
    encodeObject << encodeBusinessSettingsDTOPairs


encodeBusinessSettingsDTOWithTag : ( String, String ) -> BusinessSettingsDTO -> Json.Encode.Value
encodeBusinessSettingsDTOWithTag (tagField, tag) model =
    encodeObject (encodeBusinessSettingsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBusinessSettingsDTOPairs : BusinessSettingsDTO -> List EncodedField
encodeBusinessSettingsDTOPairs model =
    let
        pairs =
            [ maybeEncode "onlyDefaultPrice" Json.Encode.bool model.onlyDefaultPrice
            , maybeEncode "currency" encodeCurrencyType model.currency
            ]
    in
    pairs


encodeCalculateTariffsOfferDTO : CalculateTariffsOfferDTO -> Json.Encode.Value
encodeCalculateTariffsOfferDTO =
    encodeObject << encodeCalculateTariffsOfferDTOPairs


encodeCalculateTariffsOfferDTOWithTag : ( String, String ) -> CalculateTariffsOfferDTO -> Json.Encode.Value
encodeCalculateTariffsOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsOfferDTOPairs : CalculateTariffsOfferDTO -> List EncodedField
encodeCalculateTariffsOfferDTOPairs model =
    let
        pairs =
            [ encode "categoryId" Json.Encode.int model.categoryId
            , encode "price" Json.Encode.float model.price
            , encode "length" Json.Encode.float model.length
            , encode "width" Json.Encode.float model.width
            , encode "height" Json.Encode.float model.height
            , encode "weight" Json.Encode.float model.weight
            , maybeEncode "quantity" Json.Encode.int model.quantity
            ]
    in
    pairs


encodeCalculateTariffsOfferInfoDTO : CalculateTariffsOfferInfoDTO -> Json.Encode.Value
encodeCalculateTariffsOfferInfoDTO =
    encodeObject << encodeCalculateTariffsOfferInfoDTOPairs


encodeCalculateTariffsOfferInfoDTOWithTag : ( String, String ) -> CalculateTariffsOfferInfoDTO -> Json.Encode.Value
encodeCalculateTariffsOfferInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsOfferInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsOfferInfoDTOPairs : CalculateTariffsOfferInfoDTO -> List EncodedField
encodeCalculateTariffsOfferInfoDTOPairs model =
    let
        pairs =
            [ encode "offer" encodeCalculateTariffsOfferDTO model.offer
            , encode "tariffs" (Json.Encode.list encodeCalculatedTariffDTO) model.tariffs
            ]
    in
    pairs


encodeCalculateTariffsParametersDTO : CalculateTariffsParametersDTO -> Json.Encode.Value
encodeCalculateTariffsParametersDTO =
    encodeObject << encodeCalculateTariffsParametersDTOPairs


encodeCalculateTariffsParametersDTOWithTag : ( String, String ) -> CalculateTariffsParametersDTO -> Json.Encode.Value
encodeCalculateTariffsParametersDTOWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsParametersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsParametersDTOPairs : CalculateTariffsParametersDTO -> List EncodedField
encodeCalculateTariffsParametersDTOPairs model =
    let
        pairs =
            [ maybeEncode "campaignId" Json.Encode.int model.campaignId
            , maybeEncode "sellingProgram" encodeSellingProgramType model.sellingProgram
            , maybeEncode "frequency" encodePaymentFrequencyType model.frequency
            ]
    in
    pairs


encodeCalculateTariffsRequest : CalculateTariffsRequest -> Json.Encode.Value
encodeCalculateTariffsRequest =
    encodeObject << encodeCalculateTariffsRequestPairs


encodeCalculateTariffsRequestWithTag : ( String, String ) -> CalculateTariffsRequest -> Json.Encode.Value
encodeCalculateTariffsRequestWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsRequestPairs : CalculateTariffsRequest -> List EncodedField
encodeCalculateTariffsRequestPairs model =
    let
        pairs =
            [ encode "parameters" encodeCalculateTariffsParametersDTO model.parameters
            , encode "offers" (Json.Encode.list encodeCalculateTariffsOfferDTO) model.offers
            ]
    in
    pairs


encodeCalculateTariffsResponse : CalculateTariffsResponse -> Json.Encode.Value
encodeCalculateTariffsResponse =
    encodeObject << encodeCalculateTariffsResponsePairs


encodeCalculateTariffsResponseWithTag : ( String, String ) -> CalculateTariffsResponse -> Json.Encode.Value
encodeCalculateTariffsResponseWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsResponsePairs : CalculateTariffsResponse -> List EncodedField
encodeCalculateTariffsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeCalculateTariffsResponseDTO model.result
            ]
    in
    pairs


encodeCalculateTariffsResponseDTO : CalculateTariffsResponseDTO -> Json.Encode.Value
encodeCalculateTariffsResponseDTO =
    encodeObject << encodeCalculateTariffsResponseDTOPairs


encodeCalculateTariffsResponseDTOWithTag : ( String, String ) -> CalculateTariffsResponseDTO -> Json.Encode.Value
encodeCalculateTariffsResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeCalculateTariffsResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculateTariffsResponseDTOPairs : CalculateTariffsResponseDTO -> List EncodedField
encodeCalculateTariffsResponseDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeCalculateTariffsOfferInfoDTO) model.offers
            ]
    in
    pairs


encodeCalculatedTariffDTO : CalculatedTariffDTO -> Json.Encode.Value
encodeCalculatedTariffDTO =
    encodeObject << encodeCalculatedTariffDTOPairs


encodeCalculatedTariffDTOWithTag : ( String, String ) -> CalculatedTariffDTO -> Json.Encode.Value
encodeCalculatedTariffDTOWithTag (tagField, tag) model =
    encodeObject (encodeCalculatedTariffDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCalculatedTariffDTOPairs : CalculatedTariffDTO -> List EncodedField
encodeCalculatedTariffDTOPairs model =
    let
        pairs =
            [ encode "type" encodeCalculatedTariffType model.type_
            , maybeEncode "amount" Json.Encode.float model.amount
            , encode "parameters" (Json.Encode.list encodeTariffParameterDTO) model.parameters
            ]
    in
    pairs


stringFromCalculatedTariffType : CalculatedTariffType -> String
stringFromCalculatedTariffType model =
    case model of
        CalculatedTariffTypeAGENCYCOMMISSION ->
            "AGENCY_COMMISSION"

        CalculatedTariffTypePAYMENTTRANSFER ->
            "PAYMENT_TRANSFER"

        CalculatedTariffTypeFEE ->
            "FEE"

        CalculatedTariffTypeDELIVERYTOCUSTOMER ->
            "DELIVERY_TO_CUSTOMER"

        CalculatedTariffTypeCROSSREGIONALDELIVERY ->
            "CROSSREGIONAL_DELIVERY"

        CalculatedTariffTypeEXPRESSDELIVERY ->
            "EXPRESS_DELIVERY"

        CalculatedTariffTypeSORTING ->
            "SORTING"

        CalculatedTariffTypeMIDDLEMILE ->
            "MIDDLE_MILE"


encodeCalculatedTariffType : CalculatedTariffType -> Json.Encode.Value
encodeCalculatedTariffType =
    Json.Encode.string << stringFromCalculatedTariffType


encodeCampaignDTO : CampaignDTO -> Json.Encode.Value
encodeCampaignDTO =
    encodeObject << encodeCampaignDTOPairs


encodeCampaignDTOWithTag : ( String, String ) -> CampaignDTO -> Json.Encode.Value
encodeCampaignDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignDTOPairs : CampaignDTO -> List EncodedField
encodeCampaignDTOPairs model =
    let
        pairs =
            [ maybeEncode "domain" Json.Encode.string model.domain
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "clientId" Json.Encode.int model.clientId
            , maybeEncode "business" encodeBusinessDTO model.business
            , maybeEncode "placementType" encodePlacementType model.placementType
            ]
    in
    pairs


encodeCampaignQualityRatingDTO : CampaignQualityRatingDTO -> Json.Encode.Value
encodeCampaignQualityRatingDTO =
    encodeObject << encodeCampaignQualityRatingDTOPairs


encodeCampaignQualityRatingDTOWithTag : ( String, String ) -> CampaignQualityRatingDTO -> Json.Encode.Value
encodeCampaignQualityRatingDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignQualityRatingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignQualityRatingDTOPairs : CampaignQualityRatingDTO -> List EncodedField
encodeCampaignQualityRatingDTOPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , encode "ratings" (Json.Encode.list encodeQualityRatingDTO) model.ratings
            ]
    in
    pairs


encodeCampaignSettingsDTO : CampaignSettingsDTO -> Json.Encode.Value
encodeCampaignSettingsDTO =
    encodeObject << encodeCampaignSettingsDTOPairs


encodeCampaignSettingsDTOWithTag : ( String, String ) -> CampaignSettingsDTO -> Json.Encode.Value
encodeCampaignSettingsDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignSettingsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignSettingsDTOPairs : CampaignSettingsDTO -> List EncodedField
encodeCampaignSettingsDTOPairs model =
    let
        pairs =
            [ maybeEncode "countryRegion" Json.Encode.int model.countryRegion
            , maybeEncode "shopName" Json.Encode.string model.shopName
            , maybeEncode "showInContext" Json.Encode.bool model.showInContext
            , maybeEncode "showInPremium" Json.Encode.bool model.showInPremium
            , maybeEncode "useOpenStat" Json.Encode.bool model.useOpenStat
            , maybeEncode "localRegion" encodeCampaignSettingsLocalRegionDTO model.localRegion
            ]
    in
    pairs


encodeCampaignSettingsDeliveryDTO : CampaignSettingsDeliveryDTO -> Json.Encode.Value
encodeCampaignSettingsDeliveryDTO =
    encodeObject << encodeCampaignSettingsDeliveryDTOPairs


encodeCampaignSettingsDeliveryDTOWithTag : ( String, String ) -> CampaignSettingsDeliveryDTO -> Json.Encode.Value
encodeCampaignSettingsDeliveryDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignSettingsDeliveryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignSettingsDeliveryDTOPairs : CampaignSettingsDeliveryDTO -> List EncodedField
encodeCampaignSettingsDeliveryDTOPairs model =
    let
        pairs =
            [ maybeEncode "schedule" encodeCampaignSettingsScheduleDTO model.schedule
            ]
    in
    pairs


encodeCampaignSettingsLocalRegionDTO : CampaignSettingsLocalRegionDTO -> Json.Encode.Value
encodeCampaignSettingsLocalRegionDTO =
    encodeObject << encodeCampaignSettingsLocalRegionDTOPairs


encodeCampaignSettingsLocalRegionDTOWithTag : ( String, String ) -> CampaignSettingsLocalRegionDTO -> Json.Encode.Value
encodeCampaignSettingsLocalRegionDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignSettingsLocalRegionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignSettingsLocalRegionDTOPairs : CampaignSettingsLocalRegionDTO -> List EncodedField
encodeCampaignSettingsLocalRegionDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "type" encodeRegionType model.type_
            , maybeEncode "deliveryOptionsSource" encodeCampaignSettingsScheduleSourceType model.deliveryOptionsSource
            , maybeEncode "delivery" encodeCampaignSettingsDeliveryDTO model.delivery
            ]
    in
    pairs


encodeCampaignSettingsScheduleDTO : CampaignSettingsScheduleDTO -> Json.Encode.Value
encodeCampaignSettingsScheduleDTO =
    encodeObject << encodeCampaignSettingsScheduleDTOPairs


encodeCampaignSettingsScheduleDTOWithTag : ( String, String ) -> CampaignSettingsScheduleDTO -> Json.Encode.Value
encodeCampaignSettingsScheduleDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignSettingsScheduleDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignSettingsScheduleDTOPairs : CampaignSettingsScheduleDTO -> List EncodedField
encodeCampaignSettingsScheduleDTOPairs model =
    let
        pairs =
            [ maybeEncode "availableOnHolidays" Json.Encode.bool model.availableOnHolidays
            , encode "customHolidays" (Json.Encode.list Json.Encode.string) model.customHolidays
            , encode "customWorkingDays" (Json.Encode.list Json.Encode.string) model.customWorkingDays
            , maybeEncode "period" encodeCampaignSettingsTimePeriodDTO model.period
            , encode "totalHolidays" (Json.Encode.list Json.Encode.string) model.totalHolidays
            , encode "weeklyHolidays" (Json.Encode.list Json.Encode.int) model.weeklyHolidays
            ]
    in
    pairs


stringFromCampaignSettingsScheduleSourceType : CampaignSettingsScheduleSourceType -> String
stringFromCampaignSettingsScheduleSourceType model =
    case model of
        CampaignSettingsScheduleSourceTypeWEB ->
            "WEB"

        CampaignSettingsScheduleSourceTypeYML ->
            "YML"


encodeCampaignSettingsScheduleSourceType : CampaignSettingsScheduleSourceType -> Json.Encode.Value
encodeCampaignSettingsScheduleSourceType =
    Json.Encode.string << stringFromCampaignSettingsScheduleSourceType


encodeCampaignSettingsTimePeriodDTO : CampaignSettingsTimePeriodDTO -> Json.Encode.Value
encodeCampaignSettingsTimePeriodDTO =
    encodeObject << encodeCampaignSettingsTimePeriodDTOPairs


encodeCampaignSettingsTimePeriodDTOWithTag : ( String, String ) -> CampaignSettingsTimePeriodDTO -> Json.Encode.Value
encodeCampaignSettingsTimePeriodDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignSettingsTimePeriodDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignSettingsTimePeriodDTOPairs : CampaignSettingsTimePeriodDTO -> List EncodedField
encodeCampaignSettingsTimePeriodDTOPairs model =
    let
        pairs =
            [ maybeEncode "fromDate" Json.Encode.string model.fromDate
            , maybeEncode "toDate" Json.Encode.string model.toDate
            ]
    in
    pairs


encodeCampaignsQualityRatingDTO : CampaignsQualityRatingDTO -> Json.Encode.Value
encodeCampaignsQualityRatingDTO =
    encodeObject << encodeCampaignsQualityRatingDTOPairs


encodeCampaignsQualityRatingDTOWithTag : ( String, String ) -> CampaignsQualityRatingDTO -> Json.Encode.Value
encodeCampaignsQualityRatingDTOWithTag (tagField, tag) model =
    encodeObject (encodeCampaignsQualityRatingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCampaignsQualityRatingDTOPairs : CampaignsQualityRatingDTO -> List EncodedField
encodeCampaignsQualityRatingDTOPairs model =
    let
        pairs =
            [ encode "campaignRatings" (Json.Encode.list encodeCampaignQualityRatingDTO) model.campaignRatings
            ]
    in
    pairs


encodeCategoryContentParametersDTO : CategoryContentParametersDTO -> Json.Encode.Value
encodeCategoryContentParametersDTO =
    encodeObject << encodeCategoryContentParametersDTOPairs


encodeCategoryContentParametersDTOWithTag : ( String, String ) -> CategoryContentParametersDTO -> Json.Encode.Value
encodeCategoryContentParametersDTOWithTag (tagField, tag) model =
    encodeObject (encodeCategoryContentParametersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryContentParametersDTOPairs : CategoryContentParametersDTO -> List EncodedField
encodeCategoryContentParametersDTOPairs model =
    let
        pairs =
            [ encode "categoryId" Json.Encode.int model.categoryId
            , maybeEncodeNullable "parameters" (Json.Encode.list encodeCategoryParameterDTO) model.parameters
            ]
    in
    pairs


encodeCategoryDTO : CategoryDTO -> Json.Encode.Value
encodeCategoryDTO =
    encodeObject << encodeCategoryDTOPairs


encodeCategoryDTOWithTag : ( String, String ) -> CategoryDTO -> Json.Encode.Value
encodeCategoryDTOWithTag (tagField, tag) model =
    encodeObject (encodeCategoryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryDTOPairs : CategoryDTO -> List EncodedField
encodeCategoryDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , maybeEncodeNullable "children" (Json.Encode.list encodeCategoryDTO) <| unwrapCategoryDTOChildren model.children
            ]
    in
    pairs


encodeCategoryErrorDTO : CategoryErrorDTO -> Json.Encode.Value
encodeCategoryErrorDTO =
    encodeObject << encodeCategoryErrorDTOPairs


encodeCategoryErrorDTOWithTag : ( String, String ) -> CategoryErrorDTO -> Json.Encode.Value
encodeCategoryErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeCategoryErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryErrorDTOPairs : CategoryErrorDTO -> List EncodedField
encodeCategoryErrorDTOPairs model =
    let
        pairs =
            [ maybeEncode "categoryId" Json.Encode.int model.categoryId
            , maybeEncode "type" encodeCategoryErrorType model.type_
            ]
    in
    pairs


stringFromCategoryErrorType : CategoryErrorType -> String
stringFromCategoryErrorType model =
    case model of
        CategoryErrorTypeUNKNOWNCATEGORY ->
            "UNKNOWN_CATEGORY"

        CategoryErrorTypeCATEGORYISNOTLEAF ->
            "CATEGORY_IS_NOT_LEAF"


encodeCategoryErrorType : CategoryErrorType -> Json.Encode.Value
encodeCategoryErrorType =
    Json.Encode.string << stringFromCategoryErrorType


encodeCategoryId : CategoryId -> Json.Encode.Value
encodeCategoryId =
    encodeObject << encodeCategoryIdPairs


encodeCategoryIdWithTag : ( String, String ) -> CategoryId -> Json.Encode.Value
encodeCategoryIdWithTag (tagField, tag) model =
    encodeObject (encodeCategoryIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryIdPairs : CategoryId -> List EncodedField
encodeCategoryIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeCategoryParameterDTO : CategoryParameterDTO -> Json.Encode.Value
encodeCategoryParameterDTO =
    encodeObject << encodeCategoryParameterDTOPairs


encodeCategoryParameterDTOWithTag : ( String, String ) -> CategoryParameterDTO -> Json.Encode.Value
encodeCategoryParameterDTOWithTag (tagField, tag) model =
    encodeObject (encodeCategoryParameterDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryParameterDTOPairs : CategoryParameterDTO -> List EncodedField
encodeCategoryParameterDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , encode "type" encodeParameterType model.type_
            , maybeEncode "unit" encodeCategoryParameterUnitDTO model.unit
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncodeNullable "recommendationTypes" (Json.Encode.list encodeOfferCardRecommendationType) model.recommendationTypes
            , encode "required" Json.Encode.bool model.required
            , encode "filtering" Json.Encode.bool model.filtering
            , encode "distinctive" Json.Encode.bool model.distinctive
            , encode "multivalue" Json.Encode.bool model.multivalue
            , encode "allowCustomValues" Json.Encode.bool model.allowCustomValues
            , maybeEncodeNullable "values" (Json.Encode.list encodeParameterValueOptionDTO) model.values
            , maybeEncode "constraints" encodeParameterValueConstraintsDTO model.constraints
            , maybeEncodeNullable "valueRestrictions" (Json.Encode.list encodeValueRestrictionDTO) model.valueRestrictions
            ]
    in
    pairs


encodeCategoryParameterUnitDTO : CategoryParameterUnitDTO -> Json.Encode.Value
encodeCategoryParameterUnitDTO =
    encodeObject << encodeCategoryParameterUnitDTOPairs


encodeCategoryParameterUnitDTOWithTag : ( String, String ) -> CategoryParameterUnitDTO -> Json.Encode.Value
encodeCategoryParameterUnitDTOWithTag (tagField, tag) model =
    encodeObject (encodeCategoryParameterUnitDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCategoryParameterUnitDTOPairs : CategoryParameterUnitDTO -> List EncodedField
encodeCategoryParameterUnitDTOPairs model =
    let
        pairs =
            [ encode "defaultUnitId" Json.Encode.int model.defaultUnitId
            , encode "units" (Json.Encode.list encodeUnitDTO) model.units
            ]
    in
    pairs


encodeChangeOutletRequest : ChangeOutletRequest -> Json.Encode.Value
encodeChangeOutletRequest =
    encodeObject << encodeChangeOutletRequestPairs


encodeChangeOutletRequestWithTag : ( String, String ) -> ChangeOutletRequest -> Json.Encode.Value
encodeChangeOutletRequestWithTag (tagField, tag) model =
    encodeObject (encodeChangeOutletRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChangeOutletRequestPairs : ChangeOutletRequest -> List EncodedField
encodeChangeOutletRequestPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "type" encodeOutletType model.type_
            , maybeEncode "coords" Json.Encode.string model.coords
            , maybeEncode "isMain" Json.Encode.bool model.isMain
            , maybeEncode "shopOutletCode" Json.Encode.string model.shopOutletCode
            , maybeEncode "visibility" encodeOutletVisibilityType model.visibility
            , encode "address" encodeOutletAddressDTO model.address
            , encode "phones" (Json.Encode.list Json.Encode.string) model.phones
            , encode "workingSchedule" encodeOutletWorkingScheduleDTO model.workingSchedule
            , maybeEncodeNullable "deliveryRules" (Json.Encode.list encodeOutletDeliveryRuleDTO) model.deliveryRules
            , maybeEncode "storagePeriod" Json.Encode.int model.storagePeriod
            ]
    in
    pairs


encodeChannelType : ChannelType -> Json.Encode.Value
encodeChannelType =
    encodeObject << encodeChannelTypePairs


encodeChannelTypeWithTag : ( String, String ) -> ChannelType -> Json.Encode.Value
encodeChannelTypeWithTag (tagField, tag) model =
    encodeObject (encodeChannelTypePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChannelTypePairs : ChannelType -> List EncodedField
encodeChannelTypePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeChatMessageDTO : ChatMessageDTO -> Json.Encode.Value
encodeChatMessageDTO =
    encodeObject << encodeChatMessageDTOPairs


encodeChatMessageDTOWithTag : ( String, String ) -> ChatMessageDTO -> Json.Encode.Value
encodeChatMessageDTOWithTag (tagField, tag) model =
    encodeObject (encodeChatMessageDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatMessageDTOPairs : ChatMessageDTO -> List EncodedField
encodeChatMessageDTOPairs model =
    let
        pairs =
            [ encode "messageId" Json.Encode.int model.messageId
            , encode "createdAt" Api.Time.encodeDateTime model.createdAt
            , encode "sender" encodeChatMessageSenderType model.sender
            , maybeEncode "message" Json.Encode.string model.message
            , maybeEncodeNullable "payload" (Json.Encode.list encodeChatMessagePayloadDTO) model.payload
            ]
    in
    pairs


encodeChatMessagePayloadDTO : ChatMessagePayloadDTO -> Json.Encode.Value
encodeChatMessagePayloadDTO =
    encodeObject << encodeChatMessagePayloadDTOPairs


encodeChatMessagePayloadDTOWithTag : ( String, String ) -> ChatMessagePayloadDTO -> Json.Encode.Value
encodeChatMessagePayloadDTOWithTag (tagField, tag) model =
    encodeObject (encodeChatMessagePayloadDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatMessagePayloadDTOPairs : ChatMessagePayloadDTO -> List EncodedField
encodeChatMessagePayloadDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "url" Json.Encode.string model.url
            , encode "size" Json.Encode.int model.size
            ]
    in
    pairs


stringFromChatMessageSenderType : ChatMessageSenderType -> String
stringFromChatMessageSenderType model =
    case model of
        ChatMessageSenderTypePARTNER ->
            "PARTNER"

        ChatMessageSenderTypeCUSTOMER ->
            "CUSTOMER"

        ChatMessageSenderTypeMARKET ->
            "MARKET"

        ChatMessageSenderTypeSUPPORT ->
            "SUPPORT"


encodeChatMessageSenderType : ChatMessageSenderType -> Json.Encode.Value
encodeChatMessageSenderType =
    Json.Encode.string << stringFromChatMessageSenderType


encodeChatMessagesResultDTO : ChatMessagesResultDTO -> Json.Encode.Value
encodeChatMessagesResultDTO =
    encodeObject << encodeChatMessagesResultDTOPairs


encodeChatMessagesResultDTOWithTag : ( String, String ) -> ChatMessagesResultDTO -> Json.Encode.Value
encodeChatMessagesResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeChatMessagesResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeChatMessagesResultDTOPairs : ChatMessagesResultDTO -> List EncodedField
encodeChatMessagesResultDTOPairs model =
    let
        pairs =
            [ encode "orderId" Json.Encode.int model.orderId
            , encode "messages" (Json.Encode.list encodeChatMessageDTO) model.messages
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


stringFromChatStatusType : ChatStatusType -> String
stringFromChatStatusType model =
    case model of
        ChatStatusTypeNEW ->
            "NEW"

        ChatStatusTypeWAITINGFORCUSTOMER ->
            "WAITING_FOR_CUSTOMER"

        ChatStatusTypeWAITINGFORPARTNER ->
            "WAITING_FOR_PARTNER"

        ChatStatusTypeWAITINGFORARBITER ->
            "WAITING_FOR_ARBITER"

        ChatStatusTypeWAITINGFORMARKET ->
            "WAITING_FOR_MARKET"

        ChatStatusTypeFINISHED ->
            "FINISHED"


encodeChatStatusType : ChatStatusType -> Json.Encode.Value
encodeChatStatusType =
    Json.Encode.string << stringFromChatStatusType


stringFromChatType : ChatType -> String
stringFromChatType model =
    case model of
        ChatTypeCHAT ->
            "CHAT"

        ChatTypeARBITRAGE ->
            "ARBITRAGE"


encodeChatType : ChatType -> Json.Encode.Value
encodeChatType =
    Json.Encode.string << stringFromChatType


encodeCis : Cis -> Json.Encode.Value
encodeCis =
    encodeObject << encodeCisPairs


encodeCisWithTag : ( String, String ) -> Cis -> Json.Encode.Value
encodeCisWithTag (tagField, tag) model =
    encodeObject (encodeCisPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCisPairs : Cis -> List EncodedField
encodeCisPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeConfirmPricesRequest : ConfirmPricesRequest -> Json.Encode.Value
encodeConfirmPricesRequest =
    encodeObject << encodeConfirmPricesRequestPairs


encodeConfirmPricesRequestWithTag : ( String, String ) -> ConfirmPricesRequest -> Json.Encode.Value
encodeConfirmPricesRequestWithTag (tagField, tag) model =
    encodeObject (encodeConfirmPricesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConfirmPricesRequestPairs : ConfirmPricesRequest -> List EncodedField
encodeConfirmPricesRequestPairs model =
    let
        pairs =
            [ encode "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeConfirmShipmentRequest : ConfirmShipmentRequest -> Json.Encode.Value
encodeConfirmShipmentRequest =
    encodeObject << encodeConfirmShipmentRequestPairs


encodeConfirmShipmentRequestWithTag : ( String, String ) -> ConfirmShipmentRequest -> Json.Encode.Value
encodeConfirmShipmentRequestWithTag (tagField, tag) model =
    encodeObject (encodeConfirmShipmentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeConfirmShipmentRequestPairs : ConfirmShipmentRequest -> List EncodedField
encodeConfirmShipmentRequestPairs model =
    let
        pairs =
            [ maybeEncode "externalShipmentId" Json.Encode.string model.externalShipmentId
            ]
    in
    pairs


encodeCreateChatRequest : CreateChatRequest -> Json.Encode.Value
encodeCreateChatRequest =
    encodeObject << encodeCreateChatRequestPairs


encodeCreateChatRequestWithTag : ( String, String ) -> CreateChatRequest -> Json.Encode.Value
encodeCreateChatRequestWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatRequestPairs : CreateChatRequest -> List EncodedField
encodeCreateChatRequestPairs model =
    let
        pairs =
            [ encode "orderId" Json.Encode.int model.orderId
            ]
    in
    pairs


encodeCreateChatResponse : CreateChatResponse -> Json.Encode.Value
encodeCreateChatResponse =
    encodeObject << encodeCreateChatResponsePairs


encodeCreateChatResponseWithTag : ( String, String ) -> CreateChatResponse -> Json.Encode.Value
encodeCreateChatResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatResponsePairs : CreateChatResponse -> List EncodedField
encodeCreateChatResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeCreateChatResultDTO model.result
            ]
    in
    pairs


encodeCreateChatResultDTO : CreateChatResultDTO -> Json.Encode.Value
encodeCreateChatResultDTO =
    encodeObject << encodeCreateChatResultDTOPairs


encodeCreateChatResultDTOWithTag : ( String, String ) -> CreateChatResultDTO -> Json.Encode.Value
encodeCreateChatResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeCreateChatResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateChatResultDTOPairs : CreateChatResultDTO -> List EncodedField
encodeCreateChatResultDTOPairs model =
    let
        pairs =
            [ encode "chatId" Json.Encode.int model.chatId
            ]
    in
    pairs


encodeCreateOutletResponse : CreateOutletResponse -> Json.Encode.Value
encodeCreateOutletResponse =
    encodeObject << encodeCreateOutletResponsePairs


encodeCreateOutletResponseWithTag : ( String, String ) -> CreateOutletResponse -> Json.Encode.Value
encodeCreateOutletResponseWithTag (tagField, tag) model =
    encodeObject (encodeCreateOutletResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCreateOutletResponsePairs : CreateOutletResponse -> List EncodedField
encodeCreateOutletResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOutletResponseDTO model.result
            ]
    in
    pairs


stringFromCurrencyType : CurrencyType -> String
stringFromCurrencyType model =
    case model of
        CurrencyTypeRUR ->
            "RUR"

        CurrencyTypeUSD ->
            "USD"

        CurrencyTypeEUR ->
            "EUR"

        CurrencyTypeUAH ->
            "UAH"

        CurrencyTypeAUD ->
            "AUD"

        CurrencyTypeGBP ->
            "GBP"

        CurrencyTypeBYR ->
            "BYR"

        CurrencyTypeBYN ->
            "BYN"

        CurrencyTypeDKK ->
            "DKK"

        CurrencyTypeISK ->
            "ISK"

        CurrencyTypeKZT ->
            "KZT"

        CurrencyTypeCAD ->
            "CAD"

        CurrencyTypeCNY ->
            "CNY"

        CurrencyTypeNOK ->
            "NOK"

        CurrencyTypeXDR ->
            "XDR"

        CurrencyTypeSGD ->
            "SGD"

        CurrencyTypeTRY ->
            "TRY"

        CurrencyTypeSEK ->
            "SEK"

        CurrencyTypeCHF ->
            "CHF"

        CurrencyTypeJPY ->
            "JPY"

        CurrencyTypeAZN ->
            "AZN"

        CurrencyTypeALL ->
            "ALL"

        CurrencyTypeDZD ->
            "DZD"

        CurrencyTypeAOA ->
            "AOA"

        CurrencyTypeARS ->
            "ARS"

        CurrencyTypeAMD ->
            "AMD"

        CurrencyTypeAFN ->
            "AFN"

        CurrencyTypeBHD ->
            "BHD"

        CurrencyTypeBGN ->
            "BGN"

        CurrencyTypeBOB ->
            "BOB"

        CurrencyTypeBWP ->
            "BWP"

        CurrencyTypeBND ->
            "BND"

        CurrencyTypeBRL ->
            "BRL"

        CurrencyTypeBIF ->
            "BIF"

        CurrencyTypeHUF ->
            "HUF"

        CurrencyTypeVEF ->
            "VEF"

        CurrencyTypeKPW ->
            "KPW"

        CurrencyTypeVND ->
            "VND"

        CurrencyTypeGMD ->
            "GMD"

        CurrencyTypeGHS ->
            "GHS"

        CurrencyTypeGNF ->
            "GNF"

        CurrencyTypeHKD ->
            "HKD"

        CurrencyTypeGEL ->
            "GEL"

        CurrencyTypeAED ->
            "AED"

        CurrencyTypeEGP ->
            "EGP"

        CurrencyTypeZMK ->
            "ZMK"

        CurrencyTypeILS ->
            "ILS"

        CurrencyTypeINR ->
            "INR"

        CurrencyTypeIDR ->
            "IDR"

        CurrencyTypeJOD ->
            "JOD"

        CurrencyTypeIQD ->
            "IQD"

        CurrencyTypeIRR ->
            "IRR"

        CurrencyTypeYER ->
            "YER"

        CurrencyTypeQAR ->
            "QAR"

        CurrencyTypeKES ->
            "KES"

        CurrencyTypeKGS ->
            "KGS"

        CurrencyTypeCOP ->
            "COP"

        CurrencyTypeCDF ->
            "CDF"

        CurrencyTypeCRC ->
            "CRC"

        CurrencyTypeKWD ->
            "KWD"

        CurrencyTypeCUP ->
            "CUP"

        CurrencyTypeLAK ->
            "LAK"

        CurrencyTypeLVL ->
            "LVL"

        CurrencyTypeSLL ->
            "SLL"

        CurrencyTypeLBP ->
            "LBP"

        CurrencyTypeLYD ->
            "LYD"

        CurrencyTypeSZL ->
            "SZL"

        CurrencyTypeLTL ->
            "LTL"

        CurrencyTypeMUR ->
            "MUR"

        CurrencyTypeMRO ->
            "MRO"

        CurrencyTypeMKD ->
            "MKD"

        CurrencyTypeMWK ->
            "MWK"

        CurrencyTypeMGA ->
            "MGA"

        CurrencyTypeMYR ->
            "MYR"

        CurrencyTypeMAD ->
            "MAD"

        CurrencyTypeMXN ->
            "MXN"

        CurrencyTypeMZN ->
            "MZN"

        CurrencyTypeMDL ->
            "MDL"

        CurrencyTypeMNT ->
            "MNT"

        CurrencyTypeNPR ->
            "NPR"

        CurrencyTypeNGN ->
            "NGN"

        CurrencyTypeNIO ->
            "NIO"

        CurrencyTypeNZD ->
            "NZD"

        CurrencyTypeOMR ->
            "OMR"

        CurrencyTypePKR ->
            "PKR"

        CurrencyTypePYG ->
            "PYG"

        CurrencyTypePEN ->
            "PEN"

        CurrencyTypePLN ->
            "PLN"

        CurrencyTypeKHR ->
            "KHR"

        CurrencyTypeSAR ->
            "SAR"

        CurrencyTypeRON ->
            "RON"

        CurrencyTypeSCR ->
            "SCR"

        CurrencyTypeSYP ->
            "SYP"

        CurrencyTypeSKK ->
            "SKK"

        CurrencyTypeSOS ->
            "SOS"

        CurrencyTypeSDG ->
            "SDG"

        CurrencyTypeSRD ->
            "SRD"

        CurrencyTypeTJS ->
            "TJS"

        CurrencyTypeTHB ->
            "THB"

        CurrencyTypeTWD ->
            "TWD"

        CurrencyTypeBDT ->
            "BDT"

        CurrencyTypeTZS ->
            "TZS"

        CurrencyTypeTND ->
            "TND"

        CurrencyTypeTMM ->
            "TMM"

        CurrencyTypeUGX ->
            "UGX"

        CurrencyTypeUZS ->
            "UZS"

        CurrencyTypeUYU ->
            "UYU"

        CurrencyTypePHP ->
            "PHP"

        CurrencyTypeDJF ->
            "DJF"

        CurrencyTypeXAF ->
            "XAF"

        CurrencyTypeXOF ->
            "XOF"

        CurrencyTypeHRK ->
            "HRK"

        CurrencyTypeCZK ->
            "CZK"

        CurrencyTypeCLP ->
            "CLP"

        CurrencyTypeLKR ->
            "LKR"

        CurrencyTypeEEK ->
            "EEK"

        CurrencyTypeETB ->
            "ETB"

        CurrencyTypeRSD ->
            "RSD"

        CurrencyTypeZAR ->
            "ZAR"

        CurrencyTypeKRW ->
            "KRW"

        CurrencyTypeNAD ->
            "NAD"

        CurrencyTypeTL ->
            "TL"

        CurrencyTypeUE ->
            "UE"


encodeCurrencyType : CurrencyType -> Json.Encode.Value
encodeCurrencyType =
    Json.Encode.string << stringFromCurrencyType


encodeDateDdMmYyyy : DateDdMmYyyy -> Json.Encode.Value
encodeDateDdMmYyyy =
    encodeObject << encodeDateDdMmYyyyPairs


encodeDateDdMmYyyyWithTag : ( String, String ) -> DateDdMmYyyy -> Json.Encode.Value
encodeDateDdMmYyyyWithTag (tagField, tag) model =
    encodeObject (encodeDateDdMmYyyyPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDateDdMmYyyyPairs : DateDdMmYyyy -> List EncodedField
encodeDateDdMmYyyyPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeDateDdMmYyyyHhMmSs : DateDdMmYyyyHhMmSs -> Json.Encode.Value
encodeDateDdMmYyyyHhMmSs =
    encodeObject << encodeDateDdMmYyyyHhMmSsPairs


encodeDateDdMmYyyyHhMmSsWithTag : ( String, String ) -> DateDdMmYyyyHhMmSs -> Json.Encode.Value
encodeDateDdMmYyyyHhMmSsWithTag (tagField, tag) model =
    encodeObject (encodeDateDdMmYyyyHhMmSsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDateDdMmYyyyHhMmSsPairs : DateDdMmYyyyHhMmSs -> List EncodedField
encodeDateDdMmYyyyHhMmSsPairs model =
    let
        pairs =
            ]
    in
    pairs


stringFromDayOfWeekType : DayOfWeekType -> String
stringFromDayOfWeekType model =
    case model of
        DayOfWeekTypeMONDAY ->
            "MONDAY"

        DayOfWeekTypeTUESDAY ->
            "TUESDAY"

        DayOfWeekTypeWEDNESDAY ->
            "WEDNESDAY"

        DayOfWeekTypeTHURSDAY ->
            "THURSDAY"

        DayOfWeekTypeFRIDAY ->
            "FRIDAY"

        DayOfWeekTypeSATURDAY ->
            "SATURDAY"

        DayOfWeekTypeSUNDAY ->
            "SUNDAY"


encodeDayOfWeekType : DayOfWeekType -> Json.Encode.Value
encodeDayOfWeekType =
    Json.Encode.string << stringFromDayOfWeekType


encodeDeleteCampaignOffersDTO : DeleteCampaignOffersDTO -> Json.Encode.Value
encodeDeleteCampaignOffersDTO =
    encodeObject << encodeDeleteCampaignOffersDTOPairs


encodeDeleteCampaignOffersDTOWithTag : ( String, String ) -> DeleteCampaignOffersDTO -> Json.Encode.Value
encodeDeleteCampaignOffersDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeleteCampaignOffersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteCampaignOffersDTOPairs : DeleteCampaignOffersDTO -> List EncodedField
encodeDeleteCampaignOffersDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "notDeletedOfferIds" (Json.Encode.list Json.Encode.string) model.notDeletedOfferIds
            ]
    in
    pairs


encodeDeleteCampaignOffersRequest : DeleteCampaignOffersRequest -> Json.Encode.Value
encodeDeleteCampaignOffersRequest =
    encodeObject << encodeDeleteCampaignOffersRequestPairs


encodeDeleteCampaignOffersRequestWithTag : ( String, String ) -> DeleteCampaignOffersRequest -> Json.Encode.Value
encodeDeleteCampaignOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeleteCampaignOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteCampaignOffersRequestPairs : DeleteCampaignOffersRequest -> List EncodedField
encodeDeleteCampaignOffersRequestPairs model =
    let
        pairs =
            [ encode "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeDeleteCampaignOffersResponse : DeleteCampaignOffersResponse -> Json.Encode.Value
encodeDeleteCampaignOffersResponse =
    encodeObject << encodeDeleteCampaignOffersResponsePairs


encodeDeleteCampaignOffersResponseWithTag : ( String, String ) -> DeleteCampaignOffersResponse -> Json.Encode.Value
encodeDeleteCampaignOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteCampaignOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteCampaignOffersResponsePairs : DeleteCampaignOffersResponse -> List EncodedField
encodeDeleteCampaignOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeDeleteCampaignOffersDTO model.result
            ]
    in
    pairs


encodeDeleteGoodsFeedbackCommentRequest : DeleteGoodsFeedbackCommentRequest -> Json.Encode.Value
encodeDeleteGoodsFeedbackCommentRequest =
    encodeObject << encodeDeleteGoodsFeedbackCommentRequestPairs


encodeDeleteGoodsFeedbackCommentRequestWithTag : ( String, String ) -> DeleteGoodsFeedbackCommentRequest -> Json.Encode.Value
encodeDeleteGoodsFeedbackCommentRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeleteGoodsFeedbackCommentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteGoodsFeedbackCommentRequestPairs : DeleteGoodsFeedbackCommentRequest -> List EncodedField
encodeDeleteGoodsFeedbackCommentRequestPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeDeleteHiddenOffersRequest : DeleteHiddenOffersRequest -> Json.Encode.Value
encodeDeleteHiddenOffersRequest =
    encodeObject << encodeDeleteHiddenOffersRequestPairs


encodeDeleteHiddenOffersRequestWithTag : ( String, String ) -> DeleteHiddenOffersRequest -> Json.Encode.Value
encodeDeleteHiddenOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeleteHiddenOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteHiddenOffersRequestPairs : DeleteHiddenOffersRequest -> List EncodedField
encodeDeleteHiddenOffersRequestPairs model =
    let
        pairs =
            [ encode "hiddenOffers" (Json.Encode.list encodeHiddenOfferDTO) model.hiddenOffers
            ]
    in
    pairs


encodeDeleteOffersDTO : DeleteOffersDTO -> Json.Encode.Value
encodeDeleteOffersDTO =
    encodeObject << encodeDeleteOffersDTOPairs


encodeDeleteOffersDTOWithTag : ( String, String ) -> DeleteOffersDTO -> Json.Encode.Value
encodeDeleteOffersDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersDTOPairs : DeleteOffersDTO -> List EncodedField
encodeDeleteOffersDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "notDeletedOfferIds" (Json.Encode.list Json.Encode.string) model.notDeletedOfferIds
            ]
    in
    pairs


encodeDeleteOffersFromArchiveDTO : DeleteOffersFromArchiveDTO -> Json.Encode.Value
encodeDeleteOffersFromArchiveDTO =
    encodeObject << encodeDeleteOffersFromArchiveDTOPairs


encodeDeleteOffersFromArchiveDTOWithTag : ( String, String ) -> DeleteOffersFromArchiveDTO -> Json.Encode.Value
encodeDeleteOffersFromArchiveDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersFromArchiveDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersFromArchiveDTOPairs : DeleteOffersFromArchiveDTO -> List EncodedField
encodeDeleteOffersFromArchiveDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "notUnarchivedOfferIds" (Json.Encode.list Json.Encode.string) model.notUnarchivedOfferIds
            ]
    in
    pairs


encodeDeleteOffersFromArchiveRequest : DeleteOffersFromArchiveRequest -> Json.Encode.Value
encodeDeleteOffersFromArchiveRequest =
    encodeObject << encodeDeleteOffersFromArchiveRequestPairs


encodeDeleteOffersFromArchiveRequestWithTag : ( String, String ) -> DeleteOffersFromArchiveRequest -> Json.Encode.Value
encodeDeleteOffersFromArchiveRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersFromArchiveRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersFromArchiveRequestPairs : DeleteOffersFromArchiveRequest -> List EncodedField
encodeDeleteOffersFromArchiveRequestPairs model =
    let
        pairs =
            [ encode "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeDeleteOffersFromArchiveResponse : DeleteOffersFromArchiveResponse -> Json.Encode.Value
encodeDeleteOffersFromArchiveResponse =
    encodeObject << encodeDeleteOffersFromArchiveResponsePairs


encodeDeleteOffersFromArchiveResponseWithTag : ( String, String ) -> DeleteOffersFromArchiveResponse -> Json.Encode.Value
encodeDeleteOffersFromArchiveResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersFromArchiveResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersFromArchiveResponsePairs : DeleteOffersFromArchiveResponse -> List EncodedField
encodeDeleteOffersFromArchiveResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeDeleteOffersFromArchiveDTO model.result
            ]
    in
    pairs


encodeDeleteOffersRequest : DeleteOffersRequest -> Json.Encode.Value
encodeDeleteOffersRequest =
    encodeObject << encodeDeleteOffersRequestPairs


encodeDeleteOffersRequestWithTag : ( String, String ) -> DeleteOffersRequest -> Json.Encode.Value
encodeDeleteOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersRequestPairs : DeleteOffersRequest -> List EncodedField
encodeDeleteOffersRequestPairs model =
    let
        pairs =
            [ encode "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeDeleteOffersResponse : DeleteOffersResponse -> Json.Encode.Value
encodeDeleteOffersResponse =
    encodeObject << encodeDeleteOffersResponsePairs


encodeDeleteOffersResponseWithTag : ( String, String ) -> DeleteOffersResponse -> Json.Encode.Value
encodeDeleteOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeleteOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeleteOffersResponsePairs : DeleteOffersResponse -> List EncodedField
encodeDeleteOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeDeleteOffersDTO model.result
            ]
    in
    pairs


encodeDeletePromoOffersRequest : DeletePromoOffersRequest -> Json.Encode.Value
encodeDeletePromoOffersRequest =
    encodeObject << encodeDeletePromoOffersRequestPairs


encodeDeletePromoOffersRequestWithTag : ( String, String ) -> DeletePromoOffersRequest -> Json.Encode.Value
encodeDeletePromoOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeDeletePromoOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeletePromoOffersRequestPairs : DeletePromoOffersRequest -> List EncodedField
encodeDeletePromoOffersRequestPairs model =
    let
        pairs =
            [ encode "promoId" Json.Encode.string model.promoId
            , maybeEncode "deleteAllOffers" Json.Encode.bool model.deleteAllOffers
            , maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeDeletePromoOffersResponse : DeletePromoOffersResponse -> Json.Encode.Value
encodeDeletePromoOffersResponse =
    encodeObject << encodeDeletePromoOffersResponsePairs


encodeDeletePromoOffersResponseWithTag : ( String, String ) -> DeletePromoOffersResponse -> Json.Encode.Value
encodeDeletePromoOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeDeletePromoOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeletePromoOffersResponsePairs : DeletePromoOffersResponse -> List EncodedField
encodeDeletePromoOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeDeletePromoOffersResultDTO model.result
            ]
    in
    pairs


encodeDeletePromoOffersResultDTO : DeletePromoOffersResultDTO -> Json.Encode.Value
encodeDeletePromoOffersResultDTO =
    encodeObject << encodeDeletePromoOffersResultDTOPairs


encodeDeletePromoOffersResultDTOWithTag : ( String, String ) -> DeletePromoOffersResultDTO -> Json.Encode.Value
encodeDeletePromoOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeletePromoOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeletePromoOffersResultDTOPairs : DeletePromoOffersResultDTO -> List EncodedField
encodeDeletePromoOffersResultDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "rejectedOffers" (Json.Encode.list encodeRejectedPromoOfferDeleteDTO) model.rejectedOffers
            ]
    in
    pairs


encodeDeliveryServiceDTO : DeliveryServiceDTO -> Json.Encode.Value
encodeDeliveryServiceDTO =
    encodeObject << encodeDeliveryServiceDTOPairs


encodeDeliveryServiceDTOWithTag : ( String, String ) -> DeliveryServiceDTO -> Json.Encode.Value
encodeDeliveryServiceDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeliveryServiceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeliveryServiceDTOPairs : DeliveryServiceDTO -> List EncodedField
encodeDeliveryServiceDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeDeliveryServiceInfoDTO : DeliveryServiceInfoDTO -> Json.Encode.Value
encodeDeliveryServiceInfoDTO =
    encodeObject << encodeDeliveryServiceInfoDTOPairs


encodeDeliveryServiceInfoDTOWithTag : ( String, String ) -> DeliveryServiceInfoDTO -> Json.Encode.Value
encodeDeliveryServiceInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeliveryServiceInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeliveryServiceInfoDTOPairs : DeliveryServiceInfoDTO -> List EncodedField
encodeDeliveryServiceInfoDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeDeliveryServicesDTO : DeliveryServicesDTO -> Json.Encode.Value
encodeDeliveryServicesDTO =
    encodeObject << encodeDeliveryServicesDTOPairs


encodeDeliveryServicesDTOWithTag : ( String, String ) -> DeliveryServicesDTO -> Json.Encode.Value
encodeDeliveryServicesDTOWithTag (tagField, tag) model =
    encodeObject (encodeDeliveryServicesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeliveryServicesDTOPairs : DeliveryServicesDTO -> List EncodedField
encodeDeliveryServicesDTOPairs model =
    let
        pairs =
            [ encode "deliveryService" (Json.Encode.list encodeDeliveryServiceInfoDTO) model.deliveryService
            ]
    in
    pairs


encodeDocumentDTO : DocumentDTO -> Json.Encode.Value
encodeDocumentDTO =
    encodeObject << encodeDocumentDTOPairs


encodeDocumentDTOWithTag : ( String, String ) -> DocumentDTO -> Json.Encode.Value
encodeDocumentDTOWithTag (tagField, tag) model =
    encodeObject (encodeDocumentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDocumentDTOPairs : DocumentDTO -> List EncodedField
encodeDocumentDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeOrderDocumentStatusType model.status
            , maybeEncode "number" Json.Encode.string model.number
            , maybeEncode "date" Api.Time.encodeDate model.date
            ]
    in
    pairs


encodeEacVerificationResultDTO : EacVerificationResultDTO -> Json.Encode.Value
encodeEacVerificationResultDTO =
    encodeObject << encodeEacVerificationResultDTOPairs


encodeEacVerificationResultDTOWithTag : ( String, String ) -> EacVerificationResultDTO -> Json.Encode.Value
encodeEacVerificationResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeEacVerificationResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEacVerificationResultDTOPairs : EacVerificationResultDTO -> List EncodedField
encodeEacVerificationResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "verificationResult" encodeEacVerificationStatusType model.verificationResult
            , maybeEncode "attemptsLeft" Json.Encode.int model.attemptsLeft
            ]
    in
    pairs


stringFromEacVerificationStatusType : EacVerificationStatusType -> String
stringFromEacVerificationStatusType model =
    case model of
        EacVerificationStatusTypeACCEPTED ->
            "ACCEPTED"

        EacVerificationStatusTypeREJECTED ->
            "REJECTED"

        EacVerificationStatusTypeNEEDUPDATE ->
            "NEED_UPDATE"


encodeEacVerificationStatusType : EacVerificationStatusType -> Json.Encode.Value
encodeEacVerificationStatusType =
    Json.Encode.string << stringFromEacVerificationStatusType


encodeEmptyApiResponse : EmptyApiResponse -> Json.Encode.Value
encodeEmptyApiResponse =
    encodeObject << encodeEmptyApiResponsePairs


encodeEmptyApiResponseWithTag : ( String, String ) -> EmptyApiResponse -> Json.Encode.Value
encodeEmptyApiResponseWithTag (tagField, tag) model =
    encodeObject (encodeEmptyApiResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmptyApiResponsePairs : EmptyApiResponse -> List EncodedField
encodeEmptyApiResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            ]
    in
    pairs


encodeEnrichedMappingsOfferDTO : EnrichedMappingsOfferDTO -> Json.Encode.Value
encodeEnrichedMappingsOfferDTO =
    encodeObject << encodeEnrichedMappingsOfferDTOPairs


encodeEnrichedMappingsOfferDTOWithTag : ( String, String ) -> EnrichedMappingsOfferDTO -> Json.Encode.Value
encodeEnrichedMappingsOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeEnrichedMappingsOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEnrichedMappingsOfferDTOPairs : EnrichedMappingsOfferDTO -> List EncodedField
encodeEnrichedMappingsOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "feedId" Json.Encode.int model.feedId
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncodeNullable "urls" (Json.Encode.list Json.Encode.string) model.urls
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncode "manufacturer" Json.Encode.string model.manufacturer
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "minShipment" Json.Encode.int model.minShipment
            , maybeEncode "transportUnitSize" Json.Encode.int model.transportUnitSize
            , maybeEncode "quantumOfSupply" Json.Encode.int model.quantumOfSupply
            , maybeEncode "deliveryDurationDays" Json.Encode.int model.deliveryDurationDays
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncodeNullable "customsCommodityCodes" (Json.Encode.list Json.Encode.string) model.customsCommodityCodes
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncodeNullable "supplyScheduleDays" (Json.Encode.list encodeDayOfWeekType) model.supplyScheduleDays
            , maybeEncode "shelfLifeDays" Json.Encode.int model.shelfLifeDays
            , maybeEncode "lifeTimeDays" Json.Encode.int model.lifeTimeDays
            , maybeEncode "guaranteePeriodDays" Json.Encode.int model.guaranteePeriodDays
            , maybeEncode "processingState" encodeOfferProcessingStateDTO model.processingState
            , maybeEncode "availability" encodeOfferAvailabilityStatusType model.availability
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "certificate" Json.Encode.string model.certificate
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "marketCategoryName" Json.Encode.string model.marketCategoryName
            , maybeEncode "marketModelId" Json.Encode.int model.marketModelId
            , maybeEncode "marketModelName" Json.Encode.string model.marketModelName
            , maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "marketSkuName" Json.Encode.string model.marketSkuName
            ]
    in
    pairs


encodeEnrichedModelDTO : EnrichedModelDTO -> Json.Encode.Value
encodeEnrichedModelDTO =
    encodeObject << encodeEnrichedModelDTOPairs


encodeEnrichedModelDTOWithTag : ( String, String ) -> EnrichedModelDTO -> Json.Encode.Value
encodeEnrichedModelDTOWithTag (tagField, tag) model =
    encodeObject (encodeEnrichedModelDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEnrichedModelDTOPairs : EnrichedModelDTO -> List EncodedField
encodeEnrichedModelDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "prices" encodeModelPriceDTO model.prices
            , maybeEncodeNullable "offers" (Json.Encode.list encodeModelOfferDTO) model.offers
            , maybeEncode "offlineOffers" Json.Encode.int model.offlineOffers
            , maybeEncode "onlineOffers" Json.Encode.int model.onlineOffers
            ]
    in
    pairs


encodeEnrichedModelsDTO : EnrichedModelsDTO -> Json.Encode.Value
encodeEnrichedModelsDTO =
    encodeObject << encodeEnrichedModelsDTOPairs


encodeEnrichedModelsDTOWithTag : ( String, String ) -> EnrichedModelsDTO -> Json.Encode.Value
encodeEnrichedModelsDTOWithTag (tagField, tag) model =
    encodeObject (encodeEnrichedModelsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEnrichedModelsDTOPairs : EnrichedModelsDTO -> List EncodedField
encodeEnrichedModelsDTOPairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list encodeEnrichedModelDTO) model.models
            ]
    in
    pairs


encodeEnrichedOrderBoxLayoutDTO : EnrichedOrderBoxLayoutDTO -> Json.Encode.Value
encodeEnrichedOrderBoxLayoutDTO =
    encodeObject << encodeEnrichedOrderBoxLayoutDTOPairs


encodeEnrichedOrderBoxLayoutDTOWithTag : ( String, String ) -> EnrichedOrderBoxLayoutDTO -> Json.Encode.Value
encodeEnrichedOrderBoxLayoutDTOWithTag (tagField, tag) model =
    encodeObject (encodeEnrichedOrderBoxLayoutDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEnrichedOrderBoxLayoutDTOPairs : EnrichedOrderBoxLayoutDTO -> List EncodedField
encodeEnrichedOrderBoxLayoutDTOPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeOrderBoxLayoutItemDTO) model.items
            , maybeEncode "boxId" Json.Encode.int model.boxId
            ]
    in
    pairs


encodeExtensionShipmentDTO : ExtensionShipmentDTO -> Json.Encode.Value
encodeExtensionShipmentDTO =
    encodeObject << encodeExtensionShipmentDTOPairs


encodeExtensionShipmentDTOWithTag : ( String, String ) -> ExtensionShipmentDTO -> Json.Encode.Value
encodeExtensionShipmentDTOWithTag (tagField, tag) model =
    encodeObject (encodeExtensionShipmentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionShipmentDTOPairs : ExtensionShipmentDTO -> List EncodedField
encodeExtensionShipmentDTOPairs model =
    let
        pairs =
            [ maybeEncode "currentStatus" encodeShipmentStatusChangeDTO model.currentStatus
            , encode "availableActions" (Json.Encode.list encodeShipmentActionType) model.availableActions
            ]
    in
    pairs


encodeFeedContentDTO : FeedContentDTO -> Json.Encode.Value
encodeFeedContentDTO =
    encodeObject << encodeFeedContentDTOPairs


encodeFeedContentDTOWithTag : ( String, String ) -> FeedContentDTO -> Json.Encode.Value
encodeFeedContentDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedContentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedContentDTOPairs : FeedContentDTO -> List EncodedField
encodeFeedContentDTOPairs model =
    let
        pairs =
            [ maybeEncode "rejectedOffersCount" Json.Encode.int model.rejectedOffersCount
            , maybeEncode "status" encodeFeedStatusType model.status
            , maybeEncode "totalOffersCount" Json.Encode.int model.totalOffersCount
            , maybeEncode "error" encodeFeedContentErrorDTO model.error
            ]
    in
    pairs


encodeFeedContentErrorDTO : FeedContentErrorDTO -> Json.Encode.Value
encodeFeedContentErrorDTO =
    encodeObject << encodeFeedContentErrorDTOPairs


encodeFeedContentErrorDTOWithTag : ( String, String ) -> FeedContentErrorDTO -> Json.Encode.Value
encodeFeedContentErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedContentErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedContentErrorDTOPairs : FeedContentErrorDTO -> List EncodedField
encodeFeedContentErrorDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeFeedContentErrorType model.type_
            ]
    in
    pairs


stringFromFeedContentErrorType : FeedContentErrorType -> String
stringFromFeedContentErrorType model =
    case model of
        FeedContentErrorTypePARSEERROR ->
            "PARSE_ERROR"

        FeedContentErrorTypePARSEXMLERROR ->
            "PARSE_XML_ERROR"

        FeedContentErrorTypeTOOMANYREJECTEDOFFERS ->
            "TOO_MANY_REJECTED_OFFERS"


encodeFeedContentErrorType : FeedContentErrorType -> Json.Encode.Value
encodeFeedContentErrorType =
    Json.Encode.string << stringFromFeedContentErrorType


encodeFeedDTO : FeedDTO -> Json.Encode.Value
encodeFeedDTO =
    encodeObject << encodeFeedDTOPairs


encodeFeedDTOWithTag : ( String, String ) -> FeedDTO -> Json.Encode.Value
encodeFeedDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedDTOPairs : FeedDTO -> List EncodedField
encodeFeedDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "login" Json.Encode.string model.login
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "password" Json.Encode.string model.password
            , maybeEncode "uploadDate" Api.Time.encodeDateTime model.uploadDate
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "content" encodeFeedContentDTO model.content
            , maybeEncode "download" encodeFeedDownloadDTO model.download
            , maybeEncode "placement" encodeFeedPlacementDTO model.placement
            , maybeEncode "publication" encodeFeedPublicationDTO model.publication
            ]
    in
    pairs


encodeFeedDownloadDTO : FeedDownloadDTO -> Json.Encode.Value
encodeFeedDownloadDTO =
    encodeObject << encodeFeedDownloadDTOPairs


encodeFeedDownloadDTOWithTag : ( String, String ) -> FeedDownloadDTO -> Json.Encode.Value
encodeFeedDownloadDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedDownloadDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedDownloadDTOPairs : FeedDownloadDTO -> List EncodedField
encodeFeedDownloadDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeFeedStatusType model.status
            , maybeEncode "error" encodeFeedDownloadErrorDTO model.error
            ]
    in
    pairs


encodeFeedDownloadErrorDTO : FeedDownloadErrorDTO -> Json.Encode.Value
encodeFeedDownloadErrorDTO =
    encodeObject << encodeFeedDownloadErrorDTOPairs


encodeFeedDownloadErrorDTOWithTag : ( String, String ) -> FeedDownloadErrorDTO -> Json.Encode.Value
encodeFeedDownloadErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedDownloadErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedDownloadErrorDTOPairs : FeedDownloadErrorDTO -> List EncodedField
encodeFeedDownloadErrorDTOPairs model =
    let
        pairs =
            [ maybeEncode "httpStatusCode" Json.Encode.int model.httpStatusCode
            , maybeEncode "type" encodeFeedDownloadErrorType model.type_
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


stringFromFeedDownloadErrorType : FeedDownloadErrorType -> String
stringFromFeedDownloadErrorType model =
    case model of
        FeedDownloadErrorTypeERROR ->
            "DOWNLOAD_ERROR"

        FeedDownloadErrorTypeHTTPERROR ->
            "DOWNLOAD_HTTP_ERROR"


encodeFeedDownloadErrorType : FeedDownloadErrorType -> Json.Encode.Value
encodeFeedDownloadErrorType =
    Json.Encode.string << stringFromFeedDownloadErrorType


encodeFeedIndexLogsErrorDTO : FeedIndexLogsErrorDTO -> Json.Encode.Value
encodeFeedIndexLogsErrorDTO =
    encodeObject << encodeFeedIndexLogsErrorDTOPairs


encodeFeedIndexLogsErrorDTOWithTag : ( String, String ) -> FeedIndexLogsErrorDTO -> Json.Encode.Value
encodeFeedIndexLogsErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedIndexLogsErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedIndexLogsErrorDTOPairs : FeedIndexLogsErrorDTO -> List EncodedField
encodeFeedIndexLogsErrorDTOPairs model =
    let
        pairs =
            [ maybeEncode "httpStatusCode" Json.Encode.int model.httpStatusCode
            , maybeEncode "type" encodeFeedIndexLogsErrorType model.type_
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


stringFromFeedIndexLogsErrorType : FeedIndexLogsErrorType -> String
stringFromFeedIndexLogsErrorType model =
    case model of
        FeedIndexLogsErrorTypeDOWNLOADERROR ->
            "DOWNLOAD_ERROR"

        FeedIndexLogsErrorTypeDOWNLOADHTTPERROR ->
            "DOWNLOAD_HTTP_ERROR"

        FeedIndexLogsErrorTypePARSEERROR ->
            "PARSE_ERROR"

        FeedIndexLogsErrorTypePARSEXMLERROR ->
            "PARSE_XML_ERROR"

        FeedIndexLogsErrorTypeTOOMANYREJECTEDOFFERS ->
            "TOO_MANY_REJECTED_OFFERS"

        FeedIndexLogsErrorTypeNOTINDEXED ->
            "NOT_INDEXED"


encodeFeedIndexLogsErrorType : FeedIndexLogsErrorType -> Json.Encode.Value
encodeFeedIndexLogsErrorType =
    Json.Encode.string << stringFromFeedIndexLogsErrorType


encodeFeedIndexLogsFeedDTO : FeedIndexLogsFeedDTO -> Json.Encode.Value
encodeFeedIndexLogsFeedDTO =
    encodeObject << encodeFeedIndexLogsFeedDTOPairs


encodeFeedIndexLogsFeedDTOWithTag : ( String, String ) -> FeedIndexLogsFeedDTO -> Json.Encode.Value
encodeFeedIndexLogsFeedDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedIndexLogsFeedDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedIndexLogsFeedDTOPairs : FeedIndexLogsFeedDTO -> List EncodedField
encodeFeedIndexLogsFeedDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            ]
    in
    pairs


stringFromFeedIndexLogsIndexType : FeedIndexLogsIndexType -> String
stringFromFeedIndexLogsIndexType model =
    case model of
        FeedIndexLogsIndexTypeDIFF ->
            "DIFF"

        FeedIndexLogsIndexTypeFASTPRICE ->
            "FAST_PRICE"

        FeedIndexLogsIndexTypeFULL ->
            "FULL"


encodeFeedIndexLogsIndexType : FeedIndexLogsIndexType -> Json.Encode.Value
encodeFeedIndexLogsIndexType =
    Json.Encode.string << stringFromFeedIndexLogsIndexType


encodeFeedIndexLogsOffersDTO : FeedIndexLogsOffersDTO -> Json.Encode.Value
encodeFeedIndexLogsOffersDTO =
    encodeObject << encodeFeedIndexLogsOffersDTOPairs


encodeFeedIndexLogsOffersDTOWithTag : ( String, String ) -> FeedIndexLogsOffersDTO -> Json.Encode.Value
encodeFeedIndexLogsOffersDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedIndexLogsOffersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedIndexLogsOffersDTOPairs : FeedIndexLogsOffersDTO -> List EncodedField
encodeFeedIndexLogsOffersDTOPairs model =
    let
        pairs =
            [ maybeEncode "rejectedCount" Json.Encode.int model.rejectedCount
            , maybeEncode "totalCount" Json.Encode.int model.totalCount
            ]
    in
    pairs


encodeFeedIndexLogsRecordDTO : FeedIndexLogsRecordDTO -> Json.Encode.Value
encodeFeedIndexLogsRecordDTO =
    encodeObject << encodeFeedIndexLogsRecordDTOPairs


encodeFeedIndexLogsRecordDTOWithTag : ( String, String ) -> FeedIndexLogsRecordDTO -> Json.Encode.Value
encodeFeedIndexLogsRecordDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedIndexLogsRecordDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedIndexLogsRecordDTOPairs : FeedIndexLogsRecordDTO -> List EncodedField
encodeFeedIndexLogsRecordDTOPairs model =
    let
        pairs =
            [ maybeEncode "downloadTime" Api.Time.encodeDateTime model.downloadTime
            , maybeEncode "fileTime" Api.Time.encodeDateTime model.fileTime
            , maybeEncode "generationId" Json.Encode.int model.generationId
            , maybeEncode "indexType" encodeFeedIndexLogsIndexType model.indexType
            , maybeEncode "publishedTime" Api.Time.encodeDateTime model.publishedTime
            , maybeEncode "status" encodeFeedIndexLogsStatusType model.status
            , maybeEncode "error" encodeFeedIndexLogsErrorDTO model.error
            , maybeEncode "offers" encodeFeedIndexLogsOffersDTO model.offers
            ]
    in
    pairs


encodeFeedIndexLogsResultDTO : FeedIndexLogsResultDTO -> Json.Encode.Value
encodeFeedIndexLogsResultDTO =
    encodeObject << encodeFeedIndexLogsResultDTOPairs


encodeFeedIndexLogsResultDTOWithTag : ( String, String ) -> FeedIndexLogsResultDTO -> Json.Encode.Value
encodeFeedIndexLogsResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedIndexLogsResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedIndexLogsResultDTOPairs : FeedIndexLogsResultDTO -> List EncodedField
encodeFeedIndexLogsResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "feed" encodeFeedIndexLogsFeedDTO model.feed
            , encode "indexLogRecords" (Json.Encode.list encodeFeedIndexLogsRecordDTO) model.indexLogRecords
            , maybeEncode "total" Json.Encode.int model.total
            ]
    in
    pairs


stringFromFeedIndexLogsStatusType : FeedIndexLogsStatusType -> String
stringFromFeedIndexLogsStatusType model =
    case model of
        FeedIndexLogsStatusTypeERROR ->
            "ERROR"

        FeedIndexLogsStatusTypeOK ->
            "OK"

        FeedIndexLogsStatusTypeWARNING ->
            "WARNING"


encodeFeedIndexLogsStatusType : FeedIndexLogsStatusType -> Json.Encode.Value
encodeFeedIndexLogsStatusType =
    Json.Encode.string << stringFromFeedIndexLogsStatusType


encodeFeedParameterDTO : FeedParameterDTO -> Json.Encode.Value
encodeFeedParameterDTO =
    encodeObject << encodeFeedParameterDTOPairs


encodeFeedParameterDTOWithTag : ( String, String ) -> FeedParameterDTO -> Json.Encode.Value
encodeFeedParameterDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedParameterDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedParameterDTOPairs : FeedParameterDTO -> List EncodedField
encodeFeedParameterDTOPairs model =
    let
        pairs =
            [ maybeEncode "deleted" Json.Encode.bool model.deleted
            , encode "name" Json.Encode.string model.name
            , maybeEncodeNullable "values" (Json.Encode.list Json.Encode.int) model.values
            ]
    in
    pairs


encodeFeedParameterName : FeedParameterName -> Json.Encode.Value
encodeFeedParameterName =
    encodeObject << encodeFeedParameterNamePairs


encodeFeedParameterNameWithTag : ( String, String ) -> FeedParameterName -> Json.Encode.Value
encodeFeedParameterNameWithTag (tagField, tag) model =
    encodeObject (encodeFeedParameterNamePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedParameterNamePairs : FeedParameterName -> List EncodedField
encodeFeedParameterNamePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeFeedPlacementDTO : FeedPlacementDTO -> Json.Encode.Value
encodeFeedPlacementDTO =
    encodeObject << encodeFeedPlacementDTOPairs


encodeFeedPlacementDTOWithTag : ( String, String ) -> FeedPlacementDTO -> Json.Encode.Value
encodeFeedPlacementDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedPlacementDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedPlacementDTOPairs : FeedPlacementDTO -> List EncodedField
encodeFeedPlacementDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeFeedStatusType model.status
            , maybeEncode "totalOffersCount" Json.Encode.int model.totalOffersCount
            ]
    in
    pairs


encodeFeedPublicationDTO : FeedPublicationDTO -> Json.Encode.Value
encodeFeedPublicationDTO =
    encodeObject << encodeFeedPublicationDTOPairs


encodeFeedPublicationDTOWithTag : ( String, String ) -> FeedPublicationDTO -> Json.Encode.Value
encodeFeedPublicationDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedPublicationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedPublicationDTOPairs : FeedPublicationDTO -> List EncodedField
encodeFeedPublicationDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeFeedStatusType model.status
            , maybeEncode "full" encodeFeedPublicationFullDTO model.full
            , maybeEncode "priceAndStockUpdate" encodeFeedPublicationPriceAndStockUpdateDTO model.priceAndStockUpdate
            ]
    in
    pairs


encodeFeedPublicationFullDTO : FeedPublicationFullDTO -> Json.Encode.Value
encodeFeedPublicationFullDTO =
    encodeObject << encodeFeedPublicationFullDTOPairs


encodeFeedPublicationFullDTOWithTag : ( String, String ) -> FeedPublicationFullDTO -> Json.Encode.Value
encodeFeedPublicationFullDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedPublicationFullDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedPublicationFullDTOPairs : FeedPublicationFullDTO -> List EncodedField
encodeFeedPublicationFullDTOPairs model =
    let
        pairs =
            [ maybeEncode "fileTime" Api.Time.encodeDateTime model.fileTime
            , maybeEncode "publishedTime" Api.Time.encodeDateTime model.publishedTime
            ]
    in
    pairs


encodeFeedPublicationPriceAndStockUpdateDTO : FeedPublicationPriceAndStockUpdateDTO -> Json.Encode.Value
encodeFeedPublicationPriceAndStockUpdateDTO =
    encodeObject << encodeFeedPublicationPriceAndStockUpdateDTOPairs


encodeFeedPublicationPriceAndStockUpdateDTOWithTag : ( String, String ) -> FeedPublicationPriceAndStockUpdateDTO -> Json.Encode.Value
encodeFeedPublicationPriceAndStockUpdateDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedPublicationPriceAndStockUpdateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedPublicationPriceAndStockUpdateDTOPairs : FeedPublicationPriceAndStockUpdateDTO -> List EncodedField
encodeFeedPublicationPriceAndStockUpdateDTOPairs model =
    let
        pairs =
            [ maybeEncode "fileTime" Api.Time.encodeDateTime model.fileTime
            , maybeEncode "publishedTime" Api.Time.encodeDateTime model.publishedTime
            ]
    in
    pairs


stringFromFeedStatusType : FeedStatusType -> String
stringFromFeedStatusType model =
    case model of
        FeedStatusTypeERROR ->
            "ERROR"

        FeedStatusTypeNA ->
            "NA"

        FeedStatusTypeOK ->
            "OK"


encodeFeedStatusType : FeedStatusType -> Json.Encode.Value
encodeFeedStatusType =
    Json.Encode.string << stringFromFeedStatusType


encodeFeedbackAuthorDTO : FeedbackAuthorDTO -> Json.Encode.Value
encodeFeedbackAuthorDTO =
    encodeObject << encodeFeedbackAuthorDTOPairs


encodeFeedbackAuthorDTOWithTag : ( String, String ) -> FeedbackAuthorDTO -> Json.Encode.Value
encodeFeedbackAuthorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackAuthorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackAuthorDTOPairs : FeedbackAuthorDTO -> List EncodedField
encodeFeedbackAuthorDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "region" encodeRegionDTO model.region
            ]
    in
    pairs


encodeFeedbackCommentAuthorDTO : FeedbackCommentAuthorDTO -> Json.Encode.Value
encodeFeedbackCommentAuthorDTO =
    encodeObject << encodeFeedbackCommentAuthorDTOPairs


encodeFeedbackCommentAuthorDTOWithTag : ( String, String ) -> FeedbackCommentAuthorDTO -> Json.Encode.Value
encodeFeedbackCommentAuthorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackCommentAuthorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackCommentAuthorDTOPairs : FeedbackCommentAuthorDTO -> List EncodedField
encodeFeedbackCommentAuthorDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeFeedbackCommentAuthorType model.type_
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


stringFromFeedbackCommentAuthorType : FeedbackCommentAuthorType -> String
stringFromFeedbackCommentAuthorType model =
    case model of
        FeedbackCommentAuthorTypeUSER ->
            "USER"

        FeedbackCommentAuthorTypeSHOP ->
            "SHOP"


encodeFeedbackCommentAuthorType : FeedbackCommentAuthorType -> Json.Encode.Value
encodeFeedbackCommentAuthorType =
    Json.Encode.string << stringFromFeedbackCommentAuthorType


encodeFeedbackCommentDTO : FeedbackCommentDTO -> Json.Encode.Value
encodeFeedbackCommentDTO =
    encodeObject << encodeFeedbackCommentDTOPairs


encodeFeedbackCommentDTOWithTag : ( String, String ) -> FeedbackCommentDTO -> Json.Encode.Value
encodeFeedbackCommentDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackCommentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackCommentDTOPairs : FeedbackCommentDTO -> List EncodedField
encodeFeedbackCommentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "parentId" Json.Encode.int model.parentId
            , maybeEncode "body" Json.Encode.string model.body
            , maybeEncode "createdAt" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            , maybeEncode "author" encodeFeedbackCommentAuthorDTO model.author
            , maybeEncodeNullable "children" (Json.Encode.list encodeFeedbackCommentDTO) <| unwrapFeedbackCommentDTOChildren model.children
            ]
    in
    pairs


encodeFeedbackDTO : FeedbackDTO -> Json.Encode.Value
encodeFeedbackDTO =
    encodeObject << encodeFeedbackDTOPairs


encodeFeedbackDTOWithTag : ( String, String ) -> FeedbackDTO -> Json.Encode.Value
encodeFeedbackDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackDTOPairs : FeedbackDTO -> List EncodedField
encodeFeedbackDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "createdAt" Api.Time.encodeDateTime model.createdAt
            , maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "state" encodeFeedbackStateType model.state
            , maybeEncode "author" encodeFeedbackAuthorDTO model.author
            , maybeEncode "pro" Json.Encode.string model.pro
            , maybeEncode "contra" Json.Encode.string model.contra
            , encode "comments" (Json.Encode.list encodeFeedbackCommentDTO) model.comments
            , maybeEncode "shop" encodeFeedbackShopDTO model.shop
            , maybeEncode "resolved" Json.Encode.bool model.resolved
            , maybeEncode "verified" Json.Encode.bool model.verified
            , maybeEncode "recommend" Json.Encode.bool model.recommend
            , maybeEncode "grades" encodeFeedbackGradesDTO model.grades
            , maybeEncode "order" encodeFeedbackOrderDTO model.order
            ]
    in
    pairs


stringFromFeedbackDeliveryType : FeedbackDeliveryType -> String
stringFromFeedbackDeliveryType model =
    case model of
        FeedbackDeliveryTypeDELIVERY ->
            "DELIVERY"

        FeedbackDeliveryTypePICKUP ->
            "PICKUP"

        FeedbackDeliveryTypeINSTORE ->
            "INSTORE"


encodeFeedbackDeliveryType : FeedbackDeliveryType -> Json.Encode.Value
encodeFeedbackDeliveryType =
    Json.Encode.string << stringFromFeedbackDeliveryType


encodeFeedbackFactorDTO : FeedbackFactorDTO -> Json.Encode.Value
encodeFeedbackFactorDTO =
    encodeObject << encodeFeedbackFactorDTOPairs


encodeFeedbackFactorDTOWithTag : ( String, String ) -> FeedbackFactorDTO -> Json.Encode.Value
encodeFeedbackFactorDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackFactorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackFactorDTOPairs : FeedbackFactorDTO -> List EncodedField
encodeFeedbackFactorDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "value" Json.Encode.int model.value
            ]
    in
    pairs


encodeFeedbackGradesDTO : FeedbackGradesDTO -> Json.Encode.Value
encodeFeedbackGradesDTO =
    encodeObject << encodeFeedbackGradesDTOPairs


encodeFeedbackGradesDTOWithTag : ( String, String ) -> FeedbackGradesDTO -> Json.Encode.Value
encodeFeedbackGradesDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackGradesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackGradesDTOPairs : FeedbackGradesDTO -> List EncodedField
encodeFeedbackGradesDTOPairs model =
    let
        pairs =
            [ maybeEncode "average" Json.Encode.float model.average
            , maybeEncode "agreeCount" Json.Encode.int model.agreeCount
            , maybeEncode "rejectCount" Json.Encode.int model.rejectCount
            , encode "factors" (Json.Encode.list encodeFeedbackFactorDTO) model.factors
            ]
    in
    pairs


encodeFeedbackListDTO : FeedbackListDTO -> Json.Encode.Value
encodeFeedbackListDTO =
    encodeObject << encodeFeedbackListDTOPairs


encodeFeedbackListDTOWithTag : ( String, String ) -> FeedbackListDTO -> Json.Encode.Value
encodeFeedbackListDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackListDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackListDTOPairs : FeedbackListDTO -> List EncodedField
encodeFeedbackListDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "feedbackList" (Json.Encode.list encodeFeedbackDTO) model.feedbackList
            ]
    in
    pairs


encodeFeedbackOrderDTO : FeedbackOrderDTO -> Json.Encode.Value
encodeFeedbackOrderDTO =
    encodeObject << encodeFeedbackOrderDTOPairs


encodeFeedbackOrderDTOWithTag : ( String, String ) -> FeedbackOrderDTO -> Json.Encode.Value
encodeFeedbackOrderDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackOrderDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackOrderDTOPairs : FeedbackOrderDTO -> List EncodedField
encodeFeedbackOrderDTOPairs model =
    let
        pairs =
            [ maybeEncode "shopOrderId" Json.Encode.string model.shopOrderId
            , maybeEncode "delivery" encodeFeedbackDeliveryType model.delivery
            ]
    in
    pairs


stringFromFeedbackReactionStatusType : FeedbackReactionStatusType -> String
stringFromFeedbackReactionStatusType model =
    case model of
        FeedbackReactionStatusTypeALL ->
            "ALL"

        FeedbackReactionStatusTypeNEEDREACTION ->
            "NEED_REACTION"


encodeFeedbackReactionStatusType : FeedbackReactionStatusType -> Json.Encode.Value
encodeFeedbackReactionStatusType =
    Json.Encode.string << stringFromFeedbackReactionStatusType


encodeFeedbackShopDTO : FeedbackShopDTO -> Json.Encode.Value
encodeFeedbackShopDTO =
    encodeObject << encodeFeedbackShopDTOPairs


encodeFeedbackShopDTOWithTag : ( String, String ) -> FeedbackShopDTO -> Json.Encode.Value
encodeFeedbackShopDTOWithTag (tagField, tag) model =
    encodeObject (encodeFeedbackShopDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFeedbackShopDTOPairs : FeedbackShopDTO -> List EncodedField
encodeFeedbackShopDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


stringFromFeedbackStateType : FeedbackStateType -> String
stringFromFeedbackStateType model =
    case model of
        FeedbackStateTypeLAST ->
            "LAST"

        FeedbackStateTypePREVIOUS ->
            "PREVIOUS"

        FeedbackStateTypeDELETED ->
            "DELETED"


encodeFeedbackStateType : FeedbackStateType -> Json.Encode.Value
encodeFeedbackStateType =
    Json.Encode.string << stringFromFeedbackStateType


stringFromFieldStateType : FieldStateType -> String
stringFromFieldStateType model =
    case model of
        FieldStateTypeSPECIFIED ->
            "SPECIFIED"

        FieldStateTypeEMPTY ->
            "EMPTY"


encodeFieldStateType : FieldStateType -> Json.Encode.Value
encodeFieldStateType =
    Json.Encode.string << stringFromFieldStateType


encodeFlippingPagerDTO : FlippingPagerDTO -> Json.Encode.Value
encodeFlippingPagerDTO =
    encodeObject << encodeFlippingPagerDTOPairs


encodeFlippingPagerDTOWithTag : ( String, String ) -> FlippingPagerDTO -> Json.Encode.Value
encodeFlippingPagerDTOWithTag (tagField, tag) model =
    encodeObject (encodeFlippingPagerDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFlippingPagerDTOPairs : FlippingPagerDTO -> List EncodedField
encodeFlippingPagerDTOPairs model =
    let
        pairs =
            [ maybeEncode "total" Json.Encode.int model.total
            , maybeEncode "from" Json.Encode.int model.from
            , maybeEncode "to" Json.Encode.int model.to
            , maybeEncode "currentPage" Json.Encode.int model.currentPage
            , maybeEncode "pagesCount" Json.Encode.int model.pagesCount
            , maybeEncode "pageSize" Json.Encode.int model.pageSize
            ]
    in
    pairs


encodeForwardScrollingPagerDTO : ForwardScrollingPagerDTO -> Json.Encode.Value
encodeForwardScrollingPagerDTO =
    encodeObject << encodeForwardScrollingPagerDTOPairs


encodeForwardScrollingPagerDTOWithTag : ( String, String ) -> ForwardScrollingPagerDTO -> Json.Encode.Value
encodeForwardScrollingPagerDTOWithTag (tagField, tag) model =
    encodeObject (encodeForwardScrollingPagerDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeForwardScrollingPagerDTOPairs : ForwardScrollingPagerDTO -> List EncodedField
encodeForwardScrollingPagerDTOPairs model =
    let
        pairs =
            [ maybeEncode "nextPageToken" Json.Encode.string model.nextPageToken
            ]
    in
    pairs


encodeFulfillmentWarehouseDTO : FulfillmentWarehouseDTO -> Json.Encode.Value
encodeFulfillmentWarehouseDTO =
    encodeObject << encodeFulfillmentWarehouseDTOPairs


encodeFulfillmentWarehouseDTOWithTag : ( String, String ) -> FulfillmentWarehouseDTO -> Json.Encode.Value
encodeFulfillmentWarehouseDTOWithTag (tagField, tag) model =
    encodeObject (encodeFulfillmentWarehouseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFulfillmentWarehouseDTOPairs : FulfillmentWarehouseDTO -> List EncodedField
encodeFulfillmentWarehouseDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , maybeEncode "address" encodeWarehouseAddressDTO model.address
            ]
    in
    pairs


encodeFulfillmentWarehousesDTO : FulfillmentWarehousesDTO -> Json.Encode.Value
encodeFulfillmentWarehousesDTO =
    encodeObject << encodeFulfillmentWarehousesDTOPairs


encodeFulfillmentWarehousesDTOWithTag : ( String, String ) -> FulfillmentWarehousesDTO -> Json.Encode.Value
encodeFulfillmentWarehousesDTOWithTag (tagField, tag) model =
    encodeObject (encodeFulfillmentWarehousesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFulfillmentWarehousesDTOPairs : FulfillmentWarehousesDTO -> List EncodedField
encodeFulfillmentWarehousesDTOPairs model =
    let
        pairs =
            [ encode "warehouses" (Json.Encode.list encodeFulfillmentWarehouseDTO) model.warehouses
            ]
    in
    pairs


encodeFullOutletDTO : FullOutletDTO -> Json.Encode.Value
encodeFullOutletDTO =
    encodeObject << encodeFullOutletDTOPairs


encodeFullOutletDTOWithTag : ( String, String ) -> FullOutletDTO -> Json.Encode.Value
encodeFullOutletDTOWithTag (tagField, tag) model =
    encodeObject (encodeFullOutletDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFullOutletDTOPairs : FullOutletDTO -> List EncodedField
encodeFullOutletDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "type" encodeOutletType model.type_
            , maybeEncode "coords" Json.Encode.string model.coords
            , maybeEncode "isMain" Json.Encode.bool model.isMain
            , maybeEncode "shopOutletCode" Json.Encode.string model.shopOutletCode
            , maybeEncode "visibility" encodeOutletVisibilityType model.visibility
            , encode "address" encodeOutletAddressDTO model.address
            , encode "phones" (Json.Encode.list Json.Encode.string) model.phones
            , encode "workingSchedule" encodeOutletWorkingScheduleDTO model.workingSchedule
            , maybeEncodeNullable "deliveryRules" (Json.Encode.list encodeOutletDeliveryRuleDTO) model.deliveryRules
            , maybeEncode "storagePeriod" Json.Encode.int model.storagePeriod
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "status" encodeOutletStatusType model.status
            , maybeEncode "region" encodeRegionDTO model.region
            , maybeEncode "shopOutletId" Json.Encode.string model.shopOutletId
            , maybeEncode "workingTime" Json.Encode.string model.workingTime
            , maybeEncode "moderationReason" Json.Encode.string model.moderationReason
            ]
    in
    pairs


encodeFullOutletLicenseDTO : FullOutletLicenseDTO -> Json.Encode.Value
encodeFullOutletLicenseDTO =
    encodeObject << encodeFullOutletLicenseDTOPairs


encodeFullOutletLicenseDTOWithTag : ( String, String ) -> FullOutletLicenseDTO -> Json.Encode.Value
encodeFullOutletLicenseDTOWithTag (tagField, tag) model =
    encodeObject (encodeFullOutletLicenseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFullOutletLicenseDTOPairs : FullOutletLicenseDTO -> List EncodedField
encodeFullOutletLicenseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "outletId" Json.Encode.int model.outletId
            , maybeEncode "licenseType" encodeLicenseType model.licenseType
            , maybeEncode "number" Json.Encode.string model.number
            , maybeEncode "dateOfIssue" Api.Time.encodeDateTime model.dateOfIssue
            , maybeEncode "dateOfExpiry" Api.Time.encodeDateTime model.dateOfExpiry
            , maybeEncode "checkStatus" encodeLicenseCheckStatusType model.checkStatus
            , maybeEncode "checkComment" Json.Encode.string model.checkComment
            ]
    in
    pairs


encodeGenerateBoostConsolidatedRequest : GenerateBoostConsolidatedRequest -> Json.Encode.Value
encodeGenerateBoostConsolidatedRequest =
    encodeObject << encodeGenerateBoostConsolidatedRequestPairs


encodeGenerateBoostConsolidatedRequestWithTag : ( String, String ) -> GenerateBoostConsolidatedRequest -> Json.Encode.Value
encodeGenerateBoostConsolidatedRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateBoostConsolidatedRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateBoostConsolidatedRequestPairs : GenerateBoostConsolidatedRequest -> List EncodedField
encodeGenerateBoostConsolidatedRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            ]
    in
    pairs


encodeGenerateCompetitorsPositionReportRequest : GenerateCompetitorsPositionReportRequest -> Json.Encode.Value
encodeGenerateCompetitorsPositionReportRequest =
    encodeObject << encodeGenerateCompetitorsPositionReportRequestPairs


encodeGenerateCompetitorsPositionReportRequestWithTag : ( String, String ) -> GenerateCompetitorsPositionReportRequest -> Json.Encode.Value
encodeGenerateCompetitorsPositionReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateCompetitorsPositionReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateCompetitorsPositionReportRequestPairs : GenerateCompetitorsPositionReportRequest -> List EncodedField
encodeGenerateCompetitorsPositionReportRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , encode "categoryId" Json.Encode.int model.categoryId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            ]
    in
    pairs


encodeGenerateGoodsFeedbackRequest : GenerateGoodsFeedbackRequest -> Json.Encode.Value
encodeGenerateGoodsFeedbackRequest =
    encodeObject << encodeGenerateGoodsFeedbackRequestPairs


encodeGenerateGoodsFeedbackRequestWithTag : ( String, String ) -> GenerateGoodsFeedbackRequest -> Json.Encode.Value
encodeGenerateGoodsFeedbackRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateGoodsFeedbackRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateGoodsFeedbackRequestPairs : GenerateGoodsFeedbackRequest -> List EncodedField
encodeGenerateGoodsFeedbackRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            ]
    in
    pairs


encodeGenerateGoodsMovementReportRequest : GenerateGoodsMovementReportRequest -> Json.Encode.Value
encodeGenerateGoodsMovementReportRequest =
    encodeObject << encodeGenerateGoodsMovementReportRequestPairs


encodeGenerateGoodsMovementReportRequestWithTag : ( String, String ) -> GenerateGoodsMovementReportRequest -> Json.Encode.Value
encodeGenerateGoodsMovementReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateGoodsMovementReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateGoodsMovementReportRequestPairs : GenerateGoodsMovementReportRequest -> List EncodedField
encodeGenerateGoodsMovementReportRequestPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            ]
    in
    pairs


encodeGenerateGoodsRealizationReportRequest : GenerateGoodsRealizationReportRequest -> Json.Encode.Value
encodeGenerateGoodsRealizationReportRequest =
    encodeObject << encodeGenerateGoodsRealizationReportRequestPairs


encodeGenerateGoodsRealizationReportRequestWithTag : ( String, String ) -> GenerateGoodsRealizationReportRequest -> Json.Encode.Value
encodeGenerateGoodsRealizationReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateGoodsRealizationReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateGoodsRealizationReportRequestPairs : GenerateGoodsRealizationReportRequest -> List EncodedField
encodeGenerateGoodsRealizationReportRequestPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , encode "year" Json.Encode.int model.year
            , encode "month" Json.Encode.int model.month
            ]
    in
    pairs


encodeGenerateGoodsTurnoverRequest : GenerateGoodsTurnoverRequest -> Json.Encode.Value
encodeGenerateGoodsTurnoverRequest =
    encodeObject << encodeGenerateGoodsTurnoverRequestPairs


encodeGenerateGoodsTurnoverRequestWithTag : ( String, String ) -> GenerateGoodsTurnoverRequest -> Json.Encode.Value
encodeGenerateGoodsTurnoverRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateGoodsTurnoverRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateGoodsTurnoverRequestPairs : GenerateGoodsTurnoverRequest -> List EncodedField
encodeGenerateGoodsTurnoverRequestPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , maybeEncode "date" Api.Time.encodeDate model.date
            ]
    in
    pairs


encodeGenerateMassOrderLabelsRequest : GenerateMassOrderLabelsRequest -> Json.Encode.Value
encodeGenerateMassOrderLabelsRequest =
    encodeObject << encodeGenerateMassOrderLabelsRequestPairs


encodeGenerateMassOrderLabelsRequestWithTag : ( String, String ) -> GenerateMassOrderLabelsRequest -> Json.Encode.Value
encodeGenerateMassOrderLabelsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateMassOrderLabelsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateMassOrderLabelsRequestPairs : GenerateMassOrderLabelsRequest -> List EncodedField
encodeGenerateMassOrderLabelsRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , encode "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            ]
    in
    pairs


encodeGeneratePricesReportRequest : GeneratePricesReportRequest -> Json.Encode.Value
encodeGeneratePricesReportRequest =
    encodeObject << encodeGeneratePricesReportRequestPairs


encodeGeneratePricesReportRequestWithTag : ( String, String ) -> GeneratePricesReportRequest -> Json.Encode.Value
encodeGeneratePricesReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGeneratePricesReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGeneratePricesReportRequestPairs : GeneratePricesReportRequest -> List EncodedField
encodeGeneratePricesReportRequestPairs model =
    let
        pairs =
            [ maybeEncode "businessId" Json.Encode.int model.businessId
            , maybeEncode "campaignId" Json.Encode.int model.campaignId
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            , maybeEncode "creationDateFrom" Api.Time.encodeDate model.creationDateFrom
            , maybeEncode "creationDateTo" Api.Time.encodeDate model.creationDateTo
            ]
    in
    pairs


encodeGenerateReportDTO : GenerateReportDTO -> Json.Encode.Value
encodeGenerateReportDTO =
    encodeObject << encodeGenerateReportDTOPairs


encodeGenerateReportDTOWithTag : ( String, String ) -> GenerateReportDTO -> Json.Encode.Value
encodeGenerateReportDTOWithTag (tagField, tag) model =
    encodeObject (encodeGenerateReportDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateReportDTOPairs : GenerateReportDTO -> List EncodedField
encodeGenerateReportDTOPairs model =
    let
        pairs =
            [ encode "reportId" Json.Encode.string model.reportId
            , encode "estimatedGenerationTime" Json.Encode.int model.estimatedGenerationTime
            ]
    in
    pairs


encodeGenerateReportResponse : GenerateReportResponse -> Json.Encode.Value
encodeGenerateReportResponse =
    encodeObject << encodeGenerateReportResponsePairs


encodeGenerateReportResponseWithTag : ( String, String ) -> GenerateReportResponse -> Json.Encode.Value
encodeGenerateReportResponseWithTag (tagField, tag) model =
    encodeObject (encodeGenerateReportResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateReportResponsePairs : GenerateReportResponse -> List EncodedField
encodeGenerateReportResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGenerateReportDTO model.result
            ]
    in
    pairs


encodeGenerateShelfsStatisticsRequest : GenerateShelfsStatisticsRequest -> Json.Encode.Value
encodeGenerateShelfsStatisticsRequest =
    encodeObject << encodeGenerateShelfsStatisticsRequestPairs


encodeGenerateShelfsStatisticsRequestWithTag : ( String, String ) -> GenerateShelfsStatisticsRequest -> Json.Encode.Value
encodeGenerateShelfsStatisticsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateShelfsStatisticsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateShelfsStatisticsRequestPairs : GenerateShelfsStatisticsRequest -> List EncodedField
encodeGenerateShelfsStatisticsRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            , encode "attributionType" encodeShelfsStatisticsAttributionType model.attributionType
            ]
    in
    pairs


encodeGenerateShipmentListDocumentReportRequest : GenerateShipmentListDocumentReportRequest -> Json.Encode.Value
encodeGenerateShipmentListDocumentReportRequest =
    encodeObject << encodeGenerateShipmentListDocumentReportRequestPairs


encodeGenerateShipmentListDocumentReportRequestWithTag : ( String, String ) -> GenerateShipmentListDocumentReportRequest -> Json.Encode.Value
encodeGenerateShipmentListDocumentReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateShipmentListDocumentReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateShipmentListDocumentReportRequestPairs : GenerateShipmentListDocumentReportRequest -> List EncodedField
encodeGenerateShipmentListDocumentReportRequestPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , maybeEncode "shipmentId" Json.Encode.int model.shipmentId
            , maybeEncodeNullable "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            ]
    in
    pairs


encodeGenerateShowsSalesReportRequest : GenerateShowsSalesReportRequest -> Json.Encode.Value
encodeGenerateShowsSalesReportRequest =
    encodeObject << encodeGenerateShowsSalesReportRequestPairs


encodeGenerateShowsSalesReportRequestWithTag : ( String, String ) -> GenerateShowsSalesReportRequest -> Json.Encode.Value
encodeGenerateShowsSalesReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateShowsSalesReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateShowsSalesReportRequestPairs : GenerateShowsSalesReportRequest -> List EncodedField
encodeGenerateShowsSalesReportRequestPairs model =
    let
        pairs =
            [ maybeEncode "businessId" Json.Encode.int model.businessId
            , maybeEncode "campaignId" Json.Encode.int model.campaignId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            , encode "grouping" encodeShowsSalesGroupingType model.grouping
            ]
    in
    pairs


encodeGenerateStocksOnWarehousesReportRequest : GenerateStocksOnWarehousesReportRequest -> Json.Encode.Value
encodeGenerateStocksOnWarehousesReportRequest =
    encodeObject << encodeGenerateStocksOnWarehousesReportRequestPairs


encodeGenerateStocksOnWarehousesReportRequestWithTag : ( String, String ) -> GenerateStocksOnWarehousesReportRequest -> Json.Encode.Value
encodeGenerateStocksOnWarehousesReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateStocksOnWarehousesReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateStocksOnWarehousesReportRequestPairs : GenerateStocksOnWarehousesReportRequest -> List EncodedField
encodeGenerateStocksOnWarehousesReportRequestPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , maybeEncodeNullable "warehouseIds" (Json.Encode.list Json.Encode.int) model.warehouseIds
            , maybeEncode "reportDate" Api.Time.encodeDate model.reportDate
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            , maybeEncode "hasStocks" Json.Encode.bool model.hasStocks
            ]
    in
    pairs


encodeGenerateUnitedMarketplaceServicesReportRequest : GenerateUnitedMarketplaceServicesReportRequest -> Json.Encode.Value
encodeGenerateUnitedMarketplaceServicesReportRequest =
    encodeObject << encodeGenerateUnitedMarketplaceServicesReportRequestPairs


encodeGenerateUnitedMarketplaceServicesReportRequestWithTag : ( String, String ) -> GenerateUnitedMarketplaceServicesReportRequest -> Json.Encode.Value
encodeGenerateUnitedMarketplaceServicesReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateUnitedMarketplaceServicesReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateUnitedMarketplaceServicesReportRequestPairs : GenerateUnitedMarketplaceServicesReportRequest -> List EncodedField
encodeGenerateUnitedMarketplaceServicesReportRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , maybeEncode "dateTimeFrom" Api.Time.encodeDateTime model.dateTimeFrom
            , maybeEncode "dateTimeTo" Api.Time.encodeDateTime model.dateTimeTo
            , maybeEncode "dateFrom" Api.Time.encodeDate model.dateFrom
            , maybeEncode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncode "yearFrom" Json.Encode.int model.yearFrom
            , maybeEncode "monthFrom" Json.Encode.int model.monthFrom
            , maybeEncode "yearTo" Json.Encode.int model.yearTo
            , maybeEncode "monthTo" Json.Encode.int model.monthTo
            , maybeEncodeNullable "placementPrograms" (Json.Encode.list encodePlacementType) model.placementPrograms
            , maybeEncodeNullable "inns" (Json.Encode.list Json.Encode.string) model.inns
            , maybeEncodeNullable "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            ]
    in
    pairs


encodeGenerateUnitedNettingReportRequest : GenerateUnitedNettingReportRequest -> Json.Encode.Value
encodeGenerateUnitedNettingReportRequest =
    encodeObject << encodeGenerateUnitedNettingReportRequestPairs


encodeGenerateUnitedNettingReportRequestWithTag : ( String, String ) -> GenerateUnitedNettingReportRequest -> Json.Encode.Value
encodeGenerateUnitedNettingReportRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateUnitedNettingReportRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateUnitedNettingReportRequestPairs : GenerateUnitedNettingReportRequest -> List EncodedField
encodeGenerateUnitedNettingReportRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , maybeEncode "dateTimeFrom" Api.Time.encodeDateTime model.dateTimeFrom
            , maybeEncode "dateTimeTo" Api.Time.encodeDateTime model.dateTimeTo
            , maybeEncode "dateFrom" Api.Time.encodeDate model.dateFrom
            , maybeEncode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncode "bankOrderId" Json.Encode.int model.bankOrderId
            , maybeEncode "bankOrderDateTime" Api.Time.encodeDateTime model.bankOrderDateTime
            , maybeEncodeNullable "placementPrograms" (Json.Encode.list encodePlacementType) model.placementPrograms
            , maybeEncodeNullable "inns" (Json.Encode.list Json.Encode.string) model.inns
            , maybeEncodeNullable "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            ]
    in
    pairs


encodeGenerateUnitedOrdersRequest : GenerateUnitedOrdersRequest -> Json.Encode.Value
encodeGenerateUnitedOrdersRequest =
    encodeObject << encodeGenerateUnitedOrdersRequestPairs


encodeGenerateUnitedOrdersRequestWithTag : ( String, String ) -> GenerateUnitedOrdersRequest -> Json.Encode.Value
encodeGenerateUnitedOrdersRequestWithTag (tagField, tag) model =
    encodeObject (encodeGenerateUnitedOrdersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenerateUnitedOrdersRequestPairs : GenerateUnitedOrdersRequest -> List EncodedField
encodeGenerateUnitedOrdersRequestPairs model =
    let
        pairs =
            [ encode "businessId" Json.Encode.int model.businessId
            , encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncodeNullable "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            , maybeEncode "promoId" Json.Encode.string model.promoId
            ]
    in
    pairs


encodeGetAllOffersResponse : GetAllOffersResponse -> Json.Encode.Value
encodeGetAllOffersResponse =
    encodeObject << encodeGetAllOffersResponsePairs


encodeGetAllOffersResponseWithTag : ( String, String ) -> GetAllOffersResponse -> Json.Encode.Value
encodeGetAllOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetAllOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetAllOffersResponsePairs : GetAllOffersResponse -> List EncodedField
encodeGetAllOffersResponsePairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferDTO) model.offers
            ]
    in
    pairs


encodeGetBidsInfoRequest : GetBidsInfoRequest -> Json.Encode.Value
encodeGetBidsInfoRequest =
    encodeObject << encodeGetBidsInfoRequestPairs


encodeGetBidsInfoRequestWithTag : ( String, String ) -> GetBidsInfoRequest -> Json.Encode.Value
encodeGetBidsInfoRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsInfoRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsInfoRequestPairs : GetBidsInfoRequest -> List EncodedField
encodeGetBidsInfoRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "skus" (Json.Encode.list Json.Encode.string) model.skus
            ]
    in
    pairs


encodeGetBidsInfoResponse : GetBidsInfoResponse -> Json.Encode.Value
encodeGetBidsInfoResponse =
    encodeObject << encodeGetBidsInfoResponsePairs


encodeGetBidsInfoResponseWithTag : ( String, String ) -> GetBidsInfoResponse -> Json.Encode.Value
encodeGetBidsInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsInfoResponsePairs : GetBidsInfoResponse -> List EncodedField
encodeGetBidsInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetBidsInfoResponseDTO model.result
            ]
    in
    pairs


encodeGetBidsInfoResponseDTO : GetBidsInfoResponseDTO -> Json.Encode.Value
encodeGetBidsInfoResponseDTO =
    encodeObject << encodeGetBidsInfoResponseDTOPairs


encodeGetBidsInfoResponseDTOWithTag : ( String, String ) -> GetBidsInfoResponseDTO -> Json.Encode.Value
encodeGetBidsInfoResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsInfoResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsInfoResponseDTOPairs : GetBidsInfoResponseDTO -> List EncodedField
encodeGetBidsInfoResponseDTOPairs model =
    let
        pairs =
            [ encode "bids" (Json.Encode.list encodeSkuBidItemDTO) model.bids
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGetBidsRecommendationsRequest : GetBidsRecommendationsRequest -> Json.Encode.Value
encodeGetBidsRecommendationsRequest =
    encodeObject << encodeGetBidsRecommendationsRequestPairs


encodeGetBidsRecommendationsRequestWithTag : ( String, String ) -> GetBidsRecommendationsRequest -> Json.Encode.Value
encodeGetBidsRecommendationsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsRecommendationsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsRecommendationsRequestPairs : GetBidsRecommendationsRequest -> List EncodedField
encodeGetBidsRecommendationsRequestPairs model =
    let
        pairs =
            [ encode "skus" (Json.Encode.list Json.Encode.string) model.skus
            ]
    in
    pairs


encodeGetBidsRecommendationsResponse : GetBidsRecommendationsResponse -> Json.Encode.Value
encodeGetBidsRecommendationsResponse =
    encodeObject << encodeGetBidsRecommendationsResponsePairs


encodeGetBidsRecommendationsResponseWithTag : ( String, String ) -> GetBidsRecommendationsResponse -> Json.Encode.Value
encodeGetBidsRecommendationsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsRecommendationsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsRecommendationsResponsePairs : GetBidsRecommendationsResponse -> List EncodedField
encodeGetBidsRecommendationsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetBidsRecommendationsResponseDTO model.result
            ]
    in
    pairs


encodeGetBidsRecommendationsResponseDTO : GetBidsRecommendationsResponseDTO -> Json.Encode.Value
encodeGetBidsRecommendationsResponseDTO =
    encodeObject << encodeGetBidsRecommendationsResponseDTOPairs


encodeGetBidsRecommendationsResponseDTOWithTag : ( String, String ) -> GetBidsRecommendationsResponseDTO -> Json.Encode.Value
encodeGetBidsRecommendationsResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetBidsRecommendationsResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBidsRecommendationsResponseDTOPairs : GetBidsRecommendationsResponseDTO -> List EncodedField
encodeGetBidsRecommendationsResponseDTOPairs model =
    let
        pairs =
            [ encode "recommendations" (Json.Encode.list encodeSkuBidRecommendationItemDTO) model.recommendations
            ]
    in
    pairs


encodeGetBusinessBuyerInfoResponse : GetBusinessBuyerInfoResponse -> Json.Encode.Value
encodeGetBusinessBuyerInfoResponse =
    encodeObject << encodeGetBusinessBuyerInfoResponsePairs


encodeGetBusinessBuyerInfoResponseWithTag : ( String, String ) -> GetBusinessBuyerInfoResponse -> Json.Encode.Value
encodeGetBusinessBuyerInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetBusinessBuyerInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBusinessBuyerInfoResponsePairs : GetBusinessBuyerInfoResponse -> List EncodedField
encodeGetBusinessBuyerInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderBusinessBuyerDTO model.result
            ]
    in
    pairs


encodeGetBusinessDocumentsInfoResponse : GetBusinessDocumentsInfoResponse -> Json.Encode.Value
encodeGetBusinessDocumentsInfoResponse =
    encodeObject << encodeGetBusinessDocumentsInfoResponsePairs


encodeGetBusinessDocumentsInfoResponseWithTag : ( String, String ) -> GetBusinessDocumentsInfoResponse -> Json.Encode.Value
encodeGetBusinessDocumentsInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetBusinessDocumentsInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBusinessDocumentsInfoResponsePairs : GetBusinessDocumentsInfoResponse -> List EncodedField
encodeGetBusinessDocumentsInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderBusinessDocumentsDTO model.result
            ]
    in
    pairs


encodeGetBusinessSettingsInfoDTO : GetBusinessSettingsInfoDTO -> Json.Encode.Value
encodeGetBusinessSettingsInfoDTO =
    encodeObject << encodeGetBusinessSettingsInfoDTOPairs


encodeGetBusinessSettingsInfoDTOWithTag : ( String, String ) -> GetBusinessSettingsInfoDTO -> Json.Encode.Value
encodeGetBusinessSettingsInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetBusinessSettingsInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBusinessSettingsInfoDTOPairs : GetBusinessSettingsInfoDTO -> List EncodedField
encodeGetBusinessSettingsInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "info" encodeBusinessDTO model.info
            , maybeEncode "settings" encodeBusinessSettingsDTO model.settings
            ]
    in
    pairs


encodeGetBusinessSettingsResponse : GetBusinessSettingsResponse -> Json.Encode.Value
encodeGetBusinessSettingsResponse =
    encodeObject << encodeGetBusinessSettingsResponsePairs


encodeGetBusinessSettingsResponseWithTag : ( String, String ) -> GetBusinessSettingsResponse -> Json.Encode.Value
encodeGetBusinessSettingsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetBusinessSettingsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetBusinessSettingsResponsePairs : GetBusinessSettingsResponse -> List EncodedField
encodeGetBusinessSettingsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetBusinessSettingsInfoDTO model.result
            ]
    in
    pairs


encodeGetCampaignLoginsResponse : GetCampaignLoginsResponse -> Json.Encode.Value
encodeGetCampaignLoginsResponse =
    encodeObject << encodeGetCampaignLoginsResponsePairs


encodeGetCampaignLoginsResponseWithTag : ( String, String ) -> GetCampaignLoginsResponse -> Json.Encode.Value
encodeGetCampaignLoginsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignLoginsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignLoginsResponsePairs : GetCampaignLoginsResponse -> List EncodedField
encodeGetCampaignLoginsResponsePairs model =
    let
        pairs =
            [ encode "logins" (Json.Encode.list Json.Encode.string) model.logins
            ]
    in
    pairs


encodeGetCampaignOfferDTO : GetCampaignOfferDTO -> Json.Encode.Value
encodeGetCampaignOfferDTO =
    encodeObject << encodeGetCampaignOfferDTOPairs


encodeGetCampaignOfferDTOWithTag : ( String, String ) -> GetCampaignOfferDTO -> Json.Encode.Value
encodeGetCampaignOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignOfferDTOPairs : GetCampaignOfferDTO -> List EncodedField
encodeGetCampaignOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "quantum" encodeQuantumDTO model.quantum
            , maybeEncode "available" Json.Encode.bool model.available
            , maybeEncode "basicPrice" encodeGetPriceWithDiscountDTO model.basicPrice
            , maybeEncode "campaignPrice" encodeGetPriceWithVatDTO model.campaignPrice
            , maybeEncode "status" encodeOfferCampaignStatusType model.status
            , maybeEncodeNullable "errors" (Json.Encode.list encodeOfferErrorDTO) model.errors
            , maybeEncodeNullable "warnings" (Json.Encode.list encodeOfferErrorDTO) model.warnings
            ]
    in
    pairs


encodeGetCampaignOffersRequest : GetCampaignOffersRequest -> Json.Encode.Value
encodeGetCampaignOffersRequest =
    encodeObject << encodeGetCampaignOffersRequestPairs


encodeGetCampaignOffersRequestWithTag : ( String, String ) -> GetCampaignOffersRequest -> Json.Encode.Value
encodeGetCampaignOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignOffersRequestPairs : GetCampaignOffersRequest -> List EncodedField
encodeGetCampaignOffersRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            , maybeEncodeNullable "statuses" (Json.Encode.list encodeOfferCampaignStatusType) model.statuses
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            , maybeEncodeNullable "vendorNames" (Json.Encode.list Json.Encode.string) model.vendorNames
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            ]
    in
    pairs


encodeGetCampaignOffersResponse : GetCampaignOffersResponse -> Json.Encode.Value
encodeGetCampaignOffersResponse =
    encodeObject << encodeGetCampaignOffersResponsePairs


encodeGetCampaignOffersResponseWithTag : ( String, String ) -> GetCampaignOffersResponse -> Json.Encode.Value
encodeGetCampaignOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignOffersResponsePairs : GetCampaignOffersResponse -> List EncodedField
encodeGetCampaignOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetCampaignOffersResultDTO model.result
            ]
    in
    pairs


encodeGetCampaignOffersResultDTO : GetCampaignOffersResultDTO -> Json.Encode.Value
encodeGetCampaignOffersResultDTO =
    encodeObject << encodeGetCampaignOffersResultDTOPairs


encodeGetCampaignOffersResultDTOWithTag : ( String, String ) -> GetCampaignOffersResultDTO -> Json.Encode.Value
encodeGetCampaignOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignOffersResultDTOPairs : GetCampaignOffersResultDTO -> List EncodedField
encodeGetCampaignOffersResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "offers" (Json.Encode.list encodeGetCampaignOfferDTO) model.offers
            ]
    in
    pairs


encodeGetCampaignRegionResponse : GetCampaignRegionResponse -> Json.Encode.Value
encodeGetCampaignRegionResponse =
    encodeObject << encodeGetCampaignRegionResponsePairs


encodeGetCampaignRegionResponseWithTag : ( String, String ) -> GetCampaignRegionResponse -> Json.Encode.Value
encodeGetCampaignRegionResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignRegionResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignRegionResponsePairs : GetCampaignRegionResponse -> List EncodedField
encodeGetCampaignRegionResponsePairs model =
    let
        pairs =
            [ maybeEncode "region" encodeRegionDTO model.region
            ]
    in
    pairs


encodeGetCampaignResponse : GetCampaignResponse -> Json.Encode.Value
encodeGetCampaignResponse =
    encodeObject << encodeGetCampaignResponsePairs


encodeGetCampaignResponseWithTag : ( String, String ) -> GetCampaignResponse -> Json.Encode.Value
encodeGetCampaignResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignResponsePairs : GetCampaignResponse -> List EncodedField
encodeGetCampaignResponsePairs model =
    let
        pairs =
            [ maybeEncode "campaign" encodeCampaignDTO model.campaign
            ]
    in
    pairs


encodeGetCampaignSettingsResponse : GetCampaignSettingsResponse -> Json.Encode.Value
encodeGetCampaignSettingsResponse =
    encodeObject << encodeGetCampaignSettingsResponsePairs


encodeGetCampaignSettingsResponseWithTag : ( String, String ) -> GetCampaignSettingsResponse -> Json.Encode.Value
encodeGetCampaignSettingsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignSettingsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignSettingsResponsePairs : GetCampaignSettingsResponse -> List EncodedField
encodeGetCampaignSettingsResponsePairs model =
    let
        pairs =
            [ maybeEncode "settings" encodeCampaignSettingsDTO model.settings
            ]
    in
    pairs


encodeGetCampaignsResponse : GetCampaignsResponse -> Json.Encode.Value
encodeGetCampaignsResponse =
    encodeObject << encodeGetCampaignsResponsePairs


encodeGetCampaignsResponseWithTag : ( String, String ) -> GetCampaignsResponse -> Json.Encode.Value
encodeGetCampaignsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCampaignsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCampaignsResponsePairs : GetCampaignsResponse -> List EncodedField
encodeGetCampaignsResponsePairs model =
    let
        pairs =
            [ encode "campaigns" (Json.Encode.list encodeCampaignDTO) model.campaigns
            , maybeEncode "pager" encodeFlippingPagerDTO model.pager
            ]
    in
    pairs


encodeGetCategoriesMaxSaleQuantumDTO : GetCategoriesMaxSaleQuantumDTO -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumDTO =
    encodeObject << encodeGetCategoriesMaxSaleQuantumDTOPairs


encodeGetCategoriesMaxSaleQuantumDTOWithTag : ( String, String ) -> GetCategoriesMaxSaleQuantumDTO -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoriesMaxSaleQuantumDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoriesMaxSaleQuantumDTOPairs : GetCategoriesMaxSaleQuantumDTO -> List EncodedField
encodeGetCategoriesMaxSaleQuantumDTOPairs model =
    let
        pairs =
            [ encode "results" (Json.Encode.list encodeMaxSaleQuantumDTO) model.results
            , maybeEncodeNullable "errors" (Json.Encode.list encodeCategoryErrorDTO) model.errors
            ]
    in
    pairs


encodeGetCategoriesMaxSaleQuantumRequest : GetCategoriesMaxSaleQuantumRequest -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumRequest =
    encodeObject << encodeGetCategoriesMaxSaleQuantumRequestPairs


encodeGetCategoriesMaxSaleQuantumRequestWithTag : ( String, String ) -> GetCategoriesMaxSaleQuantumRequest -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoriesMaxSaleQuantumRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoriesMaxSaleQuantumRequestPairs : GetCategoriesMaxSaleQuantumRequest -> List EncodedField
encodeGetCategoriesMaxSaleQuantumRequestPairs model =
    let
        pairs =
            [ encode "marketCategoryIds" (Json.Encode.list Json.Encode.int) model.marketCategoryIds
            ]
    in
    pairs


encodeGetCategoriesMaxSaleQuantumResponse : GetCategoriesMaxSaleQuantumResponse -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumResponse =
    encodeObject << encodeGetCategoriesMaxSaleQuantumResponsePairs


encodeGetCategoriesMaxSaleQuantumResponseWithTag : ( String, String ) -> GetCategoriesMaxSaleQuantumResponse -> Json.Encode.Value
encodeGetCategoriesMaxSaleQuantumResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoriesMaxSaleQuantumResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoriesMaxSaleQuantumResponsePairs : GetCategoriesMaxSaleQuantumResponse -> List EncodedField
encodeGetCategoriesMaxSaleQuantumResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , encode "results" (Json.Encode.list encodeMaxSaleQuantumDTO) model.results
            , maybeEncodeNullable "errors" (Json.Encode.list encodeCategoryErrorDTO) model.errors
            ]
    in
    pairs


encodeGetCategoriesRequest : GetCategoriesRequest -> Json.Encode.Value
encodeGetCategoriesRequest =
    encodeObject << encodeGetCategoriesRequestPairs


encodeGetCategoriesRequestWithTag : ( String, String ) -> GetCategoriesRequest -> Json.Encode.Value
encodeGetCategoriesRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoriesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoriesRequestPairs : GetCategoriesRequest -> List EncodedField
encodeGetCategoriesRequestPairs model =
    let
        pairs =
            [ maybeEncode "language" encodeLanguageType model.language
            ]
    in
    pairs


encodeGetCategoriesResponse : GetCategoriesResponse -> Json.Encode.Value
encodeGetCategoriesResponse =
    encodeObject << encodeGetCategoriesResponsePairs


encodeGetCategoriesResponseWithTag : ( String, String ) -> GetCategoriesResponse -> Json.Encode.Value
encodeGetCategoriesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoriesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoriesResponsePairs : GetCategoriesResponse -> List EncodedField
encodeGetCategoriesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeCategoryDTO model.result
            ]
    in
    pairs


encodeGetCategoryContentParametersResponse : GetCategoryContentParametersResponse -> Json.Encode.Value
encodeGetCategoryContentParametersResponse =
    encodeObject << encodeGetCategoryContentParametersResponsePairs


encodeGetCategoryContentParametersResponseWithTag : ( String, String ) -> GetCategoryContentParametersResponse -> Json.Encode.Value
encodeGetCategoryContentParametersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetCategoryContentParametersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetCategoryContentParametersResponsePairs : GetCategoryContentParametersResponse -> List EncodedField
encodeGetCategoryContentParametersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeCategoryContentParametersDTO model.result
            ]
    in
    pairs


encodeGetChatHistoryRequest : GetChatHistoryRequest -> Json.Encode.Value
encodeGetChatHistoryRequest =
    encodeObject << encodeGetChatHistoryRequestPairs


encodeGetChatHistoryRequestWithTag : ( String, String ) -> GetChatHistoryRequest -> Json.Encode.Value
encodeGetChatHistoryRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetChatHistoryRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatHistoryRequestPairs : GetChatHistoryRequest -> List EncodedField
encodeGetChatHistoryRequestPairs model =
    let
        pairs =
            [ maybeEncode "messageIdFrom" Json.Encode.int model.messageIdFrom
            ]
    in
    pairs


encodeGetChatHistoryResponse : GetChatHistoryResponse -> Json.Encode.Value
encodeGetChatHistoryResponse =
    encodeObject << encodeGetChatHistoryResponsePairs


encodeGetChatHistoryResponseWithTag : ( String, String ) -> GetChatHistoryResponse -> Json.Encode.Value
encodeGetChatHistoryResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetChatHistoryResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatHistoryResponsePairs : GetChatHistoryResponse -> List EncodedField
encodeGetChatHistoryResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeChatMessagesResultDTO model.result
            ]
    in
    pairs


encodeGetChatInfoDTO : GetChatInfoDTO -> Json.Encode.Value
encodeGetChatInfoDTO =
    encodeObject << encodeGetChatInfoDTOPairs


encodeGetChatInfoDTOWithTag : ( String, String ) -> GetChatInfoDTO -> Json.Encode.Value
encodeGetChatInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetChatInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatInfoDTOPairs : GetChatInfoDTO -> List EncodedField
encodeGetChatInfoDTOPairs model =
    let
        pairs =
            [ encode "chatId" Json.Encode.int model.chatId
            , encode "orderId" Json.Encode.int model.orderId
            , encode "type" encodeChatType model.type_
            , encode "status" encodeChatStatusType model.status
            , encode "createdAt" Api.Time.encodeDateTime model.createdAt
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeGetChatsInfoDTO : GetChatsInfoDTO -> Json.Encode.Value
encodeGetChatsInfoDTO =
    encodeObject << encodeGetChatsInfoDTOPairs


encodeGetChatsInfoDTOWithTag : ( String, String ) -> GetChatsInfoDTO -> Json.Encode.Value
encodeGetChatsInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetChatsInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatsInfoDTOPairs : GetChatsInfoDTO -> List EncodedField
encodeGetChatsInfoDTOPairs model =
    let
        pairs =
            [ encode "chats" (Json.Encode.list encodeGetChatInfoDTO) model.chats
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGetChatsRequest : GetChatsRequest -> Json.Encode.Value
encodeGetChatsRequest =
    encodeObject << encodeGetChatsRequestPairs


encodeGetChatsRequestWithTag : ( String, String ) -> GetChatsRequest -> Json.Encode.Value
encodeGetChatsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetChatsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatsRequestPairs : GetChatsRequest -> List EncodedField
encodeGetChatsRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            , maybeEncodeNullable "types" (Json.Encode.list encodeChatType) model.types
            , maybeEncodeNullable "statuses" (Json.Encode.list encodeChatStatusType) model.statuses
            ]
    in
    pairs


encodeGetChatsResponse : GetChatsResponse -> Json.Encode.Value
encodeGetChatsResponse =
    encodeObject << encodeGetChatsResponsePairs


encodeGetChatsResponseWithTag : ( String, String ) -> GetChatsResponse -> Json.Encode.Value
encodeGetChatsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetChatsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetChatsResponsePairs : GetChatsResponse -> List EncodedField
encodeGetChatsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetChatsInfoDTO model.result
            ]
    in
    pairs


encodeGetDeliveryServicesResponse : GetDeliveryServicesResponse -> Json.Encode.Value
encodeGetDeliveryServicesResponse =
    encodeObject << encodeGetDeliveryServicesResponsePairs


encodeGetDeliveryServicesResponseWithTag : ( String, String ) -> GetDeliveryServicesResponse -> Json.Encode.Value
encodeGetDeliveryServicesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetDeliveryServicesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetDeliveryServicesResponsePairs : GetDeliveryServicesResponse -> List EncodedField
encodeGetDeliveryServicesResponsePairs model =
    let
        pairs =
            [ maybeEncode "result" encodeDeliveryServicesDTO model.result
            ]
    in
    pairs


encodeGetFeedIndexLogsResponse : GetFeedIndexLogsResponse -> Json.Encode.Value
encodeGetFeedIndexLogsResponse =
    encodeObject << encodeGetFeedIndexLogsResponsePairs


encodeGetFeedIndexLogsResponseWithTag : ( String, String ) -> GetFeedIndexLogsResponse -> Json.Encode.Value
encodeGetFeedIndexLogsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetFeedIndexLogsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetFeedIndexLogsResponsePairs : GetFeedIndexLogsResponse -> List EncodedField
encodeGetFeedIndexLogsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeFeedIndexLogsResultDTO model.result
            ]
    in
    pairs


encodeGetFeedResponse : GetFeedResponse -> Json.Encode.Value
encodeGetFeedResponse =
    encodeObject << encodeGetFeedResponsePairs


encodeGetFeedResponseWithTag : ( String, String ) -> GetFeedResponse -> Json.Encode.Value
encodeGetFeedResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetFeedResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetFeedResponsePairs : GetFeedResponse -> List EncodedField
encodeGetFeedResponsePairs model =
    let
        pairs =
            [ maybeEncode "feed" encodeFeedDTO model.feed
            ]
    in
    pairs


encodeGetFeedbackListResponse : GetFeedbackListResponse -> Json.Encode.Value
encodeGetFeedbackListResponse =
    encodeObject << encodeGetFeedbackListResponsePairs


encodeGetFeedbackListResponseWithTag : ( String, String ) -> GetFeedbackListResponse -> Json.Encode.Value
encodeGetFeedbackListResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetFeedbackListResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetFeedbackListResponsePairs : GetFeedbackListResponse -> List EncodedField
encodeGetFeedbackListResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeFeedbackListDTO model.result
            ]
    in
    pairs


encodeGetFeedsResponse : GetFeedsResponse -> Json.Encode.Value
encodeGetFeedsResponse =
    encodeObject << encodeGetFeedsResponsePairs


encodeGetFeedsResponseWithTag : ( String, String ) -> GetFeedsResponse -> Json.Encode.Value
encodeGetFeedsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetFeedsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetFeedsResponsePairs : GetFeedsResponse -> List EncodedField
encodeGetFeedsResponsePairs model =
    let
        pairs =
            [ encode "feeds" (Json.Encode.list encodeFeedDTO) model.feeds
            ]
    in
    pairs


encodeGetFulfillmentWarehousesResponse : GetFulfillmentWarehousesResponse -> Json.Encode.Value
encodeGetFulfillmentWarehousesResponse =
    encodeObject << encodeGetFulfillmentWarehousesResponsePairs


encodeGetFulfillmentWarehousesResponseWithTag : ( String, String ) -> GetFulfillmentWarehousesResponse -> Json.Encode.Value
encodeGetFulfillmentWarehousesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetFulfillmentWarehousesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetFulfillmentWarehousesResponsePairs : GetFulfillmentWarehousesResponse -> List EncodedField
encodeGetFulfillmentWarehousesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeFulfillmentWarehousesDTO model.result
            ]
    in
    pairs


encodeGetGoodsFeedbackCommentsRequest : GetGoodsFeedbackCommentsRequest -> Json.Encode.Value
encodeGetGoodsFeedbackCommentsRequest =
    encodeObject << encodeGetGoodsFeedbackCommentsRequestPairs


encodeGetGoodsFeedbackCommentsRequestWithTag : ( String, String ) -> GetGoodsFeedbackCommentsRequest -> Json.Encode.Value
encodeGetGoodsFeedbackCommentsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsFeedbackCommentsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsFeedbackCommentsRequestPairs : GetGoodsFeedbackCommentsRequest -> List EncodedField
encodeGetGoodsFeedbackCommentsRequestPairs model =
    let
        pairs =
            [ encode "feedbackId" Json.Encode.int model.feedbackId
            ]
    in
    pairs


encodeGetGoodsFeedbackCommentsResponse : GetGoodsFeedbackCommentsResponse -> Json.Encode.Value
encodeGetGoodsFeedbackCommentsResponse =
    encodeObject << encodeGetGoodsFeedbackCommentsResponsePairs


encodeGetGoodsFeedbackCommentsResponseWithTag : ( String, String ) -> GetGoodsFeedbackCommentsResponse -> Json.Encode.Value
encodeGetGoodsFeedbackCommentsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsFeedbackCommentsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsFeedbackCommentsResponsePairs : GetGoodsFeedbackCommentsResponse -> List EncodedField
encodeGetGoodsFeedbackCommentsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGoodsFeedbackCommentListDTO model.result
            ]
    in
    pairs


encodeGetGoodsFeedbackRequest : GetGoodsFeedbackRequest -> Json.Encode.Value
encodeGetGoodsFeedbackRequest =
    encodeObject << encodeGetGoodsFeedbackRequestPairs


encodeGetGoodsFeedbackRequestWithTag : ( String, String ) -> GetGoodsFeedbackRequest -> Json.Encode.Value
encodeGetGoodsFeedbackRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsFeedbackRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsFeedbackRequestPairs : GetGoodsFeedbackRequest -> List EncodedField
encodeGetGoodsFeedbackRequestPairs model =
    let
        pairs =
            [ maybeEncode "dateTimeFrom" Api.Time.encodeDateTime model.dateTimeFrom
            , maybeEncode "dateTimeTo" Api.Time.encodeDateTime model.dateTimeTo
            , maybeEncode "reactionStatus" encodeFeedbackReactionStatusType model.reactionStatus
            , maybeEncodeNullable "ratingValues" (Json.Encode.list Json.Encode.int) model.ratingValues
            , maybeEncodeNullable "modelIds" (Json.Encode.list Json.Encode.int) model.modelIds
            , maybeEncode "paid" Json.Encode.bool model.paid
            ]
    in
    pairs


encodeGetGoodsFeedbackResponse : GetGoodsFeedbackResponse -> Json.Encode.Value
encodeGetGoodsFeedbackResponse =
    encodeObject << encodeGetGoodsFeedbackResponsePairs


encodeGetGoodsFeedbackResponseWithTag : ( String, String ) -> GetGoodsFeedbackResponse -> Json.Encode.Value
encodeGetGoodsFeedbackResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsFeedbackResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsFeedbackResponsePairs : GetGoodsFeedbackResponse -> List EncodedField
encodeGetGoodsFeedbackResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGoodsFeedbackListDTO model.result
            ]
    in
    pairs


encodeGetGoodsStatsRequest : GetGoodsStatsRequest -> Json.Encode.Value
encodeGetGoodsStatsRequest =
    encodeObject << encodeGetGoodsStatsRequestPairs


encodeGetGoodsStatsRequestWithTag : ( String, String ) -> GetGoodsStatsRequest -> Json.Encode.Value
encodeGetGoodsStatsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsStatsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsStatsRequestPairs : GetGoodsStatsRequest -> List EncodedField
encodeGetGoodsStatsRequestPairs model =
    let
        pairs =
            [ encode "shopSkus" (Json.Encode.list Json.Encode.string) model.shopSkus
            ]
    in
    pairs


encodeGetGoodsStatsResponse : GetGoodsStatsResponse -> Json.Encode.Value
encodeGetGoodsStatsResponse =
    encodeObject << encodeGetGoodsStatsResponsePairs


encodeGetGoodsStatsResponseWithTag : ( String, String ) -> GetGoodsStatsResponse -> Json.Encode.Value
encodeGetGoodsStatsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetGoodsStatsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetGoodsStatsResponsePairs : GetGoodsStatsResponse -> List EncodedField
encodeGetGoodsStatsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGoodsStatsDTO model.result
            ]
    in
    pairs


encodeGetHiddenOffersResponse : GetHiddenOffersResponse -> Json.Encode.Value
encodeGetHiddenOffersResponse =
    encodeObject << encodeGetHiddenOffersResponsePairs


encodeGetHiddenOffersResponseWithTag : ( String, String ) -> GetHiddenOffersResponse -> Json.Encode.Value
encodeGetHiddenOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetHiddenOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetHiddenOffersResponsePairs : GetHiddenOffersResponse -> List EncodedField
encodeGetHiddenOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetHiddenOffersResultDTO model.result
            ]
    in
    pairs


encodeGetHiddenOffersResultDTO : GetHiddenOffersResultDTO -> Json.Encode.Value
encodeGetHiddenOffersResultDTO =
    encodeObject << encodeGetHiddenOffersResultDTOPairs


encodeGetHiddenOffersResultDTOWithTag : ( String, String ) -> GetHiddenOffersResultDTO -> Json.Encode.Value
encodeGetHiddenOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetHiddenOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetHiddenOffersResultDTOPairs : GetHiddenOffersResultDTO -> List EncodedField
encodeGetHiddenOffersResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "hiddenOffers" (Json.Encode.list encodeHiddenOfferDTO) model.hiddenOffers
            ]
    in
    pairs


encodeGetMappingDTO : GetMappingDTO -> Json.Encode.Value
encodeGetMappingDTO =
    encodeObject << encodeGetMappingDTOPairs


encodeGetMappingDTOWithTag : ( String, String ) -> GetMappingDTO -> Json.Encode.Value
encodeGetMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMappingDTOPairs : GetMappingDTO -> List EncodedField
encodeGetMappingDTOPairs model =
    let
        pairs =
            [ maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "marketSkuName" Json.Encode.string model.marketSkuName
            , maybeEncode "marketModelId" Json.Encode.int model.marketModelId
            , maybeEncode "marketModelName" Json.Encode.string model.marketModelName
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "marketCategoryName" Json.Encode.string model.marketCategoryName
            ]
    in
    pairs


encodeGetModelsOffersResponse : GetModelsOffersResponse -> Json.Encode.Value
encodeGetModelsOffersResponse =
    encodeObject << encodeGetModelsOffersResponsePairs


encodeGetModelsOffersResponseWithTag : ( String, String ) -> GetModelsOffersResponse -> Json.Encode.Value
encodeGetModelsOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetModelsOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetModelsOffersResponsePairs : GetModelsOffersResponse -> List EncodedField
encodeGetModelsOffersResponsePairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list encodeEnrichedModelDTO) model.models
            , maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "regionId" Json.Encode.int model.regionId
            ]
    in
    pairs


encodeGetModelsRequest : GetModelsRequest -> Json.Encode.Value
encodeGetModelsRequest =
    encodeObject << encodeGetModelsRequestPairs


encodeGetModelsRequestWithTag : ( String, String ) -> GetModelsRequest -> Json.Encode.Value
encodeGetModelsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetModelsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetModelsRequestPairs : GetModelsRequest -> List EncodedField
encodeGetModelsRequestPairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list Json.Encode.int) model.models
            ]
    in
    pairs


encodeGetModelsResponse : GetModelsResponse -> Json.Encode.Value
encodeGetModelsResponse =
    encodeObject << encodeGetModelsResponsePairs


encodeGetModelsResponseWithTag : ( String, String ) -> GetModelsResponse -> Json.Encode.Value
encodeGetModelsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetModelsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetModelsResponsePairs : GetModelsResponse -> List EncodedField
encodeGetModelsResponsePairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list encodeModelDTO) model.models
            , maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "regionId" Json.Encode.int model.regionId
            ]
    in
    pairs


encodeGetOfferCardsContentStatusRequest : GetOfferCardsContentStatusRequest -> Json.Encode.Value
encodeGetOfferCardsContentStatusRequest =
    encodeObject << encodeGetOfferCardsContentStatusRequestPairs


encodeGetOfferCardsContentStatusRequestWithTag : ( String, String ) -> GetOfferCardsContentStatusRequest -> Json.Encode.Value
encodeGetOfferCardsContentStatusRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferCardsContentStatusRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferCardsContentStatusRequestPairs : GetOfferCardsContentStatusRequest -> List EncodedField
encodeGetOfferCardsContentStatusRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            , maybeEncodeNullable "cardStatuses" (Json.Encode.list encodeOfferCardStatusType) model.cardStatuses
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            ]
    in
    pairs


encodeGetOfferCardsContentStatusResponse : GetOfferCardsContentStatusResponse -> Json.Encode.Value
encodeGetOfferCardsContentStatusResponse =
    encodeObject << encodeGetOfferCardsContentStatusResponsePairs


encodeGetOfferCardsContentStatusResponseWithTag : ( String, String ) -> GetOfferCardsContentStatusResponse -> Json.Encode.Value
encodeGetOfferCardsContentStatusResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferCardsContentStatusResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferCardsContentStatusResponsePairs : GetOfferCardsContentStatusResponse -> List EncodedField
encodeGetOfferCardsContentStatusResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferCardsContentStatusDTO model.result
            ]
    in
    pairs


encodeGetOfferDTO : GetOfferDTO -> Json.Encode.Value
encodeGetOfferDTO =
    encodeObject << encodeGetOfferDTOPairs


encodeGetOfferDTOWithTag : ( String, String ) -> GetOfferDTO -> Json.Encode.Value
encodeGetOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferDTOPairs : GetOfferDTO -> List EncodedField
encodeGetOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncodeNullable "videos" (Json.Encode.list Json.Encode.string) model.videos
            , maybeEncodeNullable "manuals" (Json.Encode.list encodeOfferManualDTO) model.manuals
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "customsCommodityCode" Json.Encode.string model.customsCommodityCode
            , maybeEncodeNullable "certificates" (Json.Encode.list Json.Encode.string) model.certificates
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncode "condition" encodeOfferConditionDTO model.condition
            , maybeEncode "type" encodeOfferType model.type_
            , maybeEncode "downloadable" Json.Encode.bool model.downloadable
            , maybeEncode "adult" Json.Encode.bool model.adult
            , maybeEncode "age" encodeAgeDTO model.age
            , maybeEncodeNullable "params" (Json.Encode.list encodeOfferParamDTO) model.params
            , maybeEncode "basicPrice" encodeGetPriceWithDiscountDTO model.basicPrice
            , maybeEncode "purchasePrice" encodeGetPriceDTO model.purchasePrice
            , maybeEncode "additionalExpenses" encodeGetPriceDTO model.additionalExpenses
            , maybeEncode "cofinancePrice" encodeGetPriceDTO model.cofinancePrice
            , maybeEncode "cardStatus" encodeOfferCardStatusType model.cardStatus
            , maybeEncodeNullable "campaigns" (Json.Encode.list encodeOfferCampaignStatusDTO) model.campaigns
            , maybeEncodeNullable "sellingPrograms" (Json.Encode.list encodeOfferSellingProgramDTO) model.sellingPrograms
            , maybeEncode "archived" Json.Encode.bool model.archived
            ]
    in
    pairs


encodeGetOfferMappingDTO : GetOfferMappingDTO -> Json.Encode.Value
encodeGetOfferMappingDTO =
    encodeObject << encodeGetOfferMappingDTOPairs


encodeGetOfferMappingDTOWithTag : ( String, String ) -> GetOfferMappingDTO -> Json.Encode.Value
encodeGetOfferMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferMappingDTOPairs : GetOfferMappingDTO -> List EncodedField
encodeGetOfferMappingDTOPairs model =
    let
        pairs =
            [ maybeEncode "offer" encodeGetOfferDTO model.offer
            , maybeEncode "mapping" encodeGetMappingDTO model.mapping
            ]
    in
    pairs


encodeGetOfferMappingEntriesResponse : GetOfferMappingEntriesResponse -> Json.Encode.Value
encodeGetOfferMappingEntriesResponse =
    encodeObject << encodeGetOfferMappingEntriesResponsePairs


encodeGetOfferMappingEntriesResponseWithTag : ( String, String ) -> GetOfferMappingEntriesResponse -> Json.Encode.Value
encodeGetOfferMappingEntriesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferMappingEntriesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferMappingEntriesResponsePairs : GetOfferMappingEntriesResponse -> List EncodedField
encodeGetOfferMappingEntriesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferMappingEntriesDTO model.result
            ]
    in
    pairs


encodeGetOfferMappingsRequest : GetOfferMappingsRequest -> Json.Encode.Value
encodeGetOfferMappingsRequest =
    encodeObject << encodeGetOfferMappingsRequestPairs


encodeGetOfferMappingsRequestWithTag : ( String, String ) -> GetOfferMappingsRequest -> Json.Encode.Value
encodeGetOfferMappingsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferMappingsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferMappingsRequestPairs : GetOfferMappingsRequest -> List EncodedField
encodeGetOfferMappingsRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            , maybeEncodeNullable "cardStatuses" (Json.Encode.list encodeOfferCardStatusType) model.cardStatuses
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            , maybeEncodeNullable "vendorNames" (Json.Encode.list Json.Encode.string) model.vendorNames
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            , maybeEncode "archived" Json.Encode.bool model.archived
            ]
    in
    pairs


encodeGetOfferMappingsResponse : GetOfferMappingsResponse -> Json.Encode.Value
encodeGetOfferMappingsResponse =
    encodeObject << encodeGetOfferMappingsResponsePairs


encodeGetOfferMappingsResponseWithTag : ( String, String ) -> GetOfferMappingsResponse -> Json.Encode.Value
encodeGetOfferMappingsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferMappingsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferMappingsResponsePairs : GetOfferMappingsResponse -> List EncodedField
encodeGetOfferMappingsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetOfferMappingsResultDTO model.result
            ]
    in
    pairs


encodeGetOfferMappingsResultDTO : GetOfferMappingsResultDTO -> Json.Encode.Value
encodeGetOfferMappingsResultDTO =
    encodeObject << encodeGetOfferMappingsResultDTOPairs


encodeGetOfferMappingsResultDTOWithTag : ( String, String ) -> GetOfferMappingsResultDTO -> Json.Encode.Value
encodeGetOfferMappingsResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferMappingsResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferMappingsResultDTOPairs : GetOfferMappingsResultDTO -> List EncodedField
encodeGetOfferMappingsResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "offerMappings" (Json.Encode.list encodeGetOfferMappingDTO) model.offerMappings
            ]
    in
    pairs


encodeGetOfferRecommendationsRequest : GetOfferRecommendationsRequest -> Json.Encode.Value
encodeGetOfferRecommendationsRequest =
    encodeObject << encodeGetOfferRecommendationsRequestPairs


encodeGetOfferRecommendationsRequestWithTag : ( String, String ) -> GetOfferRecommendationsRequest -> Json.Encode.Value
encodeGetOfferRecommendationsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferRecommendationsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferRecommendationsRequestPairs : GetOfferRecommendationsRequest -> List EncodedField
encodeGetOfferRecommendationsRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            , maybeEncode "cofinancePriceFilter" encodeFieldStateType model.cofinancePriceFilter
            , maybeEncode "recommendedCofinancePriceFilter" encodeFieldStateType model.recommendedCofinancePriceFilter
            , maybeEncode "competitivenessFilter" encodePriceCompetitivenessType model.competitivenessFilter
            ]
    in
    pairs


encodeGetOfferRecommendationsResponse : GetOfferRecommendationsResponse -> Json.Encode.Value
encodeGetOfferRecommendationsResponse =
    encodeObject << encodeGetOfferRecommendationsResponsePairs


encodeGetOfferRecommendationsResponseWithTag : ( String, String ) -> GetOfferRecommendationsResponse -> Json.Encode.Value
encodeGetOfferRecommendationsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOfferRecommendationsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOfferRecommendationsResponsePairs : GetOfferRecommendationsResponse -> List EncodedField
encodeGetOfferRecommendationsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferRecommendationsResultDTO model.result
            ]
    in
    pairs


encodeGetOffersResponse : GetOffersResponse -> Json.Encode.Value
encodeGetOffersResponse =
    encodeObject << encodeGetOffersResponsePairs


encodeGetOffersResponseWithTag : ( String, String ) -> GetOffersResponse -> Json.Encode.Value
encodeGetOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOffersResponsePairs : GetOffersResponse -> List EncodedField
encodeGetOffersResponsePairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferDTO) model.offers
            , maybeEncode "pager" encodeFlippingPagerDTO model.pager
            ]
    in
    pairs


encodeGetOrderBuyerInfoResponse : GetOrderBuyerInfoResponse -> Json.Encode.Value
encodeGetOrderBuyerInfoResponse =
    encodeObject << encodeGetOrderBuyerInfoResponsePairs


encodeGetOrderBuyerInfoResponseWithTag : ( String, String ) -> GetOrderBuyerInfoResponse -> Json.Encode.Value
encodeGetOrderBuyerInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOrderBuyerInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrderBuyerInfoResponsePairs : GetOrderBuyerInfoResponse -> List EncodedField
encodeGetOrderBuyerInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderBuyerInfoDTO model.result
            ]
    in
    pairs


encodeGetOrderLabelsDataResponse : GetOrderLabelsDataResponse -> Json.Encode.Value
encodeGetOrderLabelsDataResponse =
    encodeObject << encodeGetOrderLabelsDataResponsePairs


encodeGetOrderLabelsDataResponseWithTag : ( String, String ) -> GetOrderLabelsDataResponse -> Json.Encode.Value
encodeGetOrderLabelsDataResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOrderLabelsDataResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrderLabelsDataResponsePairs : GetOrderLabelsDataResponse -> List EncodedField
encodeGetOrderLabelsDataResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderLabelDTO model.result
            ]
    in
    pairs


encodeGetOrderResponse : GetOrderResponse -> Json.Encode.Value
encodeGetOrderResponse =
    encodeObject << encodeGetOrderResponsePairs


encodeGetOrderResponseWithTag : ( String, String ) -> GetOrderResponse -> Json.Encode.Value
encodeGetOrderResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOrderResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrderResponsePairs : GetOrderResponse -> List EncodedField
encodeGetOrderResponsePairs model =
    let
        pairs =
            [ maybeEncode "order" encodeOrderDTO model.order
            ]
    in
    pairs


encodeGetOrdersResponse : GetOrdersResponse -> Json.Encode.Value
encodeGetOrdersResponse =
    encodeObject << encodeGetOrdersResponsePairs


encodeGetOrdersResponseWithTag : ( String, String ) -> GetOrdersResponse -> Json.Encode.Value
encodeGetOrdersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOrdersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrdersResponsePairs : GetOrdersResponse -> List EncodedField
encodeGetOrdersResponsePairs model =
    let
        pairs =
            [ maybeEncode "pager" encodeFlippingPagerDTO model.pager
            , encode "orders" (Json.Encode.list encodeOrderDTO) model.orders
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGetOrdersStatsRequest : GetOrdersStatsRequest -> Json.Encode.Value
encodeGetOrdersStatsRequest =
    encodeObject << encodeGetOrdersStatsRequestPairs


encodeGetOrdersStatsRequestWithTag : ( String, String ) -> GetOrdersStatsRequest -> Json.Encode.Value
encodeGetOrdersStatsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetOrdersStatsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrdersStatsRequestPairs : GetOrdersStatsRequest -> List EncodedField
encodeGetOrdersStatsRequestPairs model =
    let
        pairs =
            [ maybeEncode "dateFrom" Api.Time.encodeDate model.dateFrom
            , maybeEncode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncode "updateFrom" Api.Time.encodeDate model.updateFrom
            , maybeEncode "updateTo" Api.Time.encodeDate model.updateTo
            , maybeEncodeNullable "orders" (Json.Encode.list Json.Encode.int) model.orders
            , maybeEncodeNullable "statuses" (Json.Encode.list encodeOrderStatsStatusType) model.statuses
            , maybeEncode "hasCis" Json.Encode.bool model.hasCis
            ]
    in
    pairs


encodeGetOrdersStatsResponse : GetOrdersStatsResponse -> Json.Encode.Value
encodeGetOrdersStatsResponse =
    encodeObject << encodeGetOrdersStatsResponsePairs


encodeGetOrdersStatsResponseWithTag : ( String, String ) -> GetOrdersStatsResponse -> Json.Encode.Value
encodeGetOrdersStatsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOrdersStatsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOrdersStatsResponsePairs : GetOrdersStatsResponse -> List EncodedField
encodeGetOrdersStatsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrdersStatsDTO model.result
            ]
    in
    pairs


encodeGetOutletLicensesResponse : GetOutletLicensesResponse -> Json.Encode.Value
encodeGetOutletLicensesResponse =
    encodeObject << encodeGetOutletLicensesResponsePairs


encodeGetOutletLicensesResponseWithTag : ( String, String ) -> GetOutletLicensesResponse -> Json.Encode.Value
encodeGetOutletLicensesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOutletLicensesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOutletLicensesResponsePairs : GetOutletLicensesResponse -> List EncodedField
encodeGetOutletLicensesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOutletLicensesResponseDTO model.result
            ]
    in
    pairs


encodeGetOutletResponse : GetOutletResponse -> Json.Encode.Value
encodeGetOutletResponse =
    encodeObject << encodeGetOutletResponsePairs


encodeGetOutletResponseWithTag : ( String, String ) -> GetOutletResponse -> Json.Encode.Value
encodeGetOutletResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOutletResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOutletResponsePairs : GetOutletResponse -> List EncodedField
encodeGetOutletResponsePairs model =
    let
        pairs =
            [ maybeEncode "outlet" encodeFullOutletDTO model.outlet
            ]
    in
    pairs


encodeGetOutletsResponse : GetOutletsResponse -> Json.Encode.Value
encodeGetOutletsResponse =
    encodeObject << encodeGetOutletsResponsePairs


encodeGetOutletsResponseWithTag : ( String, String ) -> GetOutletsResponse -> Json.Encode.Value
encodeGetOutletsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetOutletsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetOutletsResponsePairs : GetOutletsResponse -> List EncodedField
encodeGetOutletsResponsePairs model =
    let
        pairs =
            [ encode "outlets" (Json.Encode.list encodeFullOutletDTO) model.outlets
            , maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , maybeEncode "pager" encodeFlippingPagerDTO model.pager
            ]
    in
    pairs


encodeGetPriceDTO : GetPriceDTO -> Json.Encode.Value
encodeGetPriceDTO =
    encodeObject << encodeGetPriceDTOPairs


encodeGetPriceDTOWithTag : ( String, String ) -> GetPriceDTO -> Json.Encode.Value
encodeGetPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPriceDTOPairs : GetPriceDTO -> List EncodedField
encodeGetPriceDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "currencyId" encodeCurrencyType model.currencyId
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeGetPriceWithDiscountDTO : GetPriceWithDiscountDTO -> Json.Encode.Value
encodeGetPriceWithDiscountDTO =
    encodeObject << encodeGetPriceWithDiscountDTOPairs


encodeGetPriceWithDiscountDTOWithTag : ( String, String ) -> GetPriceWithDiscountDTO -> Json.Encode.Value
encodeGetPriceWithDiscountDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPriceWithDiscountDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPriceWithDiscountDTOPairs : GetPriceWithDiscountDTO -> List EncodedField
encodeGetPriceWithDiscountDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "currencyId" encodeCurrencyType model.currencyId
            , maybeEncode "discountBase" Json.Encode.float model.discountBase
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeGetPriceWithVatDTO : GetPriceWithVatDTO -> Json.Encode.Value
encodeGetPriceWithVatDTO =
    encodeObject << encodeGetPriceWithVatDTOPairs


encodeGetPriceWithVatDTOWithTag : ( String, String ) -> GetPriceWithVatDTO -> Json.Encode.Value
encodeGetPriceWithVatDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPriceWithVatDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPriceWithVatDTOPairs : GetPriceWithVatDTO -> List EncodedField
encodeGetPriceWithVatDTOPairs model =
    let
        pairs =
            [ maybeEncode "value" Json.Encode.float model.value
            , maybeEncode "discountBase" Json.Encode.float model.discountBase
            , maybeEncode "currencyId" encodeCurrencyType model.currencyId
            , maybeEncode "vat" Json.Encode.int model.vat
            , encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeGetPricesByOfferIdsRequest : GetPricesByOfferIdsRequest -> Json.Encode.Value
encodeGetPricesByOfferIdsRequest =
    encodeObject << encodeGetPricesByOfferIdsRequestPairs


encodeGetPricesByOfferIdsRequestWithTag : ( String, String ) -> GetPricesByOfferIdsRequest -> Json.Encode.Value
encodeGetPricesByOfferIdsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetPricesByOfferIdsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPricesByOfferIdsRequestPairs : GetPricesByOfferIdsRequest -> List EncodedField
encodeGetPricesByOfferIdsRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeGetPricesByOfferIdsResponse : GetPricesByOfferIdsResponse -> Json.Encode.Value
encodeGetPricesByOfferIdsResponse =
    encodeObject << encodeGetPricesByOfferIdsResponsePairs


encodeGetPricesByOfferIdsResponseWithTag : ( String, String ) -> GetPricesByOfferIdsResponse -> Json.Encode.Value
encodeGetPricesByOfferIdsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetPricesByOfferIdsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPricesByOfferIdsResponsePairs : GetPricesByOfferIdsResponse -> List EncodedField
encodeGetPricesByOfferIdsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferPriceByOfferIdsListResponseDTO model.result
            ]
    in
    pairs


encodeGetPricesResponse : GetPricesResponse -> Json.Encode.Value
encodeGetPricesResponse =
    encodeObject << encodeGetPricesResponsePairs


encodeGetPricesResponseWithTag : ( String, String ) -> GetPricesResponse -> Json.Encode.Value
encodeGetPricesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetPricesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPricesResponsePairs : GetPricesResponse -> List EncodedField
encodeGetPricesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferPriceListResponseDTO model.result
            ]
    in
    pairs


encodeGetPromoAssortmentInfoDTO : GetPromoAssortmentInfoDTO -> Json.Encode.Value
encodeGetPromoAssortmentInfoDTO =
    encodeObject << encodeGetPromoAssortmentInfoDTOPairs


encodeGetPromoAssortmentInfoDTOWithTag : ( String, String ) -> GetPromoAssortmentInfoDTO -> Json.Encode.Value
encodeGetPromoAssortmentInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoAssortmentInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoAssortmentInfoDTOPairs : GetPromoAssortmentInfoDTO -> List EncodedField
encodeGetPromoAssortmentInfoDTOPairs model =
    let
        pairs =
            [ encode "activeOffers" Json.Encode.int model.activeOffers
            , maybeEncode "potentialOffers" Json.Encode.int model.potentialOffers
            , maybeEncode "processing" Json.Encode.bool model.processing
            ]
    in
    pairs


encodeGetPromoBestsellerInfoDTO : GetPromoBestsellerInfoDTO -> Json.Encode.Value
encodeGetPromoBestsellerInfoDTO =
    encodeObject << encodeGetPromoBestsellerInfoDTOPairs


encodeGetPromoBestsellerInfoDTOWithTag : ( String, String ) -> GetPromoBestsellerInfoDTO -> Json.Encode.Value
encodeGetPromoBestsellerInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoBestsellerInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoBestsellerInfoDTOPairs : GetPromoBestsellerInfoDTO -> List EncodedField
encodeGetPromoBestsellerInfoDTOPairs model =
    let
        pairs =
            [ encode "bestseller" Json.Encode.bool model.bestseller
            , maybeEncode "entryDeadline" Api.Time.encodeDateTime model.entryDeadline
            ]
    in
    pairs


encodeGetPromoConstraintsDTO : GetPromoConstraintsDTO -> Json.Encode.Value
encodeGetPromoConstraintsDTO =
    encodeObject << encodeGetPromoConstraintsDTOPairs


encodeGetPromoConstraintsDTOWithTag : ( String, String ) -> GetPromoConstraintsDTO -> Json.Encode.Value
encodeGetPromoConstraintsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoConstraintsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoConstraintsDTOPairs : GetPromoConstraintsDTO -> List EncodedField
encodeGetPromoConstraintsDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "warehouseIds" (Json.Encode.list Json.Encode.int) model.warehouseIds
            ]
    in
    pairs


encodeGetPromoDTO : GetPromoDTO -> Json.Encode.Value
encodeGetPromoDTO =
    encodeObject << encodeGetPromoDTOPairs


encodeGetPromoDTOWithTag : ( String, String ) -> GetPromoDTO -> Json.Encode.Value
encodeGetPromoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoDTOPairs : GetPromoDTO -> List EncodedField
encodeGetPromoDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.string model.id
            , encode "name" Json.Encode.string model.name
            , encode "period" encodePromoPeriodDTO model.period
            , encode "participating" Json.Encode.bool model.participating
            , encode "assortmentInfo" encodeGetPromoAssortmentInfoDTO model.assortmentInfo
            , encode "mechanicsInfo" encodeGetPromoMechanicsInfoDTO model.mechanicsInfo
            , encode "bestsellerInfo" encodeGetPromoBestsellerInfoDTO model.bestsellerInfo
            , maybeEncodeNullable "channels" (Json.Encode.list encodeChannelType) model.channels
            , maybeEncode "constraints" encodeGetPromoConstraintsDTO model.constraints
            ]
    in
    pairs


encodeGetPromoMechanicsInfoDTO : GetPromoMechanicsInfoDTO -> Json.Encode.Value
encodeGetPromoMechanicsInfoDTO =
    encodeObject << encodeGetPromoMechanicsInfoDTOPairs


encodeGetPromoMechanicsInfoDTOWithTag : ( String, String ) -> GetPromoMechanicsInfoDTO -> Json.Encode.Value
encodeGetPromoMechanicsInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoMechanicsInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoMechanicsInfoDTOPairs : GetPromoMechanicsInfoDTO -> List EncodedField
encodeGetPromoMechanicsInfoDTOPairs model =
    let
        pairs =
            [ encode "type" encodeMechanicsType model.type_
            , maybeEncode "promocodeInfo" encodeGetPromoPromocodeInfoDTO model.promocodeInfo
            ]
    in
    pairs


encodeGetPromoOfferDTO : GetPromoOfferDTO -> Json.Encode.Value
encodeGetPromoOfferDTO =
    encodeObject << encodeGetPromoOfferDTOPairs


encodeGetPromoOfferDTOWithTag : ( String, String ) -> GetPromoOfferDTO -> Json.Encode.Value
encodeGetPromoOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoOfferDTOPairs : GetPromoOfferDTO -> List EncodedField
encodeGetPromoOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "status" encodePromoOfferParticipationStatusType model.status
            , encode "params" encodePromoOfferParamsDTO model.params
            , maybeEncode "autoParticipatingDetails" encodePromoOfferAutoParticipatingDetailsDTO model.autoParticipatingDetails
            ]
    in
    pairs


encodeGetPromoOffersRequest : GetPromoOffersRequest -> Json.Encode.Value
encodeGetPromoOffersRequest =
    encodeObject << encodeGetPromoOffersRequestPairs


encodeGetPromoOffersRequestWithTag : ( String, String ) -> GetPromoOffersRequest -> Json.Encode.Value
encodeGetPromoOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoOffersRequestPairs : GetPromoOffersRequest -> List EncodedField
encodeGetPromoOffersRequestPairs model =
    let
        pairs =
            [ encode "promoId" Json.Encode.string model.promoId
            , maybeEncode "statusType" encodePromoOfferParticipationStatusFilterType model.statusType
            ]
    in
    pairs


encodeGetPromoOffersResponse : GetPromoOffersResponse -> Json.Encode.Value
encodeGetPromoOffersResponse =
    encodeObject << encodeGetPromoOffersResponsePairs


encodeGetPromoOffersResponseWithTag : ( String, String ) -> GetPromoOffersResponse -> Json.Encode.Value
encodeGetPromoOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoOffersResponsePairs : GetPromoOffersResponse -> List EncodedField
encodeGetPromoOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetPromoOffersResultDTO model.result
            ]
    in
    pairs


encodeGetPromoOffersResultDTO : GetPromoOffersResultDTO -> Json.Encode.Value
encodeGetPromoOffersResultDTO =
    encodeObject << encodeGetPromoOffersResultDTOPairs


encodeGetPromoOffersResultDTOWithTag : ( String, String ) -> GetPromoOffersResultDTO -> Json.Encode.Value
encodeGetPromoOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoOffersResultDTOPairs : GetPromoOffersResultDTO -> List EncodedField
encodeGetPromoOffersResultDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeGetPromoOfferDTO) model.offers
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGetPromoPromocodeInfoDTO : GetPromoPromocodeInfoDTO -> Json.Encode.Value
encodeGetPromoPromocodeInfoDTO =
    encodeObject << encodeGetPromoPromocodeInfoDTOPairs


encodeGetPromoPromocodeInfoDTOWithTag : ( String, String ) -> GetPromoPromocodeInfoDTO -> Json.Encode.Value
encodeGetPromoPromocodeInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromoPromocodeInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromoPromocodeInfoDTOPairs : GetPromoPromocodeInfoDTO -> List EncodedField
encodeGetPromoPromocodeInfoDTOPairs model =
    let
        pairs =
            [ encode "promocode" Json.Encode.string model.promocode
            , encode "discount" Json.Encode.int model.discount
            ]
    in
    pairs


encodeGetPromosRequest : GetPromosRequest -> Json.Encode.Value
encodeGetPromosRequest =
    encodeObject << encodeGetPromosRequestPairs


encodeGetPromosRequestWithTag : ( String, String ) -> GetPromosRequest -> Json.Encode.Value
encodeGetPromosRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetPromosRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromosRequestPairs : GetPromosRequest -> List EncodedField
encodeGetPromosRequestPairs model =
    let
        pairs =
            [ maybeEncode "participation" encodePromoParticipationType model.participation
            , maybeEncode "mechanics" encodeMechanicsType model.mechanics
            ]
    in
    pairs


encodeGetPromosResponse : GetPromosResponse -> Json.Encode.Value
encodeGetPromosResponse =
    encodeObject << encodeGetPromosResponsePairs


encodeGetPromosResponseWithTag : ( String, String ) -> GetPromosResponse -> Json.Encode.Value
encodeGetPromosResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetPromosResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromosResponsePairs : GetPromosResponse -> List EncodedField
encodeGetPromosResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetPromosResultDTO model.result
            ]
    in
    pairs


encodeGetPromosResultDTO : GetPromosResultDTO -> Json.Encode.Value
encodeGetPromosResultDTO =
    encodeObject << encodeGetPromosResultDTOPairs


encodeGetPromosResultDTOWithTag : ( String, String ) -> GetPromosResultDTO -> Json.Encode.Value
encodeGetPromosResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetPromosResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetPromosResultDTOPairs : GetPromosResultDTO -> List EncodedField
encodeGetPromosResultDTOPairs model =
    let
        pairs =
            [ encode "promos" (Json.Encode.list encodeGetPromoDTO) model.promos
            ]
    in
    pairs


encodeGetQualityRatingDetailsResponse : GetQualityRatingDetailsResponse -> Json.Encode.Value
encodeGetQualityRatingDetailsResponse =
    encodeObject << encodeGetQualityRatingDetailsResponsePairs


encodeGetQualityRatingDetailsResponseWithTag : ( String, String ) -> GetQualityRatingDetailsResponse -> Json.Encode.Value
encodeGetQualityRatingDetailsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetQualityRatingDetailsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQualityRatingDetailsResponsePairs : GetQualityRatingDetailsResponse -> List EncodedField
encodeGetQualityRatingDetailsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeQualityRatingDetailsDTO model.result
            ]
    in
    pairs


encodeGetQualityRatingRequest : GetQualityRatingRequest -> Json.Encode.Value
encodeGetQualityRatingRequest =
    encodeObject << encodeGetQualityRatingRequestPairs


encodeGetQualityRatingRequestWithTag : ( String, String ) -> GetQualityRatingRequest -> Json.Encode.Value
encodeGetQualityRatingRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetQualityRatingRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQualityRatingRequestPairs : GetQualityRatingRequest -> List EncodedField
encodeGetQualityRatingRequestPairs model =
    let
        pairs =
            [ maybeEncode "dateFrom" Api.Time.encodeDate model.dateFrom
            , maybeEncode "dateTo" Api.Time.encodeDate model.dateTo
            , encode "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            ]
    in
    pairs


encodeGetQualityRatingResponse : GetQualityRatingResponse -> Json.Encode.Value
encodeGetQualityRatingResponse =
    encodeObject << encodeGetQualityRatingResponsePairs


encodeGetQualityRatingResponseWithTag : ( String, String ) -> GetQualityRatingResponse -> Json.Encode.Value
encodeGetQualityRatingResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetQualityRatingResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQualityRatingResponsePairs : GetQualityRatingResponse -> List EncodedField
encodeGetQualityRatingResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeCampaignsQualityRatingDTO model.result
            ]
    in
    pairs


encodeGetQuarantineOffersRequest : GetQuarantineOffersRequest -> Json.Encode.Value
encodeGetQuarantineOffersRequest =
    encodeObject << encodeGetQuarantineOffersRequestPairs


encodeGetQuarantineOffersRequestWithTag : ( String, String ) -> GetQuarantineOffersRequest -> Json.Encode.Value
encodeGetQuarantineOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetQuarantineOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQuarantineOffersRequestPairs : GetQuarantineOffersRequest -> List EncodedField
encodeGetQuarantineOffersRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            , maybeEncodeNullable "cardStatuses" (Json.Encode.list encodeOfferCardStatusType) model.cardStatuses
            , maybeEncodeNullable "categoryIds" (Json.Encode.list Json.Encode.int) model.categoryIds
            , maybeEncodeNullable "vendorNames" (Json.Encode.list Json.Encode.string) model.vendorNames
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            ]
    in
    pairs


encodeGetQuarantineOffersResponse : GetQuarantineOffersResponse -> Json.Encode.Value
encodeGetQuarantineOffersResponse =
    encodeObject << encodeGetQuarantineOffersResponsePairs


encodeGetQuarantineOffersResponseWithTag : ( String, String ) -> GetQuarantineOffersResponse -> Json.Encode.Value
encodeGetQuarantineOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetQuarantineOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQuarantineOffersResponsePairs : GetQuarantineOffersResponse -> List EncodedField
encodeGetQuarantineOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetQuarantineOffersResultDTO model.result
            ]
    in
    pairs


encodeGetQuarantineOffersResultDTO : GetQuarantineOffersResultDTO -> Json.Encode.Value
encodeGetQuarantineOffersResultDTO =
    encodeObject << encodeGetQuarantineOffersResultDTOPairs


encodeGetQuarantineOffersResultDTOWithTag : ( String, String ) -> GetQuarantineOffersResultDTO -> Json.Encode.Value
encodeGetQuarantineOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetQuarantineOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetQuarantineOffersResultDTOPairs : GetQuarantineOffersResultDTO -> List EncodedField
encodeGetQuarantineOffersResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "offers" (Json.Encode.list encodeQuarantineOfferDTO) model.offers
            ]
    in
    pairs


encodeGetRegionWithChildrenResponse : GetRegionWithChildrenResponse -> Json.Encode.Value
encodeGetRegionWithChildrenResponse =
    encodeObject << encodeGetRegionWithChildrenResponsePairs


encodeGetRegionWithChildrenResponseWithTag : ( String, String ) -> GetRegionWithChildrenResponse -> Json.Encode.Value
encodeGetRegionWithChildrenResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRegionWithChildrenResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRegionWithChildrenResponsePairs : GetRegionWithChildrenResponse -> List EncodedField
encodeGetRegionWithChildrenResponsePairs model =
    let
        pairs =
            [ maybeEncode "pager" encodeFlippingPagerDTO model.pager
            , maybeEncode "regions" encodeRegionDTO model.regions
            ]
    in
    pairs


encodeGetRegionsResponse : GetRegionsResponse -> Json.Encode.Value
encodeGetRegionsResponse =
    encodeObject << encodeGetRegionsResponsePairs


encodeGetRegionsResponseWithTag : ( String, String ) -> GetRegionsResponse -> Json.Encode.Value
encodeGetRegionsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetRegionsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetRegionsResponsePairs : GetRegionsResponse -> List EncodedField
encodeGetRegionsResponsePairs model =
    let
        pairs =
            [ encode "regions" (Json.Encode.list encodeRegionDTO) model.regions
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGetReportInfoResponse : GetReportInfoResponse -> Json.Encode.Value
encodeGetReportInfoResponse =
    encodeObject << encodeGetReportInfoResponsePairs


encodeGetReportInfoResponseWithTag : ( String, String ) -> GetReportInfoResponse -> Json.Encode.Value
encodeGetReportInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetReportInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetReportInfoResponsePairs : GetReportInfoResponse -> List EncodedField
encodeGetReportInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeReportInfoDTO model.result
            ]
    in
    pairs


encodeGetReturnResponse : GetReturnResponse -> Json.Encode.Value
encodeGetReturnResponse =
    encodeObject << encodeGetReturnResponsePairs


encodeGetReturnResponseWithTag : ( String, String ) -> GetReturnResponse -> Json.Encode.Value
encodeGetReturnResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetReturnResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetReturnResponsePairs : GetReturnResponse -> List EncodedField
encodeGetReturnResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeReturnDTO model.result
            ]
    in
    pairs


encodeGetReturnsResponse : GetReturnsResponse -> Json.Encode.Value
encodeGetReturnsResponse =
    encodeObject << encodeGetReturnsResponsePairs


encodeGetReturnsResponseWithTag : ( String, String ) -> GetReturnsResponse -> Json.Encode.Value
encodeGetReturnsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetReturnsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetReturnsResponsePairs : GetReturnsResponse -> List EncodedField
encodeGetReturnsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodePagedReturnsDTO model.result
            ]
    in
    pairs


encodeGetShipmentOrdersInfoResponse : GetShipmentOrdersInfoResponse -> Json.Encode.Value
encodeGetShipmentOrdersInfoResponse =
    encodeObject << encodeGetShipmentOrdersInfoResponsePairs


encodeGetShipmentOrdersInfoResponseWithTag : ( String, String ) -> GetShipmentOrdersInfoResponse -> Json.Encode.Value
encodeGetShipmentOrdersInfoResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetShipmentOrdersInfoResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShipmentOrdersInfoResponsePairs : GetShipmentOrdersInfoResponse -> List EncodedField
encodeGetShipmentOrdersInfoResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrdersShipmentInfoDTO model.result
            ]
    in
    pairs


encodeGetShipmentResponse : GetShipmentResponse -> Json.Encode.Value
encodeGetShipmentResponse =
    encodeObject << encodeGetShipmentResponsePairs


encodeGetShipmentResponseWithTag : ( String, String ) -> GetShipmentResponse -> Json.Encode.Value
encodeGetShipmentResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetShipmentResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetShipmentResponsePairs : GetShipmentResponse -> List EncodedField
encodeGetShipmentResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeShipmentDTO model.result
            ]
    in
    pairs


encodeGetSuggestedOfferMappingEntriesRequest : GetSuggestedOfferMappingEntriesRequest -> Json.Encode.Value
encodeGetSuggestedOfferMappingEntriesRequest =
    encodeObject << encodeGetSuggestedOfferMappingEntriesRequestPairs


encodeGetSuggestedOfferMappingEntriesRequestWithTag : ( String, String ) -> GetSuggestedOfferMappingEntriesRequest -> Json.Encode.Value
encodeGetSuggestedOfferMappingEntriesRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetSuggestedOfferMappingEntriesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSuggestedOfferMappingEntriesRequestPairs : GetSuggestedOfferMappingEntriesRequest -> List EncodedField
encodeGetSuggestedOfferMappingEntriesRequestPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeMappingsOfferDTO) model.offers
            ]
    in
    pairs


encodeGetSuggestedOfferMappingEntriesResponse : GetSuggestedOfferMappingEntriesResponse -> Json.Encode.Value
encodeGetSuggestedOfferMappingEntriesResponse =
    encodeObject << encodeGetSuggestedOfferMappingEntriesResponsePairs


encodeGetSuggestedOfferMappingEntriesResponseWithTag : ( String, String ) -> GetSuggestedOfferMappingEntriesResponse -> Json.Encode.Value
encodeGetSuggestedOfferMappingEntriesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetSuggestedOfferMappingEntriesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSuggestedOfferMappingEntriesResponsePairs : GetSuggestedOfferMappingEntriesResponse -> List EncodedField
encodeGetSuggestedOfferMappingEntriesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOfferMappingSuggestionsListDTO model.result
            ]
    in
    pairs


encodeGetSuggestedOfferMappingsRequest : GetSuggestedOfferMappingsRequest -> Json.Encode.Value
encodeGetSuggestedOfferMappingsRequest =
    encodeObject << encodeGetSuggestedOfferMappingsRequestPairs


encodeGetSuggestedOfferMappingsRequestWithTag : ( String, String ) -> GetSuggestedOfferMappingsRequest -> Json.Encode.Value
encodeGetSuggestedOfferMappingsRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetSuggestedOfferMappingsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSuggestedOfferMappingsRequestPairs : GetSuggestedOfferMappingsRequest -> List EncodedField
encodeGetSuggestedOfferMappingsRequestPairs model =
    let
        pairs =
            [ maybeEncodeNullable "offers" (Json.Encode.list encodeSuggestedOfferDTO) model.offers
            ]
    in
    pairs


encodeGetSuggestedOfferMappingsResponse : GetSuggestedOfferMappingsResponse -> Json.Encode.Value
encodeGetSuggestedOfferMappingsResponse =
    encodeObject << encodeGetSuggestedOfferMappingsResponsePairs


encodeGetSuggestedOfferMappingsResponseWithTag : ( String, String ) -> GetSuggestedOfferMappingsResponse -> Json.Encode.Value
encodeGetSuggestedOfferMappingsResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetSuggestedOfferMappingsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSuggestedOfferMappingsResponsePairs : GetSuggestedOfferMappingsResponse -> List EncodedField
encodeGetSuggestedOfferMappingsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetSuggestedOfferMappingsResultDTO model.result
            ]
    in
    pairs


encodeGetSuggestedOfferMappingsResultDTO : GetSuggestedOfferMappingsResultDTO -> Json.Encode.Value
encodeGetSuggestedOfferMappingsResultDTO =
    encodeObject << encodeGetSuggestedOfferMappingsResultDTOPairs


encodeGetSuggestedOfferMappingsResultDTOWithTag : ( String, String ) -> GetSuggestedOfferMappingsResultDTO -> Json.Encode.Value
encodeGetSuggestedOfferMappingsResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetSuggestedOfferMappingsResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetSuggestedOfferMappingsResultDTOPairs : GetSuggestedOfferMappingsResultDTO -> List EncodedField
encodeGetSuggestedOfferMappingsResultDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeSuggestedOfferMappingDTO) model.offers
            ]
    in
    pairs


encodeGetWarehouseStocksDTO : GetWarehouseStocksDTO -> Json.Encode.Value
encodeGetWarehouseStocksDTO =
    encodeObject << encodeGetWarehouseStocksDTOPairs


encodeGetWarehouseStocksDTOWithTag : ( String, String ) -> GetWarehouseStocksDTO -> Json.Encode.Value
encodeGetWarehouseStocksDTOWithTag (tagField, tag) model =
    encodeObject (encodeGetWarehouseStocksDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWarehouseStocksDTOPairs : GetWarehouseStocksDTO -> List EncodedField
encodeGetWarehouseStocksDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "warehouses" (Json.Encode.list encodeWarehouseOffersDTO) model.warehouses
            ]
    in
    pairs


encodeGetWarehouseStocksRequest : GetWarehouseStocksRequest -> Json.Encode.Value
encodeGetWarehouseStocksRequest =
    encodeObject << encodeGetWarehouseStocksRequestPairs


encodeGetWarehouseStocksRequestWithTag : ( String, String ) -> GetWarehouseStocksRequest -> Json.Encode.Value
encodeGetWarehouseStocksRequestWithTag (tagField, tag) model =
    encodeObject (encodeGetWarehouseStocksRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWarehouseStocksRequestPairs : GetWarehouseStocksRequest -> List EncodedField
encodeGetWarehouseStocksRequestPairs model =
    let
        pairs =
            [ maybeEncode "withTurnover" Json.Encode.bool model.withTurnover
            , maybeEncode "archived" Json.Encode.bool model.archived
            , maybeEncodeNullable "offerIds" (Json.Encode.list Json.Encode.string) model.offerIds
            ]
    in
    pairs


encodeGetWarehouseStocksResponse : GetWarehouseStocksResponse -> Json.Encode.Value
encodeGetWarehouseStocksResponse =
    encodeObject << encodeGetWarehouseStocksResponsePairs


encodeGetWarehouseStocksResponseWithTag : ( String, String ) -> GetWarehouseStocksResponse -> Json.Encode.Value
encodeGetWarehouseStocksResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetWarehouseStocksResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWarehouseStocksResponsePairs : GetWarehouseStocksResponse -> List EncodedField
encodeGetWarehouseStocksResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGetWarehouseStocksDTO model.result
            ]
    in
    pairs


encodeGetWarehousesResponse : GetWarehousesResponse -> Json.Encode.Value
encodeGetWarehousesResponse =
    encodeObject << encodeGetWarehousesResponsePairs


encodeGetWarehousesResponseWithTag : ( String, String ) -> GetWarehousesResponse -> Json.Encode.Value
encodeGetWarehousesResponseWithTag (tagField, tag) model =
    encodeObject (encodeGetWarehousesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetWarehousesResponsePairs : GetWarehousesResponse -> List EncodedField
encodeGetWarehousesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeWarehousesDTO model.result
            ]
    in
    pairs


encodeGoodsFeedbackCommentAuthorDTO : GoodsFeedbackCommentAuthorDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentAuthorDTO =
    encodeObject << encodeGoodsFeedbackCommentAuthorDTOPairs


encodeGoodsFeedbackCommentAuthorDTOWithTag : ( String, String ) -> GoodsFeedbackCommentAuthorDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentAuthorDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackCommentAuthorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackCommentAuthorDTOPairs : GoodsFeedbackCommentAuthorDTO -> List EncodedField
encodeGoodsFeedbackCommentAuthorDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeGoodsFeedbackCommentAuthorType model.type_
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


stringFromGoodsFeedbackCommentAuthorType : GoodsFeedbackCommentAuthorType -> String
stringFromGoodsFeedbackCommentAuthorType model =
    case model of
        GoodsFeedbackCommentAuthorTypeUSER ->
            "USER"

        GoodsFeedbackCommentAuthorTypeBUSINESS ->
            "BUSINESS"


encodeGoodsFeedbackCommentAuthorType : GoodsFeedbackCommentAuthorType -> Json.Encode.Value
encodeGoodsFeedbackCommentAuthorType =
    Json.Encode.string << stringFromGoodsFeedbackCommentAuthorType


encodeGoodsFeedbackCommentDTO : GoodsFeedbackCommentDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentDTO =
    encodeObject << encodeGoodsFeedbackCommentDTOPairs


encodeGoodsFeedbackCommentDTOWithTag : ( String, String ) -> GoodsFeedbackCommentDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackCommentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackCommentDTOPairs : GoodsFeedbackCommentDTO -> List EncodedField
encodeGoodsFeedbackCommentDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "text" Json.Encode.string model.text
            , maybeEncode "canModify" Json.Encode.bool model.canModify
            , maybeEncode "parentId" Json.Encode.int model.parentId
            , encode "author" encodeGoodsFeedbackCommentAuthorDTO model.author
            , encode "status" encodeGoodsFeedbackCommentStatusType model.status
            ]
    in
    pairs


encodeGoodsFeedbackCommentId : GoodsFeedbackCommentId -> Json.Encode.Value
encodeGoodsFeedbackCommentId =
    encodeObject << encodeGoodsFeedbackCommentIdPairs


encodeGoodsFeedbackCommentIdWithTag : ( String, String ) -> GoodsFeedbackCommentId -> Json.Encode.Value
encodeGoodsFeedbackCommentIdWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackCommentIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackCommentIdPairs : GoodsFeedbackCommentId -> List EncodedField
encodeGoodsFeedbackCommentIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeGoodsFeedbackCommentListDTO : GoodsFeedbackCommentListDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentListDTO =
    encodeObject << encodeGoodsFeedbackCommentListDTOPairs


encodeGoodsFeedbackCommentListDTOWithTag : ( String, String ) -> GoodsFeedbackCommentListDTO -> Json.Encode.Value
encodeGoodsFeedbackCommentListDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackCommentListDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackCommentListDTOPairs : GoodsFeedbackCommentListDTO -> List EncodedField
encodeGoodsFeedbackCommentListDTOPairs model =
    let
        pairs =
            [ encode "comments" (Json.Encode.list encodeGoodsFeedbackCommentDTO) model.comments
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


stringFromGoodsFeedbackCommentStatusType : GoodsFeedbackCommentStatusType -> String
stringFromGoodsFeedbackCommentStatusType model =
    case model of
        GoodsFeedbackCommentStatusTypePUBLISHED ->
            "PUBLISHED"

        GoodsFeedbackCommentStatusTypeUNMODERATED ->
            "UNMODERATED"

        GoodsFeedbackCommentStatusTypeBANNED ->
            "BANNED"

        GoodsFeedbackCommentStatusTypeDELETED ->
            "DELETED"


encodeGoodsFeedbackCommentStatusType : GoodsFeedbackCommentStatusType -> Json.Encode.Value
encodeGoodsFeedbackCommentStatusType =
    Json.Encode.string << stringFromGoodsFeedbackCommentStatusType


encodeGoodsFeedbackCommentText : GoodsFeedbackCommentText -> Json.Encode.Value
encodeGoodsFeedbackCommentText =
    encodeObject << encodeGoodsFeedbackCommentTextPairs


encodeGoodsFeedbackCommentTextWithTag : ( String, String ) -> GoodsFeedbackCommentText -> Json.Encode.Value
encodeGoodsFeedbackCommentTextWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackCommentTextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackCommentTextPairs : GoodsFeedbackCommentText -> List EncodedField
encodeGoodsFeedbackCommentTextPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeGoodsFeedbackDTO : GoodsFeedbackDTO -> Json.Encode.Value
encodeGoodsFeedbackDTO =
    encodeObject << encodeGoodsFeedbackDTOPairs


encodeGoodsFeedbackDTOWithTag : ( String, String ) -> GoodsFeedbackDTO -> Json.Encode.Value
encodeGoodsFeedbackDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackDTOPairs : GoodsFeedbackDTO -> List EncodedField
encodeGoodsFeedbackDTOPairs model =
    let
        pairs =
            [ encode "feedbackId" Json.Encode.int model.feedbackId
            , encode "createdAt" Api.Time.encodeDateTime model.createdAt
            , encode "needReaction" Json.Encode.bool model.needReaction
            , encode "identifiers" encodeGoodsFeedbackIdentifiersDTO model.identifiers
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "description" encodeGoodsFeedbackDescriptionDTO model.description
            , maybeEncode "media" encodeGoodsFeedbackMediaDTO model.media
            , encode "statistics" encodeGoodsFeedbackStatisticsDTO model.statistics
            ]
    in
    pairs


encodeGoodsFeedbackDescriptionDTO : GoodsFeedbackDescriptionDTO -> Json.Encode.Value
encodeGoodsFeedbackDescriptionDTO =
    encodeObject << encodeGoodsFeedbackDescriptionDTOPairs


encodeGoodsFeedbackDescriptionDTOWithTag : ( String, String ) -> GoodsFeedbackDescriptionDTO -> Json.Encode.Value
encodeGoodsFeedbackDescriptionDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackDescriptionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackDescriptionDTOPairs : GoodsFeedbackDescriptionDTO -> List EncodedField
encodeGoodsFeedbackDescriptionDTOPairs model =
    let
        pairs =
            [ maybeEncode "advantages" Json.Encode.string model.advantages
            , maybeEncode "disadvantages" Json.Encode.string model.disadvantages
            , maybeEncode "comment" Json.Encode.string model.comment
            ]
    in
    pairs


encodeGoodsFeedbackId : GoodsFeedbackId -> Json.Encode.Value
encodeGoodsFeedbackId =
    encodeObject << encodeGoodsFeedbackIdPairs


encodeGoodsFeedbackIdWithTag : ( String, String ) -> GoodsFeedbackId -> Json.Encode.Value
encodeGoodsFeedbackIdWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackIdPairs : GoodsFeedbackId -> List EncodedField
encodeGoodsFeedbackIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeGoodsFeedbackIdentifiersDTO : GoodsFeedbackIdentifiersDTO -> Json.Encode.Value
encodeGoodsFeedbackIdentifiersDTO =
    encodeObject << encodeGoodsFeedbackIdentifiersDTOPairs


encodeGoodsFeedbackIdentifiersDTOWithTag : ( String, String ) -> GoodsFeedbackIdentifiersDTO -> Json.Encode.Value
encodeGoodsFeedbackIdentifiersDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackIdentifiersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackIdentifiersDTOPairs : GoodsFeedbackIdentifiersDTO -> List EncodedField
encodeGoodsFeedbackIdentifiersDTOPairs model =
    let
        pairs =
            [ encode "orderId" Json.Encode.int model.orderId
            , encode "modelId" Json.Encode.int model.modelId
            ]
    in
    pairs


encodeGoodsFeedbackListDTO : GoodsFeedbackListDTO -> Json.Encode.Value
encodeGoodsFeedbackListDTO =
    encodeObject << encodeGoodsFeedbackListDTOPairs


encodeGoodsFeedbackListDTOWithTag : ( String, String ) -> GoodsFeedbackListDTO -> Json.Encode.Value
encodeGoodsFeedbackListDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackListDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackListDTOPairs : GoodsFeedbackListDTO -> List EncodedField
encodeGoodsFeedbackListDTOPairs model =
    let
        pairs =
            [ encode "feedbacks" (Json.Encode.list encodeGoodsFeedbackDTO) model.feedbacks
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeGoodsFeedbackMediaDTO : GoodsFeedbackMediaDTO -> Json.Encode.Value
encodeGoodsFeedbackMediaDTO =
    encodeObject << encodeGoodsFeedbackMediaDTOPairs


encodeGoodsFeedbackMediaDTOWithTag : ( String, String ) -> GoodsFeedbackMediaDTO -> Json.Encode.Value
encodeGoodsFeedbackMediaDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackMediaDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackMediaDTOPairs : GoodsFeedbackMediaDTO -> List EncodedField
encodeGoodsFeedbackMediaDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "photos" (Json.Encode.list Json.Encode.string) model.photos
            , maybeEncodeNullable "videos" (Json.Encode.list Json.Encode.string) model.videos
            ]
    in
    pairs


encodeGoodsFeedbackStatisticsDTO : GoodsFeedbackStatisticsDTO -> Json.Encode.Value
encodeGoodsFeedbackStatisticsDTO =
    encodeObject << encodeGoodsFeedbackStatisticsDTOPairs


encodeGoodsFeedbackStatisticsDTOWithTag : ( String, String ) -> GoodsFeedbackStatisticsDTO -> Json.Encode.Value
encodeGoodsFeedbackStatisticsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsFeedbackStatisticsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsFeedbackStatisticsDTOPairs : GoodsFeedbackStatisticsDTO -> List EncodedField
encodeGoodsFeedbackStatisticsDTOPairs model =
    let
        pairs =
            [ encode "rating" Json.Encode.int model.rating
            , encode "commentsCount" Json.Encode.int model.commentsCount
            , maybeEncode "recommended" Json.Encode.bool model.recommended
            , maybeEncode "paidAmount" Json.Encode.int model.paidAmount
            ]
    in
    pairs


encodeGoodsStatsDTO : GoodsStatsDTO -> Json.Encode.Value
encodeGoodsStatsDTO =
    encodeObject << encodeGoodsStatsDTOPairs


encodeGoodsStatsDTOWithTag : ( String, String ) -> GoodsStatsDTO -> Json.Encode.Value
encodeGoodsStatsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsStatsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsStatsDTOPairs : GoodsStatsDTO -> List EncodedField
encodeGoodsStatsDTOPairs model =
    let
        pairs =
            [ encode "shopSkus" (Json.Encode.list encodeGoodsStatsGoodsDTO) model.shopSkus
            ]
    in
    pairs


encodeGoodsStatsGoodsDTO : GoodsStatsGoodsDTO -> Json.Encode.Value
encodeGoodsStatsGoodsDTO =
    encodeObject << encodeGoodsStatsGoodsDTOPairs


encodeGoodsStatsGoodsDTOWithTag : ( String, String ) -> GoodsStatsGoodsDTO -> Json.Encode.Value
encodeGoodsStatsGoodsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsStatsGoodsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsStatsGoodsDTOPairs : GoodsStatsGoodsDTO -> List EncodedField
encodeGoodsStatsGoodsDTOPairs model =
    let
        pairs =
            [ maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "categoryId" Json.Encode.int model.categoryId
            , maybeEncode "categoryName" Json.Encode.string model.categoryName
            , maybeEncode "weightDimensions" encodeGoodsStatsWeightDimensionsDTO model.weightDimensions
            , maybeEncodeNullable "warehouses" (Json.Encode.list encodeGoodsStatsWarehouseDTO) model.warehouses
            , maybeEncodeNullable "tariffs" (Json.Encode.list encodeTariffDTO) model.tariffs
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            ]
    in
    pairs


encodeGoodsStatsWarehouseDTO : GoodsStatsWarehouseDTO -> Json.Encode.Value
encodeGoodsStatsWarehouseDTO =
    encodeObject << encodeGoodsStatsWarehouseDTOPairs


encodeGoodsStatsWarehouseDTOWithTag : ( String, String ) -> GoodsStatsWarehouseDTO -> Json.Encode.Value
encodeGoodsStatsWarehouseDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsStatsWarehouseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsStatsWarehouseDTOPairs : GoodsStatsWarehouseDTO -> List EncodedField
encodeGoodsStatsWarehouseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , encode "stocks" (Json.Encode.list encodeWarehouseStockDTO) model.stocks
            ]
    in
    pairs


encodeGoodsStatsWeightDimensionsDTO : GoodsStatsWeightDimensionsDTO -> Json.Encode.Value
encodeGoodsStatsWeightDimensionsDTO =
    encodeObject << encodeGoodsStatsWeightDimensionsDTOPairs


encodeGoodsStatsWeightDimensionsDTOWithTag : ( String, String ) -> GoodsStatsWeightDimensionsDTO -> Json.Encode.Value
encodeGoodsStatsWeightDimensionsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGoodsStatsWeightDimensionsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGoodsStatsWeightDimensionsDTOPairs : GoodsStatsWeightDimensionsDTO -> List EncodedField
encodeGoodsStatsWeightDimensionsDTOPairs model =
    let
        pairs =
            [ maybeEncode "length" Json.Encode.float model.length
            , maybeEncode "width" Json.Encode.float model.width
            , maybeEncode "height" Json.Encode.float model.height
            , maybeEncode "weight" Json.Encode.float model.weight
            ]
    in
    pairs


encodeGpsDTO : GpsDTO -> Json.Encode.Value
encodeGpsDTO =
    encodeObject << encodeGpsDTOPairs


encodeGpsDTOWithTag : ( String, String ) -> GpsDTO -> Json.Encode.Value
encodeGpsDTOWithTag (tagField, tag) model =
    encodeObject (encodeGpsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGpsDTOPairs : GpsDTO -> List EncodedField
encodeGpsDTOPairs model =
    let
        pairs =
            [ encode "latitude" Json.Encode.float model.latitude
            , encode "longitude" Json.Encode.float model.longitude
            ]
    in
    pairs


encodeHiddenOfferDTO : HiddenOfferDTO -> Json.Encode.Value
encodeHiddenOfferDTO =
    encodeObject << encodeHiddenOfferDTOPairs


encodeHiddenOfferDTOWithTag : ( String, String ) -> HiddenOfferDTO -> Json.Encode.Value
encodeHiddenOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeHiddenOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHiddenOfferDTOPairs : HiddenOfferDTO -> List EncodedField
encodeHiddenOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            ]
    in
    pairs


stringFromLanguageType : LanguageType -> String
stringFromLanguageType model =
    case model of
        LanguageTypeRU ->
            "RU"

        LanguageTypeEN ->
            "EN"


encodeLanguageType : LanguageType -> Json.Encode.Value
encodeLanguageType =
    Json.Encode.string << stringFromLanguageType


stringFromLicenseCheckStatusType : LicenseCheckStatusType -> String
stringFromLicenseCheckStatusType model =
    case model of
        LicenseCheckStatusTypeNEW ->
            "NEW"

        LicenseCheckStatusTypeSUCCESS ->
            "SUCCESS"

        LicenseCheckStatusTypeFAIL ->
            "FAIL"

        LicenseCheckStatusTypeREVOKE ->
            "REVOKE"

        LicenseCheckStatusTypeDONTWANT ->
            "DONT_WANT"

        LicenseCheckStatusTypeFAILMANUAL ->
            "FAIL_MANUAL"


encodeLicenseCheckStatusType : LicenseCheckStatusType -> Json.Encode.Value
encodeLicenseCheckStatusType =
    Json.Encode.string << stringFromLicenseCheckStatusType


stringFromLicenseType : LicenseType -> String
stringFromLicenseType model =
    case model of
        LicenseTypeALCOHOL ->
            "ALCOHOL"

        LicenseTypeUNKNOWN ->
            "UNKNOWN"


encodeLicenseType : LicenseType -> Json.Encode.Value
encodeLicenseType =
    Json.Encode.string << stringFromLicenseType


encodeLogisticPickupPointDTO : LogisticPickupPointDTO -> Json.Encode.Value
encodeLogisticPickupPointDTO =
    encodeObject << encodeLogisticPickupPointDTOPairs


encodeLogisticPickupPointDTOWithTag : ( String, String ) -> LogisticPickupPointDTO -> Json.Encode.Value
encodeLogisticPickupPointDTOWithTag (tagField, tag) model =
    encodeObject (encodeLogisticPickupPointDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLogisticPickupPointDTOPairs : LogisticPickupPointDTO -> List EncodedField
encodeLogisticPickupPointDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "address" encodePickupAddressDTO model.address
            , maybeEncode "instruction" Json.Encode.string model.instruction
            , maybeEncode "type" encodeLogisticPointType model.type_
            , maybeEncode "logisticPartnerId" Json.Encode.int model.logisticPartnerId
            ]
    in
    pairs


stringFromLogisticPointType : LogisticPointType -> String
stringFromLogisticPointType model =
    case model of
        LogisticPointTypeWAREHOUSE ->
            "WAREHOUSE"

        LogisticPointTypePICKUPPOINT ->
            "PICKUP_POINT"

        LogisticPointTypePICKUPTERMINAL ->
            "PICKUP_TERMINAL"

        LogisticPointTypePICKUPPOSTOFFICE ->
            "PICKUP_POST_OFFICE"

        LogisticPointTypePICKUPMIXED ->
            "PICKUP_MIXED"

        LogisticPointTypePICKUPRETAIL ->
            "PICKUP_RETAIL"

        LogisticPointTypeUNKNOWN ->
            "UNKNOWN"


encodeLogisticPointType : LogisticPointType -> Json.Encode.Value
encodeLogisticPointType =
    Json.Encode.string << stringFromLogisticPointType


encodeMappingsOfferDTO : MappingsOfferDTO -> Json.Encode.Value
encodeMappingsOfferDTO =
    encodeObject << encodeMappingsOfferDTOPairs


encodeMappingsOfferDTOWithTag : ( String, String ) -> MappingsOfferDTO -> Json.Encode.Value
encodeMappingsOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeMappingsOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMappingsOfferDTOPairs : MappingsOfferDTO -> List EncodedField
encodeMappingsOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "feedId" Json.Encode.int model.feedId
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncodeNullable "urls" (Json.Encode.list Json.Encode.string) model.urls
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncode "manufacturer" Json.Encode.string model.manufacturer
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "minShipment" Json.Encode.int model.minShipment
            , maybeEncode "transportUnitSize" Json.Encode.int model.transportUnitSize
            , maybeEncode "quantumOfSupply" Json.Encode.int model.quantumOfSupply
            , maybeEncode "deliveryDurationDays" Json.Encode.int model.deliveryDurationDays
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncodeNullable "customsCommodityCodes" (Json.Encode.list Json.Encode.string) model.customsCommodityCodes
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncodeNullable "supplyScheduleDays" (Json.Encode.list encodeDayOfWeekType) model.supplyScheduleDays
            , maybeEncode "shelfLifeDays" Json.Encode.int model.shelfLifeDays
            , maybeEncode "lifeTimeDays" Json.Encode.int model.lifeTimeDays
            , maybeEncode "guaranteePeriodDays" Json.Encode.int model.guaranteePeriodDays
            , maybeEncode "processingState" encodeOfferProcessingStateDTO model.processingState
            , maybeEncode "availability" encodeOfferAvailabilityStatusType model.availability
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "certificate" Json.Encode.string model.certificate
            , maybeEncode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodeMappingsOfferInfoDTO : MappingsOfferInfoDTO -> Json.Encode.Value
encodeMappingsOfferInfoDTO =
    encodeObject << encodeMappingsOfferInfoDTOPairs


encodeMappingsOfferInfoDTOWithTag : ( String, String ) -> MappingsOfferInfoDTO -> Json.Encode.Value
encodeMappingsOfferInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeMappingsOfferInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMappingsOfferInfoDTOPairs : MappingsOfferInfoDTO -> List EncodedField
encodeMappingsOfferInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "feedId" Json.Encode.int model.feedId
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncodeNullable "urls" (Json.Encode.list Json.Encode.string) model.urls
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncode "manufacturer" Json.Encode.string model.manufacturer
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "minShipment" Json.Encode.int model.minShipment
            , maybeEncode "transportUnitSize" Json.Encode.int model.transportUnitSize
            , maybeEncode "quantumOfSupply" Json.Encode.int model.quantumOfSupply
            , maybeEncode "deliveryDurationDays" Json.Encode.int model.deliveryDurationDays
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncodeNullable "customsCommodityCodes" (Json.Encode.list Json.Encode.string) model.customsCommodityCodes
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncodeNullable "supplyScheduleDays" (Json.Encode.list encodeDayOfWeekType) model.supplyScheduleDays
            , maybeEncode "shelfLifeDays" Json.Encode.int model.shelfLifeDays
            , maybeEncode "lifeTimeDays" Json.Encode.int model.lifeTimeDays
            , maybeEncode "guaranteePeriodDays" Json.Encode.int model.guaranteePeriodDays
            , maybeEncode "processingState" encodeOfferProcessingStateDTO model.processingState
            , maybeEncode "availability" encodeOfferAvailabilityStatusType model.availability
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "certificate" Json.Encode.string model.certificate
            ]
    in
    pairs


encodeMarketSku : MarketSku -> Json.Encode.Value
encodeMarketSku =
    encodeObject << encodeMarketSkuPairs


encodeMarketSkuWithTag : ( String, String ) -> MarketSku -> Json.Encode.Value
encodeMarketSkuWithTag (tagField, tag) model =
    encodeObject (encodeMarketSkuPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMarketSkuPairs : MarketSku -> List EncodedField
encodeMarketSkuPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeMaxSaleQuantumDTO : MaxSaleQuantumDTO -> Json.Encode.Value
encodeMaxSaleQuantumDTO =
    encodeObject << encodeMaxSaleQuantumDTOPairs


encodeMaxSaleQuantumDTOWithTag : ( String, String ) -> MaxSaleQuantumDTO -> Json.Encode.Value
encodeMaxSaleQuantumDTOWithTag (tagField, tag) model =
    encodeObject (encodeMaxSaleQuantumDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMaxSaleQuantumDTOPairs : MaxSaleQuantumDTO -> List EncodedField
encodeMaxSaleQuantumDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "maxSaleQuantum" Json.Encode.int model.maxSaleQuantum
            ]
    in
    pairs


stringFromMechanicsType : MechanicsType -> String
stringFromMechanicsType model =
    case model of
        MechanicsTypeDIRECTDISCOUNT ->
            "DIRECT_DISCOUNT"

        MechanicsTypeBLUEFLASH ->
            "BLUE_FLASH"

        MechanicsTypeMARKETPROMOCODE ->
            "MARKET_PROMOCODE"


encodeMechanicsType : MechanicsType -> Json.Encode.Value
encodeMechanicsType =
    Json.Encode.string << stringFromMechanicsType


encodeModelDTO : ModelDTO -> Json.Encode.Value
encodeModelDTO =
    encodeObject << encodeModelDTOPairs


encodeModelDTOWithTag : ( String, String ) -> ModelDTO -> Json.Encode.Value
encodeModelDTOWithTag (tagField, tag) model =
    encodeObject (encodeModelDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelDTOPairs : ModelDTO -> List EncodedField
encodeModelDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "prices" encodeModelPriceDTO model.prices
            ]
    in
    pairs


encodeModelOfferDTO : ModelOfferDTO -> Json.Encode.Value
encodeModelOfferDTO =
    encodeObject << encodeModelOfferDTOPairs


encodeModelOfferDTOWithTag : ( String, String ) -> ModelOfferDTO -> Json.Encode.Value
encodeModelOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeModelOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelOfferDTOPairs : ModelOfferDTO -> List EncodedField
encodeModelOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "discount" Json.Encode.int model.discount
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "pos" Json.Encode.int model.pos
            , maybeEncode "preDiscountPrice" Json.Encode.float model.preDiscountPrice
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "regionId" Json.Encode.int model.regionId
            , maybeEncode "shippingCost" Json.Encode.float model.shippingCost
            , maybeEncode "shopName" Json.Encode.string model.shopName
            , maybeEncode "shopRating" Json.Encode.int model.shopRating
            , maybeEncode "inStock" Json.Encode.int model.inStock
            ]
    in
    pairs


encodeModelPriceDTO : ModelPriceDTO -> Json.Encode.Value
encodeModelPriceDTO =
    encodeObject << encodeModelPriceDTOPairs


encodeModelPriceDTOWithTag : ( String, String ) -> ModelPriceDTO -> Json.Encode.Value
encodeModelPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeModelPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelPriceDTOPairs : ModelPriceDTO -> List EncodedField
encodeModelPriceDTOPairs model =
    let
        pairs =
            [ maybeEncode "avg" Json.Encode.float model.avg
            , maybeEncode "max" Json.Encode.float model.max
            , maybeEncode "min" Json.Encode.float model.min
            ]
    in
    pairs


encodeModelsDTO : ModelsDTO -> Json.Encode.Value
encodeModelsDTO =
    encodeObject << encodeModelsDTOPairs


encodeModelsDTOWithTag : ( String, String ) -> ModelsDTO -> Json.Encode.Value
encodeModelsDTOWithTag (tagField, tag) model =
    encodeObject (encodeModelsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeModelsDTOPairs : ModelsDTO -> List EncodedField
encodeModelsDTOPairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list encodeModelDTO) model.models
            ]
    in
    pairs


stringFromOfferAvailabilityStatusType : OfferAvailabilityStatusType -> String
stringFromOfferAvailabilityStatusType model =
    case model of
        OfferAvailabilityStatusTypeACTIVE ->
            "ACTIVE"

        OfferAvailabilityStatusTypeINACTIVE ->
            "INACTIVE"

        OfferAvailabilityStatusTypeDELISTED ->
            "DELISTED"


encodeOfferAvailabilityStatusType : OfferAvailabilityStatusType -> Json.Encode.Value
encodeOfferAvailabilityStatusType =
    Json.Encode.string << stringFromOfferAvailabilityStatusType


encodeOfferCampaignStatusDTO : OfferCampaignStatusDTO -> Json.Encode.Value
encodeOfferCampaignStatusDTO =
    encodeObject << encodeOfferCampaignStatusDTOPairs


encodeOfferCampaignStatusDTOWithTag : ( String, String ) -> OfferCampaignStatusDTO -> Json.Encode.Value
encodeOfferCampaignStatusDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferCampaignStatusDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferCampaignStatusDTOPairs : OfferCampaignStatusDTO -> List EncodedField
encodeOfferCampaignStatusDTOPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , encode "status" encodeOfferCampaignStatusType model.status
            ]
    in
    pairs


stringFromOfferCampaignStatusType : OfferCampaignStatusType -> String
stringFromOfferCampaignStatusType model =
    case model of
        OfferCampaignStatusTypePUBLISHED ->
            "PUBLISHED"

        OfferCampaignStatusTypeCHECKING ->
            "CHECKING"

        OfferCampaignStatusTypeDISABLEDBYPARTNER ->
            "DISABLED_BY_PARTNER"

        OfferCampaignStatusTypeDISABLEDAUTOMATICALLY ->
            "DISABLED_AUTOMATICALLY"

        OfferCampaignStatusTypeREJECTEDBYMARKET ->
            "REJECTED_BY_MARKET"

        OfferCampaignStatusTypeCREATINGCARD ->
            "CREATING_CARD"

        OfferCampaignStatusTypeNOCARD ->
            "NO_CARD"

        OfferCampaignStatusTypeNOSTOCKS ->
            "NO_STOCKS"

        OfferCampaignStatusTypeARCHIVED ->
            "ARCHIVED"


encodeOfferCampaignStatusType : OfferCampaignStatusType -> Json.Encode.Value
encodeOfferCampaignStatusType =
    Json.Encode.string << stringFromOfferCampaignStatusType


encodeOfferCardDTO : OfferCardDTO -> Json.Encode.Value
encodeOfferCardDTO =
    encodeObject << encodeOfferCardDTOPairs


encodeOfferCardDTOWithTag : ( String, String ) -> OfferCardDTO -> Json.Encode.Value
encodeOfferCardDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferCardDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferCardDTOPairs : OfferCardDTO -> List EncodedField
encodeOfferCardDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "mapping" encodeGetMappingDTO model.mapping
            , maybeEncodeNullable "parameterValues" (Json.Encode.list encodeParameterValueDTO) model.parameterValues
            , maybeEncode "cardStatus" encodeOfferCardStatusType model.cardStatus
            , maybeEncode "contentRating" Json.Encode.int model.contentRating
            , maybeEncodeNullable "recommendations" (Json.Encode.list encodeOfferCardRecommendationDTO) model.recommendations
            , maybeEncodeNullable "errors" (Json.Encode.list encodeOfferErrorDTO) model.errors
            , maybeEncodeNullable "warnings" (Json.Encode.list encodeOfferErrorDTO) model.warnings
            ]
    in
    pairs


encodeOfferCardRecommendationDTO : OfferCardRecommendationDTO -> Json.Encode.Value
encodeOfferCardRecommendationDTO =
    encodeObject << encodeOfferCardRecommendationDTOPairs


encodeOfferCardRecommendationDTOWithTag : ( String, String ) -> OfferCardRecommendationDTO -> Json.Encode.Value
encodeOfferCardRecommendationDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferCardRecommendationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferCardRecommendationDTOPairs : OfferCardRecommendationDTO -> List EncodedField
encodeOfferCardRecommendationDTOPairs model =
    let
        pairs =
            [ encode "type" encodeOfferCardRecommendationType model.type_
            , maybeEncode "percent" Json.Encode.int model.percent
            ]
    in
    pairs


stringFromOfferCardRecommendationType : OfferCardRecommendationType -> String
stringFromOfferCardRecommendationType model =
    case model of
        OfferCardRecommendationTypeHASVIDEO ->
            "HAS_VIDEO"

        OfferCardRecommendationTypeRECOGNIZEDVENDOR ->
            "RECOGNIZED_VENDOR"

        OfferCardRecommendationTypeMAIN ->
            "MAIN"

        OfferCardRecommendationTypeADDITIONAL ->
            "ADDITIONAL"

        OfferCardRecommendationTypeDISTINCTIVE ->
            "DISTINCTIVE"

        OfferCardRecommendationTypeFILTERABLE ->
            "FILTERABLE"

        OfferCardRecommendationTypePICTURECOUNT ->
            "PICTURE_COUNT"

        OfferCardRecommendationTypeHASDESCRIPTION ->
            "HAS_DESCRIPTION"

        OfferCardRecommendationTypeHASBARCODE ->
            "HAS_BARCODE"

        OfferCardRecommendationTypeFIRSTPICTURESIZE ->
            "FIRST_PICTURE_SIZE"

        OfferCardRecommendationTypeTITLELENGTH ->
            "TITLE_LENGTH"

        OfferCardRecommendationTypeDESCRIPTIONLENGTH ->
            "DESCRIPTION_LENGTH"

        OfferCardRecommendationTypeAVERAGEPICTURESIZE ->
            "AVERAGE_PICTURE_SIZE"

        OfferCardRecommendationTypeFIRSTVIDEOSIZE ->
            "FIRST_VIDEO_SIZE"

        OfferCardRecommendationTypeFIRSTVIDEOLENGTH ->
            "FIRST_VIDEO_LENGTH"

        OfferCardRecommendationTypeAVERAGEVIDEOSIZE ->
            "AVERAGE_VIDEO_SIZE"

        OfferCardRecommendationTypeVIDEOCOUNT ->
            "VIDEO_COUNT"


encodeOfferCardRecommendationType : OfferCardRecommendationType -> Json.Encode.Value
encodeOfferCardRecommendationType =
    Json.Encode.string << stringFromOfferCardRecommendationType


stringFromOfferCardStatusType : OfferCardStatusType -> String
stringFromOfferCardStatusType model =
    case model of
        OfferCardStatusTypeHASCARDCANNOTUPDATE ->
            "HAS_CARD_CAN_NOT_UPDATE"

        OfferCardStatusTypeHASCARDCANUPDATE ->
            "HAS_CARD_CAN_UPDATE"

        OfferCardStatusTypeHASCARDCANUPDATEERRORS ->
            "HAS_CARD_CAN_UPDATE_ERRORS"

        OfferCardStatusTypeHASCARDCANUPDATEPROCESSING ->
            "HAS_CARD_CAN_UPDATE_PROCESSING"

        OfferCardStatusTypeNOCARDNEEDCONTENT ->
            "NO_CARD_NEED_CONTENT"

        OfferCardStatusTypeNOCARDMARKETWILLCREATE ->
            "NO_CARD_MARKET_WILL_CREATE"

        OfferCardStatusTypeNOCARDERRORS ->
            "NO_CARD_ERRORS"

        OfferCardStatusTypeNOCARDPROCESSING ->
            "NO_CARD_PROCESSING"

        OfferCardStatusTypeNOCARDADDTOCAMPAIGN ->
            "NO_CARD_ADD_TO_CAMPAIGN"


encodeOfferCardStatusType : OfferCardStatusType -> Json.Encode.Value
encodeOfferCardStatusType =
    Json.Encode.string << stringFromOfferCardStatusType


encodeOfferCardsContentStatusDTO : OfferCardsContentStatusDTO -> Json.Encode.Value
encodeOfferCardsContentStatusDTO =
    encodeObject << encodeOfferCardsContentStatusDTOPairs


encodeOfferCardsContentStatusDTOWithTag : ( String, String ) -> OfferCardsContentStatusDTO -> Json.Encode.Value
encodeOfferCardsContentStatusDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferCardsContentStatusDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferCardsContentStatusDTOPairs : OfferCardsContentStatusDTO -> List EncodedField
encodeOfferCardsContentStatusDTOPairs model =
    let
        pairs =
            [ encode "offerCards" (Json.Encode.list encodeOfferCardDTO) model.offerCards
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeOfferCategory : OfferCategory -> Json.Encode.Value
encodeOfferCategory =
    encodeObject << encodeOfferCategoryPairs


encodeOfferCategoryWithTag : ( String, String ) -> OfferCategory -> Json.Encode.Value
encodeOfferCategoryWithTag (tagField, tag) model =
    encodeObject (encodeOfferCategoryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferCategoryPairs : OfferCategory -> List EncodedField
encodeOfferCategoryPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOfferConditionDTO : OfferConditionDTO -> Json.Encode.Value
encodeOfferConditionDTO =
    encodeObject << encodeOfferConditionDTOPairs


encodeOfferConditionDTOWithTag : ( String, String ) -> OfferConditionDTO -> Json.Encode.Value
encodeOfferConditionDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferConditionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferConditionDTOPairs : OfferConditionDTO -> List EncodedField
encodeOfferConditionDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOfferConditionType model.type_
            , maybeEncode "quality" encodeOfferConditionQualityType model.quality
            , maybeEncode "reason" Json.Encode.string model.reason
            ]
    in
    pairs


stringFromOfferConditionQualityType : OfferConditionQualityType -> String
stringFromOfferConditionQualityType model =
    case model of
        OfferConditionQualityTypePERFECT ->
            "PERFECT"

        OfferConditionQualityTypeEXCELLENT ->
            "EXCELLENT"

        OfferConditionQualityTypeGOOD ->
            "GOOD"

        OfferConditionQualityTypeNOTSPECIFIED ->
            "NOT_SPECIFIED"


encodeOfferConditionQualityType : OfferConditionQualityType -> Json.Encode.Value
encodeOfferConditionQualityType =
    Json.Encode.string << stringFromOfferConditionQualityType


stringFromOfferConditionType : OfferConditionType -> String
stringFromOfferConditionType model =
    case model of
        OfferConditionTypePREOWNED ->
            "PREOWNED"

        OfferConditionTypeSHOWCASESAMPLE ->
            "SHOWCASESAMPLE"

        OfferConditionTypeREFURBISHED ->
            "REFURBISHED"

        OfferConditionTypeREDUCTION ->
            "REDUCTION"

        OfferConditionTypeRENOVATED ->
            "RENOVATED"

        OfferConditionTypeNOTSPECIFIED ->
            "NOT_SPECIFIED"


encodeOfferConditionType : OfferConditionType -> Json.Encode.Value
encodeOfferConditionType =
    Json.Encode.string << stringFromOfferConditionType


encodeOfferContentDTO : OfferContentDTO -> Json.Encode.Value
encodeOfferContentDTO =
    encodeObject << encodeOfferContentDTOPairs


encodeOfferContentDTOWithTag : ( String, String ) -> OfferContentDTO -> Json.Encode.Value
encodeOfferContentDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferContentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferContentDTOPairs : OfferContentDTO -> List EncodedField
encodeOfferContentDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "categoryId" Json.Encode.int model.categoryId
            , encode "parameterValues" (Json.Encode.list encodeParameterValueDTO) model.parameterValues
            ]
    in
    pairs


encodeOfferContentErrorDTO : OfferContentErrorDTO -> Json.Encode.Value
encodeOfferContentErrorDTO =
    encodeObject << encodeOfferContentErrorDTOPairs


encodeOfferContentErrorDTOWithTag : ( String, String ) -> OfferContentErrorDTO -> Json.Encode.Value
encodeOfferContentErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferContentErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferContentErrorDTOPairs : OfferContentErrorDTO -> List EncodedField
encodeOfferContentErrorDTOPairs model =
    let
        pairs =
            [ encode "type" encodeOfferContentErrorType model.type_
            , maybeEncode "parameterId" Json.Encode.int model.parameterId
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


stringFromOfferContentErrorType : OfferContentErrorType -> String
stringFromOfferContentErrorType model =
    case model of
        OfferContentErrorTypeOFFERNOTFOUND ->
            "OFFER_NOT_FOUND"

        OfferContentErrorTypeUNKNOWNCATEGORY ->
            "UNKNOWN_CATEGORY"

        OfferContentErrorTypeCATEGORYMISMATCH ->
            "CATEGORY_MISMATCH"

        OfferContentErrorTypeUNKNOWNPARAMETER ->
            "UNKNOWN_PARAMETER"

        OfferContentErrorTypeUNEXPECTEDBOOLEANVALUE ->
            "UNEXPECTED_BOOLEAN_VALUE"

        OfferContentErrorTypeNUMBERFORMAT ->
            "NUMBER_FORMAT"

        OfferContentErrorTypeVALUEBLANK ->
            "VALUE_BLANK"

        OfferContentErrorTypeINVALIDUNITID ->
            "INVALID_UNIT_ID"

        OfferContentErrorTypeINVALIDGROUPIDLENGTH ->
            "INVALID_GROUP_ID_LENGTH"

        OfferContentErrorTypeINVALIDGROUPIDCHARACTERS ->
            "INVALID_GROUP_ID_CHARACTERS"


encodeOfferContentErrorType : OfferContentErrorType -> Json.Encode.Value
encodeOfferContentErrorType =
    Json.Encode.string << stringFromOfferContentErrorType


encodeOfferDTO : OfferDTO -> Json.Encode.Value
encodeOfferDTO =
    encodeObject << encodeOfferDTOPairs


encodeOfferDTOWithTag : ( String, String ) -> OfferDTO -> Json.Encode.Value
encodeOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferDTOPairs : OfferDTO -> List EncodedField
encodeOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "feedId" Json.Encode.int model.feedId
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "shopCategoryId" Json.Encode.string model.shopCategoryId
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "preDiscountPrice" Json.Encode.float model.preDiscountPrice
            , maybeEncode "discount" Json.Encode.int model.discount
            , maybeEncode "cutPrice" Json.Encode.bool model.cutPrice
            , maybeEncode "url" Json.Encode.string model.url
            , encode "modelId" Json.Encode.int model.modelId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "bid" Json.Encode.float model.bid
            , maybeEncode "cbid" Json.Encode.float model.cbid
            , maybeEncode "fee" Json.Encode.float model.fee
            , maybeEncode "blocked" Json.Encode.bool model.blocked
            ]
    in
    pairs


encodeOfferDescription : OfferDescription -> Json.Encode.Value
encodeOfferDescription =
    encodeObject << encodeOfferDescriptionPairs


encodeOfferDescriptionWithTag : ( String, String ) -> OfferDescription -> Json.Encode.Value
encodeOfferDescriptionWithTag (tagField, tag) model =
    encodeObject (encodeOfferDescriptionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferDescriptionPairs : OfferDescription -> List EncodedField
encodeOfferDescriptionPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOfferErrorDTO : OfferErrorDTO -> Json.Encode.Value
encodeOfferErrorDTO =
    encodeObject << encodeOfferErrorDTOPairs


encodeOfferErrorDTOWithTag : ( String, String ) -> OfferErrorDTO -> Json.Encode.Value
encodeOfferErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferErrorDTOPairs : OfferErrorDTO -> List EncodedField
encodeOfferErrorDTOPairs model =
    let
        pairs =
            [ maybeEncode "message" Json.Encode.string model.message
            , maybeEncode "comment" Json.Encode.string model.comment
            ]
    in
    pairs


encodeOfferForRecommendationDTO : OfferForRecommendationDTO -> Json.Encode.Value
encodeOfferForRecommendationDTO =
    encodeObject << encodeOfferForRecommendationDTOPairs


encodeOfferForRecommendationDTOWithTag : ( String, String ) -> OfferForRecommendationDTO -> Json.Encode.Value
encodeOfferForRecommendationDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferForRecommendationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferForRecommendationDTOPairs : OfferForRecommendationDTO -> List EncodedField
encodeOfferForRecommendationDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "price" encodeBasePriceDTO model.price
            , maybeEncode "cofinancePrice" encodeGetPriceDTO model.cofinancePrice
            , maybeEncode "competitiveness" encodePriceCompetitivenessType model.competitiveness
            , maybeEncode "shows" Json.Encode.int model.shows
            ]
    in
    pairs


encodeOfferManualDTO : OfferManualDTO -> Json.Encode.Value
encodeOfferManualDTO =
    encodeObject << encodeOfferManualDTOPairs


encodeOfferManualDTOWithTag : ( String, String ) -> OfferManualDTO -> Json.Encode.Value
encodeOfferManualDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferManualDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferManualDTOPairs : OfferManualDTO -> List EncodedField
encodeOfferManualDTOPairs model =
    let
        pairs =
            [ encode "url" Json.Encode.string model.url
            , maybeEncode "title" Json.Encode.string model.title
            ]
    in
    pairs


encodeOfferMappingDTO : OfferMappingDTO -> Json.Encode.Value
encodeOfferMappingDTO =
    encodeObject << encodeOfferMappingDTOPairs


encodeOfferMappingDTOWithTag : ( String, String ) -> OfferMappingDTO -> Json.Encode.Value
encodeOfferMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingDTOPairs : OfferMappingDTO -> List EncodedField
encodeOfferMappingDTOPairs model =
    let
        pairs =
            [ maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "modelId" Json.Encode.int model.modelId
            , maybeEncode "categoryId" Json.Encode.int model.categoryId
            ]
    in
    pairs


encodeOfferMappingEntriesDTO : OfferMappingEntriesDTO -> Json.Encode.Value
encodeOfferMappingEntriesDTO =
    encodeObject << encodeOfferMappingEntriesDTOPairs


encodeOfferMappingEntriesDTOWithTag : ( String, String ) -> OfferMappingEntriesDTO -> Json.Encode.Value
encodeOfferMappingEntriesDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingEntriesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingEntriesDTOPairs : OfferMappingEntriesDTO -> List EncodedField
encodeOfferMappingEntriesDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "offerMappingEntries" (Json.Encode.list encodeOfferMappingEntryDTO) model.offerMappingEntries
            ]
    in
    pairs


encodeOfferMappingEntryDTO : OfferMappingEntryDTO -> Json.Encode.Value
encodeOfferMappingEntryDTO =
    encodeObject << encodeOfferMappingEntryDTOPairs


encodeOfferMappingEntryDTOWithTag : ( String, String ) -> OfferMappingEntryDTO -> Json.Encode.Value
encodeOfferMappingEntryDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingEntryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingEntryDTOPairs : OfferMappingEntryDTO -> List EncodedField
encodeOfferMappingEntryDTOPairs model =
    let
        pairs =
            [ maybeEncode "mapping" encodeOfferMappingDTO model.mapping
            , maybeEncode "awaitingModerationMapping" encodeOfferMappingDTO model.awaitingModerationMapping
            , maybeEncode "rejectedMapping" encodeOfferMappingDTO model.rejectedMapping
            , maybeEncode "offer" encodeMappingsOfferDTO model.offer
            ]
    in
    pairs


encodeOfferMappingErrorDTO : OfferMappingErrorDTO -> Json.Encode.Value
encodeOfferMappingErrorDTO =
    encodeObject << encodeOfferMappingErrorDTOPairs


encodeOfferMappingErrorDTOWithTag : ( String, String ) -> OfferMappingErrorDTO -> Json.Encode.Value
encodeOfferMappingErrorDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingErrorDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingErrorDTOPairs : OfferMappingErrorDTO -> List EncodedField
encodeOfferMappingErrorDTOPairs model =
    let
        pairs =
            [ encode "type" encodeOfferMappingErrorType model.type_
            , maybeEncode "parameterId" Json.Encode.int model.parameterId
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


stringFromOfferMappingErrorType : OfferMappingErrorType -> String
stringFromOfferMappingErrorType model =
    case model of
        OfferMappingErrorTypeUNKNOWNCATEGORY ->
            "UNKNOWN_CATEGORY"

        OfferMappingErrorTypeCATEGORYMISMATCH ->
            "CATEGORY_MISMATCH"

        OfferMappingErrorTypeEMPTYMARKETCATEGORY ->
            "EMPTY_MARKET_CATEGORY"

        OfferMappingErrorTypeUNKNOWNPARAMETER ->
            "UNKNOWN_PARAMETER"

        OfferMappingErrorTypeUNEXPECTEDBOOLEANVALUE ->
            "UNEXPECTED_BOOLEAN_VALUE"

        OfferMappingErrorTypeNUMBERFORMAT ->
            "NUMBER_FORMAT"

        OfferMappingErrorTypeVALUEBLANK ->
            "VALUE_BLANK"

        OfferMappingErrorTypeINVALIDUNITID ->
            "INVALID_UNIT_ID"

        OfferMappingErrorTypeINVALIDGROUPIDLENGTH ->
            "INVALID_GROUP_ID_LENGTH"

        OfferMappingErrorTypeINVALIDGROUPIDCHARACTERS ->
            "INVALID_GROUP_ID_CHARACTERS"

        OfferMappingErrorTypeINVALIDPICKERURL ->
            "INVALID_PICKER_URL"


encodeOfferMappingErrorType : OfferMappingErrorType -> Json.Encode.Value
encodeOfferMappingErrorType =
    Json.Encode.string << stringFromOfferMappingErrorType


encodeOfferMappingInfoDTO : OfferMappingInfoDTO -> Json.Encode.Value
encodeOfferMappingInfoDTO =
    encodeObject << encodeOfferMappingInfoDTOPairs


encodeOfferMappingInfoDTOWithTag : ( String, String ) -> OfferMappingInfoDTO -> Json.Encode.Value
encodeOfferMappingInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingInfoDTOPairs : OfferMappingInfoDTO -> List EncodedField
encodeOfferMappingInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "mapping" encodeOfferMappingDTO model.mapping
            , maybeEncode "awaitingModerationMapping" encodeOfferMappingDTO model.awaitingModerationMapping
            , maybeEncode "rejectedMapping" encodeOfferMappingDTO model.rejectedMapping
            ]
    in
    pairs


stringFromOfferMappingKindType : OfferMappingKindType -> String
stringFromOfferMappingKindType model =
    case model of
        OfferMappingKindTypeACTIVE ->
            "ACTIVE"

        OfferMappingKindTypeALL ->
            "ALL"


encodeOfferMappingKindType : OfferMappingKindType -> Json.Encode.Value
encodeOfferMappingKindType =
    Json.Encode.string << stringFromOfferMappingKindType


encodeOfferMappingSuggestionsListDTO : OfferMappingSuggestionsListDTO -> Json.Encode.Value
encodeOfferMappingSuggestionsListDTO =
    encodeObject << encodeOfferMappingSuggestionsListDTOPairs


encodeOfferMappingSuggestionsListDTOWithTag : ( String, String ) -> OfferMappingSuggestionsListDTO -> Json.Encode.Value
encodeOfferMappingSuggestionsListDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferMappingSuggestionsListDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferMappingSuggestionsListDTOPairs : OfferMappingSuggestionsListDTO -> List EncodedField
encodeOfferMappingSuggestionsListDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeEnrichedMappingsOfferDTO) model.offers
            ]
    in
    pairs


encodeOfferName : OfferName -> Json.Encode.Value
encodeOfferName =
    encodeObject << encodeOfferNamePairs


encodeOfferNameWithTag : ( String, String ) -> OfferName -> Json.Encode.Value
encodeOfferNameWithTag (tagField, tag) model =
    encodeObject (encodeOfferNamePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferNamePairs : OfferName -> List EncodedField
encodeOfferNamePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOfferParamDTO : OfferParamDTO -> Json.Encode.Value
encodeOfferParamDTO =
    encodeObject << encodeOfferParamDTOPairs


encodeOfferParamDTOWithTag : ( String, String ) -> OfferParamDTO -> Json.Encode.Value
encodeOfferParamDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferParamDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferParamDTOPairs : OfferParamDTO -> List EncodedField
encodeOfferParamDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeOfferPriceByOfferIdsListResponseDTO : OfferPriceByOfferIdsListResponseDTO -> Json.Encode.Value
encodeOfferPriceByOfferIdsListResponseDTO =
    encodeObject << encodeOfferPriceByOfferIdsListResponseDTOPairs


encodeOfferPriceByOfferIdsListResponseDTOWithTag : ( String, String ) -> OfferPriceByOfferIdsListResponseDTO -> Json.Encode.Value
encodeOfferPriceByOfferIdsListResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferPriceByOfferIdsListResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferPriceByOfferIdsListResponseDTOPairs : OfferPriceByOfferIdsListResponseDTO -> List EncodedField
encodeOfferPriceByOfferIdsListResponseDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferPriceByOfferIdsResponseDTO) model.offers
            , maybeEncode "paging" encodeScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeOfferPriceByOfferIdsResponseDTO : OfferPriceByOfferIdsResponseDTO -> Json.Encode.Value
encodeOfferPriceByOfferIdsResponseDTO =
    encodeObject << encodeOfferPriceByOfferIdsResponseDTOPairs


encodeOfferPriceByOfferIdsResponseDTOWithTag : ( String, String ) -> OfferPriceByOfferIdsResponseDTO -> Json.Encode.Value
encodeOfferPriceByOfferIdsResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferPriceByOfferIdsResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferPriceByOfferIdsResponseDTOPairs : OfferPriceByOfferIdsResponseDTO -> List EncodedField
encodeOfferPriceByOfferIdsResponseDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "price" encodePriceDTO model.price
            , maybeEncode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeOfferPriceDTO : OfferPriceDTO -> Json.Encode.Value
encodeOfferPriceDTO =
    encodeObject << encodeOfferPriceDTOPairs


encodeOfferPriceDTOWithTag : ( String, String ) -> OfferPriceDTO -> Json.Encode.Value
encodeOfferPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferPriceDTOPairs : OfferPriceDTO -> List EncodedField
encodeOfferPriceDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "price" encodePriceDTO model.price
            ]
    in
    pairs


encodeOfferPriceListResponseDTO : OfferPriceListResponseDTO -> Json.Encode.Value
encodeOfferPriceListResponseDTO =
    encodeObject << encodeOfferPriceListResponseDTOPairs


encodeOfferPriceListResponseDTOWithTag : ( String, String ) -> OfferPriceListResponseDTO -> Json.Encode.Value
encodeOfferPriceListResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferPriceListResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferPriceListResponseDTOPairs : OfferPriceListResponseDTO -> List EncodedField
encodeOfferPriceListResponseDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferPriceResponseDTO) model.offers
            , maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , maybeEncode "total" Json.Encode.int model.total
            ]
    in
    pairs


encodeOfferPriceResponseDTO : OfferPriceResponseDTO -> Json.Encode.Value
encodeOfferPriceResponseDTO =
    encodeObject << encodeOfferPriceResponseDTOPairs


encodeOfferPriceResponseDTOWithTag : ( String, String ) -> OfferPriceResponseDTO -> Json.Encode.Value
encodeOfferPriceResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferPriceResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferPriceResponseDTOPairs : OfferPriceResponseDTO -> List EncodedField
encodeOfferPriceResponseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "price" encodePriceDTO model.price
            , maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeOfferProcessingNoteDTO : OfferProcessingNoteDTO -> Json.Encode.Value
encodeOfferProcessingNoteDTO =
    encodeObject << encodeOfferProcessingNoteDTOPairs


encodeOfferProcessingNoteDTOWithTag : ( String, String ) -> OfferProcessingNoteDTO -> Json.Encode.Value
encodeOfferProcessingNoteDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferProcessingNoteDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferProcessingNoteDTOPairs : OfferProcessingNoteDTO -> List EncodedField
encodeOfferProcessingNoteDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOfferProcessingNoteType model.type_
            , maybeEncode "payload" Json.Encode.string model.payload
            ]
    in
    pairs


stringFromOfferProcessingNoteType : OfferProcessingNoteType -> String
stringFromOfferProcessingNoteType model =
    case model of
        OfferProcessingNoteTypeASSORTMENT ->
            "ASSORTMENT"

        OfferProcessingNoteTypeCANCELLED ->
            "CANCELLED"

        OfferProcessingNoteTypeCONFLICTINGINFORMATION ->
            "CONFLICTING_INFORMATION"

        OfferProcessingNoteTypeOTHER ->
            "OTHER"

        OfferProcessingNoteTypeDEPARTMENTFROZEN ->
            "DEPARTMENT_FROZEN"

        OfferProcessingNoteTypeINCORRECTINFORMATION ->
            "INCORRECT_INFORMATION"

        OfferProcessingNoteTypeLEGALCONFLICT ->
            "LEGAL_CONFLICT"

        OfferProcessingNoteTypeNEEDCLASSIFICATIONINFORMATION ->
            "NEED_CLASSIFICATION_INFORMATION"

        OfferProcessingNoteTypeNEEDINFORMATION ->
            "NEED_INFORMATION"

        OfferProcessingNoteTypeNEEDPICTURES ->
            "NEED_PICTURES"

        OfferProcessingNoteTypeNEEDVENDOR ->
            "NEED_VENDOR"

        OfferProcessingNoteTypeNOCATEGORY ->
            "NO_CATEGORY"

        OfferProcessingNoteTypeNOKNOWLEDGE ->
            "NO_KNOWLEDGE"

        OfferProcessingNoteTypeNOPARAMETERSINSHOPTITLE ->
            "NO_PARAMETERS_IN_SHOP_TITLE"

        OfferProcessingNoteTypeNOSIZEMEASURE ->
            "NO_SIZE_MEASURE"

        OfferProcessingNoteTypeSAMPLELINE ->
            "SAMPLE_LINE"


encodeOfferProcessingNoteType : OfferProcessingNoteType -> Json.Encode.Value
encodeOfferProcessingNoteType =
    Json.Encode.string << stringFromOfferProcessingNoteType


encodeOfferProcessingStateDTO : OfferProcessingStateDTO -> Json.Encode.Value
encodeOfferProcessingStateDTO =
    encodeObject << encodeOfferProcessingStateDTOPairs


encodeOfferProcessingStateDTOWithTag : ( String, String ) -> OfferProcessingStateDTO -> Json.Encode.Value
encodeOfferProcessingStateDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferProcessingStateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferProcessingStateDTOPairs : OfferProcessingStateDTO -> List EncodedField
encodeOfferProcessingStateDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeOfferProcessingStatusType model.status
            , maybeEncodeNullable "notes" (Json.Encode.list encodeOfferProcessingNoteDTO) model.notes
            ]
    in
    pairs


stringFromOfferProcessingStatusType : OfferProcessingStatusType -> String
stringFromOfferProcessingStatusType model =
    case model of
        OfferProcessingStatusTypeUNKNOWN ->
            "UNKNOWN"

        OfferProcessingStatusTypeREADY ->
            "READY"

        OfferProcessingStatusTypeINWORK ->
            "IN_WORK"

        OfferProcessingStatusTypeNEEDINFO ->
            "NEED_INFO"

        OfferProcessingStatusTypeNEEDMAPPING ->
            "NEED_MAPPING"

        OfferProcessingStatusTypeNEEDCONTENT ->
            "NEED_CONTENT"

        OfferProcessingStatusTypeCONTENTPROCESSING ->
            "CONTENT_PROCESSING"

        OfferProcessingStatusTypeSUSPENDED ->
            "SUSPENDED"

        OfferProcessingStatusTypeREJECTED ->
            "REJECTED"

        OfferProcessingStatusTypeREVIEW ->
            "REVIEW"

        OfferProcessingStatusTypeCREATEERROR ->
            "CREATE_ERROR"

        OfferProcessingStatusTypeUPDATEERROR ->
            "UPDATE_ERROR"


encodeOfferProcessingStatusType : OfferProcessingStatusType -> Json.Encode.Value
encodeOfferProcessingStatusType =
    Json.Encode.string << stringFromOfferProcessingStatusType


encodeOfferRecommendationDTO : OfferRecommendationDTO -> Json.Encode.Value
encodeOfferRecommendationDTO =
    encodeObject << encodeOfferRecommendationDTOPairs


encodeOfferRecommendationDTOWithTag : ( String, String ) -> OfferRecommendationDTO -> Json.Encode.Value
encodeOfferRecommendationDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferRecommendationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferRecommendationDTOPairs : OfferRecommendationDTO -> List EncodedField
encodeOfferRecommendationDTOPairs model =
    let
        pairs =
            [ maybeEncode "offer" encodeOfferForRecommendationDTO model.offer
            , maybeEncode "recommendation" encodeOfferRecommendationInfoDTO model.recommendation
            ]
    in
    pairs


encodeOfferRecommendationInfoDTO : OfferRecommendationInfoDTO -> Json.Encode.Value
encodeOfferRecommendationInfoDTO =
    encodeObject << encodeOfferRecommendationInfoDTOPairs


encodeOfferRecommendationInfoDTOWithTag : ( String, String ) -> OfferRecommendationInfoDTO -> Json.Encode.Value
encodeOfferRecommendationInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferRecommendationInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferRecommendationInfoDTOPairs : OfferRecommendationInfoDTO -> List EncodedField
encodeOfferRecommendationInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "recommendedCofinancePrice" encodeBasePriceDTO model.recommendedCofinancePrice
            , maybeEncode "competitivenessThresholds" encodePriceCompetitivenessThresholdsDTO model.competitivenessThresholds
            ]
    in
    pairs


encodeOfferRecommendationsResultDTO : OfferRecommendationsResultDTO -> Json.Encode.Value
encodeOfferRecommendationsResultDTO =
    encodeObject << encodeOfferRecommendationsResultDTOPairs


encodeOfferRecommendationsResultDTOWithTag : ( String, String ) -> OfferRecommendationsResultDTO -> Json.Encode.Value
encodeOfferRecommendationsResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferRecommendationsResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferRecommendationsResultDTOPairs : OfferRecommendationsResultDTO -> List EncodedField
encodeOfferRecommendationsResultDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeScrollingPagerDTO model.paging
            , encode "offerRecommendations" (Json.Encode.list encodeOfferRecommendationDTO) model.offerRecommendations
            ]
    in
    pairs


encodeOfferSellingProgramDTO : OfferSellingProgramDTO -> Json.Encode.Value
encodeOfferSellingProgramDTO =
    encodeObject << encodeOfferSellingProgramDTOPairs


encodeOfferSellingProgramDTOWithTag : ( String, String ) -> OfferSellingProgramDTO -> Json.Encode.Value
encodeOfferSellingProgramDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferSellingProgramDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferSellingProgramDTOPairs : OfferSellingProgramDTO -> List EncodedField
encodeOfferSellingProgramDTOPairs model =
    let
        pairs =
            [ encode "sellingProgram" encodeSellingProgramType model.sellingProgram
            , encode "status" encodeOfferSellingProgramStatusType model.status
            ]
    in
    pairs


stringFromOfferSellingProgramStatusType : OfferSellingProgramStatusType -> String
stringFromOfferSellingProgramStatusType model =
    case model of
        OfferSellingProgramStatusTypeFINE ->
            "FINE"

        OfferSellingProgramStatusTypeREJECT ->
            "REJECT"


encodeOfferSellingProgramStatusType : OfferSellingProgramStatusType -> Json.Encode.Value
encodeOfferSellingProgramStatusType =
    Json.Encode.string << stringFromOfferSellingProgramStatusType


stringFromOfferType : OfferType -> String
stringFromOfferType model =
    case model of
        OfferTypeDEFAULT ->
            "DEFAULT"

        OfferTypeMEDICINE ->
            "MEDICINE"

        OfferTypeBOOK ->
            "BOOK"

        OfferTypeAUDIOBOOK ->
            "AUDIOBOOK"

        OfferTypeARTISTTITLE ->
            "ARTIST_TITLE"

        OfferTypeONDEMAND ->
            "ON_DEMAND"


encodeOfferType : OfferType -> Json.Encode.Value
encodeOfferType =
    Json.Encode.string << stringFromOfferType


encodeOfferVendor : OfferVendor -> Json.Encode.Value
encodeOfferVendor =
    encodeObject << encodeOfferVendorPairs


encodeOfferVendorWithTag : ( String, String ) -> OfferVendor -> Json.Encode.Value
encodeOfferVendorWithTag (tagField, tag) model =
    encodeObject (encodeOfferVendorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferVendorPairs : OfferVendor -> List EncodedField
encodeOfferVendorPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOfferVendorCode : OfferVendorCode -> Json.Encode.Value
encodeOfferVendorCode =
    encodeObject << encodeOfferVendorCodePairs


encodeOfferVendorCodeWithTag : ( String, String ) -> OfferVendorCode -> Json.Encode.Value
encodeOfferVendorCodeWithTag (tagField, tag) model =
    encodeObject (encodeOfferVendorCodePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferVendorCodePairs : OfferVendorCode -> List EncodedField
encodeOfferVendorCodePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOfferWeightDimensionsDTO : OfferWeightDimensionsDTO -> Json.Encode.Value
encodeOfferWeightDimensionsDTO =
    encodeObject << encodeOfferWeightDimensionsDTOPairs


encodeOfferWeightDimensionsDTOWithTag : ( String, String ) -> OfferWeightDimensionsDTO -> Json.Encode.Value
encodeOfferWeightDimensionsDTOWithTag (tagField, tag) model =
    encodeObject (encodeOfferWeightDimensionsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOfferWeightDimensionsDTOPairs : OfferWeightDimensionsDTO -> List EncodedField
encodeOfferWeightDimensionsDTOPairs model =
    let
        pairs =
            [ encode "length" Json.Encode.float model.length
            , encode "width" Json.Encode.float model.width
            , encode "height" Json.Encode.float model.height
            , encode "weight" Json.Encode.float model.weight
            ]
    in
    pairs


encodeOffersDTO : OffersDTO -> Json.Encode.Value
encodeOffersDTO =
    encodeObject << encodeOffersDTOPairs


encodeOffersDTOWithTag : ( String, String ) -> OffersDTO -> Json.Encode.Value
encodeOffersDTOWithTag (tagField, tag) model =
    encodeObject (encodeOffersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOffersDTOPairs : OffersDTO -> List EncodedField
encodeOffersDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferDTO) model.offers
            ]
    in
    pairs


encodeOptionValuesLimitedDTO : OptionValuesLimitedDTO -> Json.Encode.Value
encodeOptionValuesLimitedDTO =
    encodeObject << encodeOptionValuesLimitedDTOPairs


encodeOptionValuesLimitedDTOWithTag : ( String, String ) -> OptionValuesLimitedDTO -> Json.Encode.Value
encodeOptionValuesLimitedDTOWithTag (tagField, tag) model =
    encodeObject (encodeOptionValuesLimitedDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOptionValuesLimitedDTOPairs : OptionValuesLimitedDTO -> List EncodedField
encodeOptionValuesLimitedDTOPairs model =
    let
        pairs =
            [ encode "limitingOptionValueId" Json.Encode.int model.limitingOptionValueId
            , encode "optionValueIds" (Json.Encode.list Json.Encode.int) model.optionValueIds
            ]
    in
    pairs


encodeOrderBoxLayoutDTO : OrderBoxLayoutDTO -> Json.Encode.Value
encodeOrderBoxLayoutDTO =
    encodeObject << encodeOrderBoxLayoutDTOPairs


encodeOrderBoxLayoutDTOWithTag : ( String, String ) -> OrderBoxLayoutDTO -> Json.Encode.Value
encodeOrderBoxLayoutDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBoxLayoutDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBoxLayoutDTOPairs : OrderBoxLayoutDTO -> List EncodedField
encodeOrderBoxLayoutDTOPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeOrderBoxLayoutItemDTO) model.items
            ]
    in
    pairs


encodeOrderBoxLayoutItemDTO : OrderBoxLayoutItemDTO -> Json.Encode.Value
encodeOrderBoxLayoutItemDTO =
    encodeObject << encodeOrderBoxLayoutItemDTOPairs


encodeOrderBoxLayoutItemDTOWithTag : ( String, String ) -> OrderBoxLayoutItemDTO -> Json.Encode.Value
encodeOrderBoxLayoutItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBoxLayoutItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBoxLayoutItemDTOPairs : OrderBoxLayoutItemDTO -> List EncodedField
encodeOrderBoxLayoutItemDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , maybeEncode "fullCount" Json.Encode.int model.fullCount
            , maybeEncode "partialCount" encodeOrderBoxLayoutPartialCountDTO model.partialCount
            , maybeEncodeNullable "instances" (Json.Encode.list encodeBriefOrderItemInstanceDTO) model.instances
            ]
    in
    pairs


encodeOrderBoxLayoutPartialCountDTO : OrderBoxLayoutPartialCountDTO -> Json.Encode.Value
encodeOrderBoxLayoutPartialCountDTO =
    encodeObject << encodeOrderBoxLayoutPartialCountDTOPairs


encodeOrderBoxLayoutPartialCountDTOWithTag : ( String, String ) -> OrderBoxLayoutPartialCountDTO -> Json.Encode.Value
encodeOrderBoxLayoutPartialCountDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBoxLayoutPartialCountDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBoxLayoutPartialCountDTOPairs : OrderBoxLayoutPartialCountDTO -> List EncodedField
encodeOrderBoxLayoutPartialCountDTOPairs model =
    let
        pairs =
            [ encode "current" Json.Encode.int model.current
            , encode "total" Json.Encode.int model.total
            ]
    in
    pairs


encodeOrderBoxesLayoutDTO : OrderBoxesLayoutDTO -> Json.Encode.Value
encodeOrderBoxesLayoutDTO =
    encodeObject << encodeOrderBoxesLayoutDTOPairs


encodeOrderBoxesLayoutDTOWithTag : ( String, String ) -> OrderBoxesLayoutDTO -> Json.Encode.Value
encodeOrderBoxesLayoutDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBoxesLayoutDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBoxesLayoutDTOPairs : OrderBoxesLayoutDTO -> List EncodedField
encodeOrderBoxesLayoutDTOPairs model =
    let
        pairs =
            [ encode "boxes" (Json.Encode.list encodeEnrichedOrderBoxLayoutDTO) model.boxes
            ]
    in
    pairs


encodeOrderBusinessBuyerDTO : OrderBusinessBuyerDTO -> Json.Encode.Value
encodeOrderBusinessBuyerDTO =
    encodeObject << encodeOrderBusinessBuyerDTOPairs


encodeOrderBusinessBuyerDTOWithTag : ( String, String ) -> OrderBusinessBuyerDTO -> Json.Encode.Value
encodeOrderBusinessBuyerDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBusinessBuyerDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBusinessBuyerDTOPairs : OrderBusinessBuyerDTO -> List EncodedField
encodeOrderBusinessBuyerDTOPairs model =
    let
        pairs =
            [ maybeEncode "inn" Json.Encode.string model.inn
            , maybeEncode "kpp" Json.Encode.string model.kpp
            , maybeEncode "organizationName" Json.Encode.string model.organizationName
            , maybeEncode "organizationJurAddress" Json.Encode.string model.organizationJurAddress
            ]
    in
    pairs


encodeOrderBusinessDocumentsDTO : OrderBusinessDocumentsDTO -> Json.Encode.Value
encodeOrderBusinessDocumentsDTO =
    encodeObject << encodeOrderBusinessDocumentsDTOPairs


encodeOrderBusinessDocumentsDTOWithTag : ( String, String ) -> OrderBusinessDocumentsDTO -> Json.Encode.Value
encodeOrderBusinessDocumentsDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBusinessDocumentsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBusinessDocumentsDTOPairs : OrderBusinessDocumentsDTO -> List EncodedField
encodeOrderBusinessDocumentsDTOPairs model =
    let
        pairs =
            [ maybeEncode "upd" encodeDocumentDTO model.upd
            , maybeEncode "ukd" encodeDocumentDTO model.ukd
            , maybeEncode "torgTwelve" encodeDocumentDTO model.torgTwelve
            , maybeEncode "sf" encodeDocumentDTO model.sf
            , maybeEncode "ksf" encodeDocumentDTO model.ksf
            ]
    in
    pairs


encodeOrderBuyerBasicInfoDTO : OrderBuyerBasicInfoDTO -> Json.Encode.Value
encodeOrderBuyerBasicInfoDTO =
    encodeObject << encodeOrderBuyerBasicInfoDTOPairs


encodeOrderBuyerBasicInfoDTOWithTag : ( String, String ) -> OrderBuyerBasicInfoDTO -> Json.Encode.Value
encodeOrderBuyerBasicInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBuyerBasicInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBuyerBasicInfoDTOPairs : OrderBuyerBasicInfoDTO -> List EncodedField
encodeOrderBuyerBasicInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "lastName" Json.Encode.string model.lastName
            , maybeEncode "firstName" Json.Encode.string model.firstName
            , maybeEncode "middleName" Json.Encode.string model.middleName
            , maybeEncode "type" encodeOrderBuyerType model.type_
            ]
    in
    pairs


encodeOrderBuyerDTO : OrderBuyerDTO -> Json.Encode.Value
encodeOrderBuyerDTO =
    encodeObject << encodeOrderBuyerDTOPairs


encodeOrderBuyerDTOWithTag : ( String, String ) -> OrderBuyerDTO -> Json.Encode.Value
encodeOrderBuyerDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBuyerDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBuyerDTOPairs : OrderBuyerDTO -> List EncodedField
encodeOrderBuyerDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "lastName" Json.Encode.string model.lastName
            , maybeEncode "firstName" Json.Encode.string model.firstName
            , maybeEncode "middleName" Json.Encode.string model.middleName
            , maybeEncode "type" encodeOrderBuyerType model.type_
            ]
    in
    pairs


encodeOrderBuyerInfoDTO : OrderBuyerInfoDTO -> Json.Encode.Value
encodeOrderBuyerInfoDTO =
    encodeObject << encodeOrderBuyerInfoDTOPairs


encodeOrderBuyerInfoDTOWithTag : ( String, String ) -> OrderBuyerInfoDTO -> Json.Encode.Value
encodeOrderBuyerInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderBuyerInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderBuyerInfoDTOPairs : OrderBuyerInfoDTO -> List EncodedField
encodeOrderBuyerInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "lastName" Json.Encode.string model.lastName
            , maybeEncode "firstName" Json.Encode.string model.firstName
            , maybeEncode "middleName" Json.Encode.string model.middleName
            , maybeEncode "type" encodeOrderBuyerType model.type_
            , maybeEncode "phone" Json.Encode.string model.phone
            ]
    in
    pairs


stringFromOrderBuyerType : OrderBuyerType -> String
stringFromOrderBuyerType model =
    case model of
        OrderBuyerTypePERSON ->
            "PERSON"

        OrderBuyerTypeBUSINESS ->
            "BUSINESS"


encodeOrderBuyerType : OrderBuyerType -> Json.Encode.Value
encodeOrderBuyerType =
    Json.Encode.string << stringFromOrderBuyerType


stringFromOrderCancellationReasonType : OrderCancellationReasonType -> String
stringFromOrderCancellationReasonType model =
    case model of
        OrderCancellationReasonTypeDELIVERED ->
            "ORDER_DELIVERED"

        OrderCancellationReasonTypeINDELIVERY ->
            "ORDER_IN_DELIVERY"


encodeOrderCancellationReasonType : OrderCancellationReasonType -> Json.Encode.Value
encodeOrderCancellationReasonType =
    Json.Encode.string << stringFromOrderCancellationReasonType


encodeOrderCourierDTO : OrderCourierDTO -> Json.Encode.Value
encodeOrderCourierDTO =
    encodeObject << encodeOrderCourierDTOPairs


encodeOrderCourierDTOWithTag : ( String, String ) -> OrderCourierDTO -> Json.Encode.Value
encodeOrderCourierDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderCourierDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderCourierDTOPairs : OrderCourierDTO -> List EncodedField
encodeOrderCourierDTOPairs model =
    let
        pairs =
            [ maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "phone" Json.Encode.string model.phone
            , maybeEncode "phoneExtension" Json.Encode.string model.phoneExtension
            , maybeEncode "vehicleNumber" Json.Encode.string model.vehicleNumber
            , maybeEncode "vehicleDescription" Json.Encode.string model.vehicleDescription
            ]
    in
    pairs


encodeOrderDTO : OrderDTO -> Json.Encode.Value
encodeOrderDTO =
    encodeObject << encodeOrderDTOPairs


encodeOrderDTOWithTag : ( String, String ) -> OrderDTO -> Json.Encode.Value
encodeOrderDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDTOPairs : OrderDTO -> List EncodedField
encodeOrderDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "status" encodeOrderStatusType model.status
            , maybeEncode "substatus" encodeOrderSubstatusType model.substatus
            , maybeEncode "creationDate" Json.Encode.string model.creationDate
            , maybeEncode "updatedAt" Json.Encode.string model.updatedAt
            , maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "itemsTotal" Json.Encode.float model.itemsTotal
            , maybeEncode "deliveryTotal" Json.Encode.float model.deliveryTotal
            , maybeEncode "buyerItemsTotal" Json.Encode.float model.buyerItemsTotal
            , maybeEncode "buyerTotal" Json.Encode.float model.buyerTotal
            , maybeEncode "buyerItemsTotalBeforeDiscount" Json.Encode.float model.buyerItemsTotalBeforeDiscount
            , maybeEncode "buyerTotalBeforeDiscount" Json.Encode.float model.buyerTotalBeforeDiscount
            , maybeEncode "paymentType" encodeOrderPaymentType model.paymentType
            , maybeEncode "paymentMethod" encodeOrderPaymentMethodType model.paymentMethod
            , maybeEncode "fake" Json.Encode.bool model.fake
            , encode "items" (Json.Encode.list encodeOrderItemDTO) model.items
            , maybeEncodeNullable "subsidies" (Json.Encode.list encodeOrderSubsidyDTO) model.subsidies
            , maybeEncode "delivery" encodeOrderDeliveryDTO model.delivery
            , maybeEncode "buyer" encodeOrderBuyerDTO model.buyer
            , maybeEncode "notes" Json.Encode.string model.notes
            , maybeEncode "taxSystem" encodeOrderTaxSystemType model.taxSystem
            , maybeEncode "cancelRequested" Json.Encode.bool model.cancelRequested
            , maybeEncode "expiryDate" Json.Encode.string model.expiryDate
            ]
    in
    pairs


encodeOrderDeliveryAddressDTO : OrderDeliveryAddressDTO -> Json.Encode.Value
encodeOrderDeliveryAddressDTO =
    encodeObject << encodeOrderDeliveryAddressDTOPairs


encodeOrderDeliveryAddressDTOWithTag : ( String, String ) -> OrderDeliveryAddressDTO -> Json.Encode.Value
encodeOrderDeliveryAddressDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDeliveryAddressDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDeliveryAddressDTOPairs : OrderDeliveryAddressDTO -> List EncodedField
encodeOrderDeliveryAddressDTOPairs model =
    let
        pairs =
            [ maybeEncode "country" Json.Encode.string model.country
            , maybeEncode "postcode" Json.Encode.string model.postcode
            , maybeEncode "city" Json.Encode.string model.city
            , maybeEncode "district" Json.Encode.string model.district
            , maybeEncode "subway" Json.Encode.string model.subway
            , maybeEncode "street" Json.Encode.string model.street
            , maybeEncode "house" Json.Encode.string model.house
            , maybeEncode "block" Json.Encode.string model.block
            , maybeEncode "entrance" Json.Encode.string model.entrance
            , maybeEncode "entryphone" Json.Encode.string model.entryphone
            , maybeEncode "floor" Json.Encode.string model.floor
            , maybeEncode "apartment" Json.Encode.string model.apartment
            , maybeEncode "phone" Json.Encode.string model.phone
            , maybeEncode "recipient" Json.Encode.string model.recipient
            , maybeEncode "gps" encodeGpsDTO model.gps
            ]
    in
    pairs


encodeOrderDeliveryDTO : OrderDeliveryDTO -> Json.Encode.Value
encodeOrderDeliveryDTO =
    encodeObject << encodeOrderDeliveryDTOPairs


encodeOrderDeliveryDTOWithTag : ( String, String ) -> OrderDeliveryDTO -> Json.Encode.Value
encodeOrderDeliveryDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDeliveryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDeliveryDTOPairs : OrderDeliveryDTO -> List EncodedField
encodeOrderDeliveryDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "type" encodeOrderDeliveryType model.type_
            , maybeEncode "serviceName" Json.Encode.string model.serviceName
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "deliveryPartnerType" encodeOrderDeliveryPartnerType model.deliveryPartnerType
            , maybeEncode "courier" encodeOrderCourierDTO model.courier
            , maybeEncode "dates" encodeOrderDeliveryDatesDTO model.dates
            , maybeEncode "region" encodeRegionDTO model.region
            , maybeEncode "address" encodeOrderDeliveryAddressDTO model.address
            , maybeEncode "vat" encodeOrderVatType model.vat
            , maybeEncode "deliveryServiceId" Json.Encode.int model.deliveryServiceId
            , maybeEncode "liftType" encodeOrderLiftType model.liftType
            , maybeEncode "liftPrice" Json.Encode.float model.liftPrice
            , maybeEncode "outletCode" Json.Encode.string model.outletCode
            , maybeEncode "outletStorageLimitDate" Json.Encode.string model.outletStorageLimitDate
            , maybeEncode "dispatchType" encodeOrderDeliveryDispatchType model.dispatchType
            , maybeEncodeNullable "tracks" (Json.Encode.list encodeOrderTrackDTO) model.tracks
            , maybeEncodeNullable "shipments" (Json.Encode.list encodeOrderShipmentDTO) model.shipments
            , maybeEncode "estimated" Json.Encode.bool model.estimated
            , maybeEncode "eacType" encodeOrderDeliveryEacType model.eacType
            , maybeEncode "eacCode" Json.Encode.string model.eacCode
            ]
    in
    pairs


encodeOrderDeliveryDateDTO : OrderDeliveryDateDTO -> Json.Encode.Value
encodeOrderDeliveryDateDTO =
    encodeObject << encodeOrderDeliveryDateDTOPairs


encodeOrderDeliveryDateDTOWithTag : ( String, String ) -> OrderDeliveryDateDTO -> Json.Encode.Value
encodeOrderDeliveryDateDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDeliveryDateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDeliveryDateDTOPairs : OrderDeliveryDateDTO -> List EncodedField
encodeOrderDeliveryDateDTOPairs model =
    let
        pairs =
            [ encode "toDate" Api.Time.encodeDate model.toDate
            ]
    in
    pairs


stringFromOrderDeliveryDateReasonType : OrderDeliveryDateReasonType -> String
stringFromOrderDeliveryDateReasonType model =
    case model of
        OrderDeliveryDateReasonTypeUSERMOVEDDELIVERYDATES ->
            "USER_MOVED_DELIVERY_DATES"

        OrderDeliveryDateReasonTypePARTNERMOVEDDELIVERYDATES ->
            "PARTNER_MOVED_DELIVERY_DATES"


encodeOrderDeliveryDateReasonType : OrderDeliveryDateReasonType -> Json.Encode.Value
encodeOrderDeliveryDateReasonType =
    Json.Encode.string << stringFromOrderDeliveryDateReasonType


encodeOrderDeliveryDatesDTO : OrderDeliveryDatesDTO -> Json.Encode.Value
encodeOrderDeliveryDatesDTO =
    encodeObject << encodeOrderDeliveryDatesDTOPairs


encodeOrderDeliveryDatesDTOWithTag : ( String, String ) -> OrderDeliveryDatesDTO -> Json.Encode.Value
encodeOrderDeliveryDatesDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDeliveryDatesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDeliveryDatesDTOPairs : OrderDeliveryDatesDTO -> List EncodedField
encodeOrderDeliveryDatesDTOPairs model =
    let
        pairs =
            [ maybeEncode "fromDate" Json.Encode.string model.fromDate
            , maybeEncode "toDate" Json.Encode.string model.toDate
            , maybeEncode "fromTime" Json.Encode.string model.fromTime
            , maybeEncode "toTime" Json.Encode.string model.toTime
            , maybeEncode "realDeliveryDate" Json.Encode.string model.realDeliveryDate
            ]
    in
    pairs


stringFromOrderDeliveryDispatchType : OrderDeliveryDispatchType -> String
stringFromOrderDeliveryDispatchType model =
    case model of
        OrderDeliveryDispatchTypeUNKNOWN ->
            "UNKNOWN"

        OrderDeliveryDispatchTypeBUYER ->
            "BUYER"

        OrderDeliveryDispatchTypeMARKETPARTNEROUTLET ->
            "MARKET_PARTNER_OUTLET"

        OrderDeliveryDispatchTypeMARKETBRANDEDOUTLET ->
            "MARKET_BRANDED_OUTLET"

        OrderDeliveryDispatchTypeSHOPOUTLET ->
            "SHOP_OUTLET"

        OrderDeliveryDispatchTypeDROPOFF ->
            "DROPOFF"


encodeOrderDeliveryDispatchType : OrderDeliveryDispatchType -> Json.Encode.Value
encodeOrderDeliveryDispatchType =
    Json.Encode.string << stringFromOrderDeliveryDispatchType


stringFromOrderDeliveryEacType : OrderDeliveryEacType -> String
stringFromOrderDeliveryEacType model =
    case model of
        OrderDeliveryEacTypeMERCHANTTOCOURIER ->
            "MERCHANT_TO_COURIER"

        OrderDeliveryEacTypeCOURIERTOMERCHANT ->
            "COURIER_TO_MERCHANT"

        OrderDeliveryEacTypeCHECKINGBYMERCHANT ->
            "CHECKING_BY_MERCHANT"


encodeOrderDeliveryEacType : OrderDeliveryEacType -> Json.Encode.Value
encodeOrderDeliveryEacType =
    Json.Encode.string << stringFromOrderDeliveryEacType


stringFromOrderDeliveryPartnerType : OrderDeliveryPartnerType -> String
stringFromOrderDeliveryPartnerType model =
    case model of
        OrderDeliveryPartnerTypeSHOP ->
            "SHOP"

        OrderDeliveryPartnerTypeYANDEXMARKET ->
            "YANDEX_MARKET"

        OrderDeliveryPartnerTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderDeliveryPartnerType : OrderDeliveryPartnerType -> Json.Encode.Value
encodeOrderDeliveryPartnerType =
    Json.Encode.string << stringFromOrderDeliveryPartnerType


stringFromOrderDeliveryType : OrderDeliveryType -> String
stringFromOrderDeliveryType model =
    case model of
        OrderDeliveryTypeDELIVERY ->
            "DELIVERY"

        OrderDeliveryTypePICKUP ->
            "PICKUP"

        OrderDeliveryTypePOST ->
            "POST"

        OrderDeliveryTypeDIGITAL ->
            "DIGITAL"

        OrderDeliveryTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderDeliveryType : OrderDeliveryType -> Json.Encode.Value
encodeOrderDeliveryType =
    Json.Encode.string << stringFromOrderDeliveryType


encodeOrderDigitalItemDTO : OrderDigitalItemDTO -> Json.Encode.Value
encodeOrderDigitalItemDTO =
    encodeObject << encodeOrderDigitalItemDTOPairs


encodeOrderDigitalItemDTOWithTag : ( String, String ) -> OrderDigitalItemDTO -> Json.Encode.Value
encodeOrderDigitalItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderDigitalItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderDigitalItemDTOPairs : OrderDigitalItemDTO -> List EncodedField
encodeOrderDigitalItemDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "code" Json.Encode.string model.code
            , encode "slip" Json.Encode.string model.slip
            , encode "activate_till" Api.Time.encodeDate model.activateTill
            ]
    in
    pairs


stringFromOrderDocumentStatusType : OrderDocumentStatusType -> String
stringFromOrderDocumentStatusType model =
    case model of
        OrderDocumentStatusTypeREADY ->
            "READY"

        OrderDocumentStatusTypeNOTREADY ->
            "NOT_READY"


encodeOrderDocumentStatusType : OrderDocumentStatusType -> Json.Encode.Value
encodeOrderDocumentStatusType =
    Json.Encode.string << stringFromOrderDocumentStatusType


encodeOrderItemDTO : OrderItemDTO -> Json.Encode.Value
encodeOrderItemDTO =
    encodeObject << encodeOrderItemDTOPairs


encodeOrderItemDTOWithTag : ( String, String ) -> OrderItemDTO -> Json.Encode.Value
encodeOrderItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemDTOPairs : OrderItemDTO -> List EncodedField
encodeOrderItemDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "offerName" Json.Encode.string model.offerName
            , maybeEncode "price" Json.Encode.float model.price
            , maybeEncode "buyerPrice" Json.Encode.float model.buyerPrice
            , maybeEncode "buyerPriceBeforeDiscount" Json.Encode.float model.buyerPriceBeforeDiscount
            , maybeEncode "priceBeforeDiscount" Json.Encode.float model.priceBeforeDiscount
            , maybeEncode "count" Json.Encode.int model.count
            , maybeEncode "vat" encodeOrderVatType model.vat
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "subsidy" Json.Encode.float model.subsidy
            , maybeEncode "partnerWarehouseId" Json.Encode.string model.partnerWarehouseId
            , maybeEncodeNullable "promos" (Json.Encode.list encodeOrderItemPromoDTO) model.promos
            , maybeEncodeNullable "instances" (Json.Encode.list encodeOrderItemInstanceDTO) model.instances
            , maybeEncodeNullable "details" (Json.Encode.list encodeOrderItemDetailDTO) model.details
            , maybeEncodeNullable "subsidies" (Json.Encode.list encodeOrderItemSubsidyDTO) model.subsidies
            , maybeEncodeNullable "requiredInstanceTypes" (Json.Encode.list encodeOrderItemInstanceType) model.requiredInstanceTypes
            ]
    in
    pairs


encodeOrderItemDetailDTO : OrderItemDetailDTO -> Json.Encode.Value
encodeOrderItemDetailDTO =
    encodeObject << encodeOrderItemDetailDTOPairs


encodeOrderItemDetailDTOWithTag : ( String, String ) -> OrderItemDetailDTO -> Json.Encode.Value
encodeOrderItemDetailDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemDetailDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemDetailDTOPairs : OrderItemDetailDTO -> List EncodedField
encodeOrderItemDetailDTOPairs model =
    let
        pairs =
            [ maybeEncode "itemCount" Json.Encode.int model.itemCount
            , maybeEncode "itemStatus" encodeOrderItemStatusType model.itemStatus
            , maybeEncode "updateDate" Json.Encode.string model.updateDate
            ]
    in
    pairs


encodeOrderItemInstanceDTO : OrderItemInstanceDTO -> Json.Encode.Value
encodeOrderItemInstanceDTO =
    encodeObject << encodeOrderItemInstanceDTOPairs


encodeOrderItemInstanceDTOWithTag : ( String, String ) -> OrderItemInstanceDTO -> Json.Encode.Value
encodeOrderItemInstanceDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemInstanceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemInstanceDTOPairs : OrderItemInstanceDTO -> List EncodedField
encodeOrderItemInstanceDTOPairs model =
    let
        pairs =
            [ maybeEncode "cis" Json.Encode.string model.cis
            , maybeEncode "cisFull" Json.Encode.string model.cisFull
            , maybeEncode "uin" Json.Encode.string model.uin
            , maybeEncode "rnpt" Json.Encode.string model.rnpt
            , maybeEncode "gtd" Json.Encode.string model.gtd
            ]
    in
    pairs


encodeOrderItemInstanceModificationDTO : OrderItemInstanceModificationDTO -> Json.Encode.Value
encodeOrderItemInstanceModificationDTO =
    encodeObject << encodeOrderItemInstanceModificationDTOPairs


encodeOrderItemInstanceModificationDTOWithTag : ( String, String ) -> OrderItemInstanceModificationDTO -> Json.Encode.Value
encodeOrderItemInstanceModificationDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemInstanceModificationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemInstanceModificationDTOPairs : OrderItemInstanceModificationDTO -> List EncodedField
encodeOrderItemInstanceModificationDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "instances" (Json.Encode.list encodeBriefOrderItemInstanceDTO) model.instances
            ]
    in
    pairs


stringFromOrderItemInstanceType : OrderItemInstanceType -> String
stringFromOrderItemInstanceType model =
    case model of
        OrderItemInstanceTypeCIS ->
            "CIS"

        OrderItemInstanceTypeUIN ->
            "UIN"

        OrderItemInstanceTypeRNPT ->
            "RNPT"

        OrderItemInstanceTypeGTD ->
            "GTD"


encodeOrderItemInstanceType : OrderItemInstanceType -> Json.Encode.Value
encodeOrderItemInstanceType =
    Json.Encode.string << stringFromOrderItemInstanceType


encodeOrderItemModificationDTO : OrderItemModificationDTO -> Json.Encode.Value
encodeOrderItemModificationDTO =
    encodeObject << encodeOrderItemModificationDTOPairs


encodeOrderItemModificationDTOWithTag : ( String, String ) -> OrderItemModificationDTO -> Json.Encode.Value
encodeOrderItemModificationDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemModificationDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemModificationDTOPairs : OrderItemModificationDTO -> List EncodedField
encodeOrderItemModificationDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "count" Json.Encode.int model.count
            , maybeEncodeNullable "instances" (Json.Encode.list encodeBriefOrderItemInstanceDTO) model.instances
            ]
    in
    pairs


encodeOrderItemPromoDTO : OrderItemPromoDTO -> Json.Encode.Value
encodeOrderItemPromoDTO =
    encodeObject << encodeOrderItemPromoDTOPairs


encodeOrderItemPromoDTOWithTag : ( String, String ) -> OrderItemPromoDTO -> Json.Encode.Value
encodeOrderItemPromoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemPromoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemPromoDTOPairs : OrderItemPromoDTO -> List EncodedField
encodeOrderItemPromoDTOPairs model =
    let
        pairs =
            [ encode "type" encodeOrderPromoType model.type_
            , maybeEncode "discount" Json.Encode.float model.discount
            , maybeEncode "subsidy" Json.Encode.float model.subsidy
            , maybeEncode "shopPromoId" Json.Encode.string model.shopPromoId
            , maybeEncode "marketPromoId" Json.Encode.string model.marketPromoId
            ]
    in
    pairs


stringFromOrderItemStatusType : OrderItemStatusType -> String
stringFromOrderItemStatusType model =
    case model of
        OrderItemStatusTypeREJECTED ->
            "REJECTED"

        OrderItemStatusTypeRETURNED ->
            "RETURNED"


encodeOrderItemStatusType : OrderItemStatusType -> Json.Encode.Value
encodeOrderItemStatusType =
    Json.Encode.string << stringFromOrderItemStatusType


encodeOrderItemSubsidyDTO : OrderItemSubsidyDTO -> Json.Encode.Value
encodeOrderItemSubsidyDTO =
    encodeObject << encodeOrderItemSubsidyDTOPairs


encodeOrderItemSubsidyDTOWithTag : ( String, String ) -> OrderItemSubsidyDTO -> Json.Encode.Value
encodeOrderItemSubsidyDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemSubsidyDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemSubsidyDTOPairs : OrderItemSubsidyDTO -> List EncodedField
encodeOrderItemSubsidyDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOrderItemSubsidyType model.type_
            , maybeEncode "amount" Json.Encode.float model.amount
            ]
    in
    pairs


stringFromOrderItemSubsidyType : OrderItemSubsidyType -> String
stringFromOrderItemSubsidyType model =
    case model of
        OrderItemSubsidyTypeYANDEXCASHBACK ->
            "YANDEX_CASHBACK"

        OrderItemSubsidyTypeSUBSIDY ->
            "SUBSIDY"


encodeOrderItemSubsidyType : OrderItemSubsidyType -> Json.Encode.Value
encodeOrderItemSubsidyType =
    Json.Encode.string << stringFromOrderItemSubsidyType


stringFromOrderItemsModificationRequestReasonType : OrderItemsModificationRequestReasonType -> String
stringFromOrderItemsModificationRequestReasonType model =
    case model of
        OrderItemsModificationRequestReasonTypePARTNERREQUESTEDREMOVE ->
            "PARTNER_REQUESTED_REMOVE"

        OrderItemsModificationRequestReasonTypeUSERREQUESTEDREMOVE ->
            "USER_REQUESTED_REMOVE"


encodeOrderItemsModificationRequestReasonType : OrderItemsModificationRequestReasonType -> Json.Encode.Value
encodeOrderItemsModificationRequestReasonType =
    Json.Encode.string << stringFromOrderItemsModificationRequestReasonType


encodeOrderItemsModificationResultDTO : OrderItemsModificationResultDTO -> Json.Encode.Value
encodeOrderItemsModificationResultDTO =
    encodeObject << encodeOrderItemsModificationResultDTOPairs


encodeOrderItemsModificationResultDTOWithTag : ( String, String ) -> OrderItemsModificationResultDTO -> Json.Encode.Value
encodeOrderItemsModificationResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderItemsModificationResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderItemsModificationResultDTOPairs : OrderItemsModificationResultDTO -> List EncodedField
encodeOrderItemsModificationResultDTOPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeBriefOrderItemDTO) model.items
            ]
    in
    pairs


encodeOrderLabelDTO : OrderLabelDTO -> Json.Encode.Value
encodeOrderLabelDTO =
    encodeObject << encodeOrderLabelDTOPairs


encodeOrderLabelDTOWithTag : ( String, String ) -> OrderLabelDTO -> Json.Encode.Value
encodeOrderLabelDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderLabelDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderLabelDTOPairs : OrderLabelDTO -> List EncodedField
encodeOrderLabelDTOPairs model =
    let
        pairs =
            [ encode "orderId" Json.Encode.int model.orderId
            , encode "placesNumber" Json.Encode.int model.placesNumber
            , encode "url" Json.Encode.string model.url
            , encode "parcelBoxLabels" (Json.Encode.list encodeParcelBoxLabelDTO) model.parcelBoxLabels
            ]
    in
    pairs


stringFromOrderLiftType : OrderLiftType -> String
stringFromOrderLiftType model =
    case model of
        OrderLiftTypeNOTNEEDED ->
            "NOT_NEEDED"

        OrderLiftTypeMANUAL ->
            "MANUAL"

        OrderLiftTypeELEVATOR ->
            "ELEVATOR"

        OrderLiftTypeCARGOELEVATOR ->
            "CARGO_ELEVATOR"

        OrderLiftTypeFREE ->
            "FREE"

        OrderLiftTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderLiftType : OrderLiftType -> Json.Encode.Value
encodeOrderLiftType =
    Json.Encode.string << stringFromOrderLiftType


encodeOrderParcelBoxDTO : OrderParcelBoxDTO -> Json.Encode.Value
encodeOrderParcelBoxDTO =
    encodeObject << encodeOrderParcelBoxDTOPairs


encodeOrderParcelBoxDTOWithTag : ( String, String ) -> OrderParcelBoxDTO -> Json.Encode.Value
encodeOrderParcelBoxDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderParcelBoxDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderParcelBoxDTOPairs : OrderParcelBoxDTO -> List EncodedField
encodeOrderParcelBoxDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "fulfilmentId" Json.Encode.string model.fulfilmentId
            ]
    in
    pairs


stringFromOrderPaymentMethodType : OrderPaymentMethodType -> String
stringFromOrderPaymentMethodType model =
    case model of
        OrderPaymentMethodTypeCASHONDELIVERY ->
            "CASH_ON_DELIVERY"

        OrderPaymentMethodTypeCARDONDELIVERY ->
            "CARD_ON_DELIVERY"

        OrderPaymentMethodTypeBOUNDCARDONDELIVERY ->
            "BOUND_CARD_ON_DELIVERY"

        OrderPaymentMethodTypeYANDEX ->
            "YANDEX"

        OrderPaymentMethodTypeAPPLEPAY ->
            "APPLE_PAY"

        OrderPaymentMethodTypeEXTERNALCERTIFICATE ->
            "EXTERNAL_CERTIFICATE"

        OrderPaymentMethodTypeCREDIT ->
            "CREDIT"

        OrderPaymentMethodTypeGOOGLEPAY ->
            "GOOGLE_PAY"

        OrderPaymentMethodTypeTINKOFFCREDIT ->
            "TINKOFF_CREDIT"

        OrderPaymentMethodTypeSBP ->
            "SBP"

        OrderPaymentMethodTypeTINKOFFINSTALLMENTS ->
            "TINKOFF_INSTALLMENTS"

        OrderPaymentMethodTypeB2BACCOUNTPREPAYMENT ->
            "B2B_ACCOUNT_PREPAYMENT"

        OrderPaymentMethodTypeB2BACCOUNTPOSTPAYMENT ->
            "B2B_ACCOUNT_POSTPAYMENT"

        OrderPaymentMethodTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderPaymentMethodType : OrderPaymentMethodType -> Json.Encode.Value
encodeOrderPaymentMethodType =
    Json.Encode.string << stringFromOrderPaymentMethodType


stringFromOrderPaymentType : OrderPaymentType -> String
stringFromOrderPaymentType model =
    case model of
        OrderPaymentTypePREPAID ->
            "PREPAID"

        OrderPaymentTypePOSTPAID ->
            "POSTPAID"

        OrderPaymentTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderPaymentType : OrderPaymentType -> Json.Encode.Value
encodeOrderPaymentType =
    Json.Encode.string << stringFromOrderPaymentType


stringFromOrderPromoType : OrderPromoType -> String
stringFromOrderPromoType model =
    case model of
        OrderPromoTypeDIRECTDISCOUNT ->
            "DIRECT_DISCOUNT"

        OrderPromoTypeBLUESET ->
            "BLUE_SET"

        OrderPromoTypeBLUEFLASH ->
            "BLUE_FLASH"

        OrderPromoTypeGENERICBUNDLE ->
            "GENERIC_BUNDLE"

        OrderPromoTypeMARKETCOUPON ->
            "MARKET_COUPON"

        OrderPromoTypeMARKETPROMOCODE ->
            "MARKET_PROMOCODE"

        OrderPromoTypeMARKETDEAL ->
            "MARKET_DEAL"

        OrderPromoTypeMARKETBLUE ->
            "MARKET_BLUE"

        OrderPromoTypeMARKETPRIME ->
            "MARKET_PRIME"

        OrderPromoTypeYANDEXPLUS ->
            "YANDEX_PLUS"

        OrderPromoTypeBERUPLUS ->
            "BERU_PLUS"

        OrderPromoTypeMARKETCOIN ->
            "MARKET_COIN"

        OrderPromoTypeYANDEXEMPLOYEE ->
            "YANDEX_EMPLOYEE"

        OrderPromoTypeLIMITEDFREEDELIVERYPROMO ->
            "LIMITED_FREE_DELIVERY_PROMO"

        OrderPromoTypeFREEDELIVERYTHRESHOLD ->
            "FREE_DELIVERY_THRESHOLD"

        OrderPromoTypeMULTICARTDISCOUNT ->
            "MULTICART_DISCOUNT"

        OrderPromoTypePRICEDROPASYOUSHOP ->
            "PRICE_DROP_AS_YOU_SHOP"

        OrderPromoTypeFREEDELIVERYFORLDI ->
            "FREE_DELIVERY_FOR_LDI"

        OrderPromoTypeFREEDELIVERYFORLSC ->
            "FREE_DELIVERY_FOR_LSC"

        OrderPromoTypeSECRETSALE ->
            "SECRET_SALE"

        OrderPromoTypeFREEPICKUP ->
            "FREE_PICKUP"

        OrderPromoTypeCHEAPESTASGIFT ->
            "CHEAPEST_AS_GIFT"

        OrderPromoTypeCASHBACK ->
            "CASHBACK"

        OrderPromoTypeSUPPLIERMULTICARTDISCOUNT ->
            "SUPPLIER_MULTICART_DISCOUNT"

        OrderPromoTypeSPREADDISCOUNTCOUNT ->
            "SPREAD_DISCOUNT_COUNT"

        OrderPromoTypeSPREADDISCOUNTRECEIPT ->
            "SPREAD_DISCOUNT_RECEIPT"

        OrderPromoTypeANNOUNCEMENTPROMO ->
            "ANNOUNCEMENT_PROMO"

        OrderPromoTypeDISCOUNTBYPAYMENTTYPE ->
            "DISCOUNT_BY_PAYMENT_TYPE"

        OrderPromoTypePERCENTDISCOUNT ->
            "PERCENT_DISCOUNT"

        OrderPromoTypeDCOEXTRADISCOUNT ->
            "DCO_EXTRA_DISCOUNT"

        OrderPromoTypeEMPTYPROMO ->
            "EMPTY_PROMO"

        OrderPromoTypeBLOCKINGPROMO ->
            "BLOCKING_PROMO"

        OrderPromoTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderPromoType : OrderPromoType -> Json.Encode.Value
encodeOrderPromoType =
    Json.Encode.string << stringFromOrderPromoType


encodeOrderShipmentDTO : OrderShipmentDTO -> Json.Encode.Value
encodeOrderShipmentDTO =
    encodeObject << encodeOrderShipmentDTOPairs


encodeOrderShipmentDTOWithTag : ( String, String ) -> OrderShipmentDTO -> Json.Encode.Value
encodeOrderShipmentDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderShipmentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderShipmentDTOPairs : OrderShipmentDTO -> List EncodedField
encodeOrderShipmentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "shipmentDate" Json.Encode.string model.shipmentDate
            , maybeEncode "shipmentTime" Json.Encode.string model.shipmentTime
            , maybeEncodeNullable "tracks" (Json.Encode.list encodeOrderTrackDTO) model.tracks
            , maybeEncodeNullable "boxes" (Json.Encode.list encodeOrderParcelBoxDTO) model.boxes
            ]
    in
    pairs


encodeOrderStateDTO : OrderStateDTO -> Json.Encode.Value
encodeOrderStateDTO =
    encodeObject << encodeOrderStateDTOPairs


encodeOrderStateDTOWithTag : ( String, String ) -> OrderStateDTO -> Json.Encode.Value
encodeOrderStateDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderStateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderStateDTOPairs : OrderStateDTO -> List EncodedField
encodeOrderStateDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "status" encodeOrderStatusType model.status
            , maybeEncode "substatus" encodeOrderSubstatusType model.substatus
            ]
    in
    pairs


stringFromOrderStatsStatusType : OrderStatsStatusType -> String
stringFromOrderStatsStatusType model =
    case model of
        OrderStatsStatusTypeCANCELLEDBEFOREPROCESSING ->
            "CANCELLED_BEFORE_PROCESSING"

        OrderStatsStatusTypeCANCELLEDINDELIVERY ->
            "CANCELLED_IN_DELIVERY"

        OrderStatsStatusTypeCANCELLEDINPROCESSING ->
            "CANCELLED_IN_PROCESSING"

        OrderStatsStatusTypeDELIVERY ->
            "DELIVERY"

        OrderStatsStatusTypeDELIVERED ->
            "DELIVERED"

        OrderStatsStatusTypePARTIALLYDELIVERED ->
            "PARTIALLY_DELIVERED"

        OrderStatsStatusTypePARTIALLYRETURNED ->
            "PARTIALLY_RETURNED"

        OrderStatsStatusTypePENDING ->
            "PENDING"

        OrderStatsStatusTypePICKUP ->
            "PICKUP"

        OrderStatsStatusTypePROCESSING ->
            "PROCESSING"

        OrderStatsStatusTypeRESERVED ->
            "RESERVED"

        OrderStatsStatusTypeRETURNED ->
            "RETURNED"

        OrderStatsStatusTypeUNKNOWN ->
            "UNKNOWN"

        OrderStatsStatusTypeUNPAID ->
            "UNPAID"

        OrderStatsStatusTypeLOST ->
            "LOST"


encodeOrderStatsStatusType : OrderStatsStatusType -> Json.Encode.Value
encodeOrderStatsStatusType =
    Json.Encode.string << stringFromOrderStatsStatusType


encodeOrderStatusChangeDTO : OrderStatusChangeDTO -> Json.Encode.Value
encodeOrderStatusChangeDTO =
    encodeObject << encodeOrderStatusChangeDTOPairs


encodeOrderStatusChangeDTOWithTag : ( String, String ) -> OrderStatusChangeDTO -> Json.Encode.Value
encodeOrderStatusChangeDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderStatusChangeDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderStatusChangeDTOPairs : OrderStatusChangeDTO -> List EncodedField
encodeOrderStatusChangeDTOPairs model =
    let
        pairs =
            [ encode "status" encodeOrderStatusType model.status
            , maybeEncode "substatus" encodeOrderSubstatusType model.substatus
            , maybeEncode "delivery" encodeOrderStatusChangeDeliveryDTO model.delivery
            ]
    in
    pairs


encodeOrderStatusChangeDeliveryDTO : OrderStatusChangeDeliveryDTO -> Json.Encode.Value
encodeOrderStatusChangeDeliveryDTO =
    encodeObject << encodeOrderStatusChangeDeliveryDTOPairs


encodeOrderStatusChangeDeliveryDTOWithTag : ( String, String ) -> OrderStatusChangeDeliveryDTO -> Json.Encode.Value
encodeOrderStatusChangeDeliveryDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderStatusChangeDeliveryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderStatusChangeDeliveryDTOPairs : OrderStatusChangeDeliveryDTO -> List EncodedField
encodeOrderStatusChangeDeliveryDTOPairs model =
    let
        pairs =
            [ maybeEncode "dates" encodeOrderStatusChangeDeliveryDatesDTO model.dates
            ]
    in
    pairs


encodeOrderStatusChangeDeliveryDatesDTO : OrderStatusChangeDeliveryDatesDTO -> Json.Encode.Value
encodeOrderStatusChangeDeliveryDatesDTO =
    encodeObject << encodeOrderStatusChangeDeliveryDatesDTOPairs


encodeOrderStatusChangeDeliveryDatesDTOWithTag : ( String, String ) -> OrderStatusChangeDeliveryDatesDTO -> Json.Encode.Value
encodeOrderStatusChangeDeliveryDatesDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderStatusChangeDeliveryDatesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderStatusChangeDeliveryDatesDTOPairs : OrderStatusChangeDeliveryDatesDTO -> List EncodedField
encodeOrderStatusChangeDeliveryDatesDTOPairs model =
    let
        pairs =
            [ maybeEncode "realDeliveryDate" Api.Time.encodeDate model.realDeliveryDate
            ]
    in
    pairs


stringFromOrderStatusType : OrderStatusType -> String
stringFromOrderStatusType model =
    case model of
        OrderStatusTypePLACING ->
            "PLACING"

        OrderStatusTypeRESERVED ->
            "RESERVED"

        OrderStatusTypeUNPAID ->
            "UNPAID"

        OrderStatusTypePROCESSING ->
            "PROCESSING"

        OrderStatusTypeDELIVERY ->
            "DELIVERY"

        OrderStatusTypePICKUP ->
            "PICKUP"

        OrderStatusTypeDELIVERED ->
            "DELIVERED"

        OrderStatusTypeCANCELLED ->
            "CANCELLED"

        OrderStatusTypePENDING ->
            "PENDING"

        OrderStatusTypePARTIALLYRETURNED ->
            "PARTIALLY_RETURNED"

        OrderStatusTypeRETURNED ->
            "RETURNED"

        OrderStatusTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderStatusType : OrderStatusType -> Json.Encode.Value
encodeOrderStatusType =
    Json.Encode.string << stringFromOrderStatusType


encodeOrderSubsidyDTO : OrderSubsidyDTO -> Json.Encode.Value
encodeOrderSubsidyDTO =
    encodeObject << encodeOrderSubsidyDTOPairs


encodeOrderSubsidyDTOWithTag : ( String, String ) -> OrderSubsidyDTO -> Json.Encode.Value
encodeOrderSubsidyDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderSubsidyDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderSubsidyDTOPairs : OrderSubsidyDTO -> List EncodedField
encodeOrderSubsidyDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOrderSubsidyType model.type_
            , maybeEncode "amount" Json.Encode.float model.amount
            ]
    in
    pairs


stringFromOrderSubsidyType : OrderSubsidyType -> String
stringFromOrderSubsidyType model =
    case model of
        OrderSubsidyTypeYANDEXCASHBACK ->
            "YANDEX_CASHBACK"

        OrderSubsidyTypeSUBSIDY ->
            "SUBSIDY"

        OrderSubsidyTypeDELIVERY ->
            "DELIVERY"


encodeOrderSubsidyType : OrderSubsidyType -> Json.Encode.Value
encodeOrderSubsidyType =
    Json.Encode.string << stringFromOrderSubsidyType


stringFromOrderSubstatusType : OrderSubstatusType -> String
stringFromOrderSubstatusType model =
    case model of
        OrderSubstatusTypeRESERVATIONEXPIRED ->
            "RESERVATION_EXPIRED"

        OrderSubstatusTypeUSERNOTPAID ->
            "USER_NOT_PAID"

        OrderSubstatusTypeUSERUNREACHABLE ->
            "USER_UNREACHABLE"

        OrderSubstatusTypeUSERCHANGEDMIND ->
            "USER_CHANGED_MIND"

        OrderSubstatusTypeUSERREFUSEDDELIVERY ->
            "USER_REFUSED_DELIVERY"

        OrderSubstatusTypeUSERREFUSEDPRODUCT ->
            "USER_REFUSED_PRODUCT"

        OrderSubstatusTypeSHOPFAILED ->
            "SHOP_FAILED"

        OrderSubstatusTypeUSERREFUSEDQUALITY ->
            "USER_REFUSED_QUALITY"

        OrderSubstatusTypeREPLACINGORDER ->
            "REPLACING_ORDER"

        OrderSubstatusTypePROCESSINGEXPIRED ->
            "PROCESSING_EXPIRED"

        OrderSubstatusTypePENDINGEXPIRED ->
            "PENDING_EXPIRED"

        OrderSubstatusTypeSHOPPENDINGCANCELLED ->
            "SHOP_PENDING_CANCELLED"

        OrderSubstatusTypePENDINGCANCELLED ->
            "PENDING_CANCELLED"

        OrderSubstatusTypeUSERFRAUD ->
            "USER_FRAUD"

        OrderSubstatusTypeRESERVATIONFAILED ->
            "RESERVATION_FAILED"

        OrderSubstatusTypeUSERPLACEDOTHERORDER ->
            "USER_PLACED_OTHER_ORDER"

        OrderSubstatusTypeUSERBOUGHTCHEAPER ->
            "USER_BOUGHT_CHEAPER"

        OrderSubstatusTypeMISSINGITEM ->
            "MISSING_ITEM"

        OrderSubstatusTypeBROKENITEM ->
            "BROKEN_ITEM"

        OrderSubstatusTypeWRONGITEM ->
            "WRONG_ITEM"

        OrderSubstatusTypePICKUPEXPIRED ->
            "PICKUP_EXPIRED"

        OrderSubstatusTypeDELIVERYPROBLEMS ->
            "DELIVERY_PROBLEMS"

        OrderSubstatusTypeLATECONTACT ->
            "LATE_CONTACT"

        OrderSubstatusTypeCUSTOM ->
            "CUSTOM"

        OrderSubstatusTypeDELIVERYSERVICEFAILED ->
            "DELIVERY_SERVICE_FAILED"

        OrderSubstatusTypeWAREHOUSEFAILEDTOSHIP ->
            "WAREHOUSE_FAILED_TO_SHIP"

        OrderSubstatusTypeDELIVERYSERIVCEUNDELIVERED ->
            "DELIVERY_SERIVCE_UNDELIVERED"

        OrderSubstatusTypeDELIVERYSERVICEUNDELIVERED ->
            "DELIVERY_SERVICE_UNDELIVERED"

        OrderSubstatusTypePREORDER ->
            "PREORDER"

        OrderSubstatusTypeAWAITCONFIRMATION ->
            "AWAIT_CONFIRMATION"

        OrderSubstatusTypeSTARTED ->
            "STARTED"

        OrderSubstatusTypePACKAGING ->
            "PACKAGING"

        OrderSubstatusTypeREADYTOSHIP ->
            "READY_TO_SHIP"

        OrderSubstatusTypeSHIPPED ->
            "SHIPPED"

        OrderSubstatusTypeASYNCPROCESSING ->
            "ASYNC_PROCESSING"

        OrderSubstatusTypeUSERREFUSEDTOPROVIDEPERSONALDATA ->
            "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA"

        OrderSubstatusTypeWAITINGUSERINPUT ->
            "WAITING_USER_INPUT"

        OrderSubstatusTypeWAITINGBANKDECISION ->
            "WAITING_BANK_DECISION"

        OrderSubstatusTypeBANKREJECTCREDITOFFER ->
            "BANK_REJECT_CREDIT_OFFER"

        OrderSubstatusTypeCUSTOMERREJECTCREDITOFFER ->
            "CUSTOMER_REJECT_CREDIT_OFFER"

        OrderSubstatusTypeCREDITOFFERFAILED ->
            "CREDIT_OFFER_FAILED"

        OrderSubstatusTypeAWAITDELIVERYDATESCONFIRMATION ->
            "AWAIT_DELIVERY_DATES_CONFIRMATION"

        OrderSubstatusTypeSERVICEFAULT ->
            "SERVICE_FAULT"

        OrderSubstatusTypeDELIVERYSERVICERECEIVED ->
            "DELIVERY_SERVICE_RECEIVED"

        OrderSubstatusTypeUSERRECEIVED ->
            "USER_RECEIVED"

        OrderSubstatusTypeWAITINGFORSTOCKS ->
            "WAITING_FOR_STOCKS"

        OrderSubstatusTypeASPARTOFMULTIORDER ->
            "AS_PART_OF_MULTI_ORDER"

        OrderSubstatusTypeREADYFORLASTMILE ->
            "READY_FOR_LAST_MILE"

        OrderSubstatusTypeLASTMILESTARTED ->
            "LAST_MILE_STARTED"

        OrderSubstatusTypeANTIFRAUD ->
            "ANTIFRAUD"

        OrderSubstatusTypeDELIVERYUSERNOTRECEIVED ->
            "DELIVERY_USER_NOT_RECEIVED"

        OrderSubstatusTypeDELIVERYSERVICEDELIVERED ->
            "DELIVERY_SERVICE_DELIVERED"

        OrderSubstatusTypeDELIVEREDUSERNOTRECEIVED ->
            "DELIVERED_USER_NOT_RECEIVED"

        OrderSubstatusTypeUSERWANTEDANOTHERPAYMENTMETHOD ->
            "USER_WANTED_ANOTHER_PAYMENT_METHOD"

        OrderSubstatusTypeUSERRECEIVEDTECHNICALERROR ->
            "USER_RECEIVED_TECHNICAL_ERROR"

        OrderSubstatusTypeUSERFORGOTTOUSEBONUS ->
            "USER_FORGOT_TO_USE_BONUS"

        OrderSubstatusTypeRECEIVEDONDISTRIBUTIONCENTER ->
            "RECEIVED_ON_DISTRIBUTION_CENTER"

        OrderSubstatusTypeDELIVERYSERVICENOTRECEIVED ->
            "DELIVERY_SERVICE_NOT_RECEIVED"

        OrderSubstatusTypeDELIVERYSERVICELOST ->
            "DELIVERY_SERVICE_LOST"

        OrderSubstatusTypeSHIPPEDTOWRONGDELIVERYSERVICE ->
            "SHIPPED_TO_WRONG_DELIVERY_SERVICE"

        OrderSubstatusTypeDELIVEREDUSERRECEIVED ->
            "DELIVERED_USER_RECEIVED"

        OrderSubstatusTypeWAITINGTINKOFFDECISION ->
            "WAITING_TINKOFF_DECISION"

        OrderSubstatusTypeCOURIERSEARCH ->
            "COURIER_SEARCH"

        OrderSubstatusTypeCOURIERFOUND ->
            "COURIER_FOUND"

        OrderSubstatusTypeCOURIERINTRANSITTOSENDER ->
            "COURIER_IN_TRANSIT_TO_SENDER"

        OrderSubstatusTypeCOURIERARRIVEDTOSENDER ->
            "COURIER_ARRIVED_TO_SENDER"

        OrderSubstatusTypeCOURIERRECEIVED ->
            "COURIER_RECEIVED"

        OrderSubstatusTypeCOURIERNOTFOUND ->
            "COURIER_NOT_FOUND"

        OrderSubstatusTypeCOURIERNOTDELIVERORDER ->
            "COURIER_NOT_DELIVER_ORDER"

        OrderSubstatusTypeCOURIERRETURNSORDER ->
            "COURIER_RETURNS_ORDER"

        OrderSubstatusTypeCOURIERRETURNEDORDER ->
            "COURIER_RETURNED_ORDER"

        OrderSubstatusTypeWAITINGUSERDELIVERYINPUT ->
            "WAITING_USER_DELIVERY_INPUT"

        OrderSubstatusTypePICKUPSERVICERECEIVED ->
            "PICKUP_SERVICE_RECEIVED"

        OrderSubstatusTypePICKUPUSERRECEIVED ->
            "PICKUP_USER_RECEIVED"

        OrderSubstatusTypeCANCELLEDCOURIERNOTFOUND ->
            "CANCELLED_COURIER_NOT_FOUND"

        OrderSubstatusTypeCOURIERNOTCOMEFORORDER ->
            "COURIER_NOT_COME_FOR_ORDER"

        OrderSubstatusTypeDELIVERYNOTMANAGEDREGION ->
            "DELIVERY_NOT_MANAGED_REGION"

        OrderSubstatusTypeINCOMPLETECONTACTINFORMATION ->
            "INCOMPLETE_CONTACT_INFORMATION"

        OrderSubstatusTypeINCOMPLETEMULTIORDER ->
            "INCOMPLETE_MULTI_ORDER"

        OrderSubstatusTypeINAPPROPRIATEWEIGHTSIZE ->
            "INAPPROPRIATE_WEIGHT_SIZE"

        OrderSubstatusTypeTECHNICALERROR ->
            "TECHNICAL_ERROR"

        OrderSubstatusTypeSORTINGCENTERLOST ->
            "SORTING_CENTER_LOST"

        OrderSubstatusTypeCOURIERSEARCHNOTSTARTED ->
            "COURIER_SEARCH_NOT_STARTED"

        OrderSubstatusTypeLOST ->
            "LOST"

        OrderSubstatusTypeAWAITPAYMENT ->
            "AWAIT_PAYMENT"

        OrderSubstatusTypeAWAITLAVKARESERVATION ->
            "AWAIT_LAVKA_RESERVATION"

        OrderSubstatusTypeUSERWANTSTOCHANGEADDRESS ->
            "USER_WANTS_TO_CHANGE_ADDRESS"

        OrderSubstatusTypeFULLNOTRANSOM ->
            "FULL_NOT_RANSOM"

        OrderSubstatusTypePRESCRIPTIONMISMATCH ->
            "PRESCRIPTION_MISMATCH"

        OrderSubstatusTypeDROPOFFLOST ->
            "DROPOFF_LOST"

        OrderSubstatusTypeDROPOFFCLOSED ->
            "DROPOFF_CLOSED"

        OrderSubstatusTypeDELIVERYTOSTORESTARTED ->
            "DELIVERY_TO_STORE_STARTED"

        OrderSubstatusTypeUSERWANTSTOCHANGEDELIVERYDATE ->
            "USER_WANTS_TO_CHANGE_DELIVERY_DATE"

        OrderSubstatusTypeWRONGITEMDELIVERED ->
            "WRONG_ITEM_DELIVERED"

        OrderSubstatusTypeDAMAGEDBOX ->
            "DAMAGED_BOX"

        OrderSubstatusTypeAWAITDELIVERYDATES ->
            "AWAIT_DELIVERY_DATES"

        OrderSubstatusTypeLASTMILECOURIERSEARCH ->
            "LAST_MILE_COURIER_SEARCH"

        OrderSubstatusTypePICKUPPOINTCLOSED ->
            "PICKUP_POINT_CLOSED"

        OrderSubstatusTypeLEGALINFOCHANGED ->
            "LEGAL_INFO_CHANGED"

        OrderSubstatusTypeUSERHASNOTIMETOPICKUPORDER ->
            "USER_HAS_NO_TIME_TO_PICKUP_ORDER"

        OrderSubstatusTypeDELIVERYCUSTOMSARRIVED ->
            "DELIVERY_CUSTOMS_ARRIVED"

        OrderSubstatusTypeDELIVERYCUSTOMSCLEARED ->
            "DELIVERY_CUSTOMS_CLEARED"

        OrderSubstatusTypeFIRSTMILEDELIVERYSERVICERECEIVED ->
            "FIRST_MILE_DELIVERY_SERVICE_RECEIVED"

        OrderSubstatusTypeAWAITAUTODELIVERYDATES ->
            "AWAIT_AUTO_DELIVERY_DATES"

        OrderSubstatusTypeAWAITUSERPERSONALDATA ->
            "AWAIT_USER_PERSONAL_DATA"

        OrderSubstatusTypeNOPERSONALDATAEXPIRED ->
            "NO_PERSONAL_DATA_EXPIRED"

        OrderSubstatusTypeCUSTOMSPROBLEMS ->
            "CUSTOMS_PROBLEMS"

        OrderSubstatusTypeAWAITCASHIER ->
            "AWAIT_CASHIER"

        OrderSubstatusTypeWAITINGPOSTPAIDBUDGETRESERVATION ->
            "WAITING_POSTPAID_BUDGET_RESERVATION"

        OrderSubstatusTypeAWAITSERVICEABLECONFIRMATION ->
            "AWAIT_SERVICEABLE_CONFIRMATION"

        OrderSubstatusTypePOSTPAIDBUDGETRESERVATIONFAILED ->
            "POSTPAID_BUDGET_RESERVATION_FAILED"

        OrderSubstatusTypeAWAITCUSTOMPRICECONFIRMATION ->
            "AWAIT_CUSTOM_PRICE_CONFIRMATION"

        OrderSubstatusTypeREADYFORPICKUP ->
            "READY_FOR_PICKUP"

        OrderSubstatusTypeUNKNOWN ->
            "UNKNOWN"


encodeOrderSubstatusType : OrderSubstatusType -> Json.Encode.Value
encodeOrderSubstatusType =
    Json.Encode.string << stringFromOrderSubstatusType


stringFromOrderTaxSystemType : OrderTaxSystemType -> String
stringFromOrderTaxSystemType model =
    case model of
        OrderTaxSystemTypeOSN ->
            "OSN"

        OrderTaxSystemTypeUSN ->
            "USN"

        OrderTaxSystemTypeUSNMINUSCOST ->
            "USN_MINUS_COST"

        OrderTaxSystemTypeENVD ->
            "ENVD"

        OrderTaxSystemTypeECHN ->
            "ECHN"

        OrderTaxSystemTypePSN ->
            "PSN"

        OrderTaxSystemTypeNPD ->
            "NPD"

        OrderTaxSystemTypeUNKNOWNVALUE ->
            "UNKNOWN_VALUE"


encodeOrderTaxSystemType : OrderTaxSystemType -> Json.Encode.Value
encodeOrderTaxSystemType =
    Json.Encode.string << stringFromOrderTaxSystemType


encodeOrderTrackDTO : OrderTrackDTO -> Json.Encode.Value
encodeOrderTrackDTO =
    encodeObject << encodeOrderTrackDTOPairs


encodeOrderTrackDTOWithTag : ( String, String ) -> OrderTrackDTO -> Json.Encode.Value
encodeOrderTrackDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrderTrackDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderTrackDTOPairs : OrderTrackDTO -> List EncodedField
encodeOrderTrackDTOPairs model =
    let
        pairs =
            [ maybeEncode "trackCode" Json.Encode.string model.trackCode
            , maybeEncode "deliveryServiceId" Json.Encode.int model.deliveryServiceId
            ]
    in
    pairs


stringFromOrderUpdateStatusType : OrderUpdateStatusType -> String
stringFromOrderUpdateStatusType model =
    case model of
        OrderUpdateStatusTypeOK ->
            "OK"

        OrderUpdateStatusTypeERROR ->
            "ERROR"


encodeOrderUpdateStatusType : OrderUpdateStatusType -> Json.Encode.Value
encodeOrderUpdateStatusType =
    Json.Encode.string << stringFromOrderUpdateStatusType


stringFromOrderVatType : OrderVatType -> String
stringFromOrderVatType model =
    case model of
        OrderVatTypeNOVAT ->
            "NO_VAT"

        OrderVatTypeVAT0 ->
            "VAT_0"

        OrderVatTypeVAT10 ->
            "VAT_10"

        OrderVatTypeVAT10110 ->
            "VAT_10_110"

        OrderVatTypeVAT20 ->
            "VAT_20"

        OrderVatTypeVAT20120 ->
            "VAT_20_120"

        OrderVatTypeVAT18 ->
            "VAT_18"

        OrderVatTypeVAT18118 ->
            "VAT_18_118"

        OrderVatTypeUNKNOWNVALUE ->
            "UNKNOWN_VALUE"


encodeOrderVatType : OrderVatType -> Json.Encode.Value
encodeOrderVatType =
    Json.Encode.string << stringFromOrderVatType


encodeOrdersShipmentInfoDTO : OrdersShipmentInfoDTO -> Json.Encode.Value
encodeOrdersShipmentInfoDTO =
    encodeObject << encodeOrdersShipmentInfoDTOPairs


encodeOrdersShipmentInfoDTOWithTag : ( String, String ) -> OrdersShipmentInfoDTO -> Json.Encode.Value
encodeOrdersShipmentInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersShipmentInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersShipmentInfoDTOPairs : OrdersShipmentInfoDTO -> List EncodedField
encodeOrdersShipmentInfoDTOPairs model =
    let
        pairs =
            [ encode "orderIdsWithLabels" (Json.Encode.list Json.Encode.int) model.orderIdsWithLabels
            , encode "orderIdsWithoutLabels" (Json.Encode.list Json.Encode.int) model.orderIdsWithoutLabels
            ]
    in
    pairs


encodeOrdersStatsCommissionDTO : OrdersStatsCommissionDTO -> Json.Encode.Value
encodeOrdersStatsCommissionDTO =
    encodeObject << encodeOrdersStatsCommissionDTOPairs


encodeOrdersStatsCommissionDTOWithTag : ( String, String ) -> OrdersStatsCommissionDTO -> Json.Encode.Value
encodeOrdersStatsCommissionDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsCommissionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsCommissionDTOPairs : OrdersStatsCommissionDTO -> List EncodedField
encodeOrdersStatsCommissionDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOrdersStatsCommissionType model.type_
            , maybeEncode "actual" Json.Encode.float model.actual
            ]
    in
    pairs


stringFromOrdersStatsCommissionType : OrdersStatsCommissionType -> String
stringFromOrdersStatsCommissionType model =
    case model of
        OrdersStatsCommissionTypeFEE ->
            "FEE"

        OrdersStatsCommissionTypeFULFILLMENT ->
            "FULFILLMENT"

        OrdersStatsCommissionTypeLOYALTYPARTICIPATIONFEE ->
            "LOYALTY_PARTICIPATION_FEE"

        OrdersStatsCommissionTypeAUCTIONPROMOTION ->
            "AUCTION_PROMOTION"

        OrdersStatsCommissionTypeINSTALLMENT ->
            "INSTALLMENT"

        OrdersStatsCommissionTypeDELIVERYTOCUSTOMER ->
            "DELIVERY_TO_CUSTOMER"

        OrdersStatsCommissionTypeEXPRESSDELIVERYTOCUSTOMER ->
            "EXPRESS_DELIVERY_TO_CUSTOMER"

        OrdersStatsCommissionTypeAGENCY ->
            "AGENCY"

        OrdersStatsCommissionTypePAYMENTTRANSFER ->
            "PAYMENT_TRANSFER"

        OrdersStatsCommissionTypeRETURNEDORDERSSTORAGE ->
            "RETURNED_ORDERS_STORAGE"

        OrdersStatsCommissionTypeSORTING ->
            "SORTING"

        OrdersStatsCommissionTypeINTAKESORTING ->
            "INTAKE_SORTING"

        OrdersStatsCommissionTypeRETURNPROCESSING ->
            "RETURN_PROCESSING"

        OrdersStatsCommissionTypeILLIQUIDGOODSSALE ->
            "ILLIQUID_GOODS_SALE"


encodeOrdersStatsCommissionType : OrdersStatsCommissionType -> Json.Encode.Value
encodeOrdersStatsCommissionType =
    Json.Encode.string << stringFromOrdersStatsCommissionType


encodeOrdersStatsDTO : OrdersStatsDTO -> Json.Encode.Value
encodeOrdersStatsDTO =
    encodeObject << encodeOrdersStatsDTOPairs


encodeOrdersStatsDTOWithTag : ( String, String ) -> OrdersStatsDTO -> Json.Encode.Value
encodeOrdersStatsDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsDTOPairs : OrdersStatsDTO -> List EncodedField
encodeOrdersStatsDTOPairs model =
    let
        pairs =
            [ encode "orders" (Json.Encode.list encodeOrdersStatsOrderDTO) model.orders
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


encodeOrdersStatsDeliveryRegionDTO : OrdersStatsDeliveryRegionDTO -> Json.Encode.Value
encodeOrdersStatsDeliveryRegionDTO =
    encodeObject << encodeOrdersStatsDeliveryRegionDTOPairs


encodeOrdersStatsDeliveryRegionDTOWithTag : ( String, String ) -> OrdersStatsDeliveryRegionDTO -> Json.Encode.Value
encodeOrdersStatsDeliveryRegionDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsDeliveryRegionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsDeliveryRegionDTOPairs : OrdersStatsDeliveryRegionDTO -> List EncodedField
encodeOrdersStatsDeliveryRegionDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeOrdersStatsDetailsDTO : OrdersStatsDetailsDTO -> Json.Encode.Value
encodeOrdersStatsDetailsDTO =
    encodeObject << encodeOrdersStatsDetailsDTOPairs


encodeOrdersStatsDetailsDTOWithTag : ( String, String ) -> OrdersStatsDetailsDTO -> Json.Encode.Value
encodeOrdersStatsDetailsDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsDetailsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsDetailsDTOPairs : OrdersStatsDetailsDTO -> List EncodedField
encodeOrdersStatsDetailsDTOPairs model =
    let
        pairs =
            [ maybeEncode "itemStatus" encodeOrdersStatsItemStatusType model.itemStatus
            , maybeEncode "itemCount" Json.Encode.int model.itemCount
            , maybeEncode "updateDate" Api.Time.encodeDate model.updateDate
            , maybeEncode "stockType" encodeOrdersStatsStockType model.stockType
            ]
    in
    pairs


encodeOrdersStatsItemDTO : OrdersStatsItemDTO -> Json.Encode.Value
encodeOrdersStatsItemDTO =
    encodeObject << encodeOrdersStatsItemDTOPairs


encodeOrdersStatsItemDTOWithTag : ( String, String ) -> OrdersStatsItemDTO -> Json.Encode.Value
encodeOrdersStatsItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsItemDTOPairs : OrdersStatsItemDTO -> List EncodedField
encodeOrdersStatsItemDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerName" Json.Encode.string model.offerName
            , maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "count" Json.Encode.int model.count
            , maybeEncodeNullable "prices" (Json.Encode.list encodeOrdersStatsPriceDTO) model.prices
            , maybeEncode "warehouse" encodeOrdersStatsWarehouseDTO model.warehouse
            , maybeEncodeNullable "details" (Json.Encode.list encodeOrdersStatsDetailsDTO) model.details
            , maybeEncodeNullable "cisList" (Json.Encode.list Json.Encode.string) model.cisList
            , maybeEncode "initialCount" Json.Encode.int model.initialCount
            , maybeEncode "bidFee" Json.Encode.int model.bidFee
            , maybeEncode "cofinanceThreshold" Json.Encode.float model.cofinanceThreshold
            , maybeEncode "cofinanceValue" Json.Encode.float model.cofinanceValue
            ]
    in
    pairs


stringFromOrdersStatsItemStatusType : OrdersStatsItemStatusType -> String
stringFromOrdersStatsItemStatusType model =
    case model of
        OrdersStatsItemStatusTypeREJECTED ->
            "REJECTED"

        OrdersStatsItemStatusTypeRETURNED ->
            "RETURNED"


encodeOrdersStatsItemStatusType : OrdersStatsItemStatusType -> Json.Encode.Value
encodeOrdersStatsItemStatusType =
    Json.Encode.string << stringFromOrdersStatsItemStatusType


encodeOrdersStatsOrderDTO : OrdersStatsOrderDTO -> Json.Encode.Value
encodeOrdersStatsOrderDTO =
    encodeObject << encodeOrdersStatsOrderDTOPairs


encodeOrdersStatsOrderDTOWithTag : ( String, String ) -> OrdersStatsOrderDTO -> Json.Encode.Value
encodeOrdersStatsOrderDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsOrderDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsOrderDTOPairs : OrdersStatsOrderDTO -> List EncodedField
encodeOrdersStatsOrderDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "creationDate" Api.Time.encodeDate model.creationDate
            , maybeEncode "statusUpdateDate" Api.Time.encodeDateTime model.statusUpdateDate
            , maybeEncode "status" encodeOrderStatsStatusType model.status
            , maybeEncode "partnerOrderId" Json.Encode.string model.partnerOrderId
            , maybeEncode "paymentType" encodeOrdersStatsOrderPaymentType model.paymentType
            , maybeEncode "fake" Json.Encode.bool model.fake
            , maybeEncode "deliveryRegion" encodeOrdersStatsDeliveryRegionDTO model.deliveryRegion
            , encode "items" (Json.Encode.list encodeOrdersStatsItemDTO) model.items
            , maybeEncodeNullable "initialItems" (Json.Encode.list encodeOrdersStatsItemDTO) model.initialItems
            , encode "payments" (Json.Encode.list encodeOrdersStatsPaymentDTO) model.payments
            , encode "commissions" (Json.Encode.list encodeOrdersStatsCommissionDTO) model.commissions
            ]
    in
    pairs


stringFromOrdersStatsOrderPaymentType : OrdersStatsOrderPaymentType -> String
stringFromOrdersStatsOrderPaymentType model =
    case model of
        OrdersStatsOrderPaymentTypeCREDIT ->
            "CREDIT"

        OrdersStatsOrderPaymentTypePOSTPAID ->
            "POSTPAID"

        OrdersStatsOrderPaymentTypePREPAID ->
            "PREPAID"

        OrdersStatsOrderPaymentTypeTINKOFFCREDIT ->
            "TINKOFF_CREDIT"


encodeOrdersStatsOrderPaymentType : OrdersStatsOrderPaymentType -> Json.Encode.Value
encodeOrdersStatsOrderPaymentType =
    Json.Encode.string << stringFromOrdersStatsOrderPaymentType


encodeOrdersStatsPaymentDTO : OrdersStatsPaymentDTO -> Json.Encode.Value
encodeOrdersStatsPaymentDTO =
    encodeObject << encodeOrdersStatsPaymentDTOPairs


encodeOrdersStatsPaymentDTOWithTag : ( String, String ) -> OrdersStatsPaymentDTO -> Json.Encode.Value
encodeOrdersStatsPaymentDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsPaymentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsPaymentDTOPairs : OrdersStatsPaymentDTO -> List EncodedField
encodeOrdersStatsPaymentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "date" Api.Time.encodeDate model.date
            , maybeEncode "type" encodeOrdersStatsPaymentType model.type_
            , maybeEncode "source" encodeOrdersStatsPaymentSourceType model.source
            , maybeEncode "total" Json.Encode.float model.total
            , maybeEncode "paymentOrder" encodeOrdersStatsPaymentOrderDTO model.paymentOrder
            ]
    in
    pairs


encodeOrdersStatsPaymentOrderDTO : OrdersStatsPaymentOrderDTO -> Json.Encode.Value
encodeOrdersStatsPaymentOrderDTO =
    encodeObject << encodeOrdersStatsPaymentOrderDTOPairs


encodeOrdersStatsPaymentOrderDTOWithTag : ( String, String ) -> OrdersStatsPaymentOrderDTO -> Json.Encode.Value
encodeOrdersStatsPaymentOrderDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsPaymentOrderDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsPaymentOrderDTOPairs : OrdersStatsPaymentOrderDTO -> List EncodedField
encodeOrdersStatsPaymentOrderDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "date" Api.Time.encodeDate model.date
            ]
    in
    pairs


stringFromOrdersStatsPaymentSourceType : OrdersStatsPaymentSourceType -> String
stringFromOrdersStatsPaymentSourceType model =
    case model of
        OrdersStatsPaymentSourceTypeBUYER ->
            "BUYER"

        OrdersStatsPaymentSourceTypeCASHBACK ->
            "CASHBACK"

        OrdersStatsPaymentSourceTypeMARKETPLACE ->
            "MARKETPLACE"

        OrdersStatsPaymentSourceTypeSPLIT ->
            "SPLIT"


encodeOrdersStatsPaymentSourceType : OrdersStatsPaymentSourceType -> Json.Encode.Value
encodeOrdersStatsPaymentSourceType =
    Json.Encode.string << stringFromOrdersStatsPaymentSourceType


stringFromOrdersStatsPaymentType : OrdersStatsPaymentType -> String
stringFromOrdersStatsPaymentType model =
    case model of
        OrdersStatsPaymentTypePAYMENT ->
            "PAYMENT"

        OrdersStatsPaymentTypeREFUND ->
            "REFUND"

        OrdersStatsPaymentTypeUNKNOWN ->
            "UNKNOWN"


encodeOrdersStatsPaymentType : OrdersStatsPaymentType -> Json.Encode.Value
encodeOrdersStatsPaymentType =
    Json.Encode.string << stringFromOrdersStatsPaymentType


encodeOrdersStatsPriceDTO : OrdersStatsPriceDTO -> Json.Encode.Value
encodeOrdersStatsPriceDTO =
    encodeObject << encodeOrdersStatsPriceDTOPairs


encodeOrdersStatsPriceDTOWithTag : ( String, String ) -> OrdersStatsPriceDTO -> Json.Encode.Value
encodeOrdersStatsPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsPriceDTOPairs : OrdersStatsPriceDTO -> List EncodedField
encodeOrdersStatsPriceDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodeOrdersStatsPriceType model.type_
            , maybeEncode "costPerItem" Json.Encode.float model.costPerItem
            , maybeEncode "total" Json.Encode.float model.total
            ]
    in
    pairs


stringFromOrdersStatsPriceType : OrdersStatsPriceType -> String
stringFromOrdersStatsPriceType model =
    case model of
        OrdersStatsPriceTypeBUYER ->
            "BUYER"

        OrdersStatsPriceTypeCASHBACK ->
            "CASHBACK"

        OrdersStatsPriceTypeMARKETPLACE ->
            "MARKETPLACE"


encodeOrdersStatsPriceType : OrdersStatsPriceType -> Json.Encode.Value
encodeOrdersStatsPriceType =
    Json.Encode.string << stringFromOrdersStatsPriceType


stringFromOrdersStatsStockType : OrdersStatsStockType -> String
stringFromOrdersStatsStockType model =
    case model of
        OrdersStatsStockTypeFIT ->
            "FIT"

        OrdersStatsStockTypeFREEZE ->
            "FREEZE"

        OrdersStatsStockTypeAVAILABLE ->
            "AVAILABLE"

        OrdersStatsStockTypeQUARANTINE ->
            "QUARANTINE"

        OrdersStatsStockTypeUTILIZATION ->
            "UTILIZATION"

        OrdersStatsStockTypeDEFECT ->
            "DEFECT"

        OrdersStatsStockTypeEXPIRED ->
            "EXPIRED"


encodeOrdersStatsStockType : OrdersStatsStockType -> Json.Encode.Value
encodeOrdersStatsStockType =
    Json.Encode.string << stringFromOrdersStatsStockType


encodeOrdersStatsWarehouseDTO : OrdersStatsWarehouseDTO -> Json.Encode.Value
encodeOrdersStatsWarehouseDTO =
    encodeObject << encodeOrdersStatsWarehouseDTOPairs


encodeOrdersStatsWarehouseDTOWithTag : ( String, String ) -> OrdersStatsWarehouseDTO -> Json.Encode.Value
encodeOrdersStatsWarehouseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOrdersStatsWarehouseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrdersStatsWarehouseDTOPairs : OrdersStatsWarehouseDTO -> List EncodedField
encodeOrdersStatsWarehouseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeOutletAddressDTO : OutletAddressDTO -> Json.Encode.Value
encodeOutletAddressDTO =
    encodeObject << encodeOutletAddressDTOPairs


encodeOutletAddressDTOWithTag : ( String, String ) -> OutletAddressDTO -> Json.Encode.Value
encodeOutletAddressDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletAddressDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletAddressDTOPairs : OutletAddressDTO -> List EncodedField
encodeOutletAddressDTOPairs model =
    let
        pairs =
            [ encode "regionId" Json.Encode.int model.regionId
            , maybeEncode "street" Json.Encode.string model.street
            , maybeEncode "number" Json.Encode.string model.number
            , maybeEncode "building" Json.Encode.string model.building
            , maybeEncode "estate" Json.Encode.string model.estate
            , maybeEncode "block" Json.Encode.string model.block
            , maybeEncode "additional" Json.Encode.string model.additional
            , maybeEncode "km" Json.Encode.int model.km
            , maybeEncode "city" Json.Encode.string model.city
            ]
    in
    pairs


encodeOutletDTO : OutletDTO -> Json.Encode.Value
encodeOutletDTO =
    encodeObject << encodeOutletDTOPairs


encodeOutletDTOWithTag : ( String, String ) -> OutletDTO -> Json.Encode.Value
encodeOutletDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletDTOPairs : OutletDTO -> List EncodedField
encodeOutletDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "type" encodeOutletType model.type_
            , maybeEncode "coords" Json.Encode.string model.coords
            , maybeEncode "isMain" Json.Encode.bool model.isMain
            , maybeEncode "shopOutletCode" Json.Encode.string model.shopOutletCode
            , maybeEncode "visibility" encodeOutletVisibilityType model.visibility
            , encode "address" encodeOutletAddressDTO model.address
            , encode "phones" (Json.Encode.list Json.Encode.string) model.phones
            , encode "workingSchedule" encodeOutletWorkingScheduleDTO model.workingSchedule
            , maybeEncodeNullable "deliveryRules" (Json.Encode.list encodeOutletDeliveryRuleDTO) model.deliveryRules
            , maybeEncode "storagePeriod" Json.Encode.int model.storagePeriod
            ]
    in
    pairs


encodeOutletDeliveryRuleDTO : OutletDeliveryRuleDTO -> Json.Encode.Value
encodeOutletDeliveryRuleDTO =
    encodeObject << encodeOutletDeliveryRuleDTOPairs


encodeOutletDeliveryRuleDTOWithTag : ( String, String ) -> OutletDeliveryRuleDTO -> Json.Encode.Value
encodeOutletDeliveryRuleDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletDeliveryRuleDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletDeliveryRuleDTOPairs : OutletDeliveryRuleDTO -> List EncodedField
encodeOutletDeliveryRuleDTOPairs model =
    let
        pairs =
            [ maybeEncode "minDeliveryDays" Json.Encode.int model.minDeliveryDays
            , maybeEncode "maxDeliveryDays" Json.Encode.int model.maxDeliveryDays
            , maybeEncode "deliveryServiceId" Json.Encode.int model.deliveryServiceId
            , maybeEncode "orderBefore" Json.Encode.int model.orderBefore
            , maybeEncode "priceFreePickup" Json.Encode.float model.priceFreePickup
            , maybeEncode "unspecifiedDeliveryInterval" Json.Encode.bool model.unspecifiedDeliveryInterval
            ]
    in
    pairs


encodeOutletLicenseDTO : OutletLicenseDTO -> Json.Encode.Value
encodeOutletLicenseDTO =
    encodeObject << encodeOutletLicenseDTOPairs


encodeOutletLicenseDTOWithTag : ( String, String ) -> OutletLicenseDTO -> Json.Encode.Value
encodeOutletLicenseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletLicenseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletLicenseDTOPairs : OutletLicenseDTO -> List EncodedField
encodeOutletLicenseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "outletId" Json.Encode.int model.outletId
            , maybeEncode "licenseType" encodeLicenseType model.licenseType
            , maybeEncode "number" Json.Encode.string model.number
            , maybeEncode "dateOfIssue" Api.Time.encodeDateTime model.dateOfIssue
            , maybeEncode "dateOfExpiry" Api.Time.encodeDateTime model.dateOfExpiry
            ]
    in
    pairs


encodeOutletLicensesResponseDTO : OutletLicensesResponseDTO -> Json.Encode.Value
encodeOutletLicensesResponseDTO =
    encodeObject << encodeOutletLicensesResponseDTOPairs


encodeOutletLicensesResponseDTOWithTag : ( String, String ) -> OutletLicensesResponseDTO -> Json.Encode.Value
encodeOutletLicensesResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletLicensesResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletLicensesResponseDTOPairs : OutletLicensesResponseDTO -> List EncodedField
encodeOutletLicensesResponseDTOPairs model =
    let
        pairs =
            [ encode "licenses" (Json.Encode.list encodeFullOutletLicenseDTO) model.licenses
            ]
    in
    pairs


encodeOutletResponseDTO : OutletResponseDTO -> Json.Encode.Value
encodeOutletResponseDTO =
    encodeObject << encodeOutletResponseDTOPairs


encodeOutletResponseDTOWithTag : ( String, String ) -> OutletResponseDTO -> Json.Encode.Value
encodeOutletResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletResponseDTOPairs : OutletResponseDTO -> List EncodedField
encodeOutletResponseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            ]
    in
    pairs


stringFromOutletStatusType : OutletStatusType -> String
stringFromOutletStatusType model =
    case model of
        OutletStatusTypeATMODERATION ->
            "AT_MODERATION"

        OutletStatusTypeFAILED ->
            "FAILED"

        OutletStatusTypeMODERATED ->
            "MODERATED"

        OutletStatusTypeNONMODERATED ->
            "NONMODERATED"

        OutletStatusTypeUNKNOWN ->
            "UNKNOWN"


encodeOutletStatusType : OutletStatusType -> Json.Encode.Value
encodeOutletStatusType =
    Json.Encode.string << stringFromOutletStatusType


stringFromOutletType : OutletType -> String
stringFromOutletType model =
    case model of
        OutletTypeDEPOT ->
            "DEPOT"

        OutletTypeMIXED ->
            "MIXED"

        OutletTypeRETAIL ->
            "RETAIL"

        OutletTypeNOTDEFINED ->
            "NOT_DEFINED"


encodeOutletType : OutletType -> Json.Encode.Value
encodeOutletType =
    Json.Encode.string << stringFromOutletType


stringFromOutletVisibilityType : OutletVisibilityType -> String
stringFromOutletVisibilityType model =
    case model of
        OutletVisibilityTypeHIDDEN ->
            "HIDDEN"

        OutletVisibilityTypeVISIBLE ->
            "VISIBLE"

        OutletVisibilityTypeUNKNOWN ->
            "UNKNOWN"


encodeOutletVisibilityType : OutletVisibilityType -> Json.Encode.Value
encodeOutletVisibilityType =
    Json.Encode.string << stringFromOutletVisibilityType


encodeOutletWorkingScheduleDTO : OutletWorkingScheduleDTO -> Json.Encode.Value
encodeOutletWorkingScheduleDTO =
    encodeObject << encodeOutletWorkingScheduleDTOPairs


encodeOutletWorkingScheduleDTOWithTag : ( String, String ) -> OutletWorkingScheduleDTO -> Json.Encode.Value
encodeOutletWorkingScheduleDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletWorkingScheduleDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletWorkingScheduleDTOPairs : OutletWorkingScheduleDTO -> List EncodedField
encodeOutletWorkingScheduleDTOPairs model =
    let
        pairs =
            [ maybeEncode "workInHoliday" Json.Encode.bool model.workInHoliday
            , encode "scheduleItems" (Json.Encode.list encodeOutletWorkingScheduleItemDTO) model.scheduleItems
            ]
    in
    pairs


encodeOutletWorkingScheduleItemDTO : OutletWorkingScheduleItemDTO -> Json.Encode.Value
encodeOutletWorkingScheduleItemDTO =
    encodeObject << encodeOutletWorkingScheduleItemDTOPairs


encodeOutletWorkingScheduleItemDTOWithTag : ( String, String ) -> OutletWorkingScheduleItemDTO -> Json.Encode.Value
encodeOutletWorkingScheduleItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeOutletWorkingScheduleItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOutletWorkingScheduleItemDTOPairs : OutletWorkingScheduleItemDTO -> List EncodedField
encodeOutletWorkingScheduleItemDTOPairs model =
    let
        pairs =
            [ encode "startDay" encodeDayOfWeekType model.startDay
            , encode "endDay" encodeDayOfWeekType model.endDay
            , encode "startTime" Json.Encode.string model.startTime
            , encode "endTime" Json.Encode.string model.endTime
            ]
    in
    pairs


stringFromPageFormatType : PageFormatType -> String
stringFromPageFormatType model =
    case model of
        PageFormatTypeA7 ->
            "A7"

        PageFormatTypeA4 ->
            "A4"


encodePageFormatType : PageFormatType -> Json.Encode.Value
encodePageFormatType =
    Json.Encode.string << stringFromPageFormatType


encodePagedReturnsDTO : PagedReturnsDTO -> Json.Encode.Value
encodePagedReturnsDTO =
    encodeObject << encodePagedReturnsDTOPairs


encodePagedReturnsDTOWithTag : ( String, String ) -> PagedReturnsDTO -> Json.Encode.Value
encodePagedReturnsDTOWithTag (tagField, tag) model =
    encodeObject (encodePagedReturnsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePagedReturnsDTOPairs : PagedReturnsDTO -> List EncodedField
encodePagedReturnsDTOPairs model =
    let
        pairs =
            [ maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            , encode "returns" (Json.Encode.list encodeReturnDTO) model.returns
            ]
    in
    pairs


encodePalletsCountDTO : PalletsCountDTO -> Json.Encode.Value
encodePalletsCountDTO =
    encodeObject << encodePalletsCountDTOPairs


encodePalletsCountDTOWithTag : ( String, String ) -> PalletsCountDTO -> Json.Encode.Value
encodePalletsCountDTOWithTag (tagField, tag) model =
    encodeObject (encodePalletsCountDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePalletsCountDTOPairs : PalletsCountDTO -> List EncodedField
encodePalletsCountDTOPairs model =
    let
        pairs =
            [ maybeEncode "planned" Json.Encode.int model.planned
            , maybeEncode "fact" Json.Encode.int model.fact
            ]
    in
    pairs


stringFromParameterType : ParameterType -> String
stringFromParameterType model =
    case model of
        ParameterTypeTEXT ->
            "TEXT"

        ParameterTypeENUM ->
            "ENUM"

        ParameterTypeBOOLEAN ->
            "BOOLEAN"

        ParameterTypeNUMERIC ->
            "NUMERIC"


encodeParameterType : ParameterType -> Json.Encode.Value
encodeParameterType =
    Json.Encode.string << stringFromParameterType


encodeParameterValueConstraintsDTO : ParameterValueConstraintsDTO -> Json.Encode.Value
encodeParameterValueConstraintsDTO =
    encodeObject << encodeParameterValueConstraintsDTOPairs


encodeParameterValueConstraintsDTOWithTag : ( String, String ) -> ParameterValueConstraintsDTO -> Json.Encode.Value
encodeParameterValueConstraintsDTOWithTag (tagField, tag) model =
    encodeObject (encodeParameterValueConstraintsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParameterValueConstraintsDTOPairs : ParameterValueConstraintsDTO -> List EncodedField
encodeParameterValueConstraintsDTOPairs model =
    let
        pairs =
            [ maybeEncode "minValue" Json.Encode.float model.minValue
            , maybeEncode "maxValue" Json.Encode.float model.maxValue
            , maybeEncode "maxLength" Json.Encode.int model.maxLength
            ]
    in
    pairs


encodeParameterValueDTO : ParameterValueDTO -> Json.Encode.Value
encodeParameterValueDTO =
    encodeObject << encodeParameterValueDTOPairs


encodeParameterValueDTOWithTag : ( String, String ) -> ParameterValueDTO -> Json.Encode.Value
encodeParameterValueDTOWithTag (tagField, tag) model =
    encodeObject (encodeParameterValueDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParameterValueDTOPairs : ParameterValueDTO -> List EncodedField
encodeParameterValueDTOPairs model =
    let
        pairs =
            [ encode "parameterId" Json.Encode.int model.parameterId
            , maybeEncode "unitId" Json.Encode.int model.unitId
            , maybeEncode "valueId" Json.Encode.int model.valueId
            , maybeEncode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeParameterValueOptionDTO : ParameterValueOptionDTO -> Json.Encode.Value
encodeParameterValueOptionDTO =
    encodeObject << encodeParameterValueOptionDTOPairs


encodeParameterValueOptionDTOWithTag : ( String, String ) -> ParameterValueOptionDTO -> Json.Encode.Value
encodeParameterValueOptionDTOWithTag (tagField, tag) model =
    encodeObject (encodeParameterValueOptionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParameterValueOptionDTOPairs : ParameterValueOptionDTO -> List EncodedField
encodeParameterValueOptionDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "value" Json.Encode.string model.value
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeParcelBoxDTO : ParcelBoxDTO -> Json.Encode.Value
encodeParcelBoxDTO =
    encodeObject << encodeParcelBoxDTOPairs


encodeParcelBoxDTOWithTag : ( String, String ) -> ParcelBoxDTO -> Json.Encode.Value
encodeParcelBoxDTOWithTag (tagField, tag) model =
    encodeObject (encodeParcelBoxDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParcelBoxDTOPairs : ParcelBoxDTO -> List EncodedField
encodeParcelBoxDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "fulfilmentId" Json.Encode.string model.fulfilmentId
            ]
    in
    pairs


encodeParcelBoxLabelDTO : ParcelBoxLabelDTO -> Json.Encode.Value
encodeParcelBoxLabelDTO =
    encodeObject << encodeParcelBoxLabelDTOPairs


encodeParcelBoxLabelDTOWithTag : ( String, String ) -> ParcelBoxLabelDTO -> Json.Encode.Value
encodeParcelBoxLabelDTOWithTag (tagField, tag) model =
    encodeObject (encodeParcelBoxLabelDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParcelBoxLabelDTOPairs : ParcelBoxLabelDTO -> List EncodedField
encodeParcelBoxLabelDTOPairs model =
    let
        pairs =
            [ encode "url" Json.Encode.string model.url
            , encode "supplierName" Json.Encode.string model.supplierName
            , encode "deliveryServiceName" Json.Encode.string model.deliveryServiceName
            , encode "orderId" Json.Encode.int model.orderId
            , encode "orderNum" Json.Encode.string model.orderNum
            , encode "recipientName" Json.Encode.string model.recipientName
            , encode "boxId" Json.Encode.int model.boxId
            , encode "fulfilmentId" Json.Encode.string model.fulfilmentId
            , encode "place" Json.Encode.string model.place
            , encode "weight" Json.Encode.string model.weight
            , encode "deliveryServiceId" Json.Encode.string model.deliveryServiceId
            , maybeEncode "deliveryAddress" Json.Encode.string model.deliveryAddress
            , maybeEncode "shipmentDate" Json.Encode.string model.shipmentDate
            ]
    in
    pairs


encodeParcelDTO : ParcelDTO -> Json.Encode.Value
encodeParcelDTO =
    encodeObject << encodeParcelDTOPairs


encodeParcelDTOWithTag : ( String, String ) -> ParcelDTO -> Json.Encode.Value
encodeParcelDTOWithTag (tagField, tag) model =
    encodeObject (encodeParcelDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeParcelDTOPairs : ParcelDTO -> List EncodedField
encodeParcelDTOPairs model =
    let
        pairs =
            [ encode "boxes" (Json.Encode.list encodeParcelBoxDTO) model.boxes
            ]
    in
    pairs


encodePartnerMarketCategoryId : PartnerMarketCategoryId -> Json.Encode.Value
encodePartnerMarketCategoryId =
    encodeObject << encodePartnerMarketCategoryIdPairs


encodePartnerMarketCategoryIdWithTag : ( String, String ) -> PartnerMarketCategoryId -> Json.Encode.Value
encodePartnerMarketCategoryIdWithTag (tagField, tag) model =
    encodeObject (encodePartnerMarketCategoryIdPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePartnerMarketCategoryIdPairs : PartnerMarketCategoryId -> List EncodedField
encodePartnerMarketCategoryIdPairs model =
    let
        pairs =
            ]
    in
    pairs


encodePartnerShipmentWarehouseDTO : PartnerShipmentWarehouseDTO -> Json.Encode.Value
encodePartnerShipmentWarehouseDTO =
    encodeObject << encodePartnerShipmentWarehouseDTOPairs


encodePartnerShipmentWarehouseDTOWithTag : ( String, String ) -> PartnerShipmentWarehouseDTO -> Json.Encode.Value
encodePartnerShipmentWarehouseDTOWithTag (tagField, tag) model =
    encodeObject (encodePartnerShipmentWarehouseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePartnerShipmentWarehouseDTOPairs : PartnerShipmentWarehouseDTO -> List EncodedField
encodePartnerShipmentWarehouseDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "address" Json.Encode.string model.address
            ]
    in
    pairs


stringFromPaymentFrequencyType : PaymentFrequencyType -> String
stringFromPaymentFrequencyType model =
    case model of
        PaymentFrequencyTypeDAILY ->
            "DAILY"

        PaymentFrequencyTypeWEEKLY ->
            "WEEKLY"

        PaymentFrequencyTypeBIWEEKLY ->
            "BIWEEKLY"

        PaymentFrequencyTypeMONTHLY ->
            "MONTHLY"


encodePaymentFrequencyType : PaymentFrequencyType -> Json.Encode.Value
encodePaymentFrequencyType =
    Json.Encode.string << stringFromPaymentFrequencyType


encodePickupAddressDTO : PickupAddressDTO -> Json.Encode.Value
encodePickupAddressDTO =
    encodeObject << encodePickupAddressDTOPairs


encodePickupAddressDTOWithTag : ( String, String ) -> PickupAddressDTO -> Json.Encode.Value
encodePickupAddressDTOWithTag (tagField, tag) model =
    encodeObject (encodePickupAddressDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePickupAddressDTOPairs : PickupAddressDTO -> List EncodedField
encodePickupAddressDTOPairs model =
    let
        pairs =
            [ maybeEncode "country" Json.Encode.string model.country
            , maybeEncode "city" Json.Encode.string model.city
            , maybeEncode "street" Json.Encode.string model.street
            , maybeEncode "house" Json.Encode.string model.house
            , maybeEncode "postcode" Json.Encode.string model.postcode
            ]
    in
    pairs


stringFromPlacementType : PlacementType -> String
stringFromPlacementType model =
    case model of
        PlacementTypeFBS ->
            "FBS"

        PlacementTypeFBY ->
            "FBY"

        PlacementTypeDBS ->
            "DBS"


encodePlacementType : PlacementType -> Json.Encode.Value
encodePlacementType =
    Json.Encode.string << stringFromPlacementType


encodePriceCompetitivenessThresholdsDTO : PriceCompetitivenessThresholdsDTO -> Json.Encode.Value
encodePriceCompetitivenessThresholdsDTO =
    encodeObject << encodePriceCompetitivenessThresholdsDTOPairs


encodePriceCompetitivenessThresholdsDTOWithTag : ( String, String ) -> PriceCompetitivenessThresholdsDTO -> Json.Encode.Value
encodePriceCompetitivenessThresholdsDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceCompetitivenessThresholdsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceCompetitivenessThresholdsDTOPairs : PriceCompetitivenessThresholdsDTO -> List EncodedField
encodePriceCompetitivenessThresholdsDTOPairs model =
    let
        pairs =
            [ maybeEncode "optimalPrice" encodeBasePriceDTO model.optimalPrice
            , maybeEncode "averagePrice" encodeBasePriceDTO model.averagePrice
            ]
    in
    pairs


stringFromPriceCompetitivenessType : PriceCompetitivenessType -> String
stringFromPriceCompetitivenessType model =
    case model of
        PriceCompetitivenessTypeOPTIMAL ->
            "OPTIMAL"

        PriceCompetitivenessTypeAVERAGE ->
            "AVERAGE"

        PriceCompetitivenessTypeLOW ->
            "LOW"


encodePriceCompetitivenessType : PriceCompetitivenessType -> Json.Encode.Value
encodePriceCompetitivenessType =
    Json.Encode.string << stringFromPriceCompetitivenessType


encodePriceDTO : PriceDTO -> Json.Encode.Value
encodePriceDTO =
    encodeObject << encodePriceDTOPairs


encodePriceDTOWithTag : ( String, String ) -> PriceDTO -> Json.Encode.Value
encodePriceDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceDTOPairs : PriceDTO -> List EncodedField
encodePriceDTOPairs model =
    let
        pairs =
            [ maybeEncode "value" Json.Encode.float model.value
            , maybeEncode "discountBase" Json.Encode.float model.discountBase
            , maybeEncode "currencyId" encodeCurrencyType model.currencyId
            , maybeEncode "vat" Json.Encode.int model.vat
            ]
    in
    pairs


encodePriceQuarantineVerdictDTO : PriceQuarantineVerdictDTO -> Json.Encode.Value
encodePriceQuarantineVerdictDTO =
    encodeObject << encodePriceQuarantineVerdictDTOPairs


encodePriceQuarantineVerdictDTOWithTag : ( String, String ) -> PriceQuarantineVerdictDTO -> Json.Encode.Value
encodePriceQuarantineVerdictDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceQuarantineVerdictDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceQuarantineVerdictDTOPairs : PriceQuarantineVerdictDTO -> List EncodedField
encodePriceQuarantineVerdictDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodePriceQuarantineVerdictType model.type_
            , encode "params" (Json.Encode.list encodePriceQuarantineVerdictParameterDTO) model.params
            ]
    in
    pairs


stringFromPriceQuarantineVerdictParamNameType : PriceQuarantineVerdictParamNameType -> String
stringFromPriceQuarantineVerdictParamNameType model =
    case model of
        PriceQuarantineVerdictParamNameTypeCURRENTPRICE ->
            "CURRENT_PRICE"

        PriceQuarantineVerdictParamNameTypeLASTVALIDPRICE ->
            "LAST_VALID_PRICE"

        PriceQuarantineVerdictParamNameTypeMINPRICE ->
            "MIN_PRICE"

        PriceQuarantineVerdictParamNameTypeCURRENCY ->
            "CURRENCY"


encodePriceQuarantineVerdictParamNameType : PriceQuarantineVerdictParamNameType -> Json.Encode.Value
encodePriceQuarantineVerdictParamNameType =
    Json.Encode.string << stringFromPriceQuarantineVerdictParamNameType


encodePriceQuarantineVerdictParameterDTO : PriceQuarantineVerdictParameterDTO -> Json.Encode.Value
encodePriceQuarantineVerdictParameterDTO =
    encodeObject << encodePriceQuarantineVerdictParameterDTOPairs


encodePriceQuarantineVerdictParameterDTOWithTag : ( String, String ) -> PriceQuarantineVerdictParameterDTO -> Json.Encode.Value
encodePriceQuarantineVerdictParameterDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceQuarantineVerdictParameterDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceQuarantineVerdictParameterDTOPairs : PriceQuarantineVerdictParameterDTO -> List EncodedField
encodePriceQuarantineVerdictParameterDTOPairs model =
    let
        pairs =
            [ encode "name" encodePriceQuarantineVerdictParamNameType model.name
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs


stringFromPriceQuarantineVerdictType : PriceQuarantineVerdictType -> String
stringFromPriceQuarantineVerdictType model =
    case model of
        PriceQuarantineVerdictTypePRICECHANGE ->
            "PRICE_CHANGE"

        PriceQuarantineVerdictTypeLOWPRICE ->
            "LOW_PRICE"

        PriceQuarantineVerdictTypeLOWPRICEPROMO ->
            "LOW_PRICE_PROMO"


encodePriceQuarantineVerdictType : PriceQuarantineVerdictType -> Json.Encode.Value
encodePriceQuarantineVerdictType =
    Json.Encode.string << stringFromPriceQuarantineVerdictType


encodePriceRecommendationItemDTO : PriceRecommendationItemDTO -> Json.Encode.Value
encodePriceRecommendationItemDTO =
    encodeObject << encodePriceRecommendationItemDTOPairs


encodePriceRecommendationItemDTOWithTag : ( String, String ) -> PriceRecommendationItemDTO -> Json.Encode.Value
encodePriceRecommendationItemDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceRecommendationItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceRecommendationItemDTOPairs : PriceRecommendationItemDTO -> List EncodedField
encodePriceRecommendationItemDTOPairs model =
    let
        pairs =
            [ encode "campaignId" Json.Encode.int model.campaignId
            , encode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodePriceSuggestDTO : PriceSuggestDTO -> Json.Encode.Value
encodePriceSuggestDTO =
    encodeObject << encodePriceSuggestDTOPairs


encodePriceSuggestDTOWithTag : ( String, String ) -> PriceSuggestDTO -> Json.Encode.Value
encodePriceSuggestDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceSuggestDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceSuggestDTOPairs : PriceSuggestDTO -> List EncodedField
encodePriceSuggestDTOPairs model =
    let
        pairs =
            [ maybeEncode "type" encodePriceSuggestType model.type_
            , maybeEncode "price" Json.Encode.float model.price
            ]
    in
    pairs


encodePriceSuggestOfferDTO : PriceSuggestOfferDTO -> Json.Encode.Value
encodePriceSuggestOfferDTO =
    encodeObject << encodePriceSuggestOfferDTOPairs


encodePriceSuggestOfferDTOWithTag : ( String, String ) -> PriceSuggestOfferDTO -> Json.Encode.Value
encodePriceSuggestOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodePriceSuggestOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePriceSuggestOfferDTOPairs : PriceSuggestOfferDTO -> List EncodedField
encodePriceSuggestOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "marketSku" Json.Encode.int model.marketSku
            , maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncodeNullable "priceSuggestion" (Json.Encode.list encodePriceSuggestDTO) model.priceSuggestion
            ]
    in
    pairs


stringFromPriceSuggestType : PriceSuggestType -> String
stringFromPriceSuggestType model =
    case model of
        PriceSuggestTypeBUYBOX ->
            "BUYBOX"

        PriceSuggestTypeDEFAULTOFFER ->
            "DEFAULT_OFFER"

        PriceSuggestTypeMINPRICEMARKET ->
            "MIN_PRICE_MARKET"


encodePriceSuggestType : PriceSuggestType -> Json.Encode.Value
encodePriceSuggestType =
    Json.Encode.string << stringFromPriceSuggestType


encodePromoOfferAutoParticipatingDetailsDTO : PromoOfferAutoParticipatingDetailsDTO -> Json.Encode.Value
encodePromoOfferAutoParticipatingDetailsDTO =
    encodeObject << encodePromoOfferAutoParticipatingDetailsDTOPairs


encodePromoOfferAutoParticipatingDetailsDTOWithTag : ( String, String ) -> PromoOfferAutoParticipatingDetailsDTO -> Json.Encode.Value
encodePromoOfferAutoParticipatingDetailsDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoOfferAutoParticipatingDetailsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoOfferAutoParticipatingDetailsDTOPairs : PromoOfferAutoParticipatingDetailsDTO -> List EncodedField
encodePromoOfferAutoParticipatingDetailsDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            ]
    in
    pairs


encodePromoOfferDiscountParamsDTO : PromoOfferDiscountParamsDTO -> Json.Encode.Value
encodePromoOfferDiscountParamsDTO =
    encodeObject << encodePromoOfferDiscountParamsDTOPairs


encodePromoOfferDiscountParamsDTOWithTag : ( String, String ) -> PromoOfferDiscountParamsDTO -> Json.Encode.Value
encodePromoOfferDiscountParamsDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoOfferDiscountParamsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoOfferDiscountParamsDTOPairs : PromoOfferDiscountParamsDTO -> List EncodedField
encodePromoOfferDiscountParamsDTOPairs model =
    let
        pairs =
            [ maybeEncode "price" Json.Encode.int model.price
            , maybeEncode "promoPrice" Json.Encode.int model.promoPrice
            , encode "maxPromoPrice" Json.Encode.int model.maxPromoPrice
            ]
    in
    pairs


encodePromoOfferParamsDTO : PromoOfferParamsDTO -> Json.Encode.Value
encodePromoOfferParamsDTO =
    encodeObject << encodePromoOfferParamsDTOPairs


encodePromoOfferParamsDTOWithTag : ( String, String ) -> PromoOfferParamsDTO -> Json.Encode.Value
encodePromoOfferParamsDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoOfferParamsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoOfferParamsDTOPairs : PromoOfferParamsDTO -> List EncodedField
encodePromoOfferParamsDTOPairs model =
    let
        pairs =
            [ maybeEncode "discountParams" encodePromoOfferDiscountParamsDTO model.discountParams
            , maybeEncode "promocodeParams" encodePromoOfferPromocodeParamsDTO model.promocodeParams
            ]
    in
    pairs


stringFromPromoOfferParticipationStatusFilterType : PromoOfferParticipationStatusFilterType -> String
stringFromPromoOfferParticipationStatusFilterType model =
    case model of
        PromoOfferParticipationStatusFilterTypeMANUALLYADDED ->
            "MANUALLY_ADDED"

        PromoOfferParticipationStatusFilterTypeNOTMANUALLYADDED ->
            "NOT_MANUALLY_ADDED"


encodePromoOfferParticipationStatusFilterType : PromoOfferParticipationStatusFilterType -> Json.Encode.Value
encodePromoOfferParticipationStatusFilterType =
    Json.Encode.string << stringFromPromoOfferParticipationStatusFilterType


stringFromPromoOfferParticipationStatusType : PromoOfferParticipationStatusType -> String
stringFromPromoOfferParticipationStatusType model =
    case model of
        PromoOfferParticipationStatusTypeAUTO ->
            "AUTO"

        PromoOfferParticipationStatusTypePARTIALLYAUTO ->
            "PARTIALLY_AUTO"

        PromoOfferParticipationStatusTypeMANUAL ->
            "MANUAL"

        PromoOfferParticipationStatusTypeNOTPARTICIPATING ->
            "NOT_PARTICIPATING"


encodePromoOfferParticipationStatusType : PromoOfferParticipationStatusType -> Json.Encode.Value
encodePromoOfferParticipationStatusType =
    Json.Encode.string << stringFromPromoOfferParticipationStatusType


encodePromoOfferPromocodeParamsDTO : PromoOfferPromocodeParamsDTO -> Json.Encode.Value
encodePromoOfferPromocodeParamsDTO =
    encodeObject << encodePromoOfferPromocodeParamsDTOPairs


encodePromoOfferPromocodeParamsDTOWithTag : ( String, String ) -> PromoOfferPromocodeParamsDTO -> Json.Encode.Value
encodePromoOfferPromocodeParamsDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoOfferPromocodeParamsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoOfferPromocodeParamsDTOPairs : PromoOfferPromocodeParamsDTO -> List EncodedField
encodePromoOfferPromocodeParamsDTOPairs model =
    let
        pairs =
            [ encode "maxPrice" Json.Encode.int model.maxPrice
            ]
    in
    pairs


stringFromPromoOfferUpdateWarningCodeType : PromoOfferUpdateWarningCodeType -> String
stringFromPromoOfferUpdateWarningCodeType model =
    case model of
        PromoOfferUpdateWarningCodeTypeDEEPDISCOUNTOFFER ->
            "DEEP_DISCOUNT_OFFER"

        PromoOfferUpdateWarningCodeTypeCATALOGPRICEISLOWERTHANPROMO ->
            "CATALOG_PRICE_IS_LOWER_THAN_PROMO"

        PromoOfferUpdateWarningCodeTypeSHOPPRICESARELOWERTHANPROMO ->
            "SHOP_PRICES_ARE_LOWER_THAN_PROMO"

        PromoOfferUpdateWarningCodeTypePROMOCODEPRICEMORETHANMAXFAIRPRICE ->
            "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE"

        PromoOfferUpdateWarningCodeTypeSHOPOFFERNOTELIGIBLEFORPROMO ->
            "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO"


encodePromoOfferUpdateWarningCodeType : PromoOfferUpdateWarningCodeType -> Json.Encode.Value
encodePromoOfferUpdateWarningCodeType =
    Json.Encode.string << stringFromPromoOfferUpdateWarningCodeType


encodePromoOfferUpdateWarningDTO : PromoOfferUpdateWarningDTO -> Json.Encode.Value
encodePromoOfferUpdateWarningDTO =
    encodeObject << encodePromoOfferUpdateWarningDTOPairs


encodePromoOfferUpdateWarningDTOWithTag : ( String, String ) -> PromoOfferUpdateWarningDTO -> Json.Encode.Value
encodePromoOfferUpdateWarningDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoOfferUpdateWarningDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoOfferUpdateWarningDTOPairs : PromoOfferUpdateWarningDTO -> List EncodedField
encodePromoOfferUpdateWarningDTOPairs model =
    let
        pairs =
            [ encode "code" encodePromoOfferUpdateWarningCodeType model.code
            , maybeEncodeNullable "campaignIds" (Json.Encode.list Json.Encode.int) model.campaignIds
            ]
    in
    pairs


stringFromPromoParticipationType : PromoParticipationType -> String
stringFromPromoParticipationType model =
    case model of
        PromoParticipationTypePARTICIPATINGNOW ->
            "PARTICIPATING_NOW"

        PromoParticipationTypePARTICIPATED ->
            "PARTICIPATED"


encodePromoParticipationType : PromoParticipationType -> Json.Encode.Value
encodePromoParticipationType =
    Json.Encode.string << stringFromPromoParticipationType


encodePromoPeriodDTO : PromoPeriodDTO -> Json.Encode.Value
encodePromoPeriodDTO =
    encodeObject << encodePromoPeriodDTOPairs


encodePromoPeriodDTOWithTag : ( String, String ) -> PromoPeriodDTO -> Json.Encode.Value
encodePromoPeriodDTOWithTag (tagField, tag) model =
    encodeObject (encodePromoPeriodDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePromoPeriodDTOPairs : PromoPeriodDTO -> List EncodedField
encodePromoPeriodDTOPairs model =
    let
        pairs =
            [ encode "dateTimeFrom" Api.Time.encodeDateTime model.dateTimeFrom
            , encode "dateTimeTo" Api.Time.encodeDateTime model.dateTimeTo
            ]
    in
    pairs


encodeProvideOrderDigitalCodesRequest : ProvideOrderDigitalCodesRequest -> Json.Encode.Value
encodeProvideOrderDigitalCodesRequest =
    encodeObject << encodeProvideOrderDigitalCodesRequestPairs


encodeProvideOrderDigitalCodesRequestWithTag : ( String, String ) -> ProvideOrderDigitalCodesRequest -> Json.Encode.Value
encodeProvideOrderDigitalCodesRequestWithTag (tagField, tag) model =
    encodeObject (encodeProvideOrderDigitalCodesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeProvideOrderDigitalCodesRequestPairs : ProvideOrderDigitalCodesRequest -> List EncodedField
encodeProvideOrderDigitalCodesRequestPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeOrderDigitalItemDTO) model.items
            ]
    in
    pairs


encodeProvideOrderItemIdentifiersRequest : ProvideOrderItemIdentifiersRequest -> Json.Encode.Value
encodeProvideOrderItemIdentifiersRequest =
    encodeObject << encodeProvideOrderItemIdentifiersRequestPairs


encodeProvideOrderItemIdentifiersRequestWithTag : ( String, String ) -> ProvideOrderItemIdentifiersRequest -> Json.Encode.Value
encodeProvideOrderItemIdentifiersRequestWithTag (tagField, tag) model =
    encodeObject (encodeProvideOrderItemIdentifiersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeProvideOrderItemIdentifiersRequestPairs : ProvideOrderItemIdentifiersRequest -> List EncodedField
encodeProvideOrderItemIdentifiersRequestPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeOrderItemInstanceModificationDTO) model.items
            ]
    in
    pairs


encodeProvideOrderItemIdentifiersResponse : ProvideOrderItemIdentifiersResponse -> Json.Encode.Value
encodeProvideOrderItemIdentifiersResponse =
    encodeObject << encodeProvideOrderItemIdentifiersResponsePairs


encodeProvideOrderItemIdentifiersResponseWithTag : ( String, String ) -> ProvideOrderItemIdentifiersResponse -> Json.Encode.Value
encodeProvideOrderItemIdentifiersResponseWithTag (tagField, tag) model =
    encodeObject (encodeProvideOrderItemIdentifiersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeProvideOrderItemIdentifiersResponsePairs : ProvideOrderItemIdentifiersResponse -> List EncodedField
encodeProvideOrderItemIdentifiersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderItemsModificationResultDTO model.result
            ]
    in
    pairs


encodePutSkuBidsRequest : PutSkuBidsRequest -> Json.Encode.Value
encodePutSkuBidsRequest =
    encodeObject << encodePutSkuBidsRequestPairs


encodePutSkuBidsRequestWithTag : ( String, String ) -> PutSkuBidsRequest -> Json.Encode.Value
encodePutSkuBidsRequestWithTag (tagField, tag) model =
    encodeObject (encodePutSkuBidsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePutSkuBidsRequestPairs : PutSkuBidsRequest -> List EncodedField
encodePutSkuBidsRequestPairs model =
    let
        pairs =
            [ encode "bids" (Json.Encode.list encodeSkuBidItemDTO) model.bids
            ]
    in
    pairs


encodeQualityRatingAffectedOrderDTO : QualityRatingAffectedOrderDTO -> Json.Encode.Value
encodeQualityRatingAffectedOrderDTO =
    encodeObject << encodeQualityRatingAffectedOrderDTOPairs


encodeQualityRatingAffectedOrderDTOWithTag : ( String, String ) -> QualityRatingAffectedOrderDTO -> Json.Encode.Value
encodeQualityRatingAffectedOrderDTOWithTag (tagField, tag) model =
    encodeObject (encodeQualityRatingAffectedOrderDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQualityRatingAffectedOrderDTOPairs : QualityRatingAffectedOrderDTO -> List EncodedField
encodeQualityRatingAffectedOrderDTOPairs model =
    let
        pairs =
            [ encode "orderId" Json.Encode.int model.orderId
            , encode "description" Json.Encode.string model.description
            , encode "componentType" encodeAffectedOrderQualityRatingComponentType model.componentType
            ]
    in
    pairs


encodeQualityRatingComponentDTO : QualityRatingComponentDTO -> Json.Encode.Value
encodeQualityRatingComponentDTO =
    encodeObject << encodeQualityRatingComponentDTOPairs


encodeQualityRatingComponentDTOWithTag : ( String, String ) -> QualityRatingComponentDTO -> Json.Encode.Value
encodeQualityRatingComponentDTOWithTag (tagField, tag) model =
    encodeObject (encodeQualityRatingComponentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQualityRatingComponentDTOPairs : QualityRatingComponentDTO -> List EncodedField
encodeQualityRatingComponentDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "componentType" encodeQualityRatingComponentType model.componentType
            ]
    in
    pairs


stringFromQualityRatingComponentType : QualityRatingComponentType -> String
stringFromQualityRatingComponentType model =
    case model of
        QualityRatingComponentTypeDBSCANCELLATIONRATE ->
            "DBS_CANCELLATION_RATE"

        QualityRatingComponentTypeDBSLATEDELIVERYRATE ->
            "DBS_LATE_DELIVERY_RATE"

        QualityRatingComponentTypeFBSCANCELLATIONRATE ->
            "FBS_CANCELLATION_RATE"

        QualityRatingComponentTypeFBSLATESHIPRATE ->
            "FBS_LATE_SHIP_RATE"

        QualityRatingComponentTypeFBYLATEDELIVERYRATE ->
            "FBY_LATE_DELIVERY_RATE"

        QualityRatingComponentTypeFBYCANCELLATIONRATE ->
            "FBY_CANCELLATION_RATE"

        QualityRatingComponentTypeFBYDELIVERYDIFFRATE ->
            "FBY_DELIVERY_DIFF_RATE"

        QualityRatingComponentTypeFBYLATEEDITINGRATE ->
            "FBY_LATE_EDITING_RATE"


encodeQualityRatingComponentType : QualityRatingComponentType -> Json.Encode.Value
encodeQualityRatingComponentType =
    Json.Encode.string << stringFromQualityRatingComponentType


encodeQualityRatingDTO : QualityRatingDTO -> Json.Encode.Value
encodeQualityRatingDTO =
    encodeObject << encodeQualityRatingDTOPairs


encodeQualityRatingDTOWithTag : ( String, String ) -> QualityRatingDTO -> Json.Encode.Value
encodeQualityRatingDTOWithTag (tagField, tag) model =
    encodeObject (encodeQualityRatingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQualityRatingDTOPairs : QualityRatingDTO -> List EncodedField
encodeQualityRatingDTOPairs model =
    let
        pairs =
            [ encode "rating" Json.Encode.int model.rating
            , encode "calculationDate" Api.Time.encodeDate model.calculationDate
            , encode "components" (Json.Encode.list encodeQualityRatingComponentDTO) model.components
            ]
    in
    pairs


encodeQualityRatingDetailsDTO : QualityRatingDetailsDTO -> Json.Encode.Value
encodeQualityRatingDetailsDTO =
    encodeObject << encodeQualityRatingDetailsDTOPairs


encodeQualityRatingDetailsDTOWithTag : ( String, String ) -> QualityRatingDetailsDTO -> Json.Encode.Value
encodeQualityRatingDetailsDTOWithTag (tagField, tag) model =
    encodeObject (encodeQualityRatingDetailsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQualityRatingDetailsDTOPairs : QualityRatingDetailsDTO -> List EncodedField
encodeQualityRatingDetailsDTOPairs model =
    let
        pairs =
            [ encode "affectedOrders" (Json.Encode.list encodeQualityRatingAffectedOrderDTO) model.affectedOrders
            ]
    in
    pairs


encodeQuantumDTO : QuantumDTO -> Json.Encode.Value
encodeQuantumDTO =
    encodeObject << encodeQuantumDTOPairs


encodeQuantumDTOWithTag : ( String, String ) -> QuantumDTO -> Json.Encode.Value
encodeQuantumDTOWithTag (tagField, tag) model =
    encodeObject (encodeQuantumDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQuantumDTOPairs : QuantumDTO -> List EncodedField
encodeQuantumDTOPairs model =
    let
        pairs =
            [ maybeEncode "minQuantity" Json.Encode.int model.minQuantity
            , maybeEncode "stepQuantity" Json.Encode.int model.stepQuantity
            ]
    in
    pairs


encodeQuarantineOfferDTO : QuarantineOfferDTO -> Json.Encode.Value
encodeQuarantineOfferDTO =
    encodeObject << encodeQuarantineOfferDTOPairs


encodeQuarantineOfferDTOWithTag : ( String, String ) -> QuarantineOfferDTO -> Json.Encode.Value
encodeQuarantineOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeQuarantineOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQuarantineOfferDTOPairs : QuarantineOfferDTO -> List EncodedField
encodeQuarantineOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "currentPrice" encodeBasePriceDTO model.currentPrice
            , maybeEncode "lastValidPrice" encodeBasePriceDTO model.lastValidPrice
            , maybeEncodeNullable "verdicts" (Json.Encode.list encodePriceQuarantineVerdictDTO) model.verdicts
            ]
    in
    pairs


stringFromRecipientType : RecipientType -> String
stringFromRecipientType model =
    case model of
        RecipientTypeSHOP ->
            "SHOP"

        RecipientTypeDELIVERYSERVICE ->
            "DELIVERY_SERVICE"

        RecipientTypePOST ->
            "POST"


encodeRecipientType : RecipientType -> Json.Encode.Value
encodeRecipientType =
    Json.Encode.string << stringFromRecipientType


stringFromRefundStatusType : RefundStatusType -> String
stringFromRefundStatusType model =
    case model of
        RefundStatusTypeSTARTEDBYUSER ->
            "STARTED_BY_USER"

        RefundStatusTypeREFUNDINPROGRESS ->
            "REFUND_IN_PROGRESS"

        RefundStatusTypeREFUNDED ->
            "REFUNDED"

        RefundStatusTypeFAILED ->
            "FAILED"

        RefundStatusTypeWAITINGFORDECISION ->
            "WAITING_FOR_DECISION"

        RefundStatusTypeDECISIONMADE ->
            "DECISION_MADE"

        RefundStatusTypeREFUNDEDWITHBONUSES ->
            "REFUNDED_WITH_BONUSES"

        RefundStatusTypeREFUNDEDBYSHOP ->
            "REFUNDED_BY_SHOP"

        RefundStatusTypeCANCELLED ->
            "CANCELLED"

        RefundStatusTypeCOMPLETEWITHOUTREFUND ->
            "COMPLETE_WITHOUT_REFUND"

        RefundStatusTypeUNKNOWN ->
            "UNKNOWN"


encodeRefundStatusType : RefundStatusType -> Json.Encode.Value
encodeRefundStatusType =
    Json.Encode.string << stringFromRefundStatusType


encodeRegionDTO : RegionDTO -> Json.Encode.Value
encodeRegionDTO =
    encodeObject << encodeRegionDTOPairs


encodeRegionDTOWithTag : ( String, String ) -> RegionDTO -> Json.Encode.Value
encodeRegionDTOWithTag (tagField, tag) model =
    encodeObject (encodeRegionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRegionDTOPairs : RegionDTO -> List EncodedField
encodeRegionDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "type" encodeRegionType model.type_
            , maybeEncode "parent" encodeRegionDTO <| unwrapRegionDTOParent model.parent
            , maybeEncodeNullable "children" (Json.Encode.list encodeRegionDTO) <| unwrapRegionDTOChildren model.children
            ]
    in
    pairs


stringFromRegionType : RegionType -> String
stringFromRegionType model =
    case model of
        RegionTypeOTHER ->
            "OTHER"

        RegionTypeCONTINENT ->
            "CONTINENT"

        RegionTypeREGION ->
            "REGION"

        RegionTypeCOUNTRY ->
            "COUNTRY"

        RegionTypeCOUNTRYDISTRICT ->
            "COUNTRY_DISTRICT"

        RegionTypeREPUBLIC ->
            "REPUBLIC"

        RegionTypeCITY ->
            "CITY"

        RegionTypeVILLAGE ->
            "VILLAGE"

        RegionTypeCITYDISTRICT ->
            "CITY_DISTRICT"

        RegionTypeSUBWAYSTATION ->
            "SUBWAY_STATION"

        RegionTypeREPUBLICAREA ->
            "REPUBLIC_AREA"


encodeRegionType : RegionType -> Json.Encode.Value
encodeRegionType =
    Json.Encode.string << stringFromRegionType


encodeRegionalModelInfoDTO : RegionalModelInfoDTO -> Json.Encode.Value
encodeRegionalModelInfoDTO =
    encodeObject << encodeRegionalModelInfoDTOPairs


encodeRegionalModelInfoDTOWithTag : ( String, String ) -> RegionalModelInfoDTO -> Json.Encode.Value
encodeRegionalModelInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeRegionalModelInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRegionalModelInfoDTOPairs : RegionalModelInfoDTO -> List EncodedField
encodeRegionalModelInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "regionId" Json.Encode.int model.regionId
            ]
    in
    pairs


encodeRejectedPromoOfferDeleteDTO : RejectedPromoOfferDeleteDTO -> Json.Encode.Value
encodeRejectedPromoOfferDeleteDTO =
    encodeObject << encodeRejectedPromoOfferDeleteDTOPairs


encodeRejectedPromoOfferDeleteDTOWithTag : ( String, String ) -> RejectedPromoOfferDeleteDTO -> Json.Encode.Value
encodeRejectedPromoOfferDeleteDTOWithTag (tagField, tag) model =
    encodeObject (encodeRejectedPromoOfferDeleteDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRejectedPromoOfferDeleteDTOPairs : RejectedPromoOfferDeleteDTO -> List EncodedField
encodeRejectedPromoOfferDeleteDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "reason" encodeRejectedPromoOfferDeleteReasonType model.reason
            ]
    in
    pairs


stringFromRejectedPromoOfferDeleteReasonType : RejectedPromoOfferDeleteReasonType -> String
stringFromRejectedPromoOfferDeleteReasonType model =
    case model of
        RejectedPromoOfferDeleteReasonTypeOFFERDOESNOTEXIST ->
            "OFFER_DOES_NOT_EXIST"


encodeRejectedPromoOfferDeleteReasonType : RejectedPromoOfferDeleteReasonType -> Json.Encode.Value
encodeRejectedPromoOfferDeleteReasonType =
    Json.Encode.string << stringFromRejectedPromoOfferDeleteReasonType


encodeRejectedPromoOfferUpdateDTO : RejectedPromoOfferUpdateDTO -> Json.Encode.Value
encodeRejectedPromoOfferUpdateDTO =
    encodeObject << encodeRejectedPromoOfferUpdateDTOPairs


encodeRejectedPromoOfferUpdateDTOWithTag : ( String, String ) -> RejectedPromoOfferUpdateDTO -> Json.Encode.Value
encodeRejectedPromoOfferUpdateDTOWithTag (tagField, tag) model =
    encodeObject (encodeRejectedPromoOfferUpdateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRejectedPromoOfferUpdateDTOPairs : RejectedPromoOfferUpdateDTO -> List EncodedField
encodeRejectedPromoOfferUpdateDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "reason" encodeRejectedPromoOfferUpdateReasonType model.reason
            ]
    in
    pairs


stringFromRejectedPromoOfferUpdateReasonType : RejectedPromoOfferUpdateReasonType -> String
stringFromRejectedPromoOfferUpdateReasonType model =
    case model of
        RejectedPromoOfferUpdateReasonTypeOFFERDOESNOTEXIST ->
            "OFFER_DOES_NOT_EXIST"

        RejectedPromoOfferUpdateReasonTypeOFFERDUPLICATION ->
            "OFFER_DUPLICATION"

        RejectedPromoOfferUpdateReasonTypeOFFERNOTELIGIBLEFORPROMO ->
            "OFFER_NOT_ELIGIBLE_FOR_PROMO"

        RejectedPromoOfferUpdateReasonTypeOFFERPROMOSMAXBYTESIZEEXCEEDED ->
            "OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED"

        RejectedPromoOfferUpdateReasonTypeDEADLINEFORFOCUSPROMOSEXCEEDED ->
            "DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED"

        RejectedPromoOfferUpdateReasonTypeEMPTYOLDPRICE ->
            "EMPTY_OLD_PRICE"

        RejectedPromoOfferUpdateReasonTypeEMPTYPROMOPRICE ->
            "EMPTY_PROMO_PRICE"

        RejectedPromoOfferUpdateReasonTypeMAXPROMOPRICEEXCEEDED ->
            "MAX_PROMO_PRICE_EXCEEDED"

        RejectedPromoOfferUpdateReasonTypePROMOPRICEBIGGERTHANMAX ->
            "PROMO_PRICE_BIGGER_THAN_MAX"

        RejectedPromoOfferUpdateReasonTypePROMOPRICESMALLERTHANMIN ->
            "PROMO_PRICE_SMALLER_THAN_MIN"


encodeRejectedPromoOfferUpdateReasonType : RejectedPromoOfferUpdateReasonType -> Json.Encode.Value
encodeRejectedPromoOfferUpdateReasonType =
    Json.Encode.string << stringFromRejectedPromoOfferUpdateReasonType


stringFromReportFormatType : ReportFormatType -> String
stringFromReportFormatType model =
    case model of
        ReportFormatTypeFILE ->
            "FILE"

        ReportFormatTypeCSV ->
            "CSV"


encodeReportFormatType : ReportFormatType -> Json.Encode.Value
encodeReportFormatType =
    Json.Encode.string << stringFromReportFormatType


encodeReportInfoDTO : ReportInfoDTO -> Json.Encode.Value
encodeReportInfoDTO =
    encodeObject << encodeReportInfoDTOPairs


encodeReportInfoDTOWithTag : ( String, String ) -> ReportInfoDTO -> Json.Encode.Value
encodeReportInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeReportInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReportInfoDTOPairs : ReportInfoDTO -> List EncodedField
encodeReportInfoDTOPairs model =
    let
        pairs =
            [ encode "status" encodeReportStatusType model.status
            , maybeEncode "subStatus" encodeReportSubStatusType model.subStatus
            , encode "generationRequestedAt" Api.Time.encodeDateTime model.generationRequestedAt
            , maybeEncode "generationFinishedAt" Api.Time.encodeDateTime model.generationFinishedAt
            , maybeEncode "file" Json.Encode.string model.file
            , maybeEncode "estimatedGenerationTime" Json.Encode.int model.estimatedGenerationTime
            ]
    in
    pairs


stringFromReportStatusType : ReportStatusType -> String
stringFromReportStatusType model =
    case model of
        ReportStatusTypePENDING ->
            "PENDING"

        ReportStatusTypePROCESSING ->
            "PROCESSING"

        ReportStatusTypeFAILED ->
            "FAILED"

        ReportStatusTypeDONE ->
            "DONE"


encodeReportStatusType : ReportStatusType -> Json.Encode.Value
encodeReportStatusType =
    Json.Encode.string << stringFromReportStatusType


stringFromReportSubStatusType : ReportSubStatusType -> String
stringFromReportSubStatusType model =
    case model of
        ReportSubStatusTypeNODATA ->
            "NO_DATA"

        ReportSubStatusTypeTOOLARGE ->
            "TOO_LARGE"

        ReportSubStatusTypeRESOURCENOTFOUND ->
            "RESOURCE_NOT_FOUND"


encodeReportSubStatusType : ReportSubStatusType -> Json.Encode.Value
encodeReportSubStatusType =
    Json.Encode.string << stringFromReportSubStatusType


encodeReturnDTO : ReturnDTO -> Json.Encode.Value
encodeReturnDTO =
    encodeObject << encodeReturnDTOPairs


encodeReturnDTOWithTag : ( String, String ) -> ReturnDTO -> Json.Encode.Value
encodeReturnDTOWithTag (tagField, tag) model =
    encodeObject (encodeReturnDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReturnDTOPairs : ReturnDTO -> List EncodedField
encodeReturnDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "orderId" Json.Encode.int model.orderId
            , maybeEncode "creationDate" Api.Time.encodeDateTime model.creationDate
            , maybeEncode "updateDate" Api.Time.encodeDateTime model.updateDate
            , maybeEncode "refundStatus" encodeRefundStatusType model.refundStatus
            , maybeEncode "logisticPickupPoint" encodeLogisticPickupPointDTO model.logisticPickupPoint
            , maybeEncode "shipmentRecipientType" encodeRecipientType model.shipmentRecipientType
            , maybeEncode "shipmentStatus" encodeReturnShipmentStatusType model.shipmentStatus
            , maybeEncode "refundAmount" Json.Encode.int model.refundAmount
            , encode "items" (Json.Encode.list encodeReturnItemDTO) model.items
            , maybeEncode "returnType" encodeReturnType model.returnType
            , maybeEncode "fastReturn" Json.Encode.bool model.fastReturn
            ]
    in
    pairs


encodeReturnDecisionDTO : ReturnDecisionDTO -> Json.Encode.Value
encodeReturnDecisionDTO =
    encodeObject << encodeReturnDecisionDTOPairs


encodeReturnDecisionDTOWithTag : ( String, String ) -> ReturnDecisionDTO -> Json.Encode.Value
encodeReturnDecisionDTOWithTag (tagField, tag) model =
    encodeObject (encodeReturnDecisionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReturnDecisionDTOPairs : ReturnDecisionDTO -> List EncodedField
encodeReturnDecisionDTOPairs model =
    let
        pairs =
            [ maybeEncode "returnItemId" Json.Encode.int model.returnItemId
            , maybeEncode "count" Json.Encode.int model.count
            , maybeEncode "comment" Json.Encode.string model.comment
            , maybeEncode "reasonType" encodeReturnDecisionReasonType model.reasonType
            , maybeEncode "subreasonType" encodeReturnDecisionSubreasonType model.subreasonType
            , maybeEncode "decisionType" encodeReturnDecisionType model.decisionType
            , maybeEncode "refundAmount" Json.Encode.int model.refundAmount
            , maybeEncode "partnerCompensation" Json.Encode.int model.partnerCompensation
            , maybeEncodeNullable "images" (Json.Encode.list Json.Encode.string) model.images
            ]
    in
    pairs


stringFromReturnDecisionReasonType : ReturnDecisionReasonType -> String
stringFromReturnDecisionReasonType model =
    case model of
        ReturnDecisionReasonTypeBADQUALITY ->
            "BAD_QUALITY"

        ReturnDecisionReasonTypeDOESNOTFIT ->
            "DOES_NOT_FIT"

        ReturnDecisionReasonTypeWRONGITEM ->
            "WRONG_ITEM"

        ReturnDecisionReasonTypeDAMAGEDELIVERY ->
            "DAMAGE_DELIVERY"

        ReturnDecisionReasonTypeLOYALTYFAIL ->
            "LOYALTY_FAIL"

        ReturnDecisionReasonTypeCONTENTFAIL ->
            "CONTENT_FAIL"

        ReturnDecisionReasonTypeUNKNOWN ->
            "UNKNOWN"


encodeReturnDecisionReasonType : ReturnDecisionReasonType -> Json.Encode.Value
encodeReturnDecisionReasonType =
    Json.Encode.string << stringFromReturnDecisionReasonType


stringFromReturnDecisionSubreasonType : ReturnDecisionSubreasonType -> String
stringFromReturnDecisionSubreasonType model =
    case model of
        ReturnDecisionSubreasonTypeUSERDIDNOTLIKE ->
            "USER_DID_NOT_LIKE"

        ReturnDecisionSubreasonTypeUSERCHANGEDMIND ->
            "USER_CHANGED_MIND"

        ReturnDecisionSubreasonTypeDELIVEREDTOOLONG ->
            "DELIVERED_TOO_LONG"

        ReturnDecisionSubreasonTypeBADPACKAGE ->
            "BAD_PACKAGE"

        ReturnDecisionSubreasonTypeDAMAGED ->
            "DAMAGED"

        ReturnDecisionSubreasonTypeNOTWORKING ->
            "NOT_WORKING"

        ReturnDecisionSubreasonTypeINCOMPLETENESS ->
            "INCOMPLETENESS"

        ReturnDecisionSubreasonTypeWRONGITEM ->
            "WRONG_ITEM"

        ReturnDecisionSubreasonTypeWRONGCOLOR ->
            "WRONG_COLOR"

        ReturnDecisionSubreasonTypeDIDNOTMATCHDESCRIPTION ->
            "DID_NOT_MATCH_DESCRIPTION"

        ReturnDecisionSubreasonTypeUNKNOWN ->
            "UNKNOWN"


encodeReturnDecisionSubreasonType : ReturnDecisionSubreasonType -> Json.Encode.Value
encodeReturnDecisionSubreasonType =
    Json.Encode.string << stringFromReturnDecisionSubreasonType


stringFromReturnDecisionType : ReturnDecisionType -> String
stringFromReturnDecisionType model =
    case model of
        ReturnDecisionTypeREFUNDMONEY ->
            "REFUND_MONEY"

        ReturnDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT ->
            "REFUND_MONEY_INCLUDING_SHIPMENT"

        ReturnDecisionTypeREPAIR ->
            "REPAIR"

        ReturnDecisionTypeREPLACE ->
            "REPLACE"

        ReturnDecisionTypeSENDTOEXAMINATION ->
            "SEND_TO_EXAMINATION"

        ReturnDecisionTypeDECLINEREFUND ->
            "DECLINE_REFUND"

        ReturnDecisionTypeOTHERDECISION ->
            "OTHER_DECISION"

        ReturnDecisionTypeUNKNOWN ->
            "UNKNOWN"


encodeReturnDecisionType : ReturnDecisionType -> Json.Encode.Value
encodeReturnDecisionType =
    Json.Encode.string << stringFromReturnDecisionType


encodeReturnInstanceDTO : ReturnInstanceDTO -> Json.Encode.Value
encodeReturnInstanceDTO =
    encodeObject << encodeReturnInstanceDTOPairs


encodeReturnInstanceDTOWithTag : ( String, String ) -> ReturnInstanceDTO -> Json.Encode.Value
encodeReturnInstanceDTOWithTag (tagField, tag) model =
    encodeObject (encodeReturnInstanceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReturnInstanceDTOPairs : ReturnInstanceDTO -> List EncodedField
encodeReturnInstanceDTOPairs model =
    let
        pairs =
            [ maybeEncode "stockType" encodeReturnInstanceStockType model.stockType
            , maybeEncode "status" encodeReturnInstanceStatusType model.status
            , maybeEncode "cis" Json.Encode.string model.cis
            , maybeEncode "imei" Json.Encode.string model.imei
            ]
    in
    pairs


stringFromReturnInstanceStatusType : ReturnInstanceStatusType -> String
stringFromReturnInstanceStatusType model =
    case model of
        ReturnInstanceStatusTypeCREATED ->
            "CREATED"

        ReturnInstanceStatusTypeRECEIVED ->
            "RECEIVED"

        ReturnInstanceStatusTypeINTRANSIT ->
            "IN_TRANSIT"

        ReturnInstanceStatusTypeREADYFORPICKUP ->
            "READY_FOR_PICKUP"

        ReturnInstanceStatusTypePICKED ->
            "PICKED"

        ReturnInstanceStatusTypeRECEIVEDONFULFILLMENT ->
            "RECEIVED_ON_FULFILLMENT"

        ReturnInstanceStatusTypeCANCELLED ->
            "CANCELLED"

        ReturnInstanceStatusTypeLOST ->
            "LOST"

        ReturnInstanceStatusTypeUTILIZED ->
            "UTILIZED"

        ReturnInstanceStatusTypePREPAREDFORUTILIZATION ->
            "PREPARED_FOR_UTILIZATION"

        ReturnInstanceStatusTypeEXPROPRIATED ->
            "EXPROPRIATED"

        ReturnInstanceStatusTypeNOTINDEMAND ->
            "NOT_IN_DEMAND"


encodeReturnInstanceStatusType : ReturnInstanceStatusType -> Json.Encode.Value
encodeReturnInstanceStatusType =
    Json.Encode.string << stringFromReturnInstanceStatusType


stringFromReturnInstanceStockType : ReturnInstanceStockType -> String
stringFromReturnInstanceStockType model =
    case model of
        ReturnInstanceStockTypeFIT ->
            "FIT"

        ReturnInstanceStockTypeDEFECT ->
            "DEFECT"

        ReturnInstanceStockTypeANOMALY ->
            "ANOMALY"

        ReturnInstanceStockTypeSURPLUS ->
            "SURPLUS"

        ReturnInstanceStockTypeEXPIRED ->
            "EXPIRED"

        ReturnInstanceStockTypeMISGRADING ->
            "MISGRADING"

        ReturnInstanceStockTypeUNDEFINED ->
            "UNDEFINED"

        ReturnInstanceStockTypeINCORRECTIMEI ->
            "INCORRECT_IMEI"

        ReturnInstanceStockTypeINCORRECTSERIALNUMBER ->
            "INCORRECT_SERIAL_NUMBER"

        ReturnInstanceStockTypeINCORRECTCIS ->
            "INCORRECT_CIS"

        ReturnInstanceStockTypePARTMISSING ->
            "PART_MISSING"

        ReturnInstanceStockTypeNONCOMPLIENT ->
            "NON_COMPLIENT"

        ReturnInstanceStockTypeNOTACCEPTABLE ->
            "NOT_ACCEPTABLE"

        ReturnInstanceStockTypeSERVICE ->
            "SERVICE"

        ReturnInstanceStockTypeMARKDOWN ->
            "MARKDOWN"

        ReturnInstanceStockTypeDEMO ->
            "DEMO"

        ReturnInstanceStockTypeREPAIR ->
            "REPAIR"

        ReturnInstanceStockTypeFIRMWARE ->
            "FIRMWARE"

        ReturnInstanceStockTypeUNKNOWN ->
            "UNKNOWN"


encodeReturnInstanceStockType : ReturnInstanceStockType -> Json.Encode.Value
encodeReturnInstanceStockType =
    Json.Encode.string << stringFromReturnInstanceStockType


encodeReturnItemDTO : ReturnItemDTO -> Json.Encode.Value
encodeReturnItemDTO =
    encodeObject << encodeReturnItemDTOPairs


encodeReturnItemDTOWithTag : ( String, String ) -> ReturnItemDTO -> Json.Encode.Value
encodeReturnItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeReturnItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReturnItemDTOPairs : ReturnItemDTO -> List EncodedField
encodeReturnItemDTOPairs model =
    let
        pairs =
            [ maybeEncode "marketSku" Json.Encode.int model.marketSku
            , encode "shopSku" Json.Encode.string model.shopSku
            , encode "count" Json.Encode.int model.count
            , maybeEncodeNullable "decisions" (Json.Encode.list encodeReturnDecisionDTO) model.decisions
            , maybeEncodeNullable "instances" (Json.Encode.list encodeReturnInstanceDTO) model.instances
            , maybeEncodeNullable "tracks" (Json.Encode.list encodeTrackDTO) model.tracks
            ]
    in
    pairs


stringFromReturnRequestDecisionType : ReturnRequestDecisionType -> String
stringFromReturnRequestDecisionType model =
    case model of
        ReturnRequestDecisionTypeREFUNDMONEY ->
            "REFUND_MONEY"

        ReturnRequestDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT ->
            "REFUND_MONEY_INCLUDING_SHIPMENT"

        ReturnRequestDecisionTypeREPAIR ->
            "REPAIR"

        ReturnRequestDecisionTypeREPLACE ->
            "REPLACE"

        ReturnRequestDecisionTypeSENDTOEXAMINATION ->
            "SEND_TO_EXAMINATION"

        ReturnRequestDecisionTypeDECLINEREFUND ->
            "DECLINE_REFUND"

        ReturnRequestDecisionTypeOTHERDECISION ->
            "OTHER_DECISION"


encodeReturnRequestDecisionType : ReturnRequestDecisionType -> Json.Encode.Value
encodeReturnRequestDecisionType =
    Json.Encode.string << stringFromReturnRequestDecisionType


stringFromReturnShipmentStatusType : ReturnShipmentStatusType -> String
stringFromReturnShipmentStatusType model =
    case model of
        ReturnShipmentStatusTypeCREATED ->
            "CREATED"

        ReturnShipmentStatusTypeRECEIVED ->
            "RECEIVED"

        ReturnShipmentStatusTypeINTRANSIT ->
            "IN_TRANSIT"

        ReturnShipmentStatusTypeREADYFORPICKUP ->
            "READY_FOR_PICKUP"

        ReturnShipmentStatusTypePICKED ->
            "PICKED"

        ReturnShipmentStatusTypeLOST ->
            "LOST"

        ReturnShipmentStatusTypeEXPIRED ->
            "EXPIRED"

        ReturnShipmentStatusTypeCANCELLED ->
            "CANCELLED"

        ReturnShipmentStatusTypeFULFILMENTRECEIVED ->
            "FULFILMENT_RECEIVED"

        ReturnShipmentStatusTypePREPAREDFORUTILIZATION ->
            "PREPARED_FOR_UTILIZATION"

        ReturnShipmentStatusTypeNOTINDEMAND ->
            "NOT_IN_DEMAND"

        ReturnShipmentStatusTypeUTILIZED ->
            "UTILIZED"

        ReturnShipmentStatusTypeREADYFOREXPROPRIATION ->
            "READY_FOR_EXPROPRIATION"

        ReturnShipmentStatusTypeRECEIVEDFOREXPROPRIATION ->
            "RECEIVED_FOR_EXPROPRIATION"


encodeReturnShipmentStatusType : ReturnShipmentStatusType -> Json.Encode.Value
encodeReturnShipmentStatusType =
    Json.Encode.string << stringFromReturnShipmentStatusType


stringFromReturnType : ReturnType -> String
stringFromReturnType model =
    case model of
        ReturnTypeUNREDEEMED ->
            "UNREDEEMED"

        ReturnTypeRETURN ->
            "RETURN"


encodeReturnType : ReturnType -> Json.Encode.Value
encodeReturnType =
    Json.Encode.string << stringFromReturnType


encodeScrollingPagerDTO : ScrollingPagerDTO -> Json.Encode.Value
encodeScrollingPagerDTO =
    encodeObject << encodeScrollingPagerDTOPairs


encodeScrollingPagerDTOWithTag : ( String, String ) -> ScrollingPagerDTO -> Json.Encode.Value
encodeScrollingPagerDTOWithTag (tagField, tag) model =
    encodeObject (encodeScrollingPagerDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeScrollingPagerDTOPairs : ScrollingPagerDTO -> List EncodedField
encodeScrollingPagerDTOPairs model =
    let
        pairs =
            [ maybeEncode "nextPageToken" Json.Encode.string model.nextPageToken
            , maybeEncode "prevPageToken" Json.Encode.string model.prevPageToken
            ]
    in
    pairs


encodeSearchModelsResponse : SearchModelsResponse -> Json.Encode.Value
encodeSearchModelsResponse =
    encodeObject << encodeSearchModelsResponsePairs


encodeSearchModelsResponseWithTag : ( String, String ) -> SearchModelsResponse -> Json.Encode.Value
encodeSearchModelsResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchModelsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchModelsResponsePairs : SearchModelsResponse -> List EncodedField
encodeSearchModelsResponsePairs model =
    let
        pairs =
            [ encode "models" (Json.Encode.list encodeModelDTO) model.models
            , maybeEncode "currency" encodeCurrencyType model.currency
            , maybeEncode "regionId" Json.Encode.int model.regionId
            , maybeEncode "pager" encodeFlippingPagerDTO model.pager
            ]
    in
    pairs


encodeSearchShipmentsRequest : SearchShipmentsRequest -> Json.Encode.Value
encodeSearchShipmentsRequest =
    encodeObject << encodeSearchShipmentsRequestPairs


encodeSearchShipmentsRequestWithTag : ( String, String ) -> SearchShipmentsRequest -> Json.Encode.Value
encodeSearchShipmentsRequestWithTag (tagField, tag) model =
    encodeObject (encodeSearchShipmentsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchShipmentsRequestPairs : SearchShipmentsRequest -> List EncodedField
encodeSearchShipmentsRequestPairs model =
    let
        pairs =
            [ encode "dateFrom" Api.Time.encodeDate model.dateFrom
            , encode "dateTo" Api.Time.encodeDate model.dateTo
            , maybeEncodeNullable "statuses" (Json.Encode.list encodeShipmentStatusType) model.statuses
            , maybeEncodeNullable "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            , maybeEncode "cancelledOrders" Json.Encode.bool model.cancelledOrders
            ]
    in
    pairs


encodeSearchShipmentsResponse : SearchShipmentsResponse -> Json.Encode.Value
encodeSearchShipmentsResponse =
    encodeObject << encodeSearchShipmentsResponsePairs


encodeSearchShipmentsResponseWithTag : ( String, String ) -> SearchShipmentsResponse -> Json.Encode.Value
encodeSearchShipmentsResponseWithTag (tagField, tag) model =
    encodeObject (encodeSearchShipmentsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchShipmentsResponsePairs : SearchShipmentsResponse -> List EncodedField
encodeSearchShipmentsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeSearchShipmentsResponseDTO model.result
            ]
    in
    pairs


encodeSearchShipmentsResponseDTO : SearchShipmentsResponseDTO -> Json.Encode.Value
encodeSearchShipmentsResponseDTO =
    encodeObject << encodeSearchShipmentsResponseDTOPairs


encodeSearchShipmentsResponseDTOWithTag : ( String, String ) -> SearchShipmentsResponseDTO -> Json.Encode.Value
encodeSearchShipmentsResponseDTOWithTag (tagField, tag) model =
    encodeObject (encodeSearchShipmentsResponseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSearchShipmentsResponseDTOPairs : SearchShipmentsResponseDTO -> List EncodedField
encodeSearchShipmentsResponseDTOPairs model =
    let
        pairs =
            [ encode "shipments" (Json.Encode.list encodeShipmentInfoDTO) model.shipments
            , maybeEncode "paging" encodeForwardScrollingPagerDTO model.paging
            ]
    in
    pairs


stringFromSellingProgramType : SellingProgramType -> String
stringFromSellingProgramType model =
    case model of
        SellingProgramTypeFBY ->
            "FBY"

        SellingProgramTypeFBS ->
            "FBS"

        SellingProgramTypeDBS ->
            "DBS"

        SellingProgramTypeEXPRESS ->
            "EXPRESS"


encodeSellingProgramType : SellingProgramType -> Json.Encode.Value
encodeSellingProgramType =
    Json.Encode.string << stringFromSellingProgramType


encodeSendMessageToChatRequest : SendMessageToChatRequest -> Json.Encode.Value
encodeSendMessageToChatRequest =
    encodeObject << encodeSendMessageToChatRequestPairs


encodeSendMessageToChatRequestWithTag : ( String, String ) -> SendMessageToChatRequest -> Json.Encode.Value
encodeSendMessageToChatRequestWithTag (tagField, tag) model =
    encodeObject (encodeSendMessageToChatRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSendMessageToChatRequestPairs : SendMessageToChatRequest -> List EncodedField
encodeSendMessageToChatRequestPairs model =
    let
        pairs =
            [ encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeSetFeedParamsRequest : SetFeedParamsRequest -> Json.Encode.Value
encodeSetFeedParamsRequest =
    encodeObject << encodeSetFeedParamsRequestPairs


encodeSetFeedParamsRequestWithTag : ( String, String ) -> SetFeedParamsRequest -> Json.Encode.Value
encodeSetFeedParamsRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetFeedParamsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetFeedParamsRequestPairs : SetFeedParamsRequest -> List EncodedField
encodeSetFeedParamsRequestPairs model =
    let
        pairs =
            [ encode "parameters" (Json.Encode.list encodeFeedParameterDTO) model.parameters
            ]
    in
    pairs


encodeSetOrderBoxLayoutRequest : SetOrderBoxLayoutRequest -> Json.Encode.Value
encodeSetOrderBoxLayoutRequest =
    encodeObject << encodeSetOrderBoxLayoutRequestPairs


encodeSetOrderBoxLayoutRequestWithTag : ( String, String ) -> SetOrderBoxLayoutRequest -> Json.Encode.Value
encodeSetOrderBoxLayoutRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderBoxLayoutRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderBoxLayoutRequestPairs : SetOrderBoxLayoutRequest -> List EncodedField
encodeSetOrderBoxLayoutRequestPairs model =
    let
        pairs =
            [ encode "boxes" (Json.Encode.list encodeOrderBoxLayoutDTO) model.boxes
            , maybeEncode "allowRemove" Json.Encode.bool model.allowRemove
            ]
    in
    pairs


encodeSetOrderBoxLayoutResponse : SetOrderBoxLayoutResponse -> Json.Encode.Value
encodeSetOrderBoxLayoutResponse =
    encodeObject << encodeSetOrderBoxLayoutResponsePairs


encodeSetOrderBoxLayoutResponseWithTag : ( String, String ) -> SetOrderBoxLayoutResponse -> Json.Encode.Value
encodeSetOrderBoxLayoutResponseWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderBoxLayoutResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderBoxLayoutResponsePairs : SetOrderBoxLayoutResponse -> List EncodedField
encodeSetOrderBoxLayoutResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeOrderBoxesLayoutDTO model.result
            ]
    in
    pairs


encodeSetOrderDeliveryDateRequest : SetOrderDeliveryDateRequest -> Json.Encode.Value
encodeSetOrderDeliveryDateRequest =
    encodeObject << encodeSetOrderDeliveryDateRequestPairs


encodeSetOrderDeliveryDateRequestWithTag : ( String, String ) -> SetOrderDeliveryDateRequest -> Json.Encode.Value
encodeSetOrderDeliveryDateRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderDeliveryDateRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderDeliveryDateRequestPairs : SetOrderDeliveryDateRequest -> List EncodedField
encodeSetOrderDeliveryDateRequestPairs model =
    let
        pairs =
            [ encode "dates" encodeOrderDeliveryDateDTO model.dates
            , encode "reason" encodeOrderDeliveryDateReasonType model.reason
            ]
    in
    pairs


encodeSetOrderDeliveryTrackCodeRequest : SetOrderDeliveryTrackCodeRequest -> Json.Encode.Value
encodeSetOrderDeliveryTrackCodeRequest =
    encodeObject << encodeSetOrderDeliveryTrackCodeRequestPairs


encodeSetOrderDeliveryTrackCodeRequestWithTag : ( String, String ) -> SetOrderDeliveryTrackCodeRequest -> Json.Encode.Value
encodeSetOrderDeliveryTrackCodeRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderDeliveryTrackCodeRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderDeliveryTrackCodeRequestPairs : SetOrderDeliveryTrackCodeRequest -> List EncodedField
encodeSetOrderDeliveryTrackCodeRequestPairs model =
    let
        pairs =
            [ encode "trackCode" Json.Encode.string model.trackCode
            , encode "deliveryServiceId" Json.Encode.int model.deliveryServiceId
            ]
    in
    pairs


encodeSetOrderShipmentBoxesRequest : SetOrderShipmentBoxesRequest -> Json.Encode.Value
encodeSetOrderShipmentBoxesRequest =
    encodeObject << encodeSetOrderShipmentBoxesRequestPairs


encodeSetOrderShipmentBoxesRequestWithTag : ( String, String ) -> SetOrderShipmentBoxesRequest -> Json.Encode.Value
encodeSetOrderShipmentBoxesRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderShipmentBoxesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderShipmentBoxesRequestPairs : SetOrderShipmentBoxesRequest -> List EncodedField
encodeSetOrderShipmentBoxesRequestPairs model =
    let
        pairs =
            [ encode "boxes" (Json.Encode.list encodeParcelBoxDTO) model.boxes
            ]
    in
    pairs


encodeSetOrderShipmentBoxesResponse : SetOrderShipmentBoxesResponse -> Json.Encode.Value
encodeSetOrderShipmentBoxesResponse =
    encodeObject << encodeSetOrderShipmentBoxesResponsePairs


encodeSetOrderShipmentBoxesResponseWithTag : ( String, String ) -> SetOrderShipmentBoxesResponse -> Json.Encode.Value
encodeSetOrderShipmentBoxesResponseWithTag (tagField, tag) model =
    encodeObject (encodeSetOrderShipmentBoxesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetOrderShipmentBoxesResponsePairs : SetOrderShipmentBoxesResponse -> List EncodedField
encodeSetOrderShipmentBoxesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeShipmentBoxesDTO model.result
            ]
    in
    pairs


encodeSetReturnDecisionRequest : SetReturnDecisionRequest -> Json.Encode.Value
encodeSetReturnDecisionRequest =
    encodeObject << encodeSetReturnDecisionRequestPairs


encodeSetReturnDecisionRequestWithTag : ( String, String ) -> SetReturnDecisionRequest -> Json.Encode.Value
encodeSetReturnDecisionRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetReturnDecisionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetReturnDecisionRequestPairs : SetReturnDecisionRequest -> List EncodedField
encodeSetReturnDecisionRequestPairs model =
    let
        pairs =
            [ encode "returnItemId" Json.Encode.int model.returnItemId
            , encode "decisionType" encodeReturnRequestDecisionType model.decisionType
            , maybeEncode "comment" Json.Encode.string model.comment
            ]
    in
    pairs


encodeSetShipmentPalletsCountRequest : SetShipmentPalletsCountRequest -> Json.Encode.Value
encodeSetShipmentPalletsCountRequest =
    encodeObject << encodeSetShipmentPalletsCountRequestPairs


encodeSetShipmentPalletsCountRequestWithTag : ( String, String ) -> SetShipmentPalletsCountRequest -> Json.Encode.Value
encodeSetShipmentPalletsCountRequestWithTag (tagField, tag) model =
    encodeObject (encodeSetShipmentPalletsCountRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSetShipmentPalletsCountRequestPairs : SetShipmentPalletsCountRequest -> List EncodedField
encodeSetShipmentPalletsCountRequestPairs model =
    let
        pairs =
            [ encode "placesCount" Json.Encode.int model.placesCount
            ]
    in
    pairs


stringFromShelfsStatisticsAttributionType : ShelfsStatisticsAttributionType -> String
stringFromShelfsStatisticsAttributionType model =
    case model of
        ShelfsStatisticsAttributionTypeCLICKS ->
            "CLICKS"

        ShelfsStatisticsAttributionTypeSHOWS ->
            "SHOWS"


encodeShelfsStatisticsAttributionType : ShelfsStatisticsAttributionType -> Json.Encode.Value
encodeShelfsStatisticsAttributionType =
    Json.Encode.string << stringFromShelfsStatisticsAttributionType


stringFromShipmentActionType : ShipmentActionType -> String
stringFromShipmentActionType model =
    case model of
        ShipmentActionTypeCONFIRM ->
            "CONFIRM"

        ShipmentActionTypeDOWNLOADACT ->
            "DOWNLOAD_ACT"

        ShipmentActionTypeDOWNLOADINBOUNDACT ->
            "DOWNLOAD_INBOUND_ACT"

        ShipmentActionTypeDOWNLOADDISCREPANCYACT ->
            "DOWNLOAD_DISCREPANCY_ACT"

        ShipmentActionTypeCHANGEPALLETSCOUNT ->
            "CHANGE_PALLETS_COUNT"


encodeShipmentActionType : ShipmentActionType -> Json.Encode.Value
encodeShipmentActionType =
    Json.Encode.string << stringFromShipmentActionType


encodeShipmentBoxesDTO : ShipmentBoxesDTO -> Json.Encode.Value
encodeShipmentBoxesDTO =
    encodeObject << encodeShipmentBoxesDTOPairs


encodeShipmentBoxesDTOWithTag : ( String, String ) -> ShipmentBoxesDTO -> Json.Encode.Value
encodeShipmentBoxesDTOWithTag (tagField, tag) model =
    encodeObject (encodeShipmentBoxesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShipmentBoxesDTOPairs : ShipmentBoxesDTO -> List EncodedField
encodeShipmentBoxesDTOPairs model =
    let
        pairs =
            [ encode "boxes" (Json.Encode.list encodeParcelBoxDTO) model.boxes
            ]
    in
    pairs


encodeShipmentDTO : ShipmentDTO -> Json.Encode.Value
encodeShipmentDTO =
    encodeObject << encodeShipmentDTOPairs


encodeShipmentDTOWithTag : ( String, String ) -> ShipmentDTO -> Json.Encode.Value
encodeShipmentDTOWithTag (tagField, tag) model =
    encodeObject (encodeShipmentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShipmentDTOPairs : ShipmentDTO -> List EncodedField
encodeShipmentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "planIntervalFrom" Api.Time.encodeDateTime model.planIntervalFrom
            , maybeEncode "planIntervalTo" Api.Time.encodeDateTime model.planIntervalTo
            , maybeEncode "shipmentType" encodeShipmentType model.shipmentType
            , maybeEncode "warehouse" encodePartnerShipmentWarehouseDTO model.warehouse
            , maybeEncode "warehouseTo" encodePartnerShipmentWarehouseDTO model.warehouseTo
            , maybeEncode "externalId" Json.Encode.string model.externalId
            , maybeEncode "deliveryService" encodeDeliveryServiceDTO model.deliveryService
            , maybeEncode "palletsCount" encodePalletsCountDTO model.palletsCount
            , encode "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            , maybeEncode "draftCount" Json.Encode.int model.draftCount
            , maybeEncode "plannedCount" Json.Encode.int model.plannedCount
            , maybeEncode "factCount" Json.Encode.int model.factCount
            , maybeEncode "currentStatus" encodeShipmentStatusChangeDTO model.currentStatus
            , encode "availableActions" (Json.Encode.list encodeShipmentActionType) model.availableActions
            ]
    in
    pairs


encodeShipmentInfoDTO : ShipmentInfoDTO -> Json.Encode.Value
encodeShipmentInfoDTO =
    encodeObject << encodeShipmentInfoDTOPairs


encodeShipmentInfoDTOWithTag : ( String, String ) -> ShipmentInfoDTO -> Json.Encode.Value
encodeShipmentInfoDTOWithTag (tagField, tag) model =
    encodeObject (encodeShipmentInfoDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShipmentInfoDTOPairs : ShipmentInfoDTO -> List EncodedField
encodeShipmentInfoDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "planIntervalFrom" Api.Time.encodeDateTime model.planIntervalFrom
            , maybeEncode "planIntervalTo" Api.Time.encodeDateTime model.planIntervalTo
            , maybeEncode "shipmentType" encodeShipmentType model.shipmentType
            , maybeEncode "warehouse" encodePartnerShipmentWarehouseDTO model.warehouse
            , maybeEncode "warehouseTo" encodePartnerShipmentWarehouseDTO model.warehouseTo
            , maybeEncode "externalId" Json.Encode.string model.externalId
            , maybeEncode "deliveryService" encodeDeliveryServiceDTO model.deliveryService
            , maybeEncode "palletsCount" encodePalletsCountDTO model.palletsCount
            , encode "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            , maybeEncode "draftCount" Json.Encode.int model.draftCount
            , maybeEncode "plannedCount" Json.Encode.int model.plannedCount
            , maybeEncode "factCount" Json.Encode.int model.factCount
            , maybeEncode "status" encodeShipmentStatusType model.status
            , maybeEncode "statusDescription" Json.Encode.string model.statusDescription
            , maybeEncode "statusUpdateTime" Api.Time.encodeDateTime model.statusUpdateTime
            ]
    in
    pairs


stringFromShipmentPalletLabelPageFormatType : ShipmentPalletLabelPageFormatType -> String
stringFromShipmentPalletLabelPageFormatType model =
    case model of
        ShipmentPalletLabelPageFormatTypeA4 ->
            "A4"

        ShipmentPalletLabelPageFormatTypeA8 ->
            "A8"


encodeShipmentPalletLabelPageFormatType : ShipmentPalletLabelPageFormatType -> Json.Encode.Value
encodeShipmentPalletLabelPageFormatType =
    Json.Encode.string << stringFromShipmentPalletLabelPageFormatType


encodeShipmentStatusChangeDTO : ShipmentStatusChangeDTO -> Json.Encode.Value
encodeShipmentStatusChangeDTO =
    encodeObject << encodeShipmentStatusChangeDTOPairs


encodeShipmentStatusChangeDTOWithTag : ( String, String ) -> ShipmentStatusChangeDTO -> Json.Encode.Value
encodeShipmentStatusChangeDTOWithTag (tagField, tag) model =
    encodeObject (encodeShipmentStatusChangeDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShipmentStatusChangeDTOPairs : ShipmentStatusChangeDTO -> List EncodedField
encodeShipmentStatusChangeDTOPairs model =
    let
        pairs =
            [ maybeEncode "status" encodeShipmentStatusType model.status
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "updateTime" Api.Time.encodeDateTime model.updateTime
            ]
    in
    pairs


stringFromShipmentStatusType : ShipmentStatusType -> String
stringFromShipmentStatusType model =
    case model of
        ShipmentStatusTypeOUTBOUNDCREATED ->
            "OUTBOUND_CREATED"

        ShipmentStatusTypeOUTBOUNDREADYFORCONFIRMATION ->
            "OUTBOUND_READY_FOR_CONFIRMATION"

        ShipmentStatusTypeOUTBOUNDCONFIRMED ->
            "OUTBOUND_CONFIRMED"

        ShipmentStatusTypeOUTBOUNDSIGNED ->
            "OUTBOUND_SIGNED"

        ShipmentStatusTypeFINISHED ->
            "FINISHED"

        ShipmentStatusTypeACCEPTED ->
            "ACCEPTED"

        ShipmentStatusTypeACCEPTEDWITHDISCREPANCIES ->
            "ACCEPTED_WITH_DISCREPANCIES"

        ShipmentStatusTypeERROR ->
            "ERROR"


encodeShipmentStatusType : ShipmentStatusType -> Json.Encode.Value
encodeShipmentStatusType =
    Json.Encode.string << stringFromShipmentStatusType


stringFromShipmentType : ShipmentType -> String
stringFromShipmentType model =
    case model of
        ShipmentTypeIMPORT ->
            "IMPORT"

        ShipmentTypeWITHDRAW ->
            "WITHDRAW"


encodeShipmentType : ShipmentType -> Json.Encode.Value
encodeShipmentType =
    Json.Encode.string << stringFromShipmentType


encodeShopSku : ShopSku -> Json.Encode.Value
encodeShopSku =
    encodeObject << encodeShopSkuPairs


encodeShopSkuWithTag : ( String, String ) -> ShopSku -> Json.Encode.Value
encodeShopSkuWithTag (tagField, tag) model =
    encodeObject (encodeShopSkuPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeShopSkuPairs : ShopSku -> List EncodedField
encodeShopSkuPairs model =
    let
        pairs =
            ]
    in
    pairs


stringFromShowsSalesGroupingType : ShowsSalesGroupingType -> String
stringFromShowsSalesGroupingType model =
    case model of
        ShowsSalesGroupingTypeCATEGORIES ->
            "CATEGORIES"

        ShowsSalesGroupingTypeOFFERS ->
            "OFFERS"


encodeShowsSalesGroupingType : ShowsSalesGroupingType -> Json.Encode.Value
encodeShowsSalesGroupingType =
    Json.Encode.string << stringFromShowsSalesGroupingType


encodeSkipGoodsFeedbackReactionRequest : SkipGoodsFeedbackReactionRequest -> Json.Encode.Value
encodeSkipGoodsFeedbackReactionRequest =
    encodeObject << encodeSkipGoodsFeedbackReactionRequestPairs


encodeSkipGoodsFeedbackReactionRequestWithTag : ( String, String ) -> SkipGoodsFeedbackReactionRequest -> Json.Encode.Value
encodeSkipGoodsFeedbackReactionRequestWithTag (tagField, tag) model =
    encodeObject (encodeSkipGoodsFeedbackReactionRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSkipGoodsFeedbackReactionRequestPairs : SkipGoodsFeedbackReactionRequest -> List EncodedField
encodeSkipGoodsFeedbackReactionRequestPairs model =
    let
        pairs =
            [ encode "feedbackIds" (Json.Encode.list Json.Encode.int) model.feedbackIds
            ]
    in
    pairs


encodeSkuBidItemDTO : SkuBidItemDTO -> Json.Encode.Value
encodeSkuBidItemDTO =
    encodeObject << encodeSkuBidItemDTOPairs


encodeSkuBidItemDTOWithTag : ( String, String ) -> SkuBidItemDTO -> Json.Encode.Value
encodeSkuBidItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeSkuBidItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSkuBidItemDTOPairs : SkuBidItemDTO -> List EncodedField
encodeSkuBidItemDTOPairs model =
    let
        pairs =
            [ encode "sku" Json.Encode.string model.sku
            , encode "bid" Json.Encode.int model.bid
            ]
    in
    pairs


encodeSkuBidRecommendationItemDTO : SkuBidRecommendationItemDTO -> Json.Encode.Value
encodeSkuBidRecommendationItemDTO =
    encodeObject << encodeSkuBidRecommendationItemDTOPairs


encodeSkuBidRecommendationItemDTOWithTag : ( String, String ) -> SkuBidRecommendationItemDTO -> Json.Encode.Value
encodeSkuBidRecommendationItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeSkuBidRecommendationItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSkuBidRecommendationItemDTOPairs : SkuBidRecommendationItemDTO -> List EncodedField
encodeSkuBidRecommendationItemDTOPairs model =
    let
        pairs =
            [ encode "sku" Json.Encode.string model.sku
            , encode "bid" Json.Encode.int model.bid
            , maybeEncodeNullable "bidRecommendations" (Json.Encode.list encodeBidRecommendationItemDTO) model.bidRecommendations
            , maybeEncodeNullable "priceRecommendations" (Json.Encode.list encodePriceRecommendationItemDTO) model.priceRecommendations
            ]
    in
    pairs


stringFromSortOrderType : SortOrderType -> String
stringFromSortOrderType model =
    case model of
        SortOrderTypeASC ->
            "ASC"

        SortOrderTypeDESC ->
            "DESC"


encodeSortOrderType : SortOrderType -> Json.Encode.Value
encodeSortOrderType =
    Json.Encode.string << stringFromSortOrderType


encodeSuggestOfferPriceDTO : SuggestOfferPriceDTO -> Json.Encode.Value
encodeSuggestOfferPriceDTO =
    encodeObject << encodeSuggestOfferPriceDTOPairs


encodeSuggestOfferPriceDTOWithTag : ( String, String ) -> SuggestOfferPriceDTO -> Json.Encode.Value
encodeSuggestOfferPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeSuggestOfferPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestOfferPriceDTOPairs : SuggestOfferPriceDTO -> List EncodedField
encodeSuggestOfferPriceDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "marketSku" Json.Encode.int model.marketSku
            ]
    in
    pairs


encodeSuggestPricesRequest : SuggestPricesRequest -> Json.Encode.Value
encodeSuggestPricesRequest =
    encodeObject << encodeSuggestPricesRequestPairs


encodeSuggestPricesRequestWithTag : ( String, String ) -> SuggestPricesRequest -> Json.Encode.Value
encodeSuggestPricesRequestWithTag (tagField, tag) model =
    encodeObject (encodeSuggestPricesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestPricesRequestPairs : SuggestPricesRequest -> List EncodedField
encodeSuggestPricesRequestPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeSuggestOfferPriceDTO) model.offers
            ]
    in
    pairs


encodeSuggestPricesResponse : SuggestPricesResponse -> Json.Encode.Value
encodeSuggestPricesResponse =
    encodeObject << encodeSuggestPricesResponsePairs


encodeSuggestPricesResponseWithTag : ( String, String ) -> SuggestPricesResponse -> Json.Encode.Value
encodeSuggestPricesResponseWithTag (tagField, tag) model =
    encodeObject (encodeSuggestPricesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestPricesResponsePairs : SuggestPricesResponse -> List EncodedField
encodeSuggestPricesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeSuggestPricesResultDTO model.result
            ]
    in
    pairs


encodeSuggestPricesResultDTO : SuggestPricesResultDTO -> Json.Encode.Value
encodeSuggestPricesResultDTO =
    encodeObject << encodeSuggestPricesResultDTOPairs


encodeSuggestPricesResultDTOWithTag : ( String, String ) -> SuggestPricesResultDTO -> Json.Encode.Value
encodeSuggestPricesResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeSuggestPricesResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestPricesResultDTOPairs : SuggestPricesResultDTO -> List EncodedField
encodeSuggestPricesResultDTOPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodePriceSuggestOfferDTO) model.offers
            ]
    in
    pairs


encodeSuggestedOfferDTO : SuggestedOfferDTO -> Json.Encode.Value
encodeSuggestedOfferDTO =
    encodeObject << encodeSuggestedOfferDTOPairs


encodeSuggestedOfferDTOWithTag : ( String, String ) -> SuggestedOfferDTO -> Json.Encode.Value
encodeSuggestedOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeSuggestedOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestedOfferDTOPairs : SuggestedOfferDTO -> List EncodedField
encodeSuggestedOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "offerId" Json.Encode.string model.offerId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncode "basicPrice" encodeBasePriceDTO model.basicPrice
            ]
    in
    pairs


encodeSuggestedOfferMappingDTO : SuggestedOfferMappingDTO -> Json.Encode.Value
encodeSuggestedOfferMappingDTO =
    encodeObject << encodeSuggestedOfferMappingDTOPairs


encodeSuggestedOfferMappingDTOWithTag : ( String, String ) -> SuggestedOfferMappingDTO -> Json.Encode.Value
encodeSuggestedOfferMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeSuggestedOfferMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuggestedOfferMappingDTOPairs : SuggestedOfferMappingDTO -> List EncodedField
encodeSuggestedOfferMappingDTOPairs model =
    let
        pairs =
            [ maybeEncode "offer" encodeSuggestedOfferDTO model.offer
            , maybeEncode "mapping" encodeGetMappingDTO model.mapping
            ]
    in
    pairs


encodeTariffDTO : TariffDTO -> Json.Encode.Value
encodeTariffDTO =
    encodeObject << encodeTariffDTOPairs


encodeTariffDTOWithTag : ( String, String ) -> TariffDTO -> Json.Encode.Value
encodeTariffDTOWithTag (tagField, tag) model =
    encodeObject (encodeTariffDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTariffDTOPairs : TariffDTO -> List EncodedField
encodeTariffDTOPairs model =
    let
        pairs =
            [ encode "type" encodeTariffType model.type_
            , maybeEncode "percent" Json.Encode.float model.percent
            , encode "amount" Json.Encode.float model.amount
            , encode "parameters" (Json.Encode.list encodeTariffParameterDTO) model.parameters
            ]
    in
    pairs


encodeTariffParameterDTO : TariffParameterDTO -> Json.Encode.Value
encodeTariffParameterDTO =
    encodeObject << encodeTariffParameterDTOPairs


encodeTariffParameterDTOWithTag : ( String, String ) -> TariffParameterDTO -> Json.Encode.Value
encodeTariffParameterDTOWithTag (tagField, tag) model =
    encodeObject (encodeTariffParameterDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTariffParameterDTOPairs : TariffParameterDTO -> List EncodedField
encodeTariffParameterDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs


stringFromTariffType : TariffType -> String
stringFromTariffType model =
    case model of
        TariffTypeAGENCYCOMMISSION ->
            "AGENCY_COMMISSION"

        TariffTypePAYMENTTRANSFER ->
            "PAYMENT_TRANSFER"

        TariffTypeSTORAGE ->
            "STORAGE"

        TariffTypeWITHDRAW ->
            "WITHDRAW"

        TariffTypeSURPLUS ->
            "SURPLUS"

        TariffTypeFEE ->
            "FEE"

        TariffTypeDELIVERYTOCUSTOMER ->
            "DELIVERY_TO_CUSTOMER"

        TariffTypeCROSSREGIONALDELIVERY ->
            "CROSSREGIONAL_DELIVERY"

        TariffTypeCROSSREGIONALDELIVERYRETURN ->
            "CROSSREGIONAL_DELIVERY_RETURN"

        TariffTypeDISPOSAL ->
            "DISPOSAL"

        TariffTypeSORTINGCENTERSTORAGE ->
            "SORTING_CENTER_STORAGE"

        TariffTypeEXPRESSDELIVERY ->
            "EXPRESS_DELIVERY"

        TariffTypeFFXDOCSUPPLYBOX ->
            "FF_XDOC_SUPPLY_BOX"

        TariffTypeFFXDOCSUPPLYPALLET ->
            "FF_XDOC_SUPPLY_PALLET"

        TariffTypeSORTING ->
            "SORTING"

        TariffTypeMIDDLEMILE ->
            "MIDDLE_MILE"

        TariffTypeRETURNPROCESSING ->
            "RETURN_PROCESSING"

        TariffTypeEXPRESSCANCELLEDBYPARTNER ->
            "EXPRESS_CANCELLED_BY_PARTNER"

        TariffTypeDELIVERYTOCUSTOMERRETURN ->
            "DELIVERY_TO_CUSTOMER_RETURN"

        TariffTypeCROSSBORDERDELIVERY ->
            "CROSSBORDER_DELIVERY"

        TariffTypeINTAKESORTINGBULKYCARGO ->
            "INTAKE_SORTING_BULKY_CARGO"

        TariffTypeINTAKESORTINGSMALLGOODS ->
            "INTAKE_SORTING_SMALL_GOODS"

        TariffTypeINTAKESORTINGDAILY ->
            "INTAKE_SORTING_DAILY"

        TariffTypeFFSTORAGEBILLING ->
            "FF_STORAGE_BILLING"

        TariffTypeCANCELLEDORDERFEEQI ->
            "CANCELLED_ORDER_FEE_QI"

        TariffTypeLATEORDEREXECUTIONFEEQI ->
            "LATE_ORDER_EXECUTION_FEE_QI"


encodeTariffType : TariffType -> Json.Encode.Value
encodeTariffType =
    Json.Encode.string << stringFromTariffType


encodeTimePeriodDTO : TimePeriodDTO -> Json.Encode.Value
encodeTimePeriodDTO =
    encodeObject << encodeTimePeriodDTOPairs


encodeTimePeriodDTOWithTag : ( String, String ) -> TimePeriodDTO -> Json.Encode.Value
encodeTimePeriodDTOWithTag (tagField, tag) model =
    encodeObject (encodeTimePeriodDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTimePeriodDTOPairs : TimePeriodDTO -> List EncodedField
encodeTimePeriodDTOPairs model =
    let
        pairs =
            [ encode "timePeriod" Json.Encode.int model.timePeriod
            , encode "timeUnit" encodeTimeUnitType model.timeUnit
            , maybeEncode "comment" Json.Encode.string model.comment
            ]
    in
    pairs


stringFromTimeUnitType : TimeUnitType -> String
stringFromTimeUnitType model =
    case model of
        TimeUnitTypeHOUR ->
            "HOUR"

        TimeUnitTypeDAY ->
            "DAY"

        TimeUnitTypeWEEK ->
            "WEEK"

        TimeUnitTypeMONTH ->
            "MONTH"

        TimeUnitTypeYEAR ->
            "YEAR"


encodeTimeUnitType : TimeUnitType -> Json.Encode.Value
encodeTimeUnitType =
    Json.Encode.string << stringFromTimeUnitType


encodeTrackDTO : TrackDTO -> Json.Encode.Value
encodeTrackDTO =
    encodeObject << encodeTrackDTOPairs


encodeTrackDTOWithTag : ( String, String ) -> TrackDTO -> Json.Encode.Value
encodeTrackDTOWithTag (tagField, tag) model =
    encodeObject (encodeTrackDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTrackDTOPairs : TrackDTO -> List EncodedField
encodeTrackDTOPairs model =
    let
        pairs =
            [ maybeEncode "trackCode" Json.Encode.string model.trackCode
            ]
    in
    pairs


encodeTransferOrdersFromShipmentRequest : TransferOrdersFromShipmentRequest -> Json.Encode.Value
encodeTransferOrdersFromShipmentRequest =
    encodeObject << encodeTransferOrdersFromShipmentRequestPairs


encodeTransferOrdersFromShipmentRequestWithTag : ( String, String ) -> TransferOrdersFromShipmentRequest -> Json.Encode.Value
encodeTransferOrdersFromShipmentRequestWithTag (tagField, tag) model =
    encodeObject (encodeTransferOrdersFromShipmentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTransferOrdersFromShipmentRequestPairs : TransferOrdersFromShipmentRequest -> List EncodedField
encodeTransferOrdersFromShipmentRequestPairs model =
    let
        pairs =
            [ encode "orderIds" (Json.Encode.list Json.Encode.int) model.orderIds
            ]
    in
    pairs


encodeTurnoverDTO : TurnoverDTO -> Json.Encode.Value
encodeTurnoverDTO =
    encodeObject << encodeTurnoverDTOPairs


encodeTurnoverDTOWithTag : ( String, String ) -> TurnoverDTO -> Json.Encode.Value
encodeTurnoverDTOWithTag (tagField, tag) model =
    encodeObject (encodeTurnoverDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeTurnoverDTOPairs : TurnoverDTO -> List EncodedField
encodeTurnoverDTOPairs model =
    let
        pairs =
            [ encode "turnover" encodeTurnoverType model.turnover
            , maybeEncode "turnoverDays" Json.Encode.float model.turnoverDays
            ]
    in
    pairs


stringFromTurnoverType : TurnoverType -> String
stringFromTurnoverType model =
    case model of
        TurnoverTypeLOW ->
            "LOW"

        TurnoverTypeALMOSTLOW ->
            "ALMOST_LOW"

        TurnoverTypeHIGH ->
            "HIGH"

        TurnoverTypeVERYHIGH ->
            "VERY_HIGH"

        TurnoverTypeNOSALES ->
            "NO_SALES"

        TurnoverTypeFREESTORE ->
            "FREE_STORE"


encodeTurnoverType : TurnoverType -> Json.Encode.Value
encodeTurnoverType =
    Json.Encode.string << stringFromTurnoverType


encodeUnitDTO : UnitDTO -> Json.Encode.Value
encodeUnitDTO =
    encodeObject << encodeUnitDTOPairs


encodeUnitDTOWithTag : ( String, String ) -> UnitDTO -> Json.Encode.Value
encodeUnitDTOWithTag (tagField, tag) model =
    encodeObject (encodeUnitDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUnitDTOPairs : UnitDTO -> List EncodedField
encodeUnitDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "fullName" Json.Encode.string model.fullName
            ]
    in
    pairs


encodeUpdateBusinessOfferPriceDTO : UpdateBusinessOfferPriceDTO -> Json.Encode.Value
encodeUpdateBusinessOfferPriceDTO =
    encodeObject << encodeUpdateBusinessOfferPriceDTOPairs


encodeUpdateBusinessOfferPriceDTOWithTag : ( String, String ) -> UpdateBusinessOfferPriceDTO -> Json.Encode.Value
encodeUpdateBusinessOfferPriceDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateBusinessOfferPriceDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateBusinessOfferPriceDTOPairs : UpdateBusinessOfferPriceDTO -> List EncodedField
encodeUpdateBusinessOfferPriceDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "price" encodeUpdatePriceWithDiscountDTO model.price
            ]
    in
    pairs


encodeUpdateBusinessPricesRequest : UpdateBusinessPricesRequest -> Json.Encode.Value
encodeUpdateBusinessPricesRequest =
    encodeObject << encodeUpdateBusinessPricesRequestPairs


encodeUpdateBusinessPricesRequestWithTag : ( String, String ) -> UpdateBusinessPricesRequest -> Json.Encode.Value
encodeUpdateBusinessPricesRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateBusinessPricesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateBusinessPricesRequestPairs : UpdateBusinessPricesRequest -> List EncodedField
encodeUpdateBusinessPricesRequestPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeUpdateBusinessOfferPriceDTO) model.offers
            ]
    in
    pairs


encodeUpdateCampaignOfferDTO : UpdateCampaignOfferDTO -> Json.Encode.Value
encodeUpdateCampaignOfferDTO =
    encodeObject << encodeUpdateCampaignOfferDTOPairs


encodeUpdateCampaignOfferDTOWithTag : ( String, String ) -> UpdateCampaignOfferDTO -> Json.Encode.Value
encodeUpdateCampaignOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateCampaignOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateCampaignOfferDTOPairs : UpdateCampaignOfferDTO -> List EncodedField
encodeUpdateCampaignOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "quantum" encodeQuantumDTO model.quantum
            , maybeEncode "available" Json.Encode.bool model.available
            , maybeEncode "vat" Json.Encode.int model.vat
            ]
    in
    pairs


encodeUpdateCampaignOffersRequest : UpdateCampaignOffersRequest -> Json.Encode.Value
encodeUpdateCampaignOffersRequest =
    encodeObject << encodeUpdateCampaignOffersRequestPairs


encodeUpdateCampaignOffersRequestWithTag : ( String, String ) -> UpdateCampaignOffersRequest -> Json.Encode.Value
encodeUpdateCampaignOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateCampaignOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateCampaignOffersRequestPairs : UpdateCampaignOffersRequest -> List EncodedField
encodeUpdateCampaignOffersRequestPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeUpdateCampaignOfferDTO) model.offers
            ]
    in
    pairs


encodeUpdateGoodsFeedbackCommentDTO : UpdateGoodsFeedbackCommentDTO -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentDTO =
    encodeObject << encodeUpdateGoodsFeedbackCommentDTOPairs


encodeUpdateGoodsFeedbackCommentDTOWithTag : ( String, String ) -> UpdateGoodsFeedbackCommentDTO -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateGoodsFeedbackCommentDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateGoodsFeedbackCommentDTOPairs : UpdateGoodsFeedbackCommentDTO -> List EncodedField
encodeUpdateGoodsFeedbackCommentDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "parentId" Json.Encode.int model.parentId
            , encode "text" Json.Encode.string model.text
            ]
    in
    pairs


encodeUpdateGoodsFeedbackCommentRequest : UpdateGoodsFeedbackCommentRequest -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentRequest =
    encodeObject << encodeUpdateGoodsFeedbackCommentRequestPairs


encodeUpdateGoodsFeedbackCommentRequestWithTag : ( String, String ) -> UpdateGoodsFeedbackCommentRequest -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateGoodsFeedbackCommentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateGoodsFeedbackCommentRequestPairs : UpdateGoodsFeedbackCommentRequest -> List EncodedField
encodeUpdateGoodsFeedbackCommentRequestPairs model =
    let
        pairs =
            [ encode "feedbackId" Json.Encode.int model.feedbackId
            , encode "comment" encodeUpdateGoodsFeedbackCommentDTO model.comment
            ]
    in
    pairs


encodeUpdateGoodsFeedbackCommentResponse : UpdateGoodsFeedbackCommentResponse -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentResponse =
    encodeObject << encodeUpdateGoodsFeedbackCommentResponsePairs


encodeUpdateGoodsFeedbackCommentResponseWithTag : ( String, String ) -> UpdateGoodsFeedbackCommentResponse -> Json.Encode.Value
encodeUpdateGoodsFeedbackCommentResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdateGoodsFeedbackCommentResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateGoodsFeedbackCommentResponsePairs : UpdateGoodsFeedbackCommentResponse -> List EncodedField
encodeUpdateGoodsFeedbackCommentResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeGoodsFeedbackCommentDTO model.result
            ]
    in
    pairs


encodeUpdateMappingDTO : UpdateMappingDTO -> Json.Encode.Value
encodeUpdateMappingDTO =
    encodeObject << encodeUpdateMappingDTOPairs


encodeUpdateMappingDTOWithTag : ( String, String ) -> UpdateMappingDTO -> Json.Encode.Value
encodeUpdateMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateMappingDTOPairs : UpdateMappingDTO -> List EncodedField
encodeUpdateMappingDTOPairs model =
    let
        pairs =
            [ maybeEncode "marketSku" Json.Encode.int model.marketSku
            ]
    in
    pairs


encodeUpdateMappingsOfferDTO : UpdateMappingsOfferDTO -> Json.Encode.Value
encodeUpdateMappingsOfferDTO =
    encodeObject << encodeUpdateMappingsOfferDTOPairs


encodeUpdateMappingsOfferDTOWithTag : ( String, String ) -> UpdateMappingsOfferDTO -> Json.Encode.Value
encodeUpdateMappingsOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateMappingsOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateMappingsOfferDTOPairs : UpdateMappingsOfferDTO -> List EncodedField
encodeUpdateMappingsOfferDTOPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "shopSku" Json.Encode.string model.shopSku
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "feedId" Json.Encode.int model.feedId
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncodeNullable "urls" (Json.Encode.list Json.Encode.string) model.urls
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncode "manufacturer" Json.Encode.string model.manufacturer
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "minShipment" Json.Encode.int model.minShipment
            , maybeEncode "transportUnitSize" Json.Encode.int model.transportUnitSize
            , maybeEncode "quantumOfSupply" Json.Encode.int model.quantumOfSupply
            , maybeEncode "deliveryDurationDays" Json.Encode.int model.deliveryDurationDays
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncodeNullable "customsCommodityCodes" (Json.Encode.list Json.Encode.string) model.customsCommodityCodes
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncodeNullable "supplyScheduleDays" (Json.Encode.list encodeDayOfWeekType) model.supplyScheduleDays
            , maybeEncode "shelfLifeDays" Json.Encode.int model.shelfLifeDays
            , maybeEncode "lifeTimeDays" Json.Encode.int model.lifeTimeDays
            , maybeEncode "guaranteePeriodDays" Json.Encode.int model.guaranteePeriodDays
            , maybeEncode "processingState" encodeOfferProcessingStateDTO model.processingState
            , maybeEncode "availability" encodeOfferAvailabilityStatusType model.availability
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "certificate" Json.Encode.string model.certificate
            ]
    in
    pairs


encodeUpdateOfferContentRequest : UpdateOfferContentRequest -> Json.Encode.Value
encodeUpdateOfferContentRequest =
    encodeObject << encodeUpdateOfferContentRequestPairs


encodeUpdateOfferContentRequestWithTag : ( String, String ) -> UpdateOfferContentRequest -> Json.Encode.Value
encodeUpdateOfferContentRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferContentRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferContentRequestPairs : UpdateOfferContentRequest -> List EncodedField
encodeUpdateOfferContentRequestPairs model =
    let
        pairs =
            [ encode "offersContent" (Json.Encode.list encodeOfferContentDTO) model.offersContent
            ]
    in
    pairs


encodeUpdateOfferContentResponse : UpdateOfferContentResponse -> Json.Encode.Value
encodeUpdateOfferContentResponse =
    encodeObject << encodeUpdateOfferContentResponsePairs


encodeUpdateOfferContentResponseWithTag : ( String, String ) -> UpdateOfferContentResponse -> Json.Encode.Value
encodeUpdateOfferContentResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferContentResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferContentResponsePairs : UpdateOfferContentResponse -> List EncodedField
encodeUpdateOfferContentResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "results" (Json.Encode.list encodeUpdateOfferContentResultDTO) model.results
            ]
    in
    pairs


encodeUpdateOfferContentResultDTO : UpdateOfferContentResultDTO -> Json.Encode.Value
encodeUpdateOfferContentResultDTO =
    encodeObject << encodeUpdateOfferContentResultDTOPairs


encodeUpdateOfferContentResultDTOWithTag : ( String, String ) -> UpdateOfferContentResultDTO -> Json.Encode.Value
encodeUpdateOfferContentResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferContentResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferContentResultDTOPairs : UpdateOfferContentResultDTO -> List EncodedField
encodeUpdateOfferContentResultDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncodeNullable "errors" (Json.Encode.list encodeOfferContentErrorDTO) model.errors
            , maybeEncodeNullable "warnings" (Json.Encode.list encodeOfferContentErrorDTO) model.warnings
            ]
    in
    pairs


encodeUpdateOfferDTO : UpdateOfferDTO -> Json.Encode.Value
encodeUpdateOfferDTO =
    encodeObject << encodeUpdateOfferDTOPairs


encodeUpdateOfferDTOWithTag : ( String, String ) -> UpdateOfferDTO -> Json.Encode.Value
encodeUpdateOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferDTOPairs : UpdateOfferDTO -> List EncodedField
encodeUpdateOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "marketCategoryId" Json.Encode.int model.marketCategoryId
            , maybeEncode "category" Json.Encode.string model.category
            , maybeEncodeNullable "pictures" (Json.Encode.list Json.Encode.string) model.pictures
            , maybeEncodeNullable "videos" (Json.Encode.list Json.Encode.string) model.videos
            , maybeEncodeNullable "manuals" (Json.Encode.list encodeOfferManualDTO) model.manuals
            , maybeEncode "vendor" Json.Encode.string model.vendor
            , maybeEncodeNullable "barcodes" (Json.Encode.list Json.Encode.string) model.barcodes
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncodeNullable "manufacturerCountries" (Json.Encode.list Json.Encode.string) model.manufacturerCountries
            , maybeEncode "weightDimensions" encodeOfferWeightDimensionsDTO model.weightDimensions
            , maybeEncode "vendorCode" Json.Encode.string model.vendorCode
            , maybeEncodeNullable "tags" (Json.Encode.list Json.Encode.string) model.tags
            , maybeEncode "shelfLife" encodeTimePeriodDTO model.shelfLife
            , maybeEncode "lifeTime" encodeTimePeriodDTO model.lifeTime
            , maybeEncode "guaranteePeriod" encodeTimePeriodDTO model.guaranteePeriod
            , maybeEncode "customsCommodityCode" Json.Encode.string model.customsCommodityCode
            , maybeEncodeNullable "certificates" (Json.Encode.list Json.Encode.string) model.certificates
            , maybeEncode "boxCount" Json.Encode.int model.boxCount
            , maybeEncode "condition" encodeOfferConditionDTO model.condition
            , maybeEncode "type" encodeOfferType model.type_
            , maybeEncode "downloadable" Json.Encode.bool model.downloadable
            , maybeEncode "adult" Json.Encode.bool model.adult
            , maybeEncode "age" encodeAgeDTO model.age
            , maybeEncodeNullable "params" (Json.Encode.list encodeOfferParamDTO) model.params
            , maybeEncodeNullable "parameterValues" (Json.Encode.list encodeParameterValueDTO) model.parameterValues
            , maybeEncode "basicPrice" encodeUpdatePriceWithDiscountDTO model.basicPrice
            , maybeEncode "purchasePrice" encodeBasePriceDTO model.purchasePrice
            , maybeEncode "additionalExpenses" encodeBasePriceDTO model.additionalExpenses
            , maybeEncode "cofinancePrice" encodeBasePriceDTO model.cofinancePrice
            ]
    in
    pairs


encodeUpdateOfferMappingDTO : UpdateOfferMappingDTO -> Json.Encode.Value
encodeUpdateOfferMappingDTO =
    encodeObject << encodeUpdateOfferMappingDTOPairs


encodeUpdateOfferMappingDTOWithTag : ( String, String ) -> UpdateOfferMappingDTO -> Json.Encode.Value
encodeUpdateOfferMappingDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingDTOPairs : UpdateOfferMappingDTO -> List EncodedField
encodeUpdateOfferMappingDTOPairs model =
    let
        pairs =
            [ encode "offer" encodeUpdateOfferDTO model.offer
            , maybeEncode "mapping" encodeUpdateMappingDTO model.mapping
            ]
    in
    pairs


encodeUpdateOfferMappingEntryDTO : UpdateOfferMappingEntryDTO -> Json.Encode.Value
encodeUpdateOfferMappingEntryDTO =
    encodeObject << encodeUpdateOfferMappingEntryDTOPairs


encodeUpdateOfferMappingEntryDTOWithTag : ( String, String ) -> UpdateOfferMappingEntryDTO -> Json.Encode.Value
encodeUpdateOfferMappingEntryDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingEntryDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingEntryDTOPairs : UpdateOfferMappingEntryDTO -> List EncodedField
encodeUpdateOfferMappingEntryDTOPairs model =
    let
        pairs =
            [ maybeEncode "mapping" encodeOfferMappingDTO model.mapping
            , maybeEncode "awaitingModerationMapping" encodeOfferMappingDTO model.awaitingModerationMapping
            , maybeEncode "rejectedMapping" encodeOfferMappingDTO model.rejectedMapping
            , maybeEncode "offer" encodeUpdateMappingsOfferDTO model.offer
            ]
    in
    pairs


encodeUpdateOfferMappingEntryRequest : UpdateOfferMappingEntryRequest -> Json.Encode.Value
encodeUpdateOfferMappingEntryRequest =
    encodeObject << encodeUpdateOfferMappingEntryRequestPairs


encodeUpdateOfferMappingEntryRequestWithTag : ( String, String ) -> UpdateOfferMappingEntryRequest -> Json.Encode.Value
encodeUpdateOfferMappingEntryRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingEntryRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingEntryRequestPairs : UpdateOfferMappingEntryRequest -> List EncodedField
encodeUpdateOfferMappingEntryRequestPairs model =
    let
        pairs =
            [ encode "offerMappingEntries" (Json.Encode.list encodeUpdateOfferMappingEntryDTO) model.offerMappingEntries
            ]
    in
    pairs


encodeUpdateOfferMappingResultDTO : UpdateOfferMappingResultDTO -> Json.Encode.Value
encodeUpdateOfferMappingResultDTO =
    encodeObject << encodeUpdateOfferMappingResultDTOPairs


encodeUpdateOfferMappingResultDTOWithTag : ( String, String ) -> UpdateOfferMappingResultDTO -> Json.Encode.Value
encodeUpdateOfferMappingResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingResultDTOPairs : UpdateOfferMappingResultDTO -> List EncodedField
encodeUpdateOfferMappingResultDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncodeNullable "errors" (Json.Encode.list encodeOfferMappingErrorDTO) model.errors
            , maybeEncodeNullable "warnings" (Json.Encode.list encodeOfferMappingErrorDTO) model.warnings
            ]
    in
    pairs


encodeUpdateOfferMappingsRequest : UpdateOfferMappingsRequest -> Json.Encode.Value
encodeUpdateOfferMappingsRequest =
    encodeObject << encodeUpdateOfferMappingsRequestPairs


encodeUpdateOfferMappingsRequestWithTag : ( String, String ) -> UpdateOfferMappingsRequest -> Json.Encode.Value
encodeUpdateOfferMappingsRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingsRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingsRequestPairs : UpdateOfferMappingsRequest -> List EncodedField
encodeUpdateOfferMappingsRequestPairs model =
    let
        pairs =
            [ encode "offerMappings" (Json.Encode.list encodeUpdateOfferMappingDTO) model.offerMappings
            , maybeEncode "onlyPartnerMediaContent" Json.Encode.bool model.onlyPartnerMediaContent
            ]
    in
    pairs


encodeUpdateOfferMappingsResponse : UpdateOfferMappingsResponse -> Json.Encode.Value
encodeUpdateOfferMappingsResponse =
    encodeObject << encodeUpdateOfferMappingsResponsePairs


encodeUpdateOfferMappingsResponseWithTag : ( String, String ) -> UpdateOfferMappingsResponse -> Json.Encode.Value
encodeUpdateOfferMappingsResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOfferMappingsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOfferMappingsResponsePairs : UpdateOfferMappingsResponse -> List EncodedField
encodeUpdateOfferMappingsResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncodeNullable "results" (Json.Encode.list encodeUpdateOfferMappingResultDTO) model.results
            ]
    in
    pairs


encodeUpdateOrderItemRequest : UpdateOrderItemRequest -> Json.Encode.Value
encodeUpdateOrderItemRequest =
    encodeObject << encodeUpdateOrderItemRequestPairs


encodeUpdateOrderItemRequestWithTag : ( String, String ) -> UpdateOrderItemRequest -> Json.Encode.Value
encodeUpdateOrderItemRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderItemRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderItemRequestPairs : UpdateOrderItemRequest -> List EncodedField
encodeUpdateOrderItemRequestPairs model =
    let
        pairs =
            [ encode "items" (Json.Encode.list encodeOrderItemModificationDTO) model.items
            , maybeEncode "reason" encodeOrderItemsModificationRequestReasonType model.reason
            ]
    in
    pairs


encodeUpdateOrderStatusDTO : UpdateOrderStatusDTO -> Json.Encode.Value
encodeUpdateOrderStatusDTO =
    encodeObject << encodeUpdateOrderStatusDTOPairs


encodeUpdateOrderStatusDTOWithTag : ( String, String ) -> UpdateOrderStatusDTO -> Json.Encode.Value
encodeUpdateOrderStatusDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusDTOPairs : UpdateOrderStatusDTO -> List EncodedField
encodeUpdateOrderStatusDTOPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "status" encodeOrderStatusType model.status
            , maybeEncode "substatus" encodeOrderSubstatusType model.substatus
            , maybeEncode "updateStatus" encodeOrderUpdateStatusType model.updateStatus
            , maybeEncode "errorDetails" Json.Encode.string model.errorDetails
            ]
    in
    pairs


encodeUpdateOrderStatusRequest : UpdateOrderStatusRequest -> Json.Encode.Value
encodeUpdateOrderStatusRequest =
    encodeObject << encodeUpdateOrderStatusRequestPairs


encodeUpdateOrderStatusRequestWithTag : ( String, String ) -> UpdateOrderStatusRequest -> Json.Encode.Value
encodeUpdateOrderStatusRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusRequestPairs : UpdateOrderStatusRequest -> List EncodedField
encodeUpdateOrderStatusRequestPairs model =
    let
        pairs =
            [ encode "order" encodeOrderStatusChangeDTO model.order
            ]
    in
    pairs


encodeUpdateOrderStatusResponse : UpdateOrderStatusResponse -> Json.Encode.Value
encodeUpdateOrderStatusResponse =
    encodeObject << encodeUpdateOrderStatusResponsePairs


encodeUpdateOrderStatusResponseWithTag : ( String, String ) -> UpdateOrderStatusResponse -> Json.Encode.Value
encodeUpdateOrderStatusResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusResponsePairs : UpdateOrderStatusResponse -> List EncodedField
encodeUpdateOrderStatusResponsePairs model =
    let
        pairs =
            [ maybeEncode "order" encodeOrderDTO model.order
            ]
    in
    pairs


encodeUpdateOrderStatusesDTO : UpdateOrderStatusesDTO -> Json.Encode.Value
encodeUpdateOrderStatusesDTO =
    encodeObject << encodeUpdateOrderStatusesDTOPairs


encodeUpdateOrderStatusesDTOWithTag : ( String, String ) -> UpdateOrderStatusesDTO -> Json.Encode.Value
encodeUpdateOrderStatusesDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusesDTOPairs : UpdateOrderStatusesDTO -> List EncodedField
encodeUpdateOrderStatusesDTOPairs model =
    let
        pairs =
            [ encode "orders" (Json.Encode.list encodeUpdateOrderStatusDTO) model.orders
            ]
    in
    pairs


encodeUpdateOrderStatusesRequest : UpdateOrderStatusesRequest -> Json.Encode.Value
encodeUpdateOrderStatusesRequest =
    encodeObject << encodeUpdateOrderStatusesRequestPairs


encodeUpdateOrderStatusesRequestWithTag : ( String, String ) -> UpdateOrderStatusesRequest -> Json.Encode.Value
encodeUpdateOrderStatusesRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusesRequestPairs : UpdateOrderStatusesRequest -> List EncodedField
encodeUpdateOrderStatusesRequestPairs model =
    let
        pairs =
            [ encode "orders" (Json.Encode.list encodeOrderStateDTO) model.orders
            ]
    in
    pairs


encodeUpdateOrderStatusesResponse : UpdateOrderStatusesResponse -> Json.Encode.Value
encodeUpdateOrderStatusesResponse =
    encodeObject << encodeUpdateOrderStatusesResponsePairs


encodeUpdateOrderStatusesResponseWithTag : ( String, String ) -> UpdateOrderStatusesResponse -> Json.Encode.Value
encodeUpdateOrderStatusesResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStatusesResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStatusesResponsePairs : UpdateOrderStatusesResponse -> List EncodedField
encodeUpdateOrderStatusesResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeUpdateOrderStatusesDTO model.result
            ]
    in
    pairs


encodeUpdateOrderStorageLimitRequest : UpdateOrderStorageLimitRequest -> Json.Encode.Value
encodeUpdateOrderStorageLimitRequest =
    encodeObject << encodeUpdateOrderStorageLimitRequestPairs


encodeUpdateOrderStorageLimitRequestWithTag : ( String, String ) -> UpdateOrderStorageLimitRequest -> Json.Encode.Value
encodeUpdateOrderStorageLimitRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOrderStorageLimitRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOrderStorageLimitRequestPairs : UpdateOrderStorageLimitRequest -> List EncodedField
encodeUpdateOrderStorageLimitRequestPairs model =
    let
        pairs =
            [ encode "newDate" Api.Time.encodeDate model.newDate
            ]
    in
    pairs


encodeUpdateOutletLicenseRequest : UpdateOutletLicenseRequest -> Json.Encode.Value
encodeUpdateOutletLicenseRequest =
    encodeObject << encodeUpdateOutletLicenseRequestPairs


encodeUpdateOutletLicenseRequestWithTag : ( String, String ) -> UpdateOutletLicenseRequest -> Json.Encode.Value
encodeUpdateOutletLicenseRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateOutletLicenseRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateOutletLicenseRequestPairs : UpdateOutletLicenseRequest -> List EncodedField
encodeUpdateOutletLicenseRequestPairs model =
    let
        pairs =
            [ encode "licenses" (Json.Encode.list encodeOutletLicenseDTO) model.licenses
            ]
    in
    pairs


encodeUpdatePriceWithDiscountDTO : UpdatePriceWithDiscountDTO -> Json.Encode.Value
encodeUpdatePriceWithDiscountDTO =
    encodeObject << encodeUpdatePriceWithDiscountDTOPairs


encodeUpdatePriceWithDiscountDTOWithTag : ( String, String ) -> UpdatePriceWithDiscountDTO -> Json.Encode.Value
encodeUpdatePriceWithDiscountDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePriceWithDiscountDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePriceWithDiscountDTOPairs : UpdatePriceWithDiscountDTO -> List EncodedField
encodeUpdatePriceWithDiscountDTOPairs model =
    let
        pairs =
            [ encode "value" Json.Encode.float model.value
            , encode "currencyId" encodeCurrencyType model.currencyId
            , maybeEncode "discountBase" Json.Encode.float model.discountBase
            ]
    in
    pairs


encodeUpdatePricesRequest : UpdatePricesRequest -> Json.Encode.Value
encodeUpdatePricesRequest =
    encodeObject << encodeUpdatePricesRequestPairs


encodeUpdatePricesRequestWithTag : ( String, String ) -> UpdatePricesRequest -> Json.Encode.Value
encodeUpdatePricesRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePricesRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePricesRequestPairs : UpdatePricesRequest -> List EncodedField
encodeUpdatePricesRequestPairs model =
    let
        pairs =
            [ encode "offers" (Json.Encode.list encodeOfferPriceDTO) model.offers
            ]
    in
    pairs


encodeUpdatePromoOfferDTO : UpdatePromoOfferDTO -> Json.Encode.Value
encodeUpdatePromoOfferDTO =
    encodeObject << encodeUpdatePromoOfferDTOPairs


encodeUpdatePromoOfferDTOWithTag : ( String, String ) -> UpdatePromoOfferDTO -> Json.Encode.Value
encodeUpdatePromoOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOfferDTOPairs : UpdatePromoOfferDTO -> List EncodedField
encodeUpdatePromoOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "params" encodeUpdatePromoOfferParamsDTO model.params
            ]
    in
    pairs


encodeUpdatePromoOfferDiscountParamsDTO : UpdatePromoOfferDiscountParamsDTO -> Json.Encode.Value
encodeUpdatePromoOfferDiscountParamsDTO =
    encodeObject << encodeUpdatePromoOfferDiscountParamsDTOPairs


encodeUpdatePromoOfferDiscountParamsDTOWithTag : ( String, String ) -> UpdatePromoOfferDiscountParamsDTO -> Json.Encode.Value
encodeUpdatePromoOfferDiscountParamsDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOfferDiscountParamsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOfferDiscountParamsDTOPairs : UpdatePromoOfferDiscountParamsDTO -> List EncodedField
encodeUpdatePromoOfferDiscountParamsDTOPairs model =
    let
        pairs =
            [ maybeEncode "price" Json.Encode.int model.price
            , maybeEncode "promoPrice" Json.Encode.int model.promoPrice
            ]
    in
    pairs


encodeUpdatePromoOfferParamsDTO : UpdatePromoOfferParamsDTO -> Json.Encode.Value
encodeUpdatePromoOfferParamsDTO =
    encodeObject << encodeUpdatePromoOfferParamsDTOPairs


encodeUpdatePromoOfferParamsDTOWithTag : ( String, String ) -> UpdatePromoOfferParamsDTO -> Json.Encode.Value
encodeUpdatePromoOfferParamsDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOfferParamsDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOfferParamsDTOPairs : UpdatePromoOfferParamsDTO -> List EncodedField
encodeUpdatePromoOfferParamsDTOPairs model =
    let
        pairs =
            [ maybeEncode "discountParams" encodeUpdatePromoOfferDiscountParamsDTO model.discountParams
            ]
    in
    pairs


encodeUpdatePromoOffersRequest : UpdatePromoOffersRequest -> Json.Encode.Value
encodeUpdatePromoOffersRequest =
    encodeObject << encodeUpdatePromoOffersRequestPairs


encodeUpdatePromoOffersRequestWithTag : ( String, String ) -> UpdatePromoOffersRequest -> Json.Encode.Value
encodeUpdatePromoOffersRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOffersRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOffersRequestPairs : UpdatePromoOffersRequest -> List EncodedField
encodeUpdatePromoOffersRequestPairs model =
    let
        pairs =
            [ encode "promoId" Json.Encode.string model.promoId
            , encode "offers" (Json.Encode.list encodeUpdatePromoOfferDTO) model.offers
            ]
    in
    pairs


encodeUpdatePromoOffersResponse : UpdatePromoOffersResponse -> Json.Encode.Value
encodeUpdatePromoOffersResponse =
    encodeObject << encodeUpdatePromoOffersResponsePairs


encodeUpdatePromoOffersResponseWithTag : ( String, String ) -> UpdatePromoOffersResponse -> Json.Encode.Value
encodeUpdatePromoOffersResponseWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOffersResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOffersResponsePairs : UpdatePromoOffersResponse -> List EncodedField
encodeUpdatePromoOffersResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeUpdatePromoOffersResultDTO model.result
            ]
    in
    pairs


encodeUpdatePromoOffersResultDTO : UpdatePromoOffersResultDTO -> Json.Encode.Value
encodeUpdatePromoOffersResultDTO =
    encodeObject << encodeUpdatePromoOffersResultDTOPairs


encodeUpdatePromoOffersResultDTOWithTag : ( String, String ) -> UpdatePromoOffersResultDTO -> Json.Encode.Value
encodeUpdatePromoOffersResultDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdatePromoOffersResultDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdatePromoOffersResultDTOPairs : UpdatePromoOffersResultDTO -> List EncodedField
encodeUpdatePromoOffersResultDTOPairs model =
    let
        pairs =
            [ maybeEncodeNullable "rejectedOffers" (Json.Encode.list encodeRejectedPromoOfferUpdateDTO) model.rejectedOffers
            , maybeEncodeNullable "warningOffers" (Json.Encode.list encodeWarningPromoOfferUpdateDTO) model.warningOffers
            ]
    in
    pairs


encodeUpdateStockDTO : UpdateStockDTO -> Json.Encode.Value
encodeUpdateStockDTO =
    encodeObject << encodeUpdateStockDTOPairs


encodeUpdateStockDTOWithTag : ( String, String ) -> UpdateStockDTO -> Json.Encode.Value
encodeUpdateStockDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateStockDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateStockDTOPairs : UpdateStockDTO -> List EncodedField
encodeUpdateStockDTOPairs model =
    let
        pairs =
            [ encode "sku" Json.Encode.string model.sku
            , encode "items" (Json.Encode.list encodeUpdateStockItemDTO) model.items
            ]
    in
    pairs


encodeUpdateStockItemDTO : UpdateStockItemDTO -> Json.Encode.Value
encodeUpdateStockItemDTO =
    encodeObject << encodeUpdateStockItemDTOPairs


encodeUpdateStockItemDTOWithTag : ( String, String ) -> UpdateStockItemDTO -> Json.Encode.Value
encodeUpdateStockItemDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateStockItemDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateStockItemDTOPairs : UpdateStockItemDTO -> List EncodedField
encodeUpdateStockItemDTOPairs model =
    let
        pairs =
            [ encode "count" Json.Encode.int model.count
            , maybeEncode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeUpdateStocksRequest : UpdateStocksRequest -> Json.Encode.Value
encodeUpdateStocksRequest =
    encodeObject << encodeUpdateStocksRequestPairs


encodeUpdateStocksRequestWithTag : ( String, String ) -> UpdateStocksRequest -> Json.Encode.Value
encodeUpdateStocksRequestWithTag (tagField, tag) model =
    encodeObject (encodeUpdateStocksRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateStocksRequestPairs : UpdateStocksRequest -> List EncodedField
encodeUpdateStocksRequestPairs model =
    let
        pairs =
            [ encode "skus" (Json.Encode.list encodeUpdateStockDTO) model.skus
            ]
    in
    pairs


encodeUpdateTimeDTO : UpdateTimeDTO -> Json.Encode.Value
encodeUpdateTimeDTO =
    encodeObject << encodeUpdateTimeDTOPairs


encodeUpdateTimeDTOWithTag : ( String, String ) -> UpdateTimeDTO -> Json.Encode.Value
encodeUpdateTimeDTOWithTag (tagField, tag) model =
    encodeObject (encodeUpdateTimeDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUpdateTimeDTOPairs : UpdateTimeDTO -> List EncodedField
encodeUpdateTimeDTOPairs model =
    let
        pairs =
            [ encode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeValueRestrictionDTO : ValueRestrictionDTO -> Json.Encode.Value
encodeValueRestrictionDTO =
    encodeObject << encodeValueRestrictionDTOPairs


encodeValueRestrictionDTOWithTag : ( String, String ) -> ValueRestrictionDTO -> Json.Encode.Value
encodeValueRestrictionDTOWithTag (tagField, tag) model =
    encodeObject (encodeValueRestrictionDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeValueRestrictionDTOPairs : ValueRestrictionDTO -> List EncodedField
encodeValueRestrictionDTOPairs model =
    let
        pairs =
            [ encode "limitingParameterId" Json.Encode.int model.limitingParameterId
            , encode "limitedValues" (Json.Encode.list encodeOptionValuesLimitedDTO) model.limitedValues
            ]
    in
    pairs


encodeVerifyOrderEacRequest : VerifyOrderEacRequest -> Json.Encode.Value
encodeVerifyOrderEacRequest =
    encodeObject << encodeVerifyOrderEacRequestPairs


encodeVerifyOrderEacRequestWithTag : ( String, String ) -> VerifyOrderEacRequest -> Json.Encode.Value
encodeVerifyOrderEacRequestWithTag (tagField, tag) model =
    encodeObject (encodeVerifyOrderEacRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVerifyOrderEacRequestPairs : VerifyOrderEacRequest -> List EncodedField
encodeVerifyOrderEacRequestPairs model =
    let
        pairs =
            [ maybeEncode "code" Json.Encode.string model.code
            ]
    in
    pairs


encodeVerifyOrderEacResponse : VerifyOrderEacResponse -> Json.Encode.Value
encodeVerifyOrderEacResponse =
    encodeObject << encodeVerifyOrderEacResponsePairs


encodeVerifyOrderEacResponseWithTag : ( String, String ) -> VerifyOrderEacResponse -> Json.Encode.Value
encodeVerifyOrderEacResponseWithTag (tagField, tag) model =
    encodeObject (encodeVerifyOrderEacResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVerifyOrderEacResponsePairs : VerifyOrderEacResponse -> List EncodedField
encodeVerifyOrderEacResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" encodeApiResponseStatusType model.status
            , maybeEncode "result" encodeEacVerificationResultDTO model.result
            ]
    in
    pairs


encodeWarehouseAddressDTO : WarehouseAddressDTO -> Json.Encode.Value
encodeWarehouseAddressDTO =
    encodeObject << encodeWarehouseAddressDTOPairs


encodeWarehouseAddressDTOWithTag : ( String, String ) -> WarehouseAddressDTO -> Json.Encode.Value
encodeWarehouseAddressDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseAddressDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseAddressDTOPairs : WarehouseAddressDTO -> List EncodedField
encodeWarehouseAddressDTOPairs model =
    let
        pairs =
            [ encode "city" Json.Encode.string model.city
            , maybeEncode "street" Json.Encode.string model.street
            , maybeEncode "number" Json.Encode.string model.number
            , maybeEncode "building" Json.Encode.string model.building
            , maybeEncode "block" Json.Encode.string model.block
            , encode "gps" encodeGpsDTO model.gps
            ]
    in
    pairs


encodeWarehouseDTO : WarehouseDTO -> Json.Encode.Value
encodeWarehouseDTO =
    encodeObject << encodeWarehouseDTOPairs


encodeWarehouseDTOWithTag : ( String, String ) -> WarehouseDTO -> Json.Encode.Value
encodeWarehouseDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseDTOPairs : WarehouseDTO -> List EncodedField
encodeWarehouseDTOPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "name" Json.Encode.string model.name
            , encode "campaignId" Json.Encode.int model.campaignId
            , encode "express" Json.Encode.bool model.express
            , maybeEncode "address" encodeWarehouseAddressDTO model.address
            ]
    in
    pairs


encodeWarehouseGroupDTO : WarehouseGroupDTO -> Json.Encode.Value
encodeWarehouseGroupDTO =
    encodeObject << encodeWarehouseGroupDTOPairs


encodeWarehouseGroupDTOWithTag : ( String, String ) -> WarehouseGroupDTO -> Json.Encode.Value
encodeWarehouseGroupDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseGroupDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseGroupDTOPairs : WarehouseGroupDTO -> List EncodedField
encodeWarehouseGroupDTOPairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "mainWarehouse" encodeWarehouseDTO model.mainWarehouse
            , encode "warehouses" (Json.Encode.list encodeWarehouseDTO) model.warehouses
            ]
    in
    pairs


encodeWarehouseOfferDTO : WarehouseOfferDTO -> Json.Encode.Value
encodeWarehouseOfferDTO =
    encodeObject << encodeWarehouseOfferDTOPairs


encodeWarehouseOfferDTOWithTag : ( String, String ) -> WarehouseOfferDTO -> Json.Encode.Value
encodeWarehouseOfferDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseOfferDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseOfferDTOPairs : WarehouseOfferDTO -> List EncodedField
encodeWarehouseOfferDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , maybeEncode "turnoverSummary" encodeTurnoverDTO model.turnoverSummary
            , encode "stocks" (Json.Encode.list encodeWarehouseStockDTO) model.stocks
            , maybeEncode "updatedAt" Api.Time.encodeDateTime model.updatedAt
            ]
    in
    pairs


encodeWarehouseOffersDTO : WarehouseOffersDTO -> Json.Encode.Value
encodeWarehouseOffersDTO =
    encodeObject << encodeWarehouseOffersDTOPairs


encodeWarehouseOffersDTOWithTag : ( String, String ) -> WarehouseOffersDTO -> Json.Encode.Value
encodeWarehouseOffersDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseOffersDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseOffersDTOPairs : WarehouseOffersDTO -> List EncodedField
encodeWarehouseOffersDTOPairs model =
    let
        pairs =
            [ encode "warehouseId" Json.Encode.int model.warehouseId
            , encode "offers" (Json.Encode.list encodeWarehouseOfferDTO) model.offers
            ]
    in
    pairs


encodeWarehouseStockDTO : WarehouseStockDTO -> Json.Encode.Value
encodeWarehouseStockDTO =
    encodeObject << encodeWarehouseStockDTOPairs


encodeWarehouseStockDTOWithTag : ( String, String ) -> WarehouseStockDTO -> Json.Encode.Value
encodeWarehouseStockDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehouseStockDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehouseStockDTOPairs : WarehouseStockDTO -> List EncodedField
encodeWarehouseStockDTOPairs model =
    let
        pairs =
            [ encode "type" encodeWarehouseStockType model.type_
            , encode "count" Json.Encode.int model.count
            ]
    in
    pairs


stringFromWarehouseStockType : WarehouseStockType -> String
stringFromWarehouseStockType model =
    case model of
        WarehouseStockTypeFIT ->
            "FIT"

        WarehouseStockTypeFREEZE ->
            "FREEZE"

        WarehouseStockTypeAVAILABLE ->
            "AVAILABLE"

        WarehouseStockTypeQUARANTINE ->
            "QUARANTINE"

        WarehouseStockTypeUTILIZATION ->
            "UTILIZATION"

        WarehouseStockTypeDEFECT ->
            "DEFECT"

        WarehouseStockTypeEXPIRED ->
            "EXPIRED"


encodeWarehouseStockType : WarehouseStockType -> Json.Encode.Value
encodeWarehouseStockType =
    Json.Encode.string << stringFromWarehouseStockType


encodeWarehousesDTO : WarehousesDTO -> Json.Encode.Value
encodeWarehousesDTO =
    encodeObject << encodeWarehousesDTOPairs


encodeWarehousesDTOWithTag : ( String, String ) -> WarehousesDTO -> Json.Encode.Value
encodeWarehousesDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarehousesDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarehousesDTOPairs : WarehousesDTO -> List EncodedField
encodeWarehousesDTOPairs model =
    let
        pairs =
            [ encode "warehouses" (Json.Encode.list encodeWarehouseDTO) model.warehouses
            , encode "warehouseGroups" (Json.Encode.list encodeWarehouseGroupDTO) model.warehouseGroups
            ]
    in
    pairs


encodeWarningPromoOfferUpdateDTO : WarningPromoOfferUpdateDTO -> Json.Encode.Value
encodeWarningPromoOfferUpdateDTO =
    encodeObject << encodeWarningPromoOfferUpdateDTOPairs


encodeWarningPromoOfferUpdateDTOWithTag : ( String, String ) -> WarningPromoOfferUpdateDTO -> Json.Encode.Value
encodeWarningPromoOfferUpdateDTOWithTag (tagField, tag) model =
    encodeObject (encodeWarningPromoOfferUpdateDTOPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeWarningPromoOfferUpdateDTOPairs : WarningPromoOfferUpdateDTO -> List EncodedField
encodeWarningPromoOfferUpdateDTOPairs model =
    let
        pairs =
            [ encode "offerId" Json.Encode.string model.offerId
            , encode "warnings" (Json.Encode.list encodePromoOfferUpdateWarningDTO) model.warnings
            ]
    in
    pairs


-- DECODER


acceptOrderCancellationRequestDecoder : Json.Decode.Decoder AcceptOrderCancellationRequest
acceptOrderCancellationRequestDecoder =
    Json.Decode.succeed AcceptOrderCancellationRequest
        |> decode "accepted" Json.Decode.bool 
        |> maybeDecode "reason" orderCancellationReasonTypeDecoder Nothing


addHiddenOffersRequestDecoder : Json.Decode.Decoder AddHiddenOffersRequest
addHiddenOffersRequestDecoder =
    Json.Decode.succeed AddHiddenOffersRequest
        |> decode "hiddenOffers" (Json.Decode.list hiddenOfferDTODecoder) 


addOffersToArchiveDTODecoder : Json.Decode.Decoder AddOffersToArchiveDTO
addOffersToArchiveDTODecoder =
    Json.Decode.succeed AddOffersToArchiveDTO
        |> maybeDecodeNullable "notArchivedOffers" (Json.Decode.list addOffersToArchiveErrorDTODecoder) Nothing


addOffersToArchiveErrorDTODecoder : Json.Decode.Decoder AddOffersToArchiveErrorDTO
addOffersToArchiveErrorDTODecoder =
    Json.Decode.succeed AddOffersToArchiveErrorDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "error" addOffersToArchiveErrorTypeDecoder 


addOffersToArchiveErrorTypeDecoder : Json.Decode.Decoder AddOffersToArchiveErrorType
addOffersToArchiveErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OFFER_HAS_STOCKS" ->
                        Json.Decode.succeed AddOffersToArchiveErrorTypeOFFERHASSTOCKS

                    "UNKNOWN" ->
                        Json.Decode.succeed AddOffersToArchiveErrorTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


addOffersToArchiveRequestDecoder : Json.Decode.Decoder AddOffersToArchiveRequest
addOffersToArchiveRequestDecoder =
    Json.Decode.succeed AddOffersToArchiveRequest
        |> decode "offerIds" (Json.Decode.list Json.Decode.string) 


addOffersToArchiveResponseDecoder : Json.Decode.Decoder AddOffersToArchiveResponse
addOffersToArchiveResponseDecoder =
    Json.Decode.succeed AddOffersToArchiveResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" addOffersToArchiveDTODecoder Nothing


affectedOrderQualityRatingComponentTypeDecoder : Json.Decode.Decoder AffectedOrderQualityRatingComponentType
affectedOrderQualityRatingComponentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DBS_CANCELLATION_RATE" ->
                        Json.Decode.succeed AffectedOrderQualityRatingComponentTypeDBSCANCELLATIONRATE

                    "DBS_LATE_DELIVERY_RATE" ->
                        Json.Decode.succeed AffectedOrderQualityRatingComponentTypeDBSLATEDELIVERYRATE

                    "FBS_CANCELLATION_RATE" ->
                        Json.Decode.succeed AffectedOrderQualityRatingComponentTypeFBSCANCELLATIONRATE

                    "FBS_LATE_SHIP_RATE" ->
                        Json.Decode.succeed AffectedOrderQualityRatingComponentTypeFBSLATESHIPRATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ageDTODecoder : Json.Decode.Decoder AgeDTO
ageDTODecoder =
    Json.Decode.succeed AgeDTO
        |> decode "value" Json.Decode.float 
        |> decode "ageUnit" ageUnitTypeDecoder 


ageUnitTypeDecoder : Json.Decode.Decoder AgeUnitType
ageUnitTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "YEAR" ->
                        Json.Decode.succeed AgeUnitTypeYEAR

                    "MONTH" ->
                        Json.Decode.succeed AgeUnitTypeMONTH

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


apiClientDataErrorResponseDecoder : Json.Decode.Decoder ApiClientDataErrorResponse
apiClientDataErrorResponseDecoder =
    Json.Decode.succeed ApiClientDataErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiErrorDTODecoder : Json.Decode.Decoder ApiErrorDTO
apiErrorDTODecoder =
    Json.Decode.succeed ApiErrorDTO
        |> decode "code" Json.Decode.string 
        |> maybeDecode "message" Json.Decode.string Nothing


apiErrorResponseDecoder : Json.Decode.Decoder ApiErrorResponse
apiErrorResponseDecoder =
    Json.Decode.succeed ApiErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiForbiddenErrorResponseDecoder : Json.Decode.Decoder ApiForbiddenErrorResponse
apiForbiddenErrorResponseDecoder =
    Json.Decode.succeed ApiForbiddenErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiLimitErrorResponseDecoder : Json.Decode.Decoder ApiLimitErrorResponse
apiLimitErrorResponseDecoder =
    Json.Decode.succeed ApiLimitErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiLockedErrorResponseDecoder : Json.Decode.Decoder ApiLockedErrorResponse
apiLockedErrorResponseDecoder =
    Json.Decode.succeed ApiLockedErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiNotFoundErrorResponseDecoder : Json.Decode.Decoder ApiNotFoundErrorResponse
apiNotFoundErrorResponseDecoder =
    Json.Decode.succeed ApiNotFoundErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiResponseDecoder : Json.Decode.Decoder ApiResponse
apiResponseDecoder =
    Json.Decode.succeed ApiResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing


apiResponseStatusTypeDecoder : Json.Decode.Decoder ApiResponseStatusType
apiResponseStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OK" ->
                        Json.Decode.succeed ApiResponseStatusTypeOK

                    "ERROR" ->
                        Json.Decode.succeed ApiResponseStatusTypeERROR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


apiServerErrorResponseDecoder : Json.Decode.Decoder ApiServerErrorResponse
apiServerErrorResponseDecoder =
    Json.Decode.succeed ApiServerErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


apiUnauthorizedErrorResponseDecoder : Json.Decode.Decoder ApiUnauthorizedErrorResponse
apiUnauthorizedErrorResponseDecoder =
    Json.Decode.succeed ApiUnauthorizedErrorResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list apiErrorDTODecoder) Nothing


baseCampaignOfferDTODecoder : Json.Decode.Decoder BaseCampaignOfferDTO
baseCampaignOfferDTODecoder =
    Json.Decode.succeed BaseCampaignOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "quantum" quantumDTODecoder Nothing
        |> maybeDecode "available" Json.Decode.bool Nothing


baseOfferDTODecoder : Json.Decode.Decoder BaseOfferDTO
baseOfferDTODecoder =
    Json.Decode.succeed BaseOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "videos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "manuals" (Json.Decode.list offerManualDTODecoder) Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "customsCommodityCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "certificates" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecode "condition" offerConditionDTODecoder Nothing
        |> maybeDecode "type" offerTypeDecoder Nothing
        |> maybeDecode "downloadable" Json.Decode.bool Nothing
        |> maybeDecode "adult" Json.Decode.bool Nothing
        |> maybeDecode "age" ageDTODecoder Nothing
        |> maybeDecodeNullable "params" (Json.Decode.list offerParamDTODecoder) Nothing


basePriceDTODecoder : Json.Decode.Decoder BasePriceDTO
basePriceDTODecoder =
    Json.Decode.succeed BasePriceDTO
        |> decode "value" Json.Decode.float 
        |> decode "currencyId" currencyTypeDecoder 


baseShipmentDTODecoder : Json.Decode.Decoder BaseShipmentDTO
baseShipmentDTODecoder =
    Json.Decode.succeed BaseShipmentDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "planIntervalFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "planIntervalTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "shipmentType" shipmentTypeDecoder Nothing
        |> maybeDecode "warehouse" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "warehouseTo" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "externalId" Json.Decode.string Nothing
        |> maybeDecode "deliveryService" deliveryServiceDTODecoder Nothing
        |> maybeDecode "palletsCount" palletsCountDTODecoder Nothing
        |> decode "orderIds" (Json.Decode.list Json.Decode.int) 
        |> maybeDecode "draftCount" Json.Decode.int Nothing
        |> maybeDecode "plannedCount" Json.Decode.int Nothing
        |> maybeDecode "factCount" Json.Decode.int Nothing


bidDecoder : Json.Decode.Decoder Bid
bidDecoder =
    Json.Decode.succeed Bid


bidRecommendationItemDTODecoder : Json.Decode.Decoder BidRecommendationItemDTO
bidRecommendationItemDTODecoder =
    Json.Decode.succeed BidRecommendationItemDTO
        |> decode "bid" Json.Decode.int 
        |> decode "showPercent" Json.Decode.int 


briefOrderItemDTODecoder : Json.Decode.Decoder BriefOrderItemDTO
briefOrderItemDTODecoder =
    Json.Decode.succeed BriefOrderItemDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "vat" orderVatTypeDecoder Nothing
        |> maybeDecode "count" Json.Decode.int Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "offerName" Json.Decode.string Nothing
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecodeNullable "instances" (Json.Decode.list orderItemInstanceDTODecoder) Nothing


briefOrderItemInstanceDTODecoder : Json.Decode.Decoder BriefOrderItemInstanceDTO
briefOrderItemInstanceDTODecoder =
    Json.Decode.succeed BriefOrderItemInstanceDTO
        |> maybeDecode "cis" Json.Decode.string Nothing
        |> maybeDecode "uin" Json.Decode.string Nothing
        |> maybeDecode "rnpt" Json.Decode.string Nothing
        |> maybeDecode "gtd" Json.Decode.string Nothing


businessDTODecoder : Json.Decode.Decoder BusinessDTO
businessDTODecoder =
    Json.Decode.succeed BusinessDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


businessSettingsDTODecoder : Json.Decode.Decoder BusinessSettingsDTO
businessSettingsDTODecoder =
    Json.Decode.succeed BusinessSettingsDTO
        |> maybeDecode "onlyDefaultPrice" Json.Decode.bool Nothing
        |> maybeDecode "currency" currencyTypeDecoder Nothing


calculateTariffsOfferDTODecoder : Json.Decode.Decoder CalculateTariffsOfferDTO
calculateTariffsOfferDTODecoder =
    Json.Decode.succeed CalculateTariffsOfferDTO
        |> decode "categoryId" Json.Decode.int 
        |> decode "price" Json.Decode.float 
        |> decode "length" Json.Decode.float 
        |> decode "width" Json.Decode.float 
        |> decode "height" Json.Decode.float 
        |> decode "weight" Json.Decode.float 
        |> maybeDecode "quantity" Json.Decode.int (Just 1)


calculateTariffsOfferInfoDTODecoder : Json.Decode.Decoder CalculateTariffsOfferInfoDTO
calculateTariffsOfferInfoDTODecoder =
    Json.Decode.succeed CalculateTariffsOfferInfoDTO
        |> decode "offer" calculateTariffsOfferDTODecoder 
        |> decode "tariffs" (Json.Decode.list calculatedTariffDTODecoder) 


calculateTariffsParametersDTODecoder : Json.Decode.Decoder CalculateTariffsParametersDTO
calculateTariffsParametersDTODecoder =
    Json.Decode.succeed CalculateTariffsParametersDTO
        |> maybeDecode "campaignId" Json.Decode.int Nothing
        |> maybeDecode "sellingProgram" sellingProgramTypeDecoder Nothing
        |> maybeDecode "frequency" paymentFrequencyTypeDecoder Nothing


calculateTariffsRequestDecoder : Json.Decode.Decoder CalculateTariffsRequest
calculateTariffsRequestDecoder =
    Json.Decode.succeed CalculateTariffsRequest
        |> decode "parameters" calculateTariffsParametersDTODecoder 
        |> decode "offers" (Json.Decode.list calculateTariffsOfferDTODecoder) 


calculateTariffsResponseDecoder : Json.Decode.Decoder CalculateTariffsResponse
calculateTariffsResponseDecoder =
    Json.Decode.succeed CalculateTariffsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" calculateTariffsResponseDTODecoder Nothing


calculateTariffsResponseDTODecoder : Json.Decode.Decoder CalculateTariffsResponseDTO
calculateTariffsResponseDTODecoder =
    Json.Decode.succeed CalculateTariffsResponseDTO
        |> decode "offers" (Json.Decode.list calculateTariffsOfferInfoDTODecoder) 


calculatedTariffDTODecoder : Json.Decode.Decoder CalculatedTariffDTO
calculatedTariffDTODecoder =
    Json.Decode.succeed CalculatedTariffDTO
        |> decode "type" calculatedTariffTypeDecoder 
        |> maybeDecode "amount" Json.Decode.float Nothing
        |> decode "parameters" (Json.Decode.list tariffParameterDTODecoder) 


calculatedTariffTypeDecoder : Json.Decode.Decoder CalculatedTariffType
calculatedTariffTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AGENCY_COMMISSION" ->
                        Json.Decode.succeed CalculatedTariffTypeAGENCYCOMMISSION

                    "PAYMENT_TRANSFER" ->
                        Json.Decode.succeed CalculatedTariffTypePAYMENTTRANSFER

                    "FEE" ->
                        Json.Decode.succeed CalculatedTariffTypeFEE

                    "DELIVERY_TO_CUSTOMER" ->
                        Json.Decode.succeed CalculatedTariffTypeDELIVERYTOCUSTOMER

                    "CROSSREGIONAL_DELIVERY" ->
                        Json.Decode.succeed CalculatedTariffTypeCROSSREGIONALDELIVERY

                    "EXPRESS_DELIVERY" ->
                        Json.Decode.succeed CalculatedTariffTypeEXPRESSDELIVERY

                    "SORTING" ->
                        Json.Decode.succeed CalculatedTariffTypeSORTING

                    "MIDDLE_MILE" ->
                        Json.Decode.succeed CalculatedTariffTypeMIDDLEMILE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


campaignDTODecoder : Json.Decode.Decoder CampaignDTO
campaignDTODecoder =
    Json.Decode.succeed CampaignDTO
        |> maybeDecode "domain" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "clientId" Json.Decode.int Nothing
        |> maybeDecode "business" businessDTODecoder Nothing
        |> maybeDecode "placementType" placementTypeDecoder Nothing


campaignQualityRatingDTODecoder : Json.Decode.Decoder CampaignQualityRatingDTO
campaignQualityRatingDTODecoder =
    Json.Decode.succeed CampaignQualityRatingDTO
        |> decode "campaignId" Json.Decode.int 
        |> decode "ratings" (Json.Decode.list qualityRatingDTODecoder) 


campaignSettingsDTODecoder : Json.Decode.Decoder CampaignSettingsDTO
campaignSettingsDTODecoder =
    Json.Decode.succeed CampaignSettingsDTO
        |> maybeDecode "countryRegion" Json.Decode.int Nothing
        |> maybeDecode "shopName" Json.Decode.string Nothing
        |> maybeDecode "showInContext" Json.Decode.bool Nothing
        |> maybeDecode "showInPremium" Json.Decode.bool Nothing
        |> maybeDecode "useOpenStat" Json.Decode.bool Nothing
        |> maybeDecode "localRegion" campaignSettingsLocalRegionDTODecoder Nothing


campaignSettingsDeliveryDTODecoder : Json.Decode.Decoder CampaignSettingsDeliveryDTO
campaignSettingsDeliveryDTODecoder =
    Json.Decode.succeed CampaignSettingsDeliveryDTO
        |> maybeDecode "schedule" campaignSettingsScheduleDTODecoder Nothing


campaignSettingsLocalRegionDTODecoder : Json.Decode.Decoder CampaignSettingsLocalRegionDTO
campaignSettingsLocalRegionDTODecoder =
    Json.Decode.succeed CampaignSettingsLocalRegionDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "type" regionTypeDecoder Nothing
        |> maybeDecode "deliveryOptionsSource" campaignSettingsScheduleSourceTypeDecoder Nothing
        |> maybeDecode "delivery" campaignSettingsDeliveryDTODecoder Nothing


campaignSettingsScheduleDTODecoder : Json.Decode.Decoder CampaignSettingsScheduleDTO
campaignSettingsScheduleDTODecoder =
    Json.Decode.succeed CampaignSettingsScheduleDTO
        |> maybeDecode "availableOnHolidays" Json.Decode.bool Nothing
        |> decode "customHolidays" (Json.Decode.list Json.Decode.string) 
        |> decode "customWorkingDays" (Json.Decode.list Json.Decode.string) 
        |> maybeDecode "period" campaignSettingsTimePeriodDTODecoder Nothing
        |> decode "totalHolidays" (Json.Decode.list Json.Decode.string) 
        |> decode "weeklyHolidays" (Json.Decode.list Json.Decode.int) 


campaignSettingsScheduleSourceTypeDecoder : Json.Decode.Decoder CampaignSettingsScheduleSourceType
campaignSettingsScheduleSourceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "WEB" ->
                        Json.Decode.succeed CampaignSettingsScheduleSourceTypeWEB

                    "YML" ->
                        Json.Decode.succeed CampaignSettingsScheduleSourceTypeYML

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


campaignSettingsTimePeriodDTODecoder : Json.Decode.Decoder CampaignSettingsTimePeriodDTO
campaignSettingsTimePeriodDTODecoder =
    Json.Decode.succeed CampaignSettingsTimePeriodDTO
        |> maybeDecode "fromDate" Json.Decode.string Nothing
        |> maybeDecode "toDate" Json.Decode.string Nothing


campaignsQualityRatingDTODecoder : Json.Decode.Decoder CampaignsQualityRatingDTO
campaignsQualityRatingDTODecoder =
    Json.Decode.succeed CampaignsQualityRatingDTO
        |> decode "campaignRatings" (Json.Decode.list campaignQualityRatingDTODecoder) 


categoryContentParametersDTODecoder : Json.Decode.Decoder CategoryContentParametersDTO
categoryContentParametersDTODecoder =
    Json.Decode.succeed CategoryContentParametersDTO
        |> decode "categoryId" Json.Decode.int 
        |> maybeDecodeNullable "parameters" (Json.Decode.list categoryParameterDTODecoder) Nothing


categoryDTODecoder : Json.Decode.Decoder CategoryDTO
categoryDTODecoder =
    Json.Decode.succeed CategoryDTO
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> maybeDecodeNullableLazy CategoryDTOChildren "children" (Json.Decode.list (Json.Decode.lazy (\_ -> categoryDTODecoder))) Nothing


categoryErrorDTODecoder : Json.Decode.Decoder CategoryErrorDTO
categoryErrorDTODecoder =
    Json.Decode.succeed CategoryErrorDTO
        |> maybeDecode "categoryId" Json.Decode.int Nothing
        |> maybeDecode "type" categoryErrorTypeDecoder Nothing


categoryErrorTypeDecoder : Json.Decode.Decoder CategoryErrorType
categoryErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNKNOWN_CATEGORY" ->
                        Json.Decode.succeed CategoryErrorTypeUNKNOWNCATEGORY

                    "CATEGORY_IS_NOT_LEAF" ->
                        Json.Decode.succeed CategoryErrorTypeCATEGORYISNOTLEAF

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


categoryIdDecoder : Json.Decode.Decoder CategoryId
categoryIdDecoder =
    Json.Decode.succeed CategoryId


categoryParameterDTODecoder : Json.Decode.Decoder CategoryParameterDTO
categoryParameterDTODecoder =
    Json.Decode.succeed CategoryParameterDTO
        |> decode "id" Json.Decode.int 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> decode "type" parameterTypeDecoder 
        |> maybeDecode "unit" categoryParameterUnitDTODecoder Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "recommendationTypes" (Json.Decode.list offerCardRecommendationTypeDecoder) Nothing
        |> decode "required" Json.Decode.bool 
        |> decode "filtering" Json.Decode.bool 
        |> decode "distinctive" Json.Decode.bool 
        |> decode "multivalue" Json.Decode.bool 
        |> decode "allowCustomValues" Json.Decode.bool 
        |> maybeDecodeNullable "values" (Json.Decode.list parameterValueOptionDTODecoder) Nothing
        |> maybeDecode "constraints" parameterValueConstraintsDTODecoder Nothing
        |> maybeDecodeNullable "valueRestrictions" (Json.Decode.list valueRestrictionDTODecoder) Nothing


categoryParameterUnitDTODecoder : Json.Decode.Decoder CategoryParameterUnitDTO
categoryParameterUnitDTODecoder =
    Json.Decode.succeed CategoryParameterUnitDTO
        |> decode "defaultUnitId" Json.Decode.int 
        |> decode "units" (Json.Decode.list unitDTODecoder) 


changeOutletRequestDecoder : Json.Decode.Decoder ChangeOutletRequest
changeOutletRequestDecoder =
    Json.Decode.succeed ChangeOutletRequest
        |> decode "name" Json.Decode.string 
        |> decode "type" outletTypeDecoder 
        |> maybeDecode "coords" Json.Decode.string Nothing
        |> maybeDecode "isMain" Json.Decode.bool Nothing
        |> maybeDecode "shopOutletCode" Json.Decode.string Nothing
        |> maybeDecode "visibility" outletVisibilityTypeDecoder Nothing
        |> decode "address" outletAddressDTODecoder 
        |> decode "phones" (Json.Decode.list Json.Decode.string) 
        |> decode "workingSchedule" outletWorkingScheduleDTODecoder 
        |> maybeDecodeNullable "deliveryRules" (Json.Decode.list outletDeliveryRuleDTODecoder) Nothing
        |> maybeDecode "storagePeriod" Json.Decode.int Nothing


channelTypeDecoder : Json.Decode.Decoder ChannelType
channelTypeDecoder =
    Json.Decode.succeed ChannelType


chatMessageDTODecoder : Json.Decode.Decoder ChatMessageDTO
chatMessageDTODecoder =
    Json.Decode.succeed ChatMessageDTO
        |> decode "messageId" Json.Decode.int 
        |> decode "createdAt" Api.Time.dateTimeDecoder 
        |> decode "sender" chatMessageSenderTypeDecoder 
        |> maybeDecode "message" Json.Decode.string Nothing
        |> maybeDecodeNullable "payload" (Json.Decode.list chatMessagePayloadDTODecoder) Nothing


chatMessagePayloadDTODecoder : Json.Decode.Decoder ChatMessagePayloadDTO
chatMessagePayloadDTODecoder =
    Json.Decode.succeed ChatMessagePayloadDTO
        |> decode "name" Json.Decode.string 
        |> decode "url" Json.Decode.string 
        |> decode "size" Json.Decode.int 


chatMessageSenderTypeDecoder : Json.Decode.Decoder ChatMessageSenderType
chatMessageSenderTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PARTNER" ->
                        Json.Decode.succeed ChatMessageSenderTypePARTNER

                    "CUSTOMER" ->
                        Json.Decode.succeed ChatMessageSenderTypeCUSTOMER

                    "MARKET" ->
                        Json.Decode.succeed ChatMessageSenderTypeMARKET

                    "SUPPORT" ->
                        Json.Decode.succeed ChatMessageSenderTypeSUPPORT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


chatMessagesResultDTODecoder : Json.Decode.Decoder ChatMessagesResultDTO
chatMessagesResultDTODecoder =
    Json.Decode.succeed ChatMessagesResultDTO
        |> decode "orderId" Json.Decode.int 
        |> decode "messages" (Json.Decode.list chatMessageDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


chatStatusTypeDecoder : Json.Decode.Decoder ChatStatusType
chatStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NEW" ->
                        Json.Decode.succeed ChatStatusTypeNEW

                    "WAITING_FOR_CUSTOMER" ->
                        Json.Decode.succeed ChatStatusTypeWAITINGFORCUSTOMER

                    "WAITING_FOR_PARTNER" ->
                        Json.Decode.succeed ChatStatusTypeWAITINGFORPARTNER

                    "WAITING_FOR_ARBITER" ->
                        Json.Decode.succeed ChatStatusTypeWAITINGFORARBITER

                    "WAITING_FOR_MARKET" ->
                        Json.Decode.succeed ChatStatusTypeWAITINGFORMARKET

                    "FINISHED" ->
                        Json.Decode.succeed ChatStatusTypeFINISHED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


chatTypeDecoder : Json.Decode.Decoder ChatType
chatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CHAT" ->
                        Json.Decode.succeed ChatTypeCHAT

                    "ARBITRAGE" ->
                        Json.Decode.succeed ChatTypeARBITRAGE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


cisDecoder : Json.Decode.Decoder Cis
cisDecoder =
    Json.Decode.succeed Cis


confirmPricesRequestDecoder : Json.Decode.Decoder ConfirmPricesRequest
confirmPricesRequestDecoder =
    Json.Decode.succeed ConfirmPricesRequest
        |> decode "offerIds" (Json.Decode.list Json.Decode.string) 


confirmShipmentRequestDecoder : Json.Decode.Decoder ConfirmShipmentRequest
confirmShipmentRequestDecoder =
    Json.Decode.succeed ConfirmShipmentRequest
        |> maybeDecode "externalShipmentId" Json.Decode.string Nothing


createChatRequestDecoder : Json.Decode.Decoder CreateChatRequest
createChatRequestDecoder =
    Json.Decode.succeed CreateChatRequest
        |> decode "orderId" Json.Decode.int 


createChatResponseDecoder : Json.Decode.Decoder CreateChatResponse
createChatResponseDecoder =
    Json.Decode.succeed CreateChatResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" createChatResultDTODecoder Nothing


createChatResultDTODecoder : Json.Decode.Decoder CreateChatResultDTO
createChatResultDTODecoder =
    Json.Decode.succeed CreateChatResultDTO
        |> decode "chatId" Json.Decode.int 


createOutletResponseDecoder : Json.Decode.Decoder CreateOutletResponse
createOutletResponseDecoder =
    Json.Decode.succeed CreateOutletResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" outletResponseDTODecoder Nothing


currencyTypeDecoder : Json.Decode.Decoder CurrencyType
currencyTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "RUR" ->
                        Json.Decode.succeed CurrencyTypeRUR

                    "USD" ->
                        Json.Decode.succeed CurrencyTypeUSD

                    "EUR" ->
                        Json.Decode.succeed CurrencyTypeEUR

                    "UAH" ->
                        Json.Decode.succeed CurrencyTypeUAH

                    "AUD" ->
                        Json.Decode.succeed CurrencyTypeAUD

                    "GBP" ->
                        Json.Decode.succeed CurrencyTypeGBP

                    "BYR" ->
                        Json.Decode.succeed CurrencyTypeBYR

                    "BYN" ->
                        Json.Decode.succeed CurrencyTypeBYN

                    "DKK" ->
                        Json.Decode.succeed CurrencyTypeDKK

                    "ISK" ->
                        Json.Decode.succeed CurrencyTypeISK

                    "KZT" ->
                        Json.Decode.succeed CurrencyTypeKZT

                    "CAD" ->
                        Json.Decode.succeed CurrencyTypeCAD

                    "CNY" ->
                        Json.Decode.succeed CurrencyTypeCNY

                    "NOK" ->
                        Json.Decode.succeed CurrencyTypeNOK

                    "XDR" ->
                        Json.Decode.succeed CurrencyTypeXDR

                    "SGD" ->
                        Json.Decode.succeed CurrencyTypeSGD

                    "TRY" ->
                        Json.Decode.succeed CurrencyTypeTRY

                    "SEK" ->
                        Json.Decode.succeed CurrencyTypeSEK

                    "CHF" ->
                        Json.Decode.succeed CurrencyTypeCHF

                    "JPY" ->
                        Json.Decode.succeed CurrencyTypeJPY

                    "AZN" ->
                        Json.Decode.succeed CurrencyTypeAZN

                    "ALL" ->
                        Json.Decode.succeed CurrencyTypeALL

                    "DZD" ->
                        Json.Decode.succeed CurrencyTypeDZD

                    "AOA" ->
                        Json.Decode.succeed CurrencyTypeAOA

                    "ARS" ->
                        Json.Decode.succeed CurrencyTypeARS

                    "AMD" ->
                        Json.Decode.succeed CurrencyTypeAMD

                    "AFN" ->
                        Json.Decode.succeed CurrencyTypeAFN

                    "BHD" ->
                        Json.Decode.succeed CurrencyTypeBHD

                    "BGN" ->
                        Json.Decode.succeed CurrencyTypeBGN

                    "BOB" ->
                        Json.Decode.succeed CurrencyTypeBOB

                    "BWP" ->
                        Json.Decode.succeed CurrencyTypeBWP

                    "BND" ->
                        Json.Decode.succeed CurrencyTypeBND

                    "BRL" ->
                        Json.Decode.succeed CurrencyTypeBRL

                    "BIF" ->
                        Json.Decode.succeed CurrencyTypeBIF

                    "HUF" ->
                        Json.Decode.succeed CurrencyTypeHUF

                    "VEF" ->
                        Json.Decode.succeed CurrencyTypeVEF

                    "KPW" ->
                        Json.Decode.succeed CurrencyTypeKPW

                    "VND" ->
                        Json.Decode.succeed CurrencyTypeVND

                    "GMD" ->
                        Json.Decode.succeed CurrencyTypeGMD

                    "GHS" ->
                        Json.Decode.succeed CurrencyTypeGHS

                    "GNF" ->
                        Json.Decode.succeed CurrencyTypeGNF

                    "HKD" ->
                        Json.Decode.succeed CurrencyTypeHKD

                    "GEL" ->
                        Json.Decode.succeed CurrencyTypeGEL

                    "AED" ->
                        Json.Decode.succeed CurrencyTypeAED

                    "EGP" ->
                        Json.Decode.succeed CurrencyTypeEGP

                    "ZMK" ->
                        Json.Decode.succeed CurrencyTypeZMK

                    "ILS" ->
                        Json.Decode.succeed CurrencyTypeILS

                    "INR" ->
                        Json.Decode.succeed CurrencyTypeINR

                    "IDR" ->
                        Json.Decode.succeed CurrencyTypeIDR

                    "JOD" ->
                        Json.Decode.succeed CurrencyTypeJOD

                    "IQD" ->
                        Json.Decode.succeed CurrencyTypeIQD

                    "IRR" ->
                        Json.Decode.succeed CurrencyTypeIRR

                    "YER" ->
                        Json.Decode.succeed CurrencyTypeYER

                    "QAR" ->
                        Json.Decode.succeed CurrencyTypeQAR

                    "KES" ->
                        Json.Decode.succeed CurrencyTypeKES

                    "KGS" ->
                        Json.Decode.succeed CurrencyTypeKGS

                    "COP" ->
                        Json.Decode.succeed CurrencyTypeCOP

                    "CDF" ->
                        Json.Decode.succeed CurrencyTypeCDF

                    "CRC" ->
                        Json.Decode.succeed CurrencyTypeCRC

                    "KWD" ->
                        Json.Decode.succeed CurrencyTypeKWD

                    "CUP" ->
                        Json.Decode.succeed CurrencyTypeCUP

                    "LAK" ->
                        Json.Decode.succeed CurrencyTypeLAK

                    "LVL" ->
                        Json.Decode.succeed CurrencyTypeLVL

                    "SLL" ->
                        Json.Decode.succeed CurrencyTypeSLL

                    "LBP" ->
                        Json.Decode.succeed CurrencyTypeLBP

                    "LYD" ->
                        Json.Decode.succeed CurrencyTypeLYD

                    "SZL" ->
                        Json.Decode.succeed CurrencyTypeSZL

                    "LTL" ->
                        Json.Decode.succeed CurrencyTypeLTL

                    "MUR" ->
                        Json.Decode.succeed CurrencyTypeMUR

                    "MRO" ->
                        Json.Decode.succeed CurrencyTypeMRO

                    "MKD" ->
                        Json.Decode.succeed CurrencyTypeMKD

                    "MWK" ->
                        Json.Decode.succeed CurrencyTypeMWK

                    "MGA" ->
                        Json.Decode.succeed CurrencyTypeMGA

                    "MYR" ->
                        Json.Decode.succeed CurrencyTypeMYR

                    "MAD" ->
                        Json.Decode.succeed CurrencyTypeMAD

                    "MXN" ->
                        Json.Decode.succeed CurrencyTypeMXN

                    "MZN" ->
                        Json.Decode.succeed CurrencyTypeMZN

                    "MDL" ->
                        Json.Decode.succeed CurrencyTypeMDL

                    "MNT" ->
                        Json.Decode.succeed CurrencyTypeMNT

                    "NPR" ->
                        Json.Decode.succeed CurrencyTypeNPR

                    "NGN" ->
                        Json.Decode.succeed CurrencyTypeNGN

                    "NIO" ->
                        Json.Decode.succeed CurrencyTypeNIO

                    "NZD" ->
                        Json.Decode.succeed CurrencyTypeNZD

                    "OMR" ->
                        Json.Decode.succeed CurrencyTypeOMR

                    "PKR" ->
                        Json.Decode.succeed CurrencyTypePKR

                    "PYG" ->
                        Json.Decode.succeed CurrencyTypePYG

                    "PEN" ->
                        Json.Decode.succeed CurrencyTypePEN

                    "PLN" ->
                        Json.Decode.succeed CurrencyTypePLN

                    "KHR" ->
                        Json.Decode.succeed CurrencyTypeKHR

                    "SAR" ->
                        Json.Decode.succeed CurrencyTypeSAR

                    "RON" ->
                        Json.Decode.succeed CurrencyTypeRON

                    "SCR" ->
                        Json.Decode.succeed CurrencyTypeSCR

                    "SYP" ->
                        Json.Decode.succeed CurrencyTypeSYP

                    "SKK" ->
                        Json.Decode.succeed CurrencyTypeSKK

                    "SOS" ->
                        Json.Decode.succeed CurrencyTypeSOS

                    "SDG" ->
                        Json.Decode.succeed CurrencyTypeSDG

                    "SRD" ->
                        Json.Decode.succeed CurrencyTypeSRD

                    "TJS" ->
                        Json.Decode.succeed CurrencyTypeTJS

                    "THB" ->
                        Json.Decode.succeed CurrencyTypeTHB

                    "TWD" ->
                        Json.Decode.succeed CurrencyTypeTWD

                    "BDT" ->
                        Json.Decode.succeed CurrencyTypeBDT

                    "TZS" ->
                        Json.Decode.succeed CurrencyTypeTZS

                    "TND" ->
                        Json.Decode.succeed CurrencyTypeTND

                    "TMM" ->
                        Json.Decode.succeed CurrencyTypeTMM

                    "UGX" ->
                        Json.Decode.succeed CurrencyTypeUGX

                    "UZS" ->
                        Json.Decode.succeed CurrencyTypeUZS

                    "UYU" ->
                        Json.Decode.succeed CurrencyTypeUYU

                    "PHP" ->
                        Json.Decode.succeed CurrencyTypePHP

                    "DJF" ->
                        Json.Decode.succeed CurrencyTypeDJF

                    "XAF" ->
                        Json.Decode.succeed CurrencyTypeXAF

                    "XOF" ->
                        Json.Decode.succeed CurrencyTypeXOF

                    "HRK" ->
                        Json.Decode.succeed CurrencyTypeHRK

                    "CZK" ->
                        Json.Decode.succeed CurrencyTypeCZK

                    "CLP" ->
                        Json.Decode.succeed CurrencyTypeCLP

                    "LKR" ->
                        Json.Decode.succeed CurrencyTypeLKR

                    "EEK" ->
                        Json.Decode.succeed CurrencyTypeEEK

                    "ETB" ->
                        Json.Decode.succeed CurrencyTypeETB

                    "RSD" ->
                        Json.Decode.succeed CurrencyTypeRSD

                    "ZAR" ->
                        Json.Decode.succeed CurrencyTypeZAR

                    "KRW" ->
                        Json.Decode.succeed CurrencyTypeKRW

                    "NAD" ->
                        Json.Decode.succeed CurrencyTypeNAD

                    "TL" ->
                        Json.Decode.succeed CurrencyTypeTL

                    "UE" ->
                        Json.Decode.succeed CurrencyTypeUE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


dateDdMmYyyyDecoder : Json.Decode.Decoder DateDdMmYyyy
dateDdMmYyyyDecoder =
    Json.Decode.succeed DateDdMmYyyy


dateDdMmYyyyHhMmSsDecoder : Json.Decode.Decoder DateDdMmYyyyHhMmSs
dateDdMmYyyyHhMmSsDecoder =
    Json.Decode.succeed DateDdMmYyyyHhMmSs


dayOfWeekTypeDecoder : Json.Decode.Decoder DayOfWeekType
dayOfWeekTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MONDAY" ->
                        Json.Decode.succeed DayOfWeekTypeMONDAY

                    "TUESDAY" ->
                        Json.Decode.succeed DayOfWeekTypeTUESDAY

                    "WEDNESDAY" ->
                        Json.Decode.succeed DayOfWeekTypeWEDNESDAY

                    "THURSDAY" ->
                        Json.Decode.succeed DayOfWeekTypeTHURSDAY

                    "FRIDAY" ->
                        Json.Decode.succeed DayOfWeekTypeFRIDAY

                    "SATURDAY" ->
                        Json.Decode.succeed DayOfWeekTypeSATURDAY

                    "SUNDAY" ->
                        Json.Decode.succeed DayOfWeekTypeSUNDAY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


deleteCampaignOffersDTODecoder : Json.Decode.Decoder DeleteCampaignOffersDTO
deleteCampaignOffersDTODecoder =
    Json.Decode.succeed DeleteCampaignOffersDTO
        |> maybeDecodeNullable "notDeletedOfferIds" (Json.Decode.list Json.Decode.string) Nothing


deleteCampaignOffersRequestDecoder : Json.Decode.Decoder DeleteCampaignOffersRequest
deleteCampaignOffersRequestDecoder =
    Json.Decode.succeed DeleteCampaignOffersRequest
        |> decode "offerIds" (Json.Decode.list Json.Decode.string) 


deleteCampaignOffersResponseDecoder : Json.Decode.Decoder DeleteCampaignOffersResponse
deleteCampaignOffersResponseDecoder =
    Json.Decode.succeed DeleteCampaignOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" deleteCampaignOffersDTODecoder Nothing


deleteGoodsFeedbackCommentRequestDecoder : Json.Decode.Decoder DeleteGoodsFeedbackCommentRequest
deleteGoodsFeedbackCommentRequestDecoder =
    Json.Decode.succeed DeleteGoodsFeedbackCommentRequest
        |> decode "id" Json.Decode.int 


deleteHiddenOffersRequestDecoder : Json.Decode.Decoder DeleteHiddenOffersRequest
deleteHiddenOffersRequestDecoder =
    Json.Decode.succeed DeleteHiddenOffersRequest
        |> decode "hiddenOffers" (Json.Decode.list hiddenOfferDTODecoder) 


deleteOffersDTODecoder : Json.Decode.Decoder DeleteOffersDTO
deleteOffersDTODecoder =
    Json.Decode.succeed DeleteOffersDTO
        |> maybeDecodeNullable "notDeletedOfferIds" (Json.Decode.list Json.Decode.string) Nothing


deleteOffersFromArchiveDTODecoder : Json.Decode.Decoder DeleteOffersFromArchiveDTO
deleteOffersFromArchiveDTODecoder =
    Json.Decode.succeed DeleteOffersFromArchiveDTO
        |> maybeDecodeNullable "notUnarchivedOfferIds" (Json.Decode.list Json.Decode.string) Nothing


deleteOffersFromArchiveRequestDecoder : Json.Decode.Decoder DeleteOffersFromArchiveRequest
deleteOffersFromArchiveRequestDecoder =
    Json.Decode.succeed DeleteOffersFromArchiveRequest
        |> decode "offerIds" (Json.Decode.list Json.Decode.string) 


deleteOffersFromArchiveResponseDecoder : Json.Decode.Decoder DeleteOffersFromArchiveResponse
deleteOffersFromArchiveResponseDecoder =
    Json.Decode.succeed DeleteOffersFromArchiveResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" deleteOffersFromArchiveDTODecoder Nothing


deleteOffersRequestDecoder : Json.Decode.Decoder DeleteOffersRequest
deleteOffersRequestDecoder =
    Json.Decode.succeed DeleteOffersRequest
        |> decode "offerIds" (Json.Decode.list Json.Decode.string) 


deleteOffersResponseDecoder : Json.Decode.Decoder DeleteOffersResponse
deleteOffersResponseDecoder =
    Json.Decode.succeed DeleteOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" deleteOffersDTODecoder Nothing


deletePromoOffersRequestDecoder : Json.Decode.Decoder DeletePromoOffersRequest
deletePromoOffersRequestDecoder =
    Json.Decode.succeed DeletePromoOffersRequest
        |> decode "promoId" Json.Decode.string 
        |> maybeDecode "deleteAllOffers" Json.Decode.bool Nothing
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing


deletePromoOffersResponseDecoder : Json.Decode.Decoder DeletePromoOffersResponse
deletePromoOffersResponseDecoder =
    Json.Decode.succeed DeletePromoOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" deletePromoOffersResultDTODecoder Nothing


deletePromoOffersResultDTODecoder : Json.Decode.Decoder DeletePromoOffersResultDTO
deletePromoOffersResultDTODecoder =
    Json.Decode.succeed DeletePromoOffersResultDTO
        |> maybeDecodeNullable "rejectedOffers" (Json.Decode.list rejectedPromoOfferDeleteDTODecoder) Nothing


deliveryServiceDTODecoder : Json.Decode.Decoder DeliveryServiceDTO
deliveryServiceDTODecoder =
    Json.Decode.succeed DeliveryServiceDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


deliveryServiceInfoDTODecoder : Json.Decode.Decoder DeliveryServiceInfoDTO
deliveryServiceInfoDTODecoder =
    Json.Decode.succeed DeliveryServiceInfoDTO
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 


deliveryServicesDTODecoder : Json.Decode.Decoder DeliveryServicesDTO
deliveryServicesDTODecoder =
    Json.Decode.succeed DeliveryServicesDTO
        |> decode "deliveryService" (Json.Decode.list deliveryServiceInfoDTODecoder) 


documentDTODecoder : Json.Decode.Decoder DocumentDTO
documentDTODecoder =
    Json.Decode.succeed DocumentDTO
        |> maybeDecode "status" orderDocumentStatusTypeDecoder Nothing
        |> maybeDecode "number" Json.Decode.string Nothing
        |> maybeDecode "date" Api.Time.dateDecoder Nothing


eacVerificationResultDTODecoder : Json.Decode.Decoder EacVerificationResultDTO
eacVerificationResultDTODecoder =
    Json.Decode.succeed EacVerificationResultDTO
        |> maybeDecode "verificationResult" eacVerificationStatusTypeDecoder Nothing
        |> maybeDecode "attemptsLeft" Json.Decode.int Nothing


eacVerificationStatusTypeDecoder : Json.Decode.Decoder EacVerificationStatusType
eacVerificationStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ACCEPTED" ->
                        Json.Decode.succeed EacVerificationStatusTypeACCEPTED

                    "REJECTED" ->
                        Json.Decode.succeed EacVerificationStatusTypeREJECTED

                    "NEED_UPDATE" ->
                        Json.Decode.succeed EacVerificationStatusTypeNEEDUPDATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


emptyApiResponseDecoder : Json.Decode.Decoder EmptyApiResponse
emptyApiResponseDecoder =
    Json.Decode.succeed EmptyApiResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing


enrichedMappingsOfferDTODecoder : Json.Decode.Decoder EnrichedMappingsOfferDTO
enrichedMappingsOfferDTODecoder =
    Json.Decode.succeed EnrichedMappingsOfferDTO
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "feedId" Json.Decode.int Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "urls" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "manufacturer" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "minShipment" Json.Decode.int Nothing
        |> maybeDecode "transportUnitSize" Json.Decode.int Nothing
        |> maybeDecode "quantumOfSupply" Json.Decode.int Nothing
        |> maybeDecode "deliveryDurationDays" Json.Decode.int Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecodeNullable "customsCommodityCodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecodeNullable "supplyScheduleDays" (Json.Decode.list dayOfWeekTypeDecoder) Nothing
        |> maybeDecode "shelfLifeDays" Json.Decode.int Nothing
        |> maybeDecode "lifeTimeDays" Json.Decode.int Nothing
        |> maybeDecode "guaranteePeriodDays" Json.Decode.int Nothing
        |> maybeDecode "processingState" offerProcessingStateDTODecoder Nothing
        |> maybeDecode "availability" offerAvailabilityStatusTypeDecoder Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "certificate" Json.Decode.string Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "marketCategoryName" Json.Decode.string Nothing
        |> maybeDecode "marketModelId" Json.Decode.int Nothing
        |> maybeDecode "marketModelName" Json.Decode.string Nothing
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "marketSkuName" Json.Decode.string Nothing


enrichedModelDTODecoder : Json.Decode.Decoder EnrichedModelDTO
enrichedModelDTODecoder =
    Json.Decode.succeed EnrichedModelDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "prices" modelPriceDTODecoder Nothing
        |> maybeDecodeNullable "offers" (Json.Decode.list modelOfferDTODecoder) Nothing
        |> maybeDecode "offlineOffers" Json.Decode.int Nothing
        |> maybeDecode "onlineOffers" Json.Decode.int Nothing


enrichedModelsDTODecoder : Json.Decode.Decoder EnrichedModelsDTO
enrichedModelsDTODecoder =
    Json.Decode.succeed EnrichedModelsDTO
        |> decode "models" (Json.Decode.list enrichedModelDTODecoder) 


enrichedOrderBoxLayoutDTODecoder : Json.Decode.Decoder EnrichedOrderBoxLayoutDTO
enrichedOrderBoxLayoutDTODecoder =
    Json.Decode.succeed EnrichedOrderBoxLayoutDTO
        |> decode "items" (Json.Decode.list orderBoxLayoutItemDTODecoder) 
        |> maybeDecode "boxId" Json.Decode.int Nothing


extensionShipmentDTODecoder : Json.Decode.Decoder ExtensionShipmentDTO
extensionShipmentDTODecoder =
    Json.Decode.succeed ExtensionShipmentDTO
        |> maybeDecode "currentStatus" shipmentStatusChangeDTODecoder Nothing
        |> decode "availableActions" (Json.Decode.list shipmentActionTypeDecoder) 


feedContentDTODecoder : Json.Decode.Decoder FeedContentDTO
feedContentDTODecoder =
    Json.Decode.succeed FeedContentDTO
        |> maybeDecode "rejectedOffersCount" Json.Decode.int Nothing
        |> maybeDecode "status" feedStatusTypeDecoder Nothing
        |> maybeDecode "totalOffersCount" Json.Decode.int Nothing
        |> maybeDecode "error" feedContentErrorDTODecoder Nothing


feedContentErrorDTODecoder : Json.Decode.Decoder FeedContentErrorDTO
feedContentErrorDTODecoder =
    Json.Decode.succeed FeedContentErrorDTO
        |> maybeDecode "type" feedContentErrorTypeDecoder Nothing


feedContentErrorTypeDecoder : Json.Decode.Decoder FeedContentErrorType
feedContentErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PARSE_ERROR" ->
                        Json.Decode.succeed FeedContentErrorTypePARSEERROR

                    "PARSE_XML_ERROR" ->
                        Json.Decode.succeed FeedContentErrorTypePARSEXMLERROR

                    "TOO_MANY_REJECTED_OFFERS" ->
                        Json.Decode.succeed FeedContentErrorTypeTOOMANYREJECTEDOFFERS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedDTODecoder : Json.Decode.Decoder FeedDTO
feedDTODecoder =
    Json.Decode.succeed FeedDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "login" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "password" Json.Decode.string Nothing
        |> maybeDecode "uploadDate" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "content" feedContentDTODecoder Nothing
        |> maybeDecode "download" feedDownloadDTODecoder Nothing
        |> maybeDecode "placement" feedPlacementDTODecoder Nothing
        |> maybeDecode "publication" feedPublicationDTODecoder Nothing


feedDownloadDTODecoder : Json.Decode.Decoder FeedDownloadDTO
feedDownloadDTODecoder =
    Json.Decode.succeed FeedDownloadDTO
        |> maybeDecode "status" feedStatusTypeDecoder Nothing
        |> maybeDecode "error" feedDownloadErrorDTODecoder Nothing


feedDownloadErrorDTODecoder : Json.Decode.Decoder FeedDownloadErrorDTO
feedDownloadErrorDTODecoder =
    Json.Decode.succeed FeedDownloadErrorDTO
        |> maybeDecode "httpStatusCode" Json.Decode.int Nothing
        |> maybeDecode "type" feedDownloadErrorTypeDecoder Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


feedDownloadErrorTypeDecoder : Json.Decode.Decoder FeedDownloadErrorType
feedDownloadErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DOWNLOAD_ERROR" ->
                        Json.Decode.succeed FeedDownloadErrorTypeERROR

                    "DOWNLOAD_HTTP_ERROR" ->
                        Json.Decode.succeed FeedDownloadErrorTypeHTTPERROR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedIndexLogsErrorDTODecoder : Json.Decode.Decoder FeedIndexLogsErrorDTO
feedIndexLogsErrorDTODecoder =
    Json.Decode.succeed FeedIndexLogsErrorDTO
        |> maybeDecode "httpStatusCode" Json.Decode.int Nothing
        |> maybeDecode "type" feedIndexLogsErrorTypeDecoder Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


feedIndexLogsErrorTypeDecoder : Json.Decode.Decoder FeedIndexLogsErrorType
feedIndexLogsErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DOWNLOAD_ERROR" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypeDOWNLOADERROR

                    "DOWNLOAD_HTTP_ERROR" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypeDOWNLOADHTTPERROR

                    "PARSE_ERROR" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypePARSEERROR

                    "PARSE_XML_ERROR" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypePARSEXMLERROR

                    "TOO_MANY_REJECTED_OFFERS" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypeTOOMANYREJECTEDOFFERS

                    "NOT_INDEXED" ->
                        Json.Decode.succeed FeedIndexLogsErrorTypeNOTINDEXED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedIndexLogsFeedDTODecoder : Json.Decode.Decoder FeedIndexLogsFeedDTO
feedIndexLogsFeedDTODecoder =
    Json.Decode.succeed FeedIndexLogsFeedDTO
        |> maybeDecode "id" Json.Decode.int Nothing


feedIndexLogsIndexTypeDecoder : Json.Decode.Decoder FeedIndexLogsIndexType
feedIndexLogsIndexTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DIFF" ->
                        Json.Decode.succeed FeedIndexLogsIndexTypeDIFF

                    "FAST_PRICE" ->
                        Json.Decode.succeed FeedIndexLogsIndexTypeFASTPRICE

                    "FULL" ->
                        Json.Decode.succeed FeedIndexLogsIndexTypeFULL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedIndexLogsOffersDTODecoder : Json.Decode.Decoder FeedIndexLogsOffersDTO
feedIndexLogsOffersDTODecoder =
    Json.Decode.succeed FeedIndexLogsOffersDTO
        |> maybeDecode "rejectedCount" Json.Decode.int Nothing
        |> maybeDecode "totalCount" Json.Decode.int Nothing


feedIndexLogsRecordDTODecoder : Json.Decode.Decoder FeedIndexLogsRecordDTO
feedIndexLogsRecordDTODecoder =
    Json.Decode.succeed FeedIndexLogsRecordDTO
        |> maybeDecode "downloadTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "fileTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "generationId" Json.Decode.int Nothing
        |> maybeDecode "indexType" feedIndexLogsIndexTypeDecoder Nothing
        |> maybeDecode "publishedTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "status" feedIndexLogsStatusTypeDecoder Nothing
        |> maybeDecode "error" feedIndexLogsErrorDTODecoder Nothing
        |> maybeDecode "offers" feedIndexLogsOffersDTODecoder Nothing


feedIndexLogsResultDTODecoder : Json.Decode.Decoder FeedIndexLogsResultDTO
feedIndexLogsResultDTODecoder =
    Json.Decode.succeed FeedIndexLogsResultDTO
        |> maybeDecode "feed" feedIndexLogsFeedDTODecoder Nothing
        |> decode "indexLogRecords" (Json.Decode.list feedIndexLogsRecordDTODecoder) 
        |> maybeDecode "total" Json.Decode.int Nothing


feedIndexLogsStatusTypeDecoder : Json.Decode.Decoder FeedIndexLogsStatusType
feedIndexLogsStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ERROR" ->
                        Json.Decode.succeed FeedIndexLogsStatusTypeERROR

                    "OK" ->
                        Json.Decode.succeed FeedIndexLogsStatusTypeOK

                    "WARNING" ->
                        Json.Decode.succeed FeedIndexLogsStatusTypeWARNING

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedParameterDTODecoder : Json.Decode.Decoder FeedParameterDTO
feedParameterDTODecoder =
    Json.Decode.succeed FeedParameterDTO
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> decode "name" Json.Decode.string 
        |> maybeDecodeNullable "values" (Json.Decode.list Json.Decode.int) Nothing


feedParameterNameDecoder : Json.Decode.Decoder FeedParameterName
feedParameterNameDecoder =
    Json.Decode.succeed FeedParameterName


feedPlacementDTODecoder : Json.Decode.Decoder FeedPlacementDTO
feedPlacementDTODecoder =
    Json.Decode.succeed FeedPlacementDTO
        |> maybeDecode "status" feedStatusTypeDecoder Nothing
        |> maybeDecode "totalOffersCount" Json.Decode.int Nothing


feedPublicationDTODecoder : Json.Decode.Decoder FeedPublicationDTO
feedPublicationDTODecoder =
    Json.Decode.succeed FeedPublicationDTO
        |> maybeDecode "status" feedStatusTypeDecoder Nothing
        |> maybeDecode "full" feedPublicationFullDTODecoder Nothing
        |> maybeDecode "priceAndStockUpdate" feedPublicationPriceAndStockUpdateDTODecoder Nothing


feedPublicationFullDTODecoder : Json.Decode.Decoder FeedPublicationFullDTO
feedPublicationFullDTODecoder =
    Json.Decode.succeed FeedPublicationFullDTO
        |> maybeDecode "fileTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "publishedTime" Api.Time.dateTimeDecoder Nothing


feedPublicationPriceAndStockUpdateDTODecoder : Json.Decode.Decoder FeedPublicationPriceAndStockUpdateDTO
feedPublicationPriceAndStockUpdateDTODecoder =
    Json.Decode.succeed FeedPublicationPriceAndStockUpdateDTO
        |> maybeDecode "fileTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "publishedTime" Api.Time.dateTimeDecoder Nothing


feedStatusTypeDecoder : Json.Decode.Decoder FeedStatusType
feedStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ERROR" ->
                        Json.Decode.succeed FeedStatusTypeERROR

                    "NA" ->
                        Json.Decode.succeed FeedStatusTypeNA

                    "OK" ->
                        Json.Decode.succeed FeedStatusTypeOK

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedbackAuthorDTODecoder : Json.Decode.Decoder FeedbackAuthorDTO
feedbackAuthorDTODecoder =
    Json.Decode.succeed FeedbackAuthorDTO
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "region" regionDTODecoder Nothing


feedbackCommentAuthorDTODecoder : Json.Decode.Decoder FeedbackCommentAuthorDTO
feedbackCommentAuthorDTODecoder =
    Json.Decode.succeed FeedbackCommentAuthorDTO
        |> maybeDecode "type" feedbackCommentAuthorTypeDecoder Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


feedbackCommentAuthorTypeDecoder : Json.Decode.Decoder FeedbackCommentAuthorType
feedbackCommentAuthorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "USER" ->
                        Json.Decode.succeed FeedbackCommentAuthorTypeUSER

                    "SHOP" ->
                        Json.Decode.succeed FeedbackCommentAuthorTypeSHOP

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedbackCommentDTODecoder : Json.Decode.Decoder FeedbackCommentDTO
feedbackCommentDTODecoder =
    Json.Decode.succeed FeedbackCommentDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "parentId" Json.Decode.int Nothing
        |> maybeDecode "body" Json.Decode.string Nothing
        |> maybeDecode "createdAt" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updatedAt" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "author" feedbackCommentAuthorDTODecoder Nothing
        |> maybeDecodeNullableLazy FeedbackCommentDTOChildren "children" (Json.Decode.list (Json.Decode.lazy (\_ -> feedbackCommentDTODecoder))) Nothing


feedbackDTODecoder : Json.Decode.Decoder FeedbackDTO
feedbackDTODecoder =
    Json.Decode.succeed FeedbackDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "createdAt" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "state" feedbackStateTypeDecoder Nothing
        |> maybeDecode "author" feedbackAuthorDTODecoder Nothing
        |> maybeDecode "pro" Json.Decode.string Nothing
        |> maybeDecode "contra" Json.Decode.string Nothing
        |> decode "comments" (Json.Decode.list feedbackCommentDTODecoder) 
        |> maybeDecode "shop" feedbackShopDTODecoder Nothing
        |> maybeDecode "resolved" Json.Decode.bool Nothing
        |> maybeDecode "verified" Json.Decode.bool Nothing
        |> maybeDecode "recommend" Json.Decode.bool Nothing
        |> maybeDecode "grades" feedbackGradesDTODecoder Nothing
        |> maybeDecode "order" feedbackOrderDTODecoder Nothing


feedbackDeliveryTypeDecoder : Json.Decode.Decoder FeedbackDeliveryType
feedbackDeliveryTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DELIVERY" ->
                        Json.Decode.succeed FeedbackDeliveryTypeDELIVERY

                    "PICKUP" ->
                        Json.Decode.succeed FeedbackDeliveryTypePICKUP

                    "INSTORE" ->
                        Json.Decode.succeed FeedbackDeliveryTypeINSTORE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedbackFactorDTODecoder : Json.Decode.Decoder FeedbackFactorDTO
feedbackFactorDTODecoder =
    Json.Decode.succeed FeedbackFactorDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "value" Json.Decode.int Nothing


feedbackGradesDTODecoder : Json.Decode.Decoder FeedbackGradesDTO
feedbackGradesDTODecoder =
    Json.Decode.succeed FeedbackGradesDTO
        |> maybeDecode "average" Json.Decode.float Nothing
        |> maybeDecode "agreeCount" Json.Decode.int Nothing
        |> maybeDecode "rejectCount" Json.Decode.int Nothing
        |> decode "factors" (Json.Decode.list feedbackFactorDTODecoder) 


feedbackListDTODecoder : Json.Decode.Decoder FeedbackListDTO
feedbackListDTODecoder =
    Json.Decode.succeed FeedbackListDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "feedbackList" (Json.Decode.list feedbackDTODecoder) 


feedbackOrderDTODecoder : Json.Decode.Decoder FeedbackOrderDTO
feedbackOrderDTODecoder =
    Json.Decode.succeed FeedbackOrderDTO
        |> maybeDecode "shopOrderId" Json.Decode.string Nothing
        |> maybeDecode "delivery" feedbackDeliveryTypeDecoder Nothing


feedbackReactionStatusTypeDecoder : Json.Decode.Decoder FeedbackReactionStatusType
feedbackReactionStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALL" ->
                        Json.Decode.succeed FeedbackReactionStatusTypeALL

                    "NEED_REACTION" ->
                        Json.Decode.succeed FeedbackReactionStatusTypeNEEDREACTION

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


feedbackShopDTODecoder : Json.Decode.Decoder FeedbackShopDTO
feedbackShopDTODecoder =
    Json.Decode.succeed FeedbackShopDTO
        |> maybeDecode "name" Json.Decode.string Nothing


feedbackStateTypeDecoder : Json.Decode.Decoder FeedbackStateType
feedbackStateTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LAST" ->
                        Json.Decode.succeed FeedbackStateTypeLAST

                    "PREVIOUS" ->
                        Json.Decode.succeed FeedbackStateTypePREVIOUS

                    "DELETED" ->
                        Json.Decode.succeed FeedbackStateTypeDELETED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


fieldStateTypeDecoder : Json.Decode.Decoder FieldStateType
fieldStateTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SPECIFIED" ->
                        Json.Decode.succeed FieldStateTypeSPECIFIED

                    "EMPTY" ->
                        Json.Decode.succeed FieldStateTypeEMPTY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


flippingPagerDTODecoder : Json.Decode.Decoder FlippingPagerDTO
flippingPagerDTODecoder =
    Json.Decode.succeed FlippingPagerDTO
        |> maybeDecode "total" Json.Decode.int Nothing
        |> maybeDecode "from" Json.Decode.int Nothing
        |> maybeDecode "to" Json.Decode.int Nothing
        |> maybeDecode "currentPage" Json.Decode.int Nothing
        |> maybeDecode "pagesCount" Json.Decode.int Nothing
        |> maybeDecode "pageSize" Json.Decode.int Nothing


forwardScrollingPagerDTODecoder : Json.Decode.Decoder ForwardScrollingPagerDTO
forwardScrollingPagerDTODecoder =
    Json.Decode.succeed ForwardScrollingPagerDTO
        |> maybeDecode "nextPageToken" Json.Decode.string Nothing


fulfillmentWarehouseDTODecoder : Json.Decode.Decoder FulfillmentWarehouseDTO
fulfillmentWarehouseDTODecoder =
    Json.Decode.succeed FulfillmentWarehouseDTO
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> maybeDecode "address" warehouseAddressDTODecoder Nothing


fulfillmentWarehousesDTODecoder : Json.Decode.Decoder FulfillmentWarehousesDTO
fulfillmentWarehousesDTODecoder =
    Json.Decode.succeed FulfillmentWarehousesDTO
        |> decode "warehouses" (Json.Decode.list fulfillmentWarehouseDTODecoder) 


fullOutletDTODecoder : Json.Decode.Decoder FullOutletDTO
fullOutletDTODecoder =
    Json.Decode.succeed FullOutletDTO
        |> decode "name" Json.Decode.string 
        |> decode "type" outletTypeDecoder 
        |> maybeDecode "coords" Json.Decode.string Nothing
        |> maybeDecode "isMain" Json.Decode.bool Nothing
        |> maybeDecode "shopOutletCode" Json.Decode.string Nothing
        |> maybeDecode "visibility" outletVisibilityTypeDecoder Nothing
        |> decode "address" outletAddressDTODecoder 
        |> decode "phones" (Json.Decode.list Json.Decode.string) 
        |> decode "workingSchedule" outletWorkingScheduleDTODecoder 
        |> maybeDecodeNullable "deliveryRules" (Json.Decode.list outletDeliveryRuleDTODecoder) Nothing
        |> maybeDecode "storagePeriod" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "status" outletStatusTypeDecoder Nothing
        |> maybeDecode "region" regionDTODecoder Nothing
        |> maybeDecode "shopOutletId" Json.Decode.string Nothing
        |> maybeDecode "workingTime" Json.Decode.string Nothing
        |> maybeDecode "moderationReason" Json.Decode.string Nothing


fullOutletLicenseDTODecoder : Json.Decode.Decoder FullOutletLicenseDTO
fullOutletLicenseDTODecoder =
    Json.Decode.succeed FullOutletLicenseDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "outletId" Json.Decode.int Nothing
        |> maybeDecode "licenseType" licenseTypeDecoder Nothing
        |> maybeDecode "number" Json.Decode.string Nothing
        |> maybeDecode "dateOfIssue" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateOfExpiry" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "checkStatus" licenseCheckStatusTypeDecoder Nothing
        |> maybeDecode "checkComment" Json.Decode.string Nothing


generateBoostConsolidatedRequestDecoder : Json.Decode.Decoder GenerateBoostConsolidatedRequest
generateBoostConsolidatedRequestDecoder =
    Json.Decode.succeed GenerateBoostConsolidatedRequest
        |> decode "businessId" Json.Decode.int 
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 


generateCompetitorsPositionReportRequestDecoder : Json.Decode.Decoder GenerateCompetitorsPositionReportRequest
generateCompetitorsPositionReportRequestDecoder =
    Json.Decode.succeed GenerateCompetitorsPositionReportRequest
        |> decode "businessId" Json.Decode.int 
        |> decode "categoryId" Json.Decode.int 
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 


generateGoodsFeedbackRequestDecoder : Json.Decode.Decoder GenerateGoodsFeedbackRequest
generateGoodsFeedbackRequestDecoder =
    Json.Decode.succeed GenerateGoodsFeedbackRequest
        |> decode "businessId" Json.Decode.int 


generateGoodsMovementReportRequestDecoder : Json.Decode.Decoder GenerateGoodsMovementReportRequest
generateGoodsMovementReportRequestDecoder =
    Json.Decode.succeed GenerateGoodsMovementReportRequest
        |> decode "campaignId" Json.Decode.int 
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 
        |> maybeDecode "shopSku" Json.Decode.string Nothing


generateGoodsRealizationReportRequestDecoder : Json.Decode.Decoder GenerateGoodsRealizationReportRequest
generateGoodsRealizationReportRequestDecoder =
    Json.Decode.succeed GenerateGoodsRealizationReportRequest
        |> decode "campaignId" Json.Decode.int 
        |> decode "year" Json.Decode.int 
        |> decode "month" Json.Decode.int 


generateGoodsTurnoverRequestDecoder : Json.Decode.Decoder GenerateGoodsTurnoverRequest
generateGoodsTurnoverRequestDecoder =
    Json.Decode.succeed GenerateGoodsTurnoverRequest
        |> decode "campaignId" Json.Decode.int 
        |> maybeDecode "date" Api.Time.dateDecoder Nothing


generateMassOrderLabelsRequestDecoder : Json.Decode.Decoder GenerateMassOrderLabelsRequest
generateMassOrderLabelsRequestDecoder =
    Json.Decode.succeed GenerateMassOrderLabelsRequest
        |> decode "businessId" Json.Decode.int 
        |> decode "orderIds" (Json.Decode.list Json.Decode.int) 


generatePricesReportRequestDecoder : Json.Decode.Decoder GeneratePricesReportRequest
generatePricesReportRequestDecoder =
    Json.Decode.succeed GeneratePricesReportRequest
        |> maybeDecode "businessId" Json.Decode.int Nothing
        |> maybeDecode "campaignId" Json.Decode.int Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "creationDateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "creationDateTo" Api.Time.dateDecoder Nothing


generateReportDTODecoder : Json.Decode.Decoder GenerateReportDTO
generateReportDTODecoder =
    Json.Decode.succeed GenerateReportDTO
        |> decode "reportId" Json.Decode.string 
        |> decode "estimatedGenerationTime" Json.Decode.int 


generateReportResponseDecoder : Json.Decode.Decoder GenerateReportResponse
generateReportResponseDecoder =
    Json.Decode.succeed GenerateReportResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" generateReportDTODecoder Nothing


generateShelfsStatisticsRequestDecoder : Json.Decode.Decoder GenerateShelfsStatisticsRequest
generateShelfsStatisticsRequestDecoder =
    Json.Decode.succeed GenerateShelfsStatisticsRequest
        |> decode "businessId" Json.Decode.int 
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 
        |> decode "attributionType" shelfsStatisticsAttributionTypeDecoder 


generateShipmentListDocumentReportRequestDecoder : Json.Decode.Decoder GenerateShipmentListDocumentReportRequest
generateShipmentListDocumentReportRequestDecoder =
    Json.Decode.succeed GenerateShipmentListDocumentReportRequest
        |> decode "campaignId" Json.Decode.int 
        |> maybeDecode "shipmentId" Json.Decode.int Nothing
        |> maybeDecodeNullable "orderIds" (Json.Decode.list Json.Decode.int) Nothing


generateShowsSalesReportRequestDecoder : Json.Decode.Decoder GenerateShowsSalesReportRequest
generateShowsSalesReportRequestDecoder =
    Json.Decode.succeed GenerateShowsSalesReportRequest
        |> maybeDecode "businessId" Json.Decode.int Nothing
        |> maybeDecode "campaignId" Json.Decode.int Nothing
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 
        |> decode "grouping" showsSalesGroupingTypeDecoder 


generateStocksOnWarehousesReportRequestDecoder : Json.Decode.Decoder GenerateStocksOnWarehousesReportRequest
generateStocksOnWarehousesReportRequestDecoder =
    Json.Decode.succeed GenerateStocksOnWarehousesReportRequest
        |> decode "campaignId" Json.Decode.int 
        |> maybeDecodeNullable "warehouseIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "reportDate" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "hasStocks" Json.Decode.bool Nothing


generateUnitedMarketplaceServicesReportRequestDecoder : Json.Decode.Decoder GenerateUnitedMarketplaceServicesReportRequest
generateUnitedMarketplaceServicesReportRequestDecoder =
    Json.Decode.succeed GenerateUnitedMarketplaceServicesReportRequest
        |> decode "businessId" Json.Decode.int 
        |> maybeDecode "dateTimeFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateTimeTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "dateTo" Api.Time.dateDecoder Nothing
        |> maybeDecode "yearFrom" Json.Decode.int Nothing
        |> maybeDecode "monthFrom" Json.Decode.int Nothing
        |> maybeDecode "yearTo" Json.Decode.int Nothing
        |> maybeDecode "monthTo" Json.Decode.int Nothing
        |> maybeDecodeNullable "placementPrograms" (Json.Decode.list placementTypeDecoder) Nothing
        |> maybeDecodeNullable "inns" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "campaignIds" (Json.Decode.list Json.Decode.int) Nothing


generateUnitedNettingReportRequestDecoder : Json.Decode.Decoder GenerateUnitedNettingReportRequest
generateUnitedNettingReportRequestDecoder =
    Json.Decode.succeed GenerateUnitedNettingReportRequest
        |> decode "businessId" Json.Decode.int 
        |> maybeDecode "dateTimeFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateTimeTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "dateTo" Api.Time.dateDecoder Nothing
        |> maybeDecode "bankOrderId" Json.Decode.int Nothing
        |> maybeDecode "bankOrderDateTime" Api.Time.dateTimeDecoder Nothing
        |> maybeDecodeNullable "placementPrograms" (Json.Decode.list placementTypeDecoder) Nothing
        |> maybeDecodeNullable "inns" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "campaignIds" (Json.Decode.list Json.Decode.int) Nothing


generateUnitedOrdersRequestDecoder : Json.Decode.Decoder GenerateUnitedOrdersRequest
generateUnitedOrdersRequestDecoder =
    Json.Decode.succeed GenerateUnitedOrdersRequest
        |> decode "businessId" Json.Decode.int 
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 
        |> maybeDecodeNullable "campaignIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "promoId" Json.Decode.string Nothing


getAllOffersResponseDecoder : Json.Decode.Decoder GetAllOffersResponse
getAllOffersResponseDecoder =
    Json.Decode.succeed GetAllOffersResponse
        |> decode "offers" (Json.Decode.list offerDTODecoder) 


getBidsInfoRequestDecoder : Json.Decode.Decoder GetBidsInfoRequest
getBidsInfoRequestDecoder =
    Json.Decode.succeed GetBidsInfoRequest
        |> maybeDecodeNullable "skus" (Json.Decode.list Json.Decode.string) Nothing


getBidsInfoResponseDecoder : Json.Decode.Decoder GetBidsInfoResponse
getBidsInfoResponseDecoder =
    Json.Decode.succeed GetBidsInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getBidsInfoResponseDTODecoder Nothing


getBidsInfoResponseDTODecoder : Json.Decode.Decoder GetBidsInfoResponseDTO
getBidsInfoResponseDTODecoder =
    Json.Decode.succeed GetBidsInfoResponseDTO
        |> decode "bids" (Json.Decode.list skuBidItemDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


getBidsRecommendationsRequestDecoder : Json.Decode.Decoder GetBidsRecommendationsRequest
getBidsRecommendationsRequestDecoder =
    Json.Decode.succeed GetBidsRecommendationsRequest
        |> decode "skus" (Json.Decode.list Json.Decode.string) 


getBidsRecommendationsResponseDecoder : Json.Decode.Decoder GetBidsRecommendationsResponse
getBidsRecommendationsResponseDecoder =
    Json.Decode.succeed GetBidsRecommendationsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getBidsRecommendationsResponseDTODecoder Nothing


getBidsRecommendationsResponseDTODecoder : Json.Decode.Decoder GetBidsRecommendationsResponseDTO
getBidsRecommendationsResponseDTODecoder =
    Json.Decode.succeed GetBidsRecommendationsResponseDTO
        |> decode "recommendations" (Json.Decode.list skuBidRecommendationItemDTODecoder) 


getBusinessBuyerInfoResponseDecoder : Json.Decode.Decoder GetBusinessBuyerInfoResponse
getBusinessBuyerInfoResponseDecoder =
    Json.Decode.succeed GetBusinessBuyerInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderBusinessBuyerDTODecoder Nothing


getBusinessDocumentsInfoResponseDecoder : Json.Decode.Decoder GetBusinessDocumentsInfoResponse
getBusinessDocumentsInfoResponseDecoder =
    Json.Decode.succeed GetBusinessDocumentsInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderBusinessDocumentsDTODecoder Nothing


getBusinessSettingsInfoDTODecoder : Json.Decode.Decoder GetBusinessSettingsInfoDTO
getBusinessSettingsInfoDTODecoder =
    Json.Decode.succeed GetBusinessSettingsInfoDTO
        |> maybeDecode "info" businessDTODecoder Nothing
        |> maybeDecode "settings" businessSettingsDTODecoder Nothing


getBusinessSettingsResponseDecoder : Json.Decode.Decoder GetBusinessSettingsResponse
getBusinessSettingsResponseDecoder =
    Json.Decode.succeed GetBusinessSettingsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getBusinessSettingsInfoDTODecoder Nothing


getCampaignLoginsResponseDecoder : Json.Decode.Decoder GetCampaignLoginsResponse
getCampaignLoginsResponseDecoder =
    Json.Decode.succeed GetCampaignLoginsResponse
        |> decode "logins" (Json.Decode.list Json.Decode.string) 


getCampaignOfferDTODecoder : Json.Decode.Decoder GetCampaignOfferDTO
getCampaignOfferDTODecoder =
    Json.Decode.succeed GetCampaignOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "quantum" quantumDTODecoder Nothing
        |> maybeDecode "available" Json.Decode.bool Nothing
        |> maybeDecode "basicPrice" getPriceWithDiscountDTODecoder Nothing
        |> maybeDecode "campaignPrice" getPriceWithVatDTODecoder Nothing
        |> maybeDecode "status" offerCampaignStatusTypeDecoder Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list offerErrorDTODecoder) Nothing
        |> maybeDecodeNullable "warnings" (Json.Decode.list offerErrorDTODecoder) Nothing


getCampaignOffersRequestDecoder : Json.Decode.Decoder GetCampaignOffersRequest
getCampaignOffersRequestDecoder =
    Json.Decode.succeed GetCampaignOffersRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "statuses" (Json.Decode.list offerCampaignStatusTypeDecoder) Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "vendorNames" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing


getCampaignOffersResponseDecoder : Json.Decode.Decoder GetCampaignOffersResponse
getCampaignOffersResponseDecoder =
    Json.Decode.succeed GetCampaignOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getCampaignOffersResultDTODecoder Nothing


getCampaignOffersResultDTODecoder : Json.Decode.Decoder GetCampaignOffersResultDTO
getCampaignOffersResultDTODecoder =
    Json.Decode.succeed GetCampaignOffersResultDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "offers" (Json.Decode.list getCampaignOfferDTODecoder) 


getCampaignRegionResponseDecoder : Json.Decode.Decoder GetCampaignRegionResponse
getCampaignRegionResponseDecoder =
    Json.Decode.succeed GetCampaignRegionResponse
        |> maybeDecode "region" regionDTODecoder Nothing


getCampaignResponseDecoder : Json.Decode.Decoder GetCampaignResponse
getCampaignResponseDecoder =
    Json.Decode.succeed GetCampaignResponse
        |> maybeDecode "campaign" campaignDTODecoder Nothing


getCampaignSettingsResponseDecoder : Json.Decode.Decoder GetCampaignSettingsResponse
getCampaignSettingsResponseDecoder =
    Json.Decode.succeed GetCampaignSettingsResponse
        |> maybeDecode "settings" campaignSettingsDTODecoder Nothing


getCampaignsResponseDecoder : Json.Decode.Decoder GetCampaignsResponse
getCampaignsResponseDecoder =
    Json.Decode.succeed GetCampaignsResponse
        |> decode "campaigns" (Json.Decode.list campaignDTODecoder) 
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing


getCategoriesMaxSaleQuantumDTODecoder : Json.Decode.Decoder GetCategoriesMaxSaleQuantumDTO
getCategoriesMaxSaleQuantumDTODecoder =
    Json.Decode.succeed GetCategoriesMaxSaleQuantumDTO
        |> decode "results" (Json.Decode.list maxSaleQuantumDTODecoder) 
        |> maybeDecodeNullable "errors" (Json.Decode.list categoryErrorDTODecoder) Nothing


getCategoriesMaxSaleQuantumRequestDecoder : Json.Decode.Decoder GetCategoriesMaxSaleQuantumRequest
getCategoriesMaxSaleQuantumRequestDecoder =
    Json.Decode.succeed GetCategoriesMaxSaleQuantumRequest
        |> decode "marketCategoryIds" (Json.Decode.list Json.Decode.int) 


getCategoriesMaxSaleQuantumResponseDecoder : Json.Decode.Decoder GetCategoriesMaxSaleQuantumResponse
getCategoriesMaxSaleQuantumResponseDecoder =
    Json.Decode.succeed GetCategoriesMaxSaleQuantumResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> decode "results" (Json.Decode.list maxSaleQuantumDTODecoder) 
        |> maybeDecodeNullable "errors" (Json.Decode.list categoryErrorDTODecoder) Nothing


getCategoriesRequestDecoder : Json.Decode.Decoder GetCategoriesRequest
getCategoriesRequestDecoder =
    Json.Decode.succeed GetCategoriesRequest
        |> maybeDecode "language" languageTypeDecoder Nothing


getCategoriesResponseDecoder : Json.Decode.Decoder GetCategoriesResponse
getCategoriesResponseDecoder =
    Json.Decode.succeed GetCategoriesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" categoryDTODecoder Nothing


getCategoryContentParametersResponseDecoder : Json.Decode.Decoder GetCategoryContentParametersResponse
getCategoryContentParametersResponseDecoder =
    Json.Decode.succeed GetCategoryContentParametersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" categoryContentParametersDTODecoder Nothing


getChatHistoryRequestDecoder : Json.Decode.Decoder GetChatHistoryRequest
getChatHistoryRequestDecoder =
    Json.Decode.succeed GetChatHistoryRequest
        |> maybeDecode "messageIdFrom" Json.Decode.int Nothing


getChatHistoryResponseDecoder : Json.Decode.Decoder GetChatHistoryResponse
getChatHistoryResponseDecoder =
    Json.Decode.succeed GetChatHistoryResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" chatMessagesResultDTODecoder Nothing


getChatInfoDTODecoder : Json.Decode.Decoder GetChatInfoDTO
getChatInfoDTODecoder =
    Json.Decode.succeed GetChatInfoDTO
        |> decode "chatId" Json.Decode.int 
        |> decode "orderId" Json.Decode.int 
        |> decode "type" chatTypeDecoder 
        |> decode "status" chatStatusTypeDecoder 
        |> decode "createdAt" Api.Time.dateTimeDecoder 
        |> decode "updatedAt" Api.Time.dateTimeDecoder 


getChatsInfoDTODecoder : Json.Decode.Decoder GetChatsInfoDTO
getChatsInfoDTODecoder =
    Json.Decode.succeed GetChatsInfoDTO
        |> decode "chats" (Json.Decode.list getChatInfoDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


getChatsRequestDecoder : Json.Decode.Decoder GetChatsRequest
getChatsRequestDecoder =
    Json.Decode.succeed GetChatsRequest
        |> maybeDecodeNullable "orderIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "types" (Json.Decode.list chatTypeDecoder) Nothing
        |> maybeDecodeNullable "statuses" (Json.Decode.list chatStatusTypeDecoder) Nothing


getChatsResponseDecoder : Json.Decode.Decoder GetChatsResponse
getChatsResponseDecoder =
    Json.Decode.succeed GetChatsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getChatsInfoDTODecoder Nothing


getDeliveryServicesResponseDecoder : Json.Decode.Decoder GetDeliveryServicesResponse
getDeliveryServicesResponseDecoder =
    Json.Decode.succeed GetDeliveryServicesResponse
        |> maybeDecode "result" deliveryServicesDTODecoder Nothing


getFeedIndexLogsResponseDecoder : Json.Decode.Decoder GetFeedIndexLogsResponse
getFeedIndexLogsResponseDecoder =
    Json.Decode.succeed GetFeedIndexLogsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" feedIndexLogsResultDTODecoder Nothing


getFeedResponseDecoder : Json.Decode.Decoder GetFeedResponse
getFeedResponseDecoder =
    Json.Decode.succeed GetFeedResponse
        |> maybeDecode "feed" feedDTODecoder Nothing


getFeedbackListResponseDecoder : Json.Decode.Decoder GetFeedbackListResponse
getFeedbackListResponseDecoder =
    Json.Decode.succeed GetFeedbackListResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" feedbackListDTODecoder Nothing


getFeedsResponseDecoder : Json.Decode.Decoder GetFeedsResponse
getFeedsResponseDecoder =
    Json.Decode.succeed GetFeedsResponse
        |> decode "feeds" (Json.Decode.list feedDTODecoder) 


getFulfillmentWarehousesResponseDecoder : Json.Decode.Decoder GetFulfillmentWarehousesResponse
getFulfillmentWarehousesResponseDecoder =
    Json.Decode.succeed GetFulfillmentWarehousesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" fulfillmentWarehousesDTODecoder Nothing


getGoodsFeedbackCommentsRequestDecoder : Json.Decode.Decoder GetGoodsFeedbackCommentsRequest
getGoodsFeedbackCommentsRequestDecoder =
    Json.Decode.succeed GetGoodsFeedbackCommentsRequest
        |> decode "feedbackId" Json.Decode.int 


getGoodsFeedbackCommentsResponseDecoder : Json.Decode.Decoder GetGoodsFeedbackCommentsResponse
getGoodsFeedbackCommentsResponseDecoder =
    Json.Decode.succeed GetGoodsFeedbackCommentsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" goodsFeedbackCommentListDTODecoder Nothing


getGoodsFeedbackRequestDecoder : Json.Decode.Decoder GetGoodsFeedbackRequest
getGoodsFeedbackRequestDecoder =
    Json.Decode.succeed GetGoodsFeedbackRequest
        |> maybeDecode "dateTimeFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateTimeTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "reactionStatus" feedbackReactionStatusTypeDecoder Nothing
        |> maybeDecodeNullable "ratingValues" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "modelIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "paid" Json.Decode.bool Nothing


getGoodsFeedbackResponseDecoder : Json.Decode.Decoder GetGoodsFeedbackResponse
getGoodsFeedbackResponseDecoder =
    Json.Decode.succeed GetGoodsFeedbackResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" goodsFeedbackListDTODecoder Nothing


getGoodsStatsRequestDecoder : Json.Decode.Decoder GetGoodsStatsRequest
getGoodsStatsRequestDecoder =
    Json.Decode.succeed GetGoodsStatsRequest
        |> decode "shopSkus" (Json.Decode.list Json.Decode.string) 


getGoodsStatsResponseDecoder : Json.Decode.Decoder GetGoodsStatsResponse
getGoodsStatsResponseDecoder =
    Json.Decode.succeed GetGoodsStatsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" goodsStatsDTODecoder Nothing


getHiddenOffersResponseDecoder : Json.Decode.Decoder GetHiddenOffersResponse
getHiddenOffersResponseDecoder =
    Json.Decode.succeed GetHiddenOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getHiddenOffersResultDTODecoder Nothing


getHiddenOffersResultDTODecoder : Json.Decode.Decoder GetHiddenOffersResultDTO
getHiddenOffersResultDTODecoder =
    Json.Decode.succeed GetHiddenOffersResultDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "hiddenOffers" (Json.Decode.list hiddenOfferDTODecoder) 


getMappingDTODecoder : Json.Decode.Decoder GetMappingDTO
getMappingDTODecoder =
    Json.Decode.succeed GetMappingDTO
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "marketSkuName" Json.Decode.string Nothing
        |> maybeDecode "marketModelId" Json.Decode.int Nothing
        |> maybeDecode "marketModelName" Json.Decode.string Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "marketCategoryName" Json.Decode.string Nothing


getModelsOffersResponseDecoder : Json.Decode.Decoder GetModelsOffersResponse
getModelsOffersResponseDecoder =
    Json.Decode.succeed GetModelsOffersResponse
        |> decode "models" (Json.Decode.list enrichedModelDTODecoder) 
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "regionId" Json.Decode.int Nothing


getModelsRequestDecoder : Json.Decode.Decoder GetModelsRequest
getModelsRequestDecoder =
    Json.Decode.succeed GetModelsRequest
        |> decode "models" (Json.Decode.list Json.Decode.int) 


getModelsResponseDecoder : Json.Decode.Decoder GetModelsResponse
getModelsResponseDecoder =
    Json.Decode.succeed GetModelsResponse
        |> decode "models" (Json.Decode.list modelDTODecoder) 
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "regionId" Json.Decode.int Nothing


getOfferCardsContentStatusRequestDecoder : Json.Decode.Decoder GetOfferCardsContentStatusRequest
getOfferCardsContentStatusRequestDecoder =
    Json.Decode.succeed GetOfferCardsContentStatusRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "cardStatuses" (Json.Decode.list offerCardStatusTypeDecoder) Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing


getOfferCardsContentStatusResponseDecoder : Json.Decode.Decoder GetOfferCardsContentStatusResponse
getOfferCardsContentStatusResponseDecoder =
    Json.Decode.succeed GetOfferCardsContentStatusResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerCardsContentStatusDTODecoder Nothing


getOfferDTODecoder : Json.Decode.Decoder GetOfferDTO
getOfferDTODecoder =
    Json.Decode.succeed GetOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "videos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "manuals" (Json.Decode.list offerManualDTODecoder) Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "customsCommodityCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "certificates" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecode "condition" offerConditionDTODecoder Nothing
        |> maybeDecode "type" offerTypeDecoder Nothing
        |> maybeDecode "downloadable" Json.Decode.bool Nothing
        |> maybeDecode "adult" Json.Decode.bool Nothing
        |> maybeDecode "age" ageDTODecoder Nothing
        |> maybeDecodeNullable "params" (Json.Decode.list offerParamDTODecoder) Nothing
        |> maybeDecode "basicPrice" getPriceWithDiscountDTODecoder Nothing
        |> maybeDecode "purchasePrice" getPriceDTODecoder Nothing
        |> maybeDecode "additionalExpenses" getPriceDTODecoder Nothing
        |> maybeDecode "cofinancePrice" getPriceDTODecoder Nothing
        |> maybeDecode "cardStatus" offerCardStatusTypeDecoder Nothing
        |> maybeDecodeNullable "campaigns" (Json.Decode.list offerCampaignStatusDTODecoder) Nothing
        |> maybeDecodeNullable "sellingPrograms" (Json.Decode.list offerSellingProgramDTODecoder) Nothing
        |> maybeDecode "archived" Json.Decode.bool Nothing


getOfferMappingDTODecoder : Json.Decode.Decoder GetOfferMappingDTO
getOfferMappingDTODecoder =
    Json.Decode.succeed GetOfferMappingDTO
        |> maybeDecode "offer" getOfferDTODecoder Nothing
        |> maybeDecode "mapping" getMappingDTODecoder Nothing


getOfferMappingEntriesResponseDecoder : Json.Decode.Decoder GetOfferMappingEntriesResponse
getOfferMappingEntriesResponseDecoder =
    Json.Decode.succeed GetOfferMappingEntriesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerMappingEntriesDTODecoder Nothing


getOfferMappingsRequestDecoder : Json.Decode.Decoder GetOfferMappingsRequest
getOfferMappingsRequestDecoder =
    Json.Decode.succeed GetOfferMappingsRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "cardStatuses" (Json.Decode.list offerCardStatusTypeDecoder) Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "vendorNames" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "archived" Json.Decode.bool Nothing


getOfferMappingsResponseDecoder : Json.Decode.Decoder GetOfferMappingsResponse
getOfferMappingsResponseDecoder =
    Json.Decode.succeed GetOfferMappingsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getOfferMappingsResultDTODecoder Nothing


getOfferMappingsResultDTODecoder : Json.Decode.Decoder GetOfferMappingsResultDTO
getOfferMappingsResultDTODecoder =
    Json.Decode.succeed GetOfferMappingsResultDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "offerMappings" (Json.Decode.list getOfferMappingDTODecoder) 


getOfferRecommendationsRequestDecoder : Json.Decode.Decoder GetOfferRecommendationsRequest
getOfferRecommendationsRequestDecoder =
    Json.Decode.succeed GetOfferRecommendationsRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "cofinancePriceFilter" fieldStateTypeDecoder Nothing
        |> maybeDecode "recommendedCofinancePriceFilter" fieldStateTypeDecoder Nothing
        |> maybeDecode "competitivenessFilter" priceCompetitivenessTypeDecoder Nothing


getOfferRecommendationsResponseDecoder : Json.Decode.Decoder GetOfferRecommendationsResponse
getOfferRecommendationsResponseDecoder =
    Json.Decode.succeed GetOfferRecommendationsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerRecommendationsResultDTODecoder Nothing


getOffersResponseDecoder : Json.Decode.Decoder GetOffersResponse
getOffersResponseDecoder =
    Json.Decode.succeed GetOffersResponse
        |> decode "offers" (Json.Decode.list offerDTODecoder) 
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing


getOrderBuyerInfoResponseDecoder : Json.Decode.Decoder GetOrderBuyerInfoResponse
getOrderBuyerInfoResponseDecoder =
    Json.Decode.succeed GetOrderBuyerInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderBuyerInfoDTODecoder Nothing


getOrderLabelsDataResponseDecoder : Json.Decode.Decoder GetOrderLabelsDataResponse
getOrderLabelsDataResponseDecoder =
    Json.Decode.succeed GetOrderLabelsDataResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderLabelDTODecoder Nothing


getOrderResponseDecoder : Json.Decode.Decoder GetOrderResponse
getOrderResponseDecoder =
    Json.Decode.succeed GetOrderResponse
        |> maybeDecode "order" orderDTODecoder Nothing


getOrdersResponseDecoder : Json.Decode.Decoder GetOrdersResponse
getOrdersResponseDecoder =
    Json.Decode.succeed GetOrdersResponse
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing
        |> decode "orders" (Json.Decode.list orderDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


getOrdersStatsRequestDecoder : Json.Decode.Decoder GetOrdersStatsRequest
getOrdersStatsRequestDecoder =
    Json.Decode.succeed GetOrdersStatsRequest
        |> maybeDecode "dateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "dateTo" Api.Time.dateDecoder Nothing
        |> maybeDecode "updateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "updateTo" Api.Time.dateDecoder Nothing
        |> maybeDecodeNullable "orders" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "statuses" (Json.Decode.list orderStatsStatusTypeDecoder) Nothing
        |> maybeDecode "hasCis" Json.Decode.bool Nothing


getOrdersStatsResponseDecoder : Json.Decode.Decoder GetOrdersStatsResponse
getOrdersStatsResponseDecoder =
    Json.Decode.succeed GetOrdersStatsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" ordersStatsDTODecoder Nothing


getOutletLicensesResponseDecoder : Json.Decode.Decoder GetOutletLicensesResponse
getOutletLicensesResponseDecoder =
    Json.Decode.succeed GetOutletLicensesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" outletLicensesResponseDTODecoder Nothing


getOutletResponseDecoder : Json.Decode.Decoder GetOutletResponse
getOutletResponseDecoder =
    Json.Decode.succeed GetOutletResponse
        |> maybeDecode "outlet" fullOutletDTODecoder Nothing


getOutletsResponseDecoder : Json.Decode.Decoder GetOutletsResponse
getOutletsResponseDecoder =
    Json.Decode.succeed GetOutletsResponse
        |> decode "outlets" (Json.Decode.list fullOutletDTODecoder) 
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing


getPriceDTODecoder : Json.Decode.Decoder GetPriceDTO
getPriceDTODecoder =
    Json.Decode.succeed GetPriceDTO
        |> decode "value" Json.Decode.float 
        |> decode "currencyId" currencyTypeDecoder 
        |> decode "updatedAt" Api.Time.dateTimeDecoder 


getPriceWithDiscountDTODecoder : Json.Decode.Decoder GetPriceWithDiscountDTO
getPriceWithDiscountDTODecoder =
    Json.Decode.succeed GetPriceWithDiscountDTO
        |> decode "value" Json.Decode.float 
        |> decode "currencyId" currencyTypeDecoder 
        |> maybeDecode "discountBase" Json.Decode.float Nothing
        |> decode "updatedAt" Api.Time.dateTimeDecoder 


getPriceWithVatDTODecoder : Json.Decode.Decoder GetPriceWithVatDTO
getPriceWithVatDTODecoder =
    Json.Decode.succeed GetPriceWithVatDTO
        |> maybeDecode "value" Json.Decode.float Nothing
        |> maybeDecode "discountBase" Json.Decode.float Nothing
        |> maybeDecode "currencyId" currencyTypeDecoder Nothing
        |> maybeDecode "vat" Json.Decode.int Nothing
        |> decode "updatedAt" Api.Time.dateTimeDecoder 


getPricesByOfferIdsRequestDecoder : Json.Decode.Decoder GetPricesByOfferIdsRequest
getPricesByOfferIdsRequestDecoder =
    Json.Decode.succeed GetPricesByOfferIdsRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing


getPricesByOfferIdsResponseDecoder : Json.Decode.Decoder GetPricesByOfferIdsResponse
getPricesByOfferIdsResponseDecoder =
    Json.Decode.succeed GetPricesByOfferIdsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerPriceByOfferIdsListResponseDTODecoder Nothing


getPricesResponseDecoder : Json.Decode.Decoder GetPricesResponse
getPricesResponseDecoder =
    Json.Decode.succeed GetPricesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerPriceListResponseDTODecoder Nothing


getPromoAssortmentInfoDTODecoder : Json.Decode.Decoder GetPromoAssortmentInfoDTO
getPromoAssortmentInfoDTODecoder =
    Json.Decode.succeed GetPromoAssortmentInfoDTO
        |> decode "activeOffers" Json.Decode.int 
        |> maybeDecode "potentialOffers" Json.Decode.int Nothing
        |> maybeDecode "processing" Json.Decode.bool Nothing


getPromoBestsellerInfoDTODecoder : Json.Decode.Decoder GetPromoBestsellerInfoDTO
getPromoBestsellerInfoDTODecoder =
    Json.Decode.succeed GetPromoBestsellerInfoDTO
        |> decode "bestseller" Json.Decode.bool 
        |> maybeDecode "entryDeadline" Api.Time.dateTimeDecoder Nothing


getPromoConstraintsDTODecoder : Json.Decode.Decoder GetPromoConstraintsDTO
getPromoConstraintsDTODecoder =
    Json.Decode.succeed GetPromoConstraintsDTO
        |> maybeDecodeNullable "warehouseIds" (Json.Decode.list Json.Decode.int) Nothing


getPromoDTODecoder : Json.Decode.Decoder GetPromoDTO
getPromoDTODecoder =
    Json.Decode.succeed GetPromoDTO
        |> decode "id" Json.Decode.string 
        |> decode "name" Json.Decode.string 
        |> decode "period" promoPeriodDTODecoder 
        |> decode "participating" Json.Decode.bool 
        |> decode "assortmentInfo" getPromoAssortmentInfoDTODecoder 
        |> decode "mechanicsInfo" getPromoMechanicsInfoDTODecoder 
        |> decode "bestsellerInfo" getPromoBestsellerInfoDTODecoder 
        |> maybeDecodeNullable "channels" (Json.Decode.list channelTypeDecoder) Nothing
        |> maybeDecode "constraints" getPromoConstraintsDTODecoder Nothing


getPromoMechanicsInfoDTODecoder : Json.Decode.Decoder GetPromoMechanicsInfoDTO
getPromoMechanicsInfoDTODecoder =
    Json.Decode.succeed GetPromoMechanicsInfoDTO
        |> decode "type" mechanicsTypeDecoder 
        |> maybeDecode "promocodeInfo" getPromoPromocodeInfoDTODecoder Nothing


getPromoOfferDTODecoder : Json.Decode.Decoder GetPromoOfferDTO
getPromoOfferDTODecoder =
    Json.Decode.succeed GetPromoOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "status" promoOfferParticipationStatusTypeDecoder 
        |> decode "params" promoOfferParamsDTODecoder 
        |> maybeDecode "autoParticipatingDetails" promoOfferAutoParticipatingDetailsDTODecoder Nothing


getPromoOffersRequestDecoder : Json.Decode.Decoder GetPromoOffersRequest
getPromoOffersRequestDecoder =
    Json.Decode.succeed GetPromoOffersRequest
        |> decode "promoId" Json.Decode.string 
        |> maybeDecode "statusType" promoOfferParticipationStatusFilterTypeDecoder Nothing


getPromoOffersResponseDecoder : Json.Decode.Decoder GetPromoOffersResponse
getPromoOffersResponseDecoder =
    Json.Decode.succeed GetPromoOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getPromoOffersResultDTODecoder Nothing


getPromoOffersResultDTODecoder : Json.Decode.Decoder GetPromoOffersResultDTO
getPromoOffersResultDTODecoder =
    Json.Decode.succeed GetPromoOffersResultDTO
        |> decode "offers" (Json.Decode.list getPromoOfferDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


getPromoPromocodeInfoDTODecoder : Json.Decode.Decoder GetPromoPromocodeInfoDTO
getPromoPromocodeInfoDTODecoder =
    Json.Decode.succeed GetPromoPromocodeInfoDTO
        |> decode "promocode" Json.Decode.string 
        |> decode "discount" Json.Decode.int 


getPromosRequestDecoder : Json.Decode.Decoder GetPromosRequest
getPromosRequestDecoder =
    Json.Decode.succeed GetPromosRequest
        |> maybeDecode "participation" promoParticipationTypeDecoder Nothing
        |> maybeDecode "mechanics" mechanicsTypeDecoder Nothing


getPromosResponseDecoder : Json.Decode.Decoder GetPromosResponse
getPromosResponseDecoder =
    Json.Decode.succeed GetPromosResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getPromosResultDTODecoder Nothing


getPromosResultDTODecoder : Json.Decode.Decoder GetPromosResultDTO
getPromosResultDTODecoder =
    Json.Decode.succeed GetPromosResultDTO
        |> decode "promos" (Json.Decode.list getPromoDTODecoder) 


getQualityRatingDetailsResponseDecoder : Json.Decode.Decoder GetQualityRatingDetailsResponse
getQualityRatingDetailsResponseDecoder =
    Json.Decode.succeed GetQualityRatingDetailsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" qualityRatingDetailsDTODecoder Nothing


getQualityRatingRequestDecoder : Json.Decode.Decoder GetQualityRatingRequest
getQualityRatingRequestDecoder =
    Json.Decode.succeed GetQualityRatingRequest
        |> maybeDecode "dateFrom" Api.Time.dateDecoder Nothing
        |> maybeDecode "dateTo" Api.Time.dateDecoder Nothing
        |> decode "campaignIds" (Json.Decode.list Json.Decode.int) 


getQualityRatingResponseDecoder : Json.Decode.Decoder GetQualityRatingResponse
getQualityRatingResponseDecoder =
    Json.Decode.succeed GetQualityRatingResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" campaignsQualityRatingDTODecoder Nothing


getQuarantineOffersRequestDecoder : Json.Decode.Decoder GetQuarantineOffersRequest
getQuarantineOffersRequestDecoder =
    Json.Decode.succeed GetQuarantineOffersRequest
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "cardStatuses" (Json.Decode.list offerCardStatusTypeDecoder) Nothing
        |> maybeDecodeNullable "categoryIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "vendorNames" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing


getQuarantineOffersResponseDecoder : Json.Decode.Decoder GetQuarantineOffersResponse
getQuarantineOffersResponseDecoder =
    Json.Decode.succeed GetQuarantineOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getQuarantineOffersResultDTODecoder Nothing


getQuarantineOffersResultDTODecoder : Json.Decode.Decoder GetQuarantineOffersResultDTO
getQuarantineOffersResultDTODecoder =
    Json.Decode.succeed GetQuarantineOffersResultDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "offers" (Json.Decode.list quarantineOfferDTODecoder) 


getRegionWithChildrenResponseDecoder : Json.Decode.Decoder GetRegionWithChildrenResponse
getRegionWithChildrenResponseDecoder =
    Json.Decode.succeed GetRegionWithChildrenResponse
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing
        |> maybeDecode "regions" regionDTODecoder Nothing


getRegionsResponseDecoder : Json.Decode.Decoder GetRegionsResponse
getRegionsResponseDecoder =
    Json.Decode.succeed GetRegionsResponse
        |> decode "regions" (Json.Decode.list regionDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


getReportInfoResponseDecoder : Json.Decode.Decoder GetReportInfoResponse
getReportInfoResponseDecoder =
    Json.Decode.succeed GetReportInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" reportInfoDTODecoder Nothing


getReturnResponseDecoder : Json.Decode.Decoder GetReturnResponse
getReturnResponseDecoder =
    Json.Decode.succeed GetReturnResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" returnDTODecoder Nothing


getReturnsResponseDecoder : Json.Decode.Decoder GetReturnsResponse
getReturnsResponseDecoder =
    Json.Decode.succeed GetReturnsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" pagedReturnsDTODecoder Nothing


getShipmentOrdersInfoResponseDecoder : Json.Decode.Decoder GetShipmentOrdersInfoResponse
getShipmentOrdersInfoResponseDecoder =
    Json.Decode.succeed GetShipmentOrdersInfoResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" ordersShipmentInfoDTODecoder Nothing


getShipmentResponseDecoder : Json.Decode.Decoder GetShipmentResponse
getShipmentResponseDecoder =
    Json.Decode.succeed GetShipmentResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" shipmentDTODecoder Nothing


getSuggestedOfferMappingEntriesRequestDecoder : Json.Decode.Decoder GetSuggestedOfferMappingEntriesRequest
getSuggestedOfferMappingEntriesRequestDecoder =
    Json.Decode.succeed GetSuggestedOfferMappingEntriesRequest
        |> decode "offers" (Json.Decode.list mappingsOfferDTODecoder) 


getSuggestedOfferMappingEntriesResponseDecoder : Json.Decode.Decoder GetSuggestedOfferMappingEntriesResponse
getSuggestedOfferMappingEntriesResponseDecoder =
    Json.Decode.succeed GetSuggestedOfferMappingEntriesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" offerMappingSuggestionsListDTODecoder Nothing


getSuggestedOfferMappingsRequestDecoder : Json.Decode.Decoder GetSuggestedOfferMappingsRequest
getSuggestedOfferMappingsRequestDecoder =
    Json.Decode.succeed GetSuggestedOfferMappingsRequest
        |> maybeDecodeNullable "offers" (Json.Decode.list suggestedOfferDTODecoder) Nothing


getSuggestedOfferMappingsResponseDecoder : Json.Decode.Decoder GetSuggestedOfferMappingsResponse
getSuggestedOfferMappingsResponseDecoder =
    Json.Decode.succeed GetSuggestedOfferMappingsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getSuggestedOfferMappingsResultDTODecoder Nothing


getSuggestedOfferMappingsResultDTODecoder : Json.Decode.Decoder GetSuggestedOfferMappingsResultDTO
getSuggestedOfferMappingsResultDTODecoder =
    Json.Decode.succeed GetSuggestedOfferMappingsResultDTO
        |> decode "offers" (Json.Decode.list suggestedOfferMappingDTODecoder) 


getWarehouseStocksDTODecoder : Json.Decode.Decoder GetWarehouseStocksDTO
getWarehouseStocksDTODecoder =
    Json.Decode.succeed GetWarehouseStocksDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "warehouses" (Json.Decode.list warehouseOffersDTODecoder) 


getWarehouseStocksRequestDecoder : Json.Decode.Decoder GetWarehouseStocksRequest
getWarehouseStocksRequestDecoder =
    Json.Decode.succeed GetWarehouseStocksRequest
        |> maybeDecode "withTurnover" Json.Decode.bool (Just False)
        |> maybeDecode "archived" Json.Decode.bool Nothing
        |> maybeDecodeNullable "offerIds" (Json.Decode.list Json.Decode.string) Nothing


getWarehouseStocksResponseDecoder : Json.Decode.Decoder GetWarehouseStocksResponse
getWarehouseStocksResponseDecoder =
    Json.Decode.succeed GetWarehouseStocksResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" getWarehouseStocksDTODecoder Nothing


getWarehousesResponseDecoder : Json.Decode.Decoder GetWarehousesResponse
getWarehousesResponseDecoder =
    Json.Decode.succeed GetWarehousesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" warehousesDTODecoder Nothing


goodsFeedbackCommentAuthorDTODecoder : Json.Decode.Decoder GoodsFeedbackCommentAuthorDTO
goodsFeedbackCommentAuthorDTODecoder =
    Json.Decode.succeed GoodsFeedbackCommentAuthorDTO
        |> maybeDecode "type" goodsFeedbackCommentAuthorTypeDecoder Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


goodsFeedbackCommentAuthorTypeDecoder : Json.Decode.Decoder GoodsFeedbackCommentAuthorType
goodsFeedbackCommentAuthorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "USER" ->
                        Json.Decode.succeed GoodsFeedbackCommentAuthorTypeUSER

                    "BUSINESS" ->
                        Json.Decode.succeed GoodsFeedbackCommentAuthorTypeBUSINESS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


goodsFeedbackCommentDTODecoder : Json.Decode.Decoder GoodsFeedbackCommentDTO
goodsFeedbackCommentDTODecoder =
    Json.Decode.succeed GoodsFeedbackCommentDTO
        |> decode "id" Json.Decode.int 
        |> decode "text" Json.Decode.string 
        |> maybeDecode "canModify" Json.Decode.bool Nothing
        |> maybeDecode "parentId" Json.Decode.int Nothing
        |> decode "author" goodsFeedbackCommentAuthorDTODecoder 
        |> decode "status" goodsFeedbackCommentStatusTypeDecoder 


goodsFeedbackCommentIdDecoder : Json.Decode.Decoder GoodsFeedbackCommentId
goodsFeedbackCommentIdDecoder =
    Json.Decode.succeed GoodsFeedbackCommentId


goodsFeedbackCommentListDTODecoder : Json.Decode.Decoder GoodsFeedbackCommentListDTO
goodsFeedbackCommentListDTODecoder =
    Json.Decode.succeed GoodsFeedbackCommentListDTO
        |> decode "comments" (Json.Decode.list goodsFeedbackCommentDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


goodsFeedbackCommentStatusTypeDecoder : Json.Decode.Decoder GoodsFeedbackCommentStatusType
goodsFeedbackCommentStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PUBLISHED" ->
                        Json.Decode.succeed GoodsFeedbackCommentStatusTypePUBLISHED

                    "UNMODERATED" ->
                        Json.Decode.succeed GoodsFeedbackCommentStatusTypeUNMODERATED

                    "BANNED" ->
                        Json.Decode.succeed GoodsFeedbackCommentStatusTypeBANNED

                    "DELETED" ->
                        Json.Decode.succeed GoodsFeedbackCommentStatusTypeDELETED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


goodsFeedbackCommentTextDecoder : Json.Decode.Decoder GoodsFeedbackCommentText
goodsFeedbackCommentTextDecoder =
    Json.Decode.succeed GoodsFeedbackCommentText


goodsFeedbackDTODecoder : Json.Decode.Decoder GoodsFeedbackDTO
goodsFeedbackDTODecoder =
    Json.Decode.succeed GoodsFeedbackDTO
        |> decode "feedbackId" Json.Decode.int 
        |> decode "createdAt" Api.Time.dateTimeDecoder 
        |> decode "needReaction" Json.Decode.bool 
        |> decode "identifiers" goodsFeedbackIdentifiersDTODecoder 
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "description" goodsFeedbackDescriptionDTODecoder Nothing
        |> maybeDecode "media" goodsFeedbackMediaDTODecoder Nothing
        |> decode "statistics" goodsFeedbackStatisticsDTODecoder 


goodsFeedbackDescriptionDTODecoder : Json.Decode.Decoder GoodsFeedbackDescriptionDTO
goodsFeedbackDescriptionDTODecoder =
    Json.Decode.succeed GoodsFeedbackDescriptionDTO
        |> maybeDecode "advantages" Json.Decode.string Nothing
        |> maybeDecode "disadvantages" Json.Decode.string Nothing
        |> maybeDecode "comment" Json.Decode.string Nothing


goodsFeedbackIdDecoder : Json.Decode.Decoder GoodsFeedbackId
goodsFeedbackIdDecoder =
    Json.Decode.succeed GoodsFeedbackId


goodsFeedbackIdentifiersDTODecoder : Json.Decode.Decoder GoodsFeedbackIdentifiersDTO
goodsFeedbackIdentifiersDTODecoder =
    Json.Decode.succeed GoodsFeedbackIdentifiersDTO
        |> decode "orderId" Json.Decode.int 
        |> decode "modelId" Json.Decode.int 


goodsFeedbackListDTODecoder : Json.Decode.Decoder GoodsFeedbackListDTO
goodsFeedbackListDTODecoder =
    Json.Decode.succeed GoodsFeedbackListDTO
        |> decode "feedbacks" (Json.Decode.list goodsFeedbackDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


goodsFeedbackMediaDTODecoder : Json.Decode.Decoder GoodsFeedbackMediaDTO
goodsFeedbackMediaDTODecoder =
    Json.Decode.succeed GoodsFeedbackMediaDTO
        |> maybeDecodeNullable "photos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "videos" (Json.Decode.list Json.Decode.string) Nothing


goodsFeedbackStatisticsDTODecoder : Json.Decode.Decoder GoodsFeedbackStatisticsDTO
goodsFeedbackStatisticsDTODecoder =
    Json.Decode.succeed GoodsFeedbackStatisticsDTO
        |> decode "rating" Json.Decode.int 
        |> decode "commentsCount" Json.Decode.int 
        |> maybeDecode "recommended" Json.Decode.bool Nothing
        |> maybeDecode "paidAmount" Json.Decode.int Nothing


goodsStatsDTODecoder : Json.Decode.Decoder GoodsStatsDTO
goodsStatsDTODecoder =
    Json.Decode.succeed GoodsStatsDTO
        |> decode "shopSkus" (Json.Decode.list goodsStatsGoodsDTODecoder) 


goodsStatsGoodsDTODecoder : Json.Decode.Decoder GoodsStatsGoodsDTO
goodsStatsGoodsDTODecoder =
    Json.Decode.succeed GoodsStatsGoodsDTO
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "categoryId" Json.Decode.int Nothing
        |> maybeDecode "categoryName" Json.Decode.string Nothing
        |> maybeDecode "weightDimensions" goodsStatsWeightDimensionsDTODecoder Nothing
        |> maybeDecodeNullable "warehouses" (Json.Decode.list goodsStatsWarehouseDTODecoder) Nothing
        |> maybeDecodeNullable "tariffs" (Json.Decode.list tariffDTODecoder) Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing


goodsStatsWarehouseDTODecoder : Json.Decode.Decoder GoodsStatsWarehouseDTO
goodsStatsWarehouseDTODecoder =
    Json.Decode.succeed GoodsStatsWarehouseDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> decode "stocks" (Json.Decode.list warehouseStockDTODecoder) 


goodsStatsWeightDimensionsDTODecoder : Json.Decode.Decoder GoodsStatsWeightDimensionsDTO
goodsStatsWeightDimensionsDTODecoder =
    Json.Decode.succeed GoodsStatsWeightDimensionsDTO
        |> maybeDecode "length" Json.Decode.float Nothing
        |> maybeDecode "width" Json.Decode.float Nothing
        |> maybeDecode "height" Json.Decode.float Nothing
        |> maybeDecode "weight" Json.Decode.float Nothing


gpsDTODecoder : Json.Decode.Decoder GpsDTO
gpsDTODecoder =
    Json.Decode.succeed GpsDTO
        |> decode "latitude" Json.Decode.float 
        |> decode "longitude" Json.Decode.float 


hiddenOfferDTODecoder : Json.Decode.Decoder HiddenOfferDTO
hiddenOfferDTODecoder =
    Json.Decode.succeed HiddenOfferDTO
        |> decode "offerId" Json.Decode.string 


languageTypeDecoder : Json.Decode.Decoder LanguageType
languageTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "RU" ->
                        Json.Decode.succeed LanguageTypeRU

                    "EN" ->
                        Json.Decode.succeed LanguageTypeEN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


licenseCheckStatusTypeDecoder : Json.Decode.Decoder LicenseCheckStatusType
licenseCheckStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NEW" ->
                        Json.Decode.succeed LicenseCheckStatusTypeNEW

                    "SUCCESS" ->
                        Json.Decode.succeed LicenseCheckStatusTypeSUCCESS

                    "FAIL" ->
                        Json.Decode.succeed LicenseCheckStatusTypeFAIL

                    "REVOKE" ->
                        Json.Decode.succeed LicenseCheckStatusTypeREVOKE

                    "DONT_WANT" ->
                        Json.Decode.succeed LicenseCheckStatusTypeDONTWANT

                    "FAIL_MANUAL" ->
                        Json.Decode.succeed LicenseCheckStatusTypeFAILMANUAL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


licenseTypeDecoder : Json.Decode.Decoder LicenseType
licenseTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ALCOHOL" ->
                        Json.Decode.succeed LicenseTypeALCOHOL

                    "UNKNOWN" ->
                        Json.Decode.succeed LicenseTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


logisticPickupPointDTODecoder : Json.Decode.Decoder LogisticPickupPointDTO
logisticPickupPointDTODecoder =
    Json.Decode.succeed LogisticPickupPointDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "address" pickupAddressDTODecoder Nothing
        |> maybeDecode "instruction" Json.Decode.string Nothing
        |> maybeDecode "type" logisticPointTypeDecoder Nothing
        |> maybeDecode "logisticPartnerId" Json.Decode.int Nothing


logisticPointTypeDecoder : Json.Decode.Decoder LogisticPointType
logisticPointTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "WAREHOUSE" ->
                        Json.Decode.succeed LogisticPointTypeWAREHOUSE

                    "PICKUP_POINT" ->
                        Json.Decode.succeed LogisticPointTypePICKUPPOINT

                    "PICKUP_TERMINAL" ->
                        Json.Decode.succeed LogisticPointTypePICKUPTERMINAL

                    "PICKUP_POST_OFFICE" ->
                        Json.Decode.succeed LogisticPointTypePICKUPPOSTOFFICE

                    "PICKUP_MIXED" ->
                        Json.Decode.succeed LogisticPointTypePICKUPMIXED

                    "PICKUP_RETAIL" ->
                        Json.Decode.succeed LogisticPointTypePICKUPRETAIL

                    "UNKNOWN" ->
                        Json.Decode.succeed LogisticPointTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


mappingsOfferDTODecoder : Json.Decode.Decoder MappingsOfferDTO
mappingsOfferDTODecoder =
    Json.Decode.succeed MappingsOfferDTO
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "feedId" Json.Decode.int Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "urls" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "manufacturer" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "minShipment" Json.Decode.int Nothing
        |> maybeDecode "transportUnitSize" Json.Decode.int Nothing
        |> maybeDecode "quantumOfSupply" Json.Decode.int Nothing
        |> maybeDecode "deliveryDurationDays" Json.Decode.int Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecodeNullable "customsCommodityCodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecodeNullable "supplyScheduleDays" (Json.Decode.list dayOfWeekTypeDecoder) Nothing
        |> maybeDecode "shelfLifeDays" Json.Decode.int Nothing
        |> maybeDecode "lifeTimeDays" Json.Decode.int Nothing
        |> maybeDecode "guaranteePeriodDays" Json.Decode.int Nothing
        |> maybeDecode "processingState" offerProcessingStateDTODecoder Nothing
        |> maybeDecode "availability" offerAvailabilityStatusTypeDecoder Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "certificate" Json.Decode.string Nothing
        |> maybeDecode "price" Json.Decode.float Nothing


mappingsOfferInfoDTODecoder : Json.Decode.Decoder MappingsOfferInfoDTO
mappingsOfferInfoDTODecoder =
    Json.Decode.succeed MappingsOfferInfoDTO
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "feedId" Json.Decode.int Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "urls" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "manufacturer" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "minShipment" Json.Decode.int Nothing
        |> maybeDecode "transportUnitSize" Json.Decode.int Nothing
        |> maybeDecode "quantumOfSupply" Json.Decode.int Nothing
        |> maybeDecode "deliveryDurationDays" Json.Decode.int Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecodeNullable "customsCommodityCodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecodeNullable "supplyScheduleDays" (Json.Decode.list dayOfWeekTypeDecoder) Nothing
        |> maybeDecode "shelfLifeDays" Json.Decode.int Nothing
        |> maybeDecode "lifeTimeDays" Json.Decode.int Nothing
        |> maybeDecode "guaranteePeriodDays" Json.Decode.int Nothing
        |> maybeDecode "processingState" offerProcessingStateDTODecoder Nothing
        |> maybeDecode "availability" offerAvailabilityStatusTypeDecoder Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "certificate" Json.Decode.string Nothing


marketSkuDecoder : Json.Decode.Decoder MarketSku
marketSkuDecoder =
    Json.Decode.succeed MarketSku


maxSaleQuantumDTODecoder : Json.Decode.Decoder MaxSaleQuantumDTO
maxSaleQuantumDTODecoder =
    Json.Decode.succeed MaxSaleQuantumDTO
        |> decode "id" Json.Decode.int 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "maxSaleQuantum" Json.Decode.int Nothing


mechanicsTypeDecoder : Json.Decode.Decoder MechanicsType
mechanicsTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DIRECT_DISCOUNT" ->
                        Json.Decode.succeed MechanicsTypeDIRECTDISCOUNT

                    "BLUE_FLASH" ->
                        Json.Decode.succeed MechanicsTypeBLUEFLASH

                    "MARKET_PROMOCODE" ->
                        Json.Decode.succeed MechanicsTypeMARKETPROMOCODE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


modelDTODecoder : Json.Decode.Decoder ModelDTO
modelDTODecoder =
    Json.Decode.succeed ModelDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "prices" modelPriceDTODecoder Nothing


modelOfferDTODecoder : Json.Decode.Decoder ModelOfferDTO
modelOfferDTODecoder =
    Json.Decode.succeed ModelOfferDTO
        |> maybeDecode "discount" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "pos" Json.Decode.int Nothing
        |> maybeDecode "preDiscountPrice" Json.Decode.float Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "regionId" Json.Decode.int Nothing
        |> maybeDecode "shippingCost" Json.Decode.float Nothing
        |> maybeDecode "shopName" Json.Decode.string Nothing
        |> maybeDecode "shopRating" Json.Decode.int Nothing
        |> maybeDecode "inStock" Json.Decode.int Nothing


modelPriceDTODecoder : Json.Decode.Decoder ModelPriceDTO
modelPriceDTODecoder =
    Json.Decode.succeed ModelPriceDTO
        |> maybeDecode "avg" Json.Decode.float Nothing
        |> maybeDecode "max" Json.Decode.float Nothing
        |> maybeDecode "min" Json.Decode.float Nothing


modelsDTODecoder : Json.Decode.Decoder ModelsDTO
modelsDTODecoder =
    Json.Decode.succeed ModelsDTO
        |> decode "models" (Json.Decode.list modelDTODecoder) 


offerAvailabilityStatusTypeDecoder : Json.Decode.Decoder OfferAvailabilityStatusType
offerAvailabilityStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ACTIVE" ->
                        Json.Decode.succeed OfferAvailabilityStatusTypeACTIVE

                    "INACTIVE" ->
                        Json.Decode.succeed OfferAvailabilityStatusTypeINACTIVE

                    "DELISTED" ->
                        Json.Decode.succeed OfferAvailabilityStatusTypeDELISTED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerCampaignStatusDTODecoder : Json.Decode.Decoder OfferCampaignStatusDTO
offerCampaignStatusDTODecoder =
    Json.Decode.succeed OfferCampaignStatusDTO
        |> decode "campaignId" Json.Decode.int 
        |> decode "status" offerCampaignStatusTypeDecoder 


offerCampaignStatusTypeDecoder : Json.Decode.Decoder OfferCampaignStatusType
offerCampaignStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PUBLISHED" ->
                        Json.Decode.succeed OfferCampaignStatusTypePUBLISHED

                    "CHECKING" ->
                        Json.Decode.succeed OfferCampaignStatusTypeCHECKING

                    "DISABLED_BY_PARTNER" ->
                        Json.Decode.succeed OfferCampaignStatusTypeDISABLEDBYPARTNER

                    "DISABLED_AUTOMATICALLY" ->
                        Json.Decode.succeed OfferCampaignStatusTypeDISABLEDAUTOMATICALLY

                    "REJECTED_BY_MARKET" ->
                        Json.Decode.succeed OfferCampaignStatusTypeREJECTEDBYMARKET

                    "CREATING_CARD" ->
                        Json.Decode.succeed OfferCampaignStatusTypeCREATINGCARD

                    "NO_CARD" ->
                        Json.Decode.succeed OfferCampaignStatusTypeNOCARD

                    "NO_STOCKS" ->
                        Json.Decode.succeed OfferCampaignStatusTypeNOSTOCKS

                    "ARCHIVED" ->
                        Json.Decode.succeed OfferCampaignStatusTypeARCHIVED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerCardDTODecoder : Json.Decode.Decoder OfferCardDTO
offerCardDTODecoder =
    Json.Decode.succeed OfferCardDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "mapping" getMappingDTODecoder Nothing
        |> maybeDecodeNullable "parameterValues" (Json.Decode.list parameterValueDTODecoder) Nothing
        |> maybeDecode "cardStatus" offerCardStatusTypeDecoder Nothing
        |> maybeDecode "contentRating" Json.Decode.int Nothing
        |> maybeDecodeNullable "recommendations" (Json.Decode.list offerCardRecommendationDTODecoder) Nothing
        |> maybeDecodeNullable "errors" (Json.Decode.list offerErrorDTODecoder) Nothing
        |> maybeDecodeNullable "warnings" (Json.Decode.list offerErrorDTODecoder) Nothing


offerCardRecommendationDTODecoder : Json.Decode.Decoder OfferCardRecommendationDTO
offerCardRecommendationDTODecoder =
    Json.Decode.succeed OfferCardRecommendationDTO
        |> decode "type" offerCardRecommendationTypeDecoder 
        |> maybeDecode "percent" Json.Decode.int Nothing


offerCardRecommendationTypeDecoder : Json.Decode.Decoder OfferCardRecommendationType
offerCardRecommendationTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "HAS_VIDEO" ->
                        Json.Decode.succeed OfferCardRecommendationTypeHASVIDEO

                    "RECOGNIZED_VENDOR" ->
                        Json.Decode.succeed OfferCardRecommendationTypeRECOGNIZEDVENDOR

                    "MAIN" ->
                        Json.Decode.succeed OfferCardRecommendationTypeMAIN

                    "ADDITIONAL" ->
                        Json.Decode.succeed OfferCardRecommendationTypeADDITIONAL

                    "DISTINCTIVE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeDISTINCTIVE

                    "FILTERABLE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeFILTERABLE

                    "PICTURE_COUNT" ->
                        Json.Decode.succeed OfferCardRecommendationTypePICTURECOUNT

                    "HAS_DESCRIPTION" ->
                        Json.Decode.succeed OfferCardRecommendationTypeHASDESCRIPTION

                    "HAS_BARCODE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeHASBARCODE

                    "FIRST_PICTURE_SIZE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeFIRSTPICTURESIZE

                    "TITLE_LENGTH" ->
                        Json.Decode.succeed OfferCardRecommendationTypeTITLELENGTH

                    "DESCRIPTION_LENGTH" ->
                        Json.Decode.succeed OfferCardRecommendationTypeDESCRIPTIONLENGTH

                    "AVERAGE_PICTURE_SIZE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeAVERAGEPICTURESIZE

                    "FIRST_VIDEO_SIZE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeFIRSTVIDEOSIZE

                    "FIRST_VIDEO_LENGTH" ->
                        Json.Decode.succeed OfferCardRecommendationTypeFIRSTVIDEOLENGTH

                    "AVERAGE_VIDEO_SIZE" ->
                        Json.Decode.succeed OfferCardRecommendationTypeAVERAGEVIDEOSIZE

                    "VIDEO_COUNT" ->
                        Json.Decode.succeed OfferCardRecommendationTypeVIDEOCOUNT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerCardStatusTypeDecoder : Json.Decode.Decoder OfferCardStatusType
offerCardStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "HAS_CARD_CAN_NOT_UPDATE" ->
                        Json.Decode.succeed OfferCardStatusTypeHASCARDCANNOTUPDATE

                    "HAS_CARD_CAN_UPDATE" ->
                        Json.Decode.succeed OfferCardStatusTypeHASCARDCANUPDATE

                    "HAS_CARD_CAN_UPDATE_ERRORS" ->
                        Json.Decode.succeed OfferCardStatusTypeHASCARDCANUPDATEERRORS

                    "HAS_CARD_CAN_UPDATE_PROCESSING" ->
                        Json.Decode.succeed OfferCardStatusTypeHASCARDCANUPDATEPROCESSING

                    "NO_CARD_NEED_CONTENT" ->
                        Json.Decode.succeed OfferCardStatusTypeNOCARDNEEDCONTENT

                    "NO_CARD_MARKET_WILL_CREATE" ->
                        Json.Decode.succeed OfferCardStatusTypeNOCARDMARKETWILLCREATE

                    "NO_CARD_ERRORS" ->
                        Json.Decode.succeed OfferCardStatusTypeNOCARDERRORS

                    "NO_CARD_PROCESSING" ->
                        Json.Decode.succeed OfferCardStatusTypeNOCARDPROCESSING

                    "NO_CARD_ADD_TO_CAMPAIGN" ->
                        Json.Decode.succeed OfferCardStatusTypeNOCARDADDTOCAMPAIGN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerCardsContentStatusDTODecoder : Json.Decode.Decoder OfferCardsContentStatusDTO
offerCardsContentStatusDTODecoder =
    Json.Decode.succeed OfferCardsContentStatusDTO
        |> decode "offerCards" (Json.Decode.list offerCardDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


offerCategoryDecoder : Json.Decode.Decoder OfferCategory
offerCategoryDecoder =
    Json.Decode.succeed OfferCategory


offerConditionDTODecoder : Json.Decode.Decoder OfferConditionDTO
offerConditionDTODecoder =
    Json.Decode.succeed OfferConditionDTO
        |> maybeDecode "type" offerConditionTypeDecoder Nothing
        |> maybeDecode "quality" offerConditionQualityTypeDecoder Nothing
        |> maybeDecode "reason" Json.Decode.string Nothing


offerConditionQualityTypeDecoder : Json.Decode.Decoder OfferConditionQualityType
offerConditionQualityTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PERFECT" ->
                        Json.Decode.succeed OfferConditionQualityTypePERFECT

                    "EXCELLENT" ->
                        Json.Decode.succeed OfferConditionQualityTypeEXCELLENT

                    "GOOD" ->
                        Json.Decode.succeed OfferConditionQualityTypeGOOD

                    "NOT_SPECIFIED" ->
                        Json.Decode.succeed OfferConditionQualityTypeNOTSPECIFIED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerConditionTypeDecoder : Json.Decode.Decoder OfferConditionType
offerConditionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PREOWNED" ->
                        Json.Decode.succeed OfferConditionTypePREOWNED

                    "SHOWCASESAMPLE" ->
                        Json.Decode.succeed OfferConditionTypeSHOWCASESAMPLE

                    "REFURBISHED" ->
                        Json.Decode.succeed OfferConditionTypeREFURBISHED

                    "REDUCTION" ->
                        Json.Decode.succeed OfferConditionTypeREDUCTION

                    "RENOVATED" ->
                        Json.Decode.succeed OfferConditionTypeRENOVATED

                    "NOT_SPECIFIED" ->
                        Json.Decode.succeed OfferConditionTypeNOTSPECIFIED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerContentDTODecoder : Json.Decode.Decoder OfferContentDTO
offerContentDTODecoder =
    Json.Decode.succeed OfferContentDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "categoryId" Json.Decode.int 
        |> decode "parameterValues" (Json.Decode.list parameterValueDTODecoder) 


offerContentErrorDTODecoder : Json.Decode.Decoder OfferContentErrorDTO
offerContentErrorDTODecoder =
    Json.Decode.succeed OfferContentErrorDTO
        |> decode "type" offerContentErrorTypeDecoder 
        |> maybeDecode "parameterId" Json.Decode.int Nothing
        |> decode "message" Json.Decode.string 


offerContentErrorTypeDecoder : Json.Decode.Decoder OfferContentErrorType
offerContentErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OFFER_NOT_FOUND" ->
                        Json.Decode.succeed OfferContentErrorTypeOFFERNOTFOUND

                    "UNKNOWN_CATEGORY" ->
                        Json.Decode.succeed OfferContentErrorTypeUNKNOWNCATEGORY

                    "CATEGORY_MISMATCH" ->
                        Json.Decode.succeed OfferContentErrorTypeCATEGORYMISMATCH

                    "UNKNOWN_PARAMETER" ->
                        Json.Decode.succeed OfferContentErrorTypeUNKNOWNPARAMETER

                    "UNEXPECTED_BOOLEAN_VALUE" ->
                        Json.Decode.succeed OfferContentErrorTypeUNEXPECTEDBOOLEANVALUE

                    "NUMBER_FORMAT" ->
                        Json.Decode.succeed OfferContentErrorTypeNUMBERFORMAT

                    "VALUE_BLANK" ->
                        Json.Decode.succeed OfferContentErrorTypeVALUEBLANK

                    "INVALID_UNIT_ID" ->
                        Json.Decode.succeed OfferContentErrorTypeINVALIDUNITID

                    "INVALID_GROUP_ID_LENGTH" ->
                        Json.Decode.succeed OfferContentErrorTypeINVALIDGROUPIDLENGTH

                    "INVALID_GROUP_ID_CHARACTERS" ->
                        Json.Decode.succeed OfferContentErrorTypeINVALIDGROUPIDCHARACTERS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerDTODecoder : Json.Decode.Decoder OfferDTO
offerDTODecoder =
    Json.Decode.succeed OfferDTO
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "feedId" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "shopCategoryId" Json.Decode.string Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "preDiscountPrice" Json.Decode.float Nothing
        |> maybeDecode "discount" Json.Decode.int Nothing
        |> maybeDecode "cutPrice" Json.Decode.bool Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> decode "modelId" Json.Decode.int 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "bid" Json.Decode.float Nothing
        |> maybeDecode "cbid" Json.Decode.float Nothing
        |> maybeDecode "fee" Json.Decode.float Nothing
        |> maybeDecode "blocked" Json.Decode.bool Nothing


offerDescriptionDecoder : Json.Decode.Decoder OfferDescription
offerDescriptionDecoder =
    Json.Decode.succeed OfferDescription


offerErrorDTODecoder : Json.Decode.Decoder OfferErrorDTO
offerErrorDTODecoder =
    Json.Decode.succeed OfferErrorDTO
        |> maybeDecode "message" Json.Decode.string Nothing
        |> maybeDecode "comment" Json.Decode.string Nothing


offerForRecommendationDTODecoder : Json.Decode.Decoder OfferForRecommendationDTO
offerForRecommendationDTODecoder =
    Json.Decode.succeed OfferForRecommendationDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "price" basePriceDTODecoder Nothing
        |> maybeDecode "cofinancePrice" getPriceDTODecoder Nothing
        |> maybeDecode "competitiveness" priceCompetitivenessTypeDecoder Nothing
        |> maybeDecode "shows" Json.Decode.int Nothing


offerManualDTODecoder : Json.Decode.Decoder OfferManualDTO
offerManualDTODecoder =
    Json.Decode.succeed OfferManualDTO
        |> decode "url" Json.Decode.string 
        |> maybeDecode "title" Json.Decode.string Nothing


offerMappingDTODecoder : Json.Decode.Decoder OfferMappingDTO
offerMappingDTODecoder =
    Json.Decode.succeed OfferMappingDTO
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "modelId" Json.Decode.int Nothing
        |> maybeDecode "categoryId" Json.Decode.int Nothing


offerMappingEntriesDTODecoder : Json.Decode.Decoder OfferMappingEntriesDTO
offerMappingEntriesDTODecoder =
    Json.Decode.succeed OfferMappingEntriesDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "offerMappingEntries" (Json.Decode.list offerMappingEntryDTODecoder) 


offerMappingEntryDTODecoder : Json.Decode.Decoder OfferMappingEntryDTO
offerMappingEntryDTODecoder =
    Json.Decode.succeed OfferMappingEntryDTO
        |> maybeDecode "mapping" offerMappingDTODecoder Nothing
        |> maybeDecode "awaitingModerationMapping" offerMappingDTODecoder Nothing
        |> maybeDecode "rejectedMapping" offerMappingDTODecoder Nothing
        |> maybeDecode "offer" mappingsOfferDTODecoder Nothing


offerMappingErrorDTODecoder : Json.Decode.Decoder OfferMappingErrorDTO
offerMappingErrorDTODecoder =
    Json.Decode.succeed OfferMappingErrorDTO
        |> decode "type" offerMappingErrorTypeDecoder 
        |> maybeDecode "parameterId" Json.Decode.int Nothing
        |> decode "message" Json.Decode.string 


offerMappingErrorTypeDecoder : Json.Decode.Decoder OfferMappingErrorType
offerMappingErrorTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNKNOWN_CATEGORY" ->
                        Json.Decode.succeed OfferMappingErrorTypeUNKNOWNCATEGORY

                    "CATEGORY_MISMATCH" ->
                        Json.Decode.succeed OfferMappingErrorTypeCATEGORYMISMATCH

                    "EMPTY_MARKET_CATEGORY" ->
                        Json.Decode.succeed OfferMappingErrorTypeEMPTYMARKETCATEGORY

                    "UNKNOWN_PARAMETER" ->
                        Json.Decode.succeed OfferMappingErrorTypeUNKNOWNPARAMETER

                    "UNEXPECTED_BOOLEAN_VALUE" ->
                        Json.Decode.succeed OfferMappingErrorTypeUNEXPECTEDBOOLEANVALUE

                    "NUMBER_FORMAT" ->
                        Json.Decode.succeed OfferMappingErrorTypeNUMBERFORMAT

                    "VALUE_BLANK" ->
                        Json.Decode.succeed OfferMappingErrorTypeVALUEBLANK

                    "INVALID_UNIT_ID" ->
                        Json.Decode.succeed OfferMappingErrorTypeINVALIDUNITID

                    "INVALID_GROUP_ID_LENGTH" ->
                        Json.Decode.succeed OfferMappingErrorTypeINVALIDGROUPIDLENGTH

                    "INVALID_GROUP_ID_CHARACTERS" ->
                        Json.Decode.succeed OfferMappingErrorTypeINVALIDGROUPIDCHARACTERS

                    "INVALID_PICKER_URL" ->
                        Json.Decode.succeed OfferMappingErrorTypeINVALIDPICKERURL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerMappingInfoDTODecoder : Json.Decode.Decoder OfferMappingInfoDTO
offerMappingInfoDTODecoder =
    Json.Decode.succeed OfferMappingInfoDTO
        |> maybeDecode "mapping" offerMappingDTODecoder Nothing
        |> maybeDecode "awaitingModerationMapping" offerMappingDTODecoder Nothing
        |> maybeDecode "rejectedMapping" offerMappingDTODecoder Nothing


offerMappingKindTypeDecoder : Json.Decode.Decoder OfferMappingKindType
offerMappingKindTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ACTIVE" ->
                        Json.Decode.succeed OfferMappingKindTypeACTIVE

                    "ALL" ->
                        Json.Decode.succeed OfferMappingKindTypeALL

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerMappingSuggestionsListDTODecoder : Json.Decode.Decoder OfferMappingSuggestionsListDTO
offerMappingSuggestionsListDTODecoder =
    Json.Decode.succeed OfferMappingSuggestionsListDTO
        |> decode "offers" (Json.Decode.list enrichedMappingsOfferDTODecoder) 


offerNameDecoder : Json.Decode.Decoder OfferName
offerNameDecoder =
    Json.Decode.succeed OfferName


offerParamDTODecoder : Json.Decode.Decoder OfferParamDTO
offerParamDTODecoder =
    Json.Decode.succeed OfferParamDTO
        |> decode "name" Json.Decode.string 
        |> decode "value" Json.Decode.string 


offerPriceByOfferIdsListResponseDTODecoder : Json.Decode.Decoder OfferPriceByOfferIdsListResponseDTO
offerPriceByOfferIdsListResponseDTODecoder =
    Json.Decode.succeed OfferPriceByOfferIdsListResponseDTO
        |> decode "offers" (Json.Decode.list offerPriceByOfferIdsResponseDTODecoder) 
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing


offerPriceByOfferIdsResponseDTODecoder : Json.Decode.Decoder OfferPriceByOfferIdsResponseDTO
offerPriceByOfferIdsResponseDTODecoder =
    Json.Decode.succeed OfferPriceByOfferIdsResponseDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "price" priceDTODecoder Nothing
        |> maybeDecode "updatedAt" Api.Time.dateTimeDecoder Nothing


offerPriceDTODecoder : Json.Decode.Decoder OfferPriceDTO
offerPriceDTODecoder =
    Json.Decode.succeed OfferPriceDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "price" priceDTODecoder Nothing


offerPriceListResponseDTODecoder : Json.Decode.Decoder OfferPriceListResponseDTO
offerPriceListResponseDTODecoder =
    Json.Decode.succeed OfferPriceListResponseDTO
        |> decode "offers" (Json.Decode.list offerPriceResponseDTODecoder) 
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> maybeDecode "total" Json.Decode.int Nothing


offerPriceResponseDTODecoder : Json.Decode.Decoder OfferPriceResponseDTO
offerPriceResponseDTODecoder =
    Json.Decode.succeed OfferPriceResponseDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "price" priceDTODecoder Nothing
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "updatedAt" Api.Time.dateTimeDecoder Nothing


offerProcessingNoteDTODecoder : Json.Decode.Decoder OfferProcessingNoteDTO
offerProcessingNoteDTODecoder =
    Json.Decode.succeed OfferProcessingNoteDTO
        |> maybeDecode "type" offerProcessingNoteTypeDecoder Nothing
        |> maybeDecode "payload" Json.Decode.string Nothing


offerProcessingNoteTypeDecoder : Json.Decode.Decoder OfferProcessingNoteType
offerProcessingNoteTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ASSORTMENT" ->
                        Json.Decode.succeed OfferProcessingNoteTypeASSORTMENT

                    "CANCELLED" ->
                        Json.Decode.succeed OfferProcessingNoteTypeCANCELLED

                    "CONFLICTING_INFORMATION" ->
                        Json.Decode.succeed OfferProcessingNoteTypeCONFLICTINGINFORMATION

                    "OTHER" ->
                        Json.Decode.succeed OfferProcessingNoteTypeOTHER

                    "DEPARTMENT_FROZEN" ->
                        Json.Decode.succeed OfferProcessingNoteTypeDEPARTMENTFROZEN

                    "INCORRECT_INFORMATION" ->
                        Json.Decode.succeed OfferProcessingNoteTypeINCORRECTINFORMATION

                    "LEGAL_CONFLICT" ->
                        Json.Decode.succeed OfferProcessingNoteTypeLEGALCONFLICT

                    "NEED_CLASSIFICATION_INFORMATION" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNEEDCLASSIFICATIONINFORMATION

                    "NEED_INFORMATION" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNEEDINFORMATION

                    "NEED_PICTURES" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNEEDPICTURES

                    "NEED_VENDOR" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNEEDVENDOR

                    "NO_CATEGORY" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNOCATEGORY

                    "NO_KNOWLEDGE" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNOKNOWLEDGE

                    "NO_PARAMETERS_IN_SHOP_TITLE" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNOPARAMETERSINSHOPTITLE

                    "NO_SIZE_MEASURE" ->
                        Json.Decode.succeed OfferProcessingNoteTypeNOSIZEMEASURE

                    "SAMPLE_LINE" ->
                        Json.Decode.succeed OfferProcessingNoteTypeSAMPLELINE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerProcessingStateDTODecoder : Json.Decode.Decoder OfferProcessingStateDTO
offerProcessingStateDTODecoder =
    Json.Decode.succeed OfferProcessingStateDTO
        |> maybeDecode "status" offerProcessingStatusTypeDecoder Nothing
        |> maybeDecodeNullable "notes" (Json.Decode.list offerProcessingNoteDTODecoder) Nothing


offerProcessingStatusTypeDecoder : Json.Decode.Decoder OfferProcessingStatusType
offerProcessingStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNKNOWN" ->
                        Json.Decode.succeed OfferProcessingStatusTypeUNKNOWN

                    "READY" ->
                        Json.Decode.succeed OfferProcessingStatusTypeREADY

                    "IN_WORK" ->
                        Json.Decode.succeed OfferProcessingStatusTypeINWORK

                    "NEED_INFO" ->
                        Json.Decode.succeed OfferProcessingStatusTypeNEEDINFO

                    "NEED_MAPPING" ->
                        Json.Decode.succeed OfferProcessingStatusTypeNEEDMAPPING

                    "NEED_CONTENT" ->
                        Json.Decode.succeed OfferProcessingStatusTypeNEEDCONTENT

                    "CONTENT_PROCESSING" ->
                        Json.Decode.succeed OfferProcessingStatusTypeCONTENTPROCESSING

                    "SUSPENDED" ->
                        Json.Decode.succeed OfferProcessingStatusTypeSUSPENDED

                    "REJECTED" ->
                        Json.Decode.succeed OfferProcessingStatusTypeREJECTED

                    "REVIEW" ->
                        Json.Decode.succeed OfferProcessingStatusTypeREVIEW

                    "CREATE_ERROR" ->
                        Json.Decode.succeed OfferProcessingStatusTypeCREATEERROR

                    "UPDATE_ERROR" ->
                        Json.Decode.succeed OfferProcessingStatusTypeUPDATEERROR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerRecommendationDTODecoder : Json.Decode.Decoder OfferRecommendationDTO
offerRecommendationDTODecoder =
    Json.Decode.succeed OfferRecommendationDTO
        |> maybeDecode "offer" offerForRecommendationDTODecoder Nothing
        |> maybeDecode "recommendation" offerRecommendationInfoDTODecoder Nothing


offerRecommendationInfoDTODecoder : Json.Decode.Decoder OfferRecommendationInfoDTO
offerRecommendationInfoDTODecoder =
    Json.Decode.succeed OfferRecommendationInfoDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "recommendedCofinancePrice" basePriceDTODecoder Nothing
        |> maybeDecode "competitivenessThresholds" priceCompetitivenessThresholdsDTODecoder Nothing


offerRecommendationsResultDTODecoder : Json.Decode.Decoder OfferRecommendationsResultDTO
offerRecommendationsResultDTODecoder =
    Json.Decode.succeed OfferRecommendationsResultDTO
        |> maybeDecode "paging" scrollingPagerDTODecoder Nothing
        |> decode "offerRecommendations" (Json.Decode.list offerRecommendationDTODecoder) 


offerSellingProgramDTODecoder : Json.Decode.Decoder OfferSellingProgramDTO
offerSellingProgramDTODecoder =
    Json.Decode.succeed OfferSellingProgramDTO
        |> decode "sellingProgram" sellingProgramTypeDecoder 
        |> decode "status" offerSellingProgramStatusTypeDecoder 


offerSellingProgramStatusTypeDecoder : Json.Decode.Decoder OfferSellingProgramStatusType
offerSellingProgramStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FINE" ->
                        Json.Decode.succeed OfferSellingProgramStatusTypeFINE

                    "REJECT" ->
                        Json.Decode.succeed OfferSellingProgramStatusTypeREJECT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerTypeDecoder : Json.Decode.Decoder OfferType
offerTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DEFAULT" ->
                        Json.Decode.succeed OfferTypeDEFAULT

                    "MEDICINE" ->
                        Json.Decode.succeed OfferTypeMEDICINE

                    "BOOK" ->
                        Json.Decode.succeed OfferTypeBOOK

                    "AUDIOBOOK" ->
                        Json.Decode.succeed OfferTypeAUDIOBOOK

                    "ARTIST_TITLE" ->
                        Json.Decode.succeed OfferTypeARTISTTITLE

                    "ON_DEMAND" ->
                        Json.Decode.succeed OfferTypeONDEMAND

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


offerVendorDecoder : Json.Decode.Decoder OfferVendor
offerVendorDecoder =
    Json.Decode.succeed OfferVendor


offerVendorCodeDecoder : Json.Decode.Decoder OfferVendorCode
offerVendorCodeDecoder =
    Json.Decode.succeed OfferVendorCode


offerWeightDimensionsDTODecoder : Json.Decode.Decoder OfferWeightDimensionsDTO
offerWeightDimensionsDTODecoder =
    Json.Decode.succeed OfferWeightDimensionsDTO
        |> decode "length" Json.Decode.float 
        |> decode "width" Json.Decode.float 
        |> decode "height" Json.Decode.float 
        |> decode "weight" Json.Decode.float 


offersDTODecoder : Json.Decode.Decoder OffersDTO
offersDTODecoder =
    Json.Decode.succeed OffersDTO
        |> decode "offers" (Json.Decode.list offerDTODecoder) 


optionValuesLimitedDTODecoder : Json.Decode.Decoder OptionValuesLimitedDTO
optionValuesLimitedDTODecoder =
    Json.Decode.succeed OptionValuesLimitedDTO
        |> decode "limitingOptionValueId" Json.Decode.int 
        |> decode "optionValueIds" (Json.Decode.list Json.Decode.int) 


orderBoxLayoutDTODecoder : Json.Decode.Decoder OrderBoxLayoutDTO
orderBoxLayoutDTODecoder =
    Json.Decode.succeed OrderBoxLayoutDTO
        |> decode "items" (Json.Decode.list orderBoxLayoutItemDTODecoder) 


orderBoxLayoutItemDTODecoder : Json.Decode.Decoder OrderBoxLayoutItemDTO
orderBoxLayoutItemDTODecoder =
    Json.Decode.succeed OrderBoxLayoutItemDTO
        |> decode "id" Json.Decode.int 
        |> maybeDecode "fullCount" Json.Decode.int Nothing
        |> maybeDecode "partialCount" orderBoxLayoutPartialCountDTODecoder Nothing
        |> maybeDecodeNullable "instances" (Json.Decode.list briefOrderItemInstanceDTODecoder) Nothing


orderBoxLayoutPartialCountDTODecoder : Json.Decode.Decoder OrderBoxLayoutPartialCountDTO
orderBoxLayoutPartialCountDTODecoder =
    Json.Decode.succeed OrderBoxLayoutPartialCountDTO
        |> decode "current" Json.Decode.int 
        |> decode "total" Json.Decode.int 


orderBoxesLayoutDTODecoder : Json.Decode.Decoder OrderBoxesLayoutDTO
orderBoxesLayoutDTODecoder =
    Json.Decode.succeed OrderBoxesLayoutDTO
        |> decode "boxes" (Json.Decode.list enrichedOrderBoxLayoutDTODecoder) 


orderBusinessBuyerDTODecoder : Json.Decode.Decoder OrderBusinessBuyerDTO
orderBusinessBuyerDTODecoder =
    Json.Decode.succeed OrderBusinessBuyerDTO
        |> maybeDecode "inn" Json.Decode.string Nothing
        |> maybeDecode "kpp" Json.Decode.string Nothing
        |> maybeDecode "organizationName" Json.Decode.string Nothing
        |> maybeDecode "organizationJurAddress" Json.Decode.string Nothing


orderBusinessDocumentsDTODecoder : Json.Decode.Decoder OrderBusinessDocumentsDTO
orderBusinessDocumentsDTODecoder =
    Json.Decode.succeed OrderBusinessDocumentsDTO
        |> maybeDecode "upd" documentDTODecoder Nothing
        |> maybeDecode "ukd" documentDTODecoder Nothing
        |> maybeDecode "torgTwelve" documentDTODecoder Nothing
        |> maybeDecode "sf" documentDTODecoder Nothing
        |> maybeDecode "ksf" documentDTODecoder Nothing


orderBuyerBasicInfoDTODecoder : Json.Decode.Decoder OrderBuyerBasicInfoDTO
orderBuyerBasicInfoDTODecoder =
    Json.Decode.succeed OrderBuyerBasicInfoDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "lastName" Json.Decode.string Nothing
        |> maybeDecode "firstName" Json.Decode.string Nothing
        |> maybeDecode "middleName" Json.Decode.string Nothing
        |> maybeDecode "type" orderBuyerTypeDecoder Nothing


orderBuyerDTODecoder : Json.Decode.Decoder OrderBuyerDTO
orderBuyerDTODecoder =
    Json.Decode.succeed OrderBuyerDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "lastName" Json.Decode.string Nothing
        |> maybeDecode "firstName" Json.Decode.string Nothing
        |> maybeDecode "middleName" Json.Decode.string Nothing
        |> maybeDecode "type" orderBuyerTypeDecoder Nothing


orderBuyerInfoDTODecoder : Json.Decode.Decoder OrderBuyerInfoDTO
orderBuyerInfoDTODecoder =
    Json.Decode.succeed OrderBuyerInfoDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "lastName" Json.Decode.string Nothing
        |> maybeDecode "firstName" Json.Decode.string Nothing
        |> maybeDecode "middleName" Json.Decode.string Nothing
        |> maybeDecode "type" orderBuyerTypeDecoder Nothing
        |> maybeDecode "phone" Json.Decode.string Nothing


orderBuyerTypeDecoder : Json.Decode.Decoder OrderBuyerType
orderBuyerTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PERSON" ->
                        Json.Decode.succeed OrderBuyerTypePERSON

                    "BUSINESS" ->
                        Json.Decode.succeed OrderBuyerTypeBUSINESS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderCancellationReasonTypeDecoder : Json.Decode.Decoder OrderCancellationReasonType
orderCancellationReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ORDER_DELIVERED" ->
                        Json.Decode.succeed OrderCancellationReasonTypeDELIVERED

                    "ORDER_IN_DELIVERY" ->
                        Json.Decode.succeed OrderCancellationReasonTypeINDELIVERY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderCourierDTODecoder : Json.Decode.Decoder OrderCourierDTO
orderCourierDTODecoder =
    Json.Decode.succeed OrderCourierDTO
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "phone" Json.Decode.string Nothing
        |> maybeDecode "phoneExtension" Json.Decode.string Nothing
        |> maybeDecode "vehicleNumber" Json.Decode.string Nothing
        |> maybeDecode "vehicleDescription" Json.Decode.string Nothing


orderDTODecoder : Json.Decode.Decoder OrderDTO
orderDTODecoder =
    Json.Decode.succeed OrderDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "status" orderStatusTypeDecoder Nothing
        |> maybeDecode "substatus" orderSubstatusTypeDecoder Nothing
        |> maybeDecode "creationDate" Json.Decode.string Nothing
        |> maybeDecode "updatedAt" Json.Decode.string Nothing
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "itemsTotal" Json.Decode.float Nothing
        |> maybeDecode "deliveryTotal" Json.Decode.float Nothing
        |> maybeDecode "buyerItemsTotal" Json.Decode.float Nothing
        |> maybeDecode "buyerTotal" Json.Decode.float Nothing
        |> maybeDecode "buyerItemsTotalBeforeDiscount" Json.Decode.float Nothing
        |> maybeDecode "buyerTotalBeforeDiscount" Json.Decode.float Nothing
        |> maybeDecode "paymentType" orderPaymentTypeDecoder Nothing
        |> maybeDecode "paymentMethod" orderPaymentMethodTypeDecoder Nothing
        |> maybeDecode "fake" Json.Decode.bool Nothing
        |> decode "items" (Json.Decode.list orderItemDTODecoder) 
        |> maybeDecodeNullable "subsidies" (Json.Decode.list orderSubsidyDTODecoder) Nothing
        |> maybeDecode "delivery" orderDeliveryDTODecoder Nothing
        |> maybeDecode "buyer" orderBuyerDTODecoder Nothing
        |> maybeDecode "notes" Json.Decode.string Nothing
        |> maybeDecode "taxSystem" orderTaxSystemTypeDecoder Nothing
        |> maybeDecode "cancelRequested" Json.Decode.bool Nothing
        |> maybeDecode "expiryDate" Json.Decode.string Nothing


orderDeliveryAddressDTODecoder : Json.Decode.Decoder OrderDeliveryAddressDTO
orderDeliveryAddressDTODecoder =
    Json.Decode.succeed OrderDeliveryAddressDTO
        |> maybeDecode "country" Json.Decode.string Nothing
        |> maybeDecode "postcode" Json.Decode.string Nothing
        |> maybeDecode "city" Json.Decode.string Nothing
        |> maybeDecode "district" Json.Decode.string Nothing
        |> maybeDecode "subway" Json.Decode.string Nothing
        |> maybeDecode "street" Json.Decode.string Nothing
        |> maybeDecode "house" Json.Decode.string Nothing
        |> maybeDecode "block" Json.Decode.string Nothing
        |> maybeDecode "entrance" Json.Decode.string Nothing
        |> maybeDecode "entryphone" Json.Decode.string Nothing
        |> maybeDecode "floor" Json.Decode.string Nothing
        |> maybeDecode "apartment" Json.Decode.string Nothing
        |> maybeDecode "phone" Json.Decode.string Nothing
        |> maybeDecode "recipient" Json.Decode.string Nothing
        |> maybeDecode "gps" gpsDTODecoder Nothing


orderDeliveryDTODecoder : Json.Decode.Decoder OrderDeliveryDTO
orderDeliveryDTODecoder =
    Json.Decode.succeed OrderDeliveryDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "type" orderDeliveryTypeDecoder Nothing
        |> maybeDecode "serviceName" Json.Decode.string Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "deliveryPartnerType" orderDeliveryPartnerTypeDecoder Nothing
        |> maybeDecode "courier" orderCourierDTODecoder Nothing
        |> maybeDecode "dates" orderDeliveryDatesDTODecoder Nothing
        |> maybeDecode "region" regionDTODecoder Nothing
        |> maybeDecode "address" orderDeliveryAddressDTODecoder Nothing
        |> maybeDecode "vat" orderVatTypeDecoder Nothing
        |> maybeDecode "deliveryServiceId" Json.Decode.int Nothing
        |> maybeDecode "liftType" orderLiftTypeDecoder Nothing
        |> maybeDecode "liftPrice" Json.Decode.float Nothing
        |> maybeDecode "outletCode" Json.Decode.string Nothing
        |> maybeDecode "outletStorageLimitDate" Json.Decode.string Nothing
        |> maybeDecode "dispatchType" orderDeliveryDispatchTypeDecoder Nothing
        |> maybeDecodeNullable "tracks" (Json.Decode.list orderTrackDTODecoder) Nothing
        |> maybeDecodeNullable "shipments" (Json.Decode.list orderShipmentDTODecoder) Nothing
        |> maybeDecode "estimated" Json.Decode.bool Nothing
        |> maybeDecode "eacType" orderDeliveryEacTypeDecoder Nothing
        |> maybeDecode "eacCode" Json.Decode.string Nothing


orderDeliveryDateDTODecoder : Json.Decode.Decoder OrderDeliveryDateDTO
orderDeliveryDateDTODecoder =
    Json.Decode.succeed OrderDeliveryDateDTO
        |> decode "toDate" Api.Time.dateDecoder 


orderDeliveryDateReasonTypeDecoder : Json.Decode.Decoder OrderDeliveryDateReasonType
orderDeliveryDateReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "USER_MOVED_DELIVERY_DATES" ->
                        Json.Decode.succeed OrderDeliveryDateReasonTypeUSERMOVEDDELIVERYDATES

                    "PARTNER_MOVED_DELIVERY_DATES" ->
                        Json.Decode.succeed OrderDeliveryDateReasonTypePARTNERMOVEDDELIVERYDATES

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderDeliveryDatesDTODecoder : Json.Decode.Decoder OrderDeliveryDatesDTO
orderDeliveryDatesDTODecoder =
    Json.Decode.succeed OrderDeliveryDatesDTO
        |> maybeDecode "fromDate" Json.Decode.string Nothing
        |> maybeDecode "toDate" Json.Decode.string Nothing
        |> maybeDecode "fromTime" Json.Decode.string Nothing
        |> maybeDecode "toTime" Json.Decode.string Nothing
        |> maybeDecode "realDeliveryDate" Json.Decode.string Nothing


orderDeliveryDispatchTypeDecoder : Json.Decode.Decoder OrderDeliveryDispatchType
orderDeliveryDispatchTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNKNOWN" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeUNKNOWN

                    "BUYER" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeBUYER

                    "MARKET_PARTNER_OUTLET" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeMARKETPARTNEROUTLET

                    "MARKET_BRANDED_OUTLET" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeMARKETBRANDEDOUTLET

                    "SHOP_OUTLET" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeSHOPOUTLET

                    "DROPOFF" ->
                        Json.Decode.succeed OrderDeliveryDispatchTypeDROPOFF

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderDeliveryEacTypeDecoder : Json.Decode.Decoder OrderDeliveryEacType
orderDeliveryEacTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MERCHANT_TO_COURIER" ->
                        Json.Decode.succeed OrderDeliveryEacTypeMERCHANTTOCOURIER

                    "COURIER_TO_MERCHANT" ->
                        Json.Decode.succeed OrderDeliveryEacTypeCOURIERTOMERCHANT

                    "CHECKING_BY_MERCHANT" ->
                        Json.Decode.succeed OrderDeliveryEacTypeCHECKINGBYMERCHANT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderDeliveryPartnerTypeDecoder : Json.Decode.Decoder OrderDeliveryPartnerType
orderDeliveryPartnerTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SHOP" ->
                        Json.Decode.succeed OrderDeliveryPartnerTypeSHOP

                    "YANDEX_MARKET" ->
                        Json.Decode.succeed OrderDeliveryPartnerTypeYANDEXMARKET

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderDeliveryPartnerTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderDeliveryTypeDecoder : Json.Decode.Decoder OrderDeliveryType
orderDeliveryTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DELIVERY" ->
                        Json.Decode.succeed OrderDeliveryTypeDELIVERY

                    "PICKUP" ->
                        Json.Decode.succeed OrderDeliveryTypePICKUP

                    "POST" ->
                        Json.Decode.succeed OrderDeliveryTypePOST

                    "DIGITAL" ->
                        Json.Decode.succeed OrderDeliveryTypeDIGITAL

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderDeliveryTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderDigitalItemDTODecoder : Json.Decode.Decoder OrderDigitalItemDTO
orderDigitalItemDTODecoder =
    Json.Decode.succeed OrderDigitalItemDTO
        |> decode "id" Json.Decode.int 
        |> decode "code" Json.Decode.string 
        |> decode "slip" Json.Decode.string 
        |> decode "activate_till" Api.Time.dateDecoder 


orderDocumentStatusTypeDecoder : Json.Decode.Decoder OrderDocumentStatusType
orderDocumentStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "READY" ->
                        Json.Decode.succeed OrderDocumentStatusTypeREADY

                    "NOT_READY" ->
                        Json.Decode.succeed OrderDocumentStatusTypeNOTREADY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderItemDTODecoder : Json.Decode.Decoder OrderItemDTO
orderItemDTODecoder =
    Json.Decode.succeed OrderItemDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "offerName" Json.Decode.string Nothing
        |> maybeDecode "price" Json.Decode.float Nothing
        |> maybeDecode "buyerPrice" Json.Decode.float Nothing
        |> maybeDecode "buyerPriceBeforeDiscount" Json.Decode.float Nothing
        |> maybeDecode "priceBeforeDiscount" Json.Decode.float Nothing
        |> maybeDecode "count" Json.Decode.int Nothing
        |> maybeDecode "vat" orderVatTypeDecoder Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "subsidy" Json.Decode.float Nothing
        |> maybeDecode "partnerWarehouseId" Json.Decode.string Nothing
        |> maybeDecodeNullable "promos" (Json.Decode.list orderItemPromoDTODecoder) Nothing
        |> maybeDecodeNullable "instances" (Json.Decode.list orderItemInstanceDTODecoder) Nothing
        |> maybeDecodeNullable "details" (Json.Decode.list orderItemDetailDTODecoder) Nothing
        |> maybeDecodeNullable "subsidies" (Json.Decode.list orderItemSubsidyDTODecoder) Nothing
        |> maybeDecodeNullable "requiredInstanceTypes" (Json.Decode.list orderItemInstanceTypeDecoder) Nothing


orderItemDetailDTODecoder : Json.Decode.Decoder OrderItemDetailDTO
orderItemDetailDTODecoder =
    Json.Decode.succeed OrderItemDetailDTO
        |> maybeDecode "itemCount" Json.Decode.int Nothing
        |> maybeDecode "itemStatus" orderItemStatusTypeDecoder Nothing
        |> maybeDecode "updateDate" Json.Decode.string Nothing


orderItemInstanceDTODecoder : Json.Decode.Decoder OrderItemInstanceDTO
orderItemInstanceDTODecoder =
    Json.Decode.succeed OrderItemInstanceDTO
        |> maybeDecode "cis" Json.Decode.string Nothing
        |> maybeDecode "cisFull" Json.Decode.string Nothing
        |> maybeDecode "uin" Json.Decode.string Nothing
        |> maybeDecode "rnpt" Json.Decode.string Nothing
        |> maybeDecode "gtd" Json.Decode.string Nothing


orderItemInstanceModificationDTODecoder : Json.Decode.Decoder OrderItemInstanceModificationDTO
orderItemInstanceModificationDTODecoder =
    Json.Decode.succeed OrderItemInstanceModificationDTO
        |> decode "id" Json.Decode.int 
        |> decode "instances" (Json.Decode.list briefOrderItemInstanceDTODecoder) 


orderItemInstanceTypeDecoder : Json.Decode.Decoder OrderItemInstanceType
orderItemInstanceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CIS" ->
                        Json.Decode.succeed OrderItemInstanceTypeCIS

                    "UIN" ->
                        Json.Decode.succeed OrderItemInstanceTypeUIN

                    "RNPT" ->
                        Json.Decode.succeed OrderItemInstanceTypeRNPT

                    "GTD" ->
                        Json.Decode.succeed OrderItemInstanceTypeGTD

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderItemModificationDTODecoder : Json.Decode.Decoder OrderItemModificationDTO
orderItemModificationDTODecoder =
    Json.Decode.succeed OrderItemModificationDTO
        |> decode "id" Json.Decode.int 
        |> decode "count" Json.Decode.int 
        |> maybeDecodeNullable "instances" (Json.Decode.list briefOrderItemInstanceDTODecoder) Nothing


orderItemPromoDTODecoder : Json.Decode.Decoder OrderItemPromoDTO
orderItemPromoDTODecoder =
    Json.Decode.succeed OrderItemPromoDTO
        |> decode "type" orderPromoTypeDecoder 
        |> maybeDecode "discount" Json.Decode.float Nothing
        |> maybeDecode "subsidy" Json.Decode.float Nothing
        |> maybeDecode "shopPromoId" Json.Decode.string Nothing
        |> maybeDecode "marketPromoId" Json.Decode.string Nothing


orderItemStatusTypeDecoder : Json.Decode.Decoder OrderItemStatusType
orderItemStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "REJECTED" ->
                        Json.Decode.succeed OrderItemStatusTypeREJECTED

                    "RETURNED" ->
                        Json.Decode.succeed OrderItemStatusTypeRETURNED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderItemSubsidyDTODecoder : Json.Decode.Decoder OrderItemSubsidyDTO
orderItemSubsidyDTODecoder =
    Json.Decode.succeed OrderItemSubsidyDTO
        |> maybeDecode "type" orderItemSubsidyTypeDecoder Nothing
        |> maybeDecode "amount" Json.Decode.float Nothing


orderItemSubsidyTypeDecoder : Json.Decode.Decoder OrderItemSubsidyType
orderItemSubsidyTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "YANDEX_CASHBACK" ->
                        Json.Decode.succeed OrderItemSubsidyTypeYANDEXCASHBACK

                    "SUBSIDY" ->
                        Json.Decode.succeed OrderItemSubsidyTypeSUBSIDY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderItemsModificationRequestReasonTypeDecoder : Json.Decode.Decoder OrderItemsModificationRequestReasonType
orderItemsModificationRequestReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PARTNER_REQUESTED_REMOVE" ->
                        Json.Decode.succeed OrderItemsModificationRequestReasonTypePARTNERREQUESTEDREMOVE

                    "USER_REQUESTED_REMOVE" ->
                        Json.Decode.succeed OrderItemsModificationRequestReasonTypeUSERREQUESTEDREMOVE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderItemsModificationResultDTODecoder : Json.Decode.Decoder OrderItemsModificationResultDTO
orderItemsModificationResultDTODecoder =
    Json.Decode.succeed OrderItemsModificationResultDTO
        |> decode "items" (Json.Decode.list briefOrderItemDTODecoder) 


orderLabelDTODecoder : Json.Decode.Decoder OrderLabelDTO
orderLabelDTODecoder =
    Json.Decode.succeed OrderLabelDTO
        |> decode "orderId" Json.Decode.int 
        |> decode "placesNumber" Json.Decode.int 
        |> decode "url" Json.Decode.string 
        |> decode "parcelBoxLabels" (Json.Decode.list parcelBoxLabelDTODecoder) 


orderLiftTypeDecoder : Json.Decode.Decoder OrderLiftType
orderLiftTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NOT_NEEDED" ->
                        Json.Decode.succeed OrderLiftTypeNOTNEEDED

                    "MANUAL" ->
                        Json.Decode.succeed OrderLiftTypeMANUAL

                    "ELEVATOR" ->
                        Json.Decode.succeed OrderLiftTypeELEVATOR

                    "CARGO_ELEVATOR" ->
                        Json.Decode.succeed OrderLiftTypeCARGOELEVATOR

                    "FREE" ->
                        Json.Decode.succeed OrderLiftTypeFREE

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderLiftTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderParcelBoxDTODecoder : Json.Decode.Decoder OrderParcelBoxDTO
orderParcelBoxDTODecoder =
    Json.Decode.succeed OrderParcelBoxDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "fulfilmentId" Json.Decode.string Nothing


orderPaymentMethodTypeDecoder : Json.Decode.Decoder OrderPaymentMethodType
orderPaymentMethodTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CASH_ON_DELIVERY" ->
                        Json.Decode.succeed OrderPaymentMethodTypeCASHONDELIVERY

                    "CARD_ON_DELIVERY" ->
                        Json.Decode.succeed OrderPaymentMethodTypeCARDONDELIVERY

                    "BOUND_CARD_ON_DELIVERY" ->
                        Json.Decode.succeed OrderPaymentMethodTypeBOUNDCARDONDELIVERY

                    "YANDEX" ->
                        Json.Decode.succeed OrderPaymentMethodTypeYANDEX

                    "APPLE_PAY" ->
                        Json.Decode.succeed OrderPaymentMethodTypeAPPLEPAY

                    "EXTERNAL_CERTIFICATE" ->
                        Json.Decode.succeed OrderPaymentMethodTypeEXTERNALCERTIFICATE

                    "CREDIT" ->
                        Json.Decode.succeed OrderPaymentMethodTypeCREDIT

                    "GOOGLE_PAY" ->
                        Json.Decode.succeed OrderPaymentMethodTypeGOOGLEPAY

                    "TINKOFF_CREDIT" ->
                        Json.Decode.succeed OrderPaymentMethodTypeTINKOFFCREDIT

                    "SBP" ->
                        Json.Decode.succeed OrderPaymentMethodTypeSBP

                    "TINKOFF_INSTALLMENTS" ->
                        Json.Decode.succeed OrderPaymentMethodTypeTINKOFFINSTALLMENTS

                    "B2B_ACCOUNT_PREPAYMENT" ->
                        Json.Decode.succeed OrderPaymentMethodTypeB2BACCOUNTPREPAYMENT

                    "B2B_ACCOUNT_POSTPAYMENT" ->
                        Json.Decode.succeed OrderPaymentMethodTypeB2BACCOUNTPOSTPAYMENT

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderPaymentMethodTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderPaymentTypeDecoder : Json.Decode.Decoder OrderPaymentType
orderPaymentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PREPAID" ->
                        Json.Decode.succeed OrderPaymentTypePREPAID

                    "POSTPAID" ->
                        Json.Decode.succeed OrderPaymentTypePOSTPAID

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderPaymentTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderPromoTypeDecoder : Json.Decode.Decoder OrderPromoType
orderPromoTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DIRECT_DISCOUNT" ->
                        Json.Decode.succeed OrderPromoTypeDIRECTDISCOUNT

                    "BLUE_SET" ->
                        Json.Decode.succeed OrderPromoTypeBLUESET

                    "BLUE_FLASH" ->
                        Json.Decode.succeed OrderPromoTypeBLUEFLASH

                    "GENERIC_BUNDLE" ->
                        Json.Decode.succeed OrderPromoTypeGENERICBUNDLE

                    "MARKET_COUPON" ->
                        Json.Decode.succeed OrderPromoTypeMARKETCOUPON

                    "MARKET_PROMOCODE" ->
                        Json.Decode.succeed OrderPromoTypeMARKETPROMOCODE

                    "MARKET_DEAL" ->
                        Json.Decode.succeed OrderPromoTypeMARKETDEAL

                    "MARKET_BLUE" ->
                        Json.Decode.succeed OrderPromoTypeMARKETBLUE

                    "MARKET_PRIME" ->
                        Json.Decode.succeed OrderPromoTypeMARKETPRIME

                    "YANDEX_PLUS" ->
                        Json.Decode.succeed OrderPromoTypeYANDEXPLUS

                    "BERU_PLUS" ->
                        Json.Decode.succeed OrderPromoTypeBERUPLUS

                    "MARKET_COIN" ->
                        Json.Decode.succeed OrderPromoTypeMARKETCOIN

                    "YANDEX_EMPLOYEE" ->
                        Json.Decode.succeed OrderPromoTypeYANDEXEMPLOYEE

                    "LIMITED_FREE_DELIVERY_PROMO" ->
                        Json.Decode.succeed OrderPromoTypeLIMITEDFREEDELIVERYPROMO

                    "FREE_DELIVERY_THRESHOLD" ->
                        Json.Decode.succeed OrderPromoTypeFREEDELIVERYTHRESHOLD

                    "MULTICART_DISCOUNT" ->
                        Json.Decode.succeed OrderPromoTypeMULTICARTDISCOUNT

                    "PRICE_DROP_AS_YOU_SHOP" ->
                        Json.Decode.succeed OrderPromoTypePRICEDROPASYOUSHOP

                    "FREE_DELIVERY_FOR_LDI" ->
                        Json.Decode.succeed OrderPromoTypeFREEDELIVERYFORLDI

                    "FREE_DELIVERY_FOR_LSC" ->
                        Json.Decode.succeed OrderPromoTypeFREEDELIVERYFORLSC

                    "SECRET_SALE" ->
                        Json.Decode.succeed OrderPromoTypeSECRETSALE

                    "FREE_PICKUP" ->
                        Json.Decode.succeed OrderPromoTypeFREEPICKUP

                    "CHEAPEST_AS_GIFT" ->
                        Json.Decode.succeed OrderPromoTypeCHEAPESTASGIFT

                    "CASHBACK" ->
                        Json.Decode.succeed OrderPromoTypeCASHBACK

                    "SUPPLIER_MULTICART_DISCOUNT" ->
                        Json.Decode.succeed OrderPromoTypeSUPPLIERMULTICARTDISCOUNT

                    "SPREAD_DISCOUNT_COUNT" ->
                        Json.Decode.succeed OrderPromoTypeSPREADDISCOUNTCOUNT

                    "SPREAD_DISCOUNT_RECEIPT" ->
                        Json.Decode.succeed OrderPromoTypeSPREADDISCOUNTRECEIPT

                    "ANNOUNCEMENT_PROMO" ->
                        Json.Decode.succeed OrderPromoTypeANNOUNCEMENTPROMO

                    "DISCOUNT_BY_PAYMENT_TYPE" ->
                        Json.Decode.succeed OrderPromoTypeDISCOUNTBYPAYMENTTYPE

                    "PERCENT_DISCOUNT" ->
                        Json.Decode.succeed OrderPromoTypePERCENTDISCOUNT

                    "DCO_EXTRA_DISCOUNT" ->
                        Json.Decode.succeed OrderPromoTypeDCOEXTRADISCOUNT

                    "EMPTY_PROMO" ->
                        Json.Decode.succeed OrderPromoTypeEMPTYPROMO

                    "BLOCKING_PROMO" ->
                        Json.Decode.succeed OrderPromoTypeBLOCKINGPROMO

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderPromoTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderShipmentDTODecoder : Json.Decode.Decoder OrderShipmentDTO
orderShipmentDTODecoder =
    Json.Decode.succeed OrderShipmentDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "shipmentDate" Json.Decode.string Nothing
        |> maybeDecode "shipmentTime" Json.Decode.string Nothing
        |> maybeDecodeNullable "tracks" (Json.Decode.list orderTrackDTODecoder) Nothing
        |> maybeDecodeNullable "boxes" (Json.Decode.list orderParcelBoxDTODecoder) Nothing


orderStateDTODecoder : Json.Decode.Decoder OrderStateDTO
orderStateDTODecoder =
    Json.Decode.succeed OrderStateDTO
        |> decode "id" Json.Decode.int 
        |> decode "status" orderStatusTypeDecoder 
        |> maybeDecode "substatus" orderSubstatusTypeDecoder Nothing


orderStatsStatusTypeDecoder : Json.Decode.Decoder OrderStatsStatusType
orderStatsStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CANCELLED_BEFORE_PROCESSING" ->
                        Json.Decode.succeed OrderStatsStatusTypeCANCELLEDBEFOREPROCESSING

                    "CANCELLED_IN_DELIVERY" ->
                        Json.Decode.succeed OrderStatsStatusTypeCANCELLEDINDELIVERY

                    "CANCELLED_IN_PROCESSING" ->
                        Json.Decode.succeed OrderStatsStatusTypeCANCELLEDINPROCESSING

                    "DELIVERY" ->
                        Json.Decode.succeed OrderStatsStatusTypeDELIVERY

                    "DELIVERED" ->
                        Json.Decode.succeed OrderStatsStatusTypeDELIVERED

                    "PARTIALLY_DELIVERED" ->
                        Json.Decode.succeed OrderStatsStatusTypePARTIALLYDELIVERED

                    "PARTIALLY_RETURNED" ->
                        Json.Decode.succeed OrderStatsStatusTypePARTIALLYRETURNED

                    "PENDING" ->
                        Json.Decode.succeed OrderStatsStatusTypePENDING

                    "PICKUP" ->
                        Json.Decode.succeed OrderStatsStatusTypePICKUP

                    "PROCESSING" ->
                        Json.Decode.succeed OrderStatsStatusTypePROCESSING

                    "RESERVED" ->
                        Json.Decode.succeed OrderStatsStatusTypeRESERVED

                    "RETURNED" ->
                        Json.Decode.succeed OrderStatsStatusTypeRETURNED

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderStatsStatusTypeUNKNOWN

                    "UNPAID" ->
                        Json.Decode.succeed OrderStatsStatusTypeUNPAID

                    "LOST" ->
                        Json.Decode.succeed OrderStatsStatusTypeLOST

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderStatusChangeDTODecoder : Json.Decode.Decoder OrderStatusChangeDTO
orderStatusChangeDTODecoder =
    Json.Decode.succeed OrderStatusChangeDTO
        |> decode "status" orderStatusTypeDecoder 
        |> maybeDecode "substatus" orderSubstatusTypeDecoder Nothing
        |> maybeDecode "delivery" orderStatusChangeDeliveryDTODecoder Nothing


orderStatusChangeDeliveryDTODecoder : Json.Decode.Decoder OrderStatusChangeDeliveryDTO
orderStatusChangeDeliveryDTODecoder =
    Json.Decode.succeed OrderStatusChangeDeliveryDTO
        |> maybeDecode "dates" orderStatusChangeDeliveryDatesDTODecoder Nothing


orderStatusChangeDeliveryDatesDTODecoder : Json.Decode.Decoder OrderStatusChangeDeliveryDatesDTO
orderStatusChangeDeliveryDatesDTODecoder =
    Json.Decode.succeed OrderStatusChangeDeliveryDatesDTO
        |> maybeDecode "realDeliveryDate" Api.Time.dateDecoder Nothing


orderStatusTypeDecoder : Json.Decode.Decoder OrderStatusType
orderStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PLACING" ->
                        Json.Decode.succeed OrderStatusTypePLACING

                    "RESERVED" ->
                        Json.Decode.succeed OrderStatusTypeRESERVED

                    "UNPAID" ->
                        Json.Decode.succeed OrderStatusTypeUNPAID

                    "PROCESSING" ->
                        Json.Decode.succeed OrderStatusTypePROCESSING

                    "DELIVERY" ->
                        Json.Decode.succeed OrderStatusTypeDELIVERY

                    "PICKUP" ->
                        Json.Decode.succeed OrderStatusTypePICKUP

                    "DELIVERED" ->
                        Json.Decode.succeed OrderStatusTypeDELIVERED

                    "CANCELLED" ->
                        Json.Decode.succeed OrderStatusTypeCANCELLED

                    "PENDING" ->
                        Json.Decode.succeed OrderStatusTypePENDING

                    "PARTIALLY_RETURNED" ->
                        Json.Decode.succeed OrderStatusTypePARTIALLYRETURNED

                    "RETURNED" ->
                        Json.Decode.succeed OrderStatusTypeRETURNED

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderStatusTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderSubsidyDTODecoder : Json.Decode.Decoder OrderSubsidyDTO
orderSubsidyDTODecoder =
    Json.Decode.succeed OrderSubsidyDTO
        |> maybeDecode "type" orderSubsidyTypeDecoder Nothing
        |> maybeDecode "amount" Json.Decode.float Nothing


orderSubsidyTypeDecoder : Json.Decode.Decoder OrderSubsidyType
orderSubsidyTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "YANDEX_CASHBACK" ->
                        Json.Decode.succeed OrderSubsidyTypeYANDEXCASHBACK

                    "SUBSIDY" ->
                        Json.Decode.succeed OrderSubsidyTypeSUBSIDY

                    "DELIVERY" ->
                        Json.Decode.succeed OrderSubsidyTypeDELIVERY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderSubstatusTypeDecoder : Json.Decode.Decoder OrderSubstatusType
orderSubstatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "RESERVATION_EXPIRED" ->
                        Json.Decode.succeed OrderSubstatusTypeRESERVATIONEXPIRED

                    "USER_NOT_PAID" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERNOTPAID

                    "USER_UNREACHABLE" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERUNREACHABLE

                    "USER_CHANGED_MIND" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERCHANGEDMIND

                    "USER_REFUSED_DELIVERY" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERREFUSEDDELIVERY

                    "USER_REFUSED_PRODUCT" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERREFUSEDPRODUCT

                    "SHOP_FAILED" ->
                        Json.Decode.succeed OrderSubstatusTypeSHOPFAILED

                    "USER_REFUSED_QUALITY" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERREFUSEDQUALITY

                    "REPLACING_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeREPLACINGORDER

                    "PROCESSING_EXPIRED" ->
                        Json.Decode.succeed OrderSubstatusTypePROCESSINGEXPIRED

                    "PENDING_EXPIRED" ->
                        Json.Decode.succeed OrderSubstatusTypePENDINGEXPIRED

                    "SHOP_PENDING_CANCELLED" ->
                        Json.Decode.succeed OrderSubstatusTypeSHOPPENDINGCANCELLED

                    "PENDING_CANCELLED" ->
                        Json.Decode.succeed OrderSubstatusTypePENDINGCANCELLED

                    "USER_FRAUD" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERFRAUD

                    "RESERVATION_FAILED" ->
                        Json.Decode.succeed OrderSubstatusTypeRESERVATIONFAILED

                    "USER_PLACED_OTHER_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERPLACEDOTHERORDER

                    "USER_BOUGHT_CHEAPER" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERBOUGHTCHEAPER

                    "MISSING_ITEM" ->
                        Json.Decode.succeed OrderSubstatusTypeMISSINGITEM

                    "BROKEN_ITEM" ->
                        Json.Decode.succeed OrderSubstatusTypeBROKENITEM

                    "WRONG_ITEM" ->
                        Json.Decode.succeed OrderSubstatusTypeWRONGITEM

                    "PICKUP_EXPIRED" ->
                        Json.Decode.succeed OrderSubstatusTypePICKUPEXPIRED

                    "DELIVERY_PROBLEMS" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYPROBLEMS

                    "LATE_CONTACT" ->
                        Json.Decode.succeed OrderSubstatusTypeLATECONTACT

                    "CUSTOM" ->
                        Json.Decode.succeed OrderSubstatusTypeCUSTOM

                    "DELIVERY_SERVICE_FAILED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICEFAILED

                    "WAREHOUSE_FAILED_TO_SHIP" ->
                        Json.Decode.succeed OrderSubstatusTypeWAREHOUSEFAILEDTOSHIP

                    "DELIVERY_SERIVCE_UNDELIVERED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERIVCEUNDELIVERED

                    "DELIVERY_SERVICE_UNDELIVERED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICEUNDELIVERED

                    "PREORDER" ->
                        Json.Decode.succeed OrderSubstatusTypePREORDER

                    "AWAIT_CONFIRMATION" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITCONFIRMATION

                    "STARTED" ->
                        Json.Decode.succeed OrderSubstatusTypeSTARTED

                    "PACKAGING" ->
                        Json.Decode.succeed OrderSubstatusTypePACKAGING

                    "READY_TO_SHIP" ->
                        Json.Decode.succeed OrderSubstatusTypeREADYTOSHIP

                    "SHIPPED" ->
                        Json.Decode.succeed OrderSubstatusTypeSHIPPED

                    "ASYNC_PROCESSING" ->
                        Json.Decode.succeed OrderSubstatusTypeASYNCPROCESSING

                    "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERREFUSEDTOPROVIDEPERSONALDATA

                    "WAITING_USER_INPUT" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGUSERINPUT

                    "WAITING_BANK_DECISION" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGBANKDECISION

                    "BANK_REJECT_CREDIT_OFFER" ->
                        Json.Decode.succeed OrderSubstatusTypeBANKREJECTCREDITOFFER

                    "CUSTOMER_REJECT_CREDIT_OFFER" ->
                        Json.Decode.succeed OrderSubstatusTypeCUSTOMERREJECTCREDITOFFER

                    "CREDIT_OFFER_FAILED" ->
                        Json.Decode.succeed OrderSubstatusTypeCREDITOFFERFAILED

                    "AWAIT_DELIVERY_DATES_CONFIRMATION" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITDELIVERYDATESCONFIRMATION

                    "SERVICE_FAULT" ->
                        Json.Decode.succeed OrderSubstatusTypeSERVICEFAULT

                    "DELIVERY_SERVICE_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICERECEIVED

                    "USER_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERRECEIVED

                    "WAITING_FOR_STOCKS" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGFORSTOCKS

                    "AS_PART_OF_MULTI_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeASPARTOFMULTIORDER

                    "READY_FOR_LAST_MILE" ->
                        Json.Decode.succeed OrderSubstatusTypeREADYFORLASTMILE

                    "LAST_MILE_STARTED" ->
                        Json.Decode.succeed OrderSubstatusTypeLASTMILESTARTED

                    "ANTIFRAUD" ->
                        Json.Decode.succeed OrderSubstatusTypeANTIFRAUD

                    "DELIVERY_USER_NOT_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYUSERNOTRECEIVED

                    "DELIVERY_SERVICE_DELIVERED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICEDELIVERED

                    "DELIVERED_USER_NOT_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVEREDUSERNOTRECEIVED

                    "USER_WANTED_ANOTHER_PAYMENT_METHOD" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERWANTEDANOTHERPAYMENTMETHOD

                    "USER_RECEIVED_TECHNICAL_ERROR" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERRECEIVEDTECHNICALERROR

                    "USER_FORGOT_TO_USE_BONUS" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERFORGOTTOUSEBONUS

                    "RECEIVED_ON_DISTRIBUTION_CENTER" ->
                        Json.Decode.succeed OrderSubstatusTypeRECEIVEDONDISTRIBUTIONCENTER

                    "DELIVERY_SERVICE_NOT_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICENOTRECEIVED

                    "DELIVERY_SERVICE_LOST" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYSERVICELOST

                    "SHIPPED_TO_WRONG_DELIVERY_SERVICE" ->
                        Json.Decode.succeed OrderSubstatusTypeSHIPPEDTOWRONGDELIVERYSERVICE

                    "DELIVERED_USER_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVEREDUSERRECEIVED

                    "WAITING_TINKOFF_DECISION" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGTINKOFFDECISION

                    "COURIER_SEARCH" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERSEARCH

                    "COURIER_FOUND" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERFOUND

                    "COURIER_IN_TRANSIT_TO_SENDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERINTRANSITTOSENDER

                    "COURIER_ARRIVED_TO_SENDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERARRIVEDTOSENDER

                    "COURIER_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERRECEIVED

                    "COURIER_NOT_FOUND" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERNOTFOUND

                    "COURIER_NOT_DELIVER_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERNOTDELIVERORDER

                    "COURIER_RETURNS_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERRETURNSORDER

                    "COURIER_RETURNED_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERRETURNEDORDER

                    "WAITING_USER_DELIVERY_INPUT" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGUSERDELIVERYINPUT

                    "PICKUP_SERVICE_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypePICKUPSERVICERECEIVED

                    "PICKUP_USER_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypePICKUPUSERRECEIVED

                    "CANCELLED_COURIER_NOT_FOUND" ->
                        Json.Decode.succeed OrderSubstatusTypeCANCELLEDCOURIERNOTFOUND

                    "COURIER_NOT_COME_FOR_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERNOTCOMEFORORDER

                    "DELIVERY_NOT_MANAGED_REGION" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYNOTMANAGEDREGION

                    "INCOMPLETE_CONTACT_INFORMATION" ->
                        Json.Decode.succeed OrderSubstatusTypeINCOMPLETECONTACTINFORMATION

                    "INCOMPLETE_MULTI_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeINCOMPLETEMULTIORDER

                    "INAPPROPRIATE_WEIGHT_SIZE" ->
                        Json.Decode.succeed OrderSubstatusTypeINAPPROPRIATEWEIGHTSIZE

                    "TECHNICAL_ERROR" ->
                        Json.Decode.succeed OrderSubstatusTypeTECHNICALERROR

                    "SORTING_CENTER_LOST" ->
                        Json.Decode.succeed OrderSubstatusTypeSORTINGCENTERLOST

                    "COURIER_SEARCH_NOT_STARTED" ->
                        Json.Decode.succeed OrderSubstatusTypeCOURIERSEARCHNOTSTARTED

                    "LOST" ->
                        Json.Decode.succeed OrderSubstatusTypeLOST

                    "AWAIT_PAYMENT" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITPAYMENT

                    "AWAIT_LAVKA_RESERVATION" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITLAVKARESERVATION

                    "USER_WANTS_TO_CHANGE_ADDRESS" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERWANTSTOCHANGEADDRESS

                    "FULL_NOT_RANSOM" ->
                        Json.Decode.succeed OrderSubstatusTypeFULLNOTRANSOM

                    "PRESCRIPTION_MISMATCH" ->
                        Json.Decode.succeed OrderSubstatusTypePRESCRIPTIONMISMATCH

                    "DROPOFF_LOST" ->
                        Json.Decode.succeed OrderSubstatusTypeDROPOFFLOST

                    "DROPOFF_CLOSED" ->
                        Json.Decode.succeed OrderSubstatusTypeDROPOFFCLOSED

                    "DELIVERY_TO_STORE_STARTED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYTOSTORESTARTED

                    "USER_WANTS_TO_CHANGE_DELIVERY_DATE" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERWANTSTOCHANGEDELIVERYDATE

                    "WRONG_ITEM_DELIVERED" ->
                        Json.Decode.succeed OrderSubstatusTypeWRONGITEMDELIVERED

                    "DAMAGED_BOX" ->
                        Json.Decode.succeed OrderSubstatusTypeDAMAGEDBOX

                    "AWAIT_DELIVERY_DATES" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITDELIVERYDATES

                    "LAST_MILE_COURIER_SEARCH" ->
                        Json.Decode.succeed OrderSubstatusTypeLASTMILECOURIERSEARCH

                    "PICKUP_POINT_CLOSED" ->
                        Json.Decode.succeed OrderSubstatusTypePICKUPPOINTCLOSED

                    "LEGAL_INFO_CHANGED" ->
                        Json.Decode.succeed OrderSubstatusTypeLEGALINFOCHANGED

                    "USER_HAS_NO_TIME_TO_PICKUP_ORDER" ->
                        Json.Decode.succeed OrderSubstatusTypeUSERHASNOTIMETOPICKUPORDER

                    "DELIVERY_CUSTOMS_ARRIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYCUSTOMSARRIVED

                    "DELIVERY_CUSTOMS_CLEARED" ->
                        Json.Decode.succeed OrderSubstatusTypeDELIVERYCUSTOMSCLEARED

                    "FIRST_MILE_DELIVERY_SERVICE_RECEIVED" ->
                        Json.Decode.succeed OrderSubstatusTypeFIRSTMILEDELIVERYSERVICERECEIVED

                    "AWAIT_AUTO_DELIVERY_DATES" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITAUTODELIVERYDATES

                    "AWAIT_USER_PERSONAL_DATA" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITUSERPERSONALDATA

                    "NO_PERSONAL_DATA_EXPIRED" ->
                        Json.Decode.succeed OrderSubstatusTypeNOPERSONALDATAEXPIRED

                    "CUSTOMS_PROBLEMS" ->
                        Json.Decode.succeed OrderSubstatusTypeCUSTOMSPROBLEMS

                    "AWAIT_CASHIER" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITCASHIER

                    "WAITING_POSTPAID_BUDGET_RESERVATION" ->
                        Json.Decode.succeed OrderSubstatusTypeWAITINGPOSTPAIDBUDGETRESERVATION

                    "AWAIT_SERVICEABLE_CONFIRMATION" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITSERVICEABLECONFIRMATION

                    "POSTPAID_BUDGET_RESERVATION_FAILED" ->
                        Json.Decode.succeed OrderSubstatusTypePOSTPAIDBUDGETRESERVATIONFAILED

                    "AWAIT_CUSTOM_PRICE_CONFIRMATION" ->
                        Json.Decode.succeed OrderSubstatusTypeAWAITCUSTOMPRICECONFIRMATION

                    "READY_FOR_PICKUP" ->
                        Json.Decode.succeed OrderSubstatusTypeREADYFORPICKUP

                    "UNKNOWN" ->
                        Json.Decode.succeed OrderSubstatusTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderTaxSystemTypeDecoder : Json.Decode.Decoder OrderTaxSystemType
orderTaxSystemTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OSN" ->
                        Json.Decode.succeed OrderTaxSystemTypeOSN

                    "USN" ->
                        Json.Decode.succeed OrderTaxSystemTypeUSN

                    "USN_MINUS_COST" ->
                        Json.Decode.succeed OrderTaxSystemTypeUSNMINUSCOST

                    "ENVD" ->
                        Json.Decode.succeed OrderTaxSystemTypeENVD

                    "ECHN" ->
                        Json.Decode.succeed OrderTaxSystemTypeECHN

                    "PSN" ->
                        Json.Decode.succeed OrderTaxSystemTypePSN

                    "NPD" ->
                        Json.Decode.succeed OrderTaxSystemTypeNPD

                    "UNKNOWN_VALUE" ->
                        Json.Decode.succeed OrderTaxSystemTypeUNKNOWNVALUE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderTrackDTODecoder : Json.Decode.Decoder OrderTrackDTO
orderTrackDTODecoder =
    Json.Decode.succeed OrderTrackDTO
        |> maybeDecode "trackCode" Json.Decode.string Nothing
        |> maybeDecode "deliveryServiceId" Json.Decode.int Nothing


orderUpdateStatusTypeDecoder : Json.Decode.Decoder OrderUpdateStatusType
orderUpdateStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OK" ->
                        Json.Decode.succeed OrderUpdateStatusTypeOK

                    "ERROR" ->
                        Json.Decode.succeed OrderUpdateStatusTypeERROR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


orderVatTypeDecoder : Json.Decode.Decoder OrderVatType
orderVatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NO_VAT" ->
                        Json.Decode.succeed OrderVatTypeNOVAT

                    "VAT_0" ->
                        Json.Decode.succeed OrderVatTypeVAT0

                    "VAT_10" ->
                        Json.Decode.succeed OrderVatTypeVAT10

                    "VAT_10_110" ->
                        Json.Decode.succeed OrderVatTypeVAT10110

                    "VAT_20" ->
                        Json.Decode.succeed OrderVatTypeVAT20

                    "VAT_20_120" ->
                        Json.Decode.succeed OrderVatTypeVAT20120

                    "VAT_18" ->
                        Json.Decode.succeed OrderVatTypeVAT18

                    "VAT_18_118" ->
                        Json.Decode.succeed OrderVatTypeVAT18118

                    "UNKNOWN_VALUE" ->
                        Json.Decode.succeed OrderVatTypeUNKNOWNVALUE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersShipmentInfoDTODecoder : Json.Decode.Decoder OrdersShipmentInfoDTO
ordersShipmentInfoDTODecoder =
    Json.Decode.succeed OrdersShipmentInfoDTO
        |> decode "orderIdsWithLabels" (Json.Decode.list Json.Decode.int) 
        |> decode "orderIdsWithoutLabels" (Json.Decode.list Json.Decode.int) 


ordersStatsCommissionDTODecoder : Json.Decode.Decoder OrdersStatsCommissionDTO
ordersStatsCommissionDTODecoder =
    Json.Decode.succeed OrdersStatsCommissionDTO
        |> maybeDecode "type" ordersStatsCommissionTypeDecoder Nothing
        |> maybeDecode "actual" Json.Decode.float Nothing


ordersStatsCommissionTypeDecoder : Json.Decode.Decoder OrdersStatsCommissionType
ordersStatsCommissionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FEE" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeFEE

                    "FULFILLMENT" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeFULFILLMENT

                    "LOYALTY_PARTICIPATION_FEE" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeLOYALTYPARTICIPATIONFEE

                    "AUCTION_PROMOTION" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeAUCTIONPROMOTION

                    "INSTALLMENT" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeINSTALLMENT

                    "DELIVERY_TO_CUSTOMER" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeDELIVERYTOCUSTOMER

                    "EXPRESS_DELIVERY_TO_CUSTOMER" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeEXPRESSDELIVERYTOCUSTOMER

                    "AGENCY" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeAGENCY

                    "PAYMENT_TRANSFER" ->
                        Json.Decode.succeed OrdersStatsCommissionTypePAYMENTTRANSFER

                    "RETURNED_ORDERS_STORAGE" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeRETURNEDORDERSSTORAGE

                    "SORTING" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeSORTING

                    "INTAKE_SORTING" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeINTAKESORTING

                    "RETURN_PROCESSING" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeRETURNPROCESSING

                    "ILLIQUID_GOODS_SALE" ->
                        Json.Decode.succeed OrdersStatsCommissionTypeILLIQUIDGOODSSALE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsDTODecoder : Json.Decode.Decoder OrdersStatsDTO
ordersStatsDTODecoder =
    Json.Decode.succeed OrdersStatsDTO
        |> decode "orders" (Json.Decode.list ordersStatsOrderDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


ordersStatsDeliveryRegionDTODecoder : Json.Decode.Decoder OrdersStatsDeliveryRegionDTO
ordersStatsDeliveryRegionDTODecoder =
    Json.Decode.succeed OrdersStatsDeliveryRegionDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


ordersStatsDetailsDTODecoder : Json.Decode.Decoder OrdersStatsDetailsDTO
ordersStatsDetailsDTODecoder =
    Json.Decode.succeed OrdersStatsDetailsDTO
        |> maybeDecode "itemStatus" ordersStatsItemStatusTypeDecoder Nothing
        |> maybeDecode "itemCount" Json.Decode.int Nothing
        |> maybeDecode "updateDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "stockType" ordersStatsStockTypeDecoder Nothing


ordersStatsItemDTODecoder : Json.Decode.Decoder OrdersStatsItemDTO
ordersStatsItemDTODecoder =
    Json.Decode.succeed OrdersStatsItemDTO
        |> maybeDecode "offerName" Json.Decode.string Nothing
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "count" Json.Decode.int Nothing
        |> maybeDecodeNullable "prices" (Json.Decode.list ordersStatsPriceDTODecoder) Nothing
        |> maybeDecode "warehouse" ordersStatsWarehouseDTODecoder Nothing
        |> maybeDecodeNullable "details" (Json.Decode.list ordersStatsDetailsDTODecoder) Nothing
        |> maybeDecodeNullable "cisList" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "initialCount" Json.Decode.int Nothing
        |> maybeDecode "bidFee" Json.Decode.int Nothing
        |> maybeDecode "cofinanceThreshold" Json.Decode.float Nothing
        |> maybeDecode "cofinanceValue" Json.Decode.float Nothing


ordersStatsItemStatusTypeDecoder : Json.Decode.Decoder OrdersStatsItemStatusType
ordersStatsItemStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "REJECTED" ->
                        Json.Decode.succeed OrdersStatsItemStatusTypeREJECTED

                    "RETURNED" ->
                        Json.Decode.succeed OrdersStatsItemStatusTypeRETURNED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsOrderDTODecoder : Json.Decode.Decoder OrdersStatsOrderDTO
ordersStatsOrderDTODecoder =
    Json.Decode.succeed OrdersStatsOrderDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "creationDate" Api.Time.dateDecoder Nothing
        |> maybeDecode "statusUpdateDate" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "status" orderStatsStatusTypeDecoder Nothing
        |> maybeDecode "partnerOrderId" Json.Decode.string Nothing
        |> maybeDecode "paymentType" ordersStatsOrderPaymentTypeDecoder Nothing
        |> maybeDecode "fake" Json.Decode.bool Nothing
        |> maybeDecode "deliveryRegion" ordersStatsDeliveryRegionDTODecoder Nothing
        |> decode "items" (Json.Decode.list ordersStatsItemDTODecoder) 
        |> maybeDecodeNullable "initialItems" (Json.Decode.list ordersStatsItemDTODecoder) Nothing
        |> decode "payments" (Json.Decode.list ordersStatsPaymentDTODecoder) 
        |> decode "commissions" (Json.Decode.list ordersStatsCommissionDTODecoder) 


ordersStatsOrderPaymentTypeDecoder : Json.Decode.Decoder OrdersStatsOrderPaymentType
ordersStatsOrderPaymentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREDIT" ->
                        Json.Decode.succeed OrdersStatsOrderPaymentTypeCREDIT

                    "POSTPAID" ->
                        Json.Decode.succeed OrdersStatsOrderPaymentTypePOSTPAID

                    "PREPAID" ->
                        Json.Decode.succeed OrdersStatsOrderPaymentTypePREPAID

                    "TINKOFF_CREDIT" ->
                        Json.Decode.succeed OrdersStatsOrderPaymentTypeTINKOFFCREDIT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsPaymentDTODecoder : Json.Decode.Decoder OrdersStatsPaymentDTO
ordersStatsPaymentDTODecoder =
    Json.Decode.succeed OrdersStatsPaymentDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "date" Api.Time.dateDecoder Nothing
        |> maybeDecode "type" ordersStatsPaymentTypeDecoder Nothing
        |> maybeDecode "source" ordersStatsPaymentSourceTypeDecoder Nothing
        |> maybeDecode "total" Json.Decode.float Nothing
        |> maybeDecode "paymentOrder" ordersStatsPaymentOrderDTODecoder Nothing


ordersStatsPaymentOrderDTODecoder : Json.Decode.Decoder OrdersStatsPaymentOrderDTO
ordersStatsPaymentOrderDTODecoder =
    Json.Decode.succeed OrdersStatsPaymentOrderDTO
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "date" Api.Time.dateDecoder Nothing


ordersStatsPaymentSourceTypeDecoder : Json.Decode.Decoder OrdersStatsPaymentSourceType
ordersStatsPaymentSourceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BUYER" ->
                        Json.Decode.succeed OrdersStatsPaymentSourceTypeBUYER

                    "CASHBACK" ->
                        Json.Decode.succeed OrdersStatsPaymentSourceTypeCASHBACK

                    "MARKETPLACE" ->
                        Json.Decode.succeed OrdersStatsPaymentSourceTypeMARKETPLACE

                    "SPLIT" ->
                        Json.Decode.succeed OrdersStatsPaymentSourceTypeSPLIT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsPaymentTypeDecoder : Json.Decode.Decoder OrdersStatsPaymentType
ordersStatsPaymentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PAYMENT" ->
                        Json.Decode.succeed OrdersStatsPaymentTypePAYMENT

                    "REFUND" ->
                        Json.Decode.succeed OrdersStatsPaymentTypeREFUND

                    "UNKNOWN" ->
                        Json.Decode.succeed OrdersStatsPaymentTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsPriceDTODecoder : Json.Decode.Decoder OrdersStatsPriceDTO
ordersStatsPriceDTODecoder =
    Json.Decode.succeed OrdersStatsPriceDTO
        |> maybeDecode "type" ordersStatsPriceTypeDecoder Nothing
        |> maybeDecode "costPerItem" Json.Decode.float Nothing
        |> maybeDecode "total" Json.Decode.float Nothing


ordersStatsPriceTypeDecoder : Json.Decode.Decoder OrdersStatsPriceType
ordersStatsPriceTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BUYER" ->
                        Json.Decode.succeed OrdersStatsPriceTypeBUYER

                    "CASHBACK" ->
                        Json.Decode.succeed OrdersStatsPriceTypeCASHBACK

                    "MARKETPLACE" ->
                        Json.Decode.succeed OrdersStatsPriceTypeMARKETPLACE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsStockTypeDecoder : Json.Decode.Decoder OrdersStatsStockType
ordersStatsStockTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIT" ->
                        Json.Decode.succeed OrdersStatsStockTypeFIT

                    "FREEZE" ->
                        Json.Decode.succeed OrdersStatsStockTypeFREEZE

                    "AVAILABLE" ->
                        Json.Decode.succeed OrdersStatsStockTypeAVAILABLE

                    "QUARANTINE" ->
                        Json.Decode.succeed OrdersStatsStockTypeQUARANTINE

                    "UTILIZATION" ->
                        Json.Decode.succeed OrdersStatsStockTypeUTILIZATION

                    "DEFECT" ->
                        Json.Decode.succeed OrdersStatsStockTypeDEFECT

                    "EXPIRED" ->
                        Json.Decode.succeed OrdersStatsStockTypeEXPIRED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


ordersStatsWarehouseDTODecoder : Json.Decode.Decoder OrdersStatsWarehouseDTO
ordersStatsWarehouseDTODecoder =
    Json.Decode.succeed OrdersStatsWarehouseDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


outletAddressDTODecoder : Json.Decode.Decoder OutletAddressDTO
outletAddressDTODecoder =
    Json.Decode.succeed OutletAddressDTO
        |> decode "regionId" Json.Decode.int 
        |> maybeDecode "street" Json.Decode.string Nothing
        |> maybeDecode "number" Json.Decode.string Nothing
        |> maybeDecode "building" Json.Decode.string Nothing
        |> maybeDecode "estate" Json.Decode.string Nothing
        |> maybeDecode "block" Json.Decode.string Nothing
        |> maybeDecode "additional" Json.Decode.string Nothing
        |> maybeDecode "km" Json.Decode.int Nothing
        |> maybeDecode "city" Json.Decode.string Nothing


outletDTODecoder : Json.Decode.Decoder OutletDTO
outletDTODecoder =
    Json.Decode.succeed OutletDTO
        |> decode "name" Json.Decode.string 
        |> decode "type" outletTypeDecoder 
        |> maybeDecode "coords" Json.Decode.string Nothing
        |> maybeDecode "isMain" Json.Decode.bool Nothing
        |> maybeDecode "shopOutletCode" Json.Decode.string Nothing
        |> maybeDecode "visibility" outletVisibilityTypeDecoder Nothing
        |> decode "address" outletAddressDTODecoder 
        |> decode "phones" (Json.Decode.list Json.Decode.string) 
        |> decode "workingSchedule" outletWorkingScheduleDTODecoder 
        |> maybeDecodeNullable "deliveryRules" (Json.Decode.list outletDeliveryRuleDTODecoder) Nothing
        |> maybeDecode "storagePeriod" Json.Decode.int Nothing


outletDeliveryRuleDTODecoder : Json.Decode.Decoder OutletDeliveryRuleDTO
outletDeliveryRuleDTODecoder =
    Json.Decode.succeed OutletDeliveryRuleDTO
        |> maybeDecode "minDeliveryDays" Json.Decode.int Nothing
        |> maybeDecode "maxDeliveryDays" Json.Decode.int Nothing
        |> maybeDecode "deliveryServiceId" Json.Decode.int Nothing
        |> maybeDecode "orderBefore" Json.Decode.int Nothing
        |> maybeDecode "priceFreePickup" Json.Decode.float Nothing
        |> maybeDecode "unspecifiedDeliveryInterval" Json.Decode.bool Nothing


outletLicenseDTODecoder : Json.Decode.Decoder OutletLicenseDTO
outletLicenseDTODecoder =
    Json.Decode.succeed OutletLicenseDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "outletId" Json.Decode.int Nothing
        |> maybeDecode "licenseType" licenseTypeDecoder Nothing
        |> maybeDecode "number" Json.Decode.string Nothing
        |> maybeDecode "dateOfIssue" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "dateOfExpiry" Api.Time.dateTimeDecoder Nothing


outletLicensesResponseDTODecoder : Json.Decode.Decoder OutletLicensesResponseDTO
outletLicensesResponseDTODecoder =
    Json.Decode.succeed OutletLicensesResponseDTO
        |> decode "licenses" (Json.Decode.list fullOutletLicenseDTODecoder) 


outletResponseDTODecoder : Json.Decode.Decoder OutletResponseDTO
outletResponseDTODecoder =
    Json.Decode.succeed OutletResponseDTO
        |> maybeDecode "id" Json.Decode.int Nothing


outletStatusTypeDecoder : Json.Decode.Decoder OutletStatusType
outletStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AT_MODERATION" ->
                        Json.Decode.succeed OutletStatusTypeATMODERATION

                    "FAILED" ->
                        Json.Decode.succeed OutletStatusTypeFAILED

                    "MODERATED" ->
                        Json.Decode.succeed OutletStatusTypeMODERATED

                    "NONMODERATED" ->
                        Json.Decode.succeed OutletStatusTypeNONMODERATED

                    "UNKNOWN" ->
                        Json.Decode.succeed OutletStatusTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


outletTypeDecoder : Json.Decode.Decoder OutletType
outletTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DEPOT" ->
                        Json.Decode.succeed OutletTypeDEPOT

                    "MIXED" ->
                        Json.Decode.succeed OutletTypeMIXED

                    "RETAIL" ->
                        Json.Decode.succeed OutletTypeRETAIL

                    "NOT_DEFINED" ->
                        Json.Decode.succeed OutletTypeNOTDEFINED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


outletVisibilityTypeDecoder : Json.Decode.Decoder OutletVisibilityType
outletVisibilityTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "HIDDEN" ->
                        Json.Decode.succeed OutletVisibilityTypeHIDDEN

                    "VISIBLE" ->
                        Json.Decode.succeed OutletVisibilityTypeVISIBLE

                    "UNKNOWN" ->
                        Json.Decode.succeed OutletVisibilityTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


outletWorkingScheduleDTODecoder : Json.Decode.Decoder OutletWorkingScheduleDTO
outletWorkingScheduleDTODecoder =
    Json.Decode.succeed OutletWorkingScheduleDTO
        |> maybeDecode "workInHoliday" Json.Decode.bool Nothing
        |> decode "scheduleItems" (Json.Decode.list outletWorkingScheduleItemDTODecoder) 


outletWorkingScheduleItemDTODecoder : Json.Decode.Decoder OutletWorkingScheduleItemDTO
outletWorkingScheduleItemDTODecoder =
    Json.Decode.succeed OutletWorkingScheduleItemDTO
        |> decode "startDay" dayOfWeekTypeDecoder 
        |> decode "endDay" dayOfWeekTypeDecoder 
        |> decode "startTime" Json.Decode.string 
        |> decode "endTime" Json.Decode.string 


pageFormatTypeDecoder : Json.Decode.Decoder PageFormatType
pageFormatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "A7" ->
                        Json.Decode.succeed PageFormatTypeA7

                    "A4" ->
                        Json.Decode.succeed PageFormatTypeA4

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


pagedReturnsDTODecoder : Json.Decode.Decoder PagedReturnsDTO
pagedReturnsDTODecoder =
    Json.Decode.succeed PagedReturnsDTO
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing
        |> decode "returns" (Json.Decode.list returnDTODecoder) 


palletsCountDTODecoder : Json.Decode.Decoder PalletsCountDTO
palletsCountDTODecoder =
    Json.Decode.succeed PalletsCountDTO
        |> maybeDecode "planned" Json.Decode.int Nothing
        |> maybeDecode "fact" Json.Decode.int Nothing


parameterTypeDecoder : Json.Decode.Decoder ParameterType
parameterTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TEXT" ->
                        Json.Decode.succeed ParameterTypeTEXT

                    "ENUM" ->
                        Json.Decode.succeed ParameterTypeENUM

                    "BOOLEAN" ->
                        Json.Decode.succeed ParameterTypeBOOLEAN

                    "NUMERIC" ->
                        Json.Decode.succeed ParameterTypeNUMERIC

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


parameterValueConstraintsDTODecoder : Json.Decode.Decoder ParameterValueConstraintsDTO
parameterValueConstraintsDTODecoder =
    Json.Decode.succeed ParameterValueConstraintsDTO
        |> maybeDecode "minValue" Json.Decode.float Nothing
        |> maybeDecode "maxValue" Json.Decode.float Nothing
        |> maybeDecode "maxLength" Json.Decode.int Nothing


parameterValueDTODecoder : Json.Decode.Decoder ParameterValueDTO
parameterValueDTODecoder =
    Json.Decode.succeed ParameterValueDTO
        |> decode "parameterId" Json.Decode.int 
        |> maybeDecode "unitId" Json.Decode.int Nothing
        |> maybeDecode "valueId" Json.Decode.int Nothing
        |> maybeDecode "value" Json.Decode.string Nothing


parameterValueOptionDTODecoder : Json.Decode.Decoder ParameterValueOptionDTO
parameterValueOptionDTODecoder =
    Json.Decode.succeed ParameterValueOptionDTO
        |> decode "id" Json.Decode.int 
        |> decode "value" Json.Decode.string 
        |> maybeDecode "description" Json.Decode.string Nothing


parcelBoxDTODecoder : Json.Decode.Decoder ParcelBoxDTO
parcelBoxDTODecoder =
    Json.Decode.succeed ParcelBoxDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "fulfilmentId" Json.Decode.string Nothing


parcelBoxLabelDTODecoder : Json.Decode.Decoder ParcelBoxLabelDTO
parcelBoxLabelDTODecoder =
    Json.Decode.succeed ParcelBoxLabelDTO
        |> decode "url" Json.Decode.string 
        |> decode "supplierName" Json.Decode.string 
        |> decode "deliveryServiceName" Json.Decode.string 
        |> decode "orderId" Json.Decode.int 
        |> decode "orderNum" Json.Decode.string 
        |> decode "recipientName" Json.Decode.string 
        |> decode "boxId" Json.Decode.int 
        |> decode "fulfilmentId" Json.Decode.string 
        |> decode "place" Json.Decode.string 
        |> decode "weight" Json.Decode.string 
        |> decode "deliveryServiceId" Json.Decode.string 
        |> maybeDecode "deliveryAddress" Json.Decode.string Nothing
        |> maybeDecode "shipmentDate" Json.Decode.string Nothing


parcelDTODecoder : Json.Decode.Decoder ParcelDTO
parcelDTODecoder =
    Json.Decode.succeed ParcelDTO
        |> decode "boxes" (Json.Decode.list parcelBoxDTODecoder) 


partnerMarketCategoryIdDecoder : Json.Decode.Decoder PartnerMarketCategoryId
partnerMarketCategoryIdDecoder =
    Json.Decode.succeed PartnerMarketCategoryId


partnerShipmentWarehouseDTODecoder : Json.Decode.Decoder PartnerShipmentWarehouseDTO
partnerShipmentWarehouseDTODecoder =
    Json.Decode.succeed PartnerShipmentWarehouseDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "address" Json.Decode.string Nothing


paymentFrequencyTypeDecoder : Json.Decode.Decoder PaymentFrequencyType
paymentFrequencyTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DAILY" ->
                        Json.Decode.succeed PaymentFrequencyTypeDAILY

                    "WEEKLY" ->
                        Json.Decode.succeed PaymentFrequencyTypeWEEKLY

                    "BIWEEKLY" ->
                        Json.Decode.succeed PaymentFrequencyTypeBIWEEKLY

                    "MONTHLY" ->
                        Json.Decode.succeed PaymentFrequencyTypeMONTHLY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


pickupAddressDTODecoder : Json.Decode.Decoder PickupAddressDTO
pickupAddressDTODecoder =
    Json.Decode.succeed PickupAddressDTO
        |> maybeDecode "country" Json.Decode.string Nothing
        |> maybeDecode "city" Json.Decode.string Nothing
        |> maybeDecode "street" Json.Decode.string Nothing
        |> maybeDecode "house" Json.Decode.string Nothing
        |> maybeDecode "postcode" Json.Decode.string Nothing


placementTypeDecoder : Json.Decode.Decoder PlacementType
placementTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FBS" ->
                        Json.Decode.succeed PlacementTypeFBS

                    "FBY" ->
                        Json.Decode.succeed PlacementTypeFBY

                    "DBS" ->
                        Json.Decode.succeed PlacementTypeDBS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


priceCompetitivenessThresholdsDTODecoder : Json.Decode.Decoder PriceCompetitivenessThresholdsDTO
priceCompetitivenessThresholdsDTODecoder =
    Json.Decode.succeed PriceCompetitivenessThresholdsDTO
        |> maybeDecode "optimalPrice" basePriceDTODecoder Nothing
        |> maybeDecode "averagePrice" basePriceDTODecoder Nothing


priceCompetitivenessTypeDecoder : Json.Decode.Decoder PriceCompetitivenessType
priceCompetitivenessTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OPTIMAL" ->
                        Json.Decode.succeed PriceCompetitivenessTypeOPTIMAL

                    "AVERAGE" ->
                        Json.Decode.succeed PriceCompetitivenessTypeAVERAGE

                    "LOW" ->
                        Json.Decode.succeed PriceCompetitivenessTypeLOW

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


priceDTODecoder : Json.Decode.Decoder PriceDTO
priceDTODecoder =
    Json.Decode.succeed PriceDTO
        |> maybeDecode "value" Json.Decode.float Nothing
        |> maybeDecode "discountBase" Json.Decode.float Nothing
        |> maybeDecode "currencyId" currencyTypeDecoder Nothing
        |> maybeDecode "vat" Json.Decode.int Nothing


priceQuarantineVerdictDTODecoder : Json.Decode.Decoder PriceQuarantineVerdictDTO
priceQuarantineVerdictDTODecoder =
    Json.Decode.succeed PriceQuarantineVerdictDTO
        |> maybeDecode "type" priceQuarantineVerdictTypeDecoder Nothing
        |> decode "params" (Json.Decode.list priceQuarantineVerdictParameterDTODecoder) 


priceQuarantineVerdictParamNameTypeDecoder : Json.Decode.Decoder PriceQuarantineVerdictParamNameType
priceQuarantineVerdictParamNameTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CURRENT_PRICE" ->
                        Json.Decode.succeed PriceQuarantineVerdictParamNameTypeCURRENTPRICE

                    "LAST_VALID_PRICE" ->
                        Json.Decode.succeed PriceQuarantineVerdictParamNameTypeLASTVALIDPRICE

                    "MIN_PRICE" ->
                        Json.Decode.succeed PriceQuarantineVerdictParamNameTypeMINPRICE

                    "CURRENCY" ->
                        Json.Decode.succeed PriceQuarantineVerdictParamNameTypeCURRENCY

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


priceQuarantineVerdictParameterDTODecoder : Json.Decode.Decoder PriceQuarantineVerdictParameterDTO
priceQuarantineVerdictParameterDTODecoder =
    Json.Decode.succeed PriceQuarantineVerdictParameterDTO
        |> decode "name" priceQuarantineVerdictParamNameTypeDecoder 
        |> decode "value" Json.Decode.string 


priceQuarantineVerdictTypeDecoder : Json.Decode.Decoder PriceQuarantineVerdictType
priceQuarantineVerdictTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PRICE_CHANGE" ->
                        Json.Decode.succeed PriceQuarantineVerdictTypePRICECHANGE

                    "LOW_PRICE" ->
                        Json.Decode.succeed PriceQuarantineVerdictTypeLOWPRICE

                    "LOW_PRICE_PROMO" ->
                        Json.Decode.succeed PriceQuarantineVerdictTypeLOWPRICEPROMO

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


priceRecommendationItemDTODecoder : Json.Decode.Decoder PriceRecommendationItemDTO
priceRecommendationItemDTODecoder =
    Json.Decode.succeed PriceRecommendationItemDTO
        |> decode "campaignId" Json.Decode.int 
        |> decode "price" Json.Decode.float 


priceSuggestDTODecoder : Json.Decode.Decoder PriceSuggestDTO
priceSuggestDTODecoder =
    Json.Decode.succeed PriceSuggestDTO
        |> maybeDecode "type" priceSuggestTypeDecoder Nothing
        |> maybeDecode "price" Json.Decode.float Nothing


priceSuggestOfferDTODecoder : Json.Decode.Decoder PriceSuggestOfferDTO
priceSuggestOfferDTODecoder =
    Json.Decode.succeed PriceSuggestOfferDTO
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecodeNullable "priceSuggestion" (Json.Decode.list priceSuggestDTODecoder) Nothing


priceSuggestTypeDecoder : Json.Decode.Decoder PriceSuggestType
priceSuggestTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BUYBOX" ->
                        Json.Decode.succeed PriceSuggestTypeBUYBOX

                    "DEFAULT_OFFER" ->
                        Json.Decode.succeed PriceSuggestTypeDEFAULTOFFER

                    "MIN_PRICE_MARKET" ->
                        Json.Decode.succeed PriceSuggestTypeMINPRICEMARKET

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


promoOfferAutoParticipatingDetailsDTODecoder : Json.Decode.Decoder PromoOfferAutoParticipatingDetailsDTO
promoOfferAutoParticipatingDetailsDTODecoder =
    Json.Decode.succeed PromoOfferAutoParticipatingDetailsDTO
        |> maybeDecodeNullable "campaignIds" (Json.Decode.list Json.Decode.int) Nothing


promoOfferDiscountParamsDTODecoder : Json.Decode.Decoder PromoOfferDiscountParamsDTO
promoOfferDiscountParamsDTODecoder =
    Json.Decode.succeed PromoOfferDiscountParamsDTO
        |> maybeDecode "price" Json.Decode.int Nothing
        |> maybeDecode "promoPrice" Json.Decode.int Nothing
        |> decode "maxPromoPrice" Json.Decode.int 


promoOfferParamsDTODecoder : Json.Decode.Decoder PromoOfferParamsDTO
promoOfferParamsDTODecoder =
    Json.Decode.succeed PromoOfferParamsDTO
        |> maybeDecode "discountParams" promoOfferDiscountParamsDTODecoder Nothing
        |> maybeDecode "promocodeParams" promoOfferPromocodeParamsDTODecoder Nothing


promoOfferParticipationStatusFilterTypeDecoder : Json.Decode.Decoder PromoOfferParticipationStatusFilterType
promoOfferParticipationStatusFilterTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "MANUALLY_ADDED" ->
                        Json.Decode.succeed PromoOfferParticipationStatusFilterTypeMANUALLYADDED

                    "NOT_MANUALLY_ADDED" ->
                        Json.Decode.succeed PromoOfferParticipationStatusFilterTypeNOTMANUALLYADDED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


promoOfferParticipationStatusTypeDecoder : Json.Decode.Decoder PromoOfferParticipationStatusType
promoOfferParticipationStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AUTO" ->
                        Json.Decode.succeed PromoOfferParticipationStatusTypeAUTO

                    "PARTIALLY_AUTO" ->
                        Json.Decode.succeed PromoOfferParticipationStatusTypePARTIALLYAUTO

                    "MANUAL" ->
                        Json.Decode.succeed PromoOfferParticipationStatusTypeMANUAL

                    "NOT_PARTICIPATING" ->
                        Json.Decode.succeed PromoOfferParticipationStatusTypeNOTPARTICIPATING

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


promoOfferPromocodeParamsDTODecoder : Json.Decode.Decoder PromoOfferPromocodeParamsDTO
promoOfferPromocodeParamsDTODecoder =
    Json.Decode.succeed PromoOfferPromocodeParamsDTO
        |> decode "maxPrice" Json.Decode.int 


promoOfferUpdateWarningCodeTypeDecoder : Json.Decode.Decoder PromoOfferUpdateWarningCodeType
promoOfferUpdateWarningCodeTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DEEP_DISCOUNT_OFFER" ->
                        Json.Decode.succeed PromoOfferUpdateWarningCodeTypeDEEPDISCOUNTOFFER

                    "CATALOG_PRICE_IS_LOWER_THAN_PROMO" ->
                        Json.Decode.succeed PromoOfferUpdateWarningCodeTypeCATALOGPRICEISLOWERTHANPROMO

                    "SHOP_PRICES_ARE_LOWER_THAN_PROMO" ->
                        Json.Decode.succeed PromoOfferUpdateWarningCodeTypeSHOPPRICESARELOWERTHANPROMO

                    "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE" ->
                        Json.Decode.succeed PromoOfferUpdateWarningCodeTypePROMOCODEPRICEMORETHANMAXFAIRPRICE

                    "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO" ->
                        Json.Decode.succeed PromoOfferUpdateWarningCodeTypeSHOPOFFERNOTELIGIBLEFORPROMO

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


promoOfferUpdateWarningDTODecoder : Json.Decode.Decoder PromoOfferUpdateWarningDTO
promoOfferUpdateWarningDTODecoder =
    Json.Decode.succeed PromoOfferUpdateWarningDTO
        |> decode "code" promoOfferUpdateWarningCodeTypeDecoder 
        |> maybeDecodeNullable "campaignIds" (Json.Decode.list Json.Decode.int) Nothing


promoParticipationTypeDecoder : Json.Decode.Decoder PromoParticipationType
promoParticipationTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PARTICIPATING_NOW" ->
                        Json.Decode.succeed PromoParticipationTypePARTICIPATINGNOW

                    "PARTICIPATED" ->
                        Json.Decode.succeed PromoParticipationTypePARTICIPATED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


promoPeriodDTODecoder : Json.Decode.Decoder PromoPeriodDTO
promoPeriodDTODecoder =
    Json.Decode.succeed PromoPeriodDTO
        |> decode "dateTimeFrom" Api.Time.dateTimeDecoder 
        |> decode "dateTimeTo" Api.Time.dateTimeDecoder 


provideOrderDigitalCodesRequestDecoder : Json.Decode.Decoder ProvideOrderDigitalCodesRequest
provideOrderDigitalCodesRequestDecoder =
    Json.Decode.succeed ProvideOrderDigitalCodesRequest
        |> decode "items" (Json.Decode.list orderDigitalItemDTODecoder) 


provideOrderItemIdentifiersRequestDecoder : Json.Decode.Decoder ProvideOrderItemIdentifiersRequest
provideOrderItemIdentifiersRequestDecoder =
    Json.Decode.succeed ProvideOrderItemIdentifiersRequest
        |> decode "items" (Json.Decode.list orderItemInstanceModificationDTODecoder) 


provideOrderItemIdentifiersResponseDecoder : Json.Decode.Decoder ProvideOrderItemIdentifiersResponse
provideOrderItemIdentifiersResponseDecoder =
    Json.Decode.succeed ProvideOrderItemIdentifiersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderItemsModificationResultDTODecoder Nothing


putSkuBidsRequestDecoder : Json.Decode.Decoder PutSkuBidsRequest
putSkuBidsRequestDecoder =
    Json.Decode.succeed PutSkuBidsRequest
        |> decode "bids" (Json.Decode.list skuBidItemDTODecoder) 


qualityRatingAffectedOrderDTODecoder : Json.Decode.Decoder QualityRatingAffectedOrderDTO
qualityRatingAffectedOrderDTODecoder =
    Json.Decode.succeed QualityRatingAffectedOrderDTO
        |> decode "orderId" Json.Decode.int 
        |> decode "description" Json.Decode.string 
        |> decode "componentType" affectedOrderQualityRatingComponentTypeDecoder 


qualityRatingComponentDTODecoder : Json.Decode.Decoder QualityRatingComponentDTO
qualityRatingComponentDTODecoder =
    Json.Decode.succeed QualityRatingComponentDTO
        |> decode "value" Json.Decode.float 
        |> decode "componentType" qualityRatingComponentTypeDecoder 


qualityRatingComponentTypeDecoder : Json.Decode.Decoder QualityRatingComponentType
qualityRatingComponentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "DBS_CANCELLATION_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeDBSCANCELLATIONRATE

                    "DBS_LATE_DELIVERY_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeDBSLATEDELIVERYRATE

                    "FBS_CANCELLATION_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBSCANCELLATIONRATE

                    "FBS_LATE_SHIP_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBSLATESHIPRATE

                    "FBY_LATE_DELIVERY_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBYLATEDELIVERYRATE

                    "FBY_CANCELLATION_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBYCANCELLATIONRATE

                    "FBY_DELIVERY_DIFF_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBYDELIVERYDIFFRATE

                    "FBY_LATE_EDITING_RATE" ->
                        Json.Decode.succeed QualityRatingComponentTypeFBYLATEEDITINGRATE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


qualityRatingDTODecoder : Json.Decode.Decoder QualityRatingDTO
qualityRatingDTODecoder =
    Json.Decode.succeed QualityRatingDTO
        |> decode "rating" Json.Decode.int 
        |> decode "calculationDate" Api.Time.dateDecoder 
        |> decode "components" (Json.Decode.list qualityRatingComponentDTODecoder) 


qualityRatingDetailsDTODecoder : Json.Decode.Decoder QualityRatingDetailsDTO
qualityRatingDetailsDTODecoder =
    Json.Decode.succeed QualityRatingDetailsDTO
        |> decode "affectedOrders" (Json.Decode.list qualityRatingAffectedOrderDTODecoder) 


quantumDTODecoder : Json.Decode.Decoder QuantumDTO
quantumDTODecoder =
    Json.Decode.succeed QuantumDTO
        |> maybeDecode "minQuantity" Json.Decode.int Nothing
        |> maybeDecode "stepQuantity" Json.Decode.int Nothing


quarantineOfferDTODecoder : Json.Decode.Decoder QuarantineOfferDTO
quarantineOfferDTODecoder =
    Json.Decode.succeed QuarantineOfferDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "currentPrice" basePriceDTODecoder Nothing
        |> maybeDecode "lastValidPrice" basePriceDTODecoder Nothing
        |> maybeDecodeNullable "verdicts" (Json.Decode.list priceQuarantineVerdictDTODecoder) Nothing


recipientTypeDecoder : Json.Decode.Decoder RecipientType
recipientTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "SHOP" ->
                        Json.Decode.succeed RecipientTypeSHOP

                    "DELIVERY_SERVICE" ->
                        Json.Decode.succeed RecipientTypeDELIVERYSERVICE

                    "POST" ->
                        Json.Decode.succeed RecipientTypePOST

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


refundStatusTypeDecoder : Json.Decode.Decoder RefundStatusType
refundStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "STARTED_BY_USER" ->
                        Json.Decode.succeed RefundStatusTypeSTARTEDBYUSER

                    "REFUND_IN_PROGRESS" ->
                        Json.Decode.succeed RefundStatusTypeREFUNDINPROGRESS

                    "REFUNDED" ->
                        Json.Decode.succeed RefundStatusTypeREFUNDED

                    "FAILED" ->
                        Json.Decode.succeed RefundStatusTypeFAILED

                    "WAITING_FOR_DECISION" ->
                        Json.Decode.succeed RefundStatusTypeWAITINGFORDECISION

                    "DECISION_MADE" ->
                        Json.Decode.succeed RefundStatusTypeDECISIONMADE

                    "REFUNDED_WITH_BONUSES" ->
                        Json.Decode.succeed RefundStatusTypeREFUNDEDWITHBONUSES

                    "REFUNDED_BY_SHOP" ->
                        Json.Decode.succeed RefundStatusTypeREFUNDEDBYSHOP

                    "CANCELLED" ->
                        Json.Decode.succeed RefundStatusTypeCANCELLED

                    "COMPLETE_WITHOUT_REFUND" ->
                        Json.Decode.succeed RefundStatusTypeCOMPLETEWITHOUTREFUND

                    "UNKNOWN" ->
                        Json.Decode.succeed RefundStatusTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


regionDTODecoder : Json.Decode.Decoder RegionDTO
regionDTODecoder =
    Json.Decode.succeed RegionDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> decode "name" Json.Decode.string 
        |> decode "type" regionTypeDecoder 
        |> maybeDecodeLazy RegionDTOParent "parent" (Json.Decode.lazy (\_ -> regionDTODecoder)) Nothing
        |> maybeDecodeNullableLazy RegionDTOChildren "children" (Json.Decode.list (Json.Decode.lazy (\_ -> regionDTODecoder))) Nothing


regionTypeDecoder : Json.Decode.Decoder RegionType
regionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OTHER" ->
                        Json.Decode.succeed RegionTypeOTHER

                    "CONTINENT" ->
                        Json.Decode.succeed RegionTypeCONTINENT

                    "REGION" ->
                        Json.Decode.succeed RegionTypeREGION

                    "COUNTRY" ->
                        Json.Decode.succeed RegionTypeCOUNTRY

                    "COUNTRY_DISTRICT" ->
                        Json.Decode.succeed RegionTypeCOUNTRYDISTRICT

                    "REPUBLIC" ->
                        Json.Decode.succeed RegionTypeREPUBLIC

                    "CITY" ->
                        Json.Decode.succeed RegionTypeCITY

                    "VILLAGE" ->
                        Json.Decode.succeed RegionTypeVILLAGE

                    "CITY_DISTRICT" ->
                        Json.Decode.succeed RegionTypeCITYDISTRICT

                    "SUBWAY_STATION" ->
                        Json.Decode.succeed RegionTypeSUBWAYSTATION

                    "REPUBLIC_AREA" ->
                        Json.Decode.succeed RegionTypeREPUBLICAREA

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


regionalModelInfoDTODecoder : Json.Decode.Decoder RegionalModelInfoDTO
regionalModelInfoDTODecoder =
    Json.Decode.succeed RegionalModelInfoDTO
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "regionId" Json.Decode.int Nothing


rejectedPromoOfferDeleteDTODecoder : Json.Decode.Decoder RejectedPromoOfferDeleteDTO
rejectedPromoOfferDeleteDTODecoder =
    Json.Decode.succeed RejectedPromoOfferDeleteDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "reason" rejectedPromoOfferDeleteReasonTypeDecoder 


rejectedPromoOfferDeleteReasonTypeDecoder : Json.Decode.Decoder RejectedPromoOfferDeleteReasonType
rejectedPromoOfferDeleteReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OFFER_DOES_NOT_EXIST" ->
                        Json.Decode.succeed RejectedPromoOfferDeleteReasonTypeOFFERDOESNOTEXIST

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


rejectedPromoOfferUpdateDTODecoder : Json.Decode.Decoder RejectedPromoOfferUpdateDTO
rejectedPromoOfferUpdateDTODecoder =
    Json.Decode.succeed RejectedPromoOfferUpdateDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "reason" rejectedPromoOfferUpdateReasonTypeDecoder 


rejectedPromoOfferUpdateReasonTypeDecoder : Json.Decode.Decoder RejectedPromoOfferUpdateReasonType
rejectedPromoOfferUpdateReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OFFER_DOES_NOT_EXIST" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeOFFERDOESNOTEXIST

                    "OFFER_DUPLICATION" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeOFFERDUPLICATION

                    "OFFER_NOT_ELIGIBLE_FOR_PROMO" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeOFFERNOTELIGIBLEFORPROMO

                    "OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeOFFERPROMOSMAXBYTESIZEEXCEEDED

                    "DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeDEADLINEFORFOCUSPROMOSEXCEEDED

                    "EMPTY_OLD_PRICE" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeEMPTYOLDPRICE

                    "EMPTY_PROMO_PRICE" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeEMPTYPROMOPRICE

                    "MAX_PROMO_PRICE_EXCEEDED" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypeMAXPROMOPRICEEXCEEDED

                    "PROMO_PRICE_BIGGER_THAN_MAX" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypePROMOPRICEBIGGERTHANMAX

                    "PROMO_PRICE_SMALLER_THAN_MIN" ->
                        Json.Decode.succeed RejectedPromoOfferUpdateReasonTypePROMOPRICESMALLERTHANMIN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


reportFormatTypeDecoder : Json.Decode.Decoder ReportFormatType
reportFormatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FILE" ->
                        Json.Decode.succeed ReportFormatTypeFILE

                    "CSV" ->
                        Json.Decode.succeed ReportFormatTypeCSV

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


reportInfoDTODecoder : Json.Decode.Decoder ReportInfoDTO
reportInfoDTODecoder =
    Json.Decode.succeed ReportInfoDTO
        |> decode "status" reportStatusTypeDecoder 
        |> maybeDecode "subStatus" reportSubStatusTypeDecoder Nothing
        |> decode "generationRequestedAt" Api.Time.dateTimeDecoder 
        |> maybeDecode "generationFinishedAt" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "file" Json.Decode.string Nothing
        |> maybeDecode "estimatedGenerationTime" Json.Decode.int Nothing


reportStatusTypeDecoder : Json.Decode.Decoder ReportStatusType
reportStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "PENDING" ->
                        Json.Decode.succeed ReportStatusTypePENDING

                    "PROCESSING" ->
                        Json.Decode.succeed ReportStatusTypePROCESSING

                    "FAILED" ->
                        Json.Decode.succeed ReportStatusTypeFAILED

                    "DONE" ->
                        Json.Decode.succeed ReportStatusTypeDONE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


reportSubStatusTypeDecoder : Json.Decode.Decoder ReportSubStatusType
reportSubStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "NO_DATA" ->
                        Json.Decode.succeed ReportSubStatusTypeNODATA

                    "TOO_LARGE" ->
                        Json.Decode.succeed ReportSubStatusTypeTOOLARGE

                    "RESOURCE_NOT_FOUND" ->
                        Json.Decode.succeed ReportSubStatusTypeRESOURCENOTFOUND

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnDTODecoder : Json.Decode.Decoder ReturnDTO
returnDTODecoder =
    Json.Decode.succeed ReturnDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "orderId" Json.Decode.int Nothing
        |> maybeDecode "creationDate" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "updateDate" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "refundStatus" refundStatusTypeDecoder Nothing
        |> maybeDecode "logisticPickupPoint" logisticPickupPointDTODecoder Nothing
        |> maybeDecode "shipmentRecipientType" recipientTypeDecoder Nothing
        |> maybeDecode "shipmentStatus" returnShipmentStatusTypeDecoder Nothing
        |> maybeDecode "refundAmount" Json.Decode.int Nothing
        |> decode "items" (Json.Decode.list returnItemDTODecoder) 
        |> maybeDecode "returnType" returnTypeDecoder Nothing
        |> maybeDecode "fastReturn" Json.Decode.bool Nothing


returnDecisionDTODecoder : Json.Decode.Decoder ReturnDecisionDTO
returnDecisionDTODecoder =
    Json.Decode.succeed ReturnDecisionDTO
        |> maybeDecode "returnItemId" Json.Decode.int Nothing
        |> maybeDecode "count" Json.Decode.int Nothing
        |> maybeDecode "comment" Json.Decode.string Nothing
        |> maybeDecode "reasonType" returnDecisionReasonTypeDecoder Nothing
        |> maybeDecode "subreasonType" returnDecisionSubreasonTypeDecoder Nothing
        |> maybeDecode "decisionType" returnDecisionTypeDecoder Nothing
        |> maybeDecode "refundAmount" Json.Decode.int Nothing
        |> maybeDecode "partnerCompensation" Json.Decode.int Nothing
        |> maybeDecodeNullable "images" (Json.Decode.list Json.Decode.string) Nothing


returnDecisionReasonTypeDecoder : Json.Decode.Decoder ReturnDecisionReasonType
returnDecisionReasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "BAD_QUALITY" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeBADQUALITY

                    "DOES_NOT_FIT" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeDOESNOTFIT

                    "WRONG_ITEM" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeWRONGITEM

                    "DAMAGE_DELIVERY" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeDAMAGEDELIVERY

                    "LOYALTY_FAIL" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeLOYALTYFAIL

                    "CONTENT_FAIL" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeCONTENTFAIL

                    "UNKNOWN" ->
                        Json.Decode.succeed ReturnDecisionReasonTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnDecisionSubreasonTypeDecoder : Json.Decode.Decoder ReturnDecisionSubreasonType
returnDecisionSubreasonTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "USER_DID_NOT_LIKE" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeUSERDIDNOTLIKE

                    "USER_CHANGED_MIND" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeUSERCHANGEDMIND

                    "DELIVERED_TOO_LONG" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeDELIVEREDTOOLONG

                    "BAD_PACKAGE" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeBADPACKAGE

                    "DAMAGED" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeDAMAGED

                    "NOT_WORKING" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeNOTWORKING

                    "INCOMPLETENESS" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeINCOMPLETENESS

                    "WRONG_ITEM" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeWRONGITEM

                    "WRONG_COLOR" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeWRONGCOLOR

                    "DID_NOT_MATCH_DESCRIPTION" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeDIDNOTMATCHDESCRIPTION

                    "UNKNOWN" ->
                        Json.Decode.succeed ReturnDecisionSubreasonTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnDecisionTypeDecoder : Json.Decode.Decoder ReturnDecisionType
returnDecisionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "REFUND_MONEY" ->
                        Json.Decode.succeed ReturnDecisionTypeREFUNDMONEY

                    "REFUND_MONEY_INCLUDING_SHIPMENT" ->
                        Json.Decode.succeed ReturnDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT

                    "REPAIR" ->
                        Json.Decode.succeed ReturnDecisionTypeREPAIR

                    "REPLACE" ->
                        Json.Decode.succeed ReturnDecisionTypeREPLACE

                    "SEND_TO_EXAMINATION" ->
                        Json.Decode.succeed ReturnDecisionTypeSENDTOEXAMINATION

                    "DECLINE_REFUND" ->
                        Json.Decode.succeed ReturnDecisionTypeDECLINEREFUND

                    "OTHER_DECISION" ->
                        Json.Decode.succeed ReturnDecisionTypeOTHERDECISION

                    "UNKNOWN" ->
                        Json.Decode.succeed ReturnDecisionTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnInstanceDTODecoder : Json.Decode.Decoder ReturnInstanceDTO
returnInstanceDTODecoder =
    Json.Decode.succeed ReturnInstanceDTO
        |> maybeDecode "stockType" returnInstanceStockTypeDecoder Nothing
        |> maybeDecode "status" returnInstanceStatusTypeDecoder Nothing
        |> maybeDecode "cis" Json.Decode.string Nothing
        |> maybeDecode "imei" Json.Decode.string Nothing


returnInstanceStatusTypeDecoder : Json.Decode.Decoder ReturnInstanceStatusType
returnInstanceStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREATED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeCREATED

                    "RECEIVED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeRECEIVED

                    "IN_TRANSIT" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeINTRANSIT

                    "READY_FOR_PICKUP" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeREADYFORPICKUP

                    "PICKED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypePICKED

                    "RECEIVED_ON_FULFILLMENT" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeRECEIVEDONFULFILLMENT

                    "CANCELLED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeCANCELLED

                    "LOST" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeLOST

                    "UTILIZED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeUTILIZED

                    "PREPARED_FOR_UTILIZATION" ->
                        Json.Decode.succeed ReturnInstanceStatusTypePREPAREDFORUTILIZATION

                    "EXPROPRIATED" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeEXPROPRIATED

                    "NOT_IN_DEMAND" ->
                        Json.Decode.succeed ReturnInstanceStatusTypeNOTINDEMAND

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnInstanceStockTypeDecoder : Json.Decode.Decoder ReturnInstanceStockType
returnInstanceStockTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIT" ->
                        Json.Decode.succeed ReturnInstanceStockTypeFIT

                    "DEFECT" ->
                        Json.Decode.succeed ReturnInstanceStockTypeDEFECT

                    "ANOMALY" ->
                        Json.Decode.succeed ReturnInstanceStockTypeANOMALY

                    "SURPLUS" ->
                        Json.Decode.succeed ReturnInstanceStockTypeSURPLUS

                    "EXPIRED" ->
                        Json.Decode.succeed ReturnInstanceStockTypeEXPIRED

                    "MISGRADING" ->
                        Json.Decode.succeed ReturnInstanceStockTypeMISGRADING

                    "UNDEFINED" ->
                        Json.Decode.succeed ReturnInstanceStockTypeUNDEFINED

                    "INCORRECT_IMEI" ->
                        Json.Decode.succeed ReturnInstanceStockTypeINCORRECTIMEI

                    "INCORRECT_SERIAL_NUMBER" ->
                        Json.Decode.succeed ReturnInstanceStockTypeINCORRECTSERIALNUMBER

                    "INCORRECT_CIS" ->
                        Json.Decode.succeed ReturnInstanceStockTypeINCORRECTCIS

                    "PART_MISSING" ->
                        Json.Decode.succeed ReturnInstanceStockTypePARTMISSING

                    "NON_COMPLIENT" ->
                        Json.Decode.succeed ReturnInstanceStockTypeNONCOMPLIENT

                    "NOT_ACCEPTABLE" ->
                        Json.Decode.succeed ReturnInstanceStockTypeNOTACCEPTABLE

                    "SERVICE" ->
                        Json.Decode.succeed ReturnInstanceStockTypeSERVICE

                    "MARKDOWN" ->
                        Json.Decode.succeed ReturnInstanceStockTypeMARKDOWN

                    "DEMO" ->
                        Json.Decode.succeed ReturnInstanceStockTypeDEMO

                    "REPAIR" ->
                        Json.Decode.succeed ReturnInstanceStockTypeREPAIR

                    "FIRMWARE" ->
                        Json.Decode.succeed ReturnInstanceStockTypeFIRMWARE

                    "UNKNOWN" ->
                        Json.Decode.succeed ReturnInstanceStockTypeUNKNOWN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnItemDTODecoder : Json.Decode.Decoder ReturnItemDTO
returnItemDTODecoder =
    Json.Decode.succeed ReturnItemDTO
        |> maybeDecode "marketSku" Json.Decode.int Nothing
        |> decode "shopSku" Json.Decode.string 
        |> decode "count" Json.Decode.int 
        |> maybeDecodeNullable "decisions" (Json.Decode.list returnDecisionDTODecoder) Nothing
        |> maybeDecodeNullable "instances" (Json.Decode.list returnInstanceDTODecoder) Nothing
        |> maybeDecodeNullable "tracks" (Json.Decode.list trackDTODecoder) Nothing


returnRequestDecisionTypeDecoder : Json.Decode.Decoder ReturnRequestDecisionType
returnRequestDecisionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "REFUND_MONEY" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeREFUNDMONEY

                    "REFUND_MONEY_INCLUDING_SHIPMENT" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeREFUNDMONEYINCLUDINGSHIPMENT

                    "REPAIR" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeREPAIR

                    "REPLACE" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeREPLACE

                    "SEND_TO_EXAMINATION" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeSENDTOEXAMINATION

                    "DECLINE_REFUND" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeDECLINEREFUND

                    "OTHER_DECISION" ->
                        Json.Decode.succeed ReturnRequestDecisionTypeOTHERDECISION

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnShipmentStatusTypeDecoder : Json.Decode.Decoder ReturnShipmentStatusType
returnShipmentStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CREATED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeCREATED

                    "RECEIVED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeRECEIVED

                    "IN_TRANSIT" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeINTRANSIT

                    "READY_FOR_PICKUP" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeREADYFORPICKUP

                    "PICKED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypePICKED

                    "LOST" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeLOST

                    "EXPIRED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeEXPIRED

                    "CANCELLED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeCANCELLED

                    "FULFILMENT_RECEIVED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeFULFILMENTRECEIVED

                    "PREPARED_FOR_UTILIZATION" ->
                        Json.Decode.succeed ReturnShipmentStatusTypePREPAREDFORUTILIZATION

                    "NOT_IN_DEMAND" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeNOTINDEMAND

                    "UTILIZED" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeUTILIZED

                    "READY_FOR_EXPROPRIATION" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeREADYFOREXPROPRIATION

                    "RECEIVED_FOR_EXPROPRIATION" ->
                        Json.Decode.succeed ReturnShipmentStatusTypeRECEIVEDFOREXPROPRIATION

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


returnTypeDecoder : Json.Decode.Decoder ReturnType
returnTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "UNREDEEMED" ->
                        Json.Decode.succeed ReturnTypeUNREDEEMED

                    "RETURN" ->
                        Json.Decode.succeed ReturnTypeRETURN

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


scrollingPagerDTODecoder : Json.Decode.Decoder ScrollingPagerDTO
scrollingPagerDTODecoder =
    Json.Decode.succeed ScrollingPagerDTO
        |> maybeDecode "nextPageToken" Json.Decode.string Nothing
        |> maybeDecode "prevPageToken" Json.Decode.string Nothing


searchModelsResponseDecoder : Json.Decode.Decoder SearchModelsResponse
searchModelsResponseDecoder =
    Json.Decode.succeed SearchModelsResponse
        |> decode "models" (Json.Decode.list modelDTODecoder) 
        |> maybeDecode "currency" currencyTypeDecoder Nothing
        |> maybeDecode "regionId" Json.Decode.int Nothing
        |> maybeDecode "pager" flippingPagerDTODecoder Nothing


searchShipmentsRequestDecoder : Json.Decode.Decoder SearchShipmentsRequest
searchShipmentsRequestDecoder =
    Json.Decode.succeed SearchShipmentsRequest
        |> decode "dateFrom" Api.Time.dateDecoder 
        |> decode "dateTo" Api.Time.dateDecoder 
        |> maybeDecodeNullable "statuses" (Json.Decode.list shipmentStatusTypeDecoder) Nothing
        |> maybeDecodeNullable "orderIds" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "cancelledOrders" Json.Decode.bool (Just True)


searchShipmentsResponseDecoder : Json.Decode.Decoder SearchShipmentsResponse
searchShipmentsResponseDecoder =
    Json.Decode.succeed SearchShipmentsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" searchShipmentsResponseDTODecoder Nothing


searchShipmentsResponseDTODecoder : Json.Decode.Decoder SearchShipmentsResponseDTO
searchShipmentsResponseDTODecoder =
    Json.Decode.succeed SearchShipmentsResponseDTO
        |> decode "shipments" (Json.Decode.list shipmentInfoDTODecoder) 
        |> maybeDecode "paging" forwardScrollingPagerDTODecoder Nothing


sellingProgramTypeDecoder : Json.Decode.Decoder SellingProgramType
sellingProgramTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FBY" ->
                        Json.Decode.succeed SellingProgramTypeFBY

                    "FBS" ->
                        Json.Decode.succeed SellingProgramTypeFBS

                    "DBS" ->
                        Json.Decode.succeed SellingProgramTypeDBS

                    "EXPRESS" ->
                        Json.Decode.succeed SellingProgramTypeEXPRESS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


sendMessageToChatRequestDecoder : Json.Decode.Decoder SendMessageToChatRequest
sendMessageToChatRequestDecoder =
    Json.Decode.succeed SendMessageToChatRequest
        |> decode "message" Json.Decode.string 


setFeedParamsRequestDecoder : Json.Decode.Decoder SetFeedParamsRequest
setFeedParamsRequestDecoder =
    Json.Decode.succeed SetFeedParamsRequest
        |> decode "parameters" (Json.Decode.list feedParameterDTODecoder) 


setOrderBoxLayoutRequestDecoder : Json.Decode.Decoder SetOrderBoxLayoutRequest
setOrderBoxLayoutRequestDecoder =
    Json.Decode.succeed SetOrderBoxLayoutRequest
        |> decode "boxes" (Json.Decode.list orderBoxLayoutDTODecoder) 
        |> maybeDecode "allowRemove" Json.Decode.bool (Just False)


setOrderBoxLayoutResponseDecoder : Json.Decode.Decoder SetOrderBoxLayoutResponse
setOrderBoxLayoutResponseDecoder =
    Json.Decode.succeed SetOrderBoxLayoutResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" orderBoxesLayoutDTODecoder Nothing


setOrderDeliveryDateRequestDecoder : Json.Decode.Decoder SetOrderDeliveryDateRequest
setOrderDeliveryDateRequestDecoder =
    Json.Decode.succeed SetOrderDeliveryDateRequest
        |> decode "dates" orderDeliveryDateDTODecoder 
        |> decode "reason" orderDeliveryDateReasonTypeDecoder 


setOrderDeliveryTrackCodeRequestDecoder : Json.Decode.Decoder SetOrderDeliveryTrackCodeRequest
setOrderDeliveryTrackCodeRequestDecoder =
    Json.Decode.succeed SetOrderDeliveryTrackCodeRequest
        |> decode "trackCode" Json.Decode.string 
        |> decode "deliveryServiceId" Json.Decode.int 


setOrderShipmentBoxesRequestDecoder : Json.Decode.Decoder SetOrderShipmentBoxesRequest
setOrderShipmentBoxesRequestDecoder =
    Json.Decode.succeed SetOrderShipmentBoxesRequest
        |> decode "boxes" (Json.Decode.list parcelBoxDTODecoder) 


setOrderShipmentBoxesResponseDecoder : Json.Decode.Decoder SetOrderShipmentBoxesResponse
setOrderShipmentBoxesResponseDecoder =
    Json.Decode.succeed SetOrderShipmentBoxesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" shipmentBoxesDTODecoder Nothing


setReturnDecisionRequestDecoder : Json.Decode.Decoder SetReturnDecisionRequest
setReturnDecisionRequestDecoder =
    Json.Decode.succeed SetReturnDecisionRequest
        |> decode "returnItemId" Json.Decode.int 
        |> decode "decisionType" returnRequestDecisionTypeDecoder 
        |> maybeDecode "comment" Json.Decode.string Nothing


setShipmentPalletsCountRequestDecoder : Json.Decode.Decoder SetShipmentPalletsCountRequest
setShipmentPalletsCountRequestDecoder =
    Json.Decode.succeed SetShipmentPalletsCountRequest
        |> decode "placesCount" Json.Decode.int 


shelfsStatisticsAttributionTypeDecoder : Json.Decode.Decoder ShelfsStatisticsAttributionType
shelfsStatisticsAttributionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CLICKS" ->
                        Json.Decode.succeed ShelfsStatisticsAttributionTypeCLICKS

                    "SHOWS" ->
                        Json.Decode.succeed ShelfsStatisticsAttributionTypeSHOWS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shipmentActionTypeDecoder : Json.Decode.Decoder ShipmentActionType
shipmentActionTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CONFIRM" ->
                        Json.Decode.succeed ShipmentActionTypeCONFIRM

                    "DOWNLOAD_ACT" ->
                        Json.Decode.succeed ShipmentActionTypeDOWNLOADACT

                    "DOWNLOAD_INBOUND_ACT" ->
                        Json.Decode.succeed ShipmentActionTypeDOWNLOADINBOUNDACT

                    "DOWNLOAD_DISCREPANCY_ACT" ->
                        Json.Decode.succeed ShipmentActionTypeDOWNLOADDISCREPANCYACT

                    "CHANGE_PALLETS_COUNT" ->
                        Json.Decode.succeed ShipmentActionTypeCHANGEPALLETSCOUNT

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shipmentBoxesDTODecoder : Json.Decode.Decoder ShipmentBoxesDTO
shipmentBoxesDTODecoder =
    Json.Decode.succeed ShipmentBoxesDTO
        |> decode "boxes" (Json.Decode.list parcelBoxDTODecoder) 


shipmentDTODecoder : Json.Decode.Decoder ShipmentDTO
shipmentDTODecoder =
    Json.Decode.succeed ShipmentDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "planIntervalFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "planIntervalTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "shipmentType" shipmentTypeDecoder Nothing
        |> maybeDecode "warehouse" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "warehouseTo" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "externalId" Json.Decode.string Nothing
        |> maybeDecode "deliveryService" deliveryServiceDTODecoder Nothing
        |> maybeDecode "palletsCount" palletsCountDTODecoder Nothing
        |> decode "orderIds" (Json.Decode.list Json.Decode.int) 
        |> maybeDecode "draftCount" Json.Decode.int Nothing
        |> maybeDecode "plannedCount" Json.Decode.int Nothing
        |> maybeDecode "factCount" Json.Decode.int Nothing
        |> maybeDecode "currentStatus" shipmentStatusChangeDTODecoder Nothing
        |> decode "availableActions" (Json.Decode.list shipmentActionTypeDecoder) 


shipmentInfoDTODecoder : Json.Decode.Decoder ShipmentInfoDTO
shipmentInfoDTODecoder =
    Json.Decode.succeed ShipmentInfoDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "planIntervalFrom" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "planIntervalTo" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "shipmentType" shipmentTypeDecoder Nothing
        |> maybeDecode "warehouse" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "warehouseTo" partnerShipmentWarehouseDTODecoder Nothing
        |> maybeDecode "externalId" Json.Decode.string Nothing
        |> maybeDecode "deliveryService" deliveryServiceDTODecoder Nothing
        |> maybeDecode "palletsCount" palletsCountDTODecoder Nothing
        |> decode "orderIds" (Json.Decode.list Json.Decode.int) 
        |> maybeDecode "draftCount" Json.Decode.int Nothing
        |> maybeDecode "plannedCount" Json.Decode.int Nothing
        |> maybeDecode "factCount" Json.Decode.int Nothing
        |> maybeDecode "status" shipmentStatusTypeDecoder Nothing
        |> maybeDecode "statusDescription" Json.Decode.string Nothing
        |> maybeDecode "statusUpdateTime" Api.Time.dateTimeDecoder Nothing


shipmentPalletLabelPageFormatTypeDecoder : Json.Decode.Decoder ShipmentPalletLabelPageFormatType
shipmentPalletLabelPageFormatTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "A4" ->
                        Json.Decode.succeed ShipmentPalletLabelPageFormatTypeA4

                    "A8" ->
                        Json.Decode.succeed ShipmentPalletLabelPageFormatTypeA8

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shipmentStatusChangeDTODecoder : Json.Decode.Decoder ShipmentStatusChangeDTO
shipmentStatusChangeDTODecoder =
    Json.Decode.succeed ShipmentStatusChangeDTO
        |> maybeDecode "status" shipmentStatusTypeDecoder Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "updateTime" Api.Time.dateTimeDecoder Nothing


shipmentStatusTypeDecoder : Json.Decode.Decoder ShipmentStatusType
shipmentStatusTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "OUTBOUND_CREATED" ->
                        Json.Decode.succeed ShipmentStatusTypeOUTBOUNDCREATED

                    "OUTBOUND_READY_FOR_CONFIRMATION" ->
                        Json.Decode.succeed ShipmentStatusTypeOUTBOUNDREADYFORCONFIRMATION

                    "OUTBOUND_CONFIRMED" ->
                        Json.Decode.succeed ShipmentStatusTypeOUTBOUNDCONFIRMED

                    "OUTBOUND_SIGNED" ->
                        Json.Decode.succeed ShipmentStatusTypeOUTBOUNDSIGNED

                    "FINISHED" ->
                        Json.Decode.succeed ShipmentStatusTypeFINISHED

                    "ACCEPTED" ->
                        Json.Decode.succeed ShipmentStatusTypeACCEPTED

                    "ACCEPTED_WITH_DISCREPANCIES" ->
                        Json.Decode.succeed ShipmentStatusTypeACCEPTEDWITHDISCREPANCIES

                    "ERROR" ->
                        Json.Decode.succeed ShipmentStatusTypeERROR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shipmentTypeDecoder : Json.Decode.Decoder ShipmentType
shipmentTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "IMPORT" ->
                        Json.Decode.succeed ShipmentTypeIMPORT

                    "WITHDRAW" ->
                        Json.Decode.succeed ShipmentTypeWITHDRAW

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


shopSkuDecoder : Json.Decode.Decoder ShopSku
shopSkuDecoder =
    Json.Decode.succeed ShopSku


showsSalesGroupingTypeDecoder : Json.Decode.Decoder ShowsSalesGroupingType
showsSalesGroupingTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "CATEGORIES" ->
                        Json.Decode.succeed ShowsSalesGroupingTypeCATEGORIES

                    "OFFERS" ->
                        Json.Decode.succeed ShowsSalesGroupingTypeOFFERS

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


skipGoodsFeedbackReactionRequestDecoder : Json.Decode.Decoder SkipGoodsFeedbackReactionRequest
skipGoodsFeedbackReactionRequestDecoder =
    Json.Decode.succeed SkipGoodsFeedbackReactionRequest
        |> decode "feedbackIds" (Json.Decode.list Json.Decode.int) 


skuBidItemDTODecoder : Json.Decode.Decoder SkuBidItemDTO
skuBidItemDTODecoder =
    Json.Decode.succeed SkuBidItemDTO
        |> decode "sku" Json.Decode.string 
        |> decode "bid" Json.Decode.int 


skuBidRecommendationItemDTODecoder : Json.Decode.Decoder SkuBidRecommendationItemDTO
skuBidRecommendationItemDTODecoder =
    Json.Decode.succeed SkuBidRecommendationItemDTO
        |> decode "sku" Json.Decode.string 
        |> decode "bid" Json.Decode.int 
        |> maybeDecodeNullable "bidRecommendations" (Json.Decode.list bidRecommendationItemDTODecoder) Nothing
        |> maybeDecodeNullable "priceRecommendations" (Json.Decode.list priceRecommendationItemDTODecoder) Nothing


sortOrderTypeDecoder : Json.Decode.Decoder SortOrderType
sortOrderTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ASC" ->
                        Json.Decode.succeed SortOrderTypeASC

                    "DESC" ->
                        Json.Decode.succeed SortOrderTypeDESC

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


suggestOfferPriceDTODecoder : Json.Decode.Decoder SuggestOfferPriceDTO
suggestOfferPriceDTODecoder =
    Json.Decode.succeed SuggestOfferPriceDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "marketSku" Json.Decode.int Nothing


suggestPricesRequestDecoder : Json.Decode.Decoder SuggestPricesRequest
suggestPricesRequestDecoder =
    Json.Decode.succeed SuggestPricesRequest
        |> decode "offers" (Json.Decode.list suggestOfferPriceDTODecoder) 


suggestPricesResponseDecoder : Json.Decode.Decoder SuggestPricesResponse
suggestPricesResponseDecoder =
    Json.Decode.succeed SuggestPricesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" suggestPricesResultDTODecoder Nothing


suggestPricesResultDTODecoder : Json.Decode.Decoder SuggestPricesResultDTO
suggestPricesResultDTODecoder =
    Json.Decode.succeed SuggestPricesResultDTO
        |> decode "offers" (Json.Decode.list priceSuggestOfferDTODecoder) 


suggestedOfferDTODecoder : Json.Decode.Decoder SuggestedOfferDTO
suggestedOfferDTODecoder =
    Json.Decode.succeed SuggestedOfferDTO
        |> maybeDecode "offerId" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecode "basicPrice" basePriceDTODecoder Nothing


suggestedOfferMappingDTODecoder : Json.Decode.Decoder SuggestedOfferMappingDTO
suggestedOfferMappingDTODecoder =
    Json.Decode.succeed SuggestedOfferMappingDTO
        |> maybeDecode "offer" suggestedOfferDTODecoder Nothing
        |> maybeDecode "mapping" getMappingDTODecoder Nothing


tariffDTODecoder : Json.Decode.Decoder TariffDTO
tariffDTODecoder =
    Json.Decode.succeed TariffDTO
        |> decode "type" tariffTypeDecoder 
        |> maybeDecode "percent" Json.Decode.float Nothing
        |> decode "amount" Json.Decode.float 
        |> decode "parameters" (Json.Decode.list tariffParameterDTODecoder) 


tariffParameterDTODecoder : Json.Decode.Decoder TariffParameterDTO
tariffParameterDTODecoder =
    Json.Decode.succeed TariffParameterDTO
        |> decode "name" Json.Decode.string 
        |> decode "value" Json.Decode.string 


tariffTypeDecoder : Json.Decode.Decoder TariffType
tariffTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "AGENCY_COMMISSION" ->
                        Json.Decode.succeed TariffTypeAGENCYCOMMISSION

                    "PAYMENT_TRANSFER" ->
                        Json.Decode.succeed TariffTypePAYMENTTRANSFER

                    "STORAGE" ->
                        Json.Decode.succeed TariffTypeSTORAGE

                    "WITHDRAW" ->
                        Json.Decode.succeed TariffTypeWITHDRAW

                    "SURPLUS" ->
                        Json.Decode.succeed TariffTypeSURPLUS

                    "FEE" ->
                        Json.Decode.succeed TariffTypeFEE

                    "DELIVERY_TO_CUSTOMER" ->
                        Json.Decode.succeed TariffTypeDELIVERYTOCUSTOMER

                    "CROSSREGIONAL_DELIVERY" ->
                        Json.Decode.succeed TariffTypeCROSSREGIONALDELIVERY

                    "CROSSREGIONAL_DELIVERY_RETURN" ->
                        Json.Decode.succeed TariffTypeCROSSREGIONALDELIVERYRETURN

                    "DISPOSAL" ->
                        Json.Decode.succeed TariffTypeDISPOSAL

                    "SORTING_CENTER_STORAGE" ->
                        Json.Decode.succeed TariffTypeSORTINGCENTERSTORAGE

                    "EXPRESS_DELIVERY" ->
                        Json.Decode.succeed TariffTypeEXPRESSDELIVERY

                    "FF_XDOC_SUPPLY_BOX" ->
                        Json.Decode.succeed TariffTypeFFXDOCSUPPLYBOX

                    "FF_XDOC_SUPPLY_PALLET" ->
                        Json.Decode.succeed TariffTypeFFXDOCSUPPLYPALLET

                    "SORTING" ->
                        Json.Decode.succeed TariffTypeSORTING

                    "MIDDLE_MILE" ->
                        Json.Decode.succeed TariffTypeMIDDLEMILE

                    "RETURN_PROCESSING" ->
                        Json.Decode.succeed TariffTypeRETURNPROCESSING

                    "EXPRESS_CANCELLED_BY_PARTNER" ->
                        Json.Decode.succeed TariffTypeEXPRESSCANCELLEDBYPARTNER

                    "DELIVERY_TO_CUSTOMER_RETURN" ->
                        Json.Decode.succeed TariffTypeDELIVERYTOCUSTOMERRETURN

                    "CROSSBORDER_DELIVERY" ->
                        Json.Decode.succeed TariffTypeCROSSBORDERDELIVERY

                    "INTAKE_SORTING_BULKY_CARGO" ->
                        Json.Decode.succeed TariffTypeINTAKESORTINGBULKYCARGO

                    "INTAKE_SORTING_SMALL_GOODS" ->
                        Json.Decode.succeed TariffTypeINTAKESORTINGSMALLGOODS

                    "INTAKE_SORTING_DAILY" ->
                        Json.Decode.succeed TariffTypeINTAKESORTINGDAILY

                    "FF_STORAGE_BILLING" ->
                        Json.Decode.succeed TariffTypeFFSTORAGEBILLING

                    "CANCELLED_ORDER_FEE_QI" ->
                        Json.Decode.succeed TariffTypeCANCELLEDORDERFEEQI

                    "LATE_ORDER_EXECUTION_FEE_QI" ->
                        Json.Decode.succeed TariffTypeLATEORDEREXECUTIONFEEQI

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


timePeriodDTODecoder : Json.Decode.Decoder TimePeriodDTO
timePeriodDTODecoder =
    Json.Decode.succeed TimePeriodDTO
        |> decode "timePeriod" Json.Decode.int 
        |> decode "timeUnit" timeUnitTypeDecoder 
        |> maybeDecode "comment" Json.Decode.string Nothing


timeUnitTypeDecoder : Json.Decode.Decoder TimeUnitType
timeUnitTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "HOUR" ->
                        Json.Decode.succeed TimeUnitTypeHOUR

                    "DAY" ->
                        Json.Decode.succeed TimeUnitTypeDAY

                    "WEEK" ->
                        Json.Decode.succeed TimeUnitTypeWEEK

                    "MONTH" ->
                        Json.Decode.succeed TimeUnitTypeMONTH

                    "YEAR" ->
                        Json.Decode.succeed TimeUnitTypeYEAR

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


trackDTODecoder : Json.Decode.Decoder TrackDTO
trackDTODecoder =
    Json.Decode.succeed TrackDTO
        |> maybeDecode "trackCode" Json.Decode.string Nothing


transferOrdersFromShipmentRequestDecoder : Json.Decode.Decoder TransferOrdersFromShipmentRequest
transferOrdersFromShipmentRequestDecoder =
    Json.Decode.succeed TransferOrdersFromShipmentRequest
        |> decode "orderIds" (Json.Decode.list Json.Decode.int) 


turnoverDTODecoder : Json.Decode.Decoder TurnoverDTO
turnoverDTODecoder =
    Json.Decode.succeed TurnoverDTO
        |> decode "turnover" turnoverTypeDecoder 
        |> maybeDecode "turnoverDays" Json.Decode.float Nothing


turnoverTypeDecoder : Json.Decode.Decoder TurnoverType
turnoverTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "LOW" ->
                        Json.Decode.succeed TurnoverTypeLOW

                    "ALMOST_LOW" ->
                        Json.Decode.succeed TurnoverTypeALMOSTLOW

                    "HIGH" ->
                        Json.Decode.succeed TurnoverTypeHIGH

                    "VERY_HIGH" ->
                        Json.Decode.succeed TurnoverTypeVERYHIGH

                    "NO_SALES" ->
                        Json.Decode.succeed TurnoverTypeNOSALES

                    "FREE_STORE" ->
                        Json.Decode.succeed TurnoverTypeFREESTORE

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


unitDTODecoder : Json.Decode.Decoder UnitDTO
unitDTODecoder =
    Json.Decode.succeed UnitDTO
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "fullName" Json.Decode.string 


updateBusinessOfferPriceDTODecoder : Json.Decode.Decoder UpdateBusinessOfferPriceDTO
updateBusinessOfferPriceDTODecoder =
    Json.Decode.succeed UpdateBusinessOfferPriceDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "price" updatePriceWithDiscountDTODecoder 


updateBusinessPricesRequestDecoder : Json.Decode.Decoder UpdateBusinessPricesRequest
updateBusinessPricesRequestDecoder =
    Json.Decode.succeed UpdateBusinessPricesRequest
        |> decode "offers" (Json.Decode.list updateBusinessOfferPriceDTODecoder) 


updateCampaignOfferDTODecoder : Json.Decode.Decoder UpdateCampaignOfferDTO
updateCampaignOfferDTODecoder =
    Json.Decode.succeed UpdateCampaignOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "quantum" quantumDTODecoder Nothing
        |> maybeDecode "available" Json.Decode.bool Nothing
        |> maybeDecode "vat" Json.Decode.int Nothing


updateCampaignOffersRequestDecoder : Json.Decode.Decoder UpdateCampaignOffersRequest
updateCampaignOffersRequestDecoder =
    Json.Decode.succeed UpdateCampaignOffersRequest
        |> decode "offers" (Json.Decode.list updateCampaignOfferDTODecoder) 


updateGoodsFeedbackCommentDTODecoder : Json.Decode.Decoder UpdateGoodsFeedbackCommentDTO
updateGoodsFeedbackCommentDTODecoder =
    Json.Decode.succeed UpdateGoodsFeedbackCommentDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "parentId" Json.Decode.int Nothing
        |> decode "text" Json.Decode.string 


updateGoodsFeedbackCommentRequestDecoder : Json.Decode.Decoder UpdateGoodsFeedbackCommentRequest
updateGoodsFeedbackCommentRequestDecoder =
    Json.Decode.succeed UpdateGoodsFeedbackCommentRequest
        |> decode "feedbackId" Json.Decode.int 
        |> decode "comment" updateGoodsFeedbackCommentDTODecoder 


updateGoodsFeedbackCommentResponseDecoder : Json.Decode.Decoder UpdateGoodsFeedbackCommentResponse
updateGoodsFeedbackCommentResponseDecoder =
    Json.Decode.succeed UpdateGoodsFeedbackCommentResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" goodsFeedbackCommentDTODecoder Nothing


updateMappingDTODecoder : Json.Decode.Decoder UpdateMappingDTO
updateMappingDTODecoder =
    Json.Decode.succeed UpdateMappingDTO
        |> maybeDecode "marketSku" Json.Decode.int Nothing


updateMappingsOfferDTODecoder : Json.Decode.Decoder UpdateMappingsOfferDTO
updateMappingsOfferDTODecoder =
    Json.Decode.succeed UpdateMappingsOfferDTO
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "shopSku" Json.Decode.string Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "feedId" Json.Decode.int Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "urls" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "manufacturer" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "minShipment" Json.Decode.int Nothing
        |> maybeDecode "transportUnitSize" Json.Decode.int Nothing
        |> maybeDecode "quantumOfSupply" Json.Decode.int Nothing
        |> maybeDecode "deliveryDurationDays" Json.Decode.int Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecodeNullable "customsCommodityCodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecodeNullable "supplyScheduleDays" (Json.Decode.list dayOfWeekTypeDecoder) Nothing
        |> maybeDecode "shelfLifeDays" Json.Decode.int Nothing
        |> maybeDecode "lifeTimeDays" Json.Decode.int Nothing
        |> maybeDecode "guaranteePeriodDays" Json.Decode.int Nothing
        |> maybeDecode "processingState" offerProcessingStateDTODecoder Nothing
        |> maybeDecode "availability" offerAvailabilityStatusTypeDecoder Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "certificate" Json.Decode.string Nothing


updateOfferContentRequestDecoder : Json.Decode.Decoder UpdateOfferContentRequest
updateOfferContentRequestDecoder =
    Json.Decode.succeed UpdateOfferContentRequest
        |> decode "offersContent" (Json.Decode.list offerContentDTODecoder) 


updateOfferContentResponseDecoder : Json.Decode.Decoder UpdateOfferContentResponse
updateOfferContentResponseDecoder =
    Json.Decode.succeed UpdateOfferContentResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "results" (Json.Decode.list updateOfferContentResultDTODecoder) Nothing


updateOfferContentResultDTODecoder : Json.Decode.Decoder UpdateOfferContentResultDTO
updateOfferContentResultDTODecoder =
    Json.Decode.succeed UpdateOfferContentResultDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecodeNullable "errors" (Json.Decode.list offerContentErrorDTODecoder) Nothing
        |> maybeDecodeNullable "warnings" (Json.Decode.list offerContentErrorDTODecoder) Nothing


updateOfferDTODecoder : Json.Decode.Decoder UpdateOfferDTO
updateOfferDTODecoder =
    Json.Decode.succeed UpdateOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "marketCategoryId" Json.Decode.int Nothing
        |> maybeDecode "category" Json.Decode.string Nothing
        |> maybeDecodeNullable "pictures" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "videos" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecodeNullable "manuals" (Json.Decode.list offerManualDTODecoder) Nothing
        |> maybeDecode "vendor" Json.Decode.string Nothing
        |> maybeDecodeNullable "barcodes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecodeNullable "manufacturerCountries" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "weightDimensions" offerWeightDimensionsDTODecoder Nothing
        |> maybeDecode "vendorCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "tags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "shelfLife" timePeriodDTODecoder Nothing
        |> maybeDecode "lifeTime" timePeriodDTODecoder Nothing
        |> maybeDecode "guaranteePeriod" timePeriodDTODecoder Nothing
        |> maybeDecode "customsCommodityCode" Json.Decode.string Nothing
        |> maybeDecodeNullable "certificates" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "boxCount" Json.Decode.int Nothing
        |> maybeDecode "condition" offerConditionDTODecoder Nothing
        |> maybeDecode "type" offerTypeDecoder Nothing
        |> maybeDecode "downloadable" Json.Decode.bool Nothing
        |> maybeDecode "adult" Json.Decode.bool Nothing
        |> maybeDecode "age" ageDTODecoder Nothing
        |> maybeDecodeNullable "params" (Json.Decode.list offerParamDTODecoder) Nothing
        |> maybeDecodeNullable "parameterValues" (Json.Decode.list parameterValueDTODecoder) Nothing
        |> maybeDecode "basicPrice" updatePriceWithDiscountDTODecoder Nothing
        |> maybeDecode "purchasePrice" basePriceDTODecoder Nothing
        |> maybeDecode "additionalExpenses" basePriceDTODecoder Nothing
        |> maybeDecode "cofinancePrice" basePriceDTODecoder Nothing


updateOfferMappingDTODecoder : Json.Decode.Decoder UpdateOfferMappingDTO
updateOfferMappingDTODecoder =
    Json.Decode.succeed UpdateOfferMappingDTO
        |> decode "offer" updateOfferDTODecoder 
        |> maybeDecode "mapping" updateMappingDTODecoder Nothing


updateOfferMappingEntryDTODecoder : Json.Decode.Decoder UpdateOfferMappingEntryDTO
updateOfferMappingEntryDTODecoder =
    Json.Decode.succeed UpdateOfferMappingEntryDTO
        |> maybeDecode "mapping" offerMappingDTODecoder Nothing
        |> maybeDecode "awaitingModerationMapping" offerMappingDTODecoder Nothing
        |> maybeDecode "rejectedMapping" offerMappingDTODecoder Nothing
        |> maybeDecode "offer" updateMappingsOfferDTODecoder Nothing


updateOfferMappingEntryRequestDecoder : Json.Decode.Decoder UpdateOfferMappingEntryRequest
updateOfferMappingEntryRequestDecoder =
    Json.Decode.succeed UpdateOfferMappingEntryRequest
        |> decode "offerMappingEntries" (Json.Decode.list updateOfferMappingEntryDTODecoder) 


updateOfferMappingResultDTODecoder : Json.Decode.Decoder UpdateOfferMappingResultDTO
updateOfferMappingResultDTODecoder =
    Json.Decode.succeed UpdateOfferMappingResultDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecodeNullable "errors" (Json.Decode.list offerMappingErrorDTODecoder) Nothing
        |> maybeDecodeNullable "warnings" (Json.Decode.list offerMappingErrorDTODecoder) Nothing


updateOfferMappingsRequestDecoder : Json.Decode.Decoder UpdateOfferMappingsRequest
updateOfferMappingsRequestDecoder =
    Json.Decode.succeed UpdateOfferMappingsRequest
        |> decode "offerMappings" (Json.Decode.list updateOfferMappingDTODecoder) 
        |> maybeDecode "onlyPartnerMediaContent" Json.Decode.bool Nothing


updateOfferMappingsResponseDecoder : Json.Decode.Decoder UpdateOfferMappingsResponse
updateOfferMappingsResponseDecoder =
    Json.Decode.succeed UpdateOfferMappingsResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecodeNullable "results" (Json.Decode.list updateOfferMappingResultDTODecoder) Nothing


updateOrderItemRequestDecoder : Json.Decode.Decoder UpdateOrderItemRequest
updateOrderItemRequestDecoder =
    Json.Decode.succeed UpdateOrderItemRequest
        |> decode "items" (Json.Decode.list orderItemModificationDTODecoder) 
        |> maybeDecode "reason" orderItemsModificationRequestReasonTypeDecoder Nothing


updateOrderStatusDTODecoder : Json.Decode.Decoder UpdateOrderStatusDTO
updateOrderStatusDTODecoder =
    Json.Decode.succeed UpdateOrderStatusDTO
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "status" orderStatusTypeDecoder Nothing
        |> maybeDecode "substatus" orderSubstatusTypeDecoder Nothing
        |> maybeDecode "updateStatus" orderUpdateStatusTypeDecoder Nothing
        |> maybeDecode "errorDetails" Json.Decode.string Nothing


updateOrderStatusRequestDecoder : Json.Decode.Decoder UpdateOrderStatusRequest
updateOrderStatusRequestDecoder =
    Json.Decode.succeed UpdateOrderStatusRequest
        |> decode "order" orderStatusChangeDTODecoder 


updateOrderStatusResponseDecoder : Json.Decode.Decoder UpdateOrderStatusResponse
updateOrderStatusResponseDecoder =
    Json.Decode.succeed UpdateOrderStatusResponse
        |> maybeDecode "order" orderDTODecoder Nothing


updateOrderStatusesDTODecoder : Json.Decode.Decoder UpdateOrderStatusesDTO
updateOrderStatusesDTODecoder =
    Json.Decode.succeed UpdateOrderStatusesDTO
        |> decode "orders" (Json.Decode.list updateOrderStatusDTODecoder) 


updateOrderStatusesRequestDecoder : Json.Decode.Decoder UpdateOrderStatusesRequest
updateOrderStatusesRequestDecoder =
    Json.Decode.succeed UpdateOrderStatusesRequest
        |> decode "orders" (Json.Decode.list orderStateDTODecoder) 


updateOrderStatusesResponseDecoder : Json.Decode.Decoder UpdateOrderStatusesResponse
updateOrderStatusesResponseDecoder =
    Json.Decode.succeed UpdateOrderStatusesResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" updateOrderStatusesDTODecoder Nothing


updateOrderStorageLimitRequestDecoder : Json.Decode.Decoder UpdateOrderStorageLimitRequest
updateOrderStorageLimitRequestDecoder =
    Json.Decode.succeed UpdateOrderStorageLimitRequest
        |> decode "newDate" Api.Time.dateDecoder 


updateOutletLicenseRequestDecoder : Json.Decode.Decoder UpdateOutletLicenseRequest
updateOutletLicenseRequestDecoder =
    Json.Decode.succeed UpdateOutletLicenseRequest
        |> decode "licenses" (Json.Decode.list outletLicenseDTODecoder) 


updatePriceWithDiscountDTODecoder : Json.Decode.Decoder UpdatePriceWithDiscountDTO
updatePriceWithDiscountDTODecoder =
    Json.Decode.succeed UpdatePriceWithDiscountDTO
        |> decode "value" Json.Decode.float 
        |> decode "currencyId" currencyTypeDecoder 
        |> maybeDecode "discountBase" Json.Decode.float Nothing


updatePricesRequestDecoder : Json.Decode.Decoder UpdatePricesRequest
updatePricesRequestDecoder =
    Json.Decode.succeed UpdatePricesRequest
        |> decode "offers" (Json.Decode.list offerPriceDTODecoder) 


updatePromoOfferDTODecoder : Json.Decode.Decoder UpdatePromoOfferDTO
updatePromoOfferDTODecoder =
    Json.Decode.succeed UpdatePromoOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "params" updatePromoOfferParamsDTODecoder Nothing


updatePromoOfferDiscountParamsDTODecoder : Json.Decode.Decoder UpdatePromoOfferDiscountParamsDTO
updatePromoOfferDiscountParamsDTODecoder =
    Json.Decode.succeed UpdatePromoOfferDiscountParamsDTO
        |> maybeDecode "price" Json.Decode.int Nothing
        |> maybeDecode "promoPrice" Json.Decode.int Nothing


updatePromoOfferParamsDTODecoder : Json.Decode.Decoder UpdatePromoOfferParamsDTO
updatePromoOfferParamsDTODecoder =
    Json.Decode.succeed UpdatePromoOfferParamsDTO
        |> maybeDecode "discountParams" updatePromoOfferDiscountParamsDTODecoder Nothing


updatePromoOffersRequestDecoder : Json.Decode.Decoder UpdatePromoOffersRequest
updatePromoOffersRequestDecoder =
    Json.Decode.succeed UpdatePromoOffersRequest
        |> decode "promoId" Json.Decode.string 
        |> decode "offers" (Json.Decode.list updatePromoOfferDTODecoder) 


updatePromoOffersResponseDecoder : Json.Decode.Decoder UpdatePromoOffersResponse
updatePromoOffersResponseDecoder =
    Json.Decode.succeed UpdatePromoOffersResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" updatePromoOffersResultDTODecoder Nothing


updatePromoOffersResultDTODecoder : Json.Decode.Decoder UpdatePromoOffersResultDTO
updatePromoOffersResultDTODecoder =
    Json.Decode.succeed UpdatePromoOffersResultDTO
        |> maybeDecodeNullable "rejectedOffers" (Json.Decode.list rejectedPromoOfferUpdateDTODecoder) Nothing
        |> maybeDecodeNullable "warningOffers" (Json.Decode.list warningPromoOfferUpdateDTODecoder) Nothing


updateStockDTODecoder : Json.Decode.Decoder UpdateStockDTO
updateStockDTODecoder =
    Json.Decode.succeed UpdateStockDTO
        |> decode "sku" Json.Decode.string 
        |> decode "items" (Json.Decode.list updateStockItemDTODecoder) 


updateStockItemDTODecoder : Json.Decode.Decoder UpdateStockItemDTO
updateStockItemDTODecoder =
    Json.Decode.succeed UpdateStockItemDTO
        |> decode "count" Json.Decode.int 
        |> maybeDecode "updatedAt" Api.Time.dateTimeDecoder Nothing


updateStocksRequestDecoder : Json.Decode.Decoder UpdateStocksRequest
updateStocksRequestDecoder =
    Json.Decode.succeed UpdateStocksRequest
        |> decode "skus" (Json.Decode.list updateStockDTODecoder) 


updateTimeDTODecoder : Json.Decode.Decoder UpdateTimeDTO
updateTimeDTODecoder =
    Json.Decode.succeed UpdateTimeDTO
        |> decode "updatedAt" Api.Time.dateTimeDecoder 


valueRestrictionDTODecoder : Json.Decode.Decoder ValueRestrictionDTO
valueRestrictionDTODecoder =
    Json.Decode.succeed ValueRestrictionDTO
        |> decode "limitingParameterId" Json.Decode.int 
        |> decode "limitedValues" (Json.Decode.list optionValuesLimitedDTODecoder) 


verifyOrderEacRequestDecoder : Json.Decode.Decoder VerifyOrderEacRequest
verifyOrderEacRequestDecoder =
    Json.Decode.succeed VerifyOrderEacRequest
        |> maybeDecode "code" Json.Decode.string Nothing


verifyOrderEacResponseDecoder : Json.Decode.Decoder VerifyOrderEacResponse
verifyOrderEacResponseDecoder =
    Json.Decode.succeed VerifyOrderEacResponse
        |> maybeDecode "status" apiResponseStatusTypeDecoder Nothing
        |> maybeDecode "result" eacVerificationResultDTODecoder Nothing


warehouseAddressDTODecoder : Json.Decode.Decoder WarehouseAddressDTO
warehouseAddressDTODecoder =
    Json.Decode.succeed WarehouseAddressDTO
        |> decode "city" Json.Decode.string 
        |> maybeDecode "street" Json.Decode.string Nothing
        |> maybeDecode "number" Json.Decode.string Nothing
        |> maybeDecode "building" Json.Decode.string Nothing
        |> maybeDecode "block" Json.Decode.string Nothing
        |> decode "gps" gpsDTODecoder 


warehouseDTODecoder : Json.Decode.Decoder WarehouseDTO
warehouseDTODecoder =
    Json.Decode.succeed WarehouseDTO
        |> decode "id" Json.Decode.int 
        |> decode "name" Json.Decode.string 
        |> decode "campaignId" Json.Decode.int 
        |> decode "express" Json.Decode.bool 
        |> maybeDecode "address" warehouseAddressDTODecoder Nothing


warehouseGroupDTODecoder : Json.Decode.Decoder WarehouseGroupDTO
warehouseGroupDTODecoder =
    Json.Decode.succeed WarehouseGroupDTO
        |> decode "name" Json.Decode.string 
        |> decode "mainWarehouse" warehouseDTODecoder 
        |> decode "warehouses" (Json.Decode.list warehouseDTODecoder) 


warehouseOfferDTODecoder : Json.Decode.Decoder WarehouseOfferDTO
warehouseOfferDTODecoder =
    Json.Decode.succeed WarehouseOfferDTO
        |> decode "offerId" Json.Decode.string 
        |> maybeDecode "turnoverSummary" turnoverDTODecoder Nothing
        |> decode "stocks" (Json.Decode.list warehouseStockDTODecoder) 
        |> maybeDecode "updatedAt" Api.Time.dateTimeDecoder Nothing


warehouseOffersDTODecoder : Json.Decode.Decoder WarehouseOffersDTO
warehouseOffersDTODecoder =
    Json.Decode.succeed WarehouseOffersDTO
        |> decode "warehouseId" Json.Decode.int 
        |> decode "offers" (Json.Decode.list warehouseOfferDTODecoder) 


warehouseStockDTODecoder : Json.Decode.Decoder WarehouseStockDTO
warehouseStockDTODecoder =
    Json.Decode.succeed WarehouseStockDTO
        |> decode "type" warehouseStockTypeDecoder 
        |> decode "count" Json.Decode.int 


warehouseStockTypeDecoder : Json.Decode.Decoder WarehouseStockType
warehouseStockTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "FIT" ->
                        Json.Decode.succeed WarehouseStockTypeFIT

                    "FREEZE" ->
                        Json.Decode.succeed WarehouseStockTypeFREEZE

                    "AVAILABLE" ->
                        Json.Decode.succeed WarehouseStockTypeAVAILABLE

                    "QUARANTINE" ->
                        Json.Decode.succeed WarehouseStockTypeQUARANTINE

                    "UTILIZATION" ->
                        Json.Decode.succeed WarehouseStockTypeUTILIZATION

                    "DEFECT" ->
                        Json.Decode.succeed WarehouseStockTypeDEFECT

                    "EXPIRED" ->
                        Json.Decode.succeed WarehouseStockTypeEXPIRED

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


warehousesDTODecoder : Json.Decode.Decoder WarehousesDTO
warehousesDTODecoder =
    Json.Decode.succeed WarehousesDTO
        |> decode "warehouses" (Json.Decode.list warehouseDTODecoder) 
        |> decode "warehouseGroups" (Json.Decode.list warehouseGroupDTODecoder) 


warningPromoOfferUpdateDTODecoder : Json.Decode.Decoder WarningPromoOfferUpdateDTO
warningPromoOfferUpdateDTODecoder =
    Json.Decode.succeed WarningPromoOfferUpdateDTO
        |> decode "offerId" Json.Decode.string 
        |> decode "warnings" (Json.Decode.list promoOfferUpdateWarningDTODecoder) 




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f