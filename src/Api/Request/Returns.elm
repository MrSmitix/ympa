{-
   Партнерский API Маркета
   API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

   The version of the OpenAPI document: LATEST

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Returns exposing
    ( getReturn
    , getReturnApplication
    , getReturnPhoto
    , getReturns
    , setReturnDecision
    , submitReturnDecision
    )

import Api
import Api.Data exposing (..)
import Api.Time exposing (Posix)
import Dict
import Http
import Json.Decode
import Json.Encode
import File exposing (File)

{-| Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
getReturn : Int -> Int -> Int -> Api.Request Api.Data.GetReturnResponse
getReturn campaignId_path orderId_path returnId_path =
    Api.request
        "GET"
        "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"
        [ ( "campaignId", String.fromInt campaignId_path ), ( "orderId", String.fromInt orderId_path ), ( "returnId", String.fromInt returnId_path ) ]
        []
        []
        Nothing
        Api.Data.getReturnResponseDecoder


{-| Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
getReturnApplication : Int -> Int -> Int -> Api.Request File
getReturnApplication campaignId_path orderId_path returnId_path =
    Api.request
        "GET"
        "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"
        [ ( "campaignId", String.fromInt campaignId_path ), ( "orderId", String.fromInt orderId_path ), ( "returnId", String.fromInt returnId_path ) ]
        []
        []
        Nothing
        File.decoder


{-| Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
getReturnPhoto : Int -> Int -> Int -> Int -> String -> Api.Request File
getReturnPhoto campaignId_path orderId_path returnId_path itemId_path imageHash_path =
    Api.request
        "GET"
        "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"
        [ ( "campaignId", String.fromInt campaignId_path ), ( "orderId", String.fromInt orderId_path ), ( "returnId", String.fromInt returnId_path ), ( "itemId", String.fromInt itemId_path ), ( "imageHash", identity imageHash_path ) ]
        []
        []
        Nothing
        File.decoder


{-| Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
getReturns : Int -> Maybe String -> Maybe Int -> Maybe (List Int) -> Maybe (List RefundStatusType) -> Maybe ReturnType -> Maybe Posix -> Maybe Posix -> Maybe Posix -> Maybe Posix -> Api.Request Api.Data.GetReturnsResponse
getReturns campaignId_path pageToken_query limit_query orderIds_query statuses_query type__query fromDate_query toDate_query fromDate2_query toDate2_query =
    Api.request
        "GET"
        "/campaigns/{campaignId}/returns"
        [ ( "campaignId", String.fromInt campaignId_path ) ]
        [ ( "page_token", Maybe.map identity pageToken_query ), ( "limit", Maybe.map String.fromInt limit_query ), ( "orderIds", Maybe.map (String.join "," << List.map String.fromInt) orderIds_query ), ( "statuses", Maybe.map (String.join "," << List.map Api.Data.stringFromRefundStatusType) statuses_query ), ( "type", Maybe.map Api.Data.stringFromReturnType type__query ), ( "fromDate", Maybe.map Api.Time.dateToString fromDate_query ), ( "toDate", Maybe.map Api.Time.dateToString toDate_query ), ( "from_date", Maybe.map Api.Time.dateToString fromDate2_query ), ( "to_date", Maybe.map Api.Time.dateToString toDate2_query ) ]
        []
        Nothing
        Api.Data.getReturnsResponseDecoder


{-| Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
setReturnDecision : Int -> Int -> Int -> Api.Data.SetReturnDecisionRequest -> Api.Request Api.Data.EmptyApiResponse
setReturnDecision campaignId_path orderId_path returnId_path setReturnDecisionRequest_body =
    Api.request
        "POST"
        "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"
        [ ( "campaignId", String.fromInt campaignId_path ), ( "orderId", String.fromInt orderId_path ), ( "returnId", String.fromInt returnId_path ) ]
        []
        []
        (Maybe.map Http.jsonBody (Just (Api.Data.encodeSetReturnDecisionRequest setReturnDecisionRequest_body)))
        Api.Data.emptyApiResponseDecoder


{-| Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
-}
submitReturnDecision : Int -> Int -> Int -> Api.Request Api.Data.EmptyApiResponse
submitReturnDecision campaignId_path orderId_path returnId_path =
    Api.request
        "POST"
        "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"
        [ ( "campaignId", String.fromInt campaignId_path ), ( "orderId", String.fromInt orderId_path ), ( "returnId", String.fromInt returnId_path ) ]
        []
        []
        Nothing
        Api.Data.emptyApiResponseDecoder

