/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о товарах в каталоге.
    /// </summary>
    [DataContract]
    public partial class MappingsOfferDTO : IEquatable<MappingsOfferDTO>
    {
        /// <summary>
        /// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
        /// </summary>
        /// <value>Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) </value>
        [MaxLength(256)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="shopSku", EmitDefaultValue=false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
        /// </summary>
        /// <value>Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
        /// </summary>
        /// <value>Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Артикул товара от производителя.
        /// </summary>
        /// <value>Артикул товара от производителя.</value>
        [DataMember(Name="vendorCode", EmitDefaultValue=false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
        /// </summary>
        /// <value>Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) </value>
        [MaxLength(6000)]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Идентификатор фида.
        /// </summary>
        /// <value>Идентификатор фида.</value>
        [DataMember(Name="feedId", EmitDefaultValue=false)]
        public long FeedId { get; set; }

        /// <summary>
        /// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
        /// </summary>
        /// <value>Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  </value>
        [DataMember(Name="barcodes", EmitDefaultValue=true)]
        public List<string> Barcodes { get; set; }

        /// <summary>
        /// URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
        /// </summary>
        /// <value>URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. </value>
        [DataMember(Name="urls", EmitDefaultValue=true)]
        public List<string> Urls { get; set; }

        /// <summary>
        /// Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;. 
        /// </summary>
        /// <value>Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;. </value>
        [DataMember(Name="pictures", EmitDefaultValue=true)]
        public List<string> Pictures { get; set; }

        /// <summary>
        /// Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
        /// </summary>
        /// <value>Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. </value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
        /// </summary>
        /// <value>Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. </value>
        [DataMember(Name="manufacturerCountries", EmitDefaultValue=true)]
        public List<string> ManufacturerCountries { get; set; }

        /// <summary>
        /// Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
        /// </summary>
        /// <value>Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. </value>
        [DataMember(Name="minShipment", EmitDefaultValue=false)]
        public int MinShipment { get; set; }

        /// <summary>
        /// Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
        /// </summary>
        /// <value>Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. </value>
        [DataMember(Name="transportUnitSize", EmitDefaultValue=false)]
        public int TransportUnitSize { get; set; }

        /// <summary>
        /// Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
        /// </summary>
        /// <value>Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. </value>
        [DataMember(Name="quantumOfSupply", EmitDefaultValue=false)]
        public int QuantumOfSupply { get; set; }

        /// <summary>
        /// Срок, за который продавец поставляет товары на склад, в днях.
        /// </summary>
        /// <value>Срок, за который продавец поставляет товары на склад, в днях.</value>
        [DataMember(Name="deliveryDurationDays", EmitDefaultValue=false)]
        public int DeliveryDurationDays { get; set; }

        /// <summary>
        /// Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
        /// </summary>
        /// <value>Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. </value>
        [DataMember(Name="boxCount", EmitDefaultValue=false)]
        public int BoxCount { get; set; }

        /// <summary>
        /// Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
        /// </summary>
        /// <value>Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. </value>
        [DataMember(Name="customsCommodityCodes", EmitDefaultValue=true)]
        public List<string> CustomsCommodityCodes { get; set; }

        /// <summary>
        /// Gets or Sets WeightDimensions
        /// </summary>
        [DataMember(Name="weightDimensions", EmitDefaultValue=false)]
        public OfferWeightDimensionsDTO WeightDimensions { get; set; }

        /// <summary>
        /// Дни недели, в которые продавец поставляет товары на склад.
        /// </summary>
        /// <value>Дни недели, в которые продавец поставляет товары на склад.</value>
        [DataMember(Name="supplyScheduleDays", EmitDefaultValue=true)]
        public List<DayOfWeekType> SupplyScheduleDays { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. </value>
        [DataMember(Name="shelfLifeDays", EmitDefaultValue=false)]
        public int ShelfLifeDays { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. </value>
        [DataMember(Name="lifeTimeDays", EmitDefaultValue=false)]
        public int LifeTimeDays { get; set; }

        /// <summary>
        /// Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
        /// </summary>
        /// <value>Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. </value>
        [DataMember(Name="guaranteePeriodDays", EmitDefaultValue=false)]
        public int GuaranteePeriodDays { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingState
        /// </summary>
        [DataMember(Name="processingState", EmitDefaultValue=false)]
        public OfferProcessingStateDTO ProcessingState { get; set; }

        /// <summary>
        /// Gets or Sets Availability
        /// </summary>
        [DataMember(Name="availability", EmitDefaultValue=false)]
        public OfferAvailabilityStatusType Availability { get; set; }

        /// <summary>
        /// Gets or Sets ShelfLife
        /// </summary>
        [DataMember(Name="shelfLife", EmitDefaultValue=false)]
        public TimePeriodDTO ShelfLife { get; set; }

        /// <summary>
        /// Gets or Sets LifeTime
        /// </summary>
        [DataMember(Name="lifeTime", EmitDefaultValue=false)]
        public TimePeriodDTO LifeTime { get; set; }

        /// <summary>
        /// Gets or Sets GuaranteePeriod
        /// </summary>
        [DataMember(Name="guaranteePeriod", EmitDefaultValue=false)]
        public TimePeriodDTO GuaranteePeriod { get; set; }

        /// <summary>
        /// Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
        /// </summary>
        /// <value>Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) </value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }

        /// <summary>
        /// Цена на товар в рублях.
        /// </summary>
        /// <value>Цена на товар в рублях.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MappingsOfferDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeedId: ").Append(FeedId).Append("\n");
            sb.Append("  Barcodes: ").Append(Barcodes).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerCountries: ").Append(ManufacturerCountries).Append("\n");
            sb.Append("  MinShipment: ").Append(MinShipment).Append("\n");
            sb.Append("  TransportUnitSize: ").Append(TransportUnitSize).Append("\n");
            sb.Append("  QuantumOfSupply: ").Append(QuantumOfSupply).Append("\n");
            sb.Append("  DeliveryDurationDays: ").Append(DeliveryDurationDays).Append("\n");
            sb.Append("  BoxCount: ").Append(BoxCount).Append("\n");
            sb.Append("  CustomsCommodityCodes: ").Append(CustomsCommodityCodes).Append("\n");
            sb.Append("  WeightDimensions: ").Append(WeightDimensions).Append("\n");
            sb.Append("  SupplyScheduleDays: ").Append(SupplyScheduleDays).Append("\n");
            sb.Append("  ShelfLifeDays: ").Append(ShelfLifeDays).Append("\n");
            sb.Append("  LifeTimeDays: ").Append(LifeTimeDays).Append("\n");
            sb.Append("  GuaranteePeriodDays: ").Append(GuaranteePeriodDays).Append("\n");
            sb.Append("  ProcessingState: ").Append(ProcessingState).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  ShelfLife: ").Append(ShelfLife).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  GuaranteePeriod: ").Append(GuaranteePeriod).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MappingsOfferDTO)obj);
        }

        /// <summary>
        /// Returns true if MappingsOfferDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of MappingsOfferDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingsOfferDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ShopSku == other.ShopSku ||
                    ShopSku != null &&
                    ShopSku.Equals(other.ShopSku)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Vendor == other.Vendor ||
                    Vendor != null &&
                    Vendor.Equals(other.Vendor)
                ) && 
                (
                    VendorCode == other.VendorCode ||
                    VendorCode != null &&
                    VendorCode.Equals(other.VendorCode)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FeedId == other.FeedId ||
                    
                    FeedId.Equals(other.FeedId)
                ) && 
                (
                    Barcodes == other.Barcodes ||
                    Barcodes != null &&
                    other.Barcodes != null &&
                    Barcodes.SequenceEqual(other.Barcodes)
                ) && 
                (
                    Urls == other.Urls ||
                    Urls != null &&
                    other.Urls != null &&
                    Urls.SequenceEqual(other.Urls)
                ) && 
                (
                    Pictures == other.Pictures ||
                    Pictures != null &&
                    other.Pictures != null &&
                    Pictures.SequenceEqual(other.Pictures)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    ManufacturerCountries == other.ManufacturerCountries ||
                    ManufacturerCountries != null &&
                    other.ManufacturerCountries != null &&
                    ManufacturerCountries.SequenceEqual(other.ManufacturerCountries)
                ) && 
                (
                    MinShipment == other.MinShipment ||
                    
                    MinShipment.Equals(other.MinShipment)
                ) && 
                (
                    TransportUnitSize == other.TransportUnitSize ||
                    
                    TransportUnitSize.Equals(other.TransportUnitSize)
                ) && 
                (
                    QuantumOfSupply == other.QuantumOfSupply ||
                    
                    QuantumOfSupply.Equals(other.QuantumOfSupply)
                ) && 
                (
                    DeliveryDurationDays == other.DeliveryDurationDays ||
                    
                    DeliveryDurationDays.Equals(other.DeliveryDurationDays)
                ) && 
                (
                    BoxCount == other.BoxCount ||
                    
                    BoxCount.Equals(other.BoxCount)
                ) && 
                (
                    CustomsCommodityCodes == other.CustomsCommodityCodes ||
                    CustomsCommodityCodes != null &&
                    other.CustomsCommodityCodes != null &&
                    CustomsCommodityCodes.SequenceEqual(other.CustomsCommodityCodes)
                ) && 
                (
                    WeightDimensions == other.WeightDimensions ||
                    WeightDimensions != null &&
                    WeightDimensions.Equals(other.WeightDimensions)
                ) && 
                (
                    SupplyScheduleDays == other.SupplyScheduleDays ||
                    SupplyScheduleDays != null &&
                    other.SupplyScheduleDays != null &&
                    SupplyScheduleDays.SequenceEqual(other.SupplyScheduleDays)
                ) && 
                (
                    ShelfLifeDays == other.ShelfLifeDays ||
                    
                    ShelfLifeDays.Equals(other.ShelfLifeDays)
                ) && 
                (
                    LifeTimeDays == other.LifeTimeDays ||
                    
                    LifeTimeDays.Equals(other.LifeTimeDays)
                ) && 
                (
                    GuaranteePeriodDays == other.GuaranteePeriodDays ||
                    
                    GuaranteePeriodDays.Equals(other.GuaranteePeriodDays)
                ) && 
                (
                    ProcessingState == other.ProcessingState ||
                    ProcessingState != null &&
                    ProcessingState.Equals(other.ProcessingState)
                ) && 
                (
                    Availability == other.Availability ||
                    
                    Availability.Equals(other.Availability)
                ) && 
                (
                    ShelfLife == other.ShelfLife ||
                    ShelfLife != null &&
                    ShelfLife.Equals(other.ShelfLife)
                ) && 
                (
                    LifeTime == other.LifeTime ||
                    LifeTime != null &&
                    LifeTime.Equals(other.LifeTime)
                ) && 
                (
                    GuaranteePeriod == other.GuaranteePeriod ||
                    GuaranteePeriod != null &&
                    GuaranteePeriod.Equals(other.GuaranteePeriod)
                ) && 
                (
                    Certificate == other.Certificate ||
                    Certificate != null &&
                    Certificate.Equals(other.Certificate)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ShopSku != null)
                    hashCode = hashCode * 59 + ShopSku.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Vendor != null)
                    hashCode = hashCode * 59 + Vendor.GetHashCode();
                    if (VendorCode != null)
                    hashCode = hashCode * 59 + VendorCode.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + FeedId.GetHashCode();
                    if (Barcodes != null)
                    hashCode = hashCode * 59 + Barcodes.GetHashCode();
                    if (Urls != null)
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                    if (Pictures != null)
                    hashCode = hashCode * 59 + Pictures.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (ManufacturerCountries != null)
                    hashCode = hashCode * 59 + ManufacturerCountries.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinShipment.GetHashCode();
                    
                    hashCode = hashCode * 59 + TransportUnitSize.GetHashCode();
                    
                    hashCode = hashCode * 59 + QuantumOfSupply.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveryDurationDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + BoxCount.GetHashCode();
                    if (CustomsCommodityCodes != null)
                    hashCode = hashCode * 59 + CustomsCommodityCodes.GetHashCode();
                    if (WeightDimensions != null)
                    hashCode = hashCode * 59 + WeightDimensions.GetHashCode();
                    if (SupplyScheduleDays != null)
                    hashCode = hashCode * 59 + SupplyScheduleDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShelfLifeDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + LifeTimeDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + GuaranteePeriodDays.GetHashCode();
                    if (ProcessingState != null)
                    hashCode = hashCode * 59 + ProcessingState.GetHashCode();
                    
                    hashCode = hashCode * 59 + Availability.GetHashCode();
                    if (ShelfLife != null)
                    hashCode = hashCode * 59 + ShelfLife.GetHashCode();
                    if (LifeTime != null)
                    hashCode = hashCode * 59 + LifeTime.GetHashCode();
                    if (GuaranteePeriod != null)
                    hashCode = hashCode * 59 + GuaranteePeriod.GetHashCode();
                    if (Certificate != null)
                    hashCode = hashCode * 59 + Certificate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MappingsOfferDTO left, MappingsOfferDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MappingsOfferDTO left, MappingsOfferDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
