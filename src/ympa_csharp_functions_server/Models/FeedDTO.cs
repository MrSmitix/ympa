/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о прайс-листе.
    /// </summary>
    [DataContract]
    public partial class FeedDTO : IEquatable<FeedDTO>
    {
        /// <summary>
        /// Идентификатор прайс-листа.
        /// </summary>
        /// <value>Идентификатор прайс-листа.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
        /// </summary>
        /// <value>Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. </value>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }

        /// <summary>
        /// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
        /// </summary>
        /// <value>Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
        /// </summary>
        /// <value>Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. </value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
        /// </summary>
        /// <value>Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. </value>
        [DataMember(Name="uploadDate", EmitDefaultValue=false)]
        public DateTime UploadDate { get; set; }

        /// <summary>
        /// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
        /// </summary>
        /// <value>URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. </value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public FeedContentDTO Content { get; set; }

        /// <summary>
        /// Gets or Sets Download
        /// </summary>
        [DataMember(Name="download", EmitDefaultValue=false)]
        public FeedDownloadDTO Download { get; set; }

        /// <summary>
        /// Gets or Sets Placement
        /// </summary>
        [DataMember(Name="placement", EmitDefaultValue=false)]
        public FeedPlacementDTO Placement { get; set; }

        /// <summary>
        /// Gets or Sets Publication
        /// </summary>
        [DataMember(Name="publication", EmitDefaultValue=false)]
        public FeedPublicationDTO Publication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeedDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  Publication: ").Append(Publication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeedDTO)obj);
        }

        /// <summary>
        /// Returns true if FeedDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FeedDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeedDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Login == other.Login ||
                    Login != null &&
                    Login.Equals(other.Login)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    UploadDate == other.UploadDate ||
                    UploadDate != null &&
                    UploadDate.Equals(other.UploadDate)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) && 
                (
                    Download == other.Download ||
                    Download != null &&
                    Download.Equals(other.Download)
                ) && 
                (
                    Placement == other.Placement ||
                    Placement != null &&
                    Placement.Equals(other.Placement)
                ) && 
                (
                    Publication == other.Publication ||
                    Publication != null &&
                    Publication.Equals(other.Publication)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Login != null)
                    hashCode = hashCode * 59 + Login.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (UploadDate != null)
                    hashCode = hashCode * 59 + UploadDate.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (Download != null)
                    hashCode = hashCode * 59 + Download.GetHashCode();
                    if (Placement != null)
                    hashCode = hashCode * 59 + Placement.GetHashCode();
                    if (Publication != null)
                    hashCode = hashCode * 59 + Publication.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeedDTO left, FeedDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeedDTO left, FeedDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
