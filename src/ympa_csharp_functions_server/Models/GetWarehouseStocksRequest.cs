/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Фильтры для запроса остатков. 
    /// </summary>
    [DataContract]
    public partial class GetWarehouseStocksRequest : IEquatable<GetWarehouseStocksRequest>
    {
        /// <summary>
        /// **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;. 
        /// </summary>
        /// <value>**Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;. </value>
        [DataMember(Name="withTurnover", EmitDefaultValue=false)]
        public bool WithTurnover { get; set; } = false;

        /// <summary>
        /// Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве. 
        /// </summary>
        /// <value>Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве. </value>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool Archived { get; set; }

        /// <summary>
        /// Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}    
        /// </summary>
        /// <value>Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}    </value>
        [DataMember(Name="offerIds", EmitDefaultValue=true)]
        public List<string> OfferIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetWarehouseStocksRequest {\n");
            sb.Append("  WithTurnover: ").Append(WithTurnover).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  OfferIds: ").Append(OfferIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetWarehouseStocksRequest)obj);
        }

        /// <summary>
        /// Returns true if GetWarehouseStocksRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GetWarehouseStocksRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetWarehouseStocksRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WithTurnover == other.WithTurnover ||
                    
                    WithTurnover.Equals(other.WithTurnover)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    OfferIds == other.OfferIds ||
                    OfferIds != null &&
                    other.OfferIds != null &&
                    OfferIds.SequenceEqual(other.OfferIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + WithTurnover.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (OfferIds != null)
                    hashCode = hashCode * 59 + OfferIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetWarehouseStocksRequest left, GetWarehouseStocksRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetWarehouseStocksRequest left, GetWarehouseStocksRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
