/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Статус генерации и ссылка на готовый отчет.
    /// </summary>
    [DataContract]
    public partial class ReportInfoDTO : IEquatable<ReportInfoDTO>
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ReportStatusType Status { get; set; }

        /// <summary>
        /// Gets or Sets SubStatus
        /// </summary>
        [DataMember(Name="subStatus", EmitDefaultValue=false)]
        public ReportSubStatusType SubStatus { get; set; }

        /// <summary>
        /// Дата и время запроса на генерацию.
        /// </summary>
        /// <value>Дата и время запроса на генерацию.</value>
        [Required]
        [DataMember(Name="generationRequestedAt", EmitDefaultValue=false)]
        public DateTime GenerationRequestedAt { get; set; }

        /// <summary>
        /// Дата и время завершения генерации.
        /// </summary>
        /// <value>Дата и время завершения генерации.</value>
        [DataMember(Name="generationFinishedAt", EmitDefaultValue=false)]
        public DateTime GenerationFinishedAt { get; set; }

        /// <summary>
        /// Ссылка на готовый отчет.
        /// </summary>
        /// <value>Ссылка на готовый отчет.</value>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Ожидаемая продолжительность генерации в миллисекундах.
        /// </summary>
        /// <value>Ожидаемая продолжительность генерации в миллисекундах.</value>
        [DataMember(Name="estimatedGenerationTime", EmitDefaultValue=false)]
        public long EstimatedGenerationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportInfoDTO {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubStatus: ").Append(SubStatus).Append("\n");
            sb.Append("  GenerationRequestedAt: ").Append(GenerationRequestedAt).Append("\n");
            sb.Append("  GenerationFinishedAt: ").Append(GenerationFinishedAt).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  EstimatedGenerationTime: ").Append(EstimatedGenerationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReportInfoDTO)obj);
        }

        /// <summary>
        /// Returns true if ReportInfoDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportInfoDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    SubStatus == other.SubStatus ||
                    
                    SubStatus.Equals(other.SubStatus)
                ) && 
                (
                    GenerationRequestedAt == other.GenerationRequestedAt ||
                    GenerationRequestedAt != null &&
                    GenerationRequestedAt.Equals(other.GenerationRequestedAt)
                ) && 
                (
                    GenerationFinishedAt == other.GenerationFinishedAt ||
                    GenerationFinishedAt != null &&
                    GenerationFinishedAt.Equals(other.GenerationFinishedAt)
                ) && 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    EstimatedGenerationTime == other.EstimatedGenerationTime ||
                    
                    EstimatedGenerationTime.Equals(other.EstimatedGenerationTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubStatus.GetHashCode();
                    if (GenerationRequestedAt != null)
                    hashCode = hashCode * 59 + GenerationRequestedAt.GetHashCode();
                    if (GenerationFinishedAt != null)
                    hashCode = hashCode * 59 + GenerationFinishedAt.GetHashCode();
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    
                    hashCode = hashCode * 59 + EstimatedGenerationTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReportInfoDTO left, ReportInfoDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReportInfoDTO left, ReportInfoDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
