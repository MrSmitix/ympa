/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Отзыв о товаре.
    /// </summary>
    [DataContract]
    public partial class GoodsFeedbackDTO : IEquatable<GoodsFeedbackDTO>
    {
        /// <summary>
        /// Идентификатор отзыва. 
        /// </summary>
        /// <value>Идентификатор отзыва. </value>
        [Required]
        [DataMember(Name="feedbackId", EmitDefaultValue=false)]
        public long FeedbackId { get; set; }

        /// <summary>
        /// Дата и время создания отзыва.
        /// </summary>
        /// <value>Дата и время создания отзыва.</value>
        [Required]
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Нужен ли ответ на отзыв.
        /// </summary>
        /// <value>Нужен ли ответ на отзыв.</value>
        [Required]
        [DataMember(Name="needReaction", EmitDefaultValue=false)]
        public bool NeedReaction { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [Required]
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public GoodsFeedbackIdentifiersDTO Identifiers { get; set; }

        /// <summary>
        /// Имя автора отзыва.
        /// </summary>
        /// <value>Имя автора отзыва.</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public GoodsFeedbackDescriptionDTO Description { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public GoodsFeedbackMediaDTO Media { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [Required]
        [DataMember(Name="statistics", EmitDefaultValue=false)]
        public GoodsFeedbackStatisticsDTO Statistics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoodsFeedbackDTO {\n");
            sb.Append("  FeedbackId: ").Append(FeedbackId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  NeedReaction: ").Append(NeedReaction).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GoodsFeedbackDTO)obj);
        }

        /// <summary>
        /// Returns true if GoodsFeedbackDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GoodsFeedbackDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoodsFeedbackDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeedbackId == other.FeedbackId ||
                    
                    FeedbackId.Equals(other.FeedbackId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    NeedReaction == other.NeedReaction ||
                    
                    NeedReaction.Equals(other.NeedReaction)
                ) && 
                (
                    Identifiers == other.Identifiers ||
                    Identifiers != null &&
                    Identifiers.Equals(other.Identifiers)
                ) && 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.Equals(other.Author)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Media == other.Media ||
                    Media != null &&
                    Media.Equals(other.Media)
                ) && 
                (
                    Statistics == other.Statistics ||
                    Statistics != null &&
                    Statistics.Equals(other.Statistics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + FeedbackId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + NeedReaction.GetHashCode();
                    if (Identifiers != null)
                    hashCode = hashCode * 59 + Identifiers.GetHashCode();
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                    if (Statistics != null)
                    hashCode = hashCode * 59 + Statistics.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GoodsFeedbackDTO left, GoodsFeedbackDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GoodsFeedbackDTO left, GoodsFeedbackDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
