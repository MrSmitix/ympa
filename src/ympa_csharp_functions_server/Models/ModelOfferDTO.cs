/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о предложении.
    /// </summary>
    [DataContract]
    public partial class ModelOfferDTO : IEquatable<ModelOfferDTO>
    {
        /// <summary>
        /// Скидка на предложение в процентах.
        /// </summary>
        /// <value>Скидка на предложение в процентах.</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public int Discount { get; set; }

        /// <summary>
        /// Наименование предложения.
        /// </summary>
        /// <value>Наименование предложения.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Позиция предложения в выдаче Маркета на карточке модели.
        /// </summary>
        /// <value>Позиция предложения в выдаче Маркета на карточке модели.</value>
        [DataMember(Name="pos", EmitDefaultValue=false)]
        public int Pos { get; set; }

        /// <summary>
        /// Цена предложения без скидки магазина.
        /// </summary>
        /// <value>Цена предложения без скидки магазина.</value>
        [DataMember(Name="preDiscountPrice", EmitDefaultValue=false)]
        public decimal PreDiscountPrice { get; set; }

        /// <summary>
        /// Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
        /// </summary>
        /// <value>Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal Price { get; set; }

        /// <summary>
        /// Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
        /// </summary>
        /// <value>Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. </value>
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public long RegionId { get; set; }

        /// <summary>
        /// Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
        /// </summary>
        /// <value>Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. </value>
        [DataMember(Name="shippingCost", EmitDefaultValue=false)]
        public decimal ShippingCost { get; set; }

        /// <summary>
        /// Название магазина (в том виде, в котором отображается на Маркете).
        /// </summary>
        /// <value>Название магазина (в том виде, в котором отображается на Маркете).</value>
        [DataMember(Name="shopName", EmitDefaultValue=false)]
        public string ShopName { get; set; }

        /// <summary>
        /// Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
        /// </summary>
        /// <value>Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. </value>
        [DataMember(Name="shopRating", EmitDefaultValue=false)]
        public int ShopRating { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} </value>
        [DataMember(Name="inStock", EmitDefaultValue=false)]
        public int InStock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOfferDTO {\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pos: ").Append(Pos).Append("\n");
            sb.Append("  PreDiscountPrice: ").Append(PreDiscountPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  ShopName: ").Append(ShopName).Append("\n");
            sb.Append("  ShopRating: ").Append(ShopRating).Append("\n");
            sb.Append("  InStock: ").Append(InStock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelOfferDTO)obj);
        }

        /// <summary>
        /// Returns true if ModelOfferDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelOfferDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOfferDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Discount == other.Discount ||
                    
                    Discount.Equals(other.Discount)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Pos == other.Pos ||
                    
                    Pos.Equals(other.Pos)
                ) && 
                (
                    PreDiscountPrice == other.PreDiscountPrice ||
                    
                    PreDiscountPrice.Equals(other.PreDiscountPrice)
                ) && 
                (
                    Price == other.Price ||
                    
                    Price.Equals(other.Price)
                ) && 
                (
                    RegionId == other.RegionId ||
                    
                    RegionId.Equals(other.RegionId)
                ) && 
                (
                    ShippingCost == other.ShippingCost ||
                    
                    ShippingCost.Equals(other.ShippingCost)
                ) && 
                (
                    ShopName == other.ShopName ||
                    ShopName != null &&
                    ShopName.Equals(other.ShopName)
                ) && 
                (
                    ShopRating == other.ShopRating ||
                    
                    ShopRating.Equals(other.ShopRating)
                ) && 
                (
                    InStock == other.InStock ||
                    
                    InStock.Equals(other.InStock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Discount.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pos.GetHashCode();
                    
                    hashCode = hashCode * 59 + PreDiscountPrice.GetHashCode();
                    
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    
                    hashCode = hashCode * 59 + RegionId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShippingCost.GetHashCode();
                    if (ShopName != null)
                    hashCode = hashCode * 59 + ShopName.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShopRating.GetHashCode();
                    
                    hashCode = hashCode * 59 + InStock.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelOfferDTO left, ModelOfferDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelOfferDTO left, ModelOfferDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
