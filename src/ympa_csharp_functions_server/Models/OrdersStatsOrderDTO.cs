/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о заказе.
    /// </summary>
    [DataContract]
    public partial class OrdersStatsOrderDTO : IEquatable<OrdersStatsOrderDTO>
    {
        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
        /// </summary>
        /// <value>Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. </value>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateOnly CreationDate { get; set; }

        /// <summary>
        /// Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
        /// </summary>
        /// <value>Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). </value>
        [DataMember(Name="statusUpdateDate", EmitDefaultValue=false)]
        public DateTime StatusUpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public OrderStatsStatusType Status { get; set; }

        /// <summary>
        /// Идентификатор заказа в информационной системе магазина.
        /// </summary>
        /// <value>Идентификатор заказа в информационной системе магазина.</value>
        [DataMember(Name="partnerOrderId", EmitDefaultValue=false)]
        public string PartnerOrderId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public OrdersStatsOrderPaymentType PaymentType { get; set; }

        /// <summary>
        /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
        /// </summary>
        /// <value>Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. </value>
        [DataMember(Name="fake", EmitDefaultValue=false)]
        public bool Fake { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryRegion
        /// </summary>
        [DataMember(Name="deliveryRegion", EmitDefaultValue=false)]
        public OrdersStatsDeliveryRegionDTO DeliveryRegion { get; set; }

        /// <summary>
        /// Список товаров в заказе после возможных изменений.
        /// </summary>
        /// <value>Список товаров в заказе после возможных изменений.</value>
        [Required]
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<OrdersStatsItemDTO> Items { get; set; }

        /// <summary>
        /// Список товаров в заказе до изменений.
        /// </summary>
        /// <value>Список товаров в заказе до изменений.</value>
        [DataMember(Name="initialItems", EmitDefaultValue=true)]
        public List<OrdersStatsItemDTO> InitialItems { get; set; }

        /// <summary>
        /// Информация о денежных переводах по заказу.
        /// </summary>
        /// <value>Информация о денежных переводах по заказу.</value>
        [Required]
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public List<OrdersStatsPaymentDTO> Payments { get; set; }

        /// <summary>
        /// Информация о комиссиях за заказ.
        /// </summary>
        /// <value>Информация о комиссиях за заказ.</value>
        [Required]
        [DataMember(Name="commissions", EmitDefaultValue=false)]
        public List<OrdersStatsCommissionDTO> Commissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersStatsOrderDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  StatusUpdateDate: ").Append(StatusUpdateDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PartnerOrderId: ").Append(PartnerOrderId).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  Fake: ").Append(Fake).Append("\n");
            sb.Append("  DeliveryRegion: ").Append(DeliveryRegion).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  InitialItems: ").Append(InitialItems).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Commissions: ").Append(Commissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrdersStatsOrderDTO)obj);
        }

        /// <summary>
        /// Returns true if OrdersStatsOrderDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrdersStatsOrderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersStatsOrderDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != null &&
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    StatusUpdateDate == other.StatusUpdateDate ||
                    StatusUpdateDate != null &&
                    StatusUpdateDate.Equals(other.StatusUpdateDate)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    PartnerOrderId == other.PartnerOrderId ||
                    PartnerOrderId != null &&
                    PartnerOrderId.Equals(other.PartnerOrderId)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    Fake == other.Fake ||
                    
                    Fake.Equals(other.Fake)
                ) && 
                (
                    DeliveryRegion == other.DeliveryRegion ||
                    DeliveryRegion != null &&
                    DeliveryRegion.Equals(other.DeliveryRegion)
                ) && 
                (
                    Items == other.Items ||
                    Items != null &&
                    other.Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    InitialItems == other.InitialItems ||
                    InitialItems != null &&
                    other.InitialItems != null &&
                    InitialItems.SequenceEqual(other.InitialItems)
                ) && 
                (
                    Payments == other.Payments ||
                    Payments != null &&
                    other.Payments != null &&
                    Payments.SequenceEqual(other.Payments)
                ) && 
                (
                    Commissions == other.Commissions ||
                    Commissions != null &&
                    other.Commissions != null &&
                    Commissions.SequenceEqual(other.Commissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (CreationDate != null)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (StatusUpdateDate != null)
                    hashCode = hashCode * 59 + StatusUpdateDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (PartnerOrderId != null)
                    hashCode = hashCode * 59 + PartnerOrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Fake.GetHashCode();
                    if (DeliveryRegion != null)
                    hashCode = hashCode * 59 + DeliveryRegion.GetHashCode();
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    if (InitialItems != null)
                    hashCode = hashCode * 59 + InitialItems.GetHashCode();
                    if (Payments != null)
                    hashCode = hashCode * 59 + Payments.GetHashCode();
                    if (Commissions != null)
                    hashCode = hashCode * 59 + Commissions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrdersStatsOrderDTO left, OrdersStatsOrderDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrdersStatsOrderDTO left, OrdersStatsOrderDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
