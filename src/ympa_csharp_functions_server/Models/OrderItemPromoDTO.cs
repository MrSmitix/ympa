/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    /// </summary>
    [DataContract]
    public partial class OrderItemPromoDTO : IEquatable<OrderItemPromoDTO>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public OrderPromoType Type { get; set; }

        /// <summary>
        /// Размер пользовательской скидки в валюте покупателя. 
        /// </summary>
        /// <value>Размер пользовательской скидки в валюте покупателя. </value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public decimal Discount { get; set; }

        /// <summary>
        /// Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
        /// </summary>
        /// <value>Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. </value>
        [DataMember(Name="subsidy", EmitDefaultValue=false)]
        public decimal Subsidy { get; set; }

        /// <summary>
        /// Идентификатор акции поставщика. 
        /// </summary>
        /// <value>Идентификатор акции поставщика. </value>
        [DataMember(Name="shopPromoId", EmitDefaultValue=false)]
        public string ShopPromoId { get; set; }

        /// <summary>
        /// Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;. 
        /// </summary>
        /// <value>Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;. </value>
        [DataMember(Name="marketPromoId", EmitDefaultValue=false)]
        public string MarketPromoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItemPromoDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Subsidy: ").Append(Subsidy).Append("\n");
            sb.Append("  ShopPromoId: ").Append(ShopPromoId).Append("\n");
            sb.Append("  MarketPromoId: ").Append(MarketPromoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderItemPromoDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderItemPromoDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItemPromoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItemPromoDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Discount == other.Discount ||
                    
                    Discount.Equals(other.Discount)
                ) && 
                (
                    Subsidy == other.Subsidy ||
                    
                    Subsidy.Equals(other.Subsidy)
                ) && 
                (
                    ShopPromoId == other.ShopPromoId ||
                    ShopPromoId != null &&
                    ShopPromoId.Equals(other.ShopPromoId)
                ) && 
                (
                    MarketPromoId == other.MarketPromoId ||
                    MarketPromoId != null &&
                    MarketPromoId.Equals(other.MarketPromoId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Discount.GetHashCode();
                    
                    hashCode = hashCode * 59 + Subsidy.GetHashCode();
                    if (ShopPromoId != null)
                    hashCode = hashCode * 59 + ShopPromoId.GetHashCode();
                    if (MarketPromoId != null)
                    hashCode = hashCode * 59 + MarketPromoId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderItemPromoDTO left, OrderItemPromoDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderItemPromoDTO left, OrderItemPromoDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
