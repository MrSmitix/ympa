/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Параметры товара.
    /// </summary>
    [DataContract]
    public partial class UpdateOfferDTO : IEquatable<UpdateOfferDTO>
    {
        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [Required]
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
        /// </summary>
        /// <value>Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) </value>
        [MaxLength(256)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
        /// </summary>
        /// <value>Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). </value>
        [DataMember(Name="marketCategoryId", EmitDefaultValue=false)]
        public long MarketCategoryId { get; set; }

        /// <summary>
        /// Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
        /// </summary>
        /// <value>Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. </value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
        /// </summary>
        /// <value>Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) </value>
        [DataMember(Name="pictures", EmitDefaultValue=true)]
        public List<string> Pictures { get; set; }

        /// <summary>
        /// Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
        /// </summary>
        /// <value>Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) </value>
        [DataMember(Name="videos", EmitDefaultValue=true)]
        public List<string> Videos { get; set; }

        /// <summary>
        /// Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся. 
        /// </summary>
        /// <value>Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся. </value>
        [DataMember(Name="manuals", EmitDefaultValue=true)]
        public List<OfferManualDTO> Manuals { get; set; }

        /// <summary>
        /// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
        /// </summary>
        /// <value>Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.</value>
        [DataMember(Name="vendor", EmitDefaultValue=false)]
        public string Vendor { get; set; }

        /// <summary>
        /// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
        /// </summary>
        /// <value>Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  </value>
        [DataMember(Name="barcodes", EmitDefaultValue=true)]
        public List<string> Barcodes { get; set; }

        /// <summary>
        /// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
        /// </summary>
        /// <value>Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) </value>
        [MaxLength(6000)]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
        /// </summary>
        /// <value>Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). </value>
        [DataMember(Name="manufacturerCountries", EmitDefaultValue=true)]
        public List<string> ManufacturerCountries { get; set; }

        /// <summary>
        /// Gets or Sets WeightDimensions
        /// </summary>
        [DataMember(Name="weightDimensions", EmitDefaultValue=false)]
        public OfferWeightDimensionsDTO WeightDimensions { get; set; }

        /// <summary>
        /// Артикул товара от производителя.
        /// </summary>
        /// <value>Артикул товара от производителя.</value>
        [DataMember(Name="vendorCode", EmitDefaultValue=false)]
        public string VendorCode { get; set; }

        /// <summary>
        /// Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
        /// </summary>
        /// <value>Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. </value>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets ShelfLife
        /// </summary>
        [DataMember(Name="shelfLife", EmitDefaultValue=false)]
        public TimePeriodDTO ShelfLife { get; set; }

        /// <summary>
        /// Gets or Sets LifeTime
        /// </summary>
        [DataMember(Name="lifeTime", EmitDefaultValue=false)]
        public TimePeriodDTO LifeTime { get; set; }

        /// <summary>
        /// Gets or Sets GuaranteePeriod
        /// </summary>
        [DataMember(Name="guaranteePeriod", EmitDefaultValue=false)]
        public TimePeriodDTO GuaranteePeriod { get; set; }

        /// <summary>
        /// Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
        /// </summary>
        /// <value>Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. </value>
        [DataMember(Name="customsCommodityCode", EmitDefaultValue=false)]
        public string CustomsCommodityCode { get; set; }

        /// <summary>
        /// Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
        /// </summary>
        /// <value>Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). </value>
        [DataMember(Name="certificates", EmitDefaultValue=true)]
        public List<string> Certificates { get; set; }

        /// <summary>
        /// Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
        /// </summary>
        /// <value>Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. </value>
        [DataMember(Name="boxCount", EmitDefaultValue=false)]
        public int BoxCount { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public OfferConditionDTO Condition { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public OfferType Type { get; set; }

        /// <summary>
        /// Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
        /// </summary>
        /// <value>Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) </value>
        [DataMember(Name="downloadable", EmitDefaultValue=false)]
        public bool Downloadable { get; set; }

        /// <summary>
        /// Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
        /// </summary>
        /// <value>Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. </value>
        [DataMember(Name="adult", EmitDefaultValue=false)]
        public bool Adult { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public AgeDTO Age { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. </value>
        [DataMember(Name="params", EmitDefaultValue=true)]
        public List<OfferParamDTO> Params { get; set; }

        /// <summary>
        /// Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. 
        /// </summary>
        /// <value>Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. </value>
        [DataMember(Name="parameterValues", EmitDefaultValue=true)]
        public List<ParameterValueDTO> ParameterValues { get; set; }

        /// <summary>
        /// Gets or Sets BasicPrice
        /// </summary>
        [DataMember(Name="basicPrice", EmitDefaultValue=false)]
        public UpdatePriceWithDiscountDTO BasicPrice { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePrice
        /// </summary>
        [DataMember(Name="purchasePrice", EmitDefaultValue=false)]
        public BasePriceDTO PurchasePrice { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalExpenses
        /// </summary>
        [DataMember(Name="additionalExpenses", EmitDefaultValue=false)]
        public BasePriceDTO AdditionalExpenses { get; set; }

        /// <summary>
        /// Gets or Sets CofinancePrice
        /// </summary>
        [DataMember(Name="cofinancePrice", EmitDefaultValue=false)]
        public BasePriceDTO CofinancePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateOfferDTO {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MarketCategoryId: ").Append(MarketCategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Pictures: ").Append(Pictures).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("  Manuals: ").Append(Manuals).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Barcodes: ").Append(Barcodes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ManufacturerCountries: ").Append(ManufacturerCountries).Append("\n");
            sb.Append("  WeightDimensions: ").Append(WeightDimensions).Append("\n");
            sb.Append("  VendorCode: ").Append(VendorCode).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ShelfLife: ").Append(ShelfLife).Append("\n");
            sb.Append("  LifeTime: ").Append(LifeTime).Append("\n");
            sb.Append("  GuaranteePeriod: ").Append(GuaranteePeriod).Append("\n");
            sb.Append("  CustomsCommodityCode: ").Append(CustomsCommodityCode).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  BoxCount: ").Append(BoxCount).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  Adult: ").Append(Adult).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  BasicPrice: ").Append(BasicPrice).Append("\n");
            sb.Append("  PurchasePrice: ").Append(PurchasePrice).Append("\n");
            sb.Append("  AdditionalExpenses: ").Append(AdditionalExpenses).Append("\n");
            sb.Append("  CofinancePrice: ").Append(CofinancePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateOfferDTO)obj);
        }

        /// <summary>
        /// Returns true if UpdateOfferDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateOfferDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOfferDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OfferId == other.OfferId ||
                    OfferId != null &&
                    OfferId.Equals(other.OfferId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    MarketCategoryId == other.MarketCategoryId ||
                    
                    MarketCategoryId.Equals(other.MarketCategoryId)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Pictures == other.Pictures ||
                    Pictures != null &&
                    other.Pictures != null &&
                    Pictures.SequenceEqual(other.Pictures)
                ) && 
                (
                    Videos == other.Videos ||
                    Videos != null &&
                    other.Videos != null &&
                    Videos.SequenceEqual(other.Videos)
                ) && 
                (
                    Manuals == other.Manuals ||
                    Manuals != null &&
                    other.Manuals != null &&
                    Manuals.SequenceEqual(other.Manuals)
                ) && 
                (
                    Vendor == other.Vendor ||
                    Vendor != null &&
                    Vendor.Equals(other.Vendor)
                ) && 
                (
                    Barcodes == other.Barcodes ||
                    Barcodes != null &&
                    other.Barcodes != null &&
                    Barcodes.SequenceEqual(other.Barcodes)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ManufacturerCountries == other.ManufacturerCountries ||
                    ManufacturerCountries != null &&
                    other.ManufacturerCountries != null &&
                    ManufacturerCountries.SequenceEqual(other.ManufacturerCountries)
                ) && 
                (
                    WeightDimensions == other.WeightDimensions ||
                    WeightDimensions != null &&
                    WeightDimensions.Equals(other.WeightDimensions)
                ) && 
                (
                    VendorCode == other.VendorCode ||
                    VendorCode != null &&
                    VendorCode.Equals(other.VendorCode)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    ShelfLife == other.ShelfLife ||
                    ShelfLife != null &&
                    ShelfLife.Equals(other.ShelfLife)
                ) && 
                (
                    LifeTime == other.LifeTime ||
                    LifeTime != null &&
                    LifeTime.Equals(other.LifeTime)
                ) && 
                (
                    GuaranteePeriod == other.GuaranteePeriod ||
                    GuaranteePeriod != null &&
                    GuaranteePeriod.Equals(other.GuaranteePeriod)
                ) && 
                (
                    CustomsCommodityCode == other.CustomsCommodityCode ||
                    CustomsCommodityCode != null &&
                    CustomsCommodityCode.Equals(other.CustomsCommodityCode)
                ) && 
                (
                    Certificates == other.Certificates ||
                    Certificates != null &&
                    other.Certificates != null &&
                    Certificates.SequenceEqual(other.Certificates)
                ) && 
                (
                    BoxCount == other.BoxCount ||
                    
                    BoxCount.Equals(other.BoxCount)
                ) && 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.Equals(other.Condition)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Downloadable == other.Downloadable ||
                    
                    Downloadable.Equals(other.Downloadable)
                ) && 
                (
                    Adult == other.Adult ||
                    
                    Adult.Equals(other.Adult)
                ) && 
                (
                    Age == other.Age ||
                    Age != null &&
                    Age.Equals(other.Age)
                ) && 
                (
                    Params == other.Params ||
                    Params != null &&
                    other.Params != null &&
                    Params.SequenceEqual(other.Params)
                ) && 
                (
                    ParameterValues == other.ParameterValues ||
                    ParameterValues != null &&
                    other.ParameterValues != null &&
                    ParameterValues.SequenceEqual(other.ParameterValues)
                ) && 
                (
                    BasicPrice == other.BasicPrice ||
                    BasicPrice != null &&
                    BasicPrice.Equals(other.BasicPrice)
                ) && 
                (
                    PurchasePrice == other.PurchasePrice ||
                    PurchasePrice != null &&
                    PurchasePrice.Equals(other.PurchasePrice)
                ) && 
                (
                    AdditionalExpenses == other.AdditionalExpenses ||
                    AdditionalExpenses != null &&
                    AdditionalExpenses.Equals(other.AdditionalExpenses)
                ) && 
                (
                    CofinancePrice == other.CofinancePrice ||
                    CofinancePrice != null &&
                    CofinancePrice.Equals(other.CofinancePrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OfferId != null)
                    hashCode = hashCode * 59 + OfferId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketCategoryId.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Pictures != null)
                    hashCode = hashCode * 59 + Pictures.GetHashCode();
                    if (Videos != null)
                    hashCode = hashCode * 59 + Videos.GetHashCode();
                    if (Manuals != null)
                    hashCode = hashCode * 59 + Manuals.GetHashCode();
                    if (Vendor != null)
                    hashCode = hashCode * 59 + Vendor.GetHashCode();
                    if (Barcodes != null)
                    hashCode = hashCode * 59 + Barcodes.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ManufacturerCountries != null)
                    hashCode = hashCode * 59 + ManufacturerCountries.GetHashCode();
                    if (WeightDimensions != null)
                    hashCode = hashCode * 59 + WeightDimensions.GetHashCode();
                    if (VendorCode != null)
                    hashCode = hashCode * 59 + VendorCode.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (ShelfLife != null)
                    hashCode = hashCode * 59 + ShelfLife.GetHashCode();
                    if (LifeTime != null)
                    hashCode = hashCode * 59 + LifeTime.GetHashCode();
                    if (GuaranteePeriod != null)
                    hashCode = hashCode * 59 + GuaranteePeriod.GetHashCode();
                    if (CustomsCommodityCode != null)
                    hashCode = hashCode * 59 + CustomsCommodityCode.GetHashCode();
                    if (Certificates != null)
                    hashCode = hashCode * 59 + Certificates.GetHashCode();
                    
                    hashCode = hashCode * 59 + BoxCount.GetHashCode();
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Downloadable.GetHashCode();
                    
                    hashCode = hashCode * 59 + Adult.GetHashCode();
                    if (Age != null)
                    hashCode = hashCode * 59 + Age.GetHashCode();
                    if (Params != null)
                    hashCode = hashCode * 59 + Params.GetHashCode();
                    if (ParameterValues != null)
                    hashCode = hashCode * 59 + ParameterValues.GetHashCode();
                    if (BasicPrice != null)
                    hashCode = hashCode * 59 + BasicPrice.GetHashCode();
                    if (PurchasePrice != null)
                    hashCode = hashCode * 59 + PurchasePrice.GetHashCode();
                    if (AdditionalExpenses != null)
                    hashCode = hashCode * 59 + AdditionalExpenses.GetHashCode();
                    if (CofinancePrice != null)
                    hashCode = hashCode * 59 + CofinancePrice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateOfferDTO left, UpdateOfferDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateOfferDTO left, UpdateOfferDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
