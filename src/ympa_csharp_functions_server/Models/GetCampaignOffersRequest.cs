/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке. 
    /// </summary>
    [DataContract]
    public partial class GetCampaignOffersRequest : IEquatable<GetCampaignOffersRequest>
    {
        /// <summary>
        /// Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}    
        /// </summary>
        /// <value>Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}    </value>
        [DataMember(Name="offerIds", EmitDefaultValue=true)]
        public List<string> OfferIds { get; set; }

        /// <summary>
        /// Фильтр по статусам товаров. 
        /// </summary>
        /// <value>Фильтр по статусам товаров. </value>
        [DataMember(Name="statuses", EmitDefaultValue=true)]
        public List<OfferCampaignStatusType> Statuses { get; set; }

        /// <summary>
        /// Фильтр по категориям на Маркете.
        /// </summary>
        /// <value>Фильтр по категориям на Маркете.</value>
        [DataMember(Name="categoryIds", EmitDefaultValue=true)]
        public List<int> CategoryIds { get; set; }

        /// <summary>
        /// Фильтр по брендам.
        /// </summary>
        /// <value>Фильтр по брендам.</value>
        [DataMember(Name="vendorNames", EmitDefaultValue=true)]
        public List<string> VendorNames { get; set; }

        /// <summary>
        /// Фильтр по тегам.
        /// </summary>
        /// <value>Фильтр по тегам.</value>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCampaignOffersRequest {\n");
            sb.Append("  OfferIds: ").Append(OfferIds).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  CategoryIds: ").Append(CategoryIds).Append("\n");
            sb.Append("  VendorNames: ").Append(VendorNames).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetCampaignOffersRequest)obj);
        }

        /// <summary>
        /// Returns true if GetCampaignOffersRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GetCampaignOffersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCampaignOffersRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OfferIds == other.OfferIds ||
                    OfferIds != null &&
                    other.OfferIds != null &&
                    OfferIds.SequenceEqual(other.OfferIds)
                ) && 
                (
                    Statuses == other.Statuses ||
                    Statuses != null &&
                    other.Statuses != null &&
                    Statuses.SequenceEqual(other.Statuses)
                ) && 
                (
                    CategoryIds == other.CategoryIds ||
                    CategoryIds != null &&
                    other.CategoryIds != null &&
                    CategoryIds.SequenceEqual(other.CategoryIds)
                ) && 
                (
                    VendorNames == other.VendorNames ||
                    VendorNames != null &&
                    other.VendorNames != null &&
                    VendorNames.SequenceEqual(other.VendorNames)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OfferIds != null)
                    hashCode = hashCode * 59 + OfferIds.GetHashCode();
                    if (Statuses != null)
                    hashCode = hashCode * 59 + Statuses.GetHashCode();
                    if (CategoryIds != null)
                    hashCode = hashCode * 59 + CategoryIds.GetHashCode();
                    if (VendorNames != null)
                    hashCode = hashCode * 59 + VendorNames.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetCampaignOffersRequest left, GetCampaignOffersRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetCampaignOffersRequest left, GetCampaignOffersRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
