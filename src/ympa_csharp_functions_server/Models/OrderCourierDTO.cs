/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о курьере.
    /// </summary>
    [DataContract]
    public partial class OrderCourierDTO : IEquatable<OrderCourierDTO>
    {
        /// <summary>
        /// Полное имя курьера.
        /// </summary>
        /// <value>Полное имя курьера.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Номер телефона курьера.
        /// </summary>
        /// <value>Номер телефона курьера.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Добавочный номер телефона.
        /// </summary>
        /// <value>Добавочный номер телефона.</value>
        [DataMember(Name="phoneExtension", EmitDefaultValue=false)]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Номер транспортного средства.
        /// </summary>
        /// <value>Номер транспортного средства.</value>
        [DataMember(Name="vehicleNumber", EmitDefaultValue=false)]
        public string VehicleNumber { get; set; }

        /// <summary>
        /// Описание машины. Например, модель и цвет.
        /// </summary>
        /// <value>Описание машины. Например, модель и цвет.</value>
        [DataMember(Name="vehicleDescription", EmitDefaultValue=false)]
        public string VehicleDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCourierDTO {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneExtension: ").Append(PhoneExtension).Append("\n");
            sb.Append("  VehicleNumber: ").Append(VehicleNumber).Append("\n");
            sb.Append("  VehicleDescription: ").Append(VehicleDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderCourierDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderCourierDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderCourierDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCourierDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    PhoneExtension == other.PhoneExtension ||
                    PhoneExtension != null &&
                    PhoneExtension.Equals(other.PhoneExtension)
                ) && 
                (
                    VehicleNumber == other.VehicleNumber ||
                    VehicleNumber != null &&
                    VehicleNumber.Equals(other.VehicleNumber)
                ) && 
                (
                    VehicleDescription == other.VehicleDescription ||
                    VehicleDescription != null &&
                    VehicleDescription.Equals(other.VehicleDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (PhoneExtension != null)
                    hashCode = hashCode * 59 + PhoneExtension.GetHashCode();
                    if (VehicleNumber != null)
                    hashCode = hashCode * 59 + VehicleNumber.GetHashCode();
                    if (VehicleDescription != null)
                    hashCode = hashCode * 59 + VehicleDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderCourierDTO left, OrderCourierDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderCourierDTO left, OrderCourierDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
