/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Решения по возвратам.
    /// </summary>
    [DataContract]
    public partial class ReturnDecisionDTO : IEquatable<ReturnDecisionDTO>
    {
        /// <summary>
        /// Идентификатор товара в возврате.
        /// </summary>
        /// <value>Идентификатор товара в возврате.</value>
        [DataMember(Name="returnItemId", EmitDefaultValue=false)]
        public long ReturnItemId { get; set; }

        /// <summary>
        /// Количество единиц товара.
        /// </summary>
        /// <value>Количество единиц товара.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Комментарий.
        /// </summary>
        /// <value>Комментарий.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets ReasonType
        /// </summary>
        [DataMember(Name="reasonType", EmitDefaultValue=false)]
        public ReturnDecisionReasonType ReasonType { get; set; }

        /// <summary>
        /// Gets or Sets SubreasonType
        /// </summary>
        [DataMember(Name="subreasonType", EmitDefaultValue=false)]
        public ReturnDecisionSubreasonType SubreasonType { get; set; }

        /// <summary>
        /// Gets or Sets DecisionType
        /// </summary>
        [DataMember(Name="decisionType", EmitDefaultValue=false)]
        public ReturnDecisionType DecisionType { get; set; }

        /// <summary>
        /// Сумма возврата.
        /// </summary>
        /// <value>Сумма возврата.</value>
        [DataMember(Name="refundAmount", EmitDefaultValue=false)]
        public long RefundAmount { get; set; }

        /// <summary>
        /// Компенсация за обратную доставку.
        /// </summary>
        /// <value>Компенсация за обратную доставку.</value>
        [DataMember(Name="partnerCompensation", EmitDefaultValue=false)]
        public long PartnerCompensation { get; set; }

        /// <summary>
        /// Список хеш-кодов фотографий товара от покупателя.
        /// </summary>
        /// <value>Список хеш-кодов фотографий товара от покупателя.</value>
        [DataMember(Name="images", EmitDefaultValue=true)]
        public List<string> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnDecisionDTO {\n");
            sb.Append("  ReturnItemId: ").Append(ReturnItemId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ReasonType: ").Append(ReasonType).Append("\n");
            sb.Append("  SubreasonType: ").Append(SubreasonType).Append("\n");
            sb.Append("  DecisionType: ").Append(DecisionType).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  PartnerCompensation: ").Append(PartnerCompensation).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnDecisionDTO)obj);
        }

        /// <summary>
        /// Returns true if ReturnDecisionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnDecisionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnDecisionDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReturnItemId == other.ReturnItemId ||
                    
                    ReturnItemId.Equals(other.ReturnItemId)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    ReasonType == other.ReasonType ||
                    
                    ReasonType.Equals(other.ReasonType)
                ) && 
                (
                    SubreasonType == other.SubreasonType ||
                    
                    SubreasonType.Equals(other.SubreasonType)
                ) && 
                (
                    DecisionType == other.DecisionType ||
                    
                    DecisionType.Equals(other.DecisionType)
                ) && 
                (
                    RefundAmount == other.RefundAmount ||
                    
                    RefundAmount.Equals(other.RefundAmount)
                ) && 
                (
                    PartnerCompensation == other.PartnerCompensation ||
                    
                    PartnerCompensation.Equals(other.PartnerCompensation)
                ) && 
                (
                    Images == other.Images ||
                    Images != null &&
                    other.Images != null &&
                    Images.SequenceEqual(other.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ReturnItemId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReasonType.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubreasonType.GetHashCode();
                    
                    hashCode = hashCode * 59 + DecisionType.GetHashCode();
                    
                    hashCode = hashCode * 59 + RefundAmount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PartnerCompensation.GetHashCode();
                    if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnDecisionDTO left, ReturnDecisionDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnDecisionDTO left, ReturnDecisionDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
