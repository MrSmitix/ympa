/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
    /// </summary>
    [DataContract]
    public partial class OrdersStatsItemDTO : IEquatable<OrdersStatsItemDTO>
    {
        /// <summary>
        /// Название товара.
        /// </summary>
        /// <value>Название товара.</value>
        [DataMember(Name="offerName", EmitDefaultValue=false)]
        public string OfferName { get; set; }

        /// <summary>
        /// SKU на Маркете.
        /// </summary>
        /// <value>SKU на Маркете.</value>
        [DataMember(Name="marketSku", EmitDefaultValue=false)]
        public long MarketSku { get; set; }

        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="shopSku", EmitDefaultValue=false)]
        public string ShopSku { get; set; }

        /// <summary>
        /// Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
        /// </summary>
        /// <value>Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. </value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Цена или скидки на товар.
        /// </summary>
        /// <value>Цена или скидки на товар.</value>
        [DataMember(Name="prices", EmitDefaultValue=true)]
        public List<OrdersStatsPriceDTO> Prices { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name="warehouse", EmitDefaultValue=false)]
        public OrdersStatsWarehouseDTO Warehouse { get; set; }

        /// <summary>
        /// Информация об удалении товара из заказа.
        /// </summary>
        /// <value>Информация об удалении товара из заказа.</value>
        [DataMember(Name="details", EmitDefaultValue=true)]
        public List<OrdersStatsDetailsDTO> Details { get; set; }

        /// <summary>
        /// Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
        /// </summary>
        /// <value>Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).</value>
        [DataMember(Name="cisList", EmitDefaultValue=true)]
        public List<string> CisList { get; set; }

        /// <summary>
        /// Первоначальное количество единиц товара.
        /// </summary>
        /// <value>Первоначальное количество единиц товара.</value>
        [DataMember(Name="initialCount", EmitDefaultValue=false)]
        public int InitialCount { get; set; }

        /// <summary>
        /// Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
        /// </summary>
        /// <value>Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. </value>
        [Range(0, 10000)]
        [DataMember(Name="bidFee", EmitDefaultValue=false)]
        public int BidFee { get; set; }

        /// <summary>
        /// Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
        /// </summary>
        /// <value>Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. </value>
        [DataMember(Name="cofinanceThreshold", EmitDefaultValue=false)]
        public decimal CofinanceThreshold { get; set; }

        /// <summary>
        /// Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
        /// </summary>
        /// <value>Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. </value>
        [DataMember(Name="cofinanceValue", EmitDefaultValue=false)]
        public decimal CofinanceValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrdersStatsItemDTO {\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  MarketSku: ").Append(MarketSku).Append("\n");
            sb.Append("  ShopSku: ").Append(ShopSku).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  CisList: ").Append(CisList).Append("\n");
            sb.Append("  InitialCount: ").Append(InitialCount).Append("\n");
            sb.Append("  BidFee: ").Append(BidFee).Append("\n");
            sb.Append("  CofinanceThreshold: ").Append(CofinanceThreshold).Append("\n");
            sb.Append("  CofinanceValue: ").Append(CofinanceValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrdersStatsItemDTO)obj);
        }

        /// <summary>
        /// Returns true if OrdersStatsItemDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrdersStatsItemDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrdersStatsItemDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OfferName == other.OfferName ||
                    OfferName != null &&
                    OfferName.Equals(other.OfferName)
                ) && 
                (
                    MarketSku == other.MarketSku ||
                    
                    MarketSku.Equals(other.MarketSku)
                ) && 
                (
                    ShopSku == other.ShopSku ||
                    ShopSku != null &&
                    ShopSku.Equals(other.ShopSku)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Prices == other.Prices ||
                    Prices != null &&
                    other.Prices != null &&
                    Prices.SequenceEqual(other.Prices)
                ) && 
                (
                    Warehouse == other.Warehouse ||
                    Warehouse != null &&
                    Warehouse.Equals(other.Warehouse)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    other.Details != null &&
                    Details.SequenceEqual(other.Details)
                ) && 
                (
                    CisList == other.CisList ||
                    CisList != null &&
                    other.CisList != null &&
                    CisList.SequenceEqual(other.CisList)
                ) && 
                (
                    InitialCount == other.InitialCount ||
                    
                    InitialCount.Equals(other.InitialCount)
                ) && 
                (
                    BidFee == other.BidFee ||
                    
                    BidFee.Equals(other.BidFee)
                ) && 
                (
                    CofinanceThreshold == other.CofinanceThreshold ||
                    
                    CofinanceThreshold.Equals(other.CofinanceThreshold)
                ) && 
                (
                    CofinanceValue == other.CofinanceValue ||
                    
                    CofinanceValue.Equals(other.CofinanceValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OfferName != null)
                    hashCode = hashCode * 59 + OfferName.GetHashCode();
                    
                    hashCode = hashCode * 59 + MarketSku.GetHashCode();
                    if (ShopSku != null)
                    hashCode = hashCode * 59 + ShopSku.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Prices != null)
                    hashCode = hashCode * 59 + Prices.GetHashCode();
                    if (Warehouse != null)
                    hashCode = hashCode * 59 + Warehouse.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (CisList != null)
                    hashCode = hashCode * 59 + CisList.GetHashCode();
                    
                    hashCode = hashCode * 59 + InitialCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + BidFee.GetHashCode();
                    
                    hashCode = hashCode * 59 + CofinanceThreshold.GetHashCode();
                    
                    hashCode = hashCode * 59 + CofinanceValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrdersStatsItemDTO left, OrdersStatsItemDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrdersStatsItemDTO left, OrdersStatsItemDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
