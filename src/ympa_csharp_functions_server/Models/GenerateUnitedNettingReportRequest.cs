/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
    /// </summary>
    [DataContract]
    public partial class GenerateUnitedNettingReportRequest : IEquatable<GenerateUnitedNettingReportRequest>
    {
        /// <summary>
        /// Идентификатор бизнеса.
        /// </summary>
        /// <value>Идентификатор бизнеса.</value>
        [Required]
        [DataMember(Name="businessId", EmitDefaultValue=false)]
        public long BusinessId { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. </value>
        [DataMember(Name="dateTimeFrom", EmitDefaultValue=false)]
        public DateTime DateTimeFrom { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. </value>
        [DataMember(Name="dateTimeTo", EmitDefaultValue=false)]
        public DateTime DateTimeTo { get; set; }

        /// <summary>
        /// Начало периода, включительно.
        /// </summary>
        /// <value>Начало периода, включительно.</value>
        [DataMember(Name="dateFrom", EmitDefaultValue=false)]
        public DateOnly DateFrom { get; set; }

        /// <summary>
        /// Конец периода, включительно. Максимальный период — 1 год.
        /// </summary>
        /// <value>Конец периода, включительно. Максимальный период — 1 год.</value>
        [DataMember(Name="dateTo", EmitDefaultValue=false)]
        public DateOnly DateTo { get; set; }

        /// <summary>
        /// Номер платежного поручения.
        /// </summary>
        /// <value>Номер платежного поручения.</value>
        [DataMember(Name="bankOrderId", EmitDefaultValue=false)]
        public long BankOrderId { get; set; }

        /// <summary>
        /// Дата платежного поручения.
        /// </summary>
        /// <value>Дата платежного поручения.</value>
        [DataMember(Name="bankOrderDateTime", EmitDefaultValue=false)]
        public DateTime BankOrderDateTime { get; set; }

        /// <summary>
        /// Список моделей, которые нужны в отчете. 
        /// </summary>
        /// <value>Список моделей, которые нужны в отчете. </value>
        [DataMember(Name="placementPrograms", EmitDefaultValue=true)]
        public List<PlacementType> PlacementPrograms { get; set; }

        /// <summary>
        /// Список ИНН, которые нужны в отчете.
        /// </summary>
        /// <value>Список ИНН, которые нужны в отчете.</value>
        [DataMember(Name="inns", EmitDefaultValue=true)]
        public List<string> Inns { get; set; }

        /// <summary>
        /// Список магазинов, которые нужны в отчете.
        /// </summary>
        /// <value>Список магазинов, которые нужны в отчете.</value>
        [DataMember(Name="campaignIds", EmitDefaultValue=true)]
        public List<long> CampaignIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GenerateUnitedNettingReportRequest {\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  DateTimeFrom: ").Append(DateTimeFrom).Append("\n");
            sb.Append("  DateTimeTo: ").Append(DateTimeTo).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  BankOrderId: ").Append(BankOrderId).Append("\n");
            sb.Append("  BankOrderDateTime: ").Append(BankOrderDateTime).Append("\n");
            sb.Append("  PlacementPrograms: ").Append(PlacementPrograms).Append("\n");
            sb.Append("  Inns: ").Append(Inns).Append("\n");
            sb.Append("  CampaignIds: ").Append(CampaignIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GenerateUnitedNettingReportRequest)obj);
        }

        /// <summary>
        /// Returns true if GenerateUnitedNettingReportRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GenerateUnitedNettingReportRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenerateUnitedNettingReportRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BusinessId == other.BusinessId ||
                    
                    BusinessId.Equals(other.BusinessId)
                ) && 
                (
                    DateTimeFrom == other.DateTimeFrom ||
                    DateTimeFrom != null &&
                    DateTimeFrom.Equals(other.DateTimeFrom)
                ) && 
                (
                    DateTimeTo == other.DateTimeTo ||
                    DateTimeTo != null &&
                    DateTimeTo.Equals(other.DateTimeTo)
                ) && 
                (
                    DateFrom == other.DateFrom ||
                    DateFrom != null &&
                    DateFrom.Equals(other.DateFrom)
                ) && 
                (
                    DateTo == other.DateTo ||
                    DateTo != null &&
                    DateTo.Equals(other.DateTo)
                ) && 
                (
                    BankOrderId == other.BankOrderId ||
                    
                    BankOrderId.Equals(other.BankOrderId)
                ) && 
                (
                    BankOrderDateTime == other.BankOrderDateTime ||
                    BankOrderDateTime != null &&
                    BankOrderDateTime.Equals(other.BankOrderDateTime)
                ) && 
                (
                    PlacementPrograms == other.PlacementPrograms ||
                    PlacementPrograms != null &&
                    other.PlacementPrograms != null &&
                    PlacementPrograms.SequenceEqual(other.PlacementPrograms)
                ) && 
                (
                    Inns == other.Inns ||
                    Inns != null &&
                    other.Inns != null &&
                    Inns.SequenceEqual(other.Inns)
                ) && 
                (
                    CampaignIds == other.CampaignIds ||
                    CampaignIds != null &&
                    other.CampaignIds != null &&
                    CampaignIds.SequenceEqual(other.CampaignIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BusinessId.GetHashCode();
                    if (DateTimeFrom != null)
                    hashCode = hashCode * 59 + DateTimeFrom.GetHashCode();
                    if (DateTimeTo != null)
                    hashCode = hashCode * 59 + DateTimeTo.GetHashCode();
                    if (DateFrom != null)
                    hashCode = hashCode * 59 + DateFrom.GetHashCode();
                    if (DateTo != null)
                    hashCode = hashCode * 59 + DateTo.GetHashCode();
                    
                    hashCode = hashCode * 59 + BankOrderId.GetHashCode();
                    if (BankOrderDateTime != null)
                    hashCode = hashCode * 59 + BankOrderDateTime.GetHashCode();
                    if (PlacementPrograms != null)
                    hashCode = hashCode * 59 + PlacementPrograms.GetHashCode();
                    if (Inns != null)
                    hashCode = hashCode * 59 + Inns.GetHashCode();
                    if (CampaignIds != null)
                    hashCode = hashCode * 59 + CampaignIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GenerateUnitedNettingReportRequest left, GenerateUnitedNettingReportRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GenerateUnitedNettingReportRequest left, GenerateUnitedNettingReportRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
