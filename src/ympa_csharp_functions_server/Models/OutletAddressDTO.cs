/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Адрес точки продаж. 
    /// </summary>
    [DataContract]
    public partial class OutletAddressDTO : IEquatable<OutletAddressDTO>
    {
        /// <summary>
        /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
        /// </summary>
        /// <value>Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} </value>
        [Required]
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public long RegionId { get; set; }

        /// <summary>
        /// Улица.
        /// </summary>
        /// <value>Улица.</value>
        [MaxLength(512)]
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Номер дома.
        /// </summary>
        /// <value>Номер дома.</value>
        [MaxLength(256)]
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Номер строения.
        /// </summary>
        /// <value>Номер строения.</value>
        [MaxLength(16)]
        [DataMember(Name="building", EmitDefaultValue=false)]
        public string Building { get; set; }

        /// <summary>
        /// Номер владения.
        /// </summary>
        /// <value>Номер владения.</value>
        [MaxLength(16)]
        [DataMember(Name="estate", EmitDefaultValue=false)]
        public string Estate { get; set; }

        /// <summary>
        /// Номер корпуса.
        /// </summary>
        /// <value>Номер корпуса.</value>
        [MaxLength(16)]
        [DataMember(Name="block", EmitDefaultValue=false)]
        public string Block { get; set; }

        /// <summary>
        /// Дополнительная информация.
        /// </summary>
        /// <value>Дополнительная информация.</value>
        [DataMember(Name="additional", EmitDefaultValue=false)]
        public string Additional { get; set; }

        /// <summary>
        /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
        /// </summary>
        /// <value>Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.</value>
        [DataMember(Name="km", EmitDefaultValue=false)]
        public int Km { get; set; }

        /// <summary>
        /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
        /// </summary>
        /// <value>{% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} </value>
        [MaxLength(200)]
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutletAddressDTO {\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Estate: ").Append(Estate).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Additional: ").Append(Additional).Append("\n");
            sb.Append("  Km: ").Append(Km).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OutletAddressDTO)obj);
        }

        /// <summary>
        /// Returns true if OutletAddressDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OutletAddressDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutletAddressDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegionId == other.RegionId ||
                    
                    RegionId.Equals(other.RegionId)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    Building == other.Building ||
                    Building != null &&
                    Building.Equals(other.Building)
                ) && 
                (
                    Estate == other.Estate ||
                    Estate != null &&
                    Estate.Equals(other.Estate)
                ) && 
                (
                    Block == other.Block ||
                    Block != null &&
                    Block.Equals(other.Block)
                ) && 
                (
                    Additional == other.Additional ||
                    Additional != null &&
                    Additional.Equals(other.Additional)
                ) && 
                (
                    Km == other.Km ||
                    
                    Km.Equals(other.Km)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + RegionId.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Building != null)
                    hashCode = hashCode * 59 + Building.GetHashCode();
                    if (Estate != null)
                    hashCode = hashCode * 59 + Estate.GetHashCode();
                    if (Block != null)
                    hashCode = hashCode * 59 + Block.GetHashCode();
                    if (Additional != null)
                    hashCode = hashCode * 59 + Additional.GetHashCode();
                    
                    hashCode = hashCode * 59 + Km.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OutletAddressDTO left, OutletAddressDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OutletAddressDTO left, OutletAddressDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
