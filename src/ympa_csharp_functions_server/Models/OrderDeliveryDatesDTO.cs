/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Диапазон дат доставки.
    /// </summary>
    [DataContract]
    public partial class OrderDeliveryDatesDTO : IEquatable<OrderDeliveryDatesDTO>
    {
        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public string FromDate { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public string ToDate { get; set; }

        /// <summary>
        /// Начало интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Минимальное значение: &#x60;00:00&#x60;. 
        /// </summary>
        /// <value>Начало интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Минимальное значение: &#x60;00:00&#x60;. </value>
        [DataMember(Name="fromTime", EmitDefaultValue=false)]
        public string FromTime { get; set; }

        /// <summary>
        /// Конец интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Максимальное значение: &#x60;23:59&#x60;. 
        /// </summary>
        /// <value>Конец интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Максимальное значение: &#x60;23:59&#x60;. </value>
        [DataMember(Name="toTime", EmitDefaultValue=false)]
        public string ToTime { get; set; }

        /// <summary>
        /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
        /// </summary>
        /// <value>Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. </value>
        [DataMember(Name="realDeliveryDate", EmitDefaultValue=false)]
        public string RealDeliveryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDeliveryDatesDTO {\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  FromTime: ").Append(FromTime).Append("\n");
            sb.Append("  ToTime: ").Append(ToTime).Append("\n");
            sb.Append("  RealDeliveryDate: ").Append(RealDeliveryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderDeliveryDatesDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderDeliveryDatesDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDeliveryDatesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDeliveryDatesDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FromDate == other.FromDate ||
                    FromDate != null &&
                    FromDate.Equals(other.FromDate)
                ) && 
                (
                    ToDate == other.ToDate ||
                    ToDate != null &&
                    ToDate.Equals(other.ToDate)
                ) && 
                (
                    FromTime == other.FromTime ||
                    FromTime != null &&
                    FromTime.Equals(other.FromTime)
                ) && 
                (
                    ToTime == other.ToTime ||
                    ToTime != null &&
                    ToTime.Equals(other.ToTime)
                ) && 
                (
                    RealDeliveryDate == other.RealDeliveryDate ||
                    RealDeliveryDate != null &&
                    RealDeliveryDate.Equals(other.RealDeliveryDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FromDate != null)
                    hashCode = hashCode * 59 + FromDate.GetHashCode();
                    if (ToDate != null)
                    hashCode = hashCode * 59 + ToDate.GetHashCode();
                    if (FromTime != null)
                    hashCode = hashCode * 59 + FromTime.GetHashCode();
                    if (ToTime != null)
                    hashCode = hashCode * 59 + ToTime.GetHashCode();
                    if (RealDeliveryDate != null)
                    hashCode = hashCode * 59 + RealDeliveryDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderDeliveryDatesDTO left, OrderDeliveryDatesDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDeliveryDatesDTO left, OrderDeliveryDatesDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
