/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
    /// </summary>
    [DataContract]
    public partial class ValueRestrictionDTO : IEquatable<ValueRestrictionDTO>
    {
        /// <summary>
        /// Идентификатор ограничивающей характеристики.
        /// </summary>
        /// <value>Идентификатор ограничивающей характеристики.</value>
        [Required]
        [DataMember(Name="limitingParameterId", EmitDefaultValue=false)]
        public long LimitingParameterId { get; set; }

        /// <summary>
        /// Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
        /// </summary>
        /// <value>Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.</value>
        [Required]
        [DataMember(Name="limitedValues", EmitDefaultValue=false)]
        public List<OptionValuesLimitedDTO> LimitedValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValueRestrictionDTO {\n");
            sb.Append("  LimitingParameterId: ").Append(LimitingParameterId).Append("\n");
            sb.Append("  LimitedValues: ").Append(LimitedValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValueRestrictionDTO)obj);
        }

        /// <summary>
        /// Returns true if ValueRestrictionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ValueRestrictionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueRestrictionDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LimitingParameterId == other.LimitingParameterId ||
                    
                    LimitingParameterId.Equals(other.LimitingParameterId)
                ) && 
                (
                    LimitedValues == other.LimitedValues ||
                    LimitedValues != null &&
                    other.LimitedValues != null &&
                    LimitedValues.SequenceEqual(other.LimitedValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + LimitingParameterId.GetHashCode();
                    if (LimitedValues != null)
                    hashCode = hashCode * 59 + LimitedValues.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValueRestrictionDTO left, ValueRestrictionDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValueRestrictionDTO left, ValueRestrictionDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
