/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
        /// <summary>
        /// Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
        /// </summary>
        /// <value>Статус публикации товара:  * `READY` — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * `IN_WORK` — товар проходит модерацию. Это занимает несколько дней. * `NEED_CONTENT` — для товара без SKU на Маркете `marketSku` нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре `notes`. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. </value>
        [TypeConverter(typeof(CustomEnumConverter<OfferProcessingStatusType>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OfferProcessingStatusType
        {
            
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 1,
            
            /// <summary>
            /// Enum READYEnum for READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READYEnum = 2,
            
            /// <summary>
            /// Enum INWORKEnum for IN_WORK
            /// </summary>
            [EnumMember(Value = "IN_WORK")]
            INWORKEnum = 3,
            
            /// <summary>
            /// Enum NEEDINFOEnum for NEED_INFO
            /// </summary>
            [EnumMember(Value = "NEED_INFO")]
            NEEDINFOEnum = 4,
            
            /// <summary>
            /// Enum NEEDMAPPINGEnum for NEED_MAPPING
            /// </summary>
            [EnumMember(Value = "NEED_MAPPING")]
            NEEDMAPPINGEnum = 5,
            
            /// <summary>
            /// Enum NEEDCONTENTEnum for NEED_CONTENT
            /// </summary>
            [EnumMember(Value = "NEED_CONTENT")]
            NEEDCONTENTEnum = 6,
            
            /// <summary>
            /// Enum CONTENTPROCESSINGEnum for CONTENT_PROCESSING
            /// </summary>
            [EnumMember(Value = "CONTENT_PROCESSING")]
            CONTENTPROCESSINGEnum = 7,
            
            /// <summary>
            /// Enum SUSPENDEDEnum for SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDEDEnum = 8,
            
            /// <summary>
            /// Enum REJECTEDEnum for REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTEDEnum = 9,
            
            /// <summary>
            /// Enum REVIEWEnum for REVIEW
            /// </summary>
            [EnumMember(Value = "REVIEW")]
            REVIEWEnum = 10,
            
            /// <summary>
            /// Enum CREATEERROREnum for CREATE_ERROR
            /// </summary>
            [EnumMember(Value = "CREATE_ERROR")]
            CREATEERROREnum = 11,
            
            /// <summary>
            /// Enum UPDATEERROREnum for UPDATE_ERROR
            /// </summary>
            [EnumMember(Value = "UPDATE_ERROR")]
            UPDATEERROREnum = 12
        }
}
