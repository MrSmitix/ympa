/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о лицензии.
    /// </summary>
    [DataContract]
    public partial class FullOutletLicenseDTO : IEquatable<FullOutletLicenseDTO>
    {
        /// <summary>
        /// Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
        /// </summary>
        /// <value>Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Идентификатор точки продаж, для которой действительна лицензия.
        /// </summary>
        /// <value>Идентификатор точки продаж, для которой действительна лицензия.</value>
        [DataMember(Name="outletId", EmitDefaultValue=false)]
        public long OutletId { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public LicenseType LicenseType { get; set; }

        /// <summary>
        /// Номер лицензии.
        /// </summary>
        /// <value>Номер лицензии.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
        /// </summary>
        /// <value>Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. </value>
        [DataMember(Name="dateOfIssue", EmitDefaultValue=false)]
        public DateTime DateOfIssue { get; set; }

        /// <summary>
        /// Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
        /// </summary>
        /// <value>Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. </value>
        [DataMember(Name="dateOfExpiry", EmitDefaultValue=false)]
        public DateTime DateOfExpiry { get; set; }

        /// <summary>
        /// Gets or Sets CheckStatus
        /// </summary>
        [DataMember(Name="checkStatus", EmitDefaultValue=false)]
        public LicenseCheckStatusType CheckStatus { get; set; }

        /// <summary>
        /// Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр &#x60;checkStatus&#x60; имеет значение &#x60;FAIL&#x60;. 
        /// </summary>
        /// <value>Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр &#x60;checkStatus&#x60; имеет значение &#x60;FAIL&#x60;. </value>
        [DataMember(Name="checkComment", EmitDefaultValue=false)]
        public string CheckComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullOutletLicenseDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OutletId: ").Append(OutletId).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  DateOfIssue: ").Append(DateOfIssue).Append("\n");
            sb.Append("  DateOfExpiry: ").Append(DateOfExpiry).Append("\n");
            sb.Append("  CheckStatus: ").Append(CheckStatus).Append("\n");
            sb.Append("  CheckComment: ").Append(CheckComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullOutletLicenseDTO)obj);
        }

        /// <summary>
        /// Returns true if FullOutletLicenseDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FullOutletLicenseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullOutletLicenseDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    OutletId == other.OutletId ||
                    
                    OutletId.Equals(other.OutletId)
                ) && 
                (
                    LicenseType == other.LicenseType ||
                    
                    LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    DateOfIssue == other.DateOfIssue ||
                    DateOfIssue != null &&
                    DateOfIssue.Equals(other.DateOfIssue)
                ) && 
                (
                    DateOfExpiry == other.DateOfExpiry ||
                    DateOfExpiry != null &&
                    DateOfExpiry.Equals(other.DateOfExpiry)
                ) && 
                (
                    CheckStatus == other.CheckStatus ||
                    
                    CheckStatus.Equals(other.CheckStatus)
                ) && 
                (
                    CheckComment == other.CheckComment ||
                    CheckComment != null &&
                    CheckComment.Equals(other.CheckComment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + OutletId.GetHashCode();
                    
                    hashCode = hashCode * 59 + LicenseType.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (DateOfIssue != null)
                    hashCode = hashCode * 59 + DateOfIssue.GetHashCode();
                    if (DateOfExpiry != null)
                    hashCode = hashCode * 59 + DateOfExpiry.GetHashCode();
                    
                    hashCode = hashCode * 59 + CheckStatus.GetHashCode();
                    if (CheckComment != null)
                    hashCode = hashCode * 59 + CheckComment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullOutletLicenseDTO left, FullOutletLicenseDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullOutletLicenseDTO left, FullOutletLicenseDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
