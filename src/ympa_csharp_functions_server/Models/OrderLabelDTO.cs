/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Данные для печати ярлыка.
    /// </summary>
    [DataContract]
    public partial class OrderLabelDTO : IEquatable<OrderLabelDTO>
    {
        /// <summary>
        /// Идентификатор заказа.
        /// </summary>
        /// <value>Идентификатор заказа.</value>
        [Required]
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public long OrderId { get; set; }

        /// <summary>
        /// Количество коробок в заказе.
        /// </summary>
        /// <value>Количество коробок в заказе.</value>
        [Required]
        [DataMember(Name="placesNumber", EmitDefaultValue=false)]
        public int PlacesNumber { get; set; }

        /// <summary>
        /// URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
        /// </summary>
        /// <value>URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). </value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Информация на ярлыке.
        /// </summary>
        /// <value>Информация на ярлыке.</value>
        [Required]
        [DataMember(Name="parcelBoxLabels", EmitDefaultValue=false)]
        public List<ParcelBoxLabelDTO> ParcelBoxLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLabelDTO {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlacesNumber: ").Append(PlacesNumber).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ParcelBoxLabels: ").Append(ParcelBoxLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderLabelDTO)obj);
        }

        /// <summary>
        /// Returns true if OrderLabelDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderLabelDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLabelDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderId == other.OrderId ||
                    
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    PlacesNumber == other.PlacesNumber ||
                    
                    PlacesNumber.Equals(other.PlacesNumber)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    ParcelBoxLabels == other.ParcelBoxLabels ||
                    ParcelBoxLabels != null &&
                    other.ParcelBoxLabels != null &&
                    ParcelBoxLabels.SequenceEqual(other.ParcelBoxLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlacesNumber.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (ParcelBoxLabels != null)
                    hashCode = hashCode * 59 + ParcelBoxLabels.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderLabelDTO left, OrderLabelDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderLabelDTO left, OrderLabelDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
