/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о товарах в акции.
    /// </summary>
    [DataContract]
    public partial class GetPromoAssortmentInfoDTO : IEquatable<GetPromoAssortmentInfoDTO>
    {
        /// <summary>
        /// Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
        /// </summary>
        /// <value>Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). </value>
        [Required]
        [DataMember(Name="activeOffers", EmitDefaultValue=false)]
        public int ActiveOffers { get; set; }

        /// <summary>
        /// Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 
        /// </summary>
        /// <value>Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. </value>
        [DataMember(Name="potentialOffers", EmitDefaultValue=false)]
        public int PotentialOffers { get; set; }

        /// <summary>
        /// Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 
        /// </summary>
        /// <value>Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. </value>
        [DataMember(Name="processing", EmitDefaultValue=false)]
        public bool Processing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetPromoAssortmentInfoDTO {\n");
            sb.Append("  ActiveOffers: ").Append(ActiveOffers).Append("\n");
            sb.Append("  PotentialOffers: ").Append(PotentialOffers).Append("\n");
            sb.Append("  Processing: ").Append(Processing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetPromoAssortmentInfoDTO)obj);
        }

        /// <summary>
        /// Returns true if GetPromoAssortmentInfoDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of GetPromoAssortmentInfoDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPromoAssortmentInfoDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActiveOffers == other.ActiveOffers ||
                    
                    ActiveOffers.Equals(other.ActiveOffers)
                ) && 
                (
                    PotentialOffers == other.PotentialOffers ||
                    
                    PotentialOffers.Equals(other.PotentialOffers)
                ) && 
                (
                    Processing == other.Processing ||
                    
                    Processing.Equals(other.Processing)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ActiveOffers.GetHashCode();
                    
                    hashCode = hashCode * 59 + PotentialOffers.GetHashCode();
                    
                    hashCode = hashCode * 59 + Processing.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetPromoAssortmentInfoDTO left, GetPromoAssortmentInfoDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetPromoAssortmentInfoDTO left, GetPromoAssortmentInfoDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
