/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
    /// </summary>
    [DataContract]
    public partial class OfferCardDTO : IEquatable<OfferCardDTO>
    {
        /// <summary>
        /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        /// </summary>
        /// <value>Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) </value>
        [Required]
        [RegularExpression("^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$")]
        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public string OfferId { get; set; }

        /// <summary>
        /// Gets or Sets Mapping
        /// </summary>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public GetMappingDTO Mapping { get; set; }

        /// <summary>
        /// Список характеристик с их значениями. 
        /// </summary>
        /// <value>Список характеристик с их значениями. </value>
        [DataMember(Name="parameterValues", EmitDefaultValue=true)]
        public List<ParameterValueDTO> ParameterValues { get; set; }

        /// <summary>
        /// Gets or Sets CardStatus
        /// </summary>
        [DataMember(Name="cardStatus", EmitDefaultValue=false)]
        public OfferCardStatusType CardStatus { get; set; }

        /// <summary>
        /// Процент заполненности карточки.
        /// </summary>
        /// <value>Процент заполненности карточки.</value>
        [DataMember(Name="contentRating", EmitDefaultValue=false)]
        public int ContentRating { get; set; }

        /// <summary>
        /// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
        /// </summary>
        /// <value>Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. </value>
        [DataMember(Name="recommendations", EmitDefaultValue=true)]
        public List<OfferCardRecommendationDTO> Recommendations { get; set; }

        /// <summary>
        /// Ошибки в контенте, препятствующие размещению товара на витрине.
        /// </summary>
        /// <value>Ошибки в контенте, препятствующие размещению товара на витрине.</value>
        [DataMember(Name="errors", EmitDefaultValue=true)]
        public List<OfferErrorDTO> Errors { get; set; }

        /// <summary>
        /// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
        /// </summary>
        /// <value>Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.</value>
        [DataMember(Name="warnings", EmitDefaultValue=true)]
        public List<OfferErrorDTO> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferCardDTO {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  CardStatus: ").Append(CardStatus).Append("\n");
            sb.Append("  ContentRating: ").Append(ContentRating).Append("\n");
            sb.Append("  Recommendations: ").Append(Recommendations).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OfferCardDTO)obj);
        }

        /// <summary>
        /// Returns true if OfferCardDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferCardDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferCardDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OfferId == other.OfferId ||
                    OfferId != null &&
                    OfferId.Equals(other.OfferId)
                ) && 
                (
                    Mapping == other.Mapping ||
                    Mapping != null &&
                    Mapping.Equals(other.Mapping)
                ) && 
                (
                    ParameterValues == other.ParameterValues ||
                    ParameterValues != null &&
                    other.ParameterValues != null &&
                    ParameterValues.SequenceEqual(other.ParameterValues)
                ) && 
                (
                    CardStatus == other.CardStatus ||
                    
                    CardStatus.Equals(other.CardStatus)
                ) && 
                (
                    ContentRating == other.ContentRating ||
                    
                    ContentRating.Equals(other.ContentRating)
                ) && 
                (
                    Recommendations == other.Recommendations ||
                    Recommendations != null &&
                    other.Recommendations != null &&
                    Recommendations.SequenceEqual(other.Recommendations)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    other.Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    other.Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OfferId != null)
                    hashCode = hashCode * 59 + OfferId.GetHashCode();
                    if (Mapping != null)
                    hashCode = hashCode * 59 + Mapping.GetHashCode();
                    if (ParameterValues != null)
                    hashCode = hashCode * 59 + ParameterValues.GetHashCode();
                    
                    hashCode = hashCode * 59 + CardStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContentRating.GetHashCode();
                    if (Recommendations != null)
                    hashCode = hashCode * 59 + Recommendations.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OfferCardDTO left, OfferCardDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OfferCardDTO left, OfferCardDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
