/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ympa_csharp_functions_server.Converters;

namespace ympa_csharp_functions_server.Models
{ 
    /// <summary>
    /// Список товаров.  В теле запроса можно передать от одного до 500 товаров.  Обязательный параметр. 
    /// </summary>
    [DataContract]
    public partial class UpdateOfferMappingEntryDTO : IEquatable<UpdateOfferMappingEntryDTO>
    {
        /// <summary>
        /// Gets or Sets Mapping
        /// </summary>
        [DataMember(Name="mapping", EmitDefaultValue=false)]
        public OfferMappingDTO Mapping { get; set; }

        /// <summary>
        /// Gets or Sets AwaitingModerationMapping
        /// </summary>
        [DataMember(Name="awaitingModerationMapping", EmitDefaultValue=false)]
        public OfferMappingDTO AwaitingModerationMapping { get; set; }

        /// <summary>
        /// Gets or Sets RejectedMapping
        /// </summary>
        [DataMember(Name="rejectedMapping", EmitDefaultValue=false)]
        public OfferMappingDTO RejectedMapping { get; set; }

        /// <summary>
        /// Gets or Sets Offer
        /// </summary>
        [DataMember(Name="offer", EmitDefaultValue=false)]
        public UpdateMappingsOfferDTO Offer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateOfferMappingEntryDTO {\n");
            sb.Append("  Mapping: ").Append(Mapping).Append("\n");
            sb.Append("  AwaitingModerationMapping: ").Append(AwaitingModerationMapping).Append("\n");
            sb.Append("  RejectedMapping: ").Append(RejectedMapping).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateOfferMappingEntryDTO)obj);
        }

        /// <summary>
        /// Returns true if UpdateOfferMappingEntryDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateOfferMappingEntryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateOfferMappingEntryDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mapping == other.Mapping ||
                    Mapping != null &&
                    Mapping.Equals(other.Mapping)
                ) && 
                (
                    AwaitingModerationMapping == other.AwaitingModerationMapping ||
                    AwaitingModerationMapping != null &&
                    AwaitingModerationMapping.Equals(other.AwaitingModerationMapping)
                ) && 
                (
                    RejectedMapping == other.RejectedMapping ||
                    RejectedMapping != null &&
                    RejectedMapping.Equals(other.RejectedMapping)
                ) && 
                (
                    Offer == other.Offer ||
                    Offer != null &&
                    Offer.Equals(other.Offer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mapping != null)
                    hashCode = hashCode * 59 + Mapping.GetHashCode();
                    if (AwaitingModerationMapping != null)
                    hashCode = hashCode * 59 + AwaitingModerationMapping.GetHashCode();
                    if (RejectedMapping != null)
                    hashCode = hashCode * 59 + RejectedMapping.GetHashCode();
                    if (Offer != null)
                    hashCode = hashCode * 59 + Offer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateOfferMappingEntryDTO left, UpdateOfferMappingEntryDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateOfferMappingEntryDTO left, UpdateOfferMappingEntryDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
