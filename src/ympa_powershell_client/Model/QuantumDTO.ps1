#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр `quantum`.  {% cut ""Пример"" %}  ```json {   ""offers"": [     {       ""offerId"": ""08e35dc1-89a2-11e3-8055-0015e9b8c48d"",       ""quantum"": {}     }   ] } ```  {% endcut %} 

.PARAMETER MinQuantity
Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 
.PARAMETER StepQuantity
На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 
.OUTPUTS

QuantumDTO<PSCustomObject>
#>

function Initialize-QuantumDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinQuantity},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StepQuantity}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => QuantumDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($MinQuantity -and $MinQuantity -lt 1) {
          throw "invalid value for 'MinQuantity', must be greater than or equal to 1."
        }

        if ($StepQuantity -and $StepQuantity -gt 100) {
          throw "invalid value for 'StepQuantity', must be smaller than or equal to 100."
        }

        if ($StepQuantity -and $StepQuantity -lt 1) {
          throw "invalid value for 'StepQuantity', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "minQuantity" = ${MinQuantity}
            "stepQuantity" = ${StepQuantity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to QuantumDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to QuantumDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

QuantumDTO<PSCustomObject>
#>
function ConvertFrom-JsonToQuantumDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => QuantumDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in QuantumDTO
        $AllProperties = ("minQuantity", "stepQuantity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minQuantity"))) { #optional property not found
            $MinQuantity = $null
        } else {
            $MinQuantity = $JsonParameters.PSobject.Properties["minQuantity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stepQuantity"))) { #optional property not found
            $StepQuantity = $null
        } else {
            $StepQuantity = $JsonParameters.PSobject.Properties["stepQuantity"].value
        }

        $PSO = [PSCustomObject]@{
            "minQuantity" = ${MinQuantity}
            "stepQuantity" = ${StepQuantity}
        }

        return $PSO
    }

}

