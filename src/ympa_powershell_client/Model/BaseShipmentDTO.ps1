#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об отгрузке.

.PARAMETER Id
Идентификатор отгрузки.
.PARAMETER PlanIntervalFrom
Начало планового интервала отгрузки.
.PARAMETER PlanIntervalTo
Конец планового интервала отгрузки.
.PARAMETER ShipmentType
No description available.
.PARAMETER Warehouse
No description available.
.PARAMETER WarehouseTo
No description available.
.PARAMETER ExternalId
Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
.PARAMETER DeliveryService
No description available.
.PARAMETER PalletsCount
No description available.
.PARAMETER OrderIds
Идентификаторы заказов в отгрузке.
.PARAMETER DraftCount
Количество заказов, которое Маркет запланировал к отгрузке.
.PARAMETER PlannedCount
Количество заказов, которое Маркет подтвердил к отгрузке.
.PARAMETER FactCount
Количество заказов, принятых в сортировочном центре или пункте приема.
.OUTPUTS

BaseShipmentDTO<PSCustomObject>
#>

function Initialize-BaseShipmentDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${PlanIntervalFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${PlanIntervalTo},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IMPORT", "WITHDRAW")]
        [PSCustomObject]
        ${ShipmentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Warehouse},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WarehouseTo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeliveryService},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PalletsCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${OrderIds},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DraftCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PlannedCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FactCount}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => BaseShipmentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $OrderIds) {
            throw "invalid value for 'OrderIds', 'OrderIds' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "planIntervalFrom" = ${PlanIntervalFrom}
            "planIntervalTo" = ${PlanIntervalTo}
            "shipmentType" = ${ShipmentType}
            "warehouse" = ${Warehouse}
            "warehouseTo" = ${WarehouseTo}
            "externalId" = ${ExternalId}
            "deliveryService" = ${DeliveryService}
            "palletsCount" = ${PalletsCount}
            "orderIds" = ${OrderIds}
            "draftCount" = ${DraftCount}
            "plannedCount" = ${PlannedCount}
            "factCount" = ${FactCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BaseShipmentDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to BaseShipmentDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BaseShipmentDTO<PSCustomObject>
#>
function ConvertFrom-JsonToBaseShipmentDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => BaseShipmentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BaseShipmentDTO
        $AllProperties = ("id", "planIntervalFrom", "planIntervalTo", "shipmentType", "warehouse", "warehouseTo", "externalId", "deliveryService", "palletsCount", "orderIds", "draftCount", "plannedCount", "factCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'orderIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'orderIds' missing."
        } else {
            $OrderIds = $JsonParameters.PSobject.Properties["orderIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "planIntervalFrom"))) { #optional property not found
            $PlanIntervalFrom = $null
        } else {
            $PlanIntervalFrom = $JsonParameters.PSobject.Properties["planIntervalFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "planIntervalTo"))) { #optional property not found
            $PlanIntervalTo = $null
        } else {
            $PlanIntervalTo = $JsonParameters.PSobject.Properties["planIntervalTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentType"))) { #optional property not found
            $ShipmentType = $null
        } else {
            $ShipmentType = $JsonParameters.PSobject.Properties["shipmentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warehouse"))) { #optional property not found
            $Warehouse = $null
        } else {
            $Warehouse = $JsonParameters.PSobject.Properties["warehouse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warehouseTo"))) { #optional property not found
            $WarehouseTo = $null
        } else {
            $WarehouseTo = $JsonParameters.PSobject.Properties["warehouseTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalId"))) { #optional property not found
            $ExternalId = $null
        } else {
            $ExternalId = $JsonParameters.PSobject.Properties["externalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryService"))) { #optional property not found
            $DeliveryService = $null
        } else {
            $DeliveryService = $JsonParameters.PSobject.Properties["deliveryService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "palletsCount"))) { #optional property not found
            $PalletsCount = $null
        } else {
            $PalletsCount = $JsonParameters.PSobject.Properties["palletsCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "draftCount"))) { #optional property not found
            $DraftCount = $null
        } else {
            $DraftCount = $JsonParameters.PSobject.Properties["draftCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "plannedCount"))) { #optional property not found
            $PlannedCount = $null
        } else {
            $PlannedCount = $JsonParameters.PSobject.Properties["plannedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "factCount"))) { #optional property not found
            $FactCount = $null
        } else {
            $FactCount = $JsonParameters.PSobject.Properties["factCount"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "planIntervalFrom" = ${PlanIntervalFrom}
            "planIntervalTo" = ${PlanIntervalTo}
            "shipmentType" = ${ShipmentType}
            "warehouse" = ${Warehouse}
            "warehouseTo" = ${WarehouseTo}
            "externalId" = ${ExternalId}
            "deliveryService" = ${DeliveryService}
            "palletsCount" = ${PalletsCount}
            "orderIds" = ${OrderIds}
            "draftCount" = ${DraftCount}
            "plannedCount" = ${PlannedCount}
            "factCount" = ${FactCount}
        }

        return $PSO
    }

}

