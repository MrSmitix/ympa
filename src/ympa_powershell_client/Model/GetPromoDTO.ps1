#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об акции.

.PARAMETER Id
Идентификатор акции.
.PARAMETER Name
Название акции.
.PARAMETER Period
No description available.
.PARAMETER Participating
Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
.PARAMETER AssortmentInfo
No description available.
.PARAMETER MechanicsInfo
No description available.
.PARAMETER BestsellerInfo
No description available.
.PARAMETER Channels
Список каналов продвижения товаров.
.PARAMETER Constraints
No description available.
.OUTPUTS

GetPromoDTO<PSCustomObject>
#>

function Initialize-GetPromoDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Period},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Participating},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssortmentInfo},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MechanicsInfo},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BestsellerInfo},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Channels},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Constraints}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetPromoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Period) {
            throw "invalid value for 'Period', 'Period' cannot be null."
        }

        if ($null -eq $Participating) {
            throw "invalid value for 'Participating', 'Participating' cannot be null."
        }

        if ($null -eq $AssortmentInfo) {
            throw "invalid value for 'AssortmentInfo', 'AssortmentInfo' cannot be null."
        }

        if ($null -eq $MechanicsInfo) {
            throw "invalid value for 'MechanicsInfo', 'MechanicsInfo' cannot be null."
        }

        if ($null -eq $BestsellerInfo) {
            throw "invalid value for 'BestsellerInfo', 'BestsellerInfo' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "period" = ${Period}
            "participating" = ${Participating}
            "assortmentInfo" = ${AssortmentInfo}
            "mechanicsInfo" = ${MechanicsInfo}
            "bestsellerInfo" = ${BestsellerInfo}
            "channels" = ${Channels}
            "constraints" = ${Constraints}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetPromoDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetPromoDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetPromoDTO<PSCustomObject>
#>
function ConvertFrom-JsonToGetPromoDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetPromoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetPromoDTO
        $AllProperties = ("id", "name", "period", "participating", "assortmentInfo", "mechanicsInfo", "bestsellerInfo", "channels", "constraints")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) {
            throw "Error! JSON cannot be serialized due to the required property 'period' missing."
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "participating"))) {
            throw "Error! JSON cannot be serialized due to the required property 'participating' missing."
        } else {
            $Participating = $JsonParameters.PSobject.Properties["participating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assortmentInfo"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assortmentInfo' missing."
        } else {
            $AssortmentInfo = $JsonParameters.PSobject.Properties["assortmentInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mechanicsInfo"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mechanicsInfo' missing."
        } else {
            $MechanicsInfo = $JsonParameters.PSobject.Properties["mechanicsInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bestsellerInfo"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bestsellerInfo' missing."
        } else {
            $BestsellerInfo = $JsonParameters.PSobject.Properties["bestsellerInfo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "channels"))) { #optional property not found
            $Channels = $null
        } else {
            $Channels = $JsonParameters.PSobject.Properties["channels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "constraints"))) { #optional property not found
            $Constraints = $null
        } else {
            $Constraints = $JsonParameters.PSobject.Properties["constraints"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "period" = ${Period}
            "participating" = ${Participating}
            "assortmentInfo" = ${AssortmentInfo}
            "mechanicsInfo" = ${MechanicsInfo}
            "bestsellerInfo" = ${BestsellerInfo}
            "channels" = ${Channels}
            "constraints" = ${Constraints}
        }

        return $PSO
    }

}

