#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товарах в каталоге. 

.PARAMETER MarketSku
SKU на Маркете.
.PARAMETER MarketSkuName
Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
.PARAMETER MarketModelId
Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
.PARAMETER MarketModelName
Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
.PARAMETER MarketCategoryId
Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
.PARAMETER MarketCategoryName
Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
.OUTPUTS

GetMappingDTO<PSCustomObject>
#>

function Initialize-GetMappingDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketSku},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketSkuName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketModelId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketModelName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketCategoryId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketCategoryName}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetMappingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "marketSku" = ${MarketSku}
            "marketSkuName" = ${MarketSkuName}
            "marketModelId" = ${MarketModelId}
            "marketModelName" = ${MarketModelName}
            "marketCategoryId" = ${MarketCategoryId}
            "marketCategoryName" = ${MarketCategoryName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetMappingDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetMappingDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetMappingDTO<PSCustomObject>
#>
function ConvertFrom-JsonToGetMappingDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetMappingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetMappingDTO
        $AllProperties = ("marketSku", "marketSkuName", "marketModelId", "marketModelName", "marketCategoryId", "marketCategoryName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketSku"))) { #optional property not found
            $MarketSku = $null
        } else {
            $MarketSku = $JsonParameters.PSobject.Properties["marketSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketSkuName"))) { #optional property not found
            $MarketSkuName = $null
        } else {
            $MarketSkuName = $JsonParameters.PSobject.Properties["marketSkuName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketModelId"))) { #optional property not found
            $MarketModelId = $null
        } else {
            $MarketModelId = $JsonParameters.PSobject.Properties["marketModelId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketModelName"))) { #optional property not found
            $MarketModelName = $null
        } else {
            $MarketModelName = $JsonParameters.PSobject.Properties["marketModelName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketCategoryId"))) { #optional property not found
            $MarketCategoryId = $null
        } else {
            $MarketCategoryId = $JsonParameters.PSobject.Properties["marketCategoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketCategoryName"))) { #optional property not found
            $MarketCategoryName = $null
        } else {
            $MarketCategoryName = $JsonParameters.PSobject.Properties["marketCategoryName"].value
        }

        $PSO = [PSCustomObject]@{
            "marketSku" = ${MarketSku}
            "marketSkuName" = ${MarketSkuName}
            "marketModelId" = ${MarketModelId}
            "marketModelName" = ${MarketModelName}
            "marketCategoryId" = ${MarketCategoryId}
            "marketCategoryName" = ${MarketCategoryName}
        }

        return $PSO
    }

}

