#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Товар с указанными характеристиками.

.PARAMETER OfferId
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER CategoryId
Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
.PARAMETER ParameterValues
Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.  Максимальное количество характеристик — 300. 
.OUTPUTS

OfferContentDTO<PSCustomObject>
#>

function Initialize-OfferContentDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${OfferId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CategoryId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ParameterValues}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OfferContentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $OfferId) {
            throw "invalid value for 'OfferId', 'OfferId' cannot be null."
        }

        if ($OfferId.length -gt 255) {
            throw "invalid value for 'OfferId', the character length must be smaller than or equal to 255."
        }

        if ($OfferId.length -lt 1) {
            throw "invalid value for 'OfferId', the character length must be great than or equal to 1."
        }

        if ($null -eq $CategoryId) {
            throw "invalid value for 'CategoryId', 'CategoryId' cannot be null."
        }

        if ($null -eq $ParameterValues) {
            throw "invalid value for 'ParameterValues', 'ParameterValues' cannot be null."
        }

        if ($ParameterValues.length -gt 300) {
            throw "invalid value for 'ParameterValues', number of items must be less than or equal to 300."
        }

        if ($ParameterValues.length -lt 1) {
            throw "invalid value for 'ParameterValues', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "categoryId" = ${CategoryId}
            "parameterValues" = ${ParameterValues}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OfferContentDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OfferContentDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OfferContentDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOfferContentDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OfferContentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OfferContentDTO
        $AllProperties = ("offerId", "categoryId", "parameterValues")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'offerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'offerId' missing."
        } else {
            $OfferId = $JsonParameters.PSobject.Properties["offerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'categoryId' missing."
        } else {
            $CategoryId = $JsonParameters.PSobject.Properties["categoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameterValues"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameterValues' missing."
        } else {
            $ParameterValues = $JsonParameters.PSobject.Properties["parameterValues"].value
        }

        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "categoryId" = ${CategoryId}
            "parameterValues" = ${ParameterValues}
        }

        return $PSO
    }

}

