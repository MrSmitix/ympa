#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товаре в коробке.

.PARAMETER Id
Идентификатор товара в заказе.  {% cut ""Где его взять"" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}   
.PARAMETER FullCount
Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`. 
.PARAMETER PartialCount
No description available.
.PARAMETER Instances
Переданные вами коды маркировки.
.OUTPUTS

OrderBoxLayoutItemDTO<PSCustomObject>
#>

function Initialize-OrderBoxLayoutItemDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FullCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PartialCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Instances}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderBoxLayoutItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($FullCount -and $FullCount -lt 1) {
          throw "invalid value for 'FullCount', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fullCount" = ${FullCount}
            "partialCount" = ${PartialCount}
            "instances" = ${Instances}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderBoxLayoutItemDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderBoxLayoutItemDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderBoxLayoutItemDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderBoxLayoutItemDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderBoxLayoutItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderBoxLayoutItemDTO
        $AllProperties = ("id", "fullCount", "partialCount", "instances")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullCount"))) { #optional property not found
            $FullCount = $null
        } else {
            $FullCount = $JsonParameters.PSobject.Properties["fullCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partialCount"))) { #optional property not found
            $PartialCount = $null
        } else {
            $PartialCount = $JsonParameters.PSobject.Properties["partialCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instances"))) { #optional property not found
            $Instances = $null
        } else {
            $Instances = $JsonParameters.PSobject.Properties["instances"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "fullCount" = ${FullCount}
            "partialCount" = ${PartialCount}
            "instances" = ${Instances}
        }

        return $PSO
    }

}

