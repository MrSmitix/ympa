#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Список товаров в возврате.

.PARAMETER MarketSku
SKU на Маркете.
.PARAMETER ShopSku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Count
Количество единиц товара.
.PARAMETER Decisions
Список решений по возврату.
.PARAMETER Instances
Список логистических позиций возврата.
.PARAMETER Tracks
Список трек-кодов для почтовых отправлений.
.OUTPUTS

ReturnItemDTO<PSCustomObject>
#>

function Initialize-ReturnItemDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketSku},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${ShopSku},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Count},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Decisions},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Instances},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tracks}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ReturnItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ShopSku) {
            throw "invalid value for 'ShopSku', 'ShopSku' cannot be null."
        }

        if ($ShopSku.length -gt 255) {
            throw "invalid value for 'ShopSku', the character length must be smaller than or equal to 255."
        }

        if ($ShopSku.length -lt 1) {
            throw "invalid value for 'ShopSku', the character length must be great than or equal to 1."
        }

        if ($null -eq $Count) {
            throw "invalid value for 'Count', 'Count' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "marketSku" = ${MarketSku}
            "shopSku" = ${ShopSku}
            "count" = ${Count}
            "decisions" = ${Decisions}
            "instances" = ${Instances}
            "tracks" = ${Tracks}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReturnItemDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReturnItemDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReturnItemDTO<PSCustomObject>
#>
function ConvertFrom-JsonToReturnItemDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ReturnItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReturnItemDTO
        $AllProperties = ("marketSku", "shopSku", "count", "decisions", "instances", "tracks")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'shopSku' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopSku"))) {
            throw "Error! JSON cannot be serialized due to the required property 'shopSku' missing."
        } else {
            $ShopSku = $JsonParameters.PSobject.Properties["shopSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count' missing."
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketSku"))) { #optional property not found
            $MarketSku = $null
        } else {
            $MarketSku = $JsonParameters.PSobject.Properties["marketSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "decisions"))) { #optional property not found
            $Decisions = $null
        } else {
            $Decisions = $JsonParameters.PSobject.Properties["decisions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instances"))) { #optional property not found
            $Instances = $null
        } else {
            $Instances = $JsonParameters.PSobject.Properties["instances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tracks"))) { #optional property not found
            $Tracks = $null
        } else {
            $Tracks = $JsonParameters.PSobject.Properties["tracks"].value
        }

        $PSO = [PSCustomObject]@{
            "marketSku" = ${MarketSku}
            "shopSku" = ${ShopSku}
            "count" = ${Count}
            "decisions" = ${Decisions}
            "instances" = ${Instances}
            "tracks" = ${Tracks}
        }

        return $PSO
    }

}

