#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о тарифах, по которым нужно заплатить за услуги Маркета.

.PARAMETER Type
No description available.
.PARAMETER Percent
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
.PARAMETER Amount
Значение тарифа в рублях.
.PARAMETER Parameters
Параметры расчета тарифа.
.OUTPUTS

TariffDTO<PSCustomObject>
#>

function Initialize-TariffDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AGENCY_COMMISSION", "PAYMENT_TRANSFER", "STORAGE", "WITHDRAW", "SURPLUS", "FEE", "DELIVERY_TO_CUSTOMER", "CROSSREGIONAL_DELIVERY", "CROSSREGIONAL_DELIVERY_RETURN", "DISPOSAL", "SORTING_CENTER_STORAGE", "EXPRESS_DELIVERY", "FF_XDOC_SUPPLY_BOX", "FF_XDOC_SUPPLY_PALLET", "SORTING", "MIDDLE_MILE", "RETURN_PROCESSING", "EXPRESS_CANCELLED_BY_PARTNER", "DELIVERY_TO_CUSTOMER_RETURN", "CROSSBORDER_DELIVERY", "INTAKE_SORTING_BULKY_CARGO", "INTAKE_SORTING_SMALL_GOODS", "INTAKE_SORTING_DAILY", "FF_STORAGE_BILLING", "CANCELLED_ORDER_FEE_QI", "LATE_ORDER_EXECUTION_FEE_QI")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Percent},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Amount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Parameters}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => TariffDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Amount) {
            throw "invalid value for 'Amount', 'Amount' cannot be null."
        }

        if ($null -eq $Parameters) {
            throw "invalid value for 'Parameters', 'Parameters' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "percent" = ${Percent}
            "amount" = ${Amount}
            "parameters" = ${Parameters}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TariffDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to TariffDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TariffDTO<PSCustomObject>
#>
function ConvertFrom-JsonToTariffDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => TariffDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TariffDTO
        $AllProperties = ("type", "percent", "amount", "parameters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount"))) {
            throw "Error! JSON cannot be serialized due to the required property 'amount' missing."
        } else {
            $Amount = $JsonParameters.PSobject.Properties["amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameters"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameters' missing."
        } else {
            $Parameters = $JsonParameters.PSobject.Properties["parameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "percent"))) { #optional property not found
            $Percent = $null
        } else {
            $Percent = $JsonParameters.PSobject.Properties["percent"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "percent" = ${Percent}
            "amount" = ${Amount}
            "parameters" = ${Parameters}
        }

        return $PSO
    }

}

