#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Фильтры для получения списка акций.

.PARAMETER Participation
No description available.
.PARAMETER Mechanics
No description available.
.OUTPUTS

GetPromosRequest<PSCustomObject>
#>

function Initialize-GetPromosRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PARTICIPATING_NOW", "PARTICIPATED")]
        [PSCustomObject]
        ${Participation},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DIRECT_DISCOUNT", "BLUE_FLASH", "MARKET_PROMOCODE")]
        [PSCustomObject]
        ${Mechanics}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetPromosRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "participation" = ${Participation}
            "mechanics" = ${Mechanics}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetPromosRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetPromosRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetPromosRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetPromosRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetPromosRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetPromosRequest
        $AllProperties = ("participation", "mechanics")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "participation"))) { #optional property not found
            $Participation = $null
        } else {
            $Participation = $JsonParameters.PSobject.Properties["participation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mechanics"))) { #optional property not found
            $Mechanics = $null
        } else {
            $Mechanics = $JsonParameters.PSobject.Properties["mechanics"].value
        }

        $PSO = [PSCustomObject]@{
            "participation" = ${Participation}
            "mechanics" = ${Mechanics}
        }

        return $PSO
    }

}

