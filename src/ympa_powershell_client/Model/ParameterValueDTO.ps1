#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 

.PARAMETER ParameterId
Идентификатор характеристики.
.PARAMETER UnitId
Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
.PARAMETER ValueId
Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. 
.PARAMETER Value
Значение.
.OUTPUTS

ParameterValueDTO<PSCustomObject>
#>

function Initialize-ParameterValueDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ParameterId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UnitId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ValueId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ParameterValueDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ParameterId) {
            throw "invalid value for 'ParameterId', 'ParameterId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "parameterId" = ${ParameterId}
            "unitId" = ${UnitId}
            "valueId" = ${ValueId}
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ParameterValueDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ParameterValueDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ParameterValueDTO<PSCustomObject>
#>
function ConvertFrom-JsonToParameterValueDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ParameterValueDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ParameterValueDTO
        $AllProperties = ("parameterId", "unitId", "valueId", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'parameterId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameterId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameterId' missing."
        } else {
            $ParameterId = $JsonParameters.PSobject.Properties["parameterId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitId"))) { #optional property not found
            $UnitId = $null
        } else {
            $UnitId = $JsonParameters.PSobject.Properties["unitId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "valueId"))) { #optional property not found
            $ValueId = $null
        } else {
            $ValueId = $JsonParameters.PSobject.Properties["valueId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "parameterId" = ${ParameterId}
            "unitId" = ${UnitId}
            "valueId" = ${ValueId}
            "value" = ${Value}
        }

        return $PSO
    }

}

