#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о своем регионе магазина.

.PARAMETER Id
Идентификатор региона.
.PARAMETER Name
Название региона.
.PARAMETER Type
No description available.
.PARAMETER DeliveryOptionsSource
No description available.
.PARAMETER Delivery
No description available.
.OUTPUTS

CampaignSettingsLocalRegionDTO<PSCustomObject>
#>

function Initialize-CampaignSettingsLocalRegionDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("OTHER", "CONTINENT", "REGION", "COUNTRY", "COUNTRY_DISTRICT", "REPUBLIC", "CITY", "VILLAGE", "CITY_DISTRICT", "SUBWAY_STATION", "REPUBLIC_AREA")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("WEB", "YML")]
        [PSCustomObject]
        ${DeliveryOptionsSource},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Delivery}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CampaignSettingsLocalRegionDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "deliveryOptionsSource" = ${DeliveryOptionsSource}
            "delivery" = ${Delivery}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CampaignSettingsLocalRegionDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CampaignSettingsLocalRegionDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CampaignSettingsLocalRegionDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCampaignSettingsLocalRegionDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CampaignSettingsLocalRegionDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CampaignSettingsLocalRegionDTO
        $AllProperties = ("id", "name", "type", "deliveryOptionsSource", "delivery")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryOptionsSource"))) { #optional property not found
            $DeliveryOptionsSource = $null
        } else {
            $DeliveryOptionsSource = $JsonParameters.PSobject.Properties["deliveryOptionsSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delivery"))) { #optional property not found
            $Delivery = $null
        } else {
            $Delivery = $JsonParameters.PSobject.Properties["delivery"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "deliveryOptionsSource" = ${DeliveryOptionsSource}
            "delivery" = ${Delivery}
        }

        return $PSO
    }

}

