#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Характеристика товара.

.PARAMETER Id
Идентификатор характеристики.
.PARAMETER Name
Название характеристики.
.PARAMETER Type
No description available.
.PARAMETER Unit
No description available.
.PARAMETER Description
Описание характеристики.
.PARAMETER RecommendationTypes
Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
.PARAMETER Required
Обязательность характеристики.
.PARAMETER Filtering
Используется ли характеристика в фильтре.
.PARAMETER Distinctive
Является ли характеристика особенностью варианта.
.PARAMETER Multivalue
Можно ли передать сразу несколько значений.
.PARAMETER AllowCustomValues
Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
.PARAMETER Values
Список допустимых значений параметра. Только для характеристик типа `ENUM`.
.PARAMETER Constraints
No description available.
.PARAMETER ValueRestrictions
Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
.OUTPUTS

CategoryParameterDTO<PSCustomObject>
#>

function Initialize-CategoryParameterDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TEXT", "ENUM", "BOOLEAN", "NUMERIC")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Unit},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RecommendationTypes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Required},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Filtering},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Distinctive},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Multivalue},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${AllowCustomValues},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Values},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Constraints},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ValueRestrictions}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CategoryParameterDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Required) {
            throw "invalid value for 'Required', 'Required' cannot be null."
        }

        if ($null -eq $Filtering) {
            throw "invalid value for 'Filtering', 'Filtering' cannot be null."
        }

        if ($null -eq $Distinctive) {
            throw "invalid value for 'Distinctive', 'Distinctive' cannot be null."
        }

        if ($null -eq $Multivalue) {
            throw "invalid value for 'Multivalue', 'Multivalue' cannot be null."
        }

        if ($null -eq $AllowCustomValues) {
            throw "invalid value for 'AllowCustomValues', 'AllowCustomValues' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "unit" = ${Unit}
            "description" = ${Description}
            "recommendationTypes" = ${RecommendationTypes}
            "required" = ${Required}
            "filtering" = ${Filtering}
            "distinctive" = ${Distinctive}
            "multivalue" = ${Multivalue}
            "allowCustomValues" = ${AllowCustomValues}
            "values" = ${Values}
            "constraints" = ${Constraints}
            "valueRestrictions" = ${ValueRestrictions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CategoryParameterDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CategoryParameterDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CategoryParameterDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCategoryParameterDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CategoryParameterDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CategoryParameterDTO
        $AllProperties = ("id", "name", "type", "unit", "description", "recommendationTypes", "required", "filtering", "distinctive", "multivalue", "allowCustomValues", "values", "constraints", "valueRestrictions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required"))) {
            throw "Error! JSON cannot be serialized due to the required property 'required' missing."
        } else {
            $Required = $JsonParameters.PSobject.Properties["required"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filtering"))) {
            throw "Error! JSON cannot be serialized due to the required property 'filtering' missing."
        } else {
            $Filtering = $JsonParameters.PSobject.Properties["filtering"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "distinctive"))) {
            throw "Error! JSON cannot be serialized due to the required property 'distinctive' missing."
        } else {
            $Distinctive = $JsonParameters.PSobject.Properties["distinctive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multivalue"))) {
            throw "Error! JSON cannot be serialized due to the required property 'multivalue' missing."
        } else {
            $Multivalue = $JsonParameters.PSobject.Properties["multivalue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowCustomValues"))) {
            throw "Error! JSON cannot be serialized due to the required property 'allowCustomValues' missing."
        } else {
            $AllowCustomValues = $JsonParameters.PSobject.Properties["allowCustomValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit"))) { #optional property not found
            $Unit = $null
        } else {
            $Unit = $JsonParameters.PSobject.Properties["unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendationTypes"))) { #optional property not found
            $RecommendationTypes = $null
        } else {
            $RecommendationTypes = $JsonParameters.PSobject.Properties["recommendationTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) { #optional property not found
            $Values = $null
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "constraints"))) { #optional property not found
            $Constraints = $null
        } else {
            $Constraints = $JsonParameters.PSobject.Properties["constraints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "valueRestrictions"))) { #optional property not found
            $ValueRestrictions = $null
        } else {
            $ValueRestrictions = $JsonParameters.PSobject.Properties["valueRestrictions"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "type" = ${Type}
            "unit" = ${Unit}
            "description" = ${Description}
            "recommendationTypes" = ${RecommendationTypes}
            "required" = ${Required}
            "filtering" = ${Filtering}
            "distinctive" = ${Distinctive}
            "multivalue" = ${Multivalue}
            "allowCustomValues" = ${AllowCustomValues}
            "values" = ${Values}
            "constraints" = ${Constraints}
            "valueRestrictions" = ${ValueRestrictions}
        }

        return $PSO
    }

}

