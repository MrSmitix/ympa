#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Возврат заказа.

.PARAMETER Id
Идентификатор возврата.
.PARAMETER OrderId
Номер заказа.
.PARAMETER CreationDate
Дата создания возврата клиентом.
.PARAMETER UpdateDate
Дата обновления возврата.
.PARAMETER RefundStatus
No description available.
.PARAMETER LogisticPickupPoint
No description available.
.PARAMETER ShipmentRecipientType
No description available.
.PARAMETER ShipmentStatus
No description available.
.PARAMETER RefundAmount
Сумма возврата.
.PARAMETER Items
Список товаров в возврате.
.PARAMETER ReturnType
No description available.
.PARAMETER FastReturn
Используется ли опция **Быстрый возврат денег за дешевый брак**. 
.OUTPUTS

ReturnDTO<PSCustomObject>
#>

function Initialize-ReturnDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${OrderId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreationDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdateDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("STARTED_BY_USER", "REFUND_IN_PROGRESS", "REFUNDED", "FAILED", "WAITING_FOR_DECISION", "DECISION_MADE", "REFUNDED_WITH_BONUSES", "REFUNDED_BY_SHOP", "CANCELLED", "COMPLETE_WITHOUT_REFUND", "UNKNOWN")]
        [PSCustomObject]
        ${RefundStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LogisticPickupPoint},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SHOP", "DELIVERY_SERVICE", "POST")]
        [PSCustomObject]
        ${ShipmentRecipientType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREATED", "RECEIVED", "IN_TRANSIT", "READY_FOR_PICKUP", "PICKED", "LOST", "EXPIRED", "CANCELLED", "FULFILMENT_RECEIVED", "PREPARED_FOR_UTILIZATION", "NOT_IN_DEMAND", "UTILIZED", "READY_FOR_EXPROPRIATION", "RECEIVED_FOR_EXPROPRIATION")]
        [PSCustomObject]
        ${ShipmentStatus},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefundAmount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Items},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("UNREDEEMED", "RETURN")]
        [PSCustomObject]
        ${ReturnType},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${FastReturn}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ReturnDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Items) {
            throw "invalid value for 'Items', 'Items' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "orderId" = ${OrderId}
            "creationDate" = ${CreationDate}
            "updateDate" = ${UpdateDate}
            "refundStatus" = ${RefundStatus}
            "logisticPickupPoint" = ${LogisticPickupPoint}
            "shipmentRecipientType" = ${ShipmentRecipientType}
            "shipmentStatus" = ${ShipmentStatus}
            "refundAmount" = ${RefundAmount}
            "items" = ${Items}
            "returnType" = ${ReturnType}
            "fastReturn" = ${FastReturn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReturnDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReturnDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReturnDTO<PSCustomObject>
#>
function ConvertFrom-JsonToReturnDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ReturnDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReturnDTO
        $AllProperties = ("id", "orderId", "creationDate", "updateDate", "refundStatus", "logisticPickupPoint", "shipmentRecipientType", "shipmentStatus", "refundAmount", "items", "returnType", "fastReturn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'items' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) {
            throw "Error! JSON cannot be serialized due to the required property 'items' missing."
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderId"))) { #optional property not found
            $OrderId = $null
        } else {
            $OrderId = $JsonParameters.PSobject.Properties["orderId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creationDate"))) { #optional property not found
            $CreationDate = $null
        } else {
            $CreationDate = $JsonParameters.PSobject.Properties["creationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateDate"))) { #optional property not found
            $UpdateDate = $null
        } else {
            $UpdateDate = $JsonParameters.PSobject.Properties["updateDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refundStatus"))) { #optional property not found
            $RefundStatus = $null
        } else {
            $RefundStatus = $JsonParameters.PSobject.Properties["refundStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logisticPickupPoint"))) { #optional property not found
            $LogisticPickupPoint = $null
        } else {
            $LogisticPickupPoint = $JsonParameters.PSobject.Properties["logisticPickupPoint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentRecipientType"))) { #optional property not found
            $ShipmentRecipientType = $null
        } else {
            $ShipmentRecipientType = $JsonParameters.PSobject.Properties["shipmentRecipientType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentStatus"))) { #optional property not found
            $ShipmentStatus = $null
        } else {
            $ShipmentStatus = $JsonParameters.PSobject.Properties["shipmentStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refundAmount"))) { #optional property not found
            $RefundAmount = $null
        } else {
            $RefundAmount = $JsonParameters.PSobject.Properties["refundAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "returnType"))) { #optional property not found
            $ReturnType = $null
        } else {
            $ReturnType = $JsonParameters.PSobject.Properties["returnType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fastReturn"))) { #optional property not found
            $FastReturn = $null
        } else {
            $FastReturn = $JsonParameters.PSobject.Properties["fastReturn"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "orderId" = ${OrderId}
            "creationDate" = ${CreationDate}
            "updateDate" = ${UpdateDate}
            "refundStatus" = ${RefundStatus}
            "logisticPickupPoint" = ${LogisticPickupPoint}
            "shipmentRecipientType" = ${ShipmentRecipientType}
            "shipmentStatus" = ${ShipmentStatus}
            "refundAmount" = ${RefundAmount}
            "items" = ${Items}
            "returnType" = ${ReturnType}
            "fastReturn" = ${FastReturn}
        }

        return $PSO
    }

}

