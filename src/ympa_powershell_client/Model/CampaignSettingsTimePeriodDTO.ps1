#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Период, за который рассчитывается итоговый список нерабочих дней службы доставки.

.PARAMETER FromDate
Формат даты: `ДД-ММ-ГГГГ`. 
.PARAMETER ToDate
Формат даты: `ДД-ММ-ГГГГ`. 
.OUTPUTS

CampaignSettingsTimePeriodDTO<PSCustomObject>
#>

function Initialize-CampaignSettingsTimePeriodDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FromDate},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ToDate}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CampaignSettingsTimePeriodDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fromDate" = ${FromDate}
            "toDate" = ${ToDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CampaignSettingsTimePeriodDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CampaignSettingsTimePeriodDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CampaignSettingsTimePeriodDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCampaignSettingsTimePeriodDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CampaignSettingsTimePeriodDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CampaignSettingsTimePeriodDTO
        $AllProperties = ("fromDate", "toDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fromDate"))) { #optional property not found
            $FromDate = $null
        } else {
            $FromDate = $JsonParameters.PSobject.Properties["fromDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toDate"))) { #optional property not found
            $ToDate = $null
        } else {
            $ToDate = $JsonParameters.PSobject.Properties["toDate"].value
        }

        $PSO = [PSCustomObject]@{
            "fromDate" = ${FromDate}
            "toDate" = ${ToDate}
        }

        return $PSO
    }

}

