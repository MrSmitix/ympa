#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Запрос информации по индексу качества.

.PARAMETER DateFrom
Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. 
.PARAMETER DateTo
Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. 
.PARAMETER CampaignIds
Список идентификаторов магазинов.
.OUTPUTS

GetQualityRatingRequest<PSCustomObject>
#>

function Initialize-GetQualityRatingRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateFrom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTo},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${CampaignIds}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetQualityRatingRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CampaignIds) {
            throw "invalid value for 'CampaignIds', 'CampaignIds' cannot be null."
        }

        if ($CampaignIds.length -gt 50) {
            throw "invalid value for 'CampaignIds', number of items must be less than or equal to 50."
        }

        if ($CampaignIds.length -lt 1) {
            throw "invalid value for 'CampaignIds', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "campaignIds" = ${CampaignIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetQualityRatingRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetQualityRatingRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetQualityRatingRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetQualityRatingRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetQualityRatingRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetQualityRatingRequest
        $AllProperties = ("dateFrom", "dateTo", "campaignIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'campaignIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaignIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'campaignIds' missing."
        } else {
            $CampaignIds = $JsonParameters.PSobject.Properties["campaignIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFrom"))) { #optional property not found
            $DateFrom = $null
        } else {
            $DateFrom = $JsonParameters.PSobject.Properties["dateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTo"))) { #optional property not found
            $DateTo = $null
        } else {
            $DateTo = $JsonParameters.PSobject.Properties["dateTo"].value
        }

        $PSO = [PSCustomObject]@{
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "campaignIds" = ${CampaignIds}
        }

        return $PSO
    }

}

