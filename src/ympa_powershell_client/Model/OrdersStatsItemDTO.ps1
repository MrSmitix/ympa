#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`). 

.PARAMETER OfferName
Название товара.
.PARAMETER MarketSku
SKU на Маркете.
.PARAMETER ShopSku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Count
Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
.PARAMETER Prices
Цена или скидки на товар.
.PARAMETER Warehouse
No description available.
.PARAMETER Details
Информация об удалении товара из заказа.
.PARAMETER CisList
Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
.PARAMETER InitialCount
Первоначальное количество единиц товара.
.PARAMETER BidFee
Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
.PARAMETER CofinanceThreshold
Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
.PARAMETER CofinanceValue
Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
.OUTPUTS

OrdersStatsItemDTO<PSCustomObject>
#>

function Initialize-OrdersStatsItemDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OfferName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketSku},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${ShopSku},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Prices},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Warehouse},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Details},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CisList},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${InitialCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BidFee},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CofinanceThreshold},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${CofinanceValue}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrdersStatsItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ShopSku -and $ShopSku.length -gt 255) {
            throw "invalid value for 'ShopSku', the character length must be smaller than or equal to 255."
        }

        if (!$ShopSku -and $ShopSku.length -lt 1) {
            throw "invalid value for 'ShopSku', the character length must be great than or equal to 1."
        }

        if ($BidFee -and $BidFee -gt 10000) {
          throw "invalid value for 'BidFee', must be smaller than or equal to 10000."
        }

        if ($BidFee -and $BidFee -lt 0) {
          throw "invalid value for 'BidFee', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "offerName" = ${OfferName}
            "marketSku" = ${MarketSku}
            "shopSku" = ${ShopSku}
            "count" = ${Count}
            "prices" = ${Prices}
            "warehouse" = ${Warehouse}
            "details" = ${Details}
            "cisList" = ${CisList}
            "initialCount" = ${InitialCount}
            "bidFee" = ${BidFee}
            "cofinanceThreshold" = ${CofinanceThreshold}
            "cofinanceValue" = ${CofinanceValue}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrdersStatsItemDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrdersStatsItemDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrdersStatsItemDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrdersStatsItemDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrdersStatsItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrdersStatsItemDTO
        $AllProperties = ("offerName", "marketSku", "shopSku", "count", "prices", "warehouse", "details", "cisList", "initialCount", "bidFee", "cofinanceThreshold", "cofinanceValue")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerName"))) { #optional property not found
            $OfferName = $null
        } else {
            $OfferName = $JsonParameters.PSobject.Properties["offerName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketSku"))) { #optional property not found
            $MarketSku = $null
        } else {
            $MarketSku = $JsonParameters.PSobject.Properties["marketSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopSku"))) { #optional property not found
            $ShopSku = $null
        } else {
            $ShopSku = $JsonParameters.PSobject.Properties["shopSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prices"))) { #optional property not found
            $Prices = $null
        } else {
            $Prices = $JsonParameters.PSobject.Properties["prices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warehouse"))) { #optional property not found
            $Warehouse = $null
        } else {
            $Warehouse = $JsonParameters.PSobject.Properties["warehouse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "details"))) { #optional property not found
            $Details = $null
        } else {
            $Details = $JsonParameters.PSobject.Properties["details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cisList"))) { #optional property not found
            $CisList = $null
        } else {
            $CisList = $JsonParameters.PSobject.Properties["cisList"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initialCount"))) { #optional property not found
            $InitialCount = $null
        } else {
            $InitialCount = $JsonParameters.PSobject.Properties["initialCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bidFee"))) { #optional property not found
            $BidFee = $null
        } else {
            $BidFee = $JsonParameters.PSobject.Properties["bidFee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cofinanceThreshold"))) { #optional property not found
            $CofinanceThreshold = $null
        } else {
            $CofinanceThreshold = $JsonParameters.PSobject.Properties["cofinanceThreshold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cofinanceValue"))) { #optional property not found
            $CofinanceValue = $null
        } else {
            $CofinanceValue = $JsonParameters.PSobject.Properties["cofinanceValue"].value
        }

        $PSO = [PSCustomObject]@{
            "offerName" = ${OfferName}
            "marketSku" = ${MarketSku}
            "shopSku" = ${ShopSku}
            "count" = ${Count}
            "prices" = ${Prices}
            "warehouse" = ${Warehouse}
            "details" = ${Details}
            "cisList" = ${CisList}
            "initialCount" = ${InitialCount}
            "bidFee" = ${BidFee}
            "cofinanceThreshold" = ${CofinanceThreshold}
            "cofinanceValue" = ${CofinanceValue}
        }

        return $PSO
    }

}

