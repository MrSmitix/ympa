#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товаре.

.PARAMETER OfferId
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Name
Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
.PARAMETER Category
Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
.PARAMETER Vendor
Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
.PARAMETER Barcodes
Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
.PARAMETER Description
Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \<h>, \<h1>, \<h2> и так далее — для заголовков; * \<br> и \<p> — для переноса строки; * \<ol> — для нумерованного списка; * \<ul> — для маркированного списка; * \<li> — для создания элементов списка (должен находиться внутри \<ol> или \<ul>); * \<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
.PARAMETER VendorCode
Артикул товара от производителя.
.PARAMETER BasicPrice
No description available.
.OUTPUTS

SuggestedOfferDTO<PSCustomObject>
#>

function Initialize-SuggestedOfferDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${OfferId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Barcodes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BasicPrice}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => SuggestedOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$OfferId -and $OfferId.length -gt 255) {
            throw "invalid value for 'OfferId', the character length must be smaller than or equal to 255."
        }

        if (!$OfferId -and $OfferId.length -lt 1) {
            throw "invalid value for 'OfferId', the character length must be great than or equal to 1."
        }

        if (!$Name -and $Name.length -gt 256) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 256."
        }

        if (!$Description -and $Description.length -gt 6000) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 6000."
        }


        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "name" = ${Name}
            "category" = ${Category}
            "vendor" = ${Vendor}
            "barcodes" = ${Barcodes}
            "description" = ${Description}
            "vendorCode" = ${VendorCode}
            "basicPrice" = ${BasicPrice}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SuggestedOfferDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SuggestedOfferDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SuggestedOfferDTO<PSCustomObject>
#>
function ConvertFrom-JsonToSuggestedOfferDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => SuggestedOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SuggestedOfferDTO
        $AllProperties = ("offerId", "name", "category", "vendor", "barcodes", "description", "vendorCode", "basicPrice")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerId"))) { #optional property not found
            $OfferId = $null
        } else {
            $OfferId = $JsonParameters.PSobject.Properties["offerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "barcodes"))) { #optional property not found
            $Barcodes = $null
        } else {
            $Barcodes = $JsonParameters.PSobject.Properties["barcodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorCode"))) { #optional property not found
            $VendorCode = $null
        } else {
            $VendorCode = $JsonParameters.PSobject.Properties["vendorCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "basicPrice"))) { #optional property not found
            $BasicPrice = $null
        } else {
            $BasicPrice = $JsonParameters.PSobject.Properties["basicPrice"].value
        }

        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "name" = ${Name}
            "category" = ${Category}
            "vendor" = ${Vendor}
            "barcodes" = ${Barcodes}
            "description" = ${Description}
            "vendorCode" = ${VendorCode}
            "basicPrice" = ${BasicPrice}
        }

        return $PSO
    }

}

