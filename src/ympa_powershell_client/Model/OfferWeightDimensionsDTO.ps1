#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png) 

.PARAMETER Length
Длина упаковки в см. 
.PARAMETER Width
Ширина упаковки в см. 
.PARAMETER Height
Высота упаковки в см. 
.PARAMETER Weight
Вес товара в кг с учетом упаковки (брутто). 
.OUTPUTS

OfferWeightDimensionsDTO<PSCustomObject>
#>

function Initialize-OfferWeightDimensionsDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Length},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Width},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Height},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Weight}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OfferWeightDimensionsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Length) {
            throw "invalid value for 'Length', 'Length' cannot be null."
        }

        if ($null -eq $Width) {
            throw "invalid value for 'Width', 'Width' cannot be null."
        }

        if ($null -eq $Height) {
            throw "invalid value for 'Height', 'Height' cannot be null."
        }

        if ($null -eq $Weight) {
            throw "invalid value for 'Weight', 'Weight' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "length" = ${Length}
            "width" = ${Width}
            "height" = ${Height}
            "weight" = ${Weight}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OfferWeightDimensionsDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OfferWeightDimensionsDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OfferWeightDimensionsDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOfferWeightDimensionsDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OfferWeightDimensionsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OfferWeightDimensionsDTO
        $AllProperties = ("length", "width", "height", "weight")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'length' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "length"))) {
            throw "Error! JSON cannot be serialized due to the required property 'length' missing."
        } else {
            $Length = $JsonParameters.PSobject.Properties["length"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "width"))) {
            throw "Error! JSON cannot be serialized due to the required property 'width' missing."
        } else {
            $Width = $JsonParameters.PSobject.Properties["width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "height"))) {
            throw "Error! JSON cannot be serialized due to the required property 'height' missing."
        } else {
            $Height = $JsonParameters.PSobject.Properties["height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) {
            throw "Error! JSON cannot be serialized due to the required property 'weight' missing."
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        $PSO = [PSCustomObject]@{
            "length" = ${Length}
            "width" = ${Width}
            "height" = ${Height}
            "weight" = ${Weight}
        }

        return $PSO
    }

}

