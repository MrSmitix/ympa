#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Фильтры по чатам, которые нужно вернуть. 

.PARAMETER OrderIds
Фильтр по идентификаторам заказов на Маркете.
.PARAMETER Types
Фильтр по типам чатов.
.PARAMETER Statuses
Фильтр по статусам чатов.
.OUTPUTS

GetChatsRequest<PSCustomObject>
#>

function Initialize-GetChatsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${OrderIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Types},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Statuses}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetChatsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$OrderIds -and $OrderIds.length -lt 1) {
            throw "invalid value for 'OrderIds', number of items must be greater than or equal to 1."
        }

        if (!$Types -and $Types.length -lt 1) {
            throw "invalid value for 'Types', number of items must be greater than or equal to 1."
        }

        if (!$Statuses -and $Statuses.length -lt 1) {
            throw "invalid value for 'Statuses', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "orderIds" = ${OrderIds}
            "types" = ${Types}
            "statuses" = ${Statuses}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetChatsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetChatsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetChatsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetChatsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetChatsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetChatsRequest
        $AllProperties = ("orderIds", "types", "statuses")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderIds"))) { #optional property not found
            $OrderIds = $null
        } else {
            $OrderIds = $JsonParameters.PSobject.Properties["orderIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "types"))) { #optional property not found
            $Types = $null
        } else {
            $Types = $JsonParameters.PSobject.Properties["types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        $PSO = [PSCustomObject]@{
            "orderIds" = ${OrderIds}
            "types" = ${Types}
            "statuses" = ${Statuses}
        }

        return $PSO
    }

}

