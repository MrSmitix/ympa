#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Описание пункта вывоза для возврата.

.PARAMETER Id
Идентификатор пункта вывоза.
.PARAMETER Name
Название пункта вывоза.
.PARAMETER Address
No description available.
.PARAMETER Instruction
Дополнительные инструкции к вывозу.
.PARAMETER Type
No description available.
.PARAMETER LogisticPartnerId
Идентификатор логистического партнера, к которому относится логистическая точка.
.OUTPUTS

LogisticPickupPointDTO<PSCustomObject>
#>

function Initialize-LogisticPickupPointDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Address},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instruction},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("WAREHOUSE", "PICKUP_POINT", "PICKUP_TERMINAL", "PICKUP_POST_OFFICE", "PICKUP_MIXED", "PICKUP_RETAIL", "UNKNOWN")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${LogisticPartnerId}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => LogisticPickupPointDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "address" = ${Address}
            "instruction" = ${Instruction}
            "type" = ${Type}
            "logisticPartnerId" = ${LogisticPartnerId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogisticPickupPointDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogisticPickupPointDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogisticPickupPointDTO<PSCustomObject>
#>
function ConvertFrom-JsonToLogisticPickupPointDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => LogisticPickupPointDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LogisticPickupPointDTO
        $AllProperties = ("id", "name", "address", "instruction", "type", "logisticPartnerId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instruction"))) { #optional property not found
            $Instruction = $null
        } else {
            $Instruction = $JsonParameters.PSobject.Properties["instruction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logisticPartnerId"))) { #optional property not found
            $LogisticPartnerId = $null
        } else {
            $LogisticPartnerId = $JsonParameters.PSobject.Properties["logisticPartnerId"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "address" = ${Address}
            "instruction" = ${Instruction}
            "type" = ${Type}
            "logisticPartnerId" = ${LogisticPartnerId}
        }

        return $PSO
    }

}

