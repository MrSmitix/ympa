#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товарах в акции.

.PARAMETER ActiveOffers
Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
.PARAMETER PotentialOffers
Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 
.PARAMETER Processing
Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 
.OUTPUTS

GetPromoAssortmentInfoDTO<PSCustomObject>
#>

function Initialize-GetPromoAssortmentInfoDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ActiveOffers},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PotentialOffers},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Processing}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetPromoAssortmentInfoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ActiveOffers) {
            throw "invalid value for 'ActiveOffers', 'ActiveOffers' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "activeOffers" = ${ActiveOffers}
            "potentialOffers" = ${PotentialOffers}
            "processing" = ${Processing}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetPromoAssortmentInfoDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetPromoAssortmentInfoDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetPromoAssortmentInfoDTO<PSCustomObject>
#>
function ConvertFrom-JsonToGetPromoAssortmentInfoDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetPromoAssortmentInfoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetPromoAssortmentInfoDTO
        $AllProperties = ("activeOffers", "potentialOffers", "processing")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'activeOffers' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeOffers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'activeOffers' missing."
        } else {
            $ActiveOffers = $JsonParameters.PSobject.Properties["activeOffers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "potentialOffers"))) { #optional property not found
            $PotentialOffers = $null
        } else {
            $PotentialOffers = $JsonParameters.PSobject.Properties["potentialOffers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "processing"))) { #optional property not found
            $Processing = $null
        } else {
            $Processing = $JsonParameters.PSobject.Properties["processing"].value
        }

        $PSO = [PSCustomObject]@{
            "activeOffers" = ${ActiveOffers}
            "potentialOffers" = ${PotentialOffers}
            "processing" = ${Processing}
        }

        return $PSO
    }

}

