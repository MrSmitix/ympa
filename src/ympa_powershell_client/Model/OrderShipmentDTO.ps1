#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Список посылок.  В параметре может указываться несколько посылок. 

.PARAMETER Id
Идентификатор посылки, присвоенный Маркетом.
.PARAMETER ShipmentDate
Формат даты: `ДД-ММ-ГГГГ`. 
.PARAMETER ShipmentTime
**Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
.PARAMETER Tracks
**Только для модели DBS**  Информация для отслеживания перемещений посылки. 
.PARAMETER Boxes
Список грузовых мест.
.OUTPUTS

OrderShipmentDTO<PSCustomObject>
#>

function Initialize-OrderShipmentDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShipmentDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShipmentTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tracks},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Boxes}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderShipmentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "shipmentDate" = ${ShipmentDate}
            "shipmentTime" = ${ShipmentTime}
            "tracks" = ${Tracks}
            "boxes" = ${Boxes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderShipmentDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderShipmentDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderShipmentDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderShipmentDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderShipmentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderShipmentDTO
        $AllProperties = ("id", "shipmentDate", "shipmentTime", "tracks", "boxes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentDate"))) { #optional property not found
            $ShipmentDate = $null
        } else {
            $ShipmentDate = $JsonParameters.PSobject.Properties["shipmentDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentTime"))) { #optional property not found
            $ShipmentTime = $null
        } else {
            $ShipmentTime = $JsonParameters.PSobject.Properties["shipmentTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tracks"))) { #optional property not found
            $Tracks = $null
        } else {
            $Tracks = $JsonParameters.PSobject.Properties["tracks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boxes"))) { #optional property not found
            $Boxes = $null
        } else {
            $Boxes = $JsonParameters.PSobject.Properties["boxes"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "shipmentDate" = ${ShipmentDate}
            "shipmentTime" = ${ShipmentTime}
            "tracks" = ${Tracks}
            "boxes" = ${Boxes}
        }

        return $PSO
    }

}

