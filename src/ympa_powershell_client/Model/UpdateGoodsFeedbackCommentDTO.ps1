#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Комментарий к отзыву или другому комментарию.

.PARAMETER Id
Идентификатор комментария к отзыву. 
.PARAMETER ParentId
Идентификатор комментария к отзыву. 
.PARAMETER Text
Текст комментария.
.OUTPUTS

UpdateGoodsFeedbackCommentDTO<PSCustomObject>
#>

function Initialize-UpdateGoodsFeedbackCommentDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ParentId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => UpdateGoodsFeedbackCommentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Text) {
            throw "invalid value for 'Text', 'Text' cannot be null."
        }

        if ($Text.length -gt 4096) {
            throw "invalid value for 'Text', the character length must be smaller than or equal to 4096."
        }

        if ($Text.length -lt 1) {
            throw "invalid value for 'Text', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "parentId" = ${ParentId}
            "text" = ${Text}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateGoodsFeedbackCommentDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateGoodsFeedbackCommentDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateGoodsFeedbackCommentDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateGoodsFeedbackCommentDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => UpdateGoodsFeedbackCommentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateGoodsFeedbackCommentDTO
        $AllProperties = ("id", "parentId", "text")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'text' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) {
            throw "Error! JSON cannot be serialized due to the required property 'text' missing."
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentId"))) { #optional property not found
            $ParentId = $null
        } else {
            $ParentId = $JsonParameters.PSobject.Properties["parentId"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "parentId" = ${ParentId}
            "text" = ${Text}
        }

        return $PSO
    }

}

