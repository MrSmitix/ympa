#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OfferMappings
Перечень товаров, которые нужно добавить или обновить.
.PARAMETER OnlyPartnerMediaContent
Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. 
.OUTPUTS

UpdateOfferMappingsRequest<PSCustomObject>
#>

function Initialize-UpdateOfferMappingsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OfferMappings},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OnlyPartnerMediaContent}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => UpdateOfferMappingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $OfferMappings) {
            throw "invalid value for 'OfferMappings', 'OfferMappings' cannot be null."
        }

        if ($OfferMappings.length -gt 500) {
            throw "invalid value for 'OfferMappings', number of items must be less than or equal to 500."
        }

        if ($OfferMappings.length -lt 1) {
            throw "invalid value for 'OfferMappings', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "offerMappings" = ${OfferMappings}
            "onlyPartnerMediaContent" = ${OnlyPartnerMediaContent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateOfferMappingsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateOfferMappingsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateOfferMappingsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateOfferMappingsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => UpdateOfferMappingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateOfferMappingsRequest
        $AllProperties = ("offerMappings", "onlyPartnerMediaContent")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'offerMappings' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerMappings"))) {
            throw "Error! JSON cannot be serialized due to the required property 'offerMappings' missing."
        } else {
            $OfferMappings = $JsonParameters.PSobject.Properties["offerMappings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onlyPartnerMediaContent"))) { #optional property not found
            $OnlyPartnerMediaContent = $null
        } else {
            $OnlyPartnerMediaContent = $JsonParameters.PSobject.Properties["onlyPartnerMediaContent"].value
        }

        $PSO = [PSCustomObject]@{
            "offerMappings" = ${OfferMappings}
            "onlyPartnerMediaContent" = ${OnlyPartnerMediaContent}
        }

        return $PSO
    }

}

