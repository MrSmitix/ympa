#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товаре.

.PARAMETER ShopSku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER MarketSku
SKU на Маркете.
.PARAMETER Name
Название товара.
.PARAMETER Price
Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
.PARAMETER CategoryId
Идентификатор категории товара на Маркете.
.PARAMETER CategoryName
Название категории товара на Маркете.
.PARAMETER WeightDimensions
No description available.
.PARAMETER Warehouses
Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
.PARAMETER Tariffs
Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
.PARAMETER Pictures
Ссылки (URL) изображений товара в хорошем качестве.
.OUTPUTS

GoodsStatsGoodsDTO<PSCustomObject>
#>

function Initialize-GoodsStatsGoodsDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${ShopSku},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${MarketSku},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CategoryId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CategoryName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WeightDimensions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Warehouses},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tariffs},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Pictures}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GoodsStatsGoodsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ShopSku -and $ShopSku.length -gt 255) {
            throw "invalid value for 'ShopSku', the character length must be smaller than or equal to 255."
        }

        if (!$ShopSku -and $ShopSku.length -lt 1) {
            throw "invalid value for 'ShopSku', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "shopSku" = ${ShopSku}
            "marketSku" = ${MarketSku}
            "name" = ${Name}
            "price" = ${Price}
            "categoryId" = ${CategoryId}
            "categoryName" = ${CategoryName}
            "weightDimensions" = ${WeightDimensions}
            "warehouses" = ${Warehouses}
            "tariffs" = ${Tariffs}
            "pictures" = ${Pictures}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GoodsStatsGoodsDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to GoodsStatsGoodsDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GoodsStatsGoodsDTO<PSCustomObject>
#>
function ConvertFrom-JsonToGoodsStatsGoodsDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GoodsStatsGoodsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GoodsStatsGoodsDTO
        $AllProperties = ("shopSku", "marketSku", "name", "price", "categoryId", "categoryName", "weightDimensions", "warehouses", "tariffs", "pictures")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopSku"))) { #optional property not found
            $ShopSku = $null
        } else {
            $ShopSku = $JsonParameters.PSobject.Properties["shopSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketSku"))) { #optional property not found
            $MarketSku = $null
        } else {
            $MarketSku = $JsonParameters.PSobject.Properties["marketSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryId"))) { #optional property not found
            $CategoryId = $null
        } else {
            $CategoryId = $JsonParameters.PSobject.Properties["categoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryName"))) { #optional property not found
            $CategoryName = $null
        } else {
            $CategoryName = $JsonParameters.PSobject.Properties["categoryName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weightDimensions"))) { #optional property not found
            $WeightDimensions = $null
        } else {
            $WeightDimensions = $JsonParameters.PSobject.Properties["weightDimensions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warehouses"))) { #optional property not found
            $Warehouses = $null
        } else {
            $Warehouses = $JsonParameters.PSobject.Properties["warehouses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tariffs"))) { #optional property not found
            $Tariffs = $null
        } else {
            $Tariffs = $JsonParameters.PSobject.Properties["tariffs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pictures"))) { #optional property not found
            $Pictures = $null
        } else {
            $Pictures = $JsonParameters.PSobject.Properties["pictures"].value
        }

        $PSO = [PSCustomObject]@{
            "shopSku" = ${ShopSku}
            "marketSku" = ${MarketSku}
            "name" = ${Name}
            "price" = ${Price}
            "categoryId" = ${CategoryId}
            "categoryName" = ${CategoryName}
            "weightDimensions" = ${WeightDimensions}
            "warehouses" = ${Warehouses}
            "tariffs" = ${Tariffs}
            "pictures" = ${Pictures}
        }

        return $PSO
    }

}

