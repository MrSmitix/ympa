#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.

.PARAMETER Type
No description available.
.PARAMETER Discount
Размер пользовательской скидки в валюте покупателя. 
.PARAMETER Subsidy
Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
.PARAMETER ShopPromoId
Идентификатор акции поставщика. 
.PARAMETER MarketPromoId
Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. 
.OUTPUTS

OrderItemPromoDTO<PSCustomObject>
#>

function Initialize-OrderItemPromoDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DIRECT_DISCOUNT", "BLUE_SET", "BLUE_FLASH", "GENERIC_BUNDLE", "MARKET_COUPON", "MARKET_PROMOCODE", "MARKET_DEAL", "MARKET_BLUE", "MARKET_PRIME", "YANDEX_PLUS", "BERU_PLUS", "MARKET_COIN", "YANDEX_EMPLOYEE", "LIMITED_FREE_DELIVERY_PROMO", "FREE_DELIVERY_THRESHOLD", "MULTICART_DISCOUNT", "PRICE_DROP_AS_YOU_SHOP", "FREE_DELIVERY_FOR_LDI", "FREE_DELIVERY_FOR_LSC", "SECRET_SALE", "FREE_PICKUP", "CHEAPEST_AS_GIFT", "CASHBACK", "SUPPLIER_MULTICART_DISCOUNT", "SPREAD_DISCOUNT_COUNT", "SPREAD_DISCOUNT_RECEIPT", "ANNOUNCEMENT_PROMO", "DISCOUNT_BY_PAYMENT_TYPE", "PERCENT_DISCOUNT", "DCO_EXTRA_DISCOUNT", "EMPTY_PROMO", "BLOCKING_PROMO", "UNKNOWN")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Discount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Subsidy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShopPromoId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketPromoId}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderItemPromoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "discount" = ${Discount}
            "subsidy" = ${Subsidy}
            "shopPromoId" = ${ShopPromoId}
            "marketPromoId" = ${MarketPromoId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderItemPromoDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderItemPromoDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderItemPromoDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderItemPromoDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderItemPromoDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderItemPromoDTO
        $AllProperties = ("type", "discount", "subsidy", "shopPromoId", "marketPromoId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discount"))) { #optional property not found
            $Discount = $null
        } else {
            $Discount = $JsonParameters.PSobject.Properties["discount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsidy"))) { #optional property not found
            $Subsidy = $null
        } else {
            $Subsidy = $JsonParameters.PSobject.Properties["subsidy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopPromoId"))) { #optional property not found
            $ShopPromoId = $null
        } else {
            $ShopPromoId = $JsonParameters.PSobject.Properties["shopPromoId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketPromoId"))) { #optional property not found
            $MarketPromoId = $null
        } else {
            $MarketPromoId = $JsonParameters.PSobject.Properties["marketPromoId"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "discount" = ${Discount}
            "subsidy" = ${Subsidy}
            "shopPromoId" = ${ShopPromoId}
            "marketPromoId" = ${MarketPromoId}
        }

        return $PSO
    }

}

