#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о прайс-листе.

.PARAMETER Id
Идентификатор прайс-листа.
.PARAMETER Login
Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
.PARAMETER Name
Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
.PARAMETER Password
Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
.PARAMETER UploadDate
Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
.PARAMETER Url
URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
.PARAMETER Content
No description available.
.PARAMETER Download
No description available.
.PARAMETER Placement
No description available.
.PARAMETER Publication
No description available.
.OUTPUTS

FeedDTO<PSCustomObject>
#>

function Initialize-FeedDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Login},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UploadDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Content},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Download},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Placement},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Publication}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FeedDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "login" = ${Login}
            "name" = ${Name}
            "password" = ${Password}
            "uploadDate" = ${UploadDate}
            "url" = ${Url}
            "content" = ${Content}
            "download" = ${Download}
            "placement" = ${Placement}
            "publication" = ${Publication}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FeedDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FeedDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FeedDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFeedDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FeedDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FeedDTO
        $AllProperties = ("id", "login", "name", "password", "uploadDate", "url", "content", "download", "placement", "publication")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "login"))) { #optional property not found
            $Login = $null
        } else {
            $Login = $JsonParameters.PSobject.Properties["login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uploadDate"))) { #optional property not found
            $UploadDate = $null
        } else {
            $UploadDate = $JsonParameters.PSobject.Properties["uploadDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "download"))) { #optional property not found
            $Download = $null
        } else {
            $Download = $JsonParameters.PSobject.Properties["download"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement"))) { #optional property not found
            $Placement = $null
        } else {
            $Placement = $JsonParameters.PSobject.Properties["placement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publication"))) { #optional property not found
            $Publication = $null
        } else {
            $Publication = $JsonParameters.PSobject.Properties["publication"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "login" = ${Login}
            "name" = ${Name}
            "password" = ${Password}
            "uploadDate" = ${UploadDate}
            "url" = ${Url}
            "content" = ${Content}
            "download" = ${Download}
            "placement" = ${Placement}
            "publication" = ${Publication}
        }

        return $PSO
    }

}

