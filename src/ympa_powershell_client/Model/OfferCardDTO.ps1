#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о состоянии карточки товара.  Если поле `mapping` отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 

.PARAMETER OfferId
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Mapping
No description available.
.PARAMETER ParameterValues
Список характеристик с их значениями. 
.PARAMETER CardStatus
No description available.
.PARAMETER ContentRating
Процент заполненности карточки.
.PARAMETER Recommendations
Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
.PARAMETER Errors
Ошибки в контенте, препятствующие размещению товара на витрине.
.PARAMETER Warnings
Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
.OUTPUTS

OfferCardDTO<PSCustomObject>
#>

function Initialize-OfferCardDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${OfferId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Mapping},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ParameterValues},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("HAS_CARD_CAN_NOT_UPDATE", "HAS_CARD_CAN_UPDATE", "HAS_CARD_CAN_UPDATE_ERRORS", "HAS_CARD_CAN_UPDATE_PROCESSING", "NO_CARD_NEED_CONTENT", "NO_CARD_MARKET_WILL_CREATE", "NO_CARD_ERRORS", "NO_CARD_PROCESSING", "NO_CARD_ADD_TO_CAMPAIGN")]
        [PSCustomObject]
        ${CardStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ContentRating},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Recommendations},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Warnings}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OfferCardDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $OfferId) {
            throw "invalid value for 'OfferId', 'OfferId' cannot be null."
        }

        if ($OfferId.length -gt 255) {
            throw "invalid value for 'OfferId', the character length must be smaller than or equal to 255."
        }

        if ($OfferId.length -lt 1) {
            throw "invalid value for 'OfferId', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "mapping" = ${Mapping}
            "parameterValues" = ${ParameterValues}
            "cardStatus" = ${CardStatus}
            "contentRating" = ${ContentRating}
            "recommendations" = ${Recommendations}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OfferCardDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OfferCardDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OfferCardDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOfferCardDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OfferCardDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OfferCardDTO
        $AllProperties = ("offerId", "mapping", "parameterValues", "cardStatus", "contentRating", "recommendations", "errors", "warnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'offerId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'offerId' missing."
        } else {
            $OfferId = $JsonParameters.PSobject.Properties["offerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mapping"))) { #optional property not found
            $Mapping = $null
        } else {
            $Mapping = $JsonParameters.PSobject.Properties["mapping"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameterValues"))) { #optional property not found
            $ParameterValues = $null
        } else {
            $ParameterValues = $JsonParameters.PSobject.Properties["parameterValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cardStatus"))) { #optional property not found
            $CardStatus = $null
        } else {
            $CardStatus = $JsonParameters.PSobject.Properties["cardStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentRating"))) { #optional property not found
            $ContentRating = $null
        } else {
            $ContentRating = $JsonParameters.PSobject.Properties["contentRating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommendations"))) { #optional property not found
            $Recommendations = $null
        } else {
            $Recommendations = $JsonParameters.PSobject.Properties["recommendations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnings"))) { #optional property not found
            $Warnings = $null
        } else {
            $Warnings = $JsonParameters.PSobject.Properties["warnings"].value
        }

        $PSO = [PSCustomObject]@{
            "offerId" = ${OfferId}
            "mapping" = ${Mapping}
            "parameterValues" = ${ParameterValues}
            "cardStatus" = ${CardStatus}
            "contentRating" = ${ContentRating}
            "recommendations" = ${Recommendations}
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }

        return $PSO
    }

}

