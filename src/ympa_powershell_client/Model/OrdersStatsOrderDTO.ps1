#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о заказе.

.PARAMETER Id
Идентификатор заказа.
.PARAMETER CreationDate
Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
.PARAMETER StatusUpdateDate
Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
.PARAMETER Status
No description available.
.PARAMETER PartnerOrderId
Идентификатор заказа в информационной системе магазина.
.PARAMETER PaymentType
No description available.
.PARAMETER Fake
Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
.PARAMETER DeliveryRegion
No description available.
.PARAMETER Items
Список товаров в заказе после возможных изменений.
.PARAMETER InitialItems
Список товаров в заказе до изменений.
.PARAMETER Payments
Информация о денежных переводах по заказу.
.PARAMETER Commissions
Информация о комиссиях за заказ.
.OUTPUTS

OrdersStatsOrderDTO<PSCustomObject>
#>

function Initialize-OrdersStatsOrderDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreationDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StatusUpdateDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CANCELLED_BEFORE_PROCESSING", "CANCELLED_IN_DELIVERY", "CANCELLED_IN_PROCESSING", "DELIVERY", "DELIVERED", "PARTIALLY_DELIVERED", "PARTIALLY_RETURNED", "PENDING", "PICKUP", "PROCESSING", "RESERVED", "RETURNED", "UNKNOWN", "UNPAID", "LOST")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartnerOrderId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREDIT", "POSTPAID", "PREPAID", "TINKOFF_CREDIT")]
        [PSCustomObject]
        ${PaymentType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Fake},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeliveryRegion},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Items},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${InitialItems},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Payments},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Commissions}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrdersStatsOrderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Items) {
            throw "invalid value for 'Items', 'Items' cannot be null."
        }

        if ($null -eq $Payments) {
            throw "invalid value for 'Payments', 'Payments' cannot be null."
        }

        if ($null -eq $Commissions) {
            throw "invalid value for 'Commissions', 'Commissions' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "creationDate" = ${CreationDate}
            "statusUpdateDate" = ${StatusUpdateDate}
            "status" = ${Status}
            "partnerOrderId" = ${PartnerOrderId}
            "paymentType" = ${PaymentType}
            "fake" = ${Fake}
            "deliveryRegion" = ${DeliveryRegion}
            "items" = ${Items}
            "initialItems" = ${InitialItems}
            "payments" = ${Payments}
            "commissions" = ${Commissions}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrdersStatsOrderDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrdersStatsOrderDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrdersStatsOrderDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrdersStatsOrderDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrdersStatsOrderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrdersStatsOrderDTO
        $AllProperties = ("id", "creationDate", "statusUpdateDate", "status", "partnerOrderId", "paymentType", "fake", "deliveryRegion", "items", "initialItems", "payments", "commissions")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'items' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) {
            throw "Error! JSON cannot be serialized due to the required property 'items' missing."
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "payments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'payments' missing."
        } else {
            $Payments = $JsonParameters.PSobject.Properties["payments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commissions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'commissions' missing."
        } else {
            $Commissions = $JsonParameters.PSobject.Properties["commissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creationDate"))) { #optional property not found
            $CreationDate = $null
        } else {
            $CreationDate = $JsonParameters.PSobject.Properties["creationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusUpdateDate"))) { #optional property not found
            $StatusUpdateDate = $null
        } else {
            $StatusUpdateDate = $JsonParameters.PSobject.Properties["statusUpdateDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerOrderId"))) { #optional property not found
            $PartnerOrderId = $null
        } else {
            $PartnerOrderId = $JsonParameters.PSobject.Properties["partnerOrderId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentType"))) { #optional property not found
            $PaymentType = $null
        } else {
            $PaymentType = $JsonParameters.PSobject.Properties["paymentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fake"))) { #optional property not found
            $Fake = $null
        } else {
            $Fake = $JsonParameters.PSobject.Properties["fake"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryRegion"))) { #optional property not found
            $DeliveryRegion = $null
        } else {
            $DeliveryRegion = $JsonParameters.PSobject.Properties["deliveryRegion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initialItems"))) { #optional property not found
            $InitialItems = $null
        } else {
            $InitialItems = $JsonParameters.PSobject.Properties["initialItems"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "creationDate" = ${CreationDate}
            "statusUpdateDate" = ${StatusUpdateDate}
            "status" = ${Status}
            "partnerOrderId" = ${PartnerOrderId}
            "paymentType" = ${PaymentType}
            "fake" = ${Fake}
            "deliveryRegion" = ${DeliveryRegion}
            "items" = ${Items}
            "initialItems" = ${InitialItems}
            "payments" = ${Payments}
            "commissions" = ${Commissions}
        }

        return $PSO
    }

}

