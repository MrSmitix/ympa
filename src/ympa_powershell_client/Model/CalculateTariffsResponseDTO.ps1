#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Расчет стоимости услуг.

.PARAMETER Offers
Стоимость услуг.
.OUTPUTS

CalculateTariffsResponseDTO<PSCustomObject>
#>

function Initialize-CalculateTariffsResponseDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Offers}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CalculateTariffsResponseDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Offers) {
            throw "invalid value for 'Offers', 'Offers' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "offers" = ${Offers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CalculateTariffsResponseDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CalculateTariffsResponseDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CalculateTariffsResponseDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCalculateTariffsResponseDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CalculateTariffsResponseDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CalculateTariffsResponseDTO
        $AllProperties = ("offers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'offers' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'offers' missing."
        } else {
            $Offers = $JsonParameters.PSobject.Properties["offers"].value
        }

        $PSO = [PSCustomObject]@{
            "offers" = ${Offers}
        }

        return $PSO
    }

}

