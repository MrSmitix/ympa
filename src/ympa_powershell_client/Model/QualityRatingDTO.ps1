#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об индексе качества.

.PARAMETER Rating
Значение индекса качества.
.PARAMETER CalculationDate
Дата вычисления.  Формат даты: `ГГГГ‑ММ‑ДД`. 
.PARAMETER Components
Составляющие индекса качества.
.OUTPUTS

QualityRatingDTO<PSCustomObject>
#>

function Initialize-QualityRatingDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Rating},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CalculationDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Components}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => QualityRatingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Rating) {
            throw "invalid value for 'Rating', 'Rating' cannot be null."
        }

        if ($Rating -gt 100) {
          throw "invalid value for 'Rating', must be smaller than or equal to 100."
        }

        if ($Rating -lt 0) {
          throw "invalid value for 'Rating', must be greater than or equal to 0."
        }

        if ($null -eq $CalculationDate) {
            throw "invalid value for 'CalculationDate', 'CalculationDate' cannot be null."
        }

        if ($null -eq $Components) {
            throw "invalid value for 'Components', 'Components' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "rating" = ${Rating}
            "calculationDate" = ${CalculationDate}
            "components" = ${Components}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to QualityRatingDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to QualityRatingDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

QualityRatingDTO<PSCustomObject>
#>
function ConvertFrom-JsonToQualityRatingDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => QualityRatingDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in QualityRatingDTO
        $AllProperties = ("rating", "calculationDate", "components")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'rating' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rating"))) {
            throw "Error! JSON cannot be serialized due to the required property 'rating' missing."
        } else {
            $Rating = $JsonParameters.PSobject.Properties["rating"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "calculationDate"))) {
            throw "Error! JSON cannot be serialized due to the required property 'calculationDate' missing."
        } else {
            $CalculationDate = $JsonParameters.PSobject.Properties["calculationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "components"))) {
            throw "Error! JSON cannot be serialized due to the required property 'components' missing."
        } else {
            $Components = $JsonParameters.PSobject.Properties["components"].value
        }

        $PSO = [PSCustomObject]@{
            "rating" = ${Rating}
            "calculationDate" = ${CalculationDate}
            "components" = ${Components}
        }

        return $PSO
    }

}

