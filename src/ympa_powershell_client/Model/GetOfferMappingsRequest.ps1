#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OfferIds
Идентификаторы товаров, информация о которых нужна.  {% note warning ""Такой список возвращается только целиком"" %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте: * `page_token`; * `limit`; * `cardStatuses`; * `categoryIds`; * `vendorNames`; * `tags`; * `archived`.  {% endnote %}    
.PARAMETER CardStatuses
Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
.PARAMETER CategoryIds
Фильтр по категориям на Маркете.
.PARAMETER VendorNames
Фильтр по брендам.
.PARAMETER Tags
Фильтр по тегам.
.PARAMETER Archived
Фильтр по нахождению в архиве.  Передайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве. 
.OUTPUTS

GetOfferMappingsRequest<PSCustomObject>
#>

function Initialize-GetOfferMappingsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${OfferIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CardStatuses},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CategoryIds},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${VendorNames},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Tags},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Archived}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetOfferMappingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$OfferIds -and $OfferIds.length -gt 200) {
            throw "invalid value for 'OfferIds', number of items must be less than or equal to 200."
        }

        if (!$OfferIds -and $OfferIds.length -lt 1) {
            throw "invalid value for 'OfferIds', number of items must be greater than or equal to 1."
        }

        if (!$CardStatuses -and $CardStatuses.length -lt 1) {
            throw "invalid value for 'CardStatuses', number of items must be greater than or equal to 1."
        }

        if (!$CategoryIds -and $CategoryIds.length -lt 1) {
            throw "invalid value for 'CategoryIds', number of items must be greater than or equal to 1."
        }

        if (!$VendorNames -and $VendorNames.length -lt 1) {
            throw "invalid value for 'VendorNames', number of items must be greater than or equal to 1."
        }

        if (!$Tags -and $Tags.length -lt 1) {
            throw "invalid value for 'Tags', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "offerIds" = ${OfferIds}
            "cardStatuses" = ${CardStatuses}
            "categoryIds" = ${CategoryIds}
            "vendorNames" = ${VendorNames}
            "tags" = ${Tags}
            "archived" = ${Archived}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetOfferMappingsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetOfferMappingsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetOfferMappingsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetOfferMappingsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetOfferMappingsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetOfferMappingsRequest
        $AllProperties = ("offerIds", "cardStatuses", "categoryIds", "vendorNames", "tags", "archived")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerIds"))) { #optional property not found
            $OfferIds = $null
        } else {
            $OfferIds = $JsonParameters.PSobject.Properties["offerIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cardStatuses"))) { #optional property not found
            $CardStatuses = $null
        } else {
            $CardStatuses = $JsonParameters.PSobject.Properties["cardStatuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryIds"))) { #optional property not found
            $CategoryIds = $null
        } else {
            $CategoryIds = $JsonParameters.PSobject.Properties["categoryIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorNames"))) { #optional property not found
            $VendorNames = $null
        } else {
            $VendorNames = $JsonParameters.PSobject.Properties["vendorNames"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "archived"))) { #optional property not found
            $Archived = $null
        } else {
            $Archived = $JsonParameters.PSobject.Properties["archived"].value
        }

        $PSO = [PSCustomObject]@{
            "offerIds" = ${OfferIds}
            "cardStatuses" = ${CardStatuses}
            "categoryIds" = ${CategoryIds}
            "vendorNames" = ${VendorNames}
            "tags" = ${Tags}
            "archived" = ${Archived}
        }

        return $PSO
    }

}

