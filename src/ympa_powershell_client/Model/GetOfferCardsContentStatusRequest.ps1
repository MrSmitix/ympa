#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OfferIds
Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым. 
.PARAMETER CardStatuses
Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html) 
.PARAMETER CategoryIds
Фильтр по категориям на Маркете.
.OUTPUTS

GetOfferCardsContentStatusRequest<PSCustomObject>
#>

function Initialize-GetOfferCardsContentStatusRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${OfferIds},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CardStatuses},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${CategoryIds}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetOfferCardsContentStatusRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$OfferIds -and $OfferIds.length -gt 200) {
            throw "invalid value for 'OfferIds', number of items must be less than or equal to 200."
        }

        if (!$CategoryIds -and $CategoryIds.length -gt 200) {
            throw "invalid value for 'CategoryIds', number of items must be less than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "offerIds" = ${OfferIds}
            "cardStatuses" = ${CardStatuses}
            "categoryIds" = ${CategoryIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetOfferCardsContentStatusRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetOfferCardsContentStatusRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetOfferCardsContentStatusRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetOfferCardsContentStatusRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetOfferCardsContentStatusRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetOfferCardsContentStatusRequest
        $AllProperties = ("offerIds", "cardStatuses", "categoryIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerIds"))) { #optional property not found
            $OfferIds = $null
        } else {
            $OfferIds = $JsonParameters.PSobject.Properties["offerIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cardStatuses"))) { #optional property not found
            $CardStatuses = $null
        } else {
            $CardStatuses = $JsonParameters.PSobject.Properties["cardStatuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryIds"))) { #optional property not found
            $CategoryIds = $null
        } else {
            $CategoryIds = $JsonParameters.PSobject.Properties["categoryIds"].value
        }

        $PSO = [PSCustomObject]@{
            "offerIds" = ${OfferIds}
            "cardStatuses" = ${CardStatuses}
            "categoryIds" = ${CategoryIds}
        }

        return $PSO
    }

}

