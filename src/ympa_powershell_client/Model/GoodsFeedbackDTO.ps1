#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Отзыв о товаре.

.PARAMETER FeedbackId
Идентификатор отзыва. 
.PARAMETER CreatedAt
Дата и время создания отзыва.
.PARAMETER NeedReaction
Нужен ли ответ на отзыв.
.PARAMETER Identifiers
No description available.
.PARAMETER Author
Имя автора отзыва.
.PARAMETER Description
No description available.
.PARAMETER Media
No description available.
.PARAMETER Statistics
No description available.
.OUTPUTS

GoodsFeedbackDTO<PSCustomObject>
#>

function Initialize-GoodsFeedbackDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${FeedbackId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${NeedReaction},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Identifiers},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Media},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Statistics}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GoodsFeedbackDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $FeedbackId) {
            throw "invalid value for 'FeedbackId', 'FeedbackId' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }

        if ($null -eq $NeedReaction) {
            throw "invalid value for 'NeedReaction', 'NeedReaction' cannot be null."
        }

        if ($null -eq $Identifiers) {
            throw "invalid value for 'Identifiers', 'Identifiers' cannot be null."
        }

        if ($null -eq $Statistics) {
            throw "invalid value for 'Statistics', 'Statistics' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "feedbackId" = ${FeedbackId}
            "createdAt" = ${CreatedAt}
            "needReaction" = ${NeedReaction}
            "identifiers" = ${Identifiers}
            "author" = ${Author}
            "description" = ${Description}
            "media" = ${Media}
            "statistics" = ${Statistics}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GoodsFeedbackDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to GoodsFeedbackDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GoodsFeedbackDTO<PSCustomObject>
#>
function ConvertFrom-JsonToGoodsFeedbackDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GoodsFeedbackDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GoodsFeedbackDTO
        $AllProperties = ("feedbackId", "createdAt", "needReaction", "identifiers", "author", "description", "media", "statistics")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'feedbackId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "feedbackId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'feedbackId' missing."
        } else {
            $FeedbackId = $JsonParameters.PSobject.Properties["feedbackId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) {
            throw "Error! JSON cannot be serialized due to the required property 'createdAt' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "needReaction"))) {
            throw "Error! JSON cannot be serialized due to the required property 'needReaction' missing."
        } else {
            $NeedReaction = $JsonParameters.PSobject.Properties["needReaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identifiers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'identifiers' missing."
        } else {
            $Identifiers = $JsonParameters.PSobject.Properties["identifiers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statistics"))) {
            throw "Error! JSON cannot be serialized due to the required property 'statistics' missing."
        } else {
            $Statistics = $JsonParameters.PSobject.Properties["statistics"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "media"))) { #optional property not found
            $Media = $null
        } else {
            $Media = $JsonParameters.PSobject.Properties["media"].value
        }

        $PSO = [PSCustomObject]@{
            "feedbackId" = ${FeedbackId}
            "createdAt" = ${CreatedAt}
            "needReaction" = ${NeedReaction}
            "identifiers" = ${Identifiers}
            "author" = ${Author}
            "description" = ${Description}
            "media" = ${Media}
            "statistics" = ${Statistics}
        }

        return $PSO
    }

}

