#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 

.PARAMETER BusinessId
Идентификатор бизнеса.
.PARAMETER DateTimeFrom
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
.PARAMETER DateTimeTo
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
.PARAMETER DateFrom
Начало периода, включительно.
.PARAMETER DateTo
Конец периода, включительно. Максимальный период — 1 год.
.PARAMETER YearFrom
Начальный год формирования акта.
.PARAMETER MonthFrom
Начальный номер месяца формирования акта.
.PARAMETER YearTo
Конечный год формирования акта.
.PARAMETER MonthTo
Конечный номер месяца формирования акта.
.PARAMETER PlacementPrograms
Список моделей, которые нужны в отчете. 
.PARAMETER Inns
Список ИНН, которые нужны в отчете.
.PARAMETER CampaignIds
Список магазинов, которые нужны в отчете.
.OUTPUTS

GenerateUnitedMarketplaceServicesReportRequest<PSCustomObject>
#>

function Initialize-GenerateUnitedMarketplaceServicesReportRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${BusinessId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeTo},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateFrom},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTo},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${YearFrom},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MonthFrom},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${YearTo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MonthTo},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PlacementPrograms},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Inns},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${CampaignIds}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GenerateUnitedMarketplaceServicesReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $BusinessId) {
            throw "invalid value for 'BusinessId', 'BusinessId' cannot be null."
        }

        if ($MonthFrom -and $MonthFrom -gt 12) {
          throw "invalid value for 'MonthFrom', must be smaller than or equal to 12."
        }

        if ($MonthFrom -and $MonthFrom -lt 1) {
          throw "invalid value for 'MonthFrom', must be greater than or equal to 1."
        }

        if ($MonthTo -and $MonthTo -gt 12) {
          throw "invalid value for 'MonthTo', must be smaller than or equal to 12."
        }

        if ($MonthTo -and $MonthTo -lt 1) {
          throw "invalid value for 'MonthTo', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "yearFrom" = ${YearFrom}
            "monthFrom" = ${MonthFrom}
            "yearTo" = ${YearTo}
            "monthTo" = ${MonthTo}
            "placementPrograms" = ${PlacementPrograms}
            "inns" = ${Inns}
            "campaignIds" = ${CampaignIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenerateUnitedMarketplaceServicesReportRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenerateUnitedMarketplaceServicesReportRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenerateUnitedMarketplaceServicesReportRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGenerateUnitedMarketplaceServicesReportRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GenerateUnitedMarketplaceServicesReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenerateUnitedMarketplaceServicesReportRequest
        $AllProperties = ("businessId", "dateTimeFrom", "dateTimeTo", "dateFrom", "dateTo", "yearFrom", "monthFrom", "yearTo", "monthTo", "placementPrograms", "inns", "campaignIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'businessId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessId' missing."
        } else {
            $BusinessId = $JsonParameters.PSobject.Properties["businessId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeFrom"))) { #optional property not found
            $DateTimeFrom = $null
        } else {
            $DateTimeFrom = $JsonParameters.PSobject.Properties["dateTimeFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeTo"))) { #optional property not found
            $DateTimeTo = $null
        } else {
            $DateTimeTo = $JsonParameters.PSobject.Properties["dateTimeTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFrom"))) { #optional property not found
            $DateFrom = $null
        } else {
            $DateFrom = $JsonParameters.PSobject.Properties["dateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTo"))) { #optional property not found
            $DateTo = $null
        } else {
            $DateTo = $JsonParameters.PSobject.Properties["dateTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yearFrom"))) { #optional property not found
            $YearFrom = $null
        } else {
            $YearFrom = $JsonParameters.PSobject.Properties["yearFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "monthFrom"))) { #optional property not found
            $MonthFrom = $null
        } else {
            $MonthFrom = $JsonParameters.PSobject.Properties["monthFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "yearTo"))) { #optional property not found
            $YearTo = $null
        } else {
            $YearTo = $JsonParameters.PSobject.Properties["yearTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "monthTo"))) { #optional property not found
            $MonthTo = $null
        } else {
            $MonthTo = $JsonParameters.PSobject.Properties["monthTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placementPrograms"))) { #optional property not found
            $PlacementPrograms = $null
        } else {
            $PlacementPrograms = $JsonParameters.PSobject.Properties["placementPrograms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inns"))) { #optional property not found
            $Inns = $null
        } else {
            $Inns = $JsonParameters.PSobject.Properties["inns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaignIds"))) { #optional property not found
            $CampaignIds = $null
        } else {
            $CampaignIds = $JsonParameters.PSobject.Properties["campaignIds"].value
        }

        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "yearFrom" = ${YearFrom}
            "monthFrom" = ${MonthFrom}
            "yearTo" = ${YearTo}
            "monthTo" = ${MonthTo}
            "placementPrograms" = ${PlacementPrograms}
            "inns" = ${Inns}
            "campaignIds" = ${CampaignIds}
        }

        return $PSO
    }

}

