#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Решения по позиции в возврате.

.PARAMETER ReturnItemId
Идентификатор товара в возврате.
.PARAMETER DecisionType
No description available.
.PARAMETER Comment
Комментарий к решению. Укажите:  * для `REFUND_MONEY_INCLUDING_SHIPMENT`— стоимость обратной пересылки;  * для `REPAIR` — когда вы устраните недостатки товара;  * для `DECLINE_REFUND` — причину отказа;  * для `OTHER_DECISION` — какое решение вы предлагаете. 
.OUTPUTS

SetReturnDecisionRequest<PSCustomObject>
#>

function Initialize-SetReturnDecisionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ReturnItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("REFUND_MONEY", "REFUND_MONEY_INCLUDING_SHIPMENT", "REPAIR", "REPLACE", "SEND_TO_EXAMINATION", "DECLINE_REFUND", "OTHER_DECISION")]
        [PSCustomObject]
        ${DecisionType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => SetReturnDecisionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ReturnItemId) {
            throw "invalid value for 'ReturnItemId', 'ReturnItemId' cannot be null."
        }

        if ($null -eq $DecisionType) {
            throw "invalid value for 'DecisionType', 'DecisionType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "returnItemId" = ${ReturnItemId}
            "decisionType" = ${DecisionType}
            "comment" = ${Comment}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SetReturnDecisionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SetReturnDecisionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SetReturnDecisionRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSetReturnDecisionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => SetReturnDecisionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SetReturnDecisionRequest
        $AllProperties = ("returnItemId", "decisionType", "comment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'returnItemId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "returnItemId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'returnItemId' missing."
        } else {
            $ReturnItemId = $JsonParameters.PSobject.Properties["returnItemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "decisionType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'decisionType' missing."
        } else {
            $DecisionType = $JsonParameters.PSobject.Properties["decisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        $PSO = [PSCustomObject]@{
            "returnItemId" = ${ReturnItemId}
            "decisionType" = ${DecisionType}
            "comment" = ${Comment}
        }

        return $PSO
    }

}

