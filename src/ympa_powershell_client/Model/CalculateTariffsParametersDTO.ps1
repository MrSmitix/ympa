#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Параметры для расчета стоимости услуг.

.PARAMETER CampaignId
Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке. 
.PARAMETER SellingProgram
No description available.
.PARAMETER Frequency
No description available.
.OUTPUTS

CalculateTariffsParametersDTO<PSCustomObject>
#>

function Initialize-CalculateTariffsParametersDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${CampaignId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("FBY", "FBS", "DBS", "EXPRESS")]
        [PSCustomObject]
        ${SellingProgram},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DAILY", "WEEKLY", "BIWEEKLY", "MONTHLY")]
        [PSCustomObject]
        ${Frequency}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CalculateTariffsParametersDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "campaignId" = ${CampaignId}
            "sellingProgram" = ${SellingProgram}
            "frequency" = ${Frequency}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CalculateTariffsParametersDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CalculateTariffsParametersDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CalculateTariffsParametersDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCalculateTariffsParametersDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CalculateTariffsParametersDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CalculateTariffsParametersDTO
        $AllProperties = ("campaignId", "sellingProgram", "frequency")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaignId"))) { #optional property not found
            $CampaignId = $null
        } else {
            $CampaignId = $JsonParameters.PSobject.Properties["campaignId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sellingProgram"))) { #optional property not found
            $SellingProgram = $null
        } else {
            $SellingProgram = $JsonParameters.PSobject.Properties["sellingProgram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "frequency"))) { #optional property not found
            $Frequency = $null
        } else {
            $Frequency = $JsonParameters.PSobject.Properties["frequency"].value
        }

        $PSO = [PSCustomObject]@{
            "campaignId" = ${CampaignId}
            "sellingProgram" = ${SellingProgram}
            "frequency" = ${Frequency}
        }

        return $PSO
    }

}

