#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о покупателе.  Параметры `id`, `lastName`, `firstName` и `middleName` возвращаются, только если вы работаете по модели DBS. 

.PARAMETER Id
Идентификатор покупателя.
.PARAMETER LastName
Фамилия покупателя.
.PARAMETER FirstName
Имя покупателя.
.PARAMETER MiddleName
Отчество покупателя.
.PARAMETER Type
No description available.
.OUTPUTS

OrderBuyerDTO<PSCustomObject>
#>

function Initialize-OrderBuyerDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MiddleName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PERSON", "BUSINESS")]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderBuyerDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "lastName" = ${LastName}
            "firstName" = ${FirstName}
            "middleName" = ${MiddleName}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderBuyerDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderBuyerDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderBuyerDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderBuyerDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderBuyerDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderBuyerDTO
        $AllProperties = ("id", "lastName", "firstName", "middleName", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastName"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["lastName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "firstName"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["firstName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "middleName"))) { #optional property not found
            $MiddleName = $null
        } else {
            $MiddleName = $JsonParameters.PSobject.Properties["middleName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "lastName" = ${LastName}
            "firstName" = ${FirstName}
            "middleName" = ${MiddleName}
            "type" = ${Type}
        }

        return $PSO
    }

}

