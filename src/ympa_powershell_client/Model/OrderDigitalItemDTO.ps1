#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Ключ цифрового товара.

.PARAMETER Id
Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
.PARAMETER Code
Сам ключ.
.PARAMETER Slip
Инструкция по активации.
.PARAMETER ActivateTill
Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. 
.OUTPUTS

OrderDigitalItemDTO<PSCustomObject>
#>

function Initialize-OrderDigitalItemDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Slip},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${ActivateTill}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderDigitalItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Code) {
            throw "invalid value for 'Code', 'Code' cannot be null."
        }

        if ($null -eq $Slip) {
            throw "invalid value for 'Slip', 'Slip' cannot be null."
        }

        if ($null -eq $ActivateTill) {
            throw "invalid value for 'ActivateTill', 'ActivateTill' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "slip" = ${Slip}
            "activate_till" = ${ActivateTill}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderDigitalItemDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderDigitalItemDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderDigitalItemDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderDigitalItemDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderDigitalItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderDigitalItemDTO
        $AllProperties = ("id", "code", "slip", "activate_till")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'code' missing."
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'slip' missing."
        } else {
            $Slip = $JsonParameters.PSobject.Properties["slip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activate_till"))) {
            throw "Error! JSON cannot be serialized due to the required property 'activate_till' missing."
        } else {
            $ActivateTill = $JsonParameters.PSobject.Properties["activate_till"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "code" = ${Code}
            "slip" = ${Slip}
            "activate_till" = ${ActivateTill}
        }

        return $PSO
    }

}

