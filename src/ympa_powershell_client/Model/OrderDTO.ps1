#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Заказ.

.PARAMETER Id
Идентификатор заказа.
.PARAMETER Status
No description available.
.PARAMETER Substatus
No description available.
.PARAMETER CreationDate
No description available.
.PARAMETER UpdatedAt
No description available.
.PARAMETER Currency
No description available.
.PARAMETER ItemsTotal
Платеж покупателя. 
.PARAMETER DeliveryTotal
Стоимость доставки. 
.PARAMETER BuyerItemsTotal
{% note warning """" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
.PARAMETER BuyerTotal
{% note warning """" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
.PARAMETER BuyerItemsTotalBeforeDiscount
Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
.PARAMETER BuyerTotalBeforeDiscount
{% note warning """" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
.PARAMETER PaymentType
No description available.
.PARAMETER PaymentMethod
No description available.
.PARAMETER Fake
Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
.PARAMETER Items
Список товаров в заказе.
.PARAMETER Subsidies
Список субсидий по типам.
.PARAMETER Delivery
No description available.
.PARAMETER Buyer
No description available.
.PARAMETER Notes
Комментарий к заказу.
.PARAMETER TaxSystem
No description available.
.PARAMETER CancelRequested
**Только для модели DBS**  Запрошена ли отмена. 
.PARAMETER ExpiryDate
No description available.
.OUTPUTS

OrderDTO<PSCustomObject>
#>

function Initialize-OrderDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PLACING", "RESERVED", "UNPAID", "PROCESSING", "DELIVERY", "PICKUP", "DELIVERED", "CANCELLED", "PENDING", "PARTIALLY_RETURNED", "RETURNED", "UNKNOWN")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RESERVATION_EXPIRED", "USER_NOT_PAID", "USER_UNREACHABLE", "USER_CHANGED_MIND", "USER_REFUSED_DELIVERY", "USER_REFUSED_PRODUCT", "SHOP_FAILED", "USER_REFUSED_QUALITY", "REPLACING_ORDER", "PROCESSING_EXPIRED", "PENDING_EXPIRED", "SHOP_PENDING_CANCELLED", "PENDING_CANCELLED", "USER_FRAUD", "RESERVATION_FAILED", "USER_PLACED_OTHER_ORDER", "USER_BOUGHT_CHEAPER", "MISSING_ITEM", "BROKEN_ITEM", "WRONG_ITEM", "PICKUP_EXPIRED", "DELIVERY_PROBLEMS", "LATE_CONTACT", "CUSTOM", "DELIVERY_SERVICE_FAILED", "WAREHOUSE_FAILED_TO_SHIP", "DELIVERY_SERIVCE_UNDELIVERED", "DELIVERY_SERVICE_UNDELIVERED", "PREORDER", "AWAIT_CONFIRMATION", "STARTED", "PACKAGING", "READY_TO_SHIP", "SHIPPED", "ASYNC_PROCESSING", "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA", "WAITING_USER_INPUT", "WAITING_BANK_DECISION", "BANK_REJECT_CREDIT_OFFER", "CUSTOMER_REJECT_CREDIT_OFFER", "CREDIT_OFFER_FAILED", "AWAIT_DELIVERY_DATES_CONFIRMATION", "SERVICE_FAULT", "DELIVERY_SERVICE_RECEIVED", "USER_RECEIVED", "WAITING_FOR_STOCKS", "AS_PART_OF_MULTI_ORDER", "READY_FOR_LAST_MILE", "LAST_MILE_STARTED", "ANTIFRAUD", "DELIVERY_USER_NOT_RECEIVED", "DELIVERY_SERVICE_DELIVERED", "DELIVERED_USER_NOT_RECEIVED", "USER_WANTED_ANOTHER_PAYMENT_METHOD", "USER_RECEIVED_TECHNICAL_ERROR", "USER_FORGOT_TO_USE_BONUS", "RECEIVED_ON_DISTRIBUTION_CENTER", "DELIVERY_SERVICE_NOT_RECEIVED", "DELIVERY_SERVICE_LOST", "SHIPPED_TO_WRONG_DELIVERY_SERVICE", "DELIVERED_USER_RECEIVED", "WAITING_TINKOFF_DECISION", "COURIER_SEARCH", "COURIER_FOUND", "COURIER_IN_TRANSIT_TO_SENDER", "COURIER_ARRIVED_TO_SENDER", "COURIER_RECEIVED", "COURIER_NOT_FOUND", "COURIER_NOT_DELIVER_ORDER", "COURIER_RETURNS_ORDER", "COURIER_RETURNED_ORDER", "WAITING_USER_DELIVERY_INPUT", "PICKUP_SERVICE_RECEIVED", "PICKUP_USER_RECEIVED", "CANCELLED_COURIER_NOT_FOUND", "COURIER_NOT_COME_FOR_ORDER", "DELIVERY_NOT_MANAGED_REGION", "INCOMPLETE_CONTACT_INFORMATION", "INCOMPLETE_MULTI_ORDER", "INAPPROPRIATE_WEIGHT_SIZE", "TECHNICAL_ERROR", "SORTING_CENTER_LOST", "COURIER_SEARCH_NOT_STARTED", "LOST", "AWAIT_PAYMENT", "AWAIT_LAVKA_RESERVATION", "USER_WANTS_TO_CHANGE_ADDRESS", "FULL_NOT_RANSOM", "PRESCRIPTION_MISMATCH", "DROPOFF_LOST", "DROPOFF_CLOSED", "DELIVERY_TO_STORE_STARTED", "USER_WANTS_TO_CHANGE_DELIVERY_DATE", "WRONG_ITEM_DELIVERED", "DAMAGED_BOX", "AWAIT_DELIVERY_DATES", "LAST_MILE_COURIER_SEARCH", "PICKUP_POINT_CLOSED", "LEGAL_INFO_CHANGED", "USER_HAS_NO_TIME_TO_PICKUP_ORDER", "DELIVERY_CUSTOMS_ARRIVED", "DELIVERY_CUSTOMS_CLEARED", "FIRST_MILE_DELIVERY_SERVICE_RECEIVED", "AWAIT_AUTO_DELIVERY_DATES", "AWAIT_USER_PERSONAL_DATA", "NO_PERSONAL_DATA_EXPIRED", "CUSTOMS_PROBLEMS", "AWAIT_CASHIER", "WAITING_POSTPAID_BUDGET_RESERVATION", "AWAIT_SERVICEABLE_CONFIRMATION", "POSTPAID_BUDGET_RESERVATION_FAILED", "AWAIT_CUSTOM_PRICE_CONFIRMATION", "READY_FOR_PICKUP", "UNKNOWN")]
        [PSCustomObject]
        ${Substatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreationDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdatedAt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("RUR", "USD", "EUR", "UAH", "AUD", "GBP", "BYR", "BYN", "DKK", "ISK", "KZT", "CAD", "CNY", "NOK", "XDR", "SGD", "TRY", "SEK", "CHF", "JPY", "AZN", "ALL", "DZD", "AOA", "ARS", "AMD", "AFN", "BHD", "BGN", "BOB", "BWP", "BND", "BRL", "BIF", "HUF", "VEF", "KPW", "VND", "GMD", "GHS", "GNF", "HKD", "GEL", "AED", "EGP", "ZMK", "ILS", "INR", "IDR", "JOD", "IQD", "IRR", "YER", "QAR", "KES", "KGS", "COP", "CDF", "CRC", "KWD", "CUP", "LAK", "LVL", "SLL", "LBP", "LYD", "SZL", "LTL", "MUR", "MRO", "MKD", "MWK", "MGA", "MYR", "MAD", "MXN", "MZN", "MDL", "MNT", "NPR", "NGN", "NIO", "NZD", "OMR", "PKR", "PYG", "PEN", "PLN", "KHR", "SAR", "RON", "SCR", "SYP", "SKK", "SOS", "SDG", "SRD", "TJS", "THB", "TWD", "BDT", "TZS", "TND", "TMM", "UGX", "UZS", "UYU", "PHP", "DJF", "XAF", "XOF", "HRK", "CZK", "CLP", "LKR", "EEK", "ETB", "RSD", "ZAR", "KRW", "NAD", "TL", "UE")]
        [PSCustomObject]
        ${Currency},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ItemsTotal},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DeliveryTotal},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerItemsTotal},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerTotal},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerItemsTotalBeforeDiscount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerTotalBeforeDiscount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PREPAID", "POSTPAID", "UNKNOWN")]
        [PSCustomObject]
        ${PaymentType},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CASH_ON_DELIVERY", "CARD_ON_DELIVERY", "BOUND_CARD_ON_DELIVERY", "YANDEX", "APPLE_PAY", "EXTERNAL_CERTIFICATE", "CREDIT", "GOOGLE_PAY", "TINKOFF_CREDIT", "SBP", "TINKOFF_INSTALLMENTS", "B2B_ACCOUNT_PREPAYMENT", "B2B_ACCOUNT_POSTPAYMENT", "UNKNOWN")]
        [PSCustomObject]
        ${PaymentMethod},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Fake},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Items},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Subsidies},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Delivery},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Buyer},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Notes},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("OSN", "USN", "USN_MINUS_COST", "ENVD", "ECHN", "PSN", "NPD", "UNKNOWN_VALUE")]
        [PSCustomObject]
        ${TaxSystem},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CancelRequested},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExpiryDate}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Items) {
            throw "invalid value for 'Items', 'Items' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "status" = ${Status}
            "substatus" = ${Substatus}
            "creationDate" = ${CreationDate}
            "updatedAt" = ${UpdatedAt}
            "currency" = ${Currency}
            "itemsTotal" = ${ItemsTotal}
            "deliveryTotal" = ${DeliveryTotal}
            "buyerItemsTotal" = ${BuyerItemsTotal}
            "buyerTotal" = ${BuyerTotal}
            "buyerItemsTotalBeforeDiscount" = ${BuyerItemsTotalBeforeDiscount}
            "buyerTotalBeforeDiscount" = ${BuyerTotalBeforeDiscount}
            "paymentType" = ${PaymentType}
            "paymentMethod" = ${PaymentMethod}
            "fake" = ${Fake}
            "items" = ${Items}
            "subsidies" = ${Subsidies}
            "delivery" = ${Delivery}
            "buyer" = ${Buyer}
            "notes" = ${Notes}
            "taxSystem" = ${TaxSystem}
            "cancelRequested" = ${CancelRequested}
            "expiryDate" = ${ExpiryDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderDTO
        $AllProperties = ("id", "status", "substatus", "creationDate", "updatedAt", "currency", "itemsTotal", "deliveryTotal", "buyerItemsTotal", "buyerTotal", "buyerItemsTotalBeforeDiscount", "buyerTotalBeforeDiscount", "paymentType", "paymentMethod", "fake", "items", "subsidies", "delivery", "buyer", "notes", "taxSystem", "cancelRequested", "expiryDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'items' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) {
            throw "Error! JSON cannot be serialized due to the required property 'items' missing."
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "substatus"))) { #optional property not found
            $Substatus = $null
        } else {
            $Substatus = $JsonParameters.PSobject.Properties["substatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creationDate"))) { #optional property not found
            $CreationDate = $null
        } else {
            $CreationDate = $JsonParameters.PSobject.Properties["creationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updatedAt"))) { #optional property not found
            $UpdatedAt = $null
        } else {
            $UpdatedAt = $JsonParameters.PSobject.Properties["updatedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "itemsTotal"))) { #optional property not found
            $ItemsTotal = $null
        } else {
            $ItemsTotal = $JsonParameters.PSobject.Properties["itemsTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryTotal"))) { #optional property not found
            $DeliveryTotal = $null
        } else {
            $DeliveryTotal = $JsonParameters.PSobject.Properties["deliveryTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerItemsTotal"))) { #optional property not found
            $BuyerItemsTotal = $null
        } else {
            $BuyerItemsTotal = $JsonParameters.PSobject.Properties["buyerItemsTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerTotal"))) { #optional property not found
            $BuyerTotal = $null
        } else {
            $BuyerTotal = $JsonParameters.PSobject.Properties["buyerTotal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerItemsTotalBeforeDiscount"))) { #optional property not found
            $BuyerItemsTotalBeforeDiscount = $null
        } else {
            $BuyerItemsTotalBeforeDiscount = $JsonParameters.PSobject.Properties["buyerItemsTotalBeforeDiscount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerTotalBeforeDiscount"))) { #optional property not found
            $BuyerTotalBeforeDiscount = $null
        } else {
            $BuyerTotalBeforeDiscount = $JsonParameters.PSobject.Properties["buyerTotalBeforeDiscount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentType"))) { #optional property not found
            $PaymentType = $null
        } else {
            $PaymentType = $JsonParameters.PSobject.Properties["paymentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentMethod"))) { #optional property not found
            $PaymentMethod = $null
        } else {
            $PaymentMethod = $JsonParameters.PSobject.Properties["paymentMethod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fake"))) { #optional property not found
            $Fake = $null
        } else {
            $Fake = $JsonParameters.PSobject.Properties["fake"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsidies"))) { #optional property not found
            $Subsidies = $null
        } else {
            $Subsidies = $JsonParameters.PSobject.Properties["subsidies"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delivery"))) { #optional property not found
            $Delivery = $null
        } else {
            $Delivery = $JsonParameters.PSobject.Properties["delivery"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyer"))) { #optional property not found
            $Buyer = $null
        } else {
            $Buyer = $JsonParameters.PSobject.Properties["buyer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taxSystem"))) { #optional property not found
            $TaxSystem = $null
        } else {
            $TaxSystem = $JsonParameters.PSobject.Properties["taxSystem"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cancelRequested"))) { #optional property not found
            $CancelRequested = $null
        } else {
            $CancelRequested = $JsonParameters.PSobject.Properties["cancelRequested"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiryDate"))) { #optional property not found
            $ExpiryDate = $null
        } else {
            $ExpiryDate = $JsonParameters.PSobject.Properties["expiryDate"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "status" = ${Status}
            "substatus" = ${Substatus}
            "creationDate" = ${CreationDate}
            "updatedAt" = ${UpdatedAt}
            "currency" = ${Currency}
            "itemsTotal" = ${ItemsTotal}
            "deliveryTotal" = ${DeliveryTotal}
            "buyerItemsTotal" = ${BuyerItemsTotal}
            "buyerTotal" = ${BuyerTotal}
            "buyerItemsTotalBeforeDiscount" = ${BuyerItemsTotalBeforeDiscount}
            "buyerTotalBeforeDiscount" = ${BuyerTotalBeforeDiscount}
            "paymentType" = ${PaymentType}
            "paymentMethod" = ${PaymentMethod}
            "fake" = ${Fake}
            "items" = ${Items}
            "subsidies" = ${Subsidies}
            "delivery" = ${Delivery}
            "buyer" = ${Buyer}
            "notes" = ${Notes}
            "taxSystem" = ${TaxSystem}
            "cancelRequested" = ${CancelRequested}
            "expiryDate" = ${ExpiryDate}
        }

        return $PSO
    }

}

