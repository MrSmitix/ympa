#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Данные, необходимые для генерации отчета. 

.PARAMETER BusinessId
Идентификатор бизнеса.
.PARAMETER DateFrom
Начало периода, включительно.
.PARAMETER DateTo
Конец периода, включительно.
.PARAMETER AttributionType
No description available.
.OUTPUTS

GenerateShelfsStatisticsRequest<PSCustomObject>
#>

function Initialize-GenerateShelfsStatisticsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${BusinessId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${DateFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${DateTo},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CLICKS", "SHOWS")]
        [PSCustomObject]
        ${AttributionType}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GenerateShelfsStatisticsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $BusinessId) {
            throw "invalid value for 'BusinessId', 'BusinessId' cannot be null."
        }

        if ($null -eq $DateFrom) {
            throw "invalid value for 'DateFrom', 'DateFrom' cannot be null."
        }

        if ($null -eq $DateTo) {
            throw "invalid value for 'DateTo', 'DateTo' cannot be null."
        }

        if ($null -eq $AttributionType) {
            throw "invalid value for 'AttributionType', 'AttributionType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "attributionType" = ${AttributionType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenerateShelfsStatisticsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenerateShelfsStatisticsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenerateShelfsStatisticsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGenerateShelfsStatisticsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GenerateShelfsStatisticsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenerateShelfsStatisticsRequest
        $AllProperties = ("businessId", "dateFrom", "dateTo", "attributionType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'businessId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessId' missing."
        } else {
            $BusinessId = $JsonParameters.PSobject.Properties["businessId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFrom"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateFrom' missing."
        } else {
            $DateFrom = $JsonParameters.PSobject.Properties["dateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTo"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateTo' missing."
        } else {
            $DateTo = $JsonParameters.PSobject.Properties["dateTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributionType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attributionType' missing."
        } else {
            $AttributionType = $JsonParameters.PSobject.Properties["attributionType"].value
        }

        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "attributionType" = ${AttributionType}
        }

        return $PSO
    }

}

