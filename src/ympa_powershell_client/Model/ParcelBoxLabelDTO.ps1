#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о ярлыке для коробки.

.PARAMETER Url
Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
.PARAMETER SupplierName
Юридическое название магазина.
.PARAMETER DeliveryServiceName
Юридическое название службы доставки.
.PARAMETER OrderId
Идентификатор заказа в системе Маркета.
.PARAMETER OrderNum
Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
.PARAMETER RecipientName
Фамилия и инициалы получателя заказа.
.PARAMETER BoxId
Идентификатор коробки.
.PARAMETER FulfilmentId
Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
.PARAMETER Place
Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
.PARAMETER Weight
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
.PARAMETER DeliveryServiceId
Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
.PARAMETER DeliveryAddress
Адрес получателя.
.PARAMETER ShipmentDate
Дата отгрузки в формате `dd.MM.yyyy`.
.OUTPUTS

ParcelBoxLabelDTO<PSCustomObject>
#>

function Initialize-ParcelBoxLabelDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupplierName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeliveryServiceName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${OrderId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrderNum},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecipientName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${BoxId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FulfilmentId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Place},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Weight},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeliveryServiceId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeliveryAddress},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShipmentDate}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ParcelBoxLabelDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $SupplierName) {
            throw "invalid value for 'SupplierName', 'SupplierName' cannot be null."
        }

        if ($null -eq $DeliveryServiceName) {
            throw "invalid value for 'DeliveryServiceName', 'DeliveryServiceName' cannot be null."
        }

        if ($null -eq $OrderId) {
            throw "invalid value for 'OrderId', 'OrderId' cannot be null."
        }

        if ($null -eq $OrderNum) {
            throw "invalid value for 'OrderNum', 'OrderNum' cannot be null."
        }

        if ($null -eq $RecipientName) {
            throw "invalid value for 'RecipientName', 'RecipientName' cannot be null."
        }

        if ($null -eq $BoxId) {
            throw "invalid value for 'BoxId', 'BoxId' cannot be null."
        }

        if ($null -eq $FulfilmentId) {
            throw "invalid value for 'FulfilmentId', 'FulfilmentId' cannot be null."
        }

        if ($null -eq $Place) {
            throw "invalid value for 'Place', 'Place' cannot be null."
        }

        if ($null -eq $Weight) {
            throw "invalid value for 'Weight', 'Weight' cannot be null."
        }

        if ($null -eq $DeliveryServiceId) {
            throw "invalid value for 'DeliveryServiceId', 'DeliveryServiceId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "supplierName" = ${SupplierName}
            "deliveryServiceName" = ${DeliveryServiceName}
            "orderId" = ${OrderId}
            "orderNum" = ${OrderNum}
            "recipientName" = ${RecipientName}
            "boxId" = ${BoxId}
            "fulfilmentId" = ${FulfilmentId}
            "place" = ${Place}
            "weight" = ${Weight}
            "deliveryServiceId" = ${DeliveryServiceId}
            "deliveryAddress" = ${DeliveryAddress}
            "shipmentDate" = ${ShipmentDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ParcelBoxLabelDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ParcelBoxLabelDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ParcelBoxLabelDTO<PSCustomObject>
#>
function ConvertFrom-JsonToParcelBoxLabelDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ParcelBoxLabelDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ParcelBoxLabelDTO
        $AllProperties = ("url", "supplierName", "deliveryServiceName", "orderId", "orderNum", "recipientName", "boxId", "fulfilmentId", "place", "weight", "deliveryServiceId", "deliveryAddress", "shipmentDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'url' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supplierName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'supplierName' missing."
        } else {
            $SupplierName = $JsonParameters.PSobject.Properties["supplierName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryServiceName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'deliveryServiceName' missing."
        } else {
            $DeliveryServiceName = $JsonParameters.PSobject.Properties["deliveryServiceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'orderId' missing."
        } else {
            $OrderId = $JsonParameters.PSobject.Properties["orderId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderNum"))) {
            throw "Error! JSON cannot be serialized due to the required property 'orderNum' missing."
        } else {
            $OrderNum = $JsonParameters.PSobject.Properties["orderNum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipientName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'recipientName' missing."
        } else {
            $RecipientName = $JsonParameters.PSobject.Properties["recipientName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boxId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'boxId' missing."
        } else {
            $BoxId = $JsonParameters.PSobject.Properties["boxId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fulfilmentId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'fulfilmentId' missing."
        } else {
            $FulfilmentId = $JsonParameters.PSobject.Properties["fulfilmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "place"))) {
            throw "Error! JSON cannot be serialized due to the required property 'place' missing."
        } else {
            $Place = $JsonParameters.PSobject.Properties["place"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) {
            throw "Error! JSON cannot be serialized due to the required property 'weight' missing."
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryServiceId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'deliveryServiceId' missing."
        } else {
            $DeliveryServiceId = $JsonParameters.PSobject.Properties["deliveryServiceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryAddress"))) { #optional property not found
            $DeliveryAddress = $null
        } else {
            $DeliveryAddress = $JsonParameters.PSobject.Properties["deliveryAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipmentDate"))) { #optional property not found
            $ShipmentDate = $null
        } else {
            $ShipmentDate = $JsonParameters.PSobject.Properties["shipmentDate"].value
        }

        $PSO = [PSCustomObject]@{
            "url" = ${Url}
            "supplierName" = ${SupplierName}
            "deliveryServiceName" = ${DeliveryServiceName}
            "orderId" = ${OrderId}
            "orderNum" = ${OrderNum}
            "recipientName" = ${RecipientName}
            "boxId" = ${BoxId}
            "fulfilmentId" = ${FulfilmentId}
            "place" = ${Place}
            "weight" = ${Weight}
            "deliveryServiceId" = ${DeliveryServiceId}
            "deliveryAddress" = ${DeliveryAddress}
            "shipmentDate" = ${ShipmentDate}
        }

        return $PSO
    }

}

