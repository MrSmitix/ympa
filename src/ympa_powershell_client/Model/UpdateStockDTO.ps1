#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об остатках одного товара на одном из складов.

.PARAMETER Sku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Items
Информация об остатках товара. 
.OUTPUTS

UpdateStockDTO<PSCustomObject>
#>

function Initialize-UpdateStockDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${Sku},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Items}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => UpdateStockDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Sku) {
            throw "invalid value for 'Sku', 'Sku' cannot be null."
        }

        if ($Sku.length -gt 255) {
            throw "invalid value for 'Sku', the character length must be smaller than or equal to 255."
        }

        if ($Sku.length -lt 1) {
            throw "invalid value for 'Sku', the character length must be great than or equal to 1."
        }

        if ($null -eq $Items) {
            throw "invalid value for 'Items', 'Items' cannot be null."
        }

        if ($Items.length -gt 1) {
            throw "invalid value for 'Items', number of items must be less than or equal to 1."
        }

        if ($Items.length -lt 1) {
            throw "invalid value for 'Items', number of items must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "sku" = ${Sku}
            "items" = ${Items}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UpdateStockDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UpdateStockDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UpdateStockDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUpdateStockDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => UpdateStockDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UpdateStockDTO
        $AllProperties = ("sku", "items")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'sku' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sku"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sku' missing."
        } else {
            $Sku = $JsonParameters.PSobject.Properties["sku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) {
            throw "Error! JSON cannot be serialized due to the required property 'items' missing."
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        $PSO = [PSCustomObject]@{
            "sku" = ${Sku}
            "items" = ${Items}
        }

        return $PSO
    }

}

