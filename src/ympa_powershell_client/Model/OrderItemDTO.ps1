#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Список товаров в заказе.

.PARAMETER Id
Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
.PARAMETER OfferId
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER OfferName
Название товара.
.PARAMETER Price
Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
.PARAMETER BuyerPrice
Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
.PARAMETER BuyerPriceBeforeDiscount
Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
.PARAMETER PriceBeforeDiscount
{% note warning """" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
.PARAMETER Count
Количество единиц товара.
.PARAMETER Vat
No description available.
.PARAMETER ShopSku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Subsidy
{% note warning """" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
.PARAMETER PartnerWarehouseId
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
.PARAMETER Promos
Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
.PARAMETER Instances
Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
.PARAMETER Details
Информация об удалении товара из заказа. 
.PARAMETER Subsidies
Список субсидий по типам.
.PARAMETER RequiredInstanceTypes
Список необходимых маркировок товара.
.OUTPUTS

OrderItemDTO<PSCustomObject>
#>

function Initialize-OrderItemDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${OfferId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OfferName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerPrice},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${BuyerPriceBeforeDiscount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${PriceBeforeDiscount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NO_VAT", "VAT_0", "VAT_10", "VAT_10_110", "VAT_20", "VAT_20_120", "VAT_18", "VAT_18_118", "UNKNOWN_VALUE")]
        [PSCustomObject]
        ${Vat},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${ShopSku},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Subsidy},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartnerWarehouseId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Promos},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Instances},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Details},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Subsidies},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RequiredInstanceTypes}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrderItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$OfferId -and $OfferId.length -gt 255) {
            throw "invalid value for 'OfferId', the character length must be smaller than or equal to 255."
        }

        if (!$OfferId -and $OfferId.length -lt 1) {
            throw "invalid value for 'OfferId', the character length must be great than or equal to 1."
        }

        if (!$ShopSku -and $ShopSku.length -gt 255) {
            throw "invalid value for 'ShopSku', the character length must be smaller than or equal to 255."
        }

        if (!$ShopSku -and $ShopSku.length -lt 1) {
            throw "invalid value for 'ShopSku', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "offerId" = ${OfferId}
            "offerName" = ${OfferName}
            "price" = ${Price}
            "buyerPrice" = ${BuyerPrice}
            "buyerPriceBeforeDiscount" = ${BuyerPriceBeforeDiscount}
            "priceBeforeDiscount" = ${PriceBeforeDiscount}
            "count" = ${Count}
            "vat" = ${Vat}
            "shopSku" = ${ShopSku}
            "subsidy" = ${Subsidy}
            "partnerWarehouseId" = ${PartnerWarehouseId}
            "promos" = ${Promos}
            "instances" = ${Instances}
            "details" = ${Details}
            "subsidies" = ${Subsidies}
            "requiredInstanceTypes" = ${RequiredInstanceTypes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderItemDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderItemDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderItemDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrderItemDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrderItemDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderItemDTO
        $AllProperties = ("id", "offerId", "offerName", "price", "buyerPrice", "buyerPriceBeforeDiscount", "priceBeforeDiscount", "count", "vat", "shopSku", "subsidy", "partnerWarehouseId", "promos", "instances", "details", "subsidies", "requiredInstanceTypes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerId"))) { #optional property not found
            $OfferId = $null
        } else {
            $OfferId = $JsonParameters.PSobject.Properties["offerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offerName"))) { #optional property not found
            $OfferName = $null
        } else {
            $OfferName = $JsonParameters.PSobject.Properties["offerName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerPrice"))) { #optional property not found
            $BuyerPrice = $null
        } else {
            $BuyerPrice = $JsonParameters.PSobject.Properties["buyerPrice"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buyerPriceBeforeDiscount"))) { #optional property not found
            $BuyerPriceBeforeDiscount = $null
        } else {
            $BuyerPriceBeforeDiscount = $JsonParameters.PSobject.Properties["buyerPriceBeforeDiscount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priceBeforeDiscount"))) { #optional property not found
            $PriceBeforeDiscount = $null
        } else {
            $PriceBeforeDiscount = $JsonParameters.PSobject.Properties["priceBeforeDiscount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vat"))) { #optional property not found
            $Vat = $null
        } else {
            $Vat = $JsonParameters.PSobject.Properties["vat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopSku"))) { #optional property not found
            $ShopSku = $null
        } else {
            $ShopSku = $JsonParameters.PSobject.Properties["shopSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsidy"))) { #optional property not found
            $Subsidy = $null
        } else {
            $Subsidy = $JsonParameters.PSobject.Properties["subsidy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerWarehouseId"))) { #optional property not found
            $PartnerWarehouseId = $null
        } else {
            $PartnerWarehouseId = $JsonParameters.PSobject.Properties["partnerWarehouseId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "promos"))) { #optional property not found
            $Promos = $null
        } else {
            $Promos = $JsonParameters.PSobject.Properties["promos"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instances"))) { #optional property not found
            $Instances = $null
        } else {
            $Instances = $JsonParameters.PSobject.Properties["instances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "details"))) { #optional property not found
            $Details = $null
        } else {
            $Details = $JsonParameters.PSobject.Properties["details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subsidies"))) { #optional property not found
            $Subsidies = $null
        } else {
            $Subsidies = $JsonParameters.PSobject.Properties["subsidies"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requiredInstanceTypes"))) { #optional property not found
            $RequiredInstanceTypes = $null
        } else {
            $RequiredInstanceTypes = $JsonParameters.PSobject.Properties["requiredInstanceTypes"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "offerId" = ${OfferId}
            "offerName" = ${OfferName}
            "price" = ${Price}
            "buyerPrice" = ${BuyerPrice}
            "buyerPriceBeforeDiscount" = ${BuyerPriceBeforeDiscount}
            "priceBeforeDiscount" = ${PriceBeforeDiscount}
            "count" = ${Count}
            "vat" = ${Vat}
            "shopSku" = ${ShopSku}
            "subsidy" = ${Subsidy}
            "partnerWarehouseId" = ${PartnerWarehouseId}
            "promos" = ${Promos}
            "instances" = ${Instances}
            "details" = ${Details}
            "subsidies" = ${Subsidies}
            "requiredInstanceTypes" = ${RequiredInstanceTypes}
        }

        return $PSO
    }

}

