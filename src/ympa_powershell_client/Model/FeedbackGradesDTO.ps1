#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.

.PARAMETER Average
Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
.PARAMETER AgreeCount
Количество пользователей, считающих отзыв полезным.
.PARAMETER RejectCount
Количество пользователей, считающих отзыв бесполезным.
.PARAMETER Factors
Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
.OUTPUTS

FeedbackGradesDTO<PSCustomObject>
#>

function Initialize-FeedbackGradesDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Average},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AgreeCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RejectCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Factors}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FeedbackGradesDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Factors) {
            throw "invalid value for 'Factors', 'Factors' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "average" = ${Average}
            "agreeCount" = ${AgreeCount}
            "rejectCount" = ${RejectCount}
            "factors" = ${Factors}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FeedbackGradesDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FeedbackGradesDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FeedbackGradesDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFeedbackGradesDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FeedbackGradesDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FeedbackGradesDTO
        $AllProperties = ("average", "agreeCount", "rejectCount", "factors")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'factors' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "factors"))) {
            throw "Error! JSON cannot be serialized due to the required property 'factors' missing."
        } else {
            $Factors = $JsonParameters.PSobject.Properties["factors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "average"))) { #optional property not found
            $Average = $null
        } else {
            $Average = $JsonParameters.PSobject.Properties["average"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agreeCount"))) { #optional property not found
            $AgreeCount = $null
        } else {
            $AgreeCount = $JsonParameters.PSobject.Properties["agreeCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectCount"))) { #optional property not found
            $RejectCount = $null
        } else {
            $RejectCount = $JsonParameters.PSobject.Properties["rejectCount"].value
        }

        $PSO = [PSCustomObject]@{
            "average" = ${Average}
            "agreeCount" = ${AgreeCount}
            "rejectCount" = ${RejectCount}
            "factors" = ${Factors}
        }

        return $PSO
    }

}

