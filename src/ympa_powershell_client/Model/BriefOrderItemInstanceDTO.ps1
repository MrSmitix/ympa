#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 

.PARAMETER Cis
Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\u001d`!  ✅ `01030410947874432155Qbag!\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\` и `\""`  {% endnote %} 
.PARAMETER Uin
Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр. 
.PARAMETER Rnpt
Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
.PARAMETER Gtd
Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
.OUTPUTS

BriefOrderItemInstanceDTO<PSCustomObject>
#>

function Initialize-BriefOrderItemInstanceDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cis},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uin},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rnpt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gtd}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => BriefOrderItemInstanceDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cis" = ${Cis}
            "uin" = ${Uin}
            "rnpt" = ${Rnpt}
            "gtd" = ${Gtd}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BriefOrderItemInstanceDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to BriefOrderItemInstanceDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BriefOrderItemInstanceDTO<PSCustomObject>
#>
function ConvertFrom-JsonToBriefOrderItemInstanceDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => BriefOrderItemInstanceDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BriefOrderItemInstanceDTO
        $AllProperties = ("cis", "uin", "rnpt", "gtd")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cis"))) { #optional property not found
            $Cis = $null
        } else {
            $Cis = $JsonParameters.PSobject.Properties["cis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uin"))) { #optional property not found
            $Uin = $null
        } else {
            $Uin = $JsonParameters.PSobject.Properties["uin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rnpt"))) { #optional property not found
            $Rnpt = $null
        } else {
            $Rnpt = $JsonParameters.PSobject.Properties["rnpt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gtd"))) { #optional property not found
            $Gtd = $null
        } else {
            $Gtd = $JsonParameters.PSobject.Properties["gtd"].value
        }

        $PSO = [PSCustomObject]@{
            "cis" = ${Cis}
            "uin" = ${Uin}
            "rnpt" = ${Rnpt}
            "gtd" = ${Gtd}
        }

        return $PSO
    }

}

