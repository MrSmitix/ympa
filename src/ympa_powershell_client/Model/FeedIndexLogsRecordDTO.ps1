#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Список отчетов по индексации прайс-листа.

.PARAMETER DownloadTime
Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
.PARAMETER FileTime
Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
.PARAMETER GenerationId
Идентификатор индексации.
.PARAMETER IndexType
No description available.
.PARAMETER PublishedTime
Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
.PARAMETER Status
No description available.
.PARAMETER VarError
No description available.
.PARAMETER Offers
No description available.
.OUTPUTS

FeedIndexLogsRecordDTO<PSCustomObject>
#>

function Initialize-FeedIndexLogsRecordDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DownloadTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${FileTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${GenerationId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DIFF", "FAST_PRICE", "FULL")]
        [PSCustomObject]
        ${IndexType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${PublishedTime},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ERROR", "OK", "WARNING")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarError},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Offers}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FeedIndexLogsRecordDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "downloadTime" = ${DownloadTime}
            "fileTime" = ${FileTime}
            "generationId" = ${GenerationId}
            "indexType" = ${IndexType}
            "publishedTime" = ${PublishedTime}
            "status" = ${Status}
            "error" = ${VarError}
            "offers" = ${Offers}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FeedIndexLogsRecordDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FeedIndexLogsRecordDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FeedIndexLogsRecordDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFeedIndexLogsRecordDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FeedIndexLogsRecordDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FeedIndexLogsRecordDTO
        $AllProperties = ("downloadTime", "fileTime", "generationId", "indexType", "publishedTime", "status", "error", "offers")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "downloadTime"))) { #optional property not found
            $DownloadTime = $null
        } else {
            $DownloadTime = $JsonParameters.PSobject.Properties["downloadTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileTime"))) { #optional property not found
            $FileTime = $null
        } else {
            $FileTime = $JsonParameters.PSobject.Properties["fileTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "generationId"))) { #optional property not found
            $GenerationId = $null
        } else {
            $GenerationId = $JsonParameters.PSobject.Properties["generationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "indexType"))) { #optional property not found
            $IndexType = $null
        } else {
            $IndexType = $JsonParameters.PSobject.Properties["indexType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publishedTime"))) { #optional property not found
            $PublishedTime = $null
        } else {
            $PublishedTime = $JsonParameters.PSobject.Properties["publishedTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offers"))) { #optional property not found
            $Offers = $null
        } else {
            $Offers = $JsonParameters.PSobject.Properties["offers"].value
        }

        $PSO = [PSCustomObject]@{
            "downloadTime" = ${DownloadTime}
            "fileTime" = ${FileTime}
            "generationId" = ${GenerationId}
            "indexType" = ${IndexType}
            "publishedTime" = ${PublishedTime}
            "status" = ${Status}
            "error" = ${VarError}
            "offers" = ${Offers}
        }

        return $PSO
    }

}

