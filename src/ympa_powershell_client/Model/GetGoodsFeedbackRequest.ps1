#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Фильтр запроса отзывов в кабинете. 

.PARAMETER DateTimeFrom
Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 
.PARAMETER DateTimeTo
Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
.PARAMETER ReactionStatus
No description available.
.PARAMETER RatingValues
Оценка товара.
.PARAMETER ModelIds
Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
.PARAMETER Paid
Фильтр отзывов за баллы Плюса.
.OUTPUTS

GetGoodsFeedbackRequest<PSCustomObject>
#>

function Initialize-GetGoodsFeedbackRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeFrom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeTo},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALL", "NEED_REACTION")]
        [PSCustomObject]
        ${ReactionStatus},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${RatingValues},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${ModelIds},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Paid}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetGoodsFeedbackRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$RatingValues -and $RatingValues.length -gt 5) {
            throw "invalid value for 'RatingValues', number of items must be less than or equal to 5."
        }

        if (!$ModelIds -and $ModelIds.length -gt 20) {
            throw "invalid value for 'ModelIds', number of items must be less than or equal to 20."
        }


        $PSO = [PSCustomObject]@{
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "reactionStatus" = ${ReactionStatus}
            "ratingValues" = ${RatingValues}
            "modelIds" = ${ModelIds}
            "paid" = ${Paid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetGoodsFeedbackRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetGoodsFeedbackRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetGoodsFeedbackRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetGoodsFeedbackRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetGoodsFeedbackRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetGoodsFeedbackRequest
        $AllProperties = ("dateTimeFrom", "dateTimeTo", "reactionStatus", "ratingValues", "modelIds", "paid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeFrom"))) { #optional property not found
            $DateTimeFrom = $null
        } else {
            $DateTimeFrom = $JsonParameters.PSobject.Properties["dateTimeFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeTo"))) { #optional property not found
            $DateTimeTo = $null
        } else {
            $DateTimeTo = $JsonParameters.PSobject.Properties["dateTimeTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reactionStatus"))) { #optional property not found
            $ReactionStatus = $null
        } else {
            $ReactionStatus = $JsonParameters.PSobject.Properties["reactionStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ratingValues"))) { #optional property not found
            $RatingValues = $null
        } else {
            $RatingValues = $JsonParameters.PSobject.Properties["ratingValues"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modelIds"))) { #optional property not found
            $ModelIds = $null
        } else {
            $ModelIds = $JsonParameters.PSobject.Properties["modelIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paid"))) { #optional property not found
            $Paid = $null
        } else {
            $Paid = $JsonParameters.PSobject.Properties["paid"].value
        }

        $PSO = [PSCustomObject]@{
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "reactionStatus" = ${ReactionStatus}
            "ratingValues" = ${RatingValues}
            "modelIds" = ${ModelIds}
            "paid" = ${Paid}
        }

        return $PSO
    }

}

