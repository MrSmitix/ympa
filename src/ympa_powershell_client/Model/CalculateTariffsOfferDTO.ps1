#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Параметры товара, для которого нужно рассчитать стоимость услуг.

.PARAMETER CategoryId
Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
.PARAMETER Price
Цена на товар в рублях.
.PARAMETER Length
Длина товара в сантиметрах.
.PARAMETER Width
Ширина товара в сантиметрах.
.PARAMETER Height
Высота товара в сантиметрах.
.PARAMETER Weight
Вес товара в килограммах.
.PARAMETER Quantity
Квант продажи — количество единиц товара в одном товарном предложении.
.OUTPUTS

CalculateTariffsOfferDTO<PSCustomObject>
#>

function Initialize-CalculateTariffsOfferDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${CategoryId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Price},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Length},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Width},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Height},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Weight},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Quantity} = 1
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CalculateTariffsOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CategoryId) {
            throw "invalid value for 'CategoryId', 'CategoryId' cannot be null."
        }

        if ($CategoryId -le 0) {
          throw "invalid value for 'CategoryId', must be greater than 0."
        }

        if ($null -eq $Price) {
            throw "invalid value for 'Price', 'Price' cannot be null."
        }

        if ($Price -le 0) {
          throw "invalid value for 'Price', must be greater than 0."
        }

        if ($null -eq $Length) {
            throw "invalid value for 'Length', 'Length' cannot be null."
        }

        if ($Length -le 0) {
          throw "invalid value for 'Length', must be greater than 0."
        }

        if ($null -eq $Width) {
            throw "invalid value for 'Width', 'Width' cannot be null."
        }

        if ($Width -le 0) {
          throw "invalid value for 'Width', must be greater than 0."
        }

        if ($null -eq $Height) {
            throw "invalid value for 'Height', 'Height' cannot be null."
        }

        if ($Height -le 0) {
          throw "invalid value for 'Height', must be greater than 0."
        }

        if ($null -eq $Weight) {
            throw "invalid value for 'Weight', 'Weight' cannot be null."
        }

        if ($Weight -le 0) {
          throw "invalid value for 'Weight', must be greater than 0."
        }

        if ($Quantity -and $Quantity -lt 1) {
          throw "invalid value for 'Quantity', must be greater than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "categoryId" = ${CategoryId}
            "price" = ${Price}
            "length" = ${Length}
            "width" = ${Width}
            "height" = ${Height}
            "weight" = ${Weight}
            "quantity" = ${Quantity}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CalculateTariffsOfferDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CalculateTariffsOfferDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CalculateTariffsOfferDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCalculateTariffsOfferDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CalculateTariffsOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CalculateTariffsOfferDTO
        $AllProperties = ("categoryId", "price", "length", "width", "height", "weight", "quantity")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'categoryId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "categoryId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'categoryId' missing."
        } else {
            $CategoryId = $JsonParameters.PSobject.Properties["categoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) {
            throw "Error! JSON cannot be serialized due to the required property 'price' missing."
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "length"))) {
            throw "Error! JSON cannot be serialized due to the required property 'length' missing."
        } else {
            $Length = $JsonParameters.PSobject.Properties["length"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "width"))) {
            throw "Error! JSON cannot be serialized due to the required property 'width' missing."
        } else {
            $Width = $JsonParameters.PSobject.Properties["width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "height"))) {
            throw "Error! JSON cannot be serialized due to the required property 'height' missing."
        } else {
            $Height = $JsonParameters.PSobject.Properties["height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) {
            throw "Error! JSON cannot be serialized due to the required property 'weight' missing."
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quantity"))) { #optional property not found
            $Quantity = $null
        } else {
            $Quantity = $JsonParameters.PSobject.Properties["quantity"].value
        }

        $PSO = [PSCustomObject]@{
            "categoryId" = ${CategoryId}
            "price" = ${Price}
            "length" = ${Length}
            "width" = ${Width}
            "height" = ${Height}
            "weight" = ${Weight}
            "quantity" = ${Quantity}
        }

        return $PSO
    }

}

