#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Решения по возвратам.

.PARAMETER ReturnItemId
Идентификатор товара в возврате.
.PARAMETER Count
Количество единиц товара.
.PARAMETER Comment
Комментарий.
.PARAMETER ReasonType
No description available.
.PARAMETER SubreasonType
No description available.
.PARAMETER DecisionType
No description available.
.PARAMETER RefundAmount
Сумма возврата.
.PARAMETER PartnerCompensation
Компенсация за обратную доставку.
.PARAMETER Images
Список хеш-кодов фотографий товара от покупателя.
.OUTPUTS

ReturnDecisionDTO<PSCustomObject>
#>

function Initialize-ReturnDecisionDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReturnItemId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("BAD_QUALITY", "DOES_NOT_FIT", "WRONG_ITEM", "DAMAGE_DELIVERY", "LOYALTY_FAIL", "CONTENT_FAIL", "UNKNOWN")]
        [PSCustomObject]
        ${ReasonType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("USER_DID_NOT_LIKE", "USER_CHANGED_MIND", "DELIVERED_TOO_LONG", "BAD_PACKAGE", "DAMAGED", "NOT_WORKING", "INCOMPLETENESS", "WRONG_ITEM", "WRONG_COLOR", "DID_NOT_MATCH_DESCRIPTION", "UNKNOWN")]
        [PSCustomObject]
        ${SubreasonType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("REFUND_MONEY", "REFUND_MONEY_INCLUDING_SHIPMENT", "REPAIR", "REPLACE", "SEND_TO_EXAMINATION", "DECLINE_REFUND", "OTHER_DECISION", "UNKNOWN")]
        [PSCustomObject]
        ${DecisionType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RefundAmount},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${PartnerCompensation},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Images}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ReturnDecisionDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "returnItemId" = ${ReturnItemId}
            "count" = ${Count}
            "comment" = ${Comment}
            "reasonType" = ${ReasonType}
            "subreasonType" = ${SubreasonType}
            "decisionType" = ${DecisionType}
            "refundAmount" = ${RefundAmount}
            "partnerCompensation" = ${PartnerCompensation}
            "images" = ${Images}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReturnDecisionDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReturnDecisionDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReturnDecisionDTO<PSCustomObject>
#>
function ConvertFrom-JsonToReturnDecisionDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ReturnDecisionDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReturnDecisionDTO
        $AllProperties = ("returnItemId", "count", "comment", "reasonType", "subreasonType", "decisionType", "refundAmount", "partnerCompensation", "images")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "returnItemId"))) { #optional property not found
            $ReturnItemId = $null
        } else {
            $ReturnItemId = $JsonParameters.PSobject.Properties["returnItemId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reasonType"))) { #optional property not found
            $ReasonType = $null
        } else {
            $ReasonType = $JsonParameters.PSobject.Properties["reasonType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subreasonType"))) { #optional property not found
            $SubreasonType = $null
        } else {
            $SubreasonType = $JsonParameters.PSobject.Properties["subreasonType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "decisionType"))) { #optional property not found
            $DecisionType = $null
        } else {
            $DecisionType = $JsonParameters.PSobject.Properties["decisionType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refundAmount"))) { #optional property not found
            $RefundAmount = $null
        } else {
            $RefundAmount = $JsonParameters.PSobject.Properties["refundAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerCompensation"))) { #optional property not found
            $PartnerCompensation = $null
        } else {
            $PartnerCompensation = $JsonParameters.PSobject.Properties["partnerCompensation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "images"))) { #optional property not found
            $Images = $null
        } else {
            $Images = $JsonParameters.PSobject.Properties["images"].value
        }

        $PSO = [PSCustomObject]@{
            "returnItemId" = ${ReturnItemId}
            "count" = ${Count}
            "comment" = ${Comment}
            "reasonType" = ${ReasonType}
            "subreasonType" = ${SubreasonType}
            "decisionType" = ${DecisionType}
            "refundAmount" = ${RefundAmount}
            "partnerCompensation" = ${PartnerCompensation}
            "images" = ${Images}
        }

        return $PSO
    }

}

