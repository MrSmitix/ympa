#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Расписание работы службы доставки в своем регионе.

.PARAMETER AvailableOnHolidays
Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. 
.PARAMETER CustomHolidays
Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
.PARAMETER CustomWorkingDays
Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
.PARAMETER Period
No description available.
.PARAMETER TotalHolidays
Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
.PARAMETER WeeklyHolidays
Список выходных дней недели и государственных праздников.
.OUTPUTS

CampaignSettingsScheduleDTO<PSCustomObject>
#>

function Initialize-CampaignSettingsScheduleDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AvailableOnHolidays},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CustomHolidays},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CustomWorkingDays},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Period},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${TotalHolidays},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${WeeklyHolidays}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => CampaignSettingsScheduleDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $CustomHolidays) {
            throw "invalid value for 'CustomHolidays', 'CustomHolidays' cannot be null."
        }

        if ($null -eq $CustomWorkingDays) {
            throw "invalid value for 'CustomWorkingDays', 'CustomWorkingDays' cannot be null."
        }

        if ($null -eq $TotalHolidays) {
            throw "invalid value for 'TotalHolidays', 'TotalHolidays' cannot be null."
        }

        if ($null -eq $WeeklyHolidays) {
            throw "invalid value for 'WeeklyHolidays', 'WeeklyHolidays' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "availableOnHolidays" = ${AvailableOnHolidays}
            "customHolidays" = ${CustomHolidays}
            "customWorkingDays" = ${CustomWorkingDays}
            "period" = ${Period}
            "totalHolidays" = ${TotalHolidays}
            "weeklyHolidays" = ${WeeklyHolidays}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CampaignSettingsScheduleDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CampaignSettingsScheduleDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CampaignSettingsScheduleDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCampaignSettingsScheduleDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => CampaignSettingsScheduleDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CampaignSettingsScheduleDTO
        $AllProperties = ("availableOnHolidays", "customHolidays", "customWorkingDays", "period", "totalHolidays", "weeklyHolidays")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'customHolidays' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customHolidays"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customHolidays' missing."
        } else {
            $CustomHolidays = $JsonParameters.PSobject.Properties["customHolidays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customWorkingDays"))) {
            throw "Error! JSON cannot be serialized due to the required property 'customWorkingDays' missing."
        } else {
            $CustomWorkingDays = $JsonParameters.PSobject.Properties["customWorkingDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalHolidays"))) {
            throw "Error! JSON cannot be serialized due to the required property 'totalHolidays' missing."
        } else {
            $TotalHolidays = $JsonParameters.PSobject.Properties["totalHolidays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weeklyHolidays"))) {
            throw "Error! JSON cannot be serialized due to the required property 'weeklyHolidays' missing."
        } else {
            $WeeklyHolidays = $JsonParameters.PSobject.Properties["weeklyHolidays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availableOnHolidays"))) { #optional property not found
            $AvailableOnHolidays = $null
        } else {
            $AvailableOnHolidays = $JsonParameters.PSobject.Properties["availableOnHolidays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "period"))) { #optional property not found
            $Period = $null
        } else {
            $Period = $JsonParameters.PSobject.Properties["period"].value
        }

        $PSO = [PSCustomObject]@{
            "availableOnHolidays" = ${AvailableOnHolidays}
            "customHolidays" = ${CustomHolidays}
            "customWorkingDays" = ${CustomWorkingDays}
            "period" = ${Period}
            "totalHolidays" = ${TotalHolidays}
            "weeklyHolidays" = ${WeeklyHolidays}
        }

        return $PSO
    }

}

