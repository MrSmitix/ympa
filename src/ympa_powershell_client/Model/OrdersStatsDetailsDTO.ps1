#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация об удалении товара из заказа.

.PARAMETER ItemStatus
No description available.
.PARAMETER ItemCount
Количество товара со статусом, указанном в параметре `itemStatus`.
.PARAMETER UpdateDate
Дата, когда товар получил статус, указанный в параметре `itemStatus`.  Формат даты: `ГГГГ-ММ-ДД`. 
.PARAMETER StockType
No description available.
.OUTPUTS

OrdersStatsDetailsDTO<PSCustomObject>
#>

function Initialize-OrdersStatsDetailsDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("REJECTED", "RETURNED")]
        [PSCustomObject]
        ${ItemStatus},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ItemCount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdateDate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("FIT", "FREEZE", "AVAILABLE", "QUARANTINE", "UTILIZATION", "DEFECT", "EXPIRED")]
        [PSCustomObject]
        ${StockType}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrdersStatsDetailsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "itemStatus" = ${ItemStatus}
            "itemCount" = ${ItemCount}
            "updateDate" = ${UpdateDate}
            "stockType" = ${StockType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrdersStatsDetailsDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrdersStatsDetailsDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrdersStatsDetailsDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrdersStatsDetailsDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrdersStatsDetailsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrdersStatsDetailsDTO
        $AllProperties = ("itemStatus", "itemCount", "updateDate", "stockType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "itemStatus"))) { #optional property not found
            $ItemStatus = $null
        } else {
            $ItemStatus = $JsonParameters.PSobject.Properties["itemStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "itemCount"))) { #optional property not found
            $ItemCount = $null
        } else {
            $ItemCount = $JsonParameters.PSobject.Properties["itemCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateDate"))) { #optional property not found
            $UpdateDate = $null
        } else {
            $UpdateDate = $JsonParameters.PSobject.Properties["updateDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stockType"))) { #optional property not found
            $StockType = $null
        } else {
            $StockType = $JsonParameters.PSobject.Properties["stockType"].value
        }

        $PSO = [PSCustomObject]@{
            "itemStatus" = ${ItemStatus}
            "itemCount" = ${ItemCount}
            "updateDate" = ${UpdateDate}
            "stockType" = ${StockType}
        }

        return $PSO
    }

}

