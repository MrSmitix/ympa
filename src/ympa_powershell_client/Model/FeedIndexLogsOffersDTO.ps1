#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о предложениях прайс-листа.

.PARAMETER RejectedCount
Количество предложений, который не опубликованы на Маркете из-за найденных ошибок.
.PARAMETER TotalCount
Количество предложений в прайс-листе.
.OUTPUTS

FeedIndexLogsOffersDTO<PSCustomObject>
#>

function Initialize-FeedIndexLogsOffersDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${RejectedCount},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalCount}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FeedIndexLogsOffersDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "rejectedCount" = ${RejectedCount}
            "totalCount" = ${TotalCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FeedIndexLogsOffersDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FeedIndexLogsOffersDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FeedIndexLogsOffersDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFeedIndexLogsOffersDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FeedIndexLogsOffersDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FeedIndexLogsOffersDTO
        $AllProperties = ("rejectedCount", "totalCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejectedCount"))) { #optional property not found
            $RejectedCount = $null
        } else {
            $RejectedCount = $JsonParameters.PSobject.Properties["rejectedCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalCount"))) { #optional property not found
            $TotalCount = $null
        } else {
            $TotalCount = $JsonParameters.PSobject.Properties["totalCount"].value
        }

        $PSO = [PSCustomObject]@{
            "rejectedCount" = ${RejectedCount}
            "totalCount" = ${TotalCount}
        }

        return $PSO
    }

}

