#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Модель для пагинации.

.PARAMETER Total
Сколько всего найдено элементов.
.PARAMETER VarFrom
Начальный номер найденного элемента на странице.
.PARAMETER To
Конечный номер найденного элемента на странице.
.PARAMETER CurrentPage
Текущая страница.
.PARAMETER PagesCount
Общее количество страниц.
.PARAMETER PageSize
Размер страницы.
.OUTPUTS

FlippingPagerDTO<PSCustomObject>
#>

function Initialize-FlippingPagerDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Total},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VarFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${To},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CurrentPage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PagesCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PageSize}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FlippingPagerDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "from" = ${VarFrom}
            "to" = ${To}
            "currentPage" = ${CurrentPage}
            "pagesCount" = ${PagesCount}
            "pageSize" = ${PageSize}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FlippingPagerDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FlippingPagerDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FlippingPagerDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFlippingPagerDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FlippingPagerDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FlippingPagerDTO
        $AllProperties = ("total", "from", "to", "currentPage", "pagesCount", "pageSize")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentPage"))) { #optional property not found
            $CurrentPage = $null
        } else {
            $CurrentPage = $JsonParameters.PSobject.Properties["currentPage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pagesCount"))) { #optional property not found
            $PagesCount = $null
        } else {
            $PagesCount = $JsonParameters.PSobject.Properties["pagesCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pageSize"))) { #optional property not found
            $PageSize = $null
        } else {
            $PageSize = $JsonParameters.PSobject.Properties["pageSize"].value
        }

        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "from" = ${VarFrom}
            "to" = ${To}
            "currentPage" = ${CurrentPage}
            "pagesCount" = ${PagesCount}
            "pageSize" = ${PageSize}
        }

        return $PSO
    }

}

