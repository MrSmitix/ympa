#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Адрес склада.

.PARAMETER City
Город.
.PARAMETER Street
Улица.
.PARAMETER Number
Номер дома.
.PARAMETER Building
Номер строения.
.PARAMETER Block
Номер корпуса.
.PARAMETER Gps
No description available.
.OUTPUTS

WarehouseAddressDTO<PSCustomObject>
#>

function Initialize-WarehouseAddressDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Street},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Number},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Building},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Block},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Gps}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => WarehouseAddressDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $City) {
            throw "invalid value for 'City', 'City' cannot be null."
        }

        if ($City.length -gt 200) {
            throw "invalid value for 'City', the character length must be smaller than or equal to 200."
        }

        if (!$Street -and $Street.length -gt 512) {
            throw "invalid value for 'Street', the character length must be smaller than or equal to 512."
        }

        if (!$Number -and $Number.length -gt 256) {
            throw "invalid value for 'Number', the character length must be smaller than or equal to 256."
        }

        if (!$Building -and $Building.length -gt 16) {
            throw "invalid value for 'Building', the character length must be smaller than or equal to 16."
        }

        if (!$Block -and $Block.length -gt 16) {
            throw "invalid value for 'Block', the character length must be smaller than or equal to 16."
        }

        if ($null -eq $Gps) {
            throw "invalid value for 'Gps', 'Gps' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "city" = ${City}
            "street" = ${Street}
            "number" = ${Number}
            "building" = ${Building}
            "block" = ${Block}
            "gps" = ${Gps}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WarehouseAddressDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to WarehouseAddressDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WarehouseAddressDTO<PSCustomObject>
#>
function ConvertFrom-JsonToWarehouseAddressDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => WarehouseAddressDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WarehouseAddressDTO
        $AllProperties = ("city", "street", "number", "building", "block", "gps")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'city' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) {
            throw "Error! JSON cannot be serialized due to the required property 'city' missing."
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gps"))) {
            throw "Error! JSON cannot be serialized due to the required property 'gps' missing."
        } else {
            $Gps = $JsonParameters.PSobject.Properties["gps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "street"))) { #optional property not found
            $Street = $null
        } else {
            $Street = $JsonParameters.PSobject.Properties["street"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "building"))) { #optional property not found
            $Building = $null
        } else {
            $Building = $JsonParameters.PSobject.Properties["building"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block"))) { #optional property not found
            $Block = $null
        } else {
            $Block = $JsonParameters.PSobject.Properties["block"].value
        }

        $PSO = [PSCustomObject]@{
            "city" = ${City}
            "street" = ${Street}
            "number" = ${Number}
            "building" = ${Building}
            "block" = ${Block}
            "gps" = ${Gps}
        }

        return $PSO
    }

}

