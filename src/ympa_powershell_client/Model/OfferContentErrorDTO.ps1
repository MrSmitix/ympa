#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Текст ошибки.

.PARAMETER Type
No description available.
.PARAMETER ParameterId
Идентификатор характеристики, с которой связана ошибка.
.PARAMETER Message
Текст ошибки.
.OUTPUTS

OfferContentErrorDTO<PSCustomObject>
#>

function Initialize-OfferContentErrorDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("OFFER_NOT_FOUND", "UNKNOWN_CATEGORY", "CATEGORY_MISMATCH", "UNKNOWN_PARAMETER", "UNEXPECTED_BOOLEAN_VALUE", "NUMBER_FORMAT", "VALUE_BLANK", "INVALID_UNIT_ID", "INVALID_GROUP_ID_LENGTH", "INVALID_GROUP_ID_CHARACTERS")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ParameterId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OfferContentErrorDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Message) {
            throw "invalid value for 'Message', 'Message' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "parameterId" = ${ParameterId}
            "message" = ${Message}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OfferContentErrorDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OfferContentErrorDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OfferContentErrorDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOfferContentErrorDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OfferContentErrorDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OfferContentErrorDTO
        $AllProperties = ("type", "parameterId", "message")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) {
            throw "Error! JSON cannot be serialized due to the required property 'message' missing."
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameterId"))) { #optional property not found
            $ParameterId = $null
        } else {
            $ParameterId = $JsonParameters.PSobject.Properties["parameterId"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "parameterId" = ${ParameterId}
            "message" = ${Message}
        }

        return $PSO
    }

}

