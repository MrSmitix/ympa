#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Отзыв пользователя Яндекс Маркета об указанном магазине.

.PARAMETER Id
Идентификатор отзыва.
.PARAMETER CreatedAt
Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
.PARAMETER Text
Комментарий автора отзыва.
.PARAMETER State
No description available.
.PARAMETER Author
No description available.
.PARAMETER Pro
Достоинства магазина, описанные в отзыве.
.PARAMETER Contra
Недостатки магазина, описанные в отзыве.
.PARAMETER Comments
Переписка автора отзыва с магазином.
.PARAMETER Shop
No description available.
.PARAMETER Resolved
Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
.PARAMETER Verified
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
.PARAMETER Recommend
Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
.PARAMETER Grades
No description available.
.PARAMETER Order
No description available.
.OUTPUTS

FeedbackDTO<PSCustomObject>
#>

function Initialize-FeedbackDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LAST", "PREVIOUS", "DELETED")]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Author},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pro},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Contra},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Comments},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Shop},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Verified},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Recommend},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Grades},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Order}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => FeedbackDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Comments) {
            throw "invalid value for 'Comments', 'Comments' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdAt" = ${CreatedAt}
            "text" = ${Text}
            "state" = ${State}
            "author" = ${Author}
            "pro" = ${Pro}
            "contra" = ${Contra}
            "comments" = ${Comments}
            "shop" = ${Shop}
            "resolved" = ${Resolved}
            "verified" = ${Verified}
            "recommend" = ${Recommend}
            "grades" = ${Grades}
            "order" = ${Order}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FeedbackDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to FeedbackDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FeedbackDTO<PSCustomObject>
#>
function ConvertFrom-JsonToFeedbackDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => FeedbackDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FeedbackDTO
        $AllProperties = ("id", "createdAt", "text", "state", "author", "pro", "contra", "comments", "shop", "resolved", "verified", "recommend", "grades", "order")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'comments' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'comments' missing."
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdAt"))) { #optional property not found
            $CreatedAt = $null
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["createdAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) { #optional property not found
            $Text = $null
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pro"))) { #optional property not found
            $Pro = $null
        } else {
            $Pro = $JsonParameters.PSobject.Properties["pro"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contra"))) { #optional property not found
            $Contra = $null
        } else {
            $Contra = $JsonParameters.PSobject.Properties["contra"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shop"))) { #optional property not found
            $Shop = $null
        } else {
            $Shop = $JsonParameters.PSobject.Properties["shop"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verified"))) { #optional property not found
            $Verified = $null
        } else {
            $Verified = $JsonParameters.PSobject.Properties["verified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recommend"))) { #optional property not found
            $Recommend = $null
        } else {
            $Recommend = $JsonParameters.PSobject.Properties["recommend"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grades"))) { #optional property not found
            $Grades = $null
        } else {
            $Grades = $JsonParameters.PSobject.Properties["grades"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order"))) { #optional property not found
            $Order = $null
        } else {
            $Order = $JsonParameters.PSobject.Properties["order"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdAt" = ${CreatedAt}
            "text" = ${Text}
            "state" = ${State}
            "author" = ${Author}
            "pro" = ${Pro}
            "contra" = ${Contra}
            "comments" = ${Comments}
            "shop" = ${Shop}
            "resolved" = ${Resolved}
            "verified" = ${Verified}
            "recommend" = ${Recommend}
            "grades" = ${Grades}
            "order" = ${Order}
        }

        return $PSO
    }

}

