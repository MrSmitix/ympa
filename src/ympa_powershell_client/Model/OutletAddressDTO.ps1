#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Адрес точки продаж. 

.PARAMETER RegionId
Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
.PARAMETER Street
Улица.
.PARAMETER Number
Номер дома.
.PARAMETER Building
Номер строения.
.PARAMETER Estate
Номер владения.
.PARAMETER Block
Номер корпуса.
.PARAMETER Additional
Дополнительная информация.
.PARAMETER Km
Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
.PARAMETER City
{% note warning """" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
.OUTPUTS

OutletAddressDTO<PSCustomObject>
#>

function Initialize-OutletAddressDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${RegionId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Street},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Number},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Building},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Estate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Block},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Additional},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Km},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OutletAddressDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $RegionId) {
            throw "invalid value for 'RegionId', 'RegionId' cannot be null."
        }

        if (!$Street -and $Street.length -gt 512) {
            throw "invalid value for 'Street', the character length must be smaller than or equal to 512."
        }

        if (!$Number -and $Number.length -gt 256) {
            throw "invalid value for 'Number', the character length must be smaller than or equal to 256."
        }

        if (!$Building -and $Building.length -gt 16) {
            throw "invalid value for 'Building', the character length must be smaller than or equal to 16."
        }

        if (!$Estate -and $Estate.length -gt 16) {
            throw "invalid value for 'Estate', the character length must be smaller than or equal to 16."
        }

        if (!$Block -and $Block.length -gt 16) {
            throw "invalid value for 'Block', the character length must be smaller than or equal to 16."
        }

        if (!$City -and $City.length -gt 200) {
            throw "invalid value for 'City', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "regionId" = ${RegionId}
            "street" = ${Street}
            "number" = ${Number}
            "building" = ${Building}
            "estate" = ${Estate}
            "block" = ${Block}
            "additional" = ${Additional}
            "km" = ${Km}
            "city" = ${City}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OutletAddressDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OutletAddressDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OutletAddressDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOutletAddressDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OutletAddressDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OutletAddressDTO
        $AllProperties = ("regionId", "street", "number", "building", "estate", "block", "additional", "km", "city")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'regionId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regionId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'regionId' missing."
        } else {
            $RegionId = $JsonParameters.PSobject.Properties["regionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "street"))) { #optional property not found
            $Street = $null
        } else {
            $Street = $JsonParameters.PSobject.Properties["street"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "building"))) { #optional property not found
            $Building = $null
        } else {
            $Building = $JsonParameters.PSobject.Properties["building"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "estate"))) { #optional property not found
            $Estate = $null
        } else {
            $Estate = $JsonParameters.PSobject.Properties["estate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block"))) { #optional property not found
            $Block = $null
        } else {
            $Block = $JsonParameters.PSobject.Properties["block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additional"))) { #optional property not found
            $Additional = $null
        } else {
            $Additional = $JsonParameters.PSobject.Properties["additional"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "km"))) { #optional property not found
            $Km = $null
        } else {
            $Km = $JsonParameters.PSobject.Properties["km"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        $PSO = [PSCustomObject]@{
            "regionId" = ${RegionId}
            "street" = ${Street}
            "number" = ${Number}
            "building" = ${Building}
            "estate" = ${Estate}
            "block" = ${Block}
            "additional" = ${Additional}
            "km" = ${Km}
            "city" = ${City}
        }

        return $PSO
    }

}

