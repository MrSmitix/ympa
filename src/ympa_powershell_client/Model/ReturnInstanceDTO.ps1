#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Логистическая информация по возврату.

.PARAMETER StockType
No description available.
.PARAMETER Status
No description available.
.PARAMETER Cis
Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
.PARAMETER Imei
Международный идентификатор мобильного оборудования.
.OUTPUTS

ReturnInstanceDTO<PSCustomObject>
#>

function Initialize-ReturnInstanceDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("FIT", "DEFECT", "ANOMALY", "SURPLUS", "EXPIRED", "MISGRADING", "UNDEFINED", "INCORRECT_IMEI", "INCORRECT_SERIAL_NUMBER", "INCORRECT_CIS", "PART_MISSING", "NON_COMPLIENT", "NOT_ACCEPTABLE", "SERVICE", "MARKDOWN", "DEMO", "REPAIR", "FIRMWARE", "UNKNOWN")]
        [PSCustomObject]
        ${StockType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREATED", "RECEIVED", "IN_TRANSIT", "READY_FOR_PICKUP", "PICKED", "RECEIVED_ON_FULFILLMENT", "CANCELLED", "LOST", "UTILIZED", "PREPARED_FOR_UTILIZATION", "EXPROPRIATED", "NOT_IN_DEMAND")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cis},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Imei}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => ReturnInstanceDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "stockType" = ${StockType}
            "status" = ${Status}
            "cis" = ${Cis}
            "imei" = ${Imei}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ReturnInstanceDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to ReturnInstanceDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ReturnInstanceDTO<PSCustomObject>
#>
function ConvertFrom-JsonToReturnInstanceDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => ReturnInstanceDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ReturnInstanceDTO
        $AllProperties = ("stockType", "status", "cis", "imei")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stockType"))) { #optional property not found
            $StockType = $null
        } else {
            $StockType = $JsonParameters.PSobject.Properties["stockType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cis"))) { #optional property not found
            $Cis = $null
        } else {
            $Cis = $JsonParameters.PSobject.Properties["cis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "imei"))) { #optional property not found
            $Imei = $null
        } else {
            $Imei = $JsonParameters.PSobject.Properties["imei"].value
        }

        $PSO = [PSCustomObject]@{
            "stockType" = ${StockType}
            "status" = ${Status}
            "cis" = ${Cis}
            "imei" = ${Imei}
        }

        return $PSO
    }

}

