#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Запрос информации по заказам.

.PARAMETER DateFrom
Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
.PARAMETER DateTo
Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
.PARAMETER UpdateFrom
Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
.PARAMETER UpdateTo
Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
.PARAMETER Orders
Список идентификаторов заказов.
.PARAMETER Statuses
Список статусов заказов.
.PARAMETER HasCis
Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
.OUTPUTS

GetOrdersStatsRequest<PSCustomObject>
#>

function Initialize-GetOrdersStatsRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateFrom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTo},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdateFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UpdateTo},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${Orders},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Statuses},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasCis}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GetOrdersStatsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "updateFrom" = ${UpdateFrom}
            "updateTo" = ${UpdateTo}
            "orders" = ${Orders}
            "statuses" = ${Statuses}
            "hasCis" = ${HasCis}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GetOrdersStatsRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GetOrdersStatsRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GetOrdersStatsRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGetOrdersStatsRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GetOrdersStatsRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GetOrdersStatsRequest
        $AllProperties = ("dateFrom", "dateTo", "updateFrom", "updateTo", "orders", "statuses", "hasCis")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFrom"))) { #optional property not found
            $DateFrom = $null
        } else {
            $DateFrom = $JsonParameters.PSobject.Properties["dateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTo"))) { #optional property not found
            $DateTo = $null
        } else {
            $DateTo = $JsonParameters.PSobject.Properties["dateTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateFrom"))) { #optional property not found
            $UpdateFrom = $null
        } else {
            $UpdateFrom = $JsonParameters.PSobject.Properties["updateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateTo"))) { #optional property not found
            $UpdateTo = $null
        } else {
            $UpdateTo = $JsonParameters.PSobject.Properties["updateTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orders"))) { #optional property not found
            $Orders = $null
        } else {
            $Orders = $JsonParameters.PSobject.Properties["orders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statuses"))) { #optional property not found
            $Statuses = $null
        } else {
            $Statuses = $JsonParameters.PSobject.Properties["statuses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasCis"))) { #optional property not found
            $HasCis = $null
        } else {
            $HasCis = $JsonParameters.PSobject.Properties["hasCis"].value
        }

        $PSO = [PSCustomObject]@{
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "updateFrom" = ${UpdateFrom}
            "updateTo" = ${UpdateTo}
            "orders" = ${Orders}
            "statuses" = ${Statuses}
            "hasCis" = ${HasCis}
        }

        return $PSO
    }

}

