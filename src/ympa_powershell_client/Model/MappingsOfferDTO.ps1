#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о товарах в каталоге.

.PARAMETER Name
Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
.PARAMETER ShopSku
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER Category
Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
.PARAMETER Vendor
Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
.PARAMETER VendorCode
Артикул товара от производителя.
.PARAMETER Description
Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \<h>, \<h1>, \<h2> и так далее — для заголовков; * \<br> и \<p> — для переноса строки; * \<ol> — для нумерованного списка; * \<ul> — для маркированного списка; * \<li> — для создания элементов списка (должен находиться внутри \<ol> или \<ul>); * \<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
.PARAMETER Id
Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
.PARAMETER FeedId
Идентификатор фида.
.PARAMETER Barcodes
Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
.PARAMETER Urls
URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
.PARAMETER Pictures
Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
.PARAMETER Manufacturer
Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
.PARAMETER ManufacturerCountries
Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
.PARAMETER MinShipment
Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
.PARAMETER TransportUnitSize
Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
.PARAMETER QuantumOfSupply
Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
.PARAMETER DeliveryDurationDays
Срок, за который продавец поставляет товары на склад, в днях.
.PARAMETER BoxCount
Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
.PARAMETER CustomsCommodityCodes
Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
.PARAMETER WeightDimensions
No description available.
.PARAMETER SupplyScheduleDays
Дни недели, в которые продавец поставляет товары на склад.
.PARAMETER ShelfLifeDays
{% note warning """" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
.PARAMETER LifeTimeDays
{% note warning """" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
.PARAMETER GuaranteePeriodDays
Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
.PARAMETER ProcessingState
No description available.
.PARAMETER Availability
No description available.
.PARAMETER ShelfLife
No description available.
.PARAMETER LifeTime
No description available.
.PARAMETER GuaranteePeriod
No description available.
.PARAMETER Certificate
Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
.PARAMETER Price
Цена на товар в рублях.
.OUTPUTS

MappingsOfferDTO<PSCustomObject>
#>

function Initialize-MappingsOfferDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${ShopSku},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Category},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Vendor},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VendorCode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$")]
        [String]
        ${Id},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FeedId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Barcodes},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Urls},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Pictures},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Manufacturer},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ManufacturerCountries},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinShipment},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TransportUnitSize},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${QuantumOfSupply},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DeliveryDurationDays},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BoxCount},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CustomsCommodityCodes},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WeightDimensions},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SupplyScheduleDays},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ShelfLifeDays},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LifeTimeDays},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${GuaranteePeriodDays},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProcessingState},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "INACTIVE", "DELISTED")]
        [PSCustomObject]
        ${Availability},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ShelfLife},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LifeTime},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GuaranteePeriod},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Certificate},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Price}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => MappingsOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 256) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 256."
        }

        if (!$ShopSku -and $ShopSku.length -gt 255) {
            throw "invalid value for 'ShopSku', the character length must be smaller than or equal to 255."
        }

        if (!$ShopSku -and $ShopSku.length -lt 1) {
            throw "invalid value for 'ShopSku', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 6000) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 6000."
        }

        if (!$Id -and $Id.length -gt 255) {
            throw "invalid value for 'Id', the character length must be smaller than or equal to 255."
        }

        if (!$Id -and $Id.length -lt 1) {
            throw "invalid value for 'Id', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "shopSku" = ${ShopSku}
            "category" = ${Category}
            "vendor" = ${Vendor}
            "vendorCode" = ${VendorCode}
            "description" = ${Description}
            "id" = ${Id}
            "feedId" = ${FeedId}
            "barcodes" = ${Barcodes}
            "urls" = ${Urls}
            "pictures" = ${Pictures}
            "manufacturer" = ${Manufacturer}
            "manufacturerCountries" = ${ManufacturerCountries}
            "minShipment" = ${MinShipment}
            "transportUnitSize" = ${TransportUnitSize}
            "quantumOfSupply" = ${QuantumOfSupply}
            "deliveryDurationDays" = ${DeliveryDurationDays}
            "boxCount" = ${BoxCount}
            "customsCommodityCodes" = ${CustomsCommodityCodes}
            "weightDimensions" = ${WeightDimensions}
            "supplyScheduleDays" = ${SupplyScheduleDays}
            "shelfLifeDays" = ${ShelfLifeDays}
            "lifeTimeDays" = ${LifeTimeDays}
            "guaranteePeriodDays" = ${GuaranteePeriodDays}
            "processingState" = ${ProcessingState}
            "availability" = ${Availability}
            "shelfLife" = ${ShelfLife}
            "lifeTime" = ${LifeTime}
            "guaranteePeriod" = ${GuaranteePeriod}
            "certificate" = ${Certificate}
            "price" = ${Price}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MappingsOfferDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to MappingsOfferDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MappingsOfferDTO<PSCustomObject>
#>
function ConvertFrom-JsonToMappingsOfferDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => MappingsOfferDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MappingsOfferDTO
        $AllProperties = ("name", "shopSku", "category", "vendor", "vendorCode", "description", "id", "feedId", "barcodes", "urls", "pictures", "manufacturer", "manufacturerCountries", "minShipment", "transportUnitSize", "quantumOfSupply", "deliveryDurationDays", "boxCount", "customsCommodityCodes", "weightDimensions", "supplyScheduleDays", "shelfLifeDays", "lifeTimeDays", "guaranteePeriodDays", "processingState", "availability", "shelfLife", "lifeTime", "guaranteePeriod", "certificate", "price")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shopSku"))) { #optional property not found
            $ShopSku = $null
        } else {
            $ShopSku = $JsonParameters.PSobject.Properties["shopSku"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) { #optional property not found
            $Category = $null
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendor"))) { #optional property not found
            $Vendor = $null
        } else {
            $Vendor = $JsonParameters.PSobject.Properties["vendor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vendorCode"))) { #optional property not found
            $VendorCode = $null
        } else {
            $VendorCode = $JsonParameters.PSobject.Properties["vendorCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "feedId"))) { #optional property not found
            $FeedId = $null
        } else {
            $FeedId = $JsonParameters.PSobject.Properties["feedId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "barcodes"))) { #optional property not found
            $Barcodes = $null
        } else {
            $Barcodes = $JsonParameters.PSobject.Properties["barcodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "urls"))) { #optional property not found
            $Urls = $null
        } else {
            $Urls = $JsonParameters.PSobject.Properties["urls"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pictures"))) { #optional property not found
            $Pictures = $null
        } else {
            $Pictures = $JsonParameters.PSobject.Properties["pictures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) { #optional property not found
            $Manufacturer = $null
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturerCountries"))) { #optional property not found
            $ManufacturerCountries = $null
        } else {
            $ManufacturerCountries = $JsonParameters.PSobject.Properties["manufacturerCountries"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minShipment"))) { #optional property not found
            $MinShipment = $null
        } else {
            $MinShipment = $JsonParameters.PSobject.Properties["minShipment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transportUnitSize"))) { #optional property not found
            $TransportUnitSize = $null
        } else {
            $TransportUnitSize = $JsonParameters.PSobject.Properties["transportUnitSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quantumOfSupply"))) { #optional property not found
            $QuantumOfSupply = $null
        } else {
            $QuantumOfSupply = $JsonParameters.PSobject.Properties["quantumOfSupply"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deliveryDurationDays"))) { #optional property not found
            $DeliveryDurationDays = $null
        } else {
            $DeliveryDurationDays = $JsonParameters.PSobject.Properties["deliveryDurationDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "boxCount"))) { #optional property not found
            $BoxCount = $null
        } else {
            $BoxCount = $JsonParameters.PSobject.Properties["boxCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customsCommodityCodes"))) { #optional property not found
            $CustomsCommodityCodes = $null
        } else {
            $CustomsCommodityCodes = $JsonParameters.PSobject.Properties["customsCommodityCodes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weightDimensions"))) { #optional property not found
            $WeightDimensions = $null
        } else {
            $WeightDimensions = $JsonParameters.PSobject.Properties["weightDimensions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supplyScheduleDays"))) { #optional property not found
            $SupplyScheduleDays = $null
        } else {
            $SupplyScheduleDays = $JsonParameters.PSobject.Properties["supplyScheduleDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shelfLifeDays"))) { #optional property not found
            $ShelfLifeDays = $null
        } else {
            $ShelfLifeDays = $JsonParameters.PSobject.Properties["shelfLifeDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifeTimeDays"))) { #optional property not found
            $LifeTimeDays = $null
        } else {
            $LifeTimeDays = $JsonParameters.PSobject.Properties["lifeTimeDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guaranteePeriodDays"))) { #optional property not found
            $GuaranteePeriodDays = $null
        } else {
            $GuaranteePeriodDays = $JsonParameters.PSobject.Properties["guaranteePeriodDays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "processingState"))) { #optional property not found
            $ProcessingState = $null
        } else {
            $ProcessingState = $JsonParameters.PSobject.Properties["processingState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability"))) { #optional property not found
            $Availability = $null
        } else {
            $Availability = $JsonParameters.PSobject.Properties["availability"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shelfLife"))) { #optional property not found
            $ShelfLife = $null
        } else {
            $ShelfLife = $JsonParameters.PSobject.Properties["shelfLife"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifeTime"))) { #optional property not found
            $LifeTime = $null
        } else {
            $LifeTime = $JsonParameters.PSobject.Properties["lifeTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "guaranteePeriod"))) { #optional property not found
            $GuaranteePeriod = $null
        } else {
            $GuaranteePeriod = $JsonParameters.PSobject.Properties["guaranteePeriod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certificate"))) { #optional property not found
            $Certificate = $null
        } else {
            $Certificate = $JsonParameters.PSobject.Properties["certificate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) { #optional property not found
            $Price = $null
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "shopSku" = ${ShopSku}
            "category" = ${Category}
            "vendor" = ${Vendor}
            "vendorCode" = ${VendorCode}
            "description" = ${Description}
            "id" = ${Id}
            "feedId" = ${FeedId}
            "barcodes" = ${Barcodes}
            "urls" = ${Urls}
            "pictures" = ${Pictures}
            "manufacturer" = ${Manufacturer}
            "manufacturerCountries" = ${ManufacturerCountries}
            "minShipment" = ${MinShipment}
            "transportUnitSize" = ${TransportUnitSize}
            "quantumOfSupply" = ${QuantumOfSupply}
            "deliveryDurationDays" = ${DeliveryDurationDays}
            "boxCount" = ${BoxCount}
            "customsCommodityCodes" = ${CustomsCommodityCodes}
            "weightDimensions" = ${WeightDimensions}
            "supplyScheduleDays" = ${SupplyScheduleDays}
            "shelfLifeDays" = ${ShelfLifeDays}
            "lifeTimeDays" = ${LifeTimeDays}
            "guaranteePeriodDays" = ${GuaranteePeriodDays}
            "processingState" = ${ProcessingState}
            "availability" = ${Availability}
            "shelfLife" = ${ShelfLife}
            "lifeTime" = ${LifeTime}
            "guaranteePeriod" = ${GuaranteePeriod}
            "certificate" = ${Certificate}
            "price" = ${Price}
        }

        return $PSO
    }

}

