#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 

.PARAMETER BusinessId
Идентификатор бизнеса.
.PARAMETER DateTimeFrom
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
.PARAMETER DateTimeTo
{% note warning """" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
.PARAMETER DateFrom
Начало периода, включительно.
.PARAMETER DateTo
Конец периода, включительно. Максимальный период — 1 год.
.PARAMETER BankOrderId
Номер платежного поручения.
.PARAMETER BankOrderDateTime
Дата платежного поручения.
.PARAMETER PlacementPrograms
Список моделей, которые нужны в отчете. 
.PARAMETER Inns
Список ИНН, которые нужны в отчете.
.PARAMETER CampaignIds
Список магазинов, которые нужны в отчете.
.OUTPUTS

GenerateUnitedNettingReportRequest<PSCustomObject>
#>

function Initialize-GenerateUnitedNettingReportRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${BusinessId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTimeTo},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateFrom},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateTo},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BankOrderId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${BankOrderDateTime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PlacementPrograms},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Inns},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int64[]]
        ${CampaignIds}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => GenerateUnitedNettingReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $BusinessId) {
            throw "invalid value for 'BusinessId', 'BusinessId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "bankOrderId" = ${BankOrderId}
            "bankOrderDateTime" = ${BankOrderDateTime}
            "placementPrograms" = ${PlacementPrograms}
            "inns" = ${Inns}
            "campaignIds" = ${CampaignIds}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenerateUnitedNettingReportRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenerateUnitedNettingReportRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenerateUnitedNettingReportRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGenerateUnitedNettingReportRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => GenerateUnitedNettingReportRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenerateUnitedNettingReportRequest
        $AllProperties = ("businessId", "dateTimeFrom", "dateTimeTo", "dateFrom", "dateTo", "bankOrderId", "bankOrderDateTime", "placementPrograms", "inns", "campaignIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'businessId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessId' missing."
        } else {
            $BusinessId = $JsonParameters.PSobject.Properties["businessId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeFrom"))) { #optional property not found
            $DateTimeFrom = $null
        } else {
            $DateTimeFrom = $JsonParameters.PSobject.Properties["dateTimeFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeTo"))) { #optional property not found
            $DateTimeTo = $null
        } else {
            $DateTimeTo = $JsonParameters.PSobject.Properties["dateTimeTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFrom"))) { #optional property not found
            $DateFrom = $null
        } else {
            $DateFrom = $JsonParameters.PSobject.Properties["dateFrom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTo"))) { #optional property not found
            $DateTo = $null
        } else {
            $DateTo = $JsonParameters.PSobject.Properties["dateTo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bankOrderId"))) { #optional property not found
            $BankOrderId = $null
        } else {
            $BankOrderId = $JsonParameters.PSobject.Properties["bankOrderId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bankOrderDateTime"))) { #optional property not found
            $BankOrderDateTime = $null
        } else {
            $BankOrderDateTime = $JsonParameters.PSobject.Properties["bankOrderDateTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placementPrograms"))) { #optional property not found
            $PlacementPrograms = $null
        } else {
            $PlacementPrograms = $JsonParameters.PSobject.Properties["placementPrograms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inns"))) { #optional property not found
            $Inns = $null
        } else {
            $Inns = $JsonParameters.PSobject.Properties["inns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "campaignIds"))) { #optional property not found
            $CampaignIds = $null
        } else {
            $CampaignIds = $JsonParameters.PSobject.Properties["campaignIds"].value
        }

        $PSO = [PSCustomObject]@{
            "businessId" = ${BusinessId}
            "dateTimeFrom" = ${DateTimeFrom}
            "dateTimeTo" = ${DateTimeTo}
            "dateFrom" = ${DateFrom}
            "dateTo" = ${DateTo}
            "bankOrderId" = ${BankOrderId}
            "bankOrderDateTime" = ${BankOrderDateTime}
            "placementPrograms" = ${PlacementPrograms}
            "inns" = ${Inns}
            "campaignIds" = ${CampaignIds}
        }

        return $PSO
    }

}

