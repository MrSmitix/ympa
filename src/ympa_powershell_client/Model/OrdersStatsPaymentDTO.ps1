#
# Партнерский API Маркета
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# Version: LATEST
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Информация о денежных переводах по заказу.

.PARAMETER Id
Идентификатор денежного перевода.
.PARAMETER Date
Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. 
.PARAMETER Type
No description available.
.PARAMETER Source
No description available.
.PARAMETER Total
Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
.PARAMETER PaymentOrder
No description available.
.OUTPUTS

OrdersStatsPaymentDTO<PSCustomObject>
#>

function Initialize-OrdersStatsPaymentDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Date},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("PAYMENT", "REFUND", "UNKNOWN")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("BUYER", "CASHBACK", "MARKETPLACE", "SPLIT")]
        [PSCustomObject]
        ${Source},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Total},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PaymentOrder}
    )

    Process {
        'Creating PSCustomObject: ympa_powershell_client => OrdersStatsPaymentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "date" = ${Date}
            "type" = ${Type}
            "source" = ${Source}
            "total" = ${Total}
            "paymentOrder" = ${PaymentOrder}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrdersStatsPaymentDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrdersStatsPaymentDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrdersStatsPaymentDTO<PSCustomObject>
#>
function ConvertFrom-JsonToOrdersStatsPaymentDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: ympa_powershell_client => OrdersStatsPaymentDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrdersStatsPaymentDTO
        $AllProperties = ("id", "date", "type", "source", "total", "paymentOrder")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) { #optional property not found
            $Total = $null
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentOrder"))) { #optional property not found
            $PaymentOrder = $null
        } else {
            $PaymentOrder = $JsonParameters.PSobject.Properties["paymentOrder"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "date" = ${Date}
            "type" = ${Type}
            "source" = ${Source}
            "total" = ${Total}
            "paymentOrder" = ${PaymentOrder}
        }

        return $PSO
    }

}

