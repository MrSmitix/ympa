<?php
/**
 * GetCampaignOfferDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * GetCampaignOfferDTO Class Doc Comment
 *
 * @description Параметры размещения товара в магазине.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCampaignOfferDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetCampaignOfferDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'offer_id' => 'string',
        'quantum' => '\OpenAPI\Client\Model\QuantumDTO',
        'available' => 'bool',
        'basic_price' => '\OpenAPI\Client\Model\GetPriceWithDiscountDTO',
        'campaign_price' => '\OpenAPI\Client\Model\GetPriceWithVatDTO',
        'status' => '\OpenAPI\Client\Model\OfferCampaignStatusType',
        'errors' => '\OpenAPI\Client\Model\OfferErrorDTO[]',
        'warnings' => '\OpenAPI\Client\Model\OfferErrorDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'offer_id' => null,
        'quantum' => null,
        'available' => null,
        'basic_price' => null,
        'campaign_price' => null,
        'status' => null,
        'errors' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'offer_id' => false,
        'quantum' => false,
        'available' => false,
        'basic_price' => false,
        'campaign_price' => false,
        'status' => false,
        'errors' => true,
        'warnings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'offer_id' => 'offerId',
        'quantum' => 'quantum',
        'available' => 'available',
        'basic_price' => 'basicPrice',
        'campaign_price' => 'campaignPrice',
        'status' => 'status',
        'errors' => 'errors',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'offer_id' => 'setOfferId',
        'quantum' => 'setQuantum',
        'available' => 'setAvailable',
        'basic_price' => 'setBasicPrice',
        'campaign_price' => 'setCampaignPrice',
        'status' => 'setStatus',
        'errors' => 'setErrors',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'offer_id' => 'getOfferId',
        'quantum' => 'getQuantum',
        'available' => 'getAvailable',
        'basic_price' => 'getBasicPrice',
        'campaign_price' => 'getCampaignPrice',
        'status' => 'getStatus',
        'errors' => 'getErrors',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('offer_id', $data ?? [], null);
        $this->setIfExists('quantum', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('basic_price', $data ?? [], null);
        $this->setIfExists('campaign_price', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('errors', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['offer_id'] === null) {
            $invalidProperties[] = "'offer_id' can't be null";
        }
        if ((mb_strlen($this->container['offer_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'offer_id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['offer_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'offer_id', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/", $this->container['offer_id'])) {
            $invalidProperties[] = "invalid value for 'offer_id', must be conform to the pattern /^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId(): string
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @return $this
     */
    public function setOfferId(string $offer_id): static
    {
        if (is_null($offer_id)) {
            throw new InvalidArgumentException('non-nullable offer_id cannot be null');
        }
        if ((mb_strlen($offer_id) > 255)) {
            throw new InvalidArgumentException('invalid length for $offer_id when calling GetCampaignOfferDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($offer_id) < 1)) {
            throw new InvalidArgumentException('invalid length for $offer_id when calling GetCampaignOfferDTO., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/", ObjectSerializer::toString($offer_id)))) {
            throw new InvalidArgumentException("invalid value for \$offer_id when calling GetCampaignOfferDTO., must conform to the pattern /^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/.");
        }

        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets quantum
     *
     * @return \OpenAPI\Client\Model\QuantumDTO|null
     */
    public function getQuantum(): ?\OpenAPI\Client\Model\QuantumDTO
    {
        return $this->container['quantum'];
    }

    /**
     * Sets quantum
     *
     * @param \OpenAPI\Client\Model\QuantumDTO|null $quantum quantum
     *
     * @return $this
     */
    public function setQuantum(?\OpenAPI\Client\Model\QuantumDTO $quantum): static
    {
        if (is_null($quantum)) {
            throw new InvalidArgumentException('non-nullable quantum cannot be null');
        }
        $this->container['quantum'] = $quantum;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool|null
     */
    public function getAvailable(): ?bool
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool|null $available Есть ли товар в продаже.
     *
     * @return $this
     */
    public function setAvailable(?bool $available): static
    {
        if (is_null($available)) {
            throw new InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets basic_price
     *
     * @return \OpenAPI\Client\Model\GetPriceWithDiscountDTO|null
     */
    public function getBasicPrice(): ?\OpenAPI\Client\Model\GetPriceWithDiscountDTO
    {
        return $this->container['basic_price'];
    }

    /**
     * Sets basic_price
     *
     * @param \OpenAPI\Client\Model\GetPriceWithDiscountDTO|null $basic_price basic_price
     *
     * @return $this
     */
    public function setBasicPrice(?\OpenAPI\Client\Model\GetPriceWithDiscountDTO $basic_price): static
    {
        if (is_null($basic_price)) {
            throw new InvalidArgumentException('non-nullable basic_price cannot be null');
        }
        $this->container['basic_price'] = $basic_price;

        return $this;
    }

    /**
     * Gets campaign_price
     *
     * @return \OpenAPI\Client\Model\GetPriceWithVatDTO|null
     */
    public function getCampaignPrice(): ?\OpenAPI\Client\Model\GetPriceWithVatDTO
    {
        return $this->container['campaign_price'];
    }

    /**
     * Sets campaign_price
     *
     * @param \OpenAPI\Client\Model\GetPriceWithVatDTO|null $campaign_price campaign_price
     *
     * @return $this
     */
    public function setCampaignPrice(?\OpenAPI\Client\Model\GetPriceWithVatDTO $campaign_price): static
    {
        if (is_null($campaign_price)) {
            throw new InvalidArgumentException('non-nullable campaign_price cannot be null');
        }
        $this->container['campaign_price'] = $campaign_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OfferCampaignStatusType|null
     */
    public function getStatus(): ?\OpenAPI\Client\Model\OfferCampaignStatusType
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OfferCampaignStatusType|null $status status
     *
     * @return $this
     */
    public function setStatus(?\OpenAPI\Client\Model\OfferCampaignStatusType $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return \OpenAPI\Client\Model\OfferErrorDTO[]|null
     */
    public function getErrors(): ?array
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param \OpenAPI\Client\Model\OfferErrorDTO[]|null $errors Ошибки, препятствующие размещению товара на витрине.
     *
     * @return $this
     */
    public function setErrors(?array $errors): static
    {
        if (is_null($errors)) {
            array_push($this->openAPINullablesSetToNull, 'errors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('errors', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\OfferErrorDTO[]|null
     */
    public function getWarnings(): ?array
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\OfferErrorDTO[]|null $warnings Предупреждения, не препятствующие размещению товара на витрине.
     *
     * @return $this
     */
    public function setWarnings(?array $warnings): static
    {
        if (is_null($warnings)) {
            array_push($this->openAPINullablesSetToNull, 'warnings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warnings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


