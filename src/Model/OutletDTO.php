<?php
/**
 * OutletDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * OutletDTO Class Doc Comment
 *
 * @description Информация о точке продаж.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OutletDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OutletDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'name' => 'string',
        'type' => '\OpenAPI\Client\Model\OutletType',
        'coords' => 'string',
        'is_main' => 'bool',
        'shop_outlet_code' => 'string',
        'visibility' => '\OpenAPI\Client\Model\OutletVisibilityType',
        'address' => '\OpenAPI\Client\Model\OutletAddressDTO',
        'phones' => 'string[]',
        'working_schedule' => '\OpenAPI\Client\Model\OutletWorkingScheduleDTO',
        'delivery_rules' => '\OpenAPI\Client\Model\OutletDeliveryRuleDTO[]',
        'storage_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'name' => null,
        'type' => null,
        'coords' => null,
        'is_main' => null,
        'shop_outlet_code' => null,
        'visibility' => null,
        'address' => null,
        'phones' => null,
        'working_schedule' => null,
        'delivery_rules' => null,
        'storage_period' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'name' => false,
        'type' => false,
        'coords' => false,
        'is_main' => false,
        'shop_outlet_code' => false,
        'visibility' => false,
        'address' => false,
        'phones' => false,
        'working_schedule' => false,
        'delivery_rules' => true,
        'storage_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'coords' => 'coords',
        'is_main' => 'isMain',
        'shop_outlet_code' => 'shopOutletCode',
        'visibility' => 'visibility',
        'address' => 'address',
        'phones' => 'phones',
        'working_schedule' => 'workingSchedule',
        'delivery_rules' => 'deliveryRules',
        'storage_period' => 'storagePeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'coords' => 'setCoords',
        'is_main' => 'setIsMain',
        'shop_outlet_code' => 'setShopOutletCode',
        'visibility' => 'setVisibility',
        'address' => 'setAddress',
        'phones' => 'setPhones',
        'working_schedule' => 'setWorkingSchedule',
        'delivery_rules' => 'setDeliveryRules',
        'storage_period' => 'setStoragePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'coords' => 'getCoords',
        'is_main' => 'getIsMain',
        'shop_outlet_code' => 'getShopOutletCode',
        'visibility' => 'getVisibility',
        'address' => 'getAddress',
        'phones' => 'getPhones',
        'working_schedule' => 'getWorkingSchedule',
        'delivery_rules' => 'getDeliveryRules',
        'storage_period' => 'getStoragePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('coords', $data ?? [], null);
        $this->setIfExists('is_main', $data ?? [], null);
        $this->setIfExists('shop_outlet_code', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('working_schedule', $data ?? [], null);
        $this->setIfExists('delivery_rules', $data ?? [], null);
        $this->setIfExists('storage_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['phones'] === null) {
            $invalidProperties[] = "'phones' can't be null";
        }
        if ((count($this->container['phones']) < 1)) {
            $invalidProperties[] = "invalid value for 'phones', number of items must be greater than or equal to 1.";
        }

        if ($this->container['working_schedule'] === null) {
            $invalidProperties[] = "'working_schedule' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Название точки продаж.
     *
     * @return $this
     */
    public function setName(string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\OutletType
     */
    public function getType(): \OpenAPI\Client\Model\OutletType
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\OutletType $type type
     *
     * @return $this
     */
    public function setType(\OpenAPI\Client\Model\OutletType $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets coords
     *
     * @return string|null
     */
    public function getCoords(): ?string
    {
        return $this->container['coords'];
    }

    /**
     * Sets coords
     *
     * @param string|null $coords Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.
     *
     * @return $this
     */
    public function setCoords(?string $coords): static
    {
        if (is_null($coords)) {
            throw new InvalidArgumentException('non-nullable coords cannot be null');
        }
        $this->container['coords'] = $coords;

        return $this;
    }

    /**
     * Gets is_main
     *
     * @return bool|null
     */
    public function getIsMain(): ?bool
    {
        return $this->container['is_main'];
    }

    /**
     * Sets is_main
     *
     * @param bool|null $is_main Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.
     *
     * @return $this
     */
    public function setIsMain(?bool $is_main): static
    {
        if (is_null($is_main)) {
            throw new InvalidArgumentException('non-nullable is_main cannot be null');
        }
        $this->container['is_main'] = $is_main;

        return $this;
    }

    /**
     * Gets shop_outlet_code
     *
     * @return string|null
     */
    public function getShopOutletCode(): ?string
    {
        return $this->container['shop_outlet_code'];
    }

    /**
     * Sets shop_outlet_code
     *
     * @param string|null $shop_outlet_code Идентификатор точки продаж, присвоенный магазином.
     *
     * @return $this
     */
    public function setShopOutletCode(?string $shop_outlet_code): static
    {
        if (is_null($shop_outlet_code)) {
            throw new InvalidArgumentException('non-nullable shop_outlet_code cannot be null');
        }
        $this->container['shop_outlet_code'] = $shop_outlet_code;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \OpenAPI\Client\Model\OutletVisibilityType|null
     */
    public function getVisibility(): ?\OpenAPI\Client\Model\OutletVisibilityType
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \OpenAPI\Client\Model\OutletVisibilityType|null $visibility visibility
     *
     * @return $this
     */
    public function setVisibility(?\OpenAPI\Client\Model\OutletVisibilityType $visibility): static
    {
        if (is_null($visibility)) {
            throw new InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\OutletAddressDTO
     */
    public function getAddress(): \OpenAPI\Client\Model\OutletAddressDTO
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\OutletAddressDTO $address address
     *
     * @return $this
     */
    public function setAddress(\OpenAPI\Client\Model\OutletAddressDTO $address): static
    {
        if (is_null($address)) {
            throw new InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string[]
     */
    public function getPhones(): array
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string[] $phones Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.
     *
     * @return $this
     */
    public function setPhones(array $phones): static
    {
        if (is_null($phones)) {
            throw new InvalidArgumentException('non-nullable phones cannot be null');
        }


        if ((count($phones) < 1)) {
            throw new InvalidArgumentException('invalid length for $phones when calling OutletDTO., number of items must be greater than or equal to 1.');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets working_schedule
     *
     * @return \OpenAPI\Client\Model\OutletWorkingScheduleDTO
     */
    public function getWorkingSchedule(): \OpenAPI\Client\Model\OutletWorkingScheduleDTO
    {
        return $this->container['working_schedule'];
    }

    /**
     * Sets working_schedule
     *
     * @param \OpenAPI\Client\Model\OutletWorkingScheduleDTO $working_schedule working_schedule
     *
     * @return $this
     */
    public function setWorkingSchedule(\OpenAPI\Client\Model\OutletWorkingScheduleDTO $working_schedule): static
    {
        if (is_null($working_schedule)) {
            throw new InvalidArgumentException('non-nullable working_schedule cannot be null');
        }
        $this->container['working_schedule'] = $working_schedule;

        return $this;
    }

    /**
     * Gets delivery_rules
     *
     * @return \OpenAPI\Client\Model\OutletDeliveryRuleDTO[]|null
     */
    public function getDeliveryRules(): ?array
    {
        return $this->container['delivery_rules'];
    }

    /**
     * Sets delivery_rules
     *
     * @param \OpenAPI\Client\Model\OutletDeliveryRuleDTO[]|null $delivery_rules Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.
     *
     * @return $this
     */
    public function setDeliveryRules(?array $delivery_rules): static
    {
        if (is_null($delivery_rules)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_rules');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_rules', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_rules'] = $delivery_rules;

        return $this;
    }

    /**
     * Gets storage_period
     *
     * @return int|null
     */
    public function getStoragePeriod(): ?int
    {
        return $this->container['storage_period'];
    }

    /**
     * Sets storage_period
     *
     * @param int|null $storage_period Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
     *
     * @return $this
     */
    public function setStoragePeriod(?int $storage_period): static
    {
        if (is_null($storage_period)) {
            throw new InvalidArgumentException('non-nullable storage_period cannot be null');
        }
        $this->container['storage_period'] = $storage_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


