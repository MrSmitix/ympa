<?php
/**
 * FeedDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * FeedDTO Class Doc Comment
 *
 * @description Информация о прайс-листе.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FeedDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FeedDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'login' => 'string',
        'name' => 'string',
        'password' => 'string',
        'upload_date' => '\DateTime',
        'url' => 'string',
        'content' => '\OpenAPI\Client\Model\FeedContentDTO',
        'download' => '\OpenAPI\Client\Model\FeedDownloadDTO',
        'placement' => '\OpenAPI\Client\Model\FeedPlacementDTO',
        'publication' => '\OpenAPI\Client\Model\FeedPublicationDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int64',
        'login' => null,
        'name' => null,
        'password' => null,
        'upload_date' => 'date-time',
        'url' => null,
        'content' => null,
        'download' => null,
        'placement' => null,
        'publication' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'login' => false,
        'name' => false,
        'password' => false,
        'upload_date' => false,
        'url' => false,
        'content' => false,
        'download' => false,
        'placement' => false,
        'publication' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'login' => 'login',
        'name' => 'name',
        'password' => 'password',
        'upload_date' => 'uploadDate',
        'url' => 'url',
        'content' => 'content',
        'download' => 'download',
        'placement' => 'placement',
        'publication' => 'publication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'login' => 'setLogin',
        'name' => 'setName',
        'password' => 'setPassword',
        'upload_date' => 'setUploadDate',
        'url' => 'setUrl',
        'content' => 'setContent',
        'download' => 'setDownload',
        'placement' => 'setPlacement',
        'publication' => 'setPublication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'login' => 'getLogin',
        'name' => 'getName',
        'password' => 'getPassword',
        'upload_date' => 'getUploadDate',
        'url' => 'getUrl',
        'content' => 'getContent',
        'download' => 'getDownload',
        'placement' => 'getPlacement',
        'publication' => 'getPublication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('upload_date', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('download', $data ?? [], null);
        $this->setIfExists('placement', $data ?? [], null);
        $this->setIfExists('publication', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Идентификатор прайс-листа.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin(): ?string
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     *
     * @return $this
     */
    public function setLogin(?string $login): static
    {
        if (is_null($login)) {
            throw new InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword(): ?string
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     *
     * @return $this
     */
    public function setPassword(?string $password): static
    {
        if (is_null($password)) {
            throw new InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets upload_date
     *
     * @return \DateTime|null
     */
    public function getUploadDate(): ?\DateTime
    {
        return $this->container['upload_date'];
    }

    /**
     * Sets upload_date
     *
     * @param \DateTime|null $upload_date Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.
     *
     * @return $this
     */
    public function setUploadDate(?\DateTime $upload_date): static
    {
        if (is_null($upload_date)) {
            throw new InvalidArgumentException('non-nullable upload_date cannot be null');
        }
        $this->container['upload_date'] = $upload_date;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.
     *
     * @return $this
     */
    public function setUrl(?string $url): static
    {
        if (is_null($url)) {
            throw new InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \OpenAPI\Client\Model\FeedContentDTO|null
     */
    public function getContent(): ?\OpenAPI\Client\Model\FeedContentDTO
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \OpenAPI\Client\Model\FeedContentDTO|null $content content
     *
     * @return $this
     */
    public function setContent(?\OpenAPI\Client\Model\FeedContentDTO $content): static
    {
        if (is_null($content)) {
            throw new InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets download
     *
     * @return \OpenAPI\Client\Model\FeedDownloadDTO|null
     */
    public function getDownload(): ?\OpenAPI\Client\Model\FeedDownloadDTO
    {
        return $this->container['download'];
    }

    /**
     * Sets download
     *
     * @param \OpenAPI\Client\Model\FeedDownloadDTO|null $download download
     *
     * @return $this
     */
    public function setDownload(?\OpenAPI\Client\Model\FeedDownloadDTO $download): static
    {
        if (is_null($download)) {
            throw new InvalidArgumentException('non-nullable download cannot be null');
        }
        $this->container['download'] = $download;

        return $this;
    }

    /**
     * Gets placement
     *
     * @return \OpenAPI\Client\Model\FeedPlacementDTO|null
     */
    public function getPlacement(): ?\OpenAPI\Client\Model\FeedPlacementDTO
    {
        return $this->container['placement'];
    }

    /**
     * Sets placement
     *
     * @param \OpenAPI\Client\Model\FeedPlacementDTO|null $placement placement
     *
     * @return $this
     */
    public function setPlacement(?\OpenAPI\Client\Model\FeedPlacementDTO $placement): static
    {
        if (is_null($placement)) {
            throw new InvalidArgumentException('non-nullable placement cannot be null');
        }
        $this->container['placement'] = $placement;

        return $this;
    }

    /**
     * Gets publication
     *
     * @return \OpenAPI\Client\Model\FeedPublicationDTO|null
     */
    public function getPublication(): ?\OpenAPI\Client\Model\FeedPublicationDTO
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param \OpenAPI\Client\Model\FeedPublicationDTO|null $publication publication
     *
     * @return $this
     */
    public function setPublication(?\OpenAPI\Client\Model\FeedPublicationDTO $publication): static
    {
        if (is_null($publication)) {
            throw new InvalidArgumentException('non-nullable publication cannot be null');
        }
        $this->container['publication'] = $publication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


