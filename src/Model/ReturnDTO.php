<?php
/**
 * ReturnDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReturnDTO Class Doc Comment
 *
 * @description Возврат заказа.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ReturnDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ReturnDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'order_id' => 'int',
        'creation_date' => '\DateTime',
        'update_date' => '\DateTime',
        'refund_status' => '\OpenAPI\Client\Model\RefundStatusType',
        'logistic_pickup_point' => '\OpenAPI\Client\Model\LogisticPickupPointDTO',
        'shipment_recipient_type' => '\OpenAPI\Client\Model\RecipientType',
        'shipment_status' => '\OpenAPI\Client\Model\ReturnShipmentStatusType',
        'refund_amount' => 'int',
        'items' => '\OpenAPI\Client\Model\ReturnItemDTO[]',
        'return_type' => '\OpenAPI\Client\Model\ReturnType',
        'fast_return' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int64',
        'order_id' => 'int64',
        'creation_date' => 'date-time',
        'update_date' => 'date-time',
        'refund_status' => null,
        'logistic_pickup_point' => null,
        'shipment_recipient_type' => null,
        'shipment_status' => null,
        'refund_amount' => 'int64',
        'items' => null,
        'return_type' => null,
        'fast_return' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'order_id' => false,
        'creation_date' => false,
        'update_date' => false,
        'refund_status' => false,
        'logistic_pickup_point' => false,
        'shipment_recipient_type' => false,
        'shipment_status' => false,
        'refund_amount' => false,
        'items' => false,
        'return_type' => false,
        'fast_return' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'order_id' => 'orderId',
        'creation_date' => 'creationDate',
        'update_date' => 'updateDate',
        'refund_status' => 'refundStatus',
        'logistic_pickup_point' => 'logisticPickupPoint',
        'shipment_recipient_type' => 'shipmentRecipientType',
        'shipment_status' => 'shipmentStatus',
        'refund_amount' => 'refundAmount',
        'items' => 'items',
        'return_type' => 'returnType',
        'fast_return' => 'fastReturn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'order_id' => 'setOrderId',
        'creation_date' => 'setCreationDate',
        'update_date' => 'setUpdateDate',
        'refund_status' => 'setRefundStatus',
        'logistic_pickup_point' => 'setLogisticPickupPoint',
        'shipment_recipient_type' => 'setShipmentRecipientType',
        'shipment_status' => 'setShipmentStatus',
        'refund_amount' => 'setRefundAmount',
        'items' => 'setItems',
        'return_type' => 'setReturnType',
        'fast_return' => 'setFastReturn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'order_id' => 'getOrderId',
        'creation_date' => 'getCreationDate',
        'update_date' => 'getUpdateDate',
        'refund_status' => 'getRefundStatus',
        'logistic_pickup_point' => 'getLogisticPickupPoint',
        'shipment_recipient_type' => 'getShipmentRecipientType',
        'shipment_status' => 'getShipmentStatus',
        'refund_amount' => 'getRefundAmount',
        'items' => 'getItems',
        'return_type' => 'getReturnType',
        'fast_return' => 'getFastReturn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('update_date', $data ?? [], null);
        $this->setIfExists('refund_status', $data ?? [], null);
        $this->setIfExists('logistic_pickup_point', $data ?? [], null);
        $this->setIfExists('shipment_recipient_type', $data ?? [], null);
        $this->setIfExists('shipment_status', $data ?? [], null);
        $this->setIfExists('refund_amount', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('return_type', $data ?? [], null);
        $this->setIfExists('fast_return', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Идентификатор возврата.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id Номер заказа.
     *
     * @return $this
     */
    public function setOrderId(?int $order_id): static
    {
        if (is_null($order_id)) {
            throw new InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate(): ?\DateTime
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date Дата создания возврата клиентом.
     *
     * @return $this
     */
    public function setCreationDate(?\DateTime $creation_date): static
    {
        if (is_null($creation_date)) {
            throw new InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime|null
     */
    public function getUpdateDate(): ?\DateTime
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime|null $update_date Дата обновления возврата.
     *
     * @return $this
     */
    public function setUpdateDate(?\DateTime $update_date): static
    {
        if (is_null($update_date)) {
            throw new InvalidArgumentException('non-nullable update_date cannot be null');
        }
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets refund_status
     *
     * @return \OpenAPI\Client\Model\RefundStatusType|null
     */
    public function getRefundStatus(): ?\OpenAPI\Client\Model\RefundStatusType
    {
        return $this->container['refund_status'];
    }

    /**
     * Sets refund_status
     *
     * @param \OpenAPI\Client\Model\RefundStatusType|null $refund_status refund_status
     *
     * @return $this
     */
    public function setRefundStatus(?\OpenAPI\Client\Model\RefundStatusType $refund_status): static
    {
        if (is_null($refund_status)) {
            throw new InvalidArgumentException('non-nullable refund_status cannot be null');
        }
        $this->container['refund_status'] = $refund_status;

        return $this;
    }

    /**
     * Gets logistic_pickup_point
     *
     * @return \OpenAPI\Client\Model\LogisticPickupPointDTO|null
     */
    public function getLogisticPickupPoint(): ?\OpenAPI\Client\Model\LogisticPickupPointDTO
    {
        return $this->container['logistic_pickup_point'];
    }

    /**
     * Sets logistic_pickup_point
     *
     * @param \OpenAPI\Client\Model\LogisticPickupPointDTO|null $logistic_pickup_point logistic_pickup_point
     *
     * @return $this
     */
    public function setLogisticPickupPoint(?\OpenAPI\Client\Model\LogisticPickupPointDTO $logistic_pickup_point): static
    {
        if (is_null($logistic_pickup_point)) {
            throw new InvalidArgumentException('non-nullable logistic_pickup_point cannot be null');
        }
        $this->container['logistic_pickup_point'] = $logistic_pickup_point;

        return $this;
    }

    /**
     * Gets shipment_recipient_type
     *
     * @return \OpenAPI\Client\Model\RecipientType|null
     */
    public function getShipmentRecipientType(): ?\OpenAPI\Client\Model\RecipientType
    {
        return $this->container['shipment_recipient_type'];
    }

    /**
     * Sets shipment_recipient_type
     *
     * @param \OpenAPI\Client\Model\RecipientType|null $shipment_recipient_type shipment_recipient_type
     *
     * @return $this
     */
    public function setShipmentRecipientType(?\OpenAPI\Client\Model\RecipientType $shipment_recipient_type): static
    {
        if (is_null($shipment_recipient_type)) {
            throw new InvalidArgumentException('non-nullable shipment_recipient_type cannot be null');
        }
        $this->container['shipment_recipient_type'] = $shipment_recipient_type;

        return $this;
    }

    /**
     * Gets shipment_status
     *
     * @return \OpenAPI\Client\Model\ReturnShipmentStatusType|null
     */
    public function getShipmentStatus(): ?\OpenAPI\Client\Model\ReturnShipmentStatusType
    {
        return $this->container['shipment_status'];
    }

    /**
     * Sets shipment_status
     *
     * @param \OpenAPI\Client\Model\ReturnShipmentStatusType|null $shipment_status shipment_status
     *
     * @return $this
     */
    public function setShipmentStatus(?\OpenAPI\Client\Model\ReturnShipmentStatusType $shipment_status): static
    {
        if (is_null($shipment_status)) {
            throw new InvalidArgumentException('non-nullable shipment_status cannot be null');
        }
        $this->container['shipment_status'] = $shipment_status;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return int|null
     */
    public function getRefundAmount(): ?int
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param int|null $refund_amount Сумма возврата.
     *
     * @return $this
     */
    public function setRefundAmount(?int $refund_amount): static
    {
        if (is_null($refund_amount)) {
            throw new InvalidArgumentException('non-nullable refund_amount cannot be null');
        }
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\ReturnItemDTO[]
     */
    public function getItems(): array
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\ReturnItemDTO[] $items Список товаров в возврате.
     *
     * @return $this
     */
    public function setItems(array $items): static
    {
        if (is_null($items)) {
            throw new InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets return_type
     *
     * @return \OpenAPI\Client\Model\ReturnType|null
     */
    public function getReturnType(): ?\OpenAPI\Client\Model\ReturnType
    {
        return $this->container['return_type'];
    }

    /**
     * Sets return_type
     *
     * @param \OpenAPI\Client\Model\ReturnType|null $return_type return_type
     *
     * @return $this
     */
    public function setReturnType(?\OpenAPI\Client\Model\ReturnType $return_type): static
    {
        if (is_null($return_type)) {
            throw new InvalidArgumentException('non-nullable return_type cannot be null');
        }
        $this->container['return_type'] = $return_type;

        return $this;
    }

    /**
     * Gets fast_return
     *
     * @return bool|null
     */
    public function getFastReturn(): ?bool
    {
        return $this->container['fast_return'];
    }

    /**
     * Sets fast_return
     *
     * @param bool|null $fast_return Используется ли опция **Быстрый возврат денег за дешевый брак**.
     *
     * @return $this
     */
    public function setFastReturn(?bool $fast_return): static
    {
        if (is_null($fast_return)) {
            throw new InvalidArgumentException('non-nullable fast_return cannot be null');
        }
        $this->container['fast_return'] = $fast_return;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


