<?php
/**
 * OrderDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrderDTO Class Doc Comment
 *
 * @description Заказ.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'status' => '\OpenAPI\Client\Model\OrderStatusType',
        'substatus' => '\OpenAPI\Client\Model\OrderSubstatusType',
        'creation_date' => 'string',
        'updated_at' => 'string',
        'currency' => '\OpenAPI\Client\Model\CurrencyType',
        'items_total' => 'float',
        'delivery_total' => 'float',
        'buyer_items_total' => 'float',
        'buyer_total' => 'float',
        'buyer_items_total_before_discount' => 'float',
        'buyer_total_before_discount' => 'float',
        'payment_type' => '\OpenAPI\Client\Model\OrderPaymentType',
        'payment_method' => '\OpenAPI\Client\Model\OrderPaymentMethodType',
        'fake' => 'bool',
        'items' => '\OpenAPI\Client\Model\OrderItemDTO[]',
        'subsidies' => '\OpenAPI\Client\Model\OrderSubsidyDTO[]',
        'delivery' => '\OpenAPI\Client\Model\OrderDeliveryDTO',
        'buyer' => '\OpenAPI\Client\Model\OrderBuyerDTO',
        'notes' => 'string',
        'tax_system' => '\OpenAPI\Client\Model\OrderTaxSystemType',
        'cancel_requested' => 'bool',
        'expiry_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int64',
        'status' => null,
        'substatus' => null,
        'creation_date' => 'date-dd-MM-yyyy-HH-mm-ss',
        'updated_at' => 'date-dd-MM-yyyy-HH-mm-ss',
        'currency' => null,
        'items_total' => 'decimal',
        'delivery_total' => 'decimal',
        'buyer_items_total' => 'decimal',
        'buyer_total' => 'decimal',
        'buyer_items_total_before_discount' => 'decimal',
        'buyer_total_before_discount' => 'decimal',
        'payment_type' => null,
        'payment_method' => null,
        'fake' => null,
        'items' => null,
        'subsidies' => null,
        'delivery' => null,
        'buyer' => null,
        'notes' => null,
        'tax_system' => null,
        'cancel_requested' => null,
        'expiry_date' => 'date-dd-MM-yyyy-HH-mm-ss'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'status' => false,
        'substatus' => false,
        'creation_date' => false,
        'updated_at' => false,
        'currency' => false,
        'items_total' => false,
        'delivery_total' => false,
        'buyer_items_total' => false,
        'buyer_total' => false,
        'buyer_items_total_before_discount' => false,
        'buyer_total_before_discount' => false,
        'payment_type' => false,
        'payment_method' => false,
        'fake' => false,
        'items' => false,
        'subsidies' => true,
        'delivery' => false,
        'buyer' => false,
        'notes' => false,
        'tax_system' => false,
        'cancel_requested' => false,
        'expiry_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'substatus' => 'substatus',
        'creation_date' => 'creationDate',
        'updated_at' => 'updatedAt',
        'currency' => 'currency',
        'items_total' => 'itemsTotal',
        'delivery_total' => 'deliveryTotal',
        'buyer_items_total' => 'buyerItemsTotal',
        'buyer_total' => 'buyerTotal',
        'buyer_items_total_before_discount' => 'buyerItemsTotalBeforeDiscount',
        'buyer_total_before_discount' => 'buyerTotalBeforeDiscount',
        'payment_type' => 'paymentType',
        'payment_method' => 'paymentMethod',
        'fake' => 'fake',
        'items' => 'items',
        'subsidies' => 'subsidies',
        'delivery' => 'delivery',
        'buyer' => 'buyer',
        'notes' => 'notes',
        'tax_system' => 'taxSystem',
        'cancel_requested' => 'cancelRequested',
        'expiry_date' => 'expiryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'substatus' => 'setSubstatus',
        'creation_date' => 'setCreationDate',
        'updated_at' => 'setUpdatedAt',
        'currency' => 'setCurrency',
        'items_total' => 'setItemsTotal',
        'delivery_total' => 'setDeliveryTotal',
        'buyer_items_total' => 'setBuyerItemsTotal',
        'buyer_total' => 'setBuyerTotal',
        'buyer_items_total_before_discount' => 'setBuyerItemsTotalBeforeDiscount',
        'buyer_total_before_discount' => 'setBuyerTotalBeforeDiscount',
        'payment_type' => 'setPaymentType',
        'payment_method' => 'setPaymentMethod',
        'fake' => 'setFake',
        'items' => 'setItems',
        'subsidies' => 'setSubsidies',
        'delivery' => 'setDelivery',
        'buyer' => 'setBuyer',
        'notes' => 'setNotes',
        'tax_system' => 'setTaxSystem',
        'cancel_requested' => 'setCancelRequested',
        'expiry_date' => 'setExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'substatus' => 'getSubstatus',
        'creation_date' => 'getCreationDate',
        'updated_at' => 'getUpdatedAt',
        'currency' => 'getCurrency',
        'items_total' => 'getItemsTotal',
        'delivery_total' => 'getDeliveryTotal',
        'buyer_items_total' => 'getBuyerItemsTotal',
        'buyer_total' => 'getBuyerTotal',
        'buyer_items_total_before_discount' => 'getBuyerItemsTotalBeforeDiscount',
        'buyer_total_before_discount' => 'getBuyerTotalBeforeDiscount',
        'payment_type' => 'getPaymentType',
        'payment_method' => 'getPaymentMethod',
        'fake' => 'getFake',
        'items' => 'getItems',
        'subsidies' => 'getSubsidies',
        'delivery' => 'getDelivery',
        'buyer' => 'getBuyer',
        'notes' => 'getNotes',
        'tax_system' => 'getTaxSystem',
        'cancel_requested' => 'getCancelRequested',
        'expiry_date' => 'getExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('substatus', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('items_total', $data ?? [], null);
        $this->setIfExists('delivery_total', $data ?? [], null);
        $this->setIfExists('buyer_items_total', $data ?? [], null);
        $this->setIfExists('buyer_total', $data ?? [], null);
        $this->setIfExists('buyer_items_total_before_discount', $data ?? [], null);
        $this->setIfExists('buyer_total_before_discount', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('fake', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('subsidies', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('tax_system', $data ?? [], null);
        $this->setIfExists('cancel_requested', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Идентификатор заказа.
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OrderStatusType|null
     */
    public function getStatus(): ?\OpenAPI\Client\Model\OrderStatusType
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OrderStatusType|null $status status
     *
     * @return $this
     */
    public function setStatus(?\OpenAPI\Client\Model\OrderStatusType $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets substatus
     *
     * @return \OpenAPI\Client\Model\OrderSubstatusType|null
     */
    public function getSubstatus(): ?\OpenAPI\Client\Model\OrderSubstatusType
    {
        return $this->container['substatus'];
    }

    /**
     * Sets substatus
     *
     * @param \OpenAPI\Client\Model\OrderSubstatusType|null $substatus substatus
     *
     * @return $this
     */
    public function setSubstatus(?\OpenAPI\Client\Model\OrderSubstatusType $substatus): static
    {
        if (is_null($substatus)) {
            throw new InvalidArgumentException('non-nullable substatus cannot be null');
        }
        $this->container['substatus'] = $substatus;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate(): ?string
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate(?string $creation_date): static
    {
        if (is_null($creation_date)) {
            throw new InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt(?string $updated_at): static
    {
        if (is_null($updated_at)) {
            throw new InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CurrencyType|null
     */
    public function getCurrency(): ?\OpenAPI\Client\Model\CurrencyType
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CurrencyType|null $currency currency
     *
     * @return $this
     */
    public function setCurrency(?\OpenAPI\Client\Model\CurrencyType $currency): static
    {
        if (is_null($currency)) {
            throw new InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets items_total
     *
     * @return float|null
     */
    public function getItemsTotal(): ?float
    {
        return $this->container['items_total'];
    }

    /**
     * Sets items_total
     *
     * @param float|null $items_total Платеж покупателя.
     *
     * @return $this
     */
    public function setItemsTotal(?float $items_total): static
    {
        if (is_null($items_total)) {
            throw new InvalidArgumentException('non-nullable items_total cannot be null');
        }
        $this->container['items_total'] = $items_total;

        return $this;
    }

    /**
     * Gets delivery_total
     *
     * @return float|null
     */
    public function getDeliveryTotal(): ?float
    {
        return $this->container['delivery_total'];
    }

    /**
     * Sets delivery_total
     *
     * @param float|null $delivery_total Стоимость доставки.
     *
     * @return $this
     */
    public function setDeliveryTotal(?float $delivery_total): static
    {
        if (is_null($delivery_total)) {
            throw new InvalidArgumentException('non-nullable delivery_total cannot be null');
        }
        $this->container['delivery_total'] = $delivery_total;

        return $this;
    }

    /**
     * Gets buyer_items_total
     *
     * @return float|null
     * @deprecated
     */
    public function getBuyerItemsTotal(): ?float
    {
        return $this->container['buyer_items_total'];
    }

    /**
     * Sets buyer_items_total
     *
     * @param float|null $buyer_items_total {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
     *
     * @return $this
     * @deprecated
     */
    public function setBuyerItemsTotal(?float $buyer_items_total): static
    {
        if (is_null($buyer_items_total)) {
            throw new InvalidArgumentException('non-nullable buyer_items_total cannot be null');
        }
        $this->container['buyer_items_total'] = $buyer_items_total;

        return $this;
    }

    /**
     * Gets buyer_total
     *
     * @return float|null
     * @deprecated
     */
    public function getBuyerTotal(): ?float
    {
        return $this->container['buyer_total'];
    }

    /**
     * Sets buyer_total
     *
     * @param float|null $buyer_total {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
     *
     * @return $this
     * @deprecated
     */
    public function setBuyerTotal(?float $buyer_total): static
    {
        if (is_null($buyer_total)) {
            throw new InvalidArgumentException('non-nullable buyer_total cannot be null');
        }
        $this->container['buyer_total'] = $buyer_total;

        return $this;
    }

    /**
     * Gets buyer_items_total_before_discount
     *
     * @return float|null
     */
    public function getBuyerItemsTotalBeforeDiscount(): ?float
    {
        return $this->container['buyer_items_total_before_discount'];
    }

    /**
     * Sets buyer_items_total_before_discount
     *
     * @param float|null $buyer_items_total_before_discount Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.
     *
     * @return $this
     */
    public function setBuyerItemsTotalBeforeDiscount(?float $buyer_items_total_before_discount): static
    {
        if (is_null($buyer_items_total_before_discount)) {
            throw new InvalidArgumentException('non-nullable buyer_items_total_before_discount cannot be null');
        }
        $this->container['buyer_items_total_before_discount'] = $buyer_items_total_before_discount;

        return $this;
    }

    /**
     * Gets buyer_total_before_discount
     *
     * @return float|null
     * @deprecated
     */
    public function getBuyerTotalBeforeDiscount(): ?float
    {
        return $this->container['buyer_total_before_discount'];
    }

    /**
     * Sets buyer_total_before_discount
     *
     * @param float|null $buyer_total_before_discount {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).
     *
     * @return $this
     * @deprecated
     */
    public function setBuyerTotalBeforeDiscount(?float $buyer_total_before_discount): static
    {
        if (is_null($buyer_total_before_discount)) {
            throw new InvalidArgumentException('non-nullable buyer_total_before_discount cannot be null');
        }
        $this->container['buyer_total_before_discount'] = $buyer_total_before_discount;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \OpenAPI\Client\Model\OrderPaymentType|null
     */
    public function getPaymentType(): ?\OpenAPI\Client\Model\OrderPaymentType
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \OpenAPI\Client\Model\OrderPaymentType|null $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType(?\OpenAPI\Client\Model\OrderPaymentType $payment_type): static
    {
        if (is_null($payment_type)) {
            throw new InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \OpenAPI\Client\Model\OrderPaymentMethodType|null
     */
    public function getPaymentMethod(): ?\OpenAPI\Client\Model\OrderPaymentMethodType
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \OpenAPI\Client\Model\OrderPaymentMethodType|null $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod(?\OpenAPI\Client\Model\OrderPaymentMethodType $payment_method): static
    {
        if (is_null($payment_method)) {
            throw new InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets fake
     *
     * @return bool|null
     */
    public function getFake(): ?bool
    {
        return $this->container['fake'];
    }

    /**
     * Sets fake
     *
     * @param bool|null $fake Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     *
     * @return $this
     */
    public function setFake(?bool $fake): static
    {
        if (is_null($fake)) {
            throw new InvalidArgumentException('non-nullable fake cannot be null');
        }
        $this->container['fake'] = $fake;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\OrderItemDTO[]
     */
    public function getItems(): array
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\OrderItemDTO[] $items Список товаров в заказе.
     *
     * @return $this
     */
    public function setItems(array $items): static
    {
        if (is_null($items)) {
            throw new InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets subsidies
     *
     * @return \OpenAPI\Client\Model\OrderSubsidyDTO[]|null
     */
    public function getSubsidies(): ?array
    {
        return $this->container['subsidies'];
    }

    /**
     * Sets subsidies
     *
     * @param \OpenAPI\Client\Model\OrderSubsidyDTO[]|null $subsidies Список субсидий по типам.
     *
     * @return $this
     */
    public function setSubsidies(?array $subsidies): static
    {
        if (is_null($subsidies)) {
            array_push($this->openAPINullablesSetToNull, 'subsidies');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsidies', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subsidies'] = $subsidies;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return \OpenAPI\Client\Model\OrderDeliveryDTO|null
     */
    public function getDelivery(): ?\OpenAPI\Client\Model\OrderDeliveryDTO
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param \OpenAPI\Client\Model\OrderDeliveryDTO|null $delivery delivery
     *
     * @return $this
     */
    public function setDelivery(?\OpenAPI\Client\Model\OrderDeliveryDTO $delivery): static
    {
        if (is_null($delivery)) {
            throw new InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \OpenAPI\Client\Model\OrderBuyerDTO|null
     */
    public function getBuyer(): ?\OpenAPI\Client\Model\OrderBuyerDTO
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \OpenAPI\Client\Model\OrderBuyerDTO|null $buyer buyer
     *
     * @return $this
     */
    public function setBuyer(?\OpenAPI\Client\Model\OrderBuyerDTO $buyer): static
    {
        if (is_null($buyer)) {
            throw new InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Комментарий к заказу.
     *
     * @return $this
     */
    public function setNotes(?string $notes): static
    {
        if (is_null($notes)) {
            throw new InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets tax_system
     *
     * @return \OpenAPI\Client\Model\OrderTaxSystemType|null
     */
    public function getTaxSystem(): ?\OpenAPI\Client\Model\OrderTaxSystemType
    {
        return $this->container['tax_system'];
    }

    /**
     * Sets tax_system
     *
     * @param \OpenAPI\Client\Model\OrderTaxSystemType|null $tax_system tax_system
     *
     * @return $this
     */
    public function setTaxSystem(?\OpenAPI\Client\Model\OrderTaxSystemType $tax_system): static
    {
        if (is_null($tax_system)) {
            throw new InvalidArgumentException('non-nullable tax_system cannot be null');
        }
        $this->container['tax_system'] = $tax_system;

        return $this;
    }

    /**
     * Gets cancel_requested
     *
     * @return bool|null
     */
    public function getCancelRequested(): ?bool
    {
        return $this->container['cancel_requested'];
    }

    /**
     * Sets cancel_requested
     *
     * @param bool|null $cancel_requested **Только для модели DBS**  Запрошена ли отмена.
     *
     * @return $this
     */
    public function setCancelRequested(?bool $cancel_requested): static
    {
        if (is_null($cancel_requested)) {
            throw new InvalidArgumentException('non-nullable cancel_requested cannot be null');
        }
        $this->container['cancel_requested'] = $cancel_requested;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return string|null
     */
    public function getExpiryDate(): ?string
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param string|null $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate(?string $expiry_date): static
    {
        if (is_null($expiry_date)) {
            throw new InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


