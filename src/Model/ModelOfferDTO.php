<?php
/**
 * ModelOfferDTO
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModelOfferDTO Class Doc Comment
 *
 * @description Информация о предложении.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ModelOfferDTO implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ModelOfferDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'discount' => 'int',
        'name' => 'string',
        'pos' => 'int',
        'pre_discount_price' => 'float',
        'price' => 'float',
        'region_id' => 'int',
        'shipping_cost' => 'float',
        'shop_name' => 'string',
        'shop_rating' => 'int',
        'in_stock' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'discount' => 'int32',
        'name' => null,
        'pos' => 'int32',
        'pre_discount_price' => null,
        'price' => null,
        'region_id' => 'int64',
        'shipping_cost' => null,
        'shop_name' => null,
        'shop_rating' => 'int32',
        'in_stock' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'discount' => false,
        'name' => false,
        'pos' => false,
        'pre_discount_price' => false,
        'price' => false,
        'region_id' => false,
        'shipping_cost' => false,
        'shop_name' => false,
        'shop_rating' => false,
        'in_stock' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'discount' => 'discount',
        'name' => 'name',
        'pos' => 'pos',
        'pre_discount_price' => 'preDiscountPrice',
        'price' => 'price',
        'region_id' => 'regionId',
        'shipping_cost' => 'shippingCost',
        'shop_name' => 'shopName',
        'shop_rating' => 'shopRating',
        'in_stock' => 'inStock'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'discount' => 'setDiscount',
        'name' => 'setName',
        'pos' => 'setPos',
        'pre_discount_price' => 'setPreDiscountPrice',
        'price' => 'setPrice',
        'region_id' => 'setRegionId',
        'shipping_cost' => 'setShippingCost',
        'shop_name' => 'setShopName',
        'shop_rating' => 'setShopRating',
        'in_stock' => 'setInStock'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'discount' => 'getDiscount',
        'name' => 'getName',
        'pos' => 'getPos',
        'pre_discount_price' => 'getPreDiscountPrice',
        'price' => 'getPrice',
        'region_id' => 'getRegionId',
        'shipping_cost' => 'getShippingCost',
        'shop_name' => 'getShopName',
        'shop_rating' => 'getShopRating',
        'in_stock' => 'getInStock'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pos', $data ?? [], null);
        $this->setIfExists('pre_discount_price', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('region_id', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('shop_name', $data ?? [], null);
        $this->setIfExists('shop_rating', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discount
     *
     * @return int|null
     */
    public function getDiscount(): ?int
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int|null $discount Скидка на предложение в процентах.
     *
     * @return $this
     */
    public function setDiscount(?int $discount): static
    {
        if (is_null($discount)) {
            throw new InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Наименование предложения.
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pos
     *
     * @return int|null
     */
    public function getPos(): ?int
    {
        return $this->container['pos'];
    }

    /**
     * Sets pos
     *
     * @param int|null $pos Позиция предложения в выдаче Маркета на карточке модели.
     *
     * @return $this
     */
    public function setPos(?int $pos): static
    {
        if (is_null($pos)) {
            throw new InvalidArgumentException('non-nullable pos cannot be null');
        }
        $this->container['pos'] = $pos;

        return $this;
    }

    /**
     * Gets pre_discount_price
     *
     * @return float|null
     */
    public function getPreDiscountPrice(): ?float
    {
        return $this->container['pre_discount_price'];
    }

    /**
     * Sets pre_discount_price
     *
     * @param float|null $pre_discount_price Цена предложения без скидки магазина.
     *
     * @return $this
     */
    public function setPreDiscountPrice(?float $pre_discount_price): static
    {
        if (is_null($pre_discount_price)) {
            throw new InvalidArgumentException('non-nullable pre_discount_price cannot be null');
        }
        $this->container['pre_discount_price'] = $pre_discount_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
     *
     * @return $this
     */
    public function setPrice(?float $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return int|null
     */
    public function getRegionId(): ?int
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param int|null $region_id Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.
     *
     * @return $this
     */
    public function setRegionId(?int $region_id): static
    {
        if (is_null($region_id)) {
            throw new InvalidArgumentException('non-nullable region_id cannot be null');
        }
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return float|null
     */
    public function getShippingCost(): ?float
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param float|null $shipping_cost Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.
     *
     * @return $this
     */
    public function setShippingCost(?float $shipping_cost): static
    {
        if (is_null($shipping_cost)) {
            throw new InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string|null
     */
    public function getShopName(): ?string
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string|null $shop_name Название магазина (в том виде, в котором отображается на Маркете).
     *
     * @return $this
     */
    public function setShopName(?string $shop_name): static
    {
        if (is_null($shop_name)) {
            throw new InvalidArgumentException('non-nullable shop_name cannot be null');
        }
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets shop_rating
     *
     * @return int|null
     */
    public function getShopRating(): ?int
    {
        return $this->container['shop_rating'];
    }

    /**
     * Sets shop_rating
     *
     * @param int|null $shop_rating Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`.
     *
     * @return $this
     */
    public function setShopRating(?int $shop_rating): static
    {
        if (is_null($shop_rating)) {
            throw new InvalidArgumentException('non-nullable shop_rating cannot be null');
        }
        $this->container['shop_rating'] = $shop_rating;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return int|null
     * @deprecated
     */
    public function getInStock(): ?int
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param int|null $in_stock {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}
     *
     * @return $this
     * @deprecated
     */
    public function setInStock(?int $in_stock): static
    {
        if (is_null($in_stock)) {
            throw new InvalidArgumentException('non-nullable in_stock cannot be null');
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


