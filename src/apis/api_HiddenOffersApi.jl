# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function add_hidden_offers_read(handler)
    function add_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["AddHiddenOffersRequest"] = OpenAPI.Servers.to_param_type(AddHiddenOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function add_hidden_offers_validate(handler)
    function add_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function add_hidden_offers_invoke(impl; post_invoke=nothing)
    function add_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.add_hidden_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["AddHiddenOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_hidden_offers_read(handler)
    function delete_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["DeleteHiddenOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteHiddenOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_hidden_offers_validate(handler)
    function delete_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_hidden_offers_invoke(impl; post_invoke=nothing)
    function delete_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_hidden_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["DeleteHiddenOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_hidden_offers_read(handler)
    function get_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["offer_id"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "offer_id", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["offset"] = OpenAPI.Servers.to_param(Int64, query_params, "offset", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_hidden_offers_validate(handler)
    function get_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_hidden_offers", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_hidden_offers_invoke(impl; post_invoke=nothing)
    function get_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_hidden_offers(req::HTTP.Request, openapi_params["campaignId"]; offer_id=get(openapi_params, "offer_id", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), offset=get(openapi_params, "offset", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerHiddenOffersApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/hidden-offers", OpenAPI.Servers.middleware(impl, add_hidden_offers_read, add_hidden_offers_validate, add_hidden_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/hidden-offers/delete", OpenAPI.Servers.middleware(impl, delete_hidden_offers_read, delete_hidden_offers_validate, delete_hidden_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/hidden-offers", OpenAPI.Servers.middleware(impl, get_hidden_offers_read, get_hidden_offers_validate, get_hidden_offers_invoke; optional_middlewares...))
    return router
end
