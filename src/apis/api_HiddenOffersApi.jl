# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct HiddenOffersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `HiddenOffersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ HiddenOffersApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_add_hidden_offers_HiddenOffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_add_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_hidden_offers_HiddenOffersApi, "/campaigns/{campaignId}/hidden-offers", ["OAuth", ], add_hidden_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Скрытие товаров и настройки скрытия

Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- add_hidden_offers_request::AddHiddenOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function add_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_hidden_offers(_api, campaign_id, add_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_hidden_offers(_api::HiddenOffersApi, response_stream::Channel, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_hidden_offers(_api, campaign_id, add_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_hidden_offers_HiddenOffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_hidden_offers_HiddenOffersApi, "/campaigns/{campaignId}/hidden-offers/delete", ["OAuth", ], delete_hidden_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Возобновление показа товаров

Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- delete_hidden_offers_request::DeleteHiddenOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function delete_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_hidden_offers(_api, campaign_id, delete_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_hidden_offers(_api::HiddenOffersApi, response_stream::Channel, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_hidden_offers(_api, campaign_id, delete_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_hidden_offers_HiddenOffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetHiddenOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_hidden_offers", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_hidden_offers_HiddenOffersApi, "/campaigns/{campaignId}/hidden-offers", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offer_id", offer_id; style="", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offset", offset; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о скрытых вами товарах

Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- campaign_id::Int64 (required)
- offer_id::Vector{String}
- page_token::String
- limit::Int64
- offset::Int64
- page::Int64
- page_size::Int64

Return: GetHiddenOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_hidden_offers(_api::HiddenOffersApi, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_hidden_offers(_api, campaign_id; offer_id=offer_id, page_token=page_token, limit=limit, offset=offset, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_hidden_offers(_api::HiddenOffersApi, response_stream::Channel, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_hidden_offers(_api, campaign_id; offer_id=offer_id, page_token=page_token, limit=limit, offset=offset, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_hidden_offers
export delete_hidden_offers
export get_hidden_offers
