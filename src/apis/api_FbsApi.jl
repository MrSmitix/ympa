# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function add_hidden_offers_read(handler)
    function add_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["AddHiddenOffersRequest"] = OpenAPI.Servers.to_param_type(AddHiddenOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function add_hidden_offers_validate(handler)
    function add_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function add_hidden_offers_invoke(impl; post_invoke=nothing)
    function add_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.add_hidden_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["AddHiddenOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function add_offers_to_archive_read(handler)
    function add_offers_to_archive_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["AddOffersToArchiveRequest"] = OpenAPI.Servers.to_param_type(AddOffersToArchiveRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function add_offers_to_archive_validate(handler)
    function add_offers_to_archive_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function add_offers_to_archive_invoke(impl; post_invoke=nothing)
    function add_offers_to_archive_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.add_offers_to_archive(req::HTTP.Request, openapi_params["businessId"], openapi_params["AddOffersToArchiveRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function calculate_tariffs_read(handler)
    function calculate_tariffs_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["CalculateTariffsRequest"] = OpenAPI.Servers.to_param_type(CalculateTariffsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function calculate_tariffs_validate(handler)
    function calculate_tariffs_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function calculate_tariffs_invoke(impl; post_invoke=nothing)
    function calculate_tariffs_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.calculate_tariffs(req::HTTP.Request, openapi_params["CalculateTariffsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function confirm_business_prices_read(handler)
    function confirm_business_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["ConfirmPricesRequest"] = OpenAPI.Servers.to_param_type(ConfirmPricesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function confirm_business_prices_validate(handler)
    function confirm_business_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function confirm_business_prices_invoke(impl; post_invoke=nothing)
    function confirm_business_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.confirm_business_prices(req::HTTP.Request, openapi_params["businessId"], openapi_params["ConfirmPricesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function confirm_campaign_prices_read(handler)
    function confirm_campaign_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["ConfirmPricesRequest"] = OpenAPI.Servers.to_param_type(ConfirmPricesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function confirm_campaign_prices_validate(handler)
    function confirm_campaign_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function confirm_campaign_prices_invoke(impl; post_invoke=nothing)
    function confirm_campaign_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.confirm_campaign_prices(req::HTTP.Request, openapi_params["campaignId"], openapi_params["ConfirmPricesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function confirm_shipment_read(handler)
    function confirm_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["ConfirmShipmentRequest"] = OpenAPI.Servers.to_param_type(ConfirmShipmentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function confirm_shipment_validate(handler)
    function confirm_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function confirm_shipment_invoke(impl; post_invoke=nothing)
    function confirm_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.confirm_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; confirm_shipment_request=get(openapi_params, "ConfirmShipmentRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function create_chat_read(handler)
    function create_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["CreateChatRequest"] = OpenAPI.Servers.to_param_type(CreateChatRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_chat_validate(handler)
    function create_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_chat_invoke(impl; post_invoke=nothing)
    function create_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["CreateChatRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_campaign_offers_read(handler)
    function delete_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["DeleteCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_campaign_offers_validate(handler)
    function delete_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_campaign_offers_invoke(impl; post_invoke=nothing)
    function delete_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["DeleteCampaignOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_goods_feedback_comment_read(handler)
    function delete_goods_feedback_comment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteGoodsFeedbackCommentRequest"] = OpenAPI.Servers.to_param_type(DeleteGoodsFeedbackCommentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_goods_feedback_comment_validate(handler)
    function delete_goods_feedback_comment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_goods_feedback_comment_invoke(impl; post_invoke=nothing)
    function delete_goods_feedback_comment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_goods_feedback_comment(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteGoodsFeedbackCommentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_hidden_offers_read(handler)
    function delete_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["DeleteHiddenOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteHiddenOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_hidden_offers_validate(handler)
    function delete_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_hidden_offers_invoke(impl; post_invoke=nothing)
    function delete_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_hidden_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["DeleteHiddenOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_offers_read(handler)
    function delete_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_offers_validate(handler)
    function delete_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_offers_invoke(impl; post_invoke=nothing)
    function delete_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_offers_from_archive_read(handler)
    function delete_offers_from_archive_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteOffersFromArchiveRequest"] = OpenAPI.Servers.to_param_type(DeleteOffersFromArchiveRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_offers_from_archive_validate(handler)
    function delete_offers_from_archive_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_offers_from_archive_invoke(impl; post_invoke=nothing)
    function delete_offers_from_archive_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_offers_from_archive(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteOffersFromArchiveRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_promo_offers_read(handler)
    function delete_promo_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeletePromoOffersRequest"] = OpenAPI.Servers.to_param_type(DeletePromoOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_promo_offers_validate(handler)
    function delete_promo_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_promo_offers_invoke(impl; post_invoke=nothing)
    function delete_promo_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_promo_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeletePromoOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_act_read(handler)
    function download_shipment_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_act_validate(handler)
    function download_shipment_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_act_invoke(impl; post_invoke=nothing)
    function download_shipment_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_discrepancy_act_read(handler)
    function download_shipment_discrepancy_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_discrepancy_act_validate(handler)
    function download_shipment_discrepancy_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_discrepancy_act_invoke(impl; post_invoke=nothing)
    function download_shipment_discrepancy_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_discrepancy_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_inbound_act_read(handler)
    function download_shipment_inbound_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_inbound_act_validate(handler)
    function download_shipment_inbound_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_inbound_act_invoke(impl; post_invoke=nothing)
    function download_shipment_inbound_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_inbound_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_pallet_labels_read(handler)
    function download_shipment_pallet_labels_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ShipmentPalletLabelPageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_pallet_labels_validate(handler)
    function download_shipment_pallet_labels_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_pallet_labels_invoke(impl; post_invoke=nothing)
    function download_shipment_pallet_labels_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_pallet_labels(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_reception_transfer_act_read(handler)
    function download_shipment_reception_transfer_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["warehouse_id"] = OpenAPI.Servers.to_param(Int64, query_params, "warehouse_id", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_reception_transfer_act_validate(handler)
    function download_shipment_reception_transfer_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_reception_transfer_act_invoke(impl; post_invoke=nothing)
    function download_shipment_reception_transfer_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_reception_transfer_act(req::HTTP.Request, openapi_params["campaignId"]; warehouse_id=get(openapi_params, "warehouse_id", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_transportation_waybill_read(handler)
    function download_shipment_transportation_waybill_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_transportation_waybill_validate(handler)
    function download_shipment_transportation_waybill_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_transportation_waybill_invoke(impl; post_invoke=nothing)
    function download_shipment_transportation_waybill_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_transportation_waybill(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_boost_consolidated_report_read(handler)
    function generate_boost_consolidated_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateBoostConsolidatedRequest"] = OpenAPI.Servers.to_param_type(GenerateBoostConsolidatedRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_boost_consolidated_report_validate(handler)
    function generate_boost_consolidated_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_boost_consolidated_report_invoke(impl; post_invoke=nothing)
    function generate_boost_consolidated_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_boost_consolidated_report(req::HTTP.Request, openapi_params["GenerateBoostConsolidatedRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_competitors_position_report_read(handler)
    function generate_competitors_position_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateCompetitorsPositionReportRequest"] = OpenAPI.Servers.to_param_type(GenerateCompetitorsPositionReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_competitors_position_report_validate(handler)
    function generate_competitors_position_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_competitors_position_report_invoke(impl; post_invoke=nothing)
    function generate_competitors_position_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_competitors_position_report(req::HTTP.Request, openapi_params["GenerateCompetitorsPositionReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_feedback_report_read(handler)
    function generate_goods_feedback_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsFeedbackRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsFeedbackRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_feedback_report_validate(handler)
    function generate_goods_feedback_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_feedback_report_invoke(impl; post_invoke=nothing)
    function generate_goods_feedback_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_feedback_report(req::HTTP.Request, openapi_params["GenerateGoodsFeedbackRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_realization_report_read(handler)
    function generate_goods_realization_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsRealizationReportRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsRealizationReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_realization_report_validate(handler)
    function generate_goods_realization_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_realization_report_invoke(impl; post_invoke=nothing)
    function generate_goods_realization_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_realization_report(req::HTTP.Request, openapi_params["GenerateGoodsRealizationReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_mass_order_labels_report_read(handler)
    function generate_mass_order_labels_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateMassOrderLabelsRequest"] = OpenAPI.Servers.to_param_type(GenerateMassOrderLabelsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_mass_order_labels_report_validate(handler)
    function generate_mass_order_labels_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_mass_order_labels_report_invoke(impl; post_invoke=nothing)
    function generate_mass_order_labels_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_mass_order_labels_report(req::HTTP.Request, openapi_params["GenerateMassOrderLabelsRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_order_label_read(handler)
    function generate_order_label_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["boxId"] = OpenAPI.Servers.to_param(Int64, path_params, "boxId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_order_label_validate(handler)
    function generate_order_label_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_order_label_invoke(impl; post_invoke=nothing)
    function generate_order_label_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_order_label(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["shipmentId"], openapi_params["boxId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_order_labels_read(handler)
    function generate_order_labels_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_order_labels_validate(handler)
    function generate_order_labels_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_order_labels_invoke(impl; post_invoke=nothing)
    function generate_order_labels_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_order_labels(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_prices_report_read(handler)
    function generate_prices_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GeneratePricesReportRequest"] = OpenAPI.Servers.to_param_type(GeneratePricesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_prices_report_validate(handler)
    function generate_prices_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_prices_report_invoke(impl; post_invoke=nothing)
    function generate_prices_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_prices_report(req::HTTP.Request, openapi_params["GeneratePricesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shelfs_statistics_report_read(handler)
    function generate_shelfs_statistics_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateShelfsStatisticsRequest"] = OpenAPI.Servers.to_param_type(GenerateShelfsStatisticsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shelfs_statistics_report_validate(handler)
    function generate_shelfs_statistics_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shelfs_statistics_report_invoke(impl; post_invoke=nothing)
    function generate_shelfs_statistics_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shelfs_statistics_report(req::HTTP.Request, openapi_params["GenerateShelfsStatisticsRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shipment_list_document_report_read(handler)
    function generate_shipment_list_document_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GenerateShipmentListDocumentReportRequest"] = OpenAPI.Servers.to_param_type(GenerateShipmentListDocumentReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shipment_list_document_report_validate(handler)
    function generate_shipment_list_document_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shipment_list_document_report_invoke(impl; post_invoke=nothing)
    function generate_shipment_list_document_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shipment_list_document_report(req::HTTP.Request, openapi_params["GenerateShipmentListDocumentReportRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shows_sales_report_read(handler)
    function generate_shows_sales_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateShowsSalesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateShowsSalesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shows_sales_report_validate(handler)
    function generate_shows_sales_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shows_sales_report_invoke(impl; post_invoke=nothing)
    function generate_shows_sales_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shows_sales_report(req::HTTP.Request, openapi_params["GenerateShowsSalesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_stocks_on_warehouses_report_read(handler)
    function generate_stocks_on_warehouses_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateStocksOnWarehousesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateStocksOnWarehousesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_stocks_on_warehouses_report_validate(handler)
    function generate_stocks_on_warehouses_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_stocks_on_warehouses_report_invoke(impl; post_invoke=nothing)
    function generate_stocks_on_warehouses_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_stocks_on_warehouses_report(req::HTTP.Request, openapi_params["GenerateStocksOnWarehousesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_marketplace_services_report_read(handler)
    function generate_united_marketplace_services_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedMarketplaceServicesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedMarketplaceServicesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_marketplace_services_report_validate(handler)
    function generate_united_marketplace_services_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_marketplace_services_report_invoke(impl; post_invoke=nothing)
    function generate_united_marketplace_services_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_marketplace_services_report(req::HTTP.Request, openapi_params["GenerateUnitedMarketplaceServicesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_netting_report_read(handler)
    function generate_united_netting_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedNettingReportRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedNettingReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_netting_report_validate(handler)
    function generate_united_netting_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_netting_report_invoke(impl; post_invoke=nothing)
    function generate_united_netting_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_netting_report(req::HTTP.Request, openapi_params["GenerateUnitedNettingReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_orders_report_read(handler)
    function generate_united_orders_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedOrdersRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedOrdersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_orders_report_validate(handler)
    function generate_united_orders_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_orders_report_invoke(impl; post_invoke=nothing)
    function generate_united_orders_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_orders_report(req::HTTP.Request, openapi_params["GenerateUnitedOrdersRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_all_offers_read(handler)
    function get_all_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, query_params, "feedId", style="", is_explode=false)
        openapi_params["chunk"] = OpenAPI.Servers.to_param(Int64, query_params, "chunk", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_all_offers_validate(handler)
    function get_all_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_all_offers_invoke(impl; post_invoke=nothing)
    function get_all_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_all_offers(req::HTTP.Request, openapi_params["campaignId"]; feed_id=get(openapi_params, "feedId", nothing), chunk=get(openapi_params, "chunk", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_bids_info_for_business_read(handler)
    function get_bids_info_for_business_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetBidsInfoRequest"] = OpenAPI.Servers.to_param_type(GetBidsInfoRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_bids_info_for_business_validate(handler)
    function get_bids_info_for_business_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_bids_info_for_business_invoke(impl; post_invoke=nothing)
    function get_bids_info_for_business_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_bids_info_for_business(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_bids_info_request=get(openapi_params, "GetBidsInfoRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_bids_recommendations_read(handler)
    function get_bids_recommendations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetBidsRecommendationsRequest"] = OpenAPI.Servers.to_param_type(GetBidsRecommendationsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_bids_recommendations_validate(handler)
    function get_bids_recommendations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_bids_recommendations_invoke(impl; post_invoke=nothing)
    function get_bids_recommendations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_bids_recommendations(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetBidsRecommendationsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_business_quarantine_offers_read(handler)
    function get_business_quarantine_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetQuarantineOffersRequest"] = OpenAPI.Servers.to_param_type(GetQuarantineOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_business_quarantine_offers_validate(handler)
    function get_business_quarantine_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_business_quarantine_offers_invoke(impl; post_invoke=nothing)
    function get_business_quarantine_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_business_quarantine_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetQuarantineOffersRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_business_settings_read(handler)
    function get_business_settings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_business_settings_validate(handler)
    function get_business_settings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_business_settings_invoke(impl; post_invoke=nothing)
    function get_business_settings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_business_settings(req::HTTP.Request, openapi_params["businessId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_read(handler)
    function get_campaign_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_validate(handler)
    function get_campaign_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_invoke(impl; post_invoke=nothing)
    function get_campaign_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_logins_read(handler)
    function get_campaign_logins_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_logins_validate(handler)
    function get_campaign_logins_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_logins_invoke(impl; post_invoke=nothing)
    function get_campaign_logins_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_logins(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_offers_read(handler)
    function get_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(GetCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_offers_validate(handler)
    function get_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_offers_invoke(impl; post_invoke=nothing)
    function get_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetCampaignOffersRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_quarantine_offers_read(handler)
    function get_campaign_quarantine_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetQuarantineOffersRequest"] = OpenAPI.Servers.to_param_type(GetQuarantineOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_quarantine_offers_validate(handler)
    function get_campaign_quarantine_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_quarantine_offers_invoke(impl; post_invoke=nothing)
    function get_campaign_quarantine_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_quarantine_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetQuarantineOffersRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_region_read(handler)
    function get_campaign_region_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_region_validate(handler)
    function get_campaign_region_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_region_invoke(impl; post_invoke=nothing)
    function get_campaign_region_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_region(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_settings_read(handler)
    function get_campaign_settings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_settings_validate(handler)
    function get_campaign_settings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_settings_invoke(impl; post_invoke=nothing)
    function get_campaign_settings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_settings(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaigns_read(handler)
    function get_campaigns_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaigns_validate(handler)
    function get_campaigns_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_campaigns", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_campaigns_invoke(impl; post_invoke=nothing)
    function get_campaigns_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaigns(req::HTTP.Request; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaigns_by_login_read(handler)
    function get_campaigns_by_login_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["login"] = OpenAPI.Servers.to_param(String, path_params, "login", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaigns_by_login_validate(handler)
    function get_campaigns_by_login_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_campaigns_by_login", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_campaigns_by_login_invoke(impl; post_invoke=nothing)
    function get_campaigns_by_login_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaigns_by_login(req::HTTP.Request, openapi_params["login"]; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_categories_max_sale_quantum_read(handler)
    function get_categories_max_sale_quantum_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GetCategoriesMaxSaleQuantumRequest"] = OpenAPI.Servers.to_param_type(GetCategoriesMaxSaleQuantumRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_categories_max_sale_quantum_validate(handler)
    function get_categories_max_sale_quantum_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_categories_max_sale_quantum_invoke(impl; post_invoke=nothing)
    function get_categories_max_sale_quantum_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_categories_max_sale_quantum(req::HTTP.Request, openapi_params["GetCategoriesMaxSaleQuantumRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_categories_tree_read(handler)
    function get_categories_tree_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GetCategoriesRequest"] = OpenAPI.Servers.to_param_type(GetCategoriesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_categories_tree_validate(handler)
    function get_categories_tree_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_categories_tree_invoke(impl; post_invoke=nothing)
    function get_categories_tree_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_categories_tree(req::HTTP.Request; get_categories_request=get(openapi_params, "GetCategoriesRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_category_content_parameters_read(handler)
    function get_category_content_parameters_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["categoryId"] = OpenAPI.Servers.to_param(Int64, path_params, "categoryId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_category_content_parameters_validate(handler)
    function get_category_content_parameters_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_category_content_parameters_invoke(impl; post_invoke=nothing)
    function get_category_content_parameters_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_category_content_parameters(req::HTTP.Request, openapi_params["categoryId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_chat_history_read(handler)
    function get_chat_history_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetChatHistoryRequest"] = OpenAPI.Servers.to_param_type(GetChatHistoryRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_chat_history_validate(handler)
    function get_chat_history_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_chat_history_invoke(impl; post_invoke=nothing)
    function get_chat_history_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_chat_history(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["GetChatHistoryRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_chats_read(handler)
    function get_chats_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetChatsRequest"] = OpenAPI.Servers.to_param_type(GetChatsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_chats_validate(handler)
    function get_chats_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_chats_invoke(impl; post_invoke=nothing)
    function get_chats_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_chats(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetChatsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_delivery_services_read(handler)
    function get_delivery_services_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_delivery_services_validate(handler)
    function get_delivery_services_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_delivery_services_invoke(impl; post_invoke=nothing)
    function get_delivery_services_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_delivery_services(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feed_read(handler)
    function get_feed_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feed_validate(handler)
    function get_feed_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feed_invoke(impl; post_invoke=nothing)
    function get_feed_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feed(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feed_index_logs_read(handler)
    function get_feed_index_logs_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["published_time_from"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "published_time_from", style="", is_explode=false)
        openapi_params["published_time_to"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "published_time_to", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(FeedIndexLogsStatusType, query_params, "status", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feed_index_logs_validate(handler)
    function get_feed_index_logs_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feed_index_logs_invoke(impl; post_invoke=nothing)
    function get_feed_index_logs_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feed_index_logs(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"]; limit=get(openapi_params, "limit", nothing), published_time_from=get(openapi_params, "published_time_from", nothing), published_time_to=get(openapi_params, "published_time_to", nothing), status=get(openapi_params, "status", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feedback_and_comment_updates_read(handler)
    function get_feedback_and_comment_updates_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["from_date"] = OpenAPI.Servers.to_param(Date, query_params, "from_date", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feedback_and_comment_updates_validate(handler)
    function get_feedback_and_comment_updates_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feedback_and_comment_updates_invoke(impl; post_invoke=nothing)
    function get_feedback_and_comment_updates_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feedback_and_comment_updates(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), from_date=get(openapi_params, "from_date", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feeds_read(handler)
    function get_feeds_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feeds_validate(handler)
    function get_feeds_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feeds_invoke(impl; post_invoke=nothing)
    function get_feeds_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feeds(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_goods_feedback_comments_read(handler)
    function get_goods_feedback_comments_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetGoodsFeedbackCommentsRequest"] = OpenAPI.Servers.to_param_type(GetGoodsFeedbackCommentsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_goods_feedback_comments_validate(handler)
    function get_goods_feedback_comments_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_goods_feedback_comments_invoke(impl; post_invoke=nothing)
    function get_goods_feedback_comments_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_goods_feedback_comments(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetGoodsFeedbackCommentsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_goods_feedbacks_read(handler)
    function get_goods_feedbacks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetGoodsFeedbackRequest"] = OpenAPI.Servers.to_param_type(GetGoodsFeedbackRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_goods_feedbacks_validate(handler)
    function get_goods_feedbacks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_goods_feedbacks_invoke(impl; post_invoke=nothing)
    function get_goods_feedbacks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_goods_feedbacks(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_goods_feedback_request=get(openapi_params, "GetGoodsFeedbackRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_goods_stats_read(handler)
    function get_goods_stats_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["GetGoodsStatsRequest"] = OpenAPI.Servers.to_param_type(GetGoodsStatsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_goods_stats_validate(handler)
    function get_goods_stats_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_goods_stats_invoke(impl; post_invoke=nothing)
    function get_goods_stats_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_goods_stats(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetGoodsStatsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_hidden_offers_read(handler)
    function get_hidden_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["offer_id"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "offer_id", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["offset"] = OpenAPI.Servers.to_param(Int64, query_params, "offset", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_hidden_offers_validate(handler)
    function get_hidden_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_hidden_offers", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_hidden_offers_invoke(impl; post_invoke=nothing)
    function get_hidden_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_hidden_offers(req::HTTP.Request, openapi_params["campaignId"]; offer_id=get(openapi_params, "offer_id", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), offset=get(openapi_params, "offset", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_cards_content_status_read(handler)
    function get_offer_cards_content_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferCardsContentStatusRequest"] = OpenAPI.Servers.to_param_type(GetOfferCardsContentStatusRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_cards_content_status_validate(handler)
    function get_offer_cards_content_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_cards_content_status_invoke(impl; post_invoke=nothing)
    function get_offer_cards_content_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_cards_content_status(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_offer_cards_content_status_request=get(openapi_params, "GetOfferCardsContentStatusRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_mapping_entries_read(handler)
    function get_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["offer_id"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "offer_id", style="", is_explode=false)
        openapi_params["shop_sku"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "shop_sku", style="", is_explode=false)
        openapi_params["mapping_kind"] = OpenAPI.Servers.to_param(OfferMappingKindType, query_params, "mapping_kind", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(Vector{OfferProcessingStatusType}, query_params, "status", style="", is_explode=false)
        openapi_params["availability"] = OpenAPI.Servers.to_param(Vector{OfferAvailabilityStatusType}, query_params, "availability", style="", is_explode=false)
        openapi_params["category_id"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "category_id", style="", is_explode=false)
        openapi_params["vendor"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "vendor", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_mapping_entries_validate(handler)
    function get_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function get_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"]; offer_id=get(openapi_params, "offer_id", nothing), shop_sku=get(openapi_params, "shop_sku", nothing), mapping_kind=get(openapi_params, "mapping_kind", nothing), status=get(openapi_params, "status", nothing), availability=get(openapi_params, "availability", nothing), category_id=get(openapi_params, "category_id", nothing), vendor=get(openapi_params, "vendor", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_mappings_read(handler)
    function get_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(GetOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_mappings_validate(handler)
    function get_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_mappings_invoke(impl; post_invoke=nothing)
    function get_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_mappings(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_offer_mappings_request=get(openapi_params, "GetOfferMappingsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_recommendations_read(handler)
    function get_offer_recommendations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferRecommendationsRequest"] = OpenAPI.Servers.to_param_type(GetOfferRecommendationsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_recommendations_validate(handler)
    function get_offer_recommendations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_recommendations_invoke(impl; post_invoke=nothing)
    function get_offer_recommendations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_recommendations(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetOfferRecommendationsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offers_read(handler)
    function get_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["query"] = OpenAPI.Servers.to_param(String, query_params, "query", style="", is_explode=false)
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, query_params, "feedId", style="", is_explode=false)
        openapi_params["shopCategoryId"] = OpenAPI.Servers.to_param(String, query_params, "shopCategoryId", style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["matched"] = OpenAPI.Servers.to_param(Bool, query_params, "matched", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offers_validate(handler)
    function get_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_offers", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_offers_invoke(impl; post_invoke=nothing)
    function get_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offers(req::HTTP.Request, openapi_params["campaignId"]; query=get(openapi_params, "query", nothing), feed_id=get(openapi_params, "feedId", nothing), shop_category_id=get(openapi_params, "shopCategoryId", nothing), currency=get(openapi_params, "currency", nothing), matched=get(openapi_params, "matched", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_read(handler)
    function get_order_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_validate(handler)
    function get_order_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_invoke(impl; post_invoke=nothing)
    function get_order_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_business_buyer_info_read(handler)
    function get_order_business_buyer_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_business_buyer_info_validate(handler)
    function get_order_business_buyer_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_business_buyer_info_invoke(impl; post_invoke=nothing)
    function get_order_business_buyer_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order_business_buyer_info(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_business_documents_info_read(handler)
    function get_order_business_documents_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_business_documents_info_validate(handler)
    function get_order_business_documents_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_business_documents_info_invoke(impl; post_invoke=nothing)
    function get_order_business_documents_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order_business_documents_info(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_labels_data_read(handler)
    function get_order_labels_data_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_labels_data_validate(handler)
    function get_order_labels_data_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_labels_data_invoke(impl; post_invoke=nothing)
    function get_order_labels_data_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order_labels_data(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_orders_read(handler)
    function get_orders_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["orderIds"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "orderIds", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(Vector{OrderStatusType}, query_params, "status", style="", is_explode=false)
        openapi_params["substatus"] = OpenAPI.Servers.to_param(Vector{OrderSubstatusType}, query_params, "substatus", style="", is_explode=false)
        openapi_params["fromDate"] = OpenAPI.Servers.to_param(Date, query_params, "fromDate", style="", is_explode=false)
        openapi_params["toDate"] = OpenAPI.Servers.to_param(Date, query_params, "toDate", style="", is_explode=false)
        openapi_params["supplierShipmentDateFrom"] = OpenAPI.Servers.to_param(Date, query_params, "supplierShipmentDateFrom", style="", is_explode=false)
        openapi_params["supplierShipmentDateTo"] = OpenAPI.Servers.to_param(Date, query_params, "supplierShipmentDateTo", style="", is_explode=false)
        openapi_params["updatedAtFrom"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "updatedAtFrom", style="", is_explode=false)
        openapi_params["updatedAtTo"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "updatedAtTo", style="", is_explode=false)
        openapi_params["dispatchType"] = OpenAPI.Servers.to_param(OrderDeliveryDispatchType, query_params, "dispatchType", style="", is_explode=false)
        openapi_params["fake"] = OpenAPI.Servers.to_param(Bool, query_params, "fake", style="", is_explode=false)
        openapi_params["hasCis"] = OpenAPI.Servers.to_param(Bool, query_params, "hasCis", style="", is_explode=false)
        openapi_params["onlyWaitingForCancellationApprove"] = OpenAPI.Servers.to_param(Bool, query_params, "onlyWaitingForCancellationApprove", style="", is_explode=false)
        openapi_params["onlyEstimatedDelivery"] = OpenAPI.Servers.to_param(Bool, query_params, "onlyEstimatedDelivery", style="", is_explode=false)
        openapi_params["buyerType"] = OpenAPI.Servers.to_param(OrderBuyerType, query_params, "buyerType", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_orders_validate(handler)
    function get_orders_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        
        
        OpenAPI.validate_param("page", "get_orders", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_orders_invoke(impl; post_invoke=nothing)
    function get_orders_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_orders(req::HTTP.Request, openapi_params["campaignId"]; order_ids=get(openapi_params, "orderIds", nothing), status=get(openapi_params, "status", nothing), substatus=get(openapi_params, "substatus", nothing), from_date=get(openapi_params, "fromDate", nothing), to_date=get(openapi_params, "toDate", nothing), supplier_shipment_date_from=get(openapi_params, "supplierShipmentDateFrom", nothing), supplier_shipment_date_to=get(openapi_params, "supplierShipmentDateTo", nothing), updated_at_from=get(openapi_params, "updatedAtFrom", nothing), updated_at_to=get(openapi_params, "updatedAtTo", nothing), dispatch_type=get(openapi_params, "dispatchType", nothing), fake=get(openapi_params, "fake", nothing), has_cis=get(openapi_params, "hasCis", nothing), only_waiting_for_cancellation_approve=get(openapi_params, "onlyWaitingForCancellationApprove", nothing), only_estimated_delivery=get(openapi_params, "onlyEstimatedDelivery", nothing), buyer_type=get(openapi_params, "buyerType", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_orders_stats_read(handler)
    function get_orders_stats_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOrdersStatsRequest"] = OpenAPI.Servers.to_param_type(GetOrdersStatsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_orders_stats_validate(handler)
    function get_orders_stats_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_orders_stats_invoke(impl; post_invoke=nothing)
    function get_orders_stats_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_orders_stats(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_orders_stats_request=get(openapi_params, "GetOrdersStatsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_prices_read(handler)
    function get_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["archived"] = OpenAPI.Servers.to_param(Bool, query_params, "archived", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_prices_validate(handler)
    function get_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_prices_invoke(impl; post_invoke=nothing)
    function get_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_prices(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), archived=get(openapi_params, "archived", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_prices_by_offer_ids_read(handler)
    function get_prices_by_offer_ids_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetPricesByOfferIdsRequest"] = OpenAPI.Servers.to_param_type(GetPricesByOfferIdsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_prices_by_offer_ids_validate(handler)
    function get_prices_by_offer_ids_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_prices_by_offer_ids_invoke(impl; post_invoke=nothing)
    function get_prices_by_offer_ids_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_prices_by_offer_ids(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_prices_by_offer_ids_request=get(openapi_params, "GetPricesByOfferIdsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_promo_offers_read(handler)
    function get_promo_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetPromoOffersRequest"] = OpenAPI.Servers.to_param_type(GetPromoOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_promo_offers_validate(handler)
    function get_promo_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_promo_offers_invoke(impl; post_invoke=nothing)
    function get_promo_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_promo_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetPromoOffersRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_promos_read(handler)
    function get_promos_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetPromosRequest"] = OpenAPI.Servers.to_param_type(GetPromosRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_promos_validate(handler)
    function get_promos_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_promos_invoke(impl; post_invoke=nothing)
    function get_promos_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_promos(req::HTTP.Request, openapi_params["businessId"]; get_promos_request=get(openapi_params, "GetPromosRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_quality_rating_details_read(handler)
    function get_quality_rating_details_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_quality_rating_details_validate(handler)
    function get_quality_rating_details_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_quality_rating_details_invoke(impl; post_invoke=nothing)
    function get_quality_rating_details_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_quality_rating_details(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_quality_ratings_read(handler)
    function get_quality_ratings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetQualityRatingRequest"] = OpenAPI.Servers.to_param_type(GetQualityRatingRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_quality_ratings_validate(handler)
    function get_quality_ratings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_quality_ratings_invoke(impl; post_invoke=nothing)
    function get_quality_ratings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_quality_ratings(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetQualityRatingRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_report_info_read(handler)
    function get_report_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["reportId"] = OpenAPI.Servers.to_param(String, path_params, "reportId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_report_info_validate(handler)
    function get_report_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_report_info_invoke(impl; post_invoke=nothing)
    function get_report_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_report_info(req::HTTP.Request, openapi_params["reportId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_return_read(handler)
    function get_return_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_validate(handler)
    function get_return_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_invoke(impl; post_invoke=nothing)
    function get_return_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_return_application_read(handler)
    function get_return_application_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_application_validate(handler)
    function get_return_application_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_application_invoke(impl; post_invoke=nothing)
    function get_return_application_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return_application(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_return_photo_read(handler)
    function get_return_photo_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        openapi_params["itemId"] = OpenAPI.Servers.to_param(Int64, path_params, "itemId", required=true, )
        openapi_params["imageHash"] = OpenAPI.Servers.to_param(String, path_params, "imageHash", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_photo_validate(handler)
    function get_return_photo_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_photo_invoke(impl; post_invoke=nothing)
    function get_return_photo_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return_photo(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"], openapi_params["itemId"], openapi_params["imageHash"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_returns_read(handler)
    function get_returns_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["orderIds"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "orderIds", style="", is_explode=false)
        openapi_params["statuses"] = OpenAPI.Servers.to_param(Vector{RefundStatusType}, query_params, "statuses", style="", is_explode=false)
        openapi_params["type"] = OpenAPI.Servers.to_param(ReturnType, query_params, "type", style="", is_explode=false)
        openapi_params["fromDate"] = OpenAPI.Servers.to_param(Date, query_params, "fromDate", style="", is_explode=false)
        openapi_params["toDate"] = OpenAPI.Servers.to_param(Date, query_params, "toDate", style="", is_explode=false)
        openapi_params["from_date"] = OpenAPI.Servers.to_param(Date, query_params, "from_date", style="", is_explode=false)
        openapi_params["to_date"] = OpenAPI.Servers.to_param(Date, query_params, "to_date", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_returns_validate(handler)
    function get_returns_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("orderIds", "get_returns", :maxItems, openapi_params["orderIds"], 50)
        
        return handler(req)
    end
end

function get_returns_invoke(impl; post_invoke=nothing)
    function get_returns_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_returns(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), order_ids=get(openapi_params, "orderIds", nothing), statuses=get(openapi_params, "statuses", nothing), type=get(openapi_params, "type", nothing), from_date=get(openapi_params, "fromDate", nothing), to_date=get(openapi_params, "toDate", nothing), from_date2=get(openapi_params, "from_date", nothing), to_date2=get(openapi_params, "to_date", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_shipment_read(handler)
    function get_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["cancelledOrders"] = OpenAPI.Servers.to_param(Bool, query_params, "cancelledOrders", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_shipment_validate(handler)
    function get_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_shipment_invoke(impl; post_invoke=nothing)
    function get_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; cancelled_orders=get(openapi_params, "cancelledOrders", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_shipment_orders_info_read(handler)
    function get_shipment_orders_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_shipment_orders_info_validate(handler)
    function get_shipment_orders_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_shipment_orders_info_invoke(impl; post_invoke=nothing)
    function get_shipment_orders_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_shipment_orders_info(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_stocks_read(handler)
    function get_stocks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetWarehouseStocksRequest"] = OpenAPI.Servers.to_param_type(GetWarehouseStocksRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_stocks_validate(handler)
    function get_stocks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_stocks_invoke(impl; post_invoke=nothing)
    function get_stocks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_stocks(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_warehouse_stocks_request=get(openapi_params, "GetWarehouseStocksRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_suggested_offer_mapping_entries_read(handler)
    function get_suggested_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["GetSuggestedOfferMappingEntriesRequest"] = OpenAPI.Servers.to_param_type(GetSuggestedOfferMappingEntriesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_suggested_offer_mapping_entries_validate(handler)
    function get_suggested_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_suggested_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function get_suggested_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_suggested_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetSuggestedOfferMappingEntriesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_suggested_offer_mappings_read(handler)
    function get_suggested_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetSuggestedOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(GetSuggestedOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_suggested_offer_mappings_validate(handler)
    function get_suggested_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_suggested_offer_mappings_invoke(impl; post_invoke=nothing)
    function get_suggested_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_suggested_offer_mappings(req::HTTP.Request, openapi_params["businessId"]; get_suggested_offer_mappings_request=get(openapi_params, "GetSuggestedOfferMappingsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_suggested_prices_read(handler)
    function get_suggested_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["SuggestPricesRequest"] = OpenAPI.Servers.to_param_type(SuggestPricesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_suggested_prices_validate(handler)
    function get_suggested_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_suggested_prices_invoke(impl; post_invoke=nothing)
    function get_suggested_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_suggested_prices(req::HTTP.Request, openapi_params["campaignId"], openapi_params["SuggestPricesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_warehouses_read(handler)
    function get_warehouses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_warehouses_validate(handler)
    function get_warehouses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_warehouses_invoke(impl; post_invoke=nothing)
    function get_warehouses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_warehouses(req::HTTP.Request, openapi_params["businessId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function provide_order_item_identifiers_read(handler)
    function provide_order_item_identifiers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["ProvideOrderItemIdentifiersRequest"] = OpenAPI.Servers.to_param_type(ProvideOrderItemIdentifiersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function provide_order_item_identifiers_validate(handler)
    function provide_order_item_identifiers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function provide_order_item_identifiers_invoke(impl; post_invoke=nothing)
    function provide_order_item_identifiers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.provide_order_item_identifiers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["ProvideOrderItemIdentifiersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function put_bids_for_business_read(handler)
    function put_bids_for_business_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["PutSkuBidsRequest"] = OpenAPI.Servers.to_param_type(PutSkuBidsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function put_bids_for_business_validate(handler)
    function put_bids_for_business_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function put_bids_for_business_invoke(impl; post_invoke=nothing)
    function put_bids_for_business_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.put_bids_for_business(req::HTTP.Request, openapi_params["businessId"], openapi_params["PutSkuBidsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function put_bids_for_campaign_read(handler)
    function put_bids_for_campaign_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["PutSkuBidsRequest"] = OpenAPI.Servers.to_param_type(PutSkuBidsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function put_bids_for_campaign_validate(handler)
    function put_bids_for_campaign_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function put_bids_for_campaign_invoke(impl; post_invoke=nothing)
    function put_bids_for_campaign_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.put_bids_for_campaign(req::HTTP.Request, openapi_params["campaignId"], openapi_params["PutSkuBidsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function refresh_feed_read(handler)
    function refresh_feed_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function refresh_feed_validate(handler)
    function refresh_feed_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function refresh_feed_invoke(impl; post_invoke=nothing)
    function refresh_feed_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.refresh_feed(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_region_children_read(handler)
    function search_region_children_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, path_params, "regionId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_region_children_validate(handler)
    function search_region_children_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "search_region_children", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function search_region_children_invoke(impl; post_invoke=nothing)
    function search_region_children_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_region_children(req::HTTP.Request, openapi_params["regionId"]; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_regions_by_id_read(handler)
    function search_regions_by_id_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, path_params, "regionId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_regions_by_id_validate(handler)
    function search_regions_by_id_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_regions_by_id_invoke(impl; post_invoke=nothing)
    function search_regions_by_id_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_regions_by_id(req::HTTP.Request, openapi_params["regionId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_regions_by_name_read(handler)
    function search_regions_by_name_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["name"] = OpenAPI.Servers.to_param(String, query_params, "name", required=true, style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_regions_by_name_validate(handler)
    function search_regions_by_name_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_regions_by_name_invoke(impl; post_invoke=nothing)
    function search_regions_by_name_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_regions_by_name(req::HTTP.Request, openapi_params["name"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_shipments_read(handler)
    function search_shipments_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["SearchShipmentsRequest"] = OpenAPI.Servers.to_param_type(SearchShipmentsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_shipments_validate(handler)
    function search_shipments_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_shipments_invoke(impl; post_invoke=nothing)
    function search_shipments_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_shipments(req::HTTP.Request, openapi_params["campaignId"], openapi_params["SearchShipmentsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function send_file_to_chat_read(handler)
    function send_file_to_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        ismultipart = true
        form_data = ismultipart ? HTTP.parse_multipart_form(req) : HTTP.queryparams(String(copy(req.body)))
        openapi_params["file"] = OpenAPI.Servers.to_param(Vector{UInt8}, form_data, "file"; multipart=ismultipart, isfile=true, required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function send_file_to_chat_validate(handler)
    function send_file_to_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function send_file_to_chat_invoke(impl; post_invoke=nothing)
    function send_file_to_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.send_file_to_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["file"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function send_message_to_chat_read(handler)
    function send_message_to_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        openapi_params["SendMessageToChatRequest"] = OpenAPI.Servers.to_param_type(SendMessageToChatRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function send_message_to_chat_validate(handler)
    function send_message_to_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function send_message_to_chat_invoke(impl; post_invoke=nothing)
    function send_message_to_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.send_message_to_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["SendMessageToChatRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_feed_params_read(handler)
    function set_feed_params_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        openapi_params["SetFeedParamsRequest"] = OpenAPI.Servers.to_param_type(SetFeedParamsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_feed_params_validate(handler)
    function set_feed_params_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_feed_params_invoke(impl; post_invoke=nothing)
    function set_feed_params_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_feed_params(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"], openapi_params["SetFeedParamsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_box_layout_read(handler)
    function set_order_box_layout_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["SetOrderBoxLayoutRequest"] = OpenAPI.Servers.to_param_type(SetOrderBoxLayoutRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_box_layout_validate(handler)
    function set_order_box_layout_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_box_layout_invoke(impl; post_invoke=nothing)
    function set_order_box_layout_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_box_layout(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["SetOrderBoxLayoutRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_shipment_boxes_read(handler)
    function set_order_shipment_boxes_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["SetOrderShipmentBoxesRequest"] = OpenAPI.Servers.to_param_type(SetOrderShipmentBoxesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_shipment_boxes_validate(handler)
    function set_order_shipment_boxes_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_shipment_boxes_invoke(impl; post_invoke=nothing)
    function set_order_shipment_boxes_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_shipment_boxes(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["shipmentId"], openapi_params["SetOrderShipmentBoxesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_shipment_pallets_count_read(handler)
    function set_shipment_pallets_count_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["SetShipmentPalletsCountRequest"] = OpenAPI.Servers.to_param_type(SetShipmentPalletsCountRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_shipment_pallets_count_validate(handler)
    function set_shipment_pallets_count_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_shipment_pallets_count_invoke(impl; post_invoke=nothing)
    function set_shipment_pallets_count_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_shipment_pallets_count(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"], openapi_params["SetShipmentPalletsCountRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function skip_goods_feedbacks_reaction_read(handler)
    function skip_goods_feedbacks_reaction_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["SkipGoodsFeedbackReactionRequest"] = OpenAPI.Servers.to_param_type(SkipGoodsFeedbackReactionRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function skip_goods_feedbacks_reaction_validate(handler)
    function skip_goods_feedbacks_reaction_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function skip_goods_feedbacks_reaction_invoke(impl; post_invoke=nothing)
    function skip_goods_feedbacks_reaction_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.skip_goods_feedbacks_reaction(req::HTTP.Request, openapi_params["businessId"], openapi_params["SkipGoodsFeedbackReactionRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function transfer_orders_from_shipment_read(handler)
    function transfer_orders_from_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["TransferOrdersFromShipmentRequest"] = OpenAPI.Servers.to_param_type(TransferOrdersFromShipmentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function transfer_orders_from_shipment_validate(handler)
    function transfer_orders_from_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function transfer_orders_from_shipment_invoke(impl; post_invoke=nothing)
    function transfer_orders_from_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.transfer_orders_from_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"], openapi_params["TransferOrdersFromShipmentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_business_prices_read(handler)
    function update_business_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateBusinessPricesRequest"] = OpenAPI.Servers.to_param_type(UpdateBusinessPricesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_business_prices_validate(handler)
    function update_business_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_business_prices_invoke(impl; post_invoke=nothing)
    function update_business_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_business_prices(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateBusinessPricesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_campaign_offers_read(handler)
    function update_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(UpdateCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_campaign_offers_validate(handler)
    function update_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_campaign_offers_invoke(impl; post_invoke=nothing)
    function update_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateCampaignOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_goods_feedback_comment_read(handler)
    function update_goods_feedback_comment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateGoodsFeedbackCommentRequest"] = OpenAPI.Servers.to_param_type(UpdateGoodsFeedbackCommentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_goods_feedback_comment_validate(handler)
    function update_goods_feedback_comment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_goods_feedback_comment_invoke(impl; post_invoke=nothing)
    function update_goods_feedback_comment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_goods_feedback_comment(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateGoodsFeedbackCommentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_content_read(handler)
    function update_offer_content_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateOfferContentRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferContentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_content_validate(handler)
    function update_offer_content_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_content_invoke(impl; post_invoke=nothing)
    function update_offer_content_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_content(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateOfferContentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_mapping_entries_read(handler)
    function update_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateOfferMappingEntryRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferMappingEntryRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_mapping_entries_validate(handler)
    function update_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function update_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateOfferMappingEntryRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_mappings_read(handler)
    function update_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_mappings_validate(handler)
    function update_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_mappings_invoke(impl; post_invoke=nothing)
    function update_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_mappings(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateOfferMappingsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_items_read(handler)
    function update_order_items_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["UpdateOrderItemRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderItemRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_items_validate(handler)
    function update_order_items_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_items_invoke(impl; post_invoke=nothing)
    function update_order_items_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_items(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["UpdateOrderItemRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_status_read(handler)
    function update_order_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["UpdateOrderStatusRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderStatusRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_status_validate(handler)
    function update_order_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_status_invoke(impl; post_invoke=nothing)
    function update_order_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_status(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["UpdateOrderStatusRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_statuses_read(handler)
    function update_order_statuses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateOrderStatusesRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderStatusesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_statuses_validate(handler)
    function update_order_statuses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_statuses_invoke(impl; post_invoke=nothing)
    function update_order_statuses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_statuses(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateOrderStatusesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_prices_read(handler)
    function update_prices_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdatePricesRequest"] = OpenAPI.Servers.to_param_type(UpdatePricesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_prices_validate(handler)
    function update_prices_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_prices_invoke(impl; post_invoke=nothing)
    function update_prices_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_prices(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdatePricesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_promo_offers_read(handler)
    function update_promo_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdatePromoOffersRequest"] = OpenAPI.Servers.to_param_type(UpdatePromoOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_promo_offers_validate(handler)
    function update_promo_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_promo_offers_invoke(impl; post_invoke=nothing)
    function update_promo_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_promo_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdatePromoOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_stocks_read(handler)
    function update_stocks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateStocksRequest"] = OpenAPI.Servers.to_param_type(UpdateStocksRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_stocks_validate(handler)
    function update_stocks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_stocks_invoke(impl; post_invoke=nothing)
    function update_stocks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_stocks(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateStocksRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerFbsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/hidden-offers", OpenAPI.Servers.middleware(impl, add_hidden_offers_read, add_hidden_offers_validate, add_hidden_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/archive", OpenAPI.Servers.middleware(impl, add_offers_to_archive_read, add_offers_to_archive_validate, add_offers_to_archive_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/tariffs/calculate", OpenAPI.Servers.middleware(impl, calculate_tariffs_read, calculate_tariffs_validate, calculate_tariffs_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/price-quarantine/confirm", OpenAPI.Servers.middleware(impl, confirm_business_prices_read, confirm_business_prices_validate, confirm_business_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/price-quarantine/confirm", OpenAPI.Servers.middleware(impl, confirm_campaign_prices_read, confirm_campaign_prices_validate, confirm_campaign_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm", OpenAPI.Servers.middleware(impl, confirm_shipment_read, confirm_shipment_validate, confirm_shipment_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/new", OpenAPI.Servers.middleware(impl, create_chat_read, create_chat_validate, create_chat_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/delete", OpenAPI.Servers.middleware(impl, delete_campaign_offers_read, delete_campaign_offers_validate, delete_campaign_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments/delete", OpenAPI.Servers.middleware(impl, delete_goods_feedback_comment_read, delete_goods_feedback_comment_validate, delete_goods_feedback_comment_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/hidden-offers/delete", OpenAPI.Servers.middleware(impl, delete_hidden_offers_read, delete_hidden_offers_validate, delete_hidden_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/delete", OpenAPI.Servers.middleware(impl, delete_offers_read, delete_offers_validate, delete_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/unarchive", OpenAPI.Servers.middleware(impl, delete_offers_from_archive_read, delete_offers_from_archive_validate, delete_offers_from_archive_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/promos/offers/delete", OpenAPI.Servers.middleware(impl, delete_promo_offers_read, delete_promo_offers_validate, delete_promo_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act", OpenAPI.Servers.middleware(impl, download_shipment_act_read, download_shipment_act_validate, download_shipment_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act", OpenAPI.Servers.middleware(impl, download_shipment_discrepancy_act_read, download_shipment_discrepancy_act_validate, download_shipment_discrepancy_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act", OpenAPI.Servers.middleware(impl, download_shipment_inbound_act_read, download_shipment_inbound_act_validate, download_shipment_inbound_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels", OpenAPI.Servers.middleware(impl, download_shipment_pallet_labels_read, download_shipment_pallet_labels_validate, download_shipment_pallet_labels_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/shipments/reception-transfer-act", OpenAPI.Servers.middleware(impl, download_shipment_reception_transfer_act_read, download_shipment_reception_transfer_act_validate, download_shipment_reception_transfer_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill", OpenAPI.Servers.middleware(impl, download_shipment_transportation_waybill_read, download_shipment_transportation_waybill_validate, download_shipment_transportation_waybill_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/boost-consolidated/generate", OpenAPI.Servers.middleware(impl, generate_boost_consolidated_report_read, generate_boost_consolidated_report_validate, generate_boost_consolidated_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/competitors-position/generate", OpenAPI.Servers.middleware(impl, generate_competitors_position_report_read, generate_competitors_position_report_validate, generate_competitors_position_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-feedback/generate", OpenAPI.Servers.middleware(impl, generate_goods_feedback_report_read, generate_goods_feedback_report_validate, generate_goods_feedback_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-realization/generate", OpenAPI.Servers.middleware(impl, generate_goods_realization_report_read, generate_goods_realization_report_validate, generate_goods_realization_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/documents/labels/generate", OpenAPI.Servers.middleware(impl, generate_mass_order_labels_report_read, generate_mass_order_labels_report_validate, generate_mass_order_labels_report_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label", OpenAPI.Servers.middleware(impl, generate_order_label_read, generate_order_label_validate, generate_order_label_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/labels", OpenAPI.Servers.middleware(impl, generate_order_labels_read, generate_order_labels_validate, generate_order_labels_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/prices/generate", OpenAPI.Servers.middleware(impl, generate_prices_report_read, generate_prices_report_validate, generate_prices_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/shelf-statistics/generate", OpenAPI.Servers.middleware(impl, generate_shelfs_statistics_report_read, generate_shelfs_statistics_report_validate, generate_shelfs_statistics_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/documents/shipment-list/generate", OpenAPI.Servers.middleware(impl, generate_shipment_list_document_report_read, generate_shipment_list_document_report_validate, generate_shipment_list_document_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/shows-sales/generate", OpenAPI.Servers.middleware(impl, generate_shows_sales_report_read, generate_shows_sales_report_validate, generate_shows_sales_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/stocks-on-warehouses/generate", OpenAPI.Servers.middleware(impl, generate_stocks_on_warehouses_report_read, generate_stocks_on_warehouses_report_validate, generate_stocks_on_warehouses_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-marketplace-services/generate", OpenAPI.Servers.middleware(impl, generate_united_marketplace_services_report_read, generate_united_marketplace_services_report_validate, generate_united_marketplace_services_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-netting/generate", OpenAPI.Servers.middleware(impl, generate_united_netting_report_read, generate_united_netting_report_validate, generate_united_netting_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-orders/generate", OpenAPI.Servers.middleware(impl, generate_united_orders_report_read, generate_united_orders_report_validate, generate_united_orders_report_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offers/all", OpenAPI.Servers.middleware(impl, get_all_offers_read, get_all_offers_validate, get_all_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/bids/info", OpenAPI.Servers.middleware(impl, get_bids_info_for_business_read, get_bids_info_for_business_validate, get_bids_info_for_business_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/bids/recommendations", OpenAPI.Servers.middleware(impl, get_bids_recommendations_read, get_bids_recommendations_validate, get_bids_recommendations_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/price-quarantine", OpenAPI.Servers.middleware(impl, get_business_quarantine_offers_read, get_business_quarantine_offers_validate, get_business_quarantine_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/settings", OpenAPI.Servers.middleware(impl, get_business_settings_read, get_business_settings_validate, get_business_settings_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}", OpenAPI.Servers.middleware(impl, get_campaign_read, get_campaign_validate, get_campaign_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/logins", OpenAPI.Servers.middleware(impl, get_campaign_logins_read, get_campaign_logins_validate, get_campaign_logins_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers", OpenAPI.Servers.middleware(impl, get_campaign_offers_read, get_campaign_offers_validate, get_campaign_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/price-quarantine", OpenAPI.Servers.middleware(impl, get_campaign_quarantine_offers_read, get_campaign_quarantine_offers_validate, get_campaign_quarantine_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/region", OpenAPI.Servers.middleware(impl, get_campaign_region_read, get_campaign_region_validate, get_campaign_region_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/settings", OpenAPI.Servers.middleware(impl, get_campaign_settings_read, get_campaign_settings_validate, get_campaign_settings_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns", OpenAPI.Servers.middleware(impl, get_campaigns_read, get_campaigns_validate, get_campaigns_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/by_login/{login}", OpenAPI.Servers.middleware(impl, get_campaigns_by_login_read, get_campaigns_by_login_validate, get_campaigns_by_login_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/categories/max-sale-quantum", OpenAPI.Servers.middleware(impl, get_categories_max_sale_quantum_read, get_categories_max_sale_quantum_validate, get_categories_max_sale_quantum_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/categories/tree", OpenAPI.Servers.middleware(impl, get_categories_tree_read, get_categories_tree_validate, get_categories_tree_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/category/{categoryId}/parameters", OpenAPI.Servers.middleware(impl, get_category_content_parameters_read, get_category_content_parameters_validate, get_category_content_parameters_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/history", OpenAPI.Servers.middleware(impl, get_chat_history_read, get_chat_history_validate, get_chat_history_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats", OpenAPI.Servers.middleware(impl, get_chats_read, get_chats_validate, get_chats_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/delivery/services", OpenAPI.Servers.middleware(impl, get_delivery_services_read, get_delivery_services_validate, get_delivery_services_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}", OpenAPI.Servers.middleware(impl, get_feed_read, get_feed_validate, get_feed_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/index-logs", OpenAPI.Servers.middleware(impl, get_feed_index_logs_read, get_feed_index_logs_validate, get_feed_index_logs_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feedback/updates", OpenAPI.Servers.middleware(impl, get_feedback_and_comment_updates_read, get_feedback_and_comment_updates_validate, get_feedback_and_comment_updates_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds", OpenAPI.Servers.middleware(impl, get_feeds_read, get_feeds_validate, get_feeds_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments", OpenAPI.Servers.middleware(impl, get_goods_feedback_comments_read, get_goods_feedback_comments_validate, get_goods_feedback_comments_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback", OpenAPI.Servers.middleware(impl, get_goods_feedbacks_read, get_goods_feedbacks_validate, get_goods_feedbacks_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/stats/skus", OpenAPI.Servers.middleware(impl, get_goods_stats_read, get_goods_stats_validate, get_goods_stats_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/hidden-offers", OpenAPI.Servers.middleware(impl, get_hidden_offers_read, get_hidden_offers_validate, get_hidden_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-cards", OpenAPI.Servers.middleware(impl, get_offer_cards_content_status_read, get_offer_cards_content_status_validate, get_offer_cards_content_status_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries", OpenAPI.Servers.middleware(impl, get_offer_mapping_entries_read, get_offer_mapping_entries_validate, get_offer_mapping_entries_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings", OpenAPI.Servers.middleware(impl, get_offer_mappings_read, get_offer_mappings_validate, get_offer_mappings_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offers/recommendations", OpenAPI.Servers.middleware(impl, get_offer_recommendations_read, get_offer_recommendations_validate, get_offer_recommendations_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offers", OpenAPI.Servers.middleware(impl, get_offers_read, get_offers_validate, get_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}", OpenAPI.Servers.middleware(impl, get_order_read, get_order_validate, get_order_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/business-buyer", OpenAPI.Servers.middleware(impl, get_order_business_buyer_info_read, get_order_business_buyer_info_validate, get_order_business_buyer_info_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/documents", OpenAPI.Servers.middleware(impl, get_order_business_documents_info_read, get_order_business_documents_info_validate, get_order_business_documents_info_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data", OpenAPI.Servers.middleware(impl, get_order_labels_data_read, get_order_labels_data_validate, get_order_labels_data_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders", OpenAPI.Servers.middleware(impl, get_orders_read, get_orders_validate, get_orders_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/stats/orders", OpenAPI.Servers.middleware(impl, get_orders_stats_read, get_orders_stats_validate, get_orders_stats_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offer-prices", OpenAPI.Servers.middleware(impl, get_prices_read, get_prices_validate, get_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-prices", OpenAPI.Servers.middleware(impl, get_prices_by_offer_ids_read, get_prices_by_offer_ids_validate, get_prices_by_offer_ids_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/promos/offers", OpenAPI.Servers.middleware(impl, get_promo_offers_read, get_promo_offers_validate, get_promo_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/promos", OpenAPI.Servers.middleware(impl, get_promos_read, get_promos_validate, get_promos_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/ratings/quality/details", OpenAPI.Servers.middleware(impl, get_quality_rating_details_read, get_quality_rating_details_validate, get_quality_rating_details_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/ratings/quality", OpenAPI.Servers.middleware(impl, get_quality_ratings_read, get_quality_ratings_validate, get_quality_ratings_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/reports/info/{reportId}", OpenAPI.Servers.middleware(impl, get_report_info_read, get_report_info_validate, get_report_info_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}", OpenAPI.Servers.middleware(impl, get_return_read, get_return_validate, get_return_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application", OpenAPI.Servers.middleware(impl, get_return_application_read, get_return_application_validate, get_return_application_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}", OpenAPI.Servers.middleware(impl, get_return_photo_read, get_return_photo_validate, get_return_photo_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/returns", OpenAPI.Servers.middleware(impl, get_returns_read, get_returns_validate, get_returns_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}", OpenAPI.Servers.middleware(impl, get_shipment_read, get_shipment_validate, get_shipment_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info", OpenAPI.Servers.middleware(impl, get_shipment_orders_info_read, get_shipment_orders_info_validate, get_shipment_orders_info_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/stocks", OpenAPI.Servers.middleware(impl, get_stocks_read, get_stocks_validate, get_stocks_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries/suggestions", OpenAPI.Servers.middleware(impl, get_suggested_offer_mapping_entries_read, get_suggested_offer_mapping_entries_validate, get_suggested_offer_mapping_entries_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/suggestions", OpenAPI.Servers.middleware(impl, get_suggested_offer_mappings_read, get_suggested_offer_mappings_validate, get_suggested_offer_mappings_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-prices/suggestions", OpenAPI.Servers.middleware(impl, get_suggested_prices_read, get_suggested_prices_validate, get_suggested_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/businesses/{businessId}/warehouses", OpenAPI.Servers.middleware(impl, get_warehouses_read, get_warehouses_validate, get_warehouses_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/identifiers", OpenAPI.Servers.middleware(impl, provide_order_item_identifiers_read, provide_order_item_identifiers_validate, provide_order_item_identifiers_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/businesses/{businessId}/bids", OpenAPI.Servers.middleware(impl, put_bids_for_business_read, put_bids_for_business_validate, put_bids_for_business_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/bids", OpenAPI.Servers.middleware(impl, put_bids_for_campaign_read, put_bids_for_campaign_validate, put_bids_for_campaign_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/refresh", OpenAPI.Servers.middleware(impl, refresh_feed_read, refresh_feed_validate, refresh_feed_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/regions/{regionId}/children", OpenAPI.Servers.middleware(impl, search_region_children_read, search_region_children_validate, search_region_children_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/regions/{regionId}", OpenAPI.Servers.middleware(impl, search_regions_by_id_read, search_regions_by_id_validate, search_regions_by_id_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/regions", OpenAPI.Servers.middleware(impl, search_regions_by_name_read, search_regions_by_name_validate, search_regions_by_name_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/first-mile/shipments", OpenAPI.Servers.middleware(impl, search_shipments_read, search_shipments_validate, search_shipments_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/file/send", OpenAPI.Servers.middleware(impl, send_file_to_chat_read, send_file_to_chat_validate, send_file_to_chat_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/message", OpenAPI.Servers.middleware(impl, send_message_to_chat_read, send_message_to_chat_validate, send_message_to_chat_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/params", OpenAPI.Servers.middleware(impl, set_feed_params_read, set_feed_params_validate, set_feed_params_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/boxes", OpenAPI.Servers.middleware(impl, set_order_box_layout_read, set_order_box_layout_validate, set_order_box_layout_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes", OpenAPI.Servers.middleware(impl, set_order_shipment_boxes_read, set_order_shipment_boxes_validate, set_order_shipment_boxes_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets", OpenAPI.Servers.middleware(impl, set_shipment_pallets_count_read, set_shipment_pallets_count_validate, set_shipment_pallets_count_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/skip-reaction", OpenAPI.Servers.middleware(impl, skip_goods_feedbacks_reaction_read, skip_goods_feedbacks_reaction_validate, skip_goods_feedbacks_reaction_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer", OpenAPI.Servers.middleware(impl, transfer_orders_from_shipment_read, transfer_orders_from_shipment_validate, transfer_orders_from_shipment_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-prices/updates", OpenAPI.Servers.middleware(impl, update_business_prices_read, update_business_prices_validate, update_business_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/update", OpenAPI.Servers.middleware(impl, update_campaign_offers_read, update_campaign_offers_validate, update_campaign_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments/update", OpenAPI.Servers.middleware(impl, update_goods_feedback_comment_read, update_goods_feedback_comment_validate, update_goods_feedback_comment_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-cards/update", OpenAPI.Servers.middleware(impl, update_offer_content_read, update_offer_content_validate, update_offer_content_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries/updates", OpenAPI.Servers.middleware(impl, update_offer_mapping_entries_read, update_offer_mapping_entries_validate, update_offer_mapping_entries_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/update", OpenAPI.Servers.middleware(impl, update_offer_mappings_read, update_offer_mappings_validate, update_offer_mappings_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/items", OpenAPI.Servers.middleware(impl, update_order_items_read, update_order_items_validate, update_order_items_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/status", OpenAPI.Servers.middleware(impl, update_order_status_read, update_order_status_validate, update_order_status_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/status-update", OpenAPI.Servers.middleware(impl, update_order_statuses_read, update_order_statuses_validate, update_order_statuses_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-prices/updates", OpenAPI.Servers.middleware(impl, update_prices_read, update_prices_validate, update_prices_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/promos/offers/update", OpenAPI.Servers.middleware(impl, update_promo_offers_read, update_promo_offers_validate, update_promo_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/offers/stocks", OpenAPI.Servers.middleware(impl, update_stocks_read, update_stocks_validate, update_stocks_invoke; optional_middlewares...))
    return router
end
