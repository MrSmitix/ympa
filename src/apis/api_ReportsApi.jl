# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function generate_boost_consolidated_report_read(handler)
    function generate_boost_consolidated_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateBoostConsolidatedRequest"] = OpenAPI.Servers.to_param_type(GenerateBoostConsolidatedRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_boost_consolidated_report_validate(handler)
    function generate_boost_consolidated_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_boost_consolidated_report_invoke(impl; post_invoke=nothing)
    function generate_boost_consolidated_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_boost_consolidated_report(req::HTTP.Request, openapi_params["GenerateBoostConsolidatedRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_competitors_position_report_read(handler)
    function generate_competitors_position_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateCompetitorsPositionReportRequest"] = OpenAPI.Servers.to_param_type(GenerateCompetitorsPositionReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_competitors_position_report_validate(handler)
    function generate_competitors_position_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_competitors_position_report_invoke(impl; post_invoke=nothing)
    function generate_competitors_position_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_competitors_position_report(req::HTTP.Request, openapi_params["GenerateCompetitorsPositionReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_feedback_report_read(handler)
    function generate_goods_feedback_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsFeedbackRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsFeedbackRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_feedback_report_validate(handler)
    function generate_goods_feedback_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_feedback_report_invoke(impl; post_invoke=nothing)
    function generate_goods_feedback_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_feedback_report(req::HTTP.Request, openapi_params["GenerateGoodsFeedbackRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_movement_report_read(handler)
    function generate_goods_movement_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsMovementReportRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsMovementReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_movement_report_validate(handler)
    function generate_goods_movement_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_movement_report_invoke(impl; post_invoke=nothing)
    function generate_goods_movement_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_movement_report(req::HTTP.Request, openapi_params["GenerateGoodsMovementReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_realization_report_read(handler)
    function generate_goods_realization_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsRealizationReportRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsRealizationReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_realization_report_validate(handler)
    function generate_goods_realization_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_realization_report_invoke(impl; post_invoke=nothing)
    function generate_goods_realization_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_realization_report(req::HTTP.Request, openapi_params["GenerateGoodsRealizationReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_goods_turnover_report_read(handler)
    function generate_goods_turnover_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateGoodsTurnoverRequest"] = OpenAPI.Servers.to_param_type(GenerateGoodsTurnoverRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_goods_turnover_report_validate(handler)
    function generate_goods_turnover_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_goods_turnover_report_invoke(impl; post_invoke=nothing)
    function generate_goods_turnover_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_goods_turnover_report(req::HTTP.Request, openapi_params["GenerateGoodsTurnoverRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_mass_order_labels_report_read(handler)
    function generate_mass_order_labels_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateMassOrderLabelsRequest"] = OpenAPI.Servers.to_param_type(GenerateMassOrderLabelsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_mass_order_labels_report_validate(handler)
    function generate_mass_order_labels_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_mass_order_labels_report_invoke(impl; post_invoke=nothing)
    function generate_mass_order_labels_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_mass_order_labels_report(req::HTTP.Request, openapi_params["GenerateMassOrderLabelsRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_prices_report_read(handler)
    function generate_prices_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GeneratePricesReportRequest"] = OpenAPI.Servers.to_param_type(GeneratePricesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_prices_report_validate(handler)
    function generate_prices_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_prices_report_invoke(impl; post_invoke=nothing)
    function generate_prices_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_prices_report(req::HTTP.Request, openapi_params["GeneratePricesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shelfs_statistics_report_read(handler)
    function generate_shelfs_statistics_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateShelfsStatisticsRequest"] = OpenAPI.Servers.to_param_type(GenerateShelfsStatisticsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shelfs_statistics_report_validate(handler)
    function generate_shelfs_statistics_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shelfs_statistics_report_invoke(impl; post_invoke=nothing)
    function generate_shelfs_statistics_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shelfs_statistics_report(req::HTTP.Request, openapi_params["GenerateShelfsStatisticsRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shipment_list_document_report_read(handler)
    function generate_shipment_list_document_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GenerateShipmentListDocumentReportRequest"] = OpenAPI.Servers.to_param_type(GenerateShipmentListDocumentReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shipment_list_document_report_validate(handler)
    function generate_shipment_list_document_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shipment_list_document_report_invoke(impl; post_invoke=nothing)
    function generate_shipment_list_document_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shipment_list_document_report(req::HTTP.Request, openapi_params["GenerateShipmentListDocumentReportRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_shows_sales_report_read(handler)
    function generate_shows_sales_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateShowsSalesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateShowsSalesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_shows_sales_report_validate(handler)
    function generate_shows_sales_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_shows_sales_report_invoke(impl; post_invoke=nothing)
    function generate_shows_sales_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_shows_sales_report(req::HTTP.Request, openapi_params["GenerateShowsSalesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_stocks_on_warehouses_report_read(handler)
    function generate_stocks_on_warehouses_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateStocksOnWarehousesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateStocksOnWarehousesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_stocks_on_warehouses_report_validate(handler)
    function generate_stocks_on_warehouses_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_stocks_on_warehouses_report_invoke(impl; post_invoke=nothing)
    function generate_stocks_on_warehouses_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_stocks_on_warehouses_report(req::HTTP.Request, openapi_params["GenerateStocksOnWarehousesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_marketplace_services_report_read(handler)
    function generate_united_marketplace_services_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedMarketplaceServicesReportRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedMarketplaceServicesReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_marketplace_services_report_validate(handler)
    function generate_united_marketplace_services_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_marketplace_services_report_invoke(impl; post_invoke=nothing)
    function generate_united_marketplace_services_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_marketplace_services_report(req::HTTP.Request, openapi_params["GenerateUnitedMarketplaceServicesReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_netting_report_read(handler)
    function generate_united_netting_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedNettingReportRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedNettingReportRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_netting_report_validate(handler)
    function generate_united_netting_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_netting_report_invoke(impl; post_invoke=nothing)
    function generate_united_netting_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_netting_report(req::HTTP.Request, openapi_params["GenerateUnitedNettingReportRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_united_orders_report_read(handler)
    function generate_united_orders_report_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ReportFormatType, query_params, "format", style="", is_explode=false)
        openapi_params["GenerateUnitedOrdersRequest"] = OpenAPI.Servers.to_param_type(GenerateUnitedOrdersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_united_orders_report_validate(handler)
    function generate_united_orders_report_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_united_orders_report_invoke(impl; post_invoke=nothing)
    function generate_united_orders_report_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_united_orders_report(req::HTTP.Request, openapi_params["GenerateUnitedOrdersRequest"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_report_info_read(handler)
    function get_report_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["reportId"] = OpenAPI.Servers.to_param(String, path_params, "reportId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_report_info_validate(handler)
    function get_report_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_report_info_invoke(impl; post_invoke=nothing)
    function get_report_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_report_info(req::HTTP.Request, openapi_params["reportId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerReportsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/reports/boost-consolidated/generate", OpenAPI.Servers.middleware(impl, generate_boost_consolidated_report_read, generate_boost_consolidated_report_validate, generate_boost_consolidated_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/competitors-position/generate", OpenAPI.Servers.middleware(impl, generate_competitors_position_report_read, generate_competitors_position_report_validate, generate_competitors_position_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-feedback/generate", OpenAPI.Servers.middleware(impl, generate_goods_feedback_report_read, generate_goods_feedback_report_validate, generate_goods_feedback_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-movement/generate", OpenAPI.Servers.middleware(impl, generate_goods_movement_report_read, generate_goods_movement_report_validate, generate_goods_movement_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-realization/generate", OpenAPI.Servers.middleware(impl, generate_goods_realization_report_read, generate_goods_realization_report_validate, generate_goods_realization_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/goods-turnover/generate", OpenAPI.Servers.middleware(impl, generate_goods_turnover_report_read, generate_goods_turnover_report_validate, generate_goods_turnover_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/documents/labels/generate", OpenAPI.Servers.middleware(impl, generate_mass_order_labels_report_read, generate_mass_order_labels_report_validate, generate_mass_order_labels_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/prices/generate", OpenAPI.Servers.middleware(impl, generate_prices_report_read, generate_prices_report_validate, generate_prices_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/shelf-statistics/generate", OpenAPI.Servers.middleware(impl, generate_shelfs_statistics_report_read, generate_shelfs_statistics_report_validate, generate_shelfs_statistics_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/documents/shipment-list/generate", OpenAPI.Servers.middleware(impl, generate_shipment_list_document_report_read, generate_shipment_list_document_report_validate, generate_shipment_list_document_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/shows-sales/generate", OpenAPI.Servers.middleware(impl, generate_shows_sales_report_read, generate_shows_sales_report_validate, generate_shows_sales_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/stocks-on-warehouses/generate", OpenAPI.Servers.middleware(impl, generate_stocks_on_warehouses_report_read, generate_stocks_on_warehouses_report_validate, generate_stocks_on_warehouses_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-marketplace-services/generate", OpenAPI.Servers.middleware(impl, generate_united_marketplace_services_report_read, generate_united_marketplace_services_report_validate, generate_united_marketplace_services_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-netting/generate", OpenAPI.Servers.middleware(impl, generate_united_netting_report_read, generate_united_netting_report_validate, generate_united_netting_report_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/reports/united-orders/generate", OpenAPI.Servers.middleware(impl, generate_united_orders_report_read, generate_united_orders_report_validate, generate_united_orders_report_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/reports/info/{reportId}", OpenAPI.Servers.middleware(impl, get_report_info_read, get_report_info_validate, get_report_info_invoke; optional_middlewares...))
    return router
end
