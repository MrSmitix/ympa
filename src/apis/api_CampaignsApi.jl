# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CampaignsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CampaignsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CampaignsApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_campaign_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_CampaignsApi, "/campaigns/{campaignId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о магазине

Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign(_api::CampaignsApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_logins_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignLoginsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_logins(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_logins_CampaignsApi, "/campaigns/{campaignId}/logins", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Логины, связанные с магазином

Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignLoginsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_logins(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_logins(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_logins(_api::CampaignsApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_logins(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_region_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignRegionResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_region(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_region_CampaignsApi, "/campaigns/{campaignId}/region", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Регион магазина

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignRegionResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_region(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_region(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_region(_api::CampaignsApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_region(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_settings_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignSettingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_settings(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_settings_CampaignsApi, "/campaigns/{campaignId}/settings", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Настройки магазина

Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignSettingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_settings(_api::CampaignsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_settings(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_settings(_api::CampaignsApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_settings(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaigns_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaigns(_api::CampaignsApi; page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_campaigns", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaigns_CampaignsApi, "/campaigns", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список магазинов пользователя

Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- page::Int64
- page_size::Int64

Return: GetCampaignsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaigns(_api::CampaignsApi; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns(_api; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaigns(_api::CampaignsApi, response_stream::Channel; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns(_api; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaigns_by_login_CampaignsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaigns_by_login(_api::CampaignsApi, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_campaigns_by_login", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaigns_by_login_CampaignsApi, "/campaigns/by_login/{login}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "login", login)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Магазины, доступные логину

Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- login::String (required)
- page::Int64
- page_size::Int64

Return: GetCampaignsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaigns_by_login(_api::CampaignsApi, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns_by_login(_api, login; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaigns_by_login(_api::CampaignsApi, response_stream::Channel, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns_by_login(_api, login; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_campaign
export get_campaign_logins
export get_campaign_region
export get_campaign_settings
export get_campaigns
export get_campaigns_by_login
