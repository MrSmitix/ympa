# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_campaign_read(handler)
    function get_campaign_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_validate(handler)
    function get_campaign_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_invoke(impl; post_invoke=nothing)
    function get_campaign_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_logins_read(handler)
    function get_campaign_logins_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_logins_validate(handler)
    function get_campaign_logins_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_logins_invoke(impl; post_invoke=nothing)
    function get_campaign_logins_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_logins(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_region_read(handler)
    function get_campaign_region_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_region_validate(handler)
    function get_campaign_region_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_region_invoke(impl; post_invoke=nothing)
    function get_campaign_region_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_region(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_settings_read(handler)
    function get_campaign_settings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_settings_validate(handler)
    function get_campaign_settings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_settings_invoke(impl; post_invoke=nothing)
    function get_campaign_settings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_settings(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaigns_read(handler)
    function get_campaigns_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaigns_validate(handler)
    function get_campaigns_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_campaigns", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_campaigns_invoke(impl; post_invoke=nothing)
    function get_campaigns_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaigns(req::HTTP.Request; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaigns_by_login_read(handler)
    function get_campaigns_by_login_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["login"] = OpenAPI.Servers.to_param(String, path_params, "login", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaigns_by_login_validate(handler)
    function get_campaigns_by_login_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_campaigns_by_login", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_campaigns_by_login_invoke(impl; post_invoke=nothing)
    function get_campaigns_by_login_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaigns_by_login(req::HTTP.Request, openapi_params["login"]; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerCampaignsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}", OpenAPI.Servers.middleware(impl, get_campaign_read, get_campaign_validate, get_campaign_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/logins", OpenAPI.Servers.middleware(impl, get_campaign_logins_read, get_campaign_logins_validate, get_campaign_logins_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/region", OpenAPI.Servers.middleware(impl, get_campaign_region_read, get_campaign_region_validate, get_campaign_region_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/settings", OpenAPI.Servers.middleware(impl, get_campaign_settings_read, get_campaign_settings_validate, get_campaign_settings_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns", OpenAPI.Servers.middleware(impl, get_campaigns_read, get_campaigns_validate, get_campaigns_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/by_login/{login}", OpenAPI.Servers.middleware(impl, get_campaigns_by_login_read, get_campaigns_by_login_validate, get_campaigns_by_login_invoke; optional_middlewares...))
    return router
end
