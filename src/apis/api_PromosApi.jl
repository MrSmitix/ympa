# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PromosApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PromosApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PromosApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_delete_promo_offers_PromosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_promo_offers(_api::PromosApi, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_promo_offers_PromosApi, "/businesses/{businessId}/promos/offers/delete", ["OAuth", ], delete_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из акции

Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- delete_promo_offers_request::DeletePromoOffersRequest (required)

Return: DeletePromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function delete_promo_offers(_api::PromosApi, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_promo_offers(_api, business_id, delete_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_promo_offers(_api::PromosApi, response_stream::Channel, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_promo_offers(_api, business_id, delete_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_promo_offers_PromosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_promo_offers(_api::PromosApi, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_promo_offers_PromosApi, "/businesses/{businessId}/promos/offers", ["OAuth", ], get_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение списка товаров, которые участвуют или могут участвовать в акции

Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_promo_offers_request::GetPromoOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetPromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_promo_offers(_api::PromosApi, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promo_offers(_api, business_id, get_promo_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_promo_offers(_api::PromosApi, response_stream::Channel, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promo_offers(_api, business_id, get_promo_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_promos_PromosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPromosResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_promos(_api::PromosApi, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_promos_PromosApi, "/businesses/{businessId}/promos", ["OAuth", ], get_promos_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение списка акций

Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_promos_request::GetPromosRequest

Return: GetPromosResponse, OpenAPI.Clients.ApiResponse
"""
function get_promos(_api::PromosApi, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promos(_api, business_id; get_promos_request=get_promos_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_promos(_api::PromosApi, response_stream::Channel, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promos(_api, business_id; get_promos_request=get_promos_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_promo_offers_PromosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdatePromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_promo_offers(_api::PromosApi, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_promo_offers_PromosApi, "/businesses/{businessId}/promos/offers/update", ["OAuth", ], update_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление товаров в акцию или изменение их цен

Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- update_promo_offers_request::UpdatePromoOffersRequest (required)

Return: UpdatePromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function update_promo_offers(_api::PromosApi, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_promo_offers(_api, business_id, update_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_promo_offers(_api::PromosApi, response_stream::Channel, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_promo_offers(_api, business_id, update_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_promo_offers
export get_promo_offers
export get_promos
export update_promo_offers
