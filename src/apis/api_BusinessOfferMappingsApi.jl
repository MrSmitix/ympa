# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function add_offers_to_archive_read(handler)
    function add_offers_to_archive_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["AddOffersToArchiveRequest"] = OpenAPI.Servers.to_param_type(AddOffersToArchiveRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function add_offers_to_archive_validate(handler)
    function add_offers_to_archive_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function add_offers_to_archive_invoke(impl; post_invoke=nothing)
    function add_offers_to_archive_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.add_offers_to_archive(req::HTTP.Request, openapi_params["businessId"], openapi_params["AddOffersToArchiveRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_offers_read(handler)
    function delete_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_offers_validate(handler)
    function delete_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_offers_invoke(impl; post_invoke=nothing)
    function delete_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_offers(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_offers_from_archive_read(handler)
    function delete_offers_from_archive_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteOffersFromArchiveRequest"] = OpenAPI.Servers.to_param_type(DeleteOffersFromArchiveRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_offers_from_archive_validate(handler)
    function delete_offers_from_archive_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_offers_from_archive_invoke(impl; post_invoke=nothing)
    function delete_offers_from_archive_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_offers_from_archive(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteOffersFromArchiveRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_mappings_read(handler)
    function get_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(GetOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_mappings_validate(handler)
    function get_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_mappings_invoke(impl; post_invoke=nothing)
    function get_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_mappings(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_offer_mappings_request=get(openapi_params, "GetOfferMappingsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_suggested_offer_mappings_read(handler)
    function get_suggested_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetSuggestedOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(GetSuggestedOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_suggested_offer_mappings_validate(handler)
    function get_suggested_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_suggested_offer_mappings_invoke(impl; post_invoke=nothing)
    function get_suggested_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_suggested_offer_mappings(req::HTTP.Request, openapi_params["businessId"]; get_suggested_offer_mappings_request=get(openapi_params, "GetSuggestedOfferMappingsRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_mappings_read(handler)
    function update_offer_mappings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateOfferMappingsRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferMappingsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_mappings_validate(handler)
    function update_offer_mappings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_mappings_invoke(impl; post_invoke=nothing)
    function update_offer_mappings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_mappings(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateOfferMappingsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerBusinessOfferMappingsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/archive", OpenAPI.Servers.middleware(impl, add_offers_to_archive_read, add_offers_to_archive_validate, add_offers_to_archive_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/delete", OpenAPI.Servers.middleware(impl, delete_offers_read, delete_offers_validate, delete_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/unarchive", OpenAPI.Servers.middleware(impl, delete_offers_from_archive_read, delete_offers_from_archive_validate, delete_offers_from_archive_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings", OpenAPI.Servers.middleware(impl, get_offer_mappings_read, get_offer_mappings_validate, get_offer_mappings_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/suggestions", OpenAPI.Servers.middleware(impl, get_suggested_offer_mappings_read, get_suggested_offer_mappings_validate, get_suggested_offer_mappings_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-mappings/update", OpenAPI.Servers.middleware(impl, update_offer_mappings_read, update_offer_mappings_validate, update_offer_mappings_invoke; optional_middlewares...))
    return router
end
