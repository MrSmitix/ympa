# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FbyApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FbyApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FbyApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_add_hidden_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_add_hidden_offers(_api::FbyApi, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_hidden_offers_FbyApi, "/campaigns/{campaignId}/hidden-offers", ["OAuth", ], add_hidden_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Скрытие товаров и настройки скрытия

Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- add_hidden_offers_request::AddHiddenOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function add_hidden_offers(_api::FbyApi, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_hidden_offers(_api, campaign_id, add_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_hidden_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, add_hidden_offers_request::AddHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_hidden_offers(_api, campaign_id, add_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_add_offers_to_archive_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AddOffersToArchiveResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_add_offers_to_archive(_api::FbyApi, business_id::Int64, add_offers_to_archive_request::AddOffersToArchiveRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_offers_to_archive_FbyApi, "/businesses/{businessId}/offer-mappings/archive", ["OAuth", ], add_offers_to_archive_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление товаров в архив

Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- add_offers_to_archive_request::AddOffersToArchiveRequest (required)

Return: AddOffersToArchiveResponse, OpenAPI.Clients.ApiResponse
"""
function add_offers_to_archive(_api::FbyApi, business_id::Int64, add_offers_to_archive_request::AddOffersToArchiveRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_offers_to_archive(_api, business_id, add_offers_to_archive_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_offers_to_archive(_api::FbyApi, response_stream::Channel, business_id::Int64, add_offers_to_archive_request::AddOffersToArchiveRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_offers_to_archive(_api, business_id, add_offers_to_archive_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_calculate_tariffs_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CalculateTariffsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_calculate_tariffs(_api::FbyApi, calculate_tariffs_request::CalculateTariffsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_calculate_tariffs_FbyApi, "/tariffs/calculate", ["OAuth", ], calculate_tariffs_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Калькулятор стоимости услуг

Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

Params:
- calculate_tariffs_request::CalculateTariffsRequest (required)

Return: CalculateTariffsResponse, OpenAPI.Clients.ApiResponse
"""
function calculate_tariffs(_api::FbyApi, calculate_tariffs_request::CalculateTariffsRequest; _mediaType=nothing)
    _ctx = _oacinternal_calculate_tariffs(_api, calculate_tariffs_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function calculate_tariffs(_api::FbyApi, response_stream::Channel, calculate_tariffs_request::CalculateTariffsRequest; _mediaType=nothing)
    _ctx = _oacinternal_calculate_tariffs(_api, calculate_tariffs_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_confirm_business_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_confirm_business_prices(_api::FbyApi, business_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_confirm_business_prices_FbyApi, "/businesses/{businessId}/price-quarantine/confirm", ["OAuth", ], confirm_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товара из карантина по цене в кабинете

Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- confirm_prices_request::ConfirmPricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function confirm_business_prices(_api::FbyApi, business_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_confirm_business_prices(_api, business_id, confirm_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function confirm_business_prices(_api::FbyApi, response_stream::Channel, business_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_confirm_business_prices(_api, business_id, confirm_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_confirm_campaign_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_confirm_campaign_prices(_api::FbyApi, campaign_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_confirm_campaign_prices_FbyApi, "/campaigns/{campaignId}/price-quarantine/confirm", ["OAuth", ], confirm_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товара из карантина по цене в магазине

Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- confirm_prices_request::ConfirmPricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function confirm_campaign_prices(_api::FbyApi, campaign_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_confirm_campaign_prices(_api, campaign_id, confirm_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function confirm_campaign_prices(_api::FbyApi, response_stream::Channel, campaign_id::Int64, confirm_prices_request::ConfirmPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_confirm_campaign_prices(_api, campaign_id, confirm_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_chat_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreateChatResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_create_chat(_api::FbyApi, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_chat_FbyApi, "/businesses/{businessId}/chats/new", ["OAuth", ], create_chat_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Создание нового чата с покупателем

Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- create_chat_request::CreateChatRequest (required)

Return: CreateChatResponse, OpenAPI.Clients.ApiResponse
"""
function create_chat(_api::FbyApi, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_chat(_api, business_id, create_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_chat(_api::FbyApi, response_stream::Channel, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_chat(_api, business_id, create_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_campaign_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteCampaignOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_campaign_offers(_api::FbyApi, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_campaign_offers_FbyApi, "/campaigns/{campaignId}/offers/delete", ["OAuth", ], delete_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из ассортимента магазина

Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- delete_campaign_offers_request::DeleteCampaignOffersRequest (required)

Return: DeleteCampaignOffersResponse, OpenAPI.Clients.ApiResponse
"""
function delete_campaign_offers(_api::FbyApi, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_campaign_offers(_api, campaign_id, delete_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_campaign_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_campaign_offers(_api, campaign_id, delete_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_goods_feedback_comment_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_goods_feedback_comment(_api::FbyApi, business_id::Int64, delete_goods_feedback_comment_request::DeleteGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_goods_feedback_comment_FbyApi, "/businesses/{businessId}/goods-feedback/comments/delete", ["OAuth", ], delete_goods_feedback_comment_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление комментария к отзыву

Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- delete_goods_feedback_comment_request::DeleteGoodsFeedbackCommentRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function delete_goods_feedback_comment(_api::FbyApi, business_id::Int64, delete_goods_feedback_comment_request::DeleteGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_goods_feedback_comment(_api, business_id, delete_goods_feedback_comment_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_goods_feedback_comment(_api::FbyApi, response_stream::Channel, business_id::Int64, delete_goods_feedback_comment_request::DeleteGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_goods_feedback_comment(_api, business_id, delete_goods_feedback_comment_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_hidden_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_hidden_offers(_api::FbyApi, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_hidden_offers_FbyApi, "/campaigns/{campaignId}/hidden-offers/delete", ["OAuth", ], delete_hidden_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Возобновление показа товаров

Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- delete_hidden_offers_request::DeleteHiddenOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function delete_hidden_offers(_api::FbyApi, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_hidden_offers(_api, campaign_id, delete_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_hidden_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, delete_hidden_offers_request::DeleteHiddenOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_hidden_offers(_api, campaign_id, delete_hidden_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_offers(_api::FbyApi, business_id::Int64, delete_offers_request::DeleteOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_offers_FbyApi, "/businesses/{businessId}/offer-mappings/delete", ["OAuth", ], delete_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из каталога

Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- delete_offers_request::DeleteOffersRequest (required)

Return: DeleteOffersResponse, OpenAPI.Clients.ApiResponse
"""
function delete_offers(_api::FbyApi, business_id::Int64, delete_offers_request::DeleteOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_offers(_api, business_id, delete_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_offers(_api::FbyApi, response_stream::Channel, business_id::Int64, delete_offers_request::DeleteOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_offers(_api, business_id, delete_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_offers_from_archive_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteOffersFromArchiveResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_offers_from_archive(_api::FbyApi, business_id::Int64, delete_offers_from_archive_request::DeleteOffersFromArchiveRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_offers_from_archive_FbyApi, "/businesses/{businessId}/offer-mappings/unarchive", ["OAuth", ], delete_offers_from_archive_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из архива

Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- delete_offers_from_archive_request::DeleteOffersFromArchiveRequest (required)

Return: DeleteOffersFromArchiveResponse, OpenAPI.Clients.ApiResponse
"""
function delete_offers_from_archive(_api::FbyApi, business_id::Int64, delete_offers_from_archive_request::DeleteOffersFromArchiveRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_offers_from_archive(_api, business_id, delete_offers_from_archive_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_offers_from_archive(_api::FbyApi, response_stream::Channel, business_id::Int64, delete_offers_from_archive_request::DeleteOffersFromArchiveRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_offers_from_archive(_api, business_id, delete_offers_from_archive_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_promo_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeletePromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_promo_offers(_api::FbyApi, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_promo_offers_FbyApi, "/businesses/{businessId}/promos/offers/delete", ["OAuth", ], delete_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из акции

Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- delete_promo_offers_request::DeletePromoOffersRequest (required)

Return: DeletePromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function delete_promo_offers(_api::FbyApi, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_promo_offers(_api, business_id, delete_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_promo_offers(_api::FbyApi, response_stream::Channel, business_id::Int64, delete_promo_offers_request::DeletePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_promo_offers(_api, business_id, delete_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_boost_consolidated_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_boost_consolidated_report(_api::FbyApi, generate_boost_consolidated_request::GenerateBoostConsolidatedRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_boost_consolidated_report_FbyApi, "/reports/boost-consolidated/generate", ["OAuth", ], generate_boost_consolidated_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по бусту продаж

Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_boost_consolidated_request::GenerateBoostConsolidatedRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_boost_consolidated_report(_api::FbyApi, generate_boost_consolidated_request::GenerateBoostConsolidatedRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_boost_consolidated_report(_api, generate_boost_consolidated_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_boost_consolidated_report(_api::FbyApi, response_stream::Channel, generate_boost_consolidated_request::GenerateBoostConsolidatedRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_boost_consolidated_report(_api, generate_boost_consolidated_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_competitors_position_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_competitors_position_report(_api::FbyApi, generate_competitors_position_report_request::GenerateCompetitorsPositionReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_competitors_position_report_FbyApi, "/reports/competitors-position/generate", ["OAuth", ], generate_competitors_position_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет «Конкурентная позиция»

Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 

Params:
- generate_competitors_position_report_request::GenerateCompetitorsPositionReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_competitors_position_report(_api::FbyApi, generate_competitors_position_report_request::GenerateCompetitorsPositionReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_competitors_position_report(_api, generate_competitors_position_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_competitors_position_report(_api::FbyApi, response_stream::Channel, generate_competitors_position_report_request::GenerateCompetitorsPositionReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_competitors_position_report(_api, generate_competitors_position_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_goods_feedback_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_goods_feedback_report(_api::FbyApi, generate_goods_feedback_request::GenerateGoodsFeedbackRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_goods_feedback_report_FbyApi, "/reports/goods-feedback/generate", ["OAuth", ], generate_goods_feedback_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по отзывам о товарах

Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_goods_feedback_request::GenerateGoodsFeedbackRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_goods_feedback_report(_api::FbyApi, generate_goods_feedback_request::GenerateGoodsFeedbackRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_feedback_report(_api, generate_goods_feedback_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_goods_feedback_report(_api::FbyApi, response_stream::Channel, generate_goods_feedback_request::GenerateGoodsFeedbackRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_feedback_report(_api, generate_goods_feedback_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_goods_movement_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_goods_movement_report(_api::FbyApi, generate_goods_movement_report_request::GenerateGoodsMovementReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_goods_movement_report_FbyApi, "/reports/goods-movement/generate", ["OAuth", ], generate_goods_movement_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по движению товаров

Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_goods_movement_report_request::GenerateGoodsMovementReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_goods_movement_report(_api::FbyApi, generate_goods_movement_report_request::GenerateGoodsMovementReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_movement_report(_api, generate_goods_movement_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_goods_movement_report(_api::FbyApi, response_stream::Channel, generate_goods_movement_report_request::GenerateGoodsMovementReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_movement_report(_api, generate_goods_movement_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_goods_realization_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_goods_realization_report(_api::FbyApi, generate_goods_realization_report_request::GenerateGoodsRealizationReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_goods_realization_report_FbyApi, "/reports/goods-realization/generate", ["OAuth", ], generate_goods_realization_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по реализации

Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_goods_realization_report_request::GenerateGoodsRealizationReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_goods_realization_report(_api::FbyApi, generate_goods_realization_report_request::GenerateGoodsRealizationReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_realization_report(_api, generate_goods_realization_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_goods_realization_report(_api::FbyApi, response_stream::Channel, generate_goods_realization_report_request::GenerateGoodsRealizationReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_realization_report(_api, generate_goods_realization_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_goods_turnover_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_goods_turnover_report(_api::FbyApi, generate_goods_turnover_request::GenerateGoodsTurnoverRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_goods_turnover_report_FbyApi, "/reports/goods-turnover/generate", ["OAuth", ], generate_goods_turnover_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по оборачиваемости

Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_goods_turnover_request::GenerateGoodsTurnoverRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_goods_turnover_report(_api::FbyApi, generate_goods_turnover_request::GenerateGoodsTurnoverRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_turnover_report(_api, generate_goods_turnover_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_goods_turnover_report(_api::FbyApi, response_stream::Channel, generate_goods_turnover_request::GenerateGoodsTurnoverRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_goods_turnover_report(_api, generate_goods_turnover_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_prices_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_prices_report(_api::FbyApi, generate_prices_report_request::GeneratePricesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_prices_report_FbyApi, "/reports/prices/generate", ["OAuth", ], generate_prices_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет «Цены на рынке»

Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_prices_report_request::GeneratePricesReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_prices_report(_api::FbyApi, generate_prices_report_request::GeneratePricesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_prices_report(_api, generate_prices_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_prices_report(_api::FbyApi, response_stream::Channel, generate_prices_report_request::GeneratePricesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_prices_report(_api, generate_prices_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_shelfs_statistics_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_shelfs_statistics_report(_api::FbyApi, generate_shelfs_statistics_request::GenerateShelfsStatisticsRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_shelfs_statistics_report_FbyApi, "/reports/shelf-statistics/generate", ["OAuth", ], generate_shelfs_statistics_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по полкам

Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_shelfs_statistics_request::GenerateShelfsStatisticsRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_shelfs_statistics_report(_api::FbyApi, generate_shelfs_statistics_request::GenerateShelfsStatisticsRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_shelfs_statistics_report(_api, generate_shelfs_statistics_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_shelfs_statistics_report(_api::FbyApi, response_stream::Channel, generate_shelfs_statistics_request::GenerateShelfsStatisticsRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_shelfs_statistics_report(_api, generate_shelfs_statistics_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_shows_sales_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_shows_sales_report(_api::FbyApi, generate_shows_sales_report_request::GenerateShowsSalesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_shows_sales_report_FbyApi, "/reports/shows-sales/generate", ["OAuth", ], generate_shows_sales_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет «Аналитика продаж»

Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 

Params:
- generate_shows_sales_report_request::GenerateShowsSalesReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_shows_sales_report(_api::FbyApi, generate_shows_sales_report_request::GenerateShowsSalesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_shows_sales_report(_api, generate_shows_sales_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_shows_sales_report(_api::FbyApi, response_stream::Channel, generate_shows_sales_report_request::GenerateShowsSalesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_shows_sales_report(_api, generate_shows_sales_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_stocks_on_warehouses_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_stocks_on_warehouses_report(_api::FbyApi, generate_stocks_on_warehouses_report_request::GenerateStocksOnWarehousesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_stocks_on_warehouses_report_FbyApi, "/reports/stocks-on-warehouses/generate", ["OAuth", ], generate_stocks_on_warehouses_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по остаткам на складах

Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_stocks_on_warehouses_report_request::GenerateStocksOnWarehousesReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_stocks_on_warehouses_report(_api::FbyApi, generate_stocks_on_warehouses_report_request::GenerateStocksOnWarehousesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_stocks_on_warehouses_report(_api, generate_stocks_on_warehouses_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_stocks_on_warehouses_report(_api::FbyApi, response_stream::Channel, generate_stocks_on_warehouses_report_request::GenerateStocksOnWarehousesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_stocks_on_warehouses_report(_api, generate_stocks_on_warehouses_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_united_marketplace_services_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_united_marketplace_services_report(_api::FbyApi, generate_united_marketplace_services_report_request::GenerateUnitedMarketplaceServicesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_united_marketplace_services_report_FbyApi, "/reports/united-marketplace-services/generate", ["OAuth", ], generate_united_marketplace_services_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по стоимости услуг

Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_united_marketplace_services_report_request::GenerateUnitedMarketplaceServicesReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_united_marketplace_services_report(_api::FbyApi, generate_united_marketplace_services_report_request::GenerateUnitedMarketplaceServicesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_marketplace_services_report(_api, generate_united_marketplace_services_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_united_marketplace_services_report(_api::FbyApi, response_stream::Channel, generate_united_marketplace_services_report_request::GenerateUnitedMarketplaceServicesReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_marketplace_services_report(_api, generate_united_marketplace_services_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_united_netting_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_united_netting_report(_api::FbyApi, generate_united_netting_report_request::GenerateUnitedNettingReportRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_united_netting_report_FbyApi, "/reports/united-netting/generate", ["OAuth", ], generate_united_netting_report_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по платежам

Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_united_netting_report_request::GenerateUnitedNettingReportRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_united_netting_report(_api::FbyApi, generate_united_netting_report_request::GenerateUnitedNettingReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_netting_report(_api, generate_united_netting_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_united_netting_report(_api::FbyApi, response_stream::Channel, generate_united_netting_report_request::GenerateUnitedNettingReportRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_netting_report(_api, generate_united_netting_report_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_united_orders_report_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenerateReportResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_generate_united_orders_report(_api::FbyApi, generate_united_orders_request::GenerateUnitedOrdersRequest; format=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_generate_united_orders_report_FbyApi, "/reports/united-orders/generate", ["OAuth", ], generate_united_orders_request)
    OpenAPI.Clients.set_param(_ctx.query, "format", format; style="", is_explode=false)  # type ReportFormatType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по заказам

Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- generate_united_orders_request::GenerateUnitedOrdersRequest (required)
- format::ReportFormatType

Return: GenerateReportResponse, OpenAPI.Clients.ApiResponse
"""
function generate_united_orders_report(_api::FbyApi, generate_united_orders_request::GenerateUnitedOrdersRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_orders_report(_api, generate_united_orders_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_united_orders_report(_api::FbyApi, response_stream::Channel, generate_united_orders_request::GenerateUnitedOrdersRequest; format=nothing, _mediaType=nothing)
    _ctx = _oacinternal_generate_united_orders_report(_api, generate_united_orders_request; format=format, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_all_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetAllOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_all_offers(_api::FbyApi, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_all_offers_FbyApi, "/campaigns/{campaignId}/offers/all", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "feedId", feed_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chunk", chunk; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Все предложения магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64
- chunk::Int64

Return: GetAllOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_all_offers(_api::FbyApi, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_offers(_api, campaign_id; feed_id=feed_id, chunk=chunk, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_all_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_offers(_api, campaign_id; feed_id=feed_id, chunk=chunk, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bids_info_for_business_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBidsInfoResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_bids_info_for_business(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_bids_info_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_bids_info_for_business_FbyApi, "/businesses/{businessId}/bids/info", ["OAuth", ], get_bids_info_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация об установленных ставках

Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- page_token::String
- limit::Int64
- get_bids_info_request::GetBidsInfoRequest

Return: GetBidsInfoResponse, OpenAPI.Clients.ApiResponse
"""
function get_bids_info_for_business(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_bids_info_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bids_info_for_business(_api, business_id; page_token=page_token, limit=limit, get_bids_info_request=get_bids_info_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bids_info_for_business(_api::FbyApi, response_stream::Channel, business_id::Int64; page_token=nothing, limit=nothing, get_bids_info_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bids_info_for_business(_api, business_id; page_token=page_token, limit=limit, get_bids_info_request=get_bids_info_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bids_recommendations_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBidsRecommendationsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_bids_recommendations(_api::FbyApi, business_id::Int64, get_bids_recommendations_request::GetBidsRecommendationsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_bids_recommendations_FbyApi, "/businesses/{businessId}/bids/recommendations", ["OAuth", ], get_bids_recommendations_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Рекомендованные ставки для заданных товаров

Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- get_bids_recommendations_request::GetBidsRecommendationsRequest (required)

Return: GetBidsRecommendationsResponse, OpenAPI.Clients.ApiResponse
"""
function get_bids_recommendations(_api::FbyApi, business_id::Int64, get_bids_recommendations_request::GetBidsRecommendationsRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_bids_recommendations(_api, business_id, get_bids_recommendations_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bids_recommendations(_api::FbyApi, response_stream::Channel, business_id::Int64, get_bids_recommendations_request::GetBidsRecommendationsRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_bids_recommendations(_api, business_id, get_bids_recommendations_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_business_quarantine_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetQuarantineOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_business_quarantine_offers(_api::FbyApi, business_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_business_quarantine_offers_FbyApi, "/businesses/{businessId}/price-quarantine", ["OAuth", ], get_quarantine_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Список товаров, находящихся в карантине по цене в кабинете

Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- get_quarantine_offers_request::GetQuarantineOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetQuarantineOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_business_quarantine_offers(_api::FbyApi, business_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_business_quarantine_offers(_api, business_id, get_quarantine_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_business_quarantine_offers(_api::FbyApi, response_stream::Channel, business_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_business_quarantine_offers(_api, business_id, get_quarantine_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_business_settings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBusinessSettingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_business_settings(_api::FbyApi, business_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_business_settings_FbyApi, "/businesses/{businessId}/settings", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Настройки кабинета

Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)

Return: GetBusinessSettingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_business_settings(_api::FbyApi, business_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_business_settings(_api, business_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_business_settings(_api::FbyApi, response_stream::Channel, business_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_business_settings(_api, business_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_FbyApi, "/campaigns/{campaignId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о магазине

Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign(_api::FbyApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_logins_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignLoginsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_logins(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_logins_FbyApi, "/campaigns/{campaignId}/logins", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Логины, связанные с магазином

Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignLoginsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_logins(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_logins(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_logins(_api::FbyApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_logins(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_offers(_api::FbyApi, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_campaign_offers_FbyApi, "/campaigns/{campaignId}/offers", ["OAuth", ], get_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о товарах, которые размещены в заданном магазине

Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- get_campaign_offers_request::GetCampaignOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetCampaignOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_offers(_api::FbyApi, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_offers(_api, campaign_id, get_campaign_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_offers(_api, campaign_id, get_campaign_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_quarantine_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetQuarantineOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_quarantine_offers(_api::FbyApi, campaign_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_campaign_quarantine_offers_FbyApi, "/campaigns/{campaignId}/price-quarantine", ["OAuth", ], get_quarantine_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Список товаров, находящихся в карантине по цене в магазине

Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- get_quarantine_offers_request::GetQuarantineOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetQuarantineOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_quarantine_offers(_api::FbyApi, campaign_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_quarantine_offers(_api, campaign_id, get_quarantine_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_quarantine_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, get_quarantine_offers_request::GetQuarantineOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_quarantine_offers(_api, campaign_id, get_quarantine_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_region_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignRegionResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_region(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_region_FbyApi, "/campaigns/{campaignId}/region", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Регион магазина

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignRegionResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_region(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_region(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_region(_api::FbyApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_region(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_settings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignSettingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_settings(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaign_settings_FbyApi, "/campaigns/{campaignId}/settings", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Настройки магазина

Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetCampaignSettingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_settings(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_settings(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_settings(_api::FbyApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_settings(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaigns_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaigns(_api::FbyApi; page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_campaigns", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaigns_FbyApi, "/campaigns", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список магазинов пользователя

Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- page::Int64
- page_size::Int64

Return: GetCampaignsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaigns(_api::FbyApi; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns(_api; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaigns(_api::FbyApi, response_stream::Channel; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns(_api; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaigns_by_login_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaigns_by_login(_api::FbyApi, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_campaigns_by_login", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_campaigns_by_login_FbyApi, "/campaigns/by_login/{login}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "login", login)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Магазины, доступные логину

Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- login::String (required)
- page::Int64
- page_size::Int64

Return: GetCampaignsResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaigns_by_login(_api::FbyApi, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns_by_login(_api, login; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaigns_by_login(_api::FbyApi, response_stream::Channel, login::String; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaigns_by_login(_api, login; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_categories_max_sale_quantum_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCategoriesMaxSaleQuantumResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_categories_max_sale_quantum(_api::FbyApi, get_categories_max_sale_quantum_request::GetCategoriesMaxSaleQuantumRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_categories_max_sale_quantum_FbyApi, "/categories/max-sale-quantum", ["OAuth", ], get_categories_max_sale_quantum_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Лимит на установку кванта продажи и минимального количества товаров в заказе

Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- get_categories_max_sale_quantum_request::GetCategoriesMaxSaleQuantumRequest (required)

Return: GetCategoriesMaxSaleQuantumResponse, OpenAPI.Clients.ApiResponse
"""
function get_categories_max_sale_quantum(_api::FbyApi, get_categories_max_sale_quantum_request::GetCategoriesMaxSaleQuantumRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_categories_max_sale_quantum(_api, get_categories_max_sale_quantum_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_categories_max_sale_quantum(_api::FbyApi, response_stream::Channel, get_categories_max_sale_quantum_request::GetCategoriesMaxSaleQuantumRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_categories_max_sale_quantum(_api, get_categories_max_sale_quantum_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_categories_tree_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCategoriesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_categories_tree(_api::FbyApi; get_categories_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_categories_tree_FbyApi, "/categories/tree", ["OAuth", ], get_categories_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Дерево категорий

Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- get_categories_request::GetCategoriesRequest

Return: GetCategoriesResponse, OpenAPI.Clients.ApiResponse
"""
function get_categories_tree(_api::FbyApi; get_categories_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_categories_tree(_api; get_categories_request=get_categories_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_categories_tree(_api::FbyApi, response_stream::Channel; get_categories_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_categories_tree(_api; get_categories_request=get_categories_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_category_content_parameters_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCategoryContentParametersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_category_content_parameters(_api::FbyApi, category_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_category_content_parameters_FbyApi, "/category/{categoryId}/parameters", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "categoryId", category_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Списки характеристик товаров по категориям

Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 

Params:
- category_id::Int64 (required)

Return: GetCategoryContentParametersResponse, OpenAPI.Clients.ApiResponse
"""
function get_category_content_parameters(_api::FbyApi, category_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category_content_parameters(_api, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_category_content_parameters(_api::FbyApi, response_stream::Channel, category_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category_content_parameters(_api, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_chat_history_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetChatHistoryResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_chat_history(_api::FbyApi, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_chat_history_FbyApi, "/businesses/{businessId}/chats/history", ["OAuth", ], get_chat_history_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение истории сообщений в чате

Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- get_chat_history_request::GetChatHistoryRequest (required)
- page_token::String
- limit::Int64

Return: GetChatHistoryResponse, OpenAPI.Clients.ApiResponse
"""
function get_chat_history(_api::FbyApi, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chat_history(_api, business_id, chat_id, get_chat_history_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_chat_history(_api::FbyApi, response_stream::Channel, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chat_history(_api, business_id, chat_id, get_chat_history_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_chats_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetChatsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_chats(_api::FbyApi, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_chats_FbyApi, "/businesses/{businessId}/chats", ["OAuth", ], get_chats_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение доступных чатов

Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_chats_request::GetChatsRequest (required)
- page_token::String
- limit::Int64

Return: GetChatsResponse, OpenAPI.Clients.ApiResponse
"""
function get_chats(_api::FbyApi, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chats(_api, business_id, get_chats_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_chats(_api::FbyApi, response_stream::Channel, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chats(_api, business_id, get_chats_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feed_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feed(_api::FbyApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feed_FbyApi, "/campaigns/{campaignId}/feeds/{feedId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о прайс-листе

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)

Return: GetFeedResponse, OpenAPI.Clients.ApiResponse
"""
function get_feed(_api::FbyApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feed(_api::FbyApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feed_index_logs_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedIndexLogsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feed_index_logs(_api::FbyApi, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feed_index_logs_FbyApi, "/campaigns/{campaignId}/feeds/{feedId}/index-logs", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "published_time_from", published_time_from; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "published_time_to", published_time_to; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="", is_explode=false)  # type FeedIndexLogsStatusType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по индексации прайс-листа

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)
- limit::Int64
- published_time_from::ZonedDateTime
- published_time_to::ZonedDateTime
- status::FeedIndexLogsStatusType

Return: GetFeedIndexLogsResponse, OpenAPI.Clients.ApiResponse
"""
function get_feed_index_logs(_api::FbyApi, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feed_index_logs(_api, campaign_id, feed_id; limit=limit, published_time_from=published_time_from, published_time_to=published_time_to, status=status, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feed_index_logs(_api::FbyApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feed_index_logs(_api, campaign_id, feed_id; limit=limit, published_time_from=published_time_from, published_time_to=published_time_to, status=status, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feedback_and_comment_updates_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedbackListResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feedback_and_comment_updates(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, from_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feedback_and_comment_updates_FbyApi, "/campaigns/{campaignId}/feedback/updates", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "from_date", from_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Новые и обновленные отзывы о магазине

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- from_date::Date

Return: GetFeedbackListResponse, OpenAPI.Clients.ApiResponse
"""
function get_feedback_and_comment_updates(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, from_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feedback_and_comment_updates(_api, campaign_id; page_token=page_token, limit=limit, from_date=from_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feedback_and_comment_updates(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, from_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feedback_and_comment_updates(_api, campaign_id; page_token=page_token, limit=limit, from_date=from_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feeds_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feeds(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feeds_FbyApi, "/campaigns/{campaignId}/feeds", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список прайс-листов магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetFeedsResponse, OpenAPI.Clients.ApiResponse
"""
function get_feeds(_api::FbyApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feeds(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feeds(_api::FbyApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feeds(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_fulfillment_warehouses_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFulfillmentWarehousesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_fulfillment_warehouses(_api::FbyApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_fulfillment_warehouses_FbyApi, "/warehouses", ["OAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Идентификаторы складов Маркета (FBY)

Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

Params:

Return: GetFulfillmentWarehousesResponse, OpenAPI.Clients.ApiResponse
"""
function get_fulfillment_warehouses(_api::FbyApi; _mediaType=nothing)
    _ctx = _oacinternal_get_fulfillment_warehouses(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_fulfillment_warehouses(_api::FbyApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_fulfillment_warehouses(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_goods_feedback_comments_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetGoodsFeedbackCommentsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_goods_feedback_comments(_api::FbyApi, business_id::Int64, get_goods_feedback_comments_request::GetGoodsFeedbackCommentsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_goods_feedback_comments_FbyApi, "/businesses/{businessId}/goods-feedback/comments", ["OAuth", ], get_goods_feedback_comments_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение комментариев к отзыву

Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_goods_feedback_comments_request::GetGoodsFeedbackCommentsRequest (required)
- page_token::String
- limit::Int64

Return: GetGoodsFeedbackCommentsResponse, OpenAPI.Clients.ApiResponse
"""
function get_goods_feedback_comments(_api::FbyApi, business_id::Int64, get_goods_feedback_comments_request::GetGoodsFeedbackCommentsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_goods_feedback_comments(_api, business_id, get_goods_feedback_comments_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_goods_feedback_comments(_api::FbyApi, response_stream::Channel, business_id::Int64, get_goods_feedback_comments_request::GetGoodsFeedbackCommentsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_goods_feedback_comments(_api, business_id, get_goods_feedback_comments_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_goods_feedbacks_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetGoodsFeedbackResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_goods_feedbacks(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_goods_feedback_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_goods_feedbacks_FbyApi, "/businesses/{businessId}/goods-feedback", ["OAuth", ], get_goods_feedback_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение отзывов о товарах продавца

Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- page_token::String
- limit::Int64
- get_goods_feedback_request::GetGoodsFeedbackRequest

Return: GetGoodsFeedbackResponse, OpenAPI.Clients.ApiResponse
"""
function get_goods_feedbacks(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_goods_feedback_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_goods_feedbacks(_api, business_id; page_token=page_token, limit=limit, get_goods_feedback_request=get_goods_feedback_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_goods_feedbacks(_api::FbyApi, response_stream::Channel, business_id::Int64; page_token=nothing, limit=nothing, get_goods_feedback_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_goods_feedbacks(_api, business_id; page_token=page_token, limit=limit, get_goods_feedback_request=get_goods_feedback_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_goods_stats_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetGoodsStatsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_goods_stats(_api::FbyApi, campaign_id::Int64, get_goods_stats_request::GetGoodsStatsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_goods_stats_FbyApi, "/campaigns/{campaignId}/stats/skus", ["OAuth", ], get_goods_stats_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по товарам

Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- get_goods_stats_request::GetGoodsStatsRequest (required)

Return: GetGoodsStatsResponse, OpenAPI.Clients.ApiResponse
"""
function get_goods_stats(_api::FbyApi, campaign_id::Int64, get_goods_stats_request::GetGoodsStatsRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_goods_stats(_api, campaign_id, get_goods_stats_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_goods_stats(_api::FbyApi, response_stream::Channel, campaign_id::Int64, get_goods_stats_request::GetGoodsStatsRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_goods_stats(_api, campaign_id, get_goods_stats_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_hidden_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetHiddenOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_hidden_offers(_api::FbyApi, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_hidden_offers", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_hidden_offers_FbyApi, "/campaigns/{campaignId}/hidden-offers", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offer_id", offer_id; style="", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offset", offset; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о скрытых вами товарах

Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- campaign_id::Int64 (required)
- offer_id::Vector{String}
- page_token::String
- limit::Int64
- offset::Int64
- page::Int64
- page_size::Int64

Return: GetHiddenOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_hidden_offers(_api::FbyApi, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_hidden_offers(_api, campaign_id; offer_id=offer_id, page_token=page_token, limit=limit, offset=offset, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_hidden_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64; offer_id=nothing, page_token=nothing, limit=nothing, offset=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_hidden_offers(_api, campaign_id; offer_id=offer_id, page_token=page_token, limit=limit, offset=offset, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_cards_content_status_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferCardsContentStatusResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_cards_content_status(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_offer_cards_content_status_FbyApi, "/businesses/{businessId}/offer-cards", ["OAuth", ], get_offer_cards_content_status_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение информации о заполненности карточек магазина

Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- page_token::String
- limit::Int64
- get_offer_cards_content_status_request::GetOfferCardsContentStatusRequest

Return: GetOfferCardsContentStatusResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_cards_content_status(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_cards_content_status(_api, business_id; page_token=page_token, limit=limit, get_offer_cards_content_status_request=get_offer_cards_content_status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_cards_content_status(_api::FbyApi, response_stream::Channel, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_cards_content_status(_api, business_id; page_token=page_token, limit=limit, get_offer_cards_content_status_request=get_offer_cards_content_status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_mapping_entries_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferMappingEntriesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_mapping_entries(_api::FbyApi, campaign_id::Int64; offer_id=nothing, shop_sku=nothing, mapping_kind=nothing, status=nothing, availability=nothing, category_id=nothing, vendor=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_offer_mapping_entries_FbyApi, "/campaigns/{campaignId}/offer-mapping-entries", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "offer_id", offer_id; style="", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "shop_sku", shop_sku; style="", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "mapping_kind", mapping_kind; style="", is_explode=false)  # type OfferMappingKindType
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="", is_explode=false)  # type Vector{OfferProcessingStatusType}
    OpenAPI.Clients.set_param(_ctx.query, "availability", availability; style="", is_explode=false)  # type Vector{OfferAvailabilityStatusType}
    OpenAPI.Clients.set_param(_ctx.query, "category_id", category_id; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_param(_ctx.query, "vendor", vendor; style="", is_explode=false)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список товаров в каталоге

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 

Params:
- campaign_id::Int64 (required)
- offer_id::Vector{String}
- shop_sku::Vector{String}
- mapping_kind::OfferMappingKindType
- status::Vector{OfferProcessingStatusType}
- availability::Vector{OfferAvailabilityStatusType}
- category_id::Vector{Int64}
- vendor::Vector{String}
- page_token::String
- limit::Int64

Return: GetOfferMappingEntriesResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_mapping_entries(_api::FbyApi, campaign_id::Int64; offer_id=nothing, shop_sku=nothing, mapping_kind=nothing, status=nothing, availability=nothing, category_id=nothing, vendor=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_mapping_entries(_api, campaign_id; offer_id=offer_id, shop_sku=shop_sku, mapping_kind=mapping_kind, status=status, availability=availability, category_id=category_id, vendor=vendor, page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_mapping_entries(_api::FbyApi, response_stream::Channel, campaign_id::Int64; offer_id=nothing, shop_sku=nothing, mapping_kind=nothing, status=nothing, availability=nothing, category_id=nothing, vendor=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_mapping_entries(_api, campaign_id; offer_id=offer_id, shop_sku=shop_sku, mapping_kind=mapping_kind, status=status, availability=availability, category_id=category_id, vendor=vendor, page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_mappings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferMappingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_mappings(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_offer_mappings_FbyApi, "/businesses/{businessId}/offer-mappings", ["OAuth", ], get_offer_mappings_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о товарах в каталоге

Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- page_token::String
- limit::Int64
- get_offer_mappings_request::GetOfferMappingsRequest

Return: GetOfferMappingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_mappings(_api::FbyApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_mappings(_api, business_id; page_token=page_token, limit=limit, get_offer_mappings_request=get_offer_mappings_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_mappings(_api::FbyApi, response_stream::Channel, business_id::Int64; page_token=nothing, limit=nothing, get_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_mappings(_api, business_id; page_token=page_token, limit=limit, get_offer_mappings_request=get_offer_mappings_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_recommendations_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferRecommendationsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_recommendations(_api::FbyApi, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_offer_recommendations_FbyApi, "/businesses/{businessId}/offers/recommendations", ["OAuth", ], get_offer_recommendations_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Рекомендации Маркета, касающиеся цен

Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- get_offer_recommendations_request::GetOfferRecommendationsRequest (required)
- page_token::String
- limit::Int64

Return: GetOfferRecommendationsResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_recommendations(_api::FbyApi, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_recommendations(_api, business_id, get_offer_recommendations_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_recommendations(_api::FbyApi, response_stream::Channel, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_recommendations(_api, business_id, get_offer_recommendations_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offers(_api::FbyApi, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_offers", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_offers_FbyApi, "/campaigns/{campaignId}/offers", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "feedId", feed_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "shopCategoryId", shop_category_id; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "currency", currency; style="", is_explode=false)  # type CurrencyType
    OpenAPI.Clients.set_param(_ctx.query, "matched", matched; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Предложения магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 

Params:
- campaign_id::Int64 (required)
- query::String
- feed_id::Int64
- shop_category_id::String
- currency::CurrencyType
- matched::Bool
- page::Int64
- page_size::Int64

Return: GetOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_offers(_api::FbyApi, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offers(_api, campaign_id; query=query, feed_id=feed_id, shop_category_id=shop_category_id, currency=currency, matched=matched, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offers(_api, campaign_id; query=query, feed_id=feed_id, shop_category_id=shop_category_id, currency=currency, matched=matched, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_order_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOrderResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_order(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_order_FbyApi, "/campaigns/{campaignId}/orders/{orderId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация об одном заказе

Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)

Return: GetOrderResponse, OpenAPI.Clients.ApiResponse
"""
function get_order(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_order(_api::FbyApi, response_stream::Channel, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_order_business_buyer_info_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBusinessBuyerInfoResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_order_business_buyer_info(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_order_business_buyer_info_FbyApi, "/campaigns/{campaignId}/orders/{orderId}/business-buyer", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о покупателе — юридическом лице

Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)

Return: GetBusinessBuyerInfoResponse, OpenAPI.Clients.ApiResponse
"""
function get_order_business_buyer_info(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_business_buyer_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_order_business_buyer_info(_api::FbyApi, response_stream::Channel, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_business_buyer_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_order_business_documents_info_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBusinessDocumentsInfoResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_order_business_documents_info(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_order_business_documents_info_FbyApi, "/campaigns/{campaignId}/orders/{orderId}/documents", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о документах

Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)

Return: GetBusinessDocumentsInfoResponse, OpenAPI.Clients.ApiResponse
"""
function get_order_business_documents_info(_api::FbyApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_business_documents_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_order_business_documents_info(_api::FbyApi, response_stream::Channel, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_business_documents_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_orders_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOrdersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_orders(_api::FbyApi, campaign_id::Int64; order_ids=nothing, status=nothing, substatus=nothing, from_date=nothing, to_date=nothing, supplier_shipment_date_from=nothing, supplier_shipment_date_to=nothing, updated_at_from=nothing, updated_at_to=nothing, dispatch_type=nothing, fake=nothing, has_cis=nothing, only_waiting_for_cancellation_approve=nothing, only_estimated_delivery=nothing, buyer_type=nothing, page=nothing, page_size=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)


    OpenAPI.validate_param("page", "get_orders", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_orders_FbyApi, "/campaigns/{campaignId}/orders", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orderIds", order_ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="", is_explode=false)  # type Vector{OrderStatusType}
    OpenAPI.Clients.set_param(_ctx.query, "substatus", substatus; style="", is_explode=false)  # type Vector{OrderSubstatusType}
    OpenAPI.Clients.set_param(_ctx.query, "fromDate", from_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "toDate", to_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "supplierShipmentDateFrom", supplier_shipment_date_from; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "supplierShipmentDateTo", supplier_shipment_date_to; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "updatedAtFrom", updated_at_from; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "updatedAtTo", updated_at_to; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "dispatchType", dispatch_type; style="", is_explode=false)  # type OrderDeliveryDispatchType
    OpenAPI.Clients.set_param(_ctx.query, "fake", fake; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "hasCis", has_cis; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "onlyWaitingForCancellationApprove", only_waiting_for_cancellation_approve; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "onlyEstimatedDelivery", only_estimated_delivery; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "buyerType", buyer_type; style="", is_explode=false)  # type OrderBuyerType
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о нескольких заказах

Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_ids::Vector{Int64}
- status::Vector{OrderStatusType}
- substatus::Vector{OrderSubstatusType}
- from_date::Date
- to_date::Date
- supplier_shipment_date_from::Date
- supplier_shipment_date_to::Date
- updated_at_from::ZonedDateTime
- updated_at_to::ZonedDateTime
- dispatch_type::OrderDeliveryDispatchType
- fake::Bool
- has_cis::Bool
- only_waiting_for_cancellation_approve::Bool
- only_estimated_delivery::Bool
- buyer_type::OrderBuyerType
- page::Int64
- page_size::Int64
- page_token::String
- limit::Int64

Return: GetOrdersResponse, OpenAPI.Clients.ApiResponse
"""
function get_orders(_api::FbyApi, campaign_id::Int64; order_ids=nothing, status=nothing, substatus=nothing, from_date=nothing, to_date=nothing, supplier_shipment_date_from=nothing, supplier_shipment_date_to=nothing, updated_at_from=nothing, updated_at_to=nothing, dispatch_type=nothing, fake=nothing, has_cis=nothing, only_waiting_for_cancellation_approve=nothing, only_estimated_delivery=nothing, buyer_type=nothing, page=nothing, page_size=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_orders(_api, campaign_id; order_ids=order_ids, status=status, substatus=substatus, from_date=from_date, to_date=to_date, supplier_shipment_date_from=supplier_shipment_date_from, supplier_shipment_date_to=supplier_shipment_date_to, updated_at_from=updated_at_from, updated_at_to=updated_at_to, dispatch_type=dispatch_type, fake=fake, has_cis=has_cis, only_waiting_for_cancellation_approve=only_waiting_for_cancellation_approve, only_estimated_delivery=only_estimated_delivery, buyer_type=buyer_type, page=page, page_size=page_size, page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_orders(_api::FbyApi, response_stream::Channel, campaign_id::Int64; order_ids=nothing, status=nothing, substatus=nothing, from_date=nothing, to_date=nothing, supplier_shipment_date_from=nothing, supplier_shipment_date_to=nothing, updated_at_from=nothing, updated_at_to=nothing, dispatch_type=nothing, fake=nothing, has_cis=nothing, only_waiting_for_cancellation_approve=nothing, only_estimated_delivery=nothing, buyer_type=nothing, page=nothing, page_size=nothing, page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_orders(_api, campaign_id; order_ids=order_ids, status=status, substatus=substatus, from_date=from_date, to_date=to_date, supplier_shipment_date_from=supplier_shipment_date_from, supplier_shipment_date_to=supplier_shipment_date_to, updated_at_from=updated_at_from, updated_at_to=updated_at_to, dispatch_type=dispatch_type, fake=fake, has_cis=has_cis, only_waiting_for_cancellation_approve=only_waiting_for_cancellation_approve, only_estimated_delivery=only_estimated_delivery, buyer_type=buyer_type, page=page, page_size=page_size, page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_orders_stats_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOrdersStatsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_orders_stats(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_orders_stats_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_orders_stats_FbyApi, "/campaigns/{campaignId}/stats/orders", ["OAuth", ], get_orders_stats_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Детальная информация по заказам

Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- get_orders_stats_request::GetOrdersStatsRequest

Return: GetOrdersStatsResponse, OpenAPI.Clients.ApiResponse
"""
function get_orders_stats(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_orders_stats_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_orders_stats(_api, campaign_id; page_token=page_token, limit=limit, get_orders_stats_request=get_orders_stats_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_orders_stats(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, get_orders_stats_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_orders_stats(_api, campaign_id; page_token=page_token, limit=limit, get_orders_stats_request=get_orders_stats_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPricesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_prices(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_prices_FbyApi, "/campaigns/{campaignId}/offer-prices", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "archived", archived; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список цен

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- archived::Bool

Return: GetPricesResponse, OpenAPI.Clients.ApiResponse
"""
function get_prices(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices(_api, campaign_id; page_token=page_token, limit=limit, archived=archived, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_prices(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices(_api, campaign_id; page_token=page_token, limit=limit, archived=archived, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_prices_by_offer_ids_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPricesByOfferIdsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_prices_by_offer_ids(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_prices_by_offer_ids_FbyApi, "/campaigns/{campaignId}/offer-prices", ["OAuth", ], get_prices_by_offer_ids_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Просмотр цен на указанные товары в магазине

Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- get_prices_by_offer_ids_request::GetPricesByOfferIdsRequest

Return: GetPricesByOfferIdsResponse, OpenAPI.Clients.ApiResponse
"""
function get_prices_by_offer_ids(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices_by_offer_ids(_api, campaign_id; page_token=page_token, limit=limit, get_prices_by_offer_ids_request=get_prices_by_offer_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_prices_by_offer_ids(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices_by_offer_ids(_api, campaign_id; page_token=page_token, limit=limit, get_prices_by_offer_ids_request=get_prices_by_offer_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_promo_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_promo_offers(_api::FbyApi, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_promo_offers_FbyApi, "/businesses/{businessId}/promos/offers", ["OAuth", ], get_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение списка товаров, которые участвуют или могут участвовать в акции

Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_promo_offers_request::GetPromoOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetPromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_promo_offers(_api::FbyApi, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promo_offers(_api, business_id, get_promo_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_promo_offers(_api::FbyApi, response_stream::Channel, business_id::Int64, get_promo_offers_request::GetPromoOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promo_offers(_api, business_id, get_promo_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_promos_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPromosResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_promos(_api::FbyApi, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_promos_FbyApi, "/businesses/{businessId}/promos", ["OAuth", ], get_promos_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение списка акций

Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_promos_request::GetPromosRequest

Return: GetPromosResponse, OpenAPI.Clients.ApiResponse
"""
function get_promos(_api::FbyApi, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promos(_api, business_id; get_promos_request=get_promos_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_promos(_api::FbyApi, response_stream::Channel, business_id::Int64; get_promos_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_promos(_api, business_id; get_promos_request=get_promos_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_quality_ratings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetQualityRatingResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_quality_ratings(_api::FbyApi, business_id::Int64, get_quality_rating_request::GetQualityRatingRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_quality_ratings_FbyApi, "/businesses/{businessId}/ratings/quality", ["OAuth", ], get_quality_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Индекс качества магазинов

Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_quality_rating_request::GetQualityRatingRequest (required)

Return: GetQualityRatingResponse, OpenAPI.Clients.ApiResponse
"""
function get_quality_ratings(_api::FbyApi, business_id::Int64, get_quality_rating_request::GetQualityRatingRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_quality_ratings(_api, business_id, get_quality_rating_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_quality_ratings(_api::FbyApi, response_stream::Channel, business_id::Int64, get_quality_rating_request::GetQualityRatingRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_quality_ratings(_api, business_id, get_quality_rating_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_report_info_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetReportInfoResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_report_info(_api::FbyApi, report_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_report_info_FbyApi, "/reports/info/{reportId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "reportId", report_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Получение заданного отчета

Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

Params:
- report_id::String (required)

Return: GetReportInfoResponse, OpenAPI.Clients.ApiResponse
"""
function get_report_info(_api::FbyApi, report_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_report_info(_api, report_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_report_info(_api::FbyApi, response_stream::Channel, report_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_report_info(_api, report_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_return_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetReturnResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_return(_api::FbyApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_return_FbyApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о невыкупе или возврате

Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)

Return: GetReturnResponse, OpenAPI.Clients.ApiResponse
"""
function get_return(_api::FbyApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_return(_api::FbyApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_return_photo_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_return_photo(_api::FbyApi, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_return_photo_FbyApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "itemId", item_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "imageHash", image_hash)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/octet-stream", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Получение фотографии возврата

Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)
- item_id::Int64 (required)
- image_hash::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_return_photo(_api::FbyApi, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = _oacinternal_get_return_photo(_api, campaign_id, order_id, return_id, item_id, image_hash; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_return_photo(_api::FbyApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = _oacinternal_get_return_photo(_api, campaign_id, order_id, return_id, item_id, image_hash; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_returns_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetReturnsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_returns(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    OpenAPI.validate_param("order_ids", "get_returns", :maxItems, order_ids, 50)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_returns_FbyApi, "/campaigns/{campaignId}/returns", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orderIds", order_ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_param(_ctx.query, "statuses", statuses; style="", is_explode=false)  # type Vector{RefundStatusType}
    OpenAPI.Clients.set_param(_ctx.query, "type", type; style="", is_explode=false)  # type ReturnType
    OpenAPI.Clients.set_param(_ctx.query, "fromDate", from_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "toDate", to_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "from_date", from_date2; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "to_date", to_date2; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список невыкупов и возвратов

Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- order_ids::Vector{Int64}
- statuses::Vector{RefundStatusType}
- type::ReturnType
- from_date::Date
- to_date::Date
- from_date2::Date
- to_date2::Date

Return: GetReturnsResponse, OpenAPI.Clients.ApiResponse
"""
function get_returns(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_returns(_api, campaign_id; page_token=page_token, limit=limit, order_ids=order_ids, statuses=statuses, type=type, from_date=from_date, to_date=to_date, from_date2=from_date2, to_date2=to_date2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_returns(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_returns(_api, campaign_id; page_token=page_token, limit=limit, order_ids=order_ids, statuses=statuses, type=type, from_date=from_date, to_date=to_date, from_date2=from_date2, to_date2=to_date2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_stocks_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetWarehouseStocksResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_stocks(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_stocks_FbyApi, "/campaigns/{campaignId}/offers/stocks", ["OAuth", ], get_warehouse_stocks_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация об остатках и оборачиваемости

Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- get_warehouse_stocks_request::GetWarehouseStocksRequest

Return: GetWarehouseStocksResponse, OpenAPI.Clients.ApiResponse
"""
function get_stocks(_api::FbyApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_stocks(_api, campaign_id; page_token=page_token, limit=limit, get_warehouse_stocks_request=get_warehouse_stocks_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_stocks(_api::FbyApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_stocks(_api, campaign_id; page_token=page_token, limit=limit, get_warehouse_stocks_request=get_warehouse_stocks_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_suggested_offer_mapping_entries_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetSuggestedOfferMappingEntriesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_suggested_offer_mapping_entries(_api::FbyApi, campaign_id::Int64, get_suggested_offer_mapping_entries_request::GetSuggestedOfferMappingEntriesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_suggested_offer_mapping_entries_FbyApi, "/campaigns/{campaignId}/offer-mapping-entries/suggestions", ["OAuth", ], get_suggested_offer_mapping_entries_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Рекомендованные карточки для товаров

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 

Params:
- campaign_id::Int64 (required)
- get_suggested_offer_mapping_entries_request::GetSuggestedOfferMappingEntriesRequest (required)

Return: GetSuggestedOfferMappingEntriesResponse, OpenAPI.Clients.ApiResponse
"""
function get_suggested_offer_mapping_entries(_api::FbyApi, campaign_id::Int64, get_suggested_offer_mapping_entries_request::GetSuggestedOfferMappingEntriesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_offer_mapping_entries(_api, campaign_id, get_suggested_offer_mapping_entries_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_suggested_offer_mapping_entries(_api::FbyApi, response_stream::Channel, campaign_id::Int64, get_suggested_offer_mapping_entries_request::GetSuggestedOfferMappingEntriesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_offer_mapping_entries(_api, campaign_id, get_suggested_offer_mapping_entries_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_suggested_offer_mappings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetSuggestedOfferMappingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_suggested_offer_mappings(_api::FbyApi, business_id::Int64; get_suggested_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_suggested_offer_mappings_FbyApi, "/businesses/{businessId}/offer-mappings/suggestions", ["OAuth", ], get_suggested_offer_mappings_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Просмотр карточек на Маркете, которые подходят вашим товарам

Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 

Params:
- business_id::Int64 (required)
- get_suggested_offer_mappings_request::GetSuggestedOfferMappingsRequest

Return: GetSuggestedOfferMappingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_suggested_offer_mappings(_api::FbyApi, business_id::Int64; get_suggested_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_offer_mappings(_api, business_id; get_suggested_offer_mappings_request=get_suggested_offer_mappings_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_suggested_offer_mappings(_api::FbyApi, response_stream::Channel, business_id::Int64; get_suggested_offer_mappings_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_offer_mappings(_api, business_id; get_suggested_offer_mappings_request=get_suggested_offer_mappings_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_suggested_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuggestPricesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_suggested_prices(_api::FbyApi, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_suggested_prices_FbyApi, "/campaigns/{campaignId}/offer-prices/suggestions", ["OAuth", ], suggest_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Цены для продвижения товаров

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 

Params:
- campaign_id::Int64 (required)
- suggest_prices_request::SuggestPricesRequest (required)

Return: SuggestPricesResponse, OpenAPI.Clients.ApiResponse
"""
function get_suggested_prices(_api::FbyApi, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_prices(_api, campaign_id, suggest_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_suggested_prices(_api::FbyApi, response_stream::Channel, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_prices(_api, campaign_id, suggest_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_put_bids_for_business_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_put_bids_for_business(_api::FbyApi, business_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_put_bids_for_business_FbyApi, "/businesses/{businessId}/bids", ["OAuth", ], put_sku_bids_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Включение буста продаж и установка ставок

Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- put_sku_bids_request::PutSkuBidsRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function put_bids_for_business(_api::FbyApi, business_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = _oacinternal_put_bids_for_business(_api, business_id, put_sku_bids_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function put_bids_for_business(_api::FbyApi, response_stream::Channel, business_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = _oacinternal_put_bids_for_business(_api, business_id, put_sku_bids_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_put_bids_for_campaign_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_put_bids_for_campaign(_api::FbyApi, campaign_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_put_bids_for_campaign_FbyApi, "/campaigns/{campaignId}/bids", ["OAuth", ], put_sku_bids_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Включение буста продаж и установка ставок для магазина

Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- put_sku_bids_request::PutSkuBidsRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function put_bids_for_campaign(_api::FbyApi, campaign_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = _oacinternal_put_bids_for_campaign(_api, campaign_id, put_sku_bids_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function put_bids_for_campaign(_api::FbyApi, response_stream::Channel, campaign_id::Int64, put_sku_bids_request::PutSkuBidsRequest; _mediaType=nothing)
    _ctx = _oacinternal_put_bids_for_campaign(_api, campaign_id, put_sku_bids_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_refresh_feed_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_refresh_feed(_api::FbyApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_refresh_feed_FbyApi, "/campaigns/{campaignId}/feeds/{feedId}/refresh", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Сообщить, что прайс-лист обновился

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function refresh_feed(_api::FbyApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_refresh_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function refresh_feed(_api::FbyApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_refresh_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_region_children_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetRegionWithChildrenResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_search_region_children(_api::FbyApi, region_id::Int64; page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "search_region_children", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_region_children_FbyApi, "/regions/{regionId}/children", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "regionId", region_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о дочерних регионах

Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 

Params:
- region_id::Int64 (required)
- page::Int64
- page_size::Int64

Return: GetRegionWithChildrenResponse, OpenAPI.Clients.ApiResponse
"""
function search_region_children(_api::FbyApi, region_id::Int64; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_region_children(_api, region_id; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_region_children(_api::FbyApi, response_stream::Channel, region_id::Int64; page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_region_children(_api, region_id; page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_regions_by_id_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetRegionsResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_search_regions_by_id(_api::FbyApi, region_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_regions_by_id_FbyApi, "/regions/{regionId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "regionId", region_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о регионе

Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 

Params:
- region_id::Int64 (required)

Return: GetRegionsResponse, OpenAPI.Clients.ApiResponse
"""
function search_regions_by_id(_api::FbyApi, region_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_search_regions_by_id(_api, region_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_regions_by_id(_api::FbyApi, response_stream::Channel, region_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_search_regions_by_id(_api, region_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_regions_by_name_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetRegionsResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_search_regions_by_name(_api::FbyApi, name::String; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_regions_by_name_FbyApi, "/regions", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "name", name; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Поиск регионов по их имени

Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 

Params:
- name::String (required)
- page_token::String
- limit::Int64

Return: GetRegionsResponse, OpenAPI.Clients.ApiResponse
"""
function search_regions_by_name(_api::FbyApi, name::String; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_regions_by_name(_api, name; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_regions_by_name(_api::FbyApi, response_stream::Channel, name::String; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_regions_by_name(_api, name; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_file_to_chat_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_send_file_to_chat(_api::FbyApi, business_id::Int64, chat_id::Int64, file::Vector{UInt8}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_file_to_chat_FbyApi, "/businesses/{businessId}/chats/file/send", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отправка файла в чат

Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- file::String (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function send_file_to_chat(_api::FbyApi, business_id::Int64, chat_id::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_send_file_to_chat(_api, business_id, chat_id, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_file_to_chat(_api::FbyApi, response_stream::Channel, business_id::Int64, chat_id::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_send_file_to_chat(_api, business_id, chat_id, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_message_to_chat_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_send_message_to_chat(_api::FbyApi, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_message_to_chat_FbyApi, "/businesses/{businessId}/chats/message", ["OAuth", ], send_message_to_chat_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отправка сообщения в чат

Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- send_message_to_chat_request::SendMessageToChatRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function send_message_to_chat(_api::FbyApi, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_message_to_chat(_api, business_id, chat_id, send_message_to_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_message_to_chat(_api::FbyApi, response_stream::Channel, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_message_to_chat(_api, business_id, chat_id, send_message_to_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_feed_params_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_set_feed_params(_api::FbyApi, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_feed_params_FbyApi, "/campaigns/{campaignId}/feeds/{feedId}/params", ["OAuth", ], set_feed_params_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение параметров прайс-листа

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)
- set_feed_params_request::SetFeedParamsRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function set_feed_params(_api::FbyApi, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_feed_params(_api, campaign_id, feed_id, set_feed_params_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_feed_params(_api::FbyApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_feed_params(_api, campaign_id, feed_id, set_feed_params_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_skip_goods_feedbacks_reaction_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_skip_goods_feedbacks_reaction(_api::FbyApi, business_id::Int64, skip_goods_feedback_reaction_request::SkipGoodsFeedbackReactionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_skip_goods_feedbacks_reaction_FbyApi, "/businesses/{businessId}/goods-feedback/skip-reaction", ["OAuth", ], skip_goods_feedback_reaction_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отказ от ответа на отзывы

Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- skip_goods_feedback_reaction_request::SkipGoodsFeedbackReactionRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function skip_goods_feedbacks_reaction(_api::FbyApi, business_id::Int64, skip_goods_feedback_reaction_request::SkipGoodsFeedbackReactionRequest; _mediaType=nothing)
    _ctx = _oacinternal_skip_goods_feedbacks_reaction(_api, business_id, skip_goods_feedback_reaction_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function skip_goods_feedbacks_reaction(_api::FbyApi, response_stream::Channel, business_id::Int64, skip_goods_feedback_reaction_request::SkipGoodsFeedbackReactionRequest; _mediaType=nothing)
    _ctx = _oacinternal_skip_goods_feedbacks_reaction(_api, business_id, skip_goods_feedback_reaction_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_business_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_business_prices(_api::FbyApi, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_business_prices_FbyApi, "/businesses/{businessId}/offer-prices/updates", ["OAuth", ], update_business_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Установка цен на товары во всех магазинах

Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- update_business_prices_request::UpdateBusinessPricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_business_prices(_api::FbyApi, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_business_prices(_api, business_id, update_business_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_business_prices(_api::FbyApi, response_stream::Channel, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_business_prices(_api, business_id, update_business_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_campaign_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_campaign_offers(_api::FbyApi, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_campaign_offers_FbyApi, "/campaigns/{campaignId}/offers/update", ["OAuth", ], update_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение условий продажи товаров в магазине

Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_campaign_offers_request::UpdateCampaignOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_campaign_offers(_api::FbyApi, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_campaign_offers(_api, campaign_id, update_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_campaign_offers(_api::FbyApi, response_stream::Channel, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_campaign_offers(_api, campaign_id, update_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_goods_feedback_comment_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdateGoodsFeedbackCommentResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_goods_feedback_comment(_api::FbyApi, business_id::Int64, update_goods_feedback_comment_request::UpdateGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_goods_feedback_comment_FbyApi, "/businesses/{businessId}/goods-feedback/comments/update", ["OAuth", ], update_goods_feedback_comment_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление нового или изменение созданного комментария

Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- update_goods_feedback_comment_request::UpdateGoodsFeedbackCommentRequest (required)

Return: UpdateGoodsFeedbackCommentResponse, OpenAPI.Clients.ApiResponse
"""
function update_goods_feedback_comment(_api::FbyApi, business_id::Int64, update_goods_feedback_comment_request::UpdateGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_goods_feedback_comment(_api, business_id, update_goods_feedback_comment_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_goods_feedback_comment(_api::FbyApi, response_stream::Channel, business_id::Int64, update_goods_feedback_comment_request::UpdateGoodsFeedbackCommentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_goods_feedback_comment(_api, business_id, update_goods_feedback_comment_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_offer_content_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdateOfferContentResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_offer_content(_api::FbyApi, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_offer_content_FbyApi, "/businesses/{businessId}/offer-cards/update", ["OAuth", ], update_offer_content_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Редактирование категорийных характеристик товара

Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- business_id::Int64 (required)
- update_offer_content_request::UpdateOfferContentRequest (required)

Return: UpdateOfferContentResponse, OpenAPI.Clients.ApiResponse
"""
function update_offer_content(_api::FbyApi, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_content(_api, business_id, update_offer_content_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_offer_content(_api::FbyApi, response_stream::Channel, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_content(_api, business_id, update_offer_content_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_offer_mapping_entries_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_offer_mapping_entries(_api::FbyApi, campaign_id::Int64, update_offer_mapping_entry_request::UpdateOfferMappingEntryRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_offer_mapping_entries_FbyApi, "/campaigns/{campaignId}/offer-mapping-entries/updates", ["OAuth", ], update_offer_mapping_entry_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление и редактирование товаров в каталоге

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_offer_mapping_entry_request::UpdateOfferMappingEntryRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_offer_mapping_entries(_api::FbyApi, campaign_id::Int64, update_offer_mapping_entry_request::UpdateOfferMappingEntryRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_mapping_entries(_api, campaign_id, update_offer_mapping_entry_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_offer_mapping_entries(_api::FbyApi, response_stream::Channel, campaign_id::Int64, update_offer_mapping_entry_request::UpdateOfferMappingEntryRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_mapping_entries(_api, campaign_id, update_offer_mapping_entry_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_offer_mappings_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdateOfferMappingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_offer_mappings(_api::FbyApi, business_id::Int64, update_offer_mappings_request::UpdateOfferMappingsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_offer_mappings_FbyApi, "/businesses/{businessId}/offer-mappings/update", ["OAuth", ], update_offer_mappings_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление товаров в каталог и изменение информации о них

Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- update_offer_mappings_request::UpdateOfferMappingsRequest (required)

Return: UpdateOfferMappingsResponse, OpenAPI.Clients.ApiResponse
"""
function update_offer_mappings(_api::FbyApi, business_id::Int64, update_offer_mappings_request::UpdateOfferMappingsRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_mappings(_api, business_id, update_offer_mappings_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_offer_mappings(_api::FbyApi, response_stream::Channel, business_id::Int64, update_offer_mappings_request::UpdateOfferMappingsRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_mappings(_api, business_id, update_offer_mappings_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_prices_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_prices(_api::FbyApi, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_prices_FbyApi, "/campaigns/{campaignId}/offer-prices/updates", ["OAuth", ], update_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Установка цен на товары в конкретном магазине

Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_prices_request::UpdatePricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_prices(_api::FbyApi, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_prices(_api, campaign_id, update_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_prices(_api::FbyApi, response_stream::Channel, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_prices(_api, campaign_id, update_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_promo_offers_FbyApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdatePromoOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_promo_offers(_api::FbyApi, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_promo_offers_FbyApi, "/businesses/{businessId}/promos/offers/update", ["OAuth", ], update_promo_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Добавление товаров в акцию или изменение их цен

Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- update_promo_offers_request::UpdatePromoOffersRequest (required)

Return: UpdatePromoOffersResponse, OpenAPI.Clients.ApiResponse
"""
function update_promo_offers(_api::FbyApi, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_promo_offers(_api, business_id, update_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_promo_offers(_api::FbyApi, response_stream::Channel, business_id::Int64, update_promo_offers_request::UpdatePromoOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_promo_offers(_api, business_id, update_promo_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_hidden_offers
export add_offers_to_archive
export calculate_tariffs
export confirm_business_prices
export confirm_campaign_prices
export create_chat
export delete_campaign_offers
export delete_goods_feedback_comment
export delete_hidden_offers
export delete_offers
export delete_offers_from_archive
export delete_promo_offers
export generate_boost_consolidated_report
export generate_competitors_position_report
export generate_goods_feedback_report
export generate_goods_movement_report
export generate_goods_realization_report
export generate_goods_turnover_report
export generate_prices_report
export generate_shelfs_statistics_report
export generate_shows_sales_report
export generate_stocks_on_warehouses_report
export generate_united_marketplace_services_report
export generate_united_netting_report
export generate_united_orders_report
export get_all_offers
export get_bids_info_for_business
export get_bids_recommendations
export get_business_quarantine_offers
export get_business_settings
export get_campaign
export get_campaign_logins
export get_campaign_offers
export get_campaign_quarantine_offers
export get_campaign_region
export get_campaign_settings
export get_campaigns
export get_campaigns_by_login
export get_categories_max_sale_quantum
export get_categories_tree
export get_category_content_parameters
export get_chat_history
export get_chats
export get_feed
export get_feed_index_logs
export get_feedback_and_comment_updates
export get_feeds
export get_fulfillment_warehouses
export get_goods_feedback_comments
export get_goods_feedbacks
export get_goods_stats
export get_hidden_offers
export get_offer_cards_content_status
export get_offer_mapping_entries
export get_offer_mappings
export get_offer_recommendations
export get_offers
export get_order
export get_order_business_buyer_info
export get_order_business_documents_info
export get_orders
export get_orders_stats
export get_prices
export get_prices_by_offer_ids
export get_promo_offers
export get_promos
export get_quality_ratings
export get_report_info
export get_return
export get_return_photo
export get_returns
export get_stocks
export get_suggested_offer_mapping_entries
export get_suggested_offer_mappings
export get_suggested_prices
export put_bids_for_business
export put_bids_for_campaign
export refresh_feed
export search_region_children
export search_regions_by_id
export search_regions_by_name
export send_file_to_chat
export send_message_to_chat
export set_feed_params
export skip_goods_feedbacks_reaction
export update_business_prices
export update_campaign_offers
export update_goods_feedback_comment
export update_offer_content
export update_offer_mapping_entries
export update_offer_mappings
export update_prices
export update_promo_offers
