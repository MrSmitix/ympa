# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PricesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PricesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PricesApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_prices_PricesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPricesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_prices(_api::PricesApi, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_prices_PricesApi, "/campaigns/{campaignId}/offer-prices", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "archived", archived; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список цен

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- archived::Bool

Return: GetPricesResponse, OpenAPI.Clients.ApiResponse
"""
function get_prices(_api::PricesApi, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices(_api, campaign_id; page_token=page_token, limit=limit, archived=archived, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_prices(_api::PricesApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, archived=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices(_api, campaign_id; page_token=page_token, limit=limit, archived=archived, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_prices_by_offer_ids_PricesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPricesByOfferIdsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_prices_by_offer_ids(_api::PricesApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_prices_by_offer_ids_PricesApi, "/campaigns/{campaignId}/offer-prices", ["OAuth", ], get_prices_by_offer_ids_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Просмотр цен на указанные товары в магазине

Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- get_prices_by_offer_ids_request::GetPricesByOfferIdsRequest

Return: GetPricesByOfferIdsResponse, OpenAPI.Clients.ApiResponse
"""
function get_prices_by_offer_ids(_api::PricesApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices_by_offer_ids(_api, campaign_id; page_token=page_token, limit=limit, get_prices_by_offer_ids_request=get_prices_by_offer_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_prices_by_offer_ids(_api::PricesApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, get_prices_by_offer_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_prices_by_offer_ids(_api, campaign_id; page_token=page_token, limit=limit, get_prices_by_offer_ids_request=get_prices_by_offer_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_suggested_prices_PricesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuggestPricesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_suggested_prices(_api::PricesApi, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_suggested_prices_PricesApi, "/campaigns/{campaignId}/offer-prices/suggestions", ["OAuth", ], suggest_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Цены для продвижения товаров

{% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 

Params:
- campaign_id::Int64 (required)
- suggest_prices_request::SuggestPricesRequest (required)

Return: SuggestPricesResponse, OpenAPI.Clients.ApiResponse
"""
function get_suggested_prices(_api::PricesApi, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_prices(_api, campaign_id, suggest_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_suggested_prices(_api::PricesApi, response_stream::Channel, campaign_id::Int64, suggest_prices_request::SuggestPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_get_suggested_prices(_api, campaign_id, suggest_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_business_prices_PricesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_business_prices(_api::PricesApi, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_business_prices_PricesApi, "/businesses/{businessId}/offer-prices/updates", ["OAuth", ], update_business_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Установка цен на товары во всех магазинах

Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 

Params:
- business_id::Int64 (required)
- update_business_prices_request::UpdateBusinessPricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_business_prices(_api::PricesApi, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_business_prices(_api, business_id, update_business_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_business_prices(_api::PricesApi, response_stream::Channel, business_id::Int64, update_business_prices_request::UpdateBusinessPricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_business_prices(_api, business_id, update_business_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_prices_PricesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_prices(_api::PricesApi, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_prices_PricesApi, "/campaigns/{campaignId}/offer-prices/updates", ["OAuth", ], update_prices_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Установка цен на товары в конкретном магазине

Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_prices_request::UpdatePricesRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_prices(_api::PricesApi, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_prices(_api, campaign_id, update_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_prices(_api::PricesApi, response_stream::Channel, campaign_id::Int64, update_prices_request::UpdatePricesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_prices(_api, campaign_id, update_prices_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_prices
export get_prices_by_offer_ids
export get_suggested_prices
export update_business_prices
export update_prices
