# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function generate_order_label_read(handler)
    function generate_order_label_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["boxId"] = OpenAPI.Servers.to_param(Int64, path_params, "boxId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_order_label_validate(handler)
    function generate_order_label_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_order_label_invoke(impl; post_invoke=nothing)
    function generate_order_label_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_order_label(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["shipmentId"], openapi_params["boxId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function generate_order_labels_read(handler)
    function generate_order_labels_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(PageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function generate_order_labels_validate(handler)
    function generate_order_labels_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function generate_order_labels_invoke(impl; post_invoke=nothing)
    function generate_order_labels_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.generate_order_labels(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_labels_data_read(handler)
    function get_order_labels_data_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_labels_data_validate(handler)
    function get_order_labels_data_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_labels_data_invoke(impl; post_invoke=nothing)
    function get_order_labels_data_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order_labels_data(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOrderLabelsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label", OpenAPI.Servers.middleware(impl, generate_order_label_read, generate_order_label_validate, generate_order_label_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/labels", OpenAPI.Servers.middleware(impl, generate_order_labels_read, generate_order_labels_validate, generate_order_labels_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data", OpenAPI.Servers.middleware(impl, get_order_labels_data_read, get_order_labels_data_validate, get_order_labels_data_invoke; optional_middlewares...))
    return router
end
