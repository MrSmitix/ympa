# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function delete_outlet_licenses_read(handler)
    function delete_outlet_licenses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["ids"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "ids", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_outlet_licenses_validate(handler)
    function delete_outlet_licenses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        
        return handler(req)
    end
end

function delete_outlet_licenses_invoke(impl; post_invoke=nothing)
    function delete_outlet_licenses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_outlet_licenses(req::HTTP.Request, openapi_params["campaignId"]; ids=get(openapi_params, "ids", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_outlet_licenses_read(handler)
    function get_outlet_licenses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["outletIds"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "outletIds", style="", is_explode=false)
        openapi_params["ids"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "ids", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_outlet_licenses_validate(handler)
    function get_outlet_licenses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        
        
        return handler(req)
    end
end

function get_outlet_licenses_invoke(impl; post_invoke=nothing)
    function get_outlet_licenses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_outlet_licenses(req::HTTP.Request, openapi_params["campaignId"]; outlet_ids=get(openapi_params, "outletIds", nothing), ids=get(openapi_params, "ids", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_outlet_licenses_read(handler)
    function update_outlet_licenses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateOutletLicenseRequest"] = OpenAPI.Servers.to_param_type(UpdateOutletLicenseRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_outlet_licenses_validate(handler)
    function update_outlet_licenses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_outlet_licenses_invoke(impl; post_invoke=nothing)
    function update_outlet_licenses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_outlet_licenses(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateOutletLicenseRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOutletLicensesApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "DELETE", path_prefix * "/campaigns/{campaignId}/outlets/licenses", OpenAPI.Servers.middleware(impl, delete_outlet_licenses_read, delete_outlet_licenses_validate, delete_outlet_licenses_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/outlets/licenses", OpenAPI.Servers.middleware(impl, get_outlet_licenses_read, get_outlet_licenses_validate, get_outlet_licenses_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/outlets/licenses", OpenAPI.Servers.middleware(impl, update_outlet_licenses_read, update_outlet_licenses_validate, update_outlet_licenses_invoke; optional_middlewares...))
    return router
end
