# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OutletLicensesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OutletLicensesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OutletLicensesApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_delete_outlet_licenses_OutletLicensesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64; ids=nothing, _mediaType=nothing)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_outlet_licenses_OutletLicensesApi, "/campaigns/{campaignId}/outlets/licenses", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление лицензий для точек продаж

Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- ids::Vector{Int64}

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function delete_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64; ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_outlet_licenses(_api, campaign_id; ids=ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_outlet_licenses(_api::OutletLicensesApi, response_stream::Channel, campaign_id::Int64; ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_delete_outlet_licenses(_api, campaign_id; ids=ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_outlet_licenses_OutletLicensesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOutletLicensesResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64; outlet_ids=nothing, ids=nothing, _mediaType=nothing)


    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_outlet_licenses_OutletLicensesApi, "/campaigns/{campaignId}/outlets/licenses", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "outletIds", outlet_ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о лицензиях для точек продаж

Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- outlet_ids::Vector{Int64}
- ids::Vector{Int64}

Return: GetOutletLicensesResponse, OpenAPI.Clients.ApiResponse
"""
function get_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64; outlet_ids=nothing, ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outlet_licenses(_api, campaign_id; outlet_ids=outlet_ids, ids=ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_outlet_licenses(_api::OutletLicensesApi, response_stream::Channel, campaign_id::Int64; outlet_ids=nothing, ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outlet_licenses(_api, campaign_id; outlet_ids=outlet_ids, ids=ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_outlet_licenses_OutletLicensesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64, update_outlet_license_request::UpdateOutletLicenseRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_outlet_licenses_OutletLicensesApi, "/campaigns/{campaignId}/outlets/licenses", ["OAuth", ], update_outlet_license_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Создание и изменение лицензий для точек продаж

Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- update_outlet_license_request::UpdateOutletLicenseRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_outlet_licenses(_api::OutletLicensesApi, campaign_id::Int64, update_outlet_license_request::UpdateOutletLicenseRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outlet_licenses(_api, campaign_id, update_outlet_license_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_outlet_licenses(_api::OutletLicensesApi, response_stream::Channel, campaign_id::Int64, update_outlet_license_request::UpdateOutletLicenseRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outlet_licenses(_api, campaign_id, update_outlet_license_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_outlet_licenses
export get_outlet_licenses
export update_outlet_licenses
