// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    ConfirmShipmentRequest,
    ConfirmShipmentRequestFromJSON,
    ConfirmShipmentRequestToJSON,
    EmptyApiResponse,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetShipmentOrdersInfoResponse,
    GetShipmentOrdersInfoResponseFromJSON,
    GetShipmentOrdersInfoResponseToJSON,
    GetShipmentResponse,
    GetShipmentResponseFromJSON,
    GetShipmentResponseToJSON,
    SearchShipmentsRequest,
    SearchShipmentsRequestFromJSON,
    SearchShipmentsRequestToJSON,
    SearchShipmentsResponse,
    SearchShipmentsResponseFromJSON,
    SearchShipmentsResponseToJSON,
    SetShipmentPalletsCountRequest,
    SetShipmentPalletsCountRequestFromJSON,
    SetShipmentPalletsCountRequestToJSON,
    ShipmentPalletLabelPageFormatType,
    ShipmentPalletLabelPageFormatTypeFromJSON,
    ShipmentPalletLabelPageFormatTypeToJSON,
    TransferOrdersFromShipmentRequest,
    TransferOrdersFromShipmentRequestFromJSON,
    TransferOrdersFromShipmentRequestToJSON,
} from '../models';

export interface ConfirmShipmentRequest {
    campaignId: number;
    shipmentId: number;
    confirmShipmentRequest?: ConfirmShipmentRequest;
}

export interface DownloadShipmentActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentDiscrepancyActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentInboundActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentPalletLabelsRequest {
    campaignId: number;
    shipmentId: number;
    format?: ShipmentPalletLabelPageFormatType;
}

export interface DownloadShipmentReceptionTransferActRequest {
    campaignId: number;
    warehouseId?: number;
}

export interface DownloadShipmentTransportationWaybillRequest {
    campaignId: number;
    shipmentId: number;
}

export interface GetShipmentRequest {
    campaignId: number;
    shipmentId: number;
    cancelledOrders?: boolean;
}

export interface GetShipmentOrdersInfoRequest {
    campaignId: number;
    shipmentId: number;
}

export interface SearchShipmentsRequest {
    campaignId: number;
    searchShipmentsRequest: SearchShipmentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface SetShipmentPalletsCountRequest {
    campaignId: number;
    shipmentId: number;
    setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest;
}

export interface TransferOrdersFromShipmentRequest {
    campaignId: number;
    shipmentId: number;
    transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest;
}


/**
 * Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Подтверждение отгрузки
 */
function confirmShipmentRaw<T>(requestParameters: ConfirmShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling confirmShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling confirmShipment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConfirmShipmentRequestToJSON(requestParameters.confirmShipmentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Подтверждение отгрузки
*/
export function confirmShipment<T>(requestParameters: ConfirmShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return confirmShipmentRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение акта приема-передачи
 */
function downloadShipmentActRaw<T>(requestParameters: DownloadShipmentActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение акта приема-передачи
*/
export function downloadShipmentAct<T>(requestParameters: DownloadShipmentActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение акта расхождений
 */
function downloadShipmentDiscrepancyActRaw<T>(requestParameters: DownloadShipmentDiscrepancyActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentDiscrepancyAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentDiscrepancyAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение акта расхождений
*/
export function downloadShipmentDiscrepancyAct<T>(requestParameters: DownloadShipmentDiscrepancyActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentDiscrepancyActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение фактического акта приема-передачи
 */
function downloadShipmentInboundActRaw<T>(requestParameters: DownloadShipmentInboundActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentInboundAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentInboundAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение фактического акта приема-передачи
*/
export function downloadShipmentInboundAct<T>(requestParameters: DownloadShipmentInboundActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentInboundActRaw(requestParameters, requestConfig);
}

/**
 * PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Ярлыки для доверительной приемки (FBS)
 */
function downloadShipmentPalletLabelsRaw<T>(requestParameters: DownloadShipmentPalletLabelsRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentPalletLabels.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentPalletLabels.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
* Ярлыки для доверительной приемки (FBS)
*/
export function downloadShipmentPalletLabels<T>(requestParameters: DownloadShipmentPalletLabelsRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentPalletLabelsRaw(requestParameters, requestConfig);
}

/**
 * Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
 */
function downloadShipmentReceptionTransferActRaw<T>(requestParameters: DownloadShipmentReceptionTransferActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentReceptionTransferAct.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.warehouseId !== undefined) {
        queryParameters['warehouse_id'] = requestParameters.warehouseId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/shipments/reception-transfer-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
*/
export function downloadShipmentReceptionTransferAct<T>(requestParameters: DownloadShipmentReceptionTransferActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentReceptionTransferActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение транспортной накладной
 */
function downloadShipmentTransportationWaybillRaw<T>(requestParameters: DownloadShipmentTransportationWaybillRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentTransportationWaybill.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentTransportationWaybill.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение транспортной накладной
*/
export function downloadShipmentTransportationWaybill<T>(requestParameters: DownloadShipmentTransportationWaybillRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentTransportationWaybillRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации об одной отгрузке
 */
function getShipmentRaw<T>(requestParameters: GetShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, GetShipmentResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.cancelledOrders !== undefined) {
        queryParameters['cancelledOrders'] = requestParameters.cancelledOrders;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetShipmentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации об одной отгрузке
*/
export function getShipment<T>(requestParameters: GetShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, GetShipmentResponse>): QueryConfig<T> {
    return getShipmentRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации о возможности печати ярлыков (FBS)
 */
function getShipmentOrdersInfoRaw<T>(requestParameters: GetShipmentOrdersInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetShipmentOrdersInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getShipmentOrdersInfo.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipmentOrdersInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetShipmentOrdersInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации о возможности печати ярлыков (FBS)
*/
export function getShipmentOrdersInfo<T>(requestParameters: GetShipmentOrdersInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetShipmentOrdersInfoResponse>): QueryConfig<T> {
    return getShipmentOrdersInfoRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации о нескольких отгрузках
 */
function searchShipmentsRaw<T>(requestParameters: SearchShipmentsRequest, requestConfig: runtime.TypedQueryConfig<T, SearchShipmentsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling searchShipments.');
    }

    if (requestParameters.searchShipmentsRequest === null || requestParameters.searchShipmentsRequest === undefined) {
        throw new runtime.RequiredError('searchShipmentsRequest','Required parameter requestParameters.searchShipmentsRequest was null or undefined when calling searchShipments.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SearchShipmentsRequestToJSON(requestParameters.searchShipmentsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SearchShipmentsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации о нескольких отгрузках
*/
export function searchShipments<T>(requestParameters: SearchShipmentsRequest, requestConfig?: runtime.TypedQueryConfig<T, SearchShipmentsResponse>): QueryConfig<T> {
    return searchShipmentsRaw(requestParameters, requestConfig);
}

/**
 * Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Передача количества упаковок в отгрузке
 */
function setShipmentPalletsCountRaw<T>(requestParameters: SetShipmentPalletsCountRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setShipmentPalletsCount.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling setShipmentPalletsCount.');
    }

    if (requestParameters.setShipmentPalletsCountRequest === null || requestParameters.setShipmentPalletsCountRequest === undefined) {
        throw new runtime.RequiredError('setShipmentPalletsCountRequest','Required parameter requestParameters.setShipmentPalletsCountRequest was null or undefined when calling setShipmentPalletsCount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SetShipmentPalletsCountRequestToJSON(requestParameters.setShipmentPalletsCountRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
* Передача количества упаковок в отгрузке
*/
export function setShipmentPalletsCount<T>(requestParameters: SetShipmentPalletsCountRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return setShipmentPalletsCountRaw(requestParameters, requestConfig);
}

/**
 * Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Перенос заказов в следующую отгрузку
 */
function transferOrdersFromShipmentRaw<T>(requestParameters: TransferOrdersFromShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling transferOrdersFromShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling transferOrdersFromShipment.');
    }

    if (requestParameters.transferOrdersFromShipmentRequest === null || requestParameters.transferOrdersFromShipmentRequest === undefined) {
        throw new runtime.RequiredError('transferOrdersFromShipmentRequest','Required parameter requestParameters.transferOrdersFromShipmentRequest was null or undefined when calling transferOrdersFromShipment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TransferOrdersFromShipmentRequestToJSON(requestParameters.transferOrdersFromShipmentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Перенос заказов в следующую отгрузку
*/
export function transferOrdersFromShipment<T>(requestParameters: TransferOrdersFromShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return transferOrdersFromShipmentRaw(requestParameters, requestConfig);
}

