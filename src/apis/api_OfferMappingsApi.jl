# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_offer_mapping_entries_read(handler)
    function get_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["offer_id"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "offer_id", style="", is_explode=false)
        openapi_params["shop_sku"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "shop_sku", style="", is_explode=false)
        openapi_params["mapping_kind"] = OpenAPI.Servers.to_param(OfferMappingKindType, query_params, "mapping_kind", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(Vector{OfferProcessingStatusType}, query_params, "status", style="", is_explode=false)
        openapi_params["availability"] = OpenAPI.Servers.to_param(Vector{OfferAvailabilityStatusType}, query_params, "availability", style="", is_explode=false)
        openapi_params["category_id"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "category_id", style="", is_explode=false)
        openapi_params["vendor"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "vendor", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_mapping_entries_validate(handler)
    function get_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function get_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"]; offer_id=get(openapi_params, "offer_id", nothing), shop_sku=get(openapi_params, "shop_sku", nothing), mapping_kind=get(openapi_params, "mapping_kind", nothing), status=get(openapi_params, "status", nothing), availability=get(openapi_params, "availability", nothing), category_id=get(openapi_params, "category_id", nothing), vendor=get(openapi_params, "vendor", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_suggested_offer_mapping_entries_read(handler)
    function get_suggested_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["GetSuggestedOfferMappingEntriesRequest"] = OpenAPI.Servers.to_param_type(GetSuggestedOfferMappingEntriesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_suggested_offer_mapping_entries_validate(handler)
    function get_suggested_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_suggested_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function get_suggested_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_suggested_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetSuggestedOfferMappingEntriesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_mapping_entries_read(handler)
    function update_offer_mapping_entries_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateOfferMappingEntryRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferMappingEntryRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_mapping_entries_validate(handler)
    function update_offer_mapping_entries_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_mapping_entries_invoke(impl; post_invoke=nothing)
    function update_offer_mapping_entries_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_mapping_entries(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateOfferMappingEntryRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOfferMappingsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries", OpenAPI.Servers.middleware(impl, get_offer_mapping_entries_read, get_offer_mapping_entries_validate, get_offer_mapping_entries_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries/suggestions", OpenAPI.Servers.middleware(impl, get_suggested_offer_mapping_entries_read, get_suggested_offer_mapping_entries_validate, get_suggested_offer_mapping_entries_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offer-mapping-entries/updates", OpenAPI.Servers.middleware(impl, update_offer_mapping_entries_read, update_offer_mapping_entries_validate, update_offer_mapping_entries_invoke; optional_middlewares...))
    return router
end
