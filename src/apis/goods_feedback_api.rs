/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`delete_goods_feedback_comment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteGoodsFeedbackCommentError {
    Status400(models::ApiClientDataErrorResponse),
    Status401(models::ApiUnauthorizedErrorResponse),
    Status403(models::ApiForbiddenErrorResponse),
    Status404(models::ApiNotFoundErrorResponse),
    Status420(models::ApiLimitErrorResponse),
    Status500(models::ApiServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_goods_feedback_comments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGoodsFeedbackCommentsError {
    Status400(models::ApiClientDataErrorResponse),
    Status401(models::ApiUnauthorizedErrorResponse),
    Status403(models::ApiForbiddenErrorResponse),
    Status404(models::ApiNotFoundErrorResponse),
    Status420(models::ApiLimitErrorResponse),
    Status500(models::ApiServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_goods_feedbacks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGoodsFeedbacksError {
    Status400(models::ApiClientDataErrorResponse),
    Status401(models::ApiUnauthorizedErrorResponse),
    Status403(models::ApiForbiddenErrorResponse),
    Status404(models::ApiNotFoundErrorResponse),
    Status420(models::ApiLimitErrorResponse),
    Status500(models::ApiServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`skip_goods_feedbacks_reaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SkipGoodsFeedbacksReactionError {
    Status400(models::ApiClientDataErrorResponse),
    Status401(models::ApiUnauthorizedErrorResponse),
    Status403(models::ApiForbiddenErrorResponse),
    Status404(models::ApiNotFoundErrorResponse),
    Status420(models::ApiLimitErrorResponse),
    Status500(models::ApiServerErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_goods_feedback_comment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateGoodsFeedbackCommentError {
    Status400(models::ApiClientDataErrorResponse),
    Status401(models::ApiUnauthorizedErrorResponse),
    Status403(models::ApiForbiddenErrorResponse),
    Status404(models::ApiNotFoundErrorResponse),
    Status420(models::ApiLimitErrorResponse),
    Status500(models::ApiServerErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
pub async fn delete_goods_feedback_comment(configuration: &configuration::Configuration, business_id: i64, delete_goods_feedback_comment_request: models::DeleteGoodsFeedbackCommentRequest) -> Result<models::EmptyApiResponse, Error<DeleteGoodsFeedbackCommentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/businesses/{businessId}/goods-feedback/comments/delete", local_var_configuration.base_path, businessId=business_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&delete_goods_feedback_comment_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteGoodsFeedbackCommentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
pub async fn get_goods_feedback_comments(configuration: &configuration::Configuration, business_id: i64, get_goods_feedback_comments_request: models::GetGoodsFeedbackCommentsRequest, page_token: Option<&str>, limit: Option<i32>) -> Result<models::GetGoodsFeedbackCommentsResponse, Error<GetGoodsFeedbackCommentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/businesses/{businessId}/goods-feedback/comments", local_var_configuration.base_path, businessId=business_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_token {
        local_var_req_builder = local_var_req_builder.query(&[("page_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&get_goods_feedback_comments_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetGoodsFeedbackCommentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
pub async fn get_goods_feedbacks(configuration: &configuration::Configuration, business_id: i64, page_token: Option<&str>, limit: Option<i32>, get_goods_feedback_request: Option<models::GetGoodsFeedbackRequest>) -> Result<models::GetGoodsFeedbackResponse, Error<GetGoodsFeedbacksError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/businesses/{businessId}/goods-feedback", local_var_configuration.base_path, businessId=business_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_token {
        local_var_req_builder = local_var_req_builder.query(&[("page_token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&get_goods_feedback_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetGoodsFeedbacksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
pub async fn skip_goods_feedbacks_reaction(configuration: &configuration::Configuration, business_id: i64, skip_goods_feedback_reaction_request: models::SkipGoodsFeedbackReactionRequest) -> Result<models::EmptyApiResponse, Error<SkipGoodsFeedbacksReactionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/businesses/{businessId}/goods-feedback/skip-reaction", local_var_configuration.base_path, businessId=business_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&skip_goods_feedback_reaction_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SkipGoodsFeedbacksReactionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
pub async fn update_goods_feedback_comment(configuration: &configuration::Configuration, business_id: i64, update_goods_feedback_comment_request: models::UpdateGoodsFeedbackCommentRequest) -> Result<models::UpdateGoodsFeedbackCommentResponse, Error<UpdateGoodsFeedbackCommentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/businesses/{businessId}/goods-feedback/comments/update", local_var_configuration.base_path, businessId=business_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_goods_feedback_comment_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateGoodsFeedbackCommentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

