# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function delete_goods_feedback_comment_read(handler)
    function delete_goods_feedback_comment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["DeleteGoodsFeedbackCommentRequest"] = OpenAPI.Servers.to_param_type(DeleteGoodsFeedbackCommentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_goods_feedback_comment_validate(handler)
    function delete_goods_feedback_comment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_goods_feedback_comment_invoke(impl; post_invoke=nothing)
    function delete_goods_feedback_comment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_goods_feedback_comment(req::HTTP.Request, openapi_params["businessId"], openapi_params["DeleteGoodsFeedbackCommentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_goods_feedback_comments_read(handler)
    function get_goods_feedback_comments_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetGoodsFeedbackCommentsRequest"] = OpenAPI.Servers.to_param_type(GetGoodsFeedbackCommentsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_goods_feedback_comments_validate(handler)
    function get_goods_feedback_comments_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_goods_feedback_comments_invoke(impl; post_invoke=nothing)
    function get_goods_feedback_comments_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_goods_feedback_comments(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetGoodsFeedbackCommentsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_goods_feedbacks_read(handler)
    function get_goods_feedbacks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetGoodsFeedbackRequest"] = OpenAPI.Servers.to_param_type(GetGoodsFeedbackRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_goods_feedbacks_validate(handler)
    function get_goods_feedbacks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_goods_feedbacks_invoke(impl; post_invoke=nothing)
    function get_goods_feedbacks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_goods_feedbacks(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_goods_feedback_request=get(openapi_params, "GetGoodsFeedbackRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function skip_goods_feedbacks_reaction_read(handler)
    function skip_goods_feedbacks_reaction_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["SkipGoodsFeedbackReactionRequest"] = OpenAPI.Servers.to_param_type(SkipGoodsFeedbackReactionRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function skip_goods_feedbacks_reaction_validate(handler)
    function skip_goods_feedbacks_reaction_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function skip_goods_feedbacks_reaction_invoke(impl; post_invoke=nothing)
    function skip_goods_feedbacks_reaction_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.skip_goods_feedbacks_reaction(req::HTTP.Request, openapi_params["businessId"], openapi_params["SkipGoodsFeedbackReactionRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_goods_feedback_comment_read(handler)
    function update_goods_feedback_comment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateGoodsFeedbackCommentRequest"] = OpenAPI.Servers.to_param_type(UpdateGoodsFeedbackCommentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_goods_feedback_comment_validate(handler)
    function update_goods_feedback_comment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_goods_feedback_comment_invoke(impl; post_invoke=nothing)
    function update_goods_feedback_comment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_goods_feedback_comment(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateGoodsFeedbackCommentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerGoodsFeedbackApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments/delete", OpenAPI.Servers.middleware(impl, delete_goods_feedback_comment_read, delete_goods_feedback_comment_validate, delete_goods_feedback_comment_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments", OpenAPI.Servers.middleware(impl, get_goods_feedback_comments_read, get_goods_feedback_comments_validate, get_goods_feedback_comments_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback", OpenAPI.Servers.middleware(impl, get_goods_feedbacks_read, get_goods_feedbacks_validate, get_goods_feedbacks_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/skip-reaction", OpenAPI.Servers.middleware(impl, skip_goods_feedbacks_reaction_read, skip_goods_feedbacks_reaction_validate, skip_goods_feedbacks_reaction_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/goods-feedback/comments/update", OpenAPI.Servers.middleware(impl, update_goods_feedback_comment_read, update_goods_feedback_comment_validate, update_goods_feedback_comment_invoke; optional_middlewares...))
    return router
end
