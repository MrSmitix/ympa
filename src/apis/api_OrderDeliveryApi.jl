# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OrderDeliveryApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OrderDeliveryApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OrderDeliveryApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_order_buyer_info_OrderDeliveryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOrderBuyerInfoResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_order_buyer_info(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_order_buyer_info_OrderDeliveryApi, "/campaigns/{campaignId}/orders/{orderId}/buyer", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о покупателе — физическом лице

Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)

Return: GetOrderBuyerInfoResponse, OpenAPI.Clients.ApiResponse
"""
function get_order_buyer_info(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_buyer_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_order_buyer_info(_api::OrderDeliveryApi, response_stream::Channel, campaign_id::Int64, order_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_order_buyer_info(_api, campaign_id, order_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_order_delivery_date_OrderDeliveryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_set_order_delivery_date(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, set_order_delivery_date_request::SetOrderDeliveryDateRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_set_order_delivery_date_OrderDeliveryApi, "/campaigns/{campaignId}/orders/{orderId}/delivery/date", ["OAuth", ], set_order_delivery_date_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение даты доставки заказа

Метод изменяет дату доставки заказа в статусе `PROCESSING` или `DELIVERY`. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- set_order_delivery_date_request::SetOrderDeliveryDateRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function set_order_delivery_date(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, set_order_delivery_date_request::SetOrderDeliveryDateRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_order_delivery_date(_api, campaign_id, order_id, set_order_delivery_date_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_order_delivery_date(_api::OrderDeliveryApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, set_order_delivery_date_request::SetOrderDeliveryDateRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_order_delivery_date(_api, campaign_id, order_id, set_order_delivery_date_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_order_delivery_track_code_OrderDeliveryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_set_order_delivery_track_code(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, set_order_delivery_track_code_request::SetOrderDeliveryTrackCodeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_order_delivery_track_code_OrderDeliveryApi, "/campaigns/{campaignId}/orders/{orderId}/delivery/track", ["OAuth", ], set_order_delivery_track_code_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Передача трек‑номера посылки

{% note warning \"Этот запрос только для DBS\" %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- set_order_delivery_track_code_request::SetOrderDeliveryTrackCodeRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function set_order_delivery_track_code(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, set_order_delivery_track_code_request::SetOrderDeliveryTrackCodeRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_order_delivery_track_code(_api, campaign_id, order_id, set_order_delivery_track_code_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_order_delivery_track_code(_api::OrderDeliveryApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, set_order_delivery_track_code_request::SetOrderDeliveryTrackCodeRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_order_delivery_track_code(_api, campaign_id, order_id, set_order_delivery_track_code_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_order_storage_limit_OrderDeliveryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_order_storage_limit(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, update_order_storage_limit_request::UpdateOrderStorageLimitRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_order_storage_limit_OrderDeliveryApi, "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit", ["OAuth", ], update_order_storage_limit_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Продление срока хранения заказа

Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе `PICKUP`. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре `outletStorageLimitDate` запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- update_order_storage_limit_request::UpdateOrderStorageLimitRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_order_storage_limit(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, update_order_storage_limit_request::UpdateOrderStorageLimitRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_order_storage_limit(_api, campaign_id, order_id, update_order_storage_limit_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_order_storage_limit(_api::OrderDeliveryApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, update_order_storage_limit_request::UpdateOrderStorageLimitRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_order_storage_limit(_api, campaign_id, order_id, update_order_storage_limit_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_verify_order_eac_OrderDeliveryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VerifyOrderEacResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_verify_order_eac(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, verify_order_eac_request::VerifyOrderEacRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_verify_order_eac_OrderDeliveryApi, "/campaigns/{campaignId}/orders/{orderId}/verifyEac", ["OAuth", ], verify_order_eac_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Передача кода подтверждения

Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре `delivery`, вложенном в `order` будет возвращаться параметр `eacType` с типом `Enum` — тип кода подтверждения для передачи заказа.  Возможные значения: `MERCHANT_TO_COURIER` — магазин называет код курьеру, `COURIER_TO_MERCHANT` — курьер называет код магазину.  Параметр `eacType` возвращается при статусах заказа `COURIER_FOUND`, `COURIER_ARRIVED_TO_SENDER` и `DELIVERY_SERVICE_UNDELIVERED`. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- verify_order_eac_request::VerifyOrderEacRequest (required)

Return: VerifyOrderEacResponse, OpenAPI.Clients.ApiResponse
"""
function verify_order_eac(_api::OrderDeliveryApi, campaign_id::Int64, order_id::Int64, verify_order_eac_request::VerifyOrderEacRequest; _mediaType=nothing)
    _ctx = _oacinternal_verify_order_eac(_api, campaign_id, order_id, verify_order_eac_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function verify_order_eac(_api::OrderDeliveryApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, verify_order_eac_request::VerifyOrderEacRequest; _mediaType=nothing)
    _ctx = _oacinternal_verify_order_eac(_api, campaign_id, order_id, verify_order_eac_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_order_buyer_info
export set_order_delivery_date
export set_order_delivery_track_code
export update_order_storage_limit
export verify_order_eac
