# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_order_buyer_info_read(handler)
    function get_order_buyer_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_buyer_info_validate(handler)
    function get_order_buyer_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_buyer_info_invoke(impl; post_invoke=nothing)
    function get_order_buyer_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order_buyer_info(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_delivery_date_read(handler)
    function set_order_delivery_date_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["SetOrderDeliveryDateRequest"] = OpenAPI.Servers.to_param_type(SetOrderDeliveryDateRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_delivery_date_validate(handler)
    function set_order_delivery_date_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_delivery_date_invoke(impl; post_invoke=nothing)
    function set_order_delivery_date_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_delivery_date(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["SetOrderDeliveryDateRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_delivery_track_code_read(handler)
    function set_order_delivery_track_code_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["SetOrderDeliveryTrackCodeRequest"] = OpenAPI.Servers.to_param_type(SetOrderDeliveryTrackCodeRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_delivery_track_code_validate(handler)
    function set_order_delivery_track_code_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_delivery_track_code_invoke(impl; post_invoke=nothing)
    function set_order_delivery_track_code_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_delivery_track_code(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["SetOrderDeliveryTrackCodeRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_storage_limit_read(handler)
    function update_order_storage_limit_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["UpdateOrderStorageLimitRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderStorageLimitRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_storage_limit_validate(handler)
    function update_order_storage_limit_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_storage_limit_invoke(impl; post_invoke=nothing)
    function update_order_storage_limit_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_storage_limit(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["UpdateOrderStorageLimitRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function verify_order_eac_read(handler)
    function verify_order_eac_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["VerifyOrderEacRequest"] = OpenAPI.Servers.to_param_type(VerifyOrderEacRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function verify_order_eac_validate(handler)
    function verify_order_eac_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function verify_order_eac_invoke(impl; post_invoke=nothing)
    function verify_order_eac_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.verify_order_eac(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["VerifyOrderEacRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOrderDeliveryApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/buyer", OpenAPI.Servers.middleware(impl, get_order_buyer_info_read, get_order_buyer_info_validate, get_order_buyer_info_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/date", OpenAPI.Servers.middleware(impl, set_order_delivery_date_read, set_order_delivery_date_validate, set_order_delivery_date_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/track", OpenAPI.Servers.middleware(impl, set_order_delivery_track_code_read, set_order_delivery_track_code_validate, set_order_delivery_track_code_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit", OpenAPI.Servers.middleware(impl, update_order_storage_limit_read, update_order_storage_limit_validate, update_order_storage_limit_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/verifyEac", OpenAPI.Servers.middleware(impl, verify_order_eac_read, verify_order_eac_validate, verify_order_eac_invoke; optional_middlewares...))
    return router
end
