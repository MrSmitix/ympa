// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    DeletePromoOffersRequest,
    DeletePromoOffersRequestFromJSON,
    DeletePromoOffersRequestToJSON,
    DeletePromoOffersResponse,
    DeletePromoOffersResponseFromJSON,
    DeletePromoOffersResponseToJSON,
    GetPromoOffersRequest,
    GetPromoOffersRequestFromJSON,
    GetPromoOffersRequestToJSON,
    GetPromoOffersResponse,
    GetPromoOffersResponseFromJSON,
    GetPromoOffersResponseToJSON,
    GetPromosRequest,
    GetPromosRequestFromJSON,
    GetPromosRequestToJSON,
    GetPromosResponse,
    GetPromosResponseFromJSON,
    GetPromosResponseToJSON,
    UpdatePromoOffersRequest,
    UpdatePromoOffersRequestFromJSON,
    UpdatePromoOffersRequestToJSON,
    UpdatePromoOffersResponse,
    UpdatePromoOffersResponseFromJSON,
    UpdatePromoOffersResponseToJSON,
} from '../models';

export interface DeletePromoOffersRequest {
    businessId: number;
    deletePromoOffersRequest: DeletePromoOffersRequest;
}

export interface GetPromoOffersRequest {
    businessId: number;
    getPromoOffersRequest: GetPromoOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetPromosRequest {
    businessId: number;
    getPromosRequest?: GetPromosRequest;
}

export interface UpdatePromoOffersRequest {
    businessId: number;
    updatePromoOffersRequest: UpdatePromoOffersRequest;
}


/**
 * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Удаление товаров из акции
 */
function deletePromoOffersRaw<T>(requestParameters: DeletePromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, DeletePromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deletePromoOffers.');
    }

    if (requestParameters.deletePromoOffersRequest === null || requestParameters.deletePromoOffersRequest === undefined) {
        throw new runtime.RequiredError('deletePromoOffersRequest','Required parameter requestParameters.deletePromoOffersRequest was null or undefined when calling deletePromoOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeletePromoOffersRequestToJSON(requestParameters.deletePromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeletePromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Удаление товаров из акции
*/
export function deletePromoOffers<T>(requestParameters: DeletePromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, DeletePromoOffersResponse>): QueryConfig<T> {
    return deletePromoOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Получение списка товаров, которые участвуют или могут участвовать в акции
 */
function getPromoOffersRaw<T>(requestParameters: GetPromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetPromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getPromoOffers.');
    }

    if (requestParameters.getPromoOffersRequest === null || requestParameters.getPromoOffersRequest === undefined) {
        throw new runtime.RequiredError('getPromoOffersRequest','Required parameter requestParameters.getPromoOffersRequest was null or undefined when calling getPromoOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetPromoOffersRequestToJSON(requestParameters.getPromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Получение списка товаров, которые участвуют или могут участвовать в акции
*/
export function getPromoOffers<T>(requestParameters: GetPromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPromoOffersResponse>): QueryConfig<T> {
    return getPromoOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Получение списка акций
 */
function getPromosRaw<T>(requestParameters: GetPromosRequest, requestConfig: runtime.TypedQueryConfig<T, GetPromosResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getPromos.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetPromosRequestToJSON(requestParameters.getPromosRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPromosResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Получение списка акций
*/
export function getPromos<T>(requestParameters: GetPromosRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPromosResponse>): QueryConfig<T> {
    return getPromosRaw(requestParameters, requestConfig);
}

/**
 * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Добавление товаров в акцию или изменение их цен
 */
function updatePromoOffersRaw<T>(requestParameters: UpdatePromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, UpdatePromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updatePromoOffers.');
    }

    if (requestParameters.updatePromoOffersRequest === null || requestParameters.updatePromoOffersRequest === undefined) {
        throw new runtime.RequiredError('updatePromoOffersRequest','Required parameter requestParameters.updatePromoOffersRequest was null or undefined when calling updatePromoOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdatePromoOffersRequestToJSON(requestParameters.updatePromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdatePromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Добавление товаров в акцию или изменение их цен
*/
export function updatePromoOffers<T>(requestParameters: UpdatePromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdatePromoOffersResponse>): QueryConfig<T> {
    return updatePromoOffersRaw(requestParameters, requestConfig);
}

