# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OffersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OffersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OffersApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_delete_campaign_offers_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteCampaignOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_campaign_offers(_api::OffersApi, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_campaign_offers_OffersApi, "/campaigns/{campaignId}/offers/delete", ["OAuth", ], delete_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление товаров из ассортимента магазина

Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- delete_campaign_offers_request::DeleteCampaignOffersRequest (required)

Return: DeleteCampaignOffersResponse, OpenAPI.Clients.ApiResponse
"""
function delete_campaign_offers(_api::OffersApi, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_campaign_offers(_api, campaign_id, delete_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_campaign_offers(_api::OffersApi, response_stream::Channel, campaign_id::Int64, delete_campaign_offers_request::DeleteCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_campaign_offers(_api, campaign_id, delete_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_all_offers_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetAllOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_all_offers(_api::OffersApi, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_all_offers_OffersApi, "/campaigns/{campaignId}/offers/all", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "feedId", feed_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chunk", chunk; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Все предложения магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64
- chunk::Int64

Return: GetAllOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_all_offers(_api::OffersApi, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_offers(_api, campaign_id; feed_id=feed_id, chunk=chunk, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_all_offers(_api::OffersApi, response_stream::Channel, campaign_id::Int64; feed_id=nothing, chunk=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_offers(_api, campaign_id; feed_id=feed_id, chunk=chunk, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_campaign_offers_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCampaignOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_campaign_offers(_api::OffersApi, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_campaign_offers_OffersApi, "/campaigns/{campaignId}/offers", ["OAuth", ], get_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о товарах, которые размещены в заданном магазине

Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- get_campaign_offers_request::GetCampaignOffersRequest (required)
- page_token::String
- limit::Int64

Return: GetCampaignOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_campaign_offers(_api::OffersApi, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_offers(_api, campaign_id, get_campaign_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_campaign_offers(_api::OffersApi, response_stream::Channel, campaign_id::Int64, get_campaign_offers_request::GetCampaignOffersRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_campaign_offers(_api, campaign_id, get_campaign_offers_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_recommendations_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferRecommendationsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_recommendations(_api::OffersApi, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_offer_recommendations_OffersApi, "/businesses/{businessId}/offers/recommendations", ["OAuth", ], get_offer_recommendations_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Рекомендации Маркета, касающиеся цен

Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- get_offer_recommendations_request::GetOfferRecommendationsRequest (required)
- page_token::String
- limit::Int64

Return: GetOfferRecommendationsResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_recommendations(_api::OffersApi, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_recommendations(_api, business_id, get_offer_recommendations_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_recommendations(_api::OffersApi, response_stream::Channel, business_id::Int64, get_offer_recommendations_request::GetOfferRecommendationsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_recommendations(_api, business_id, get_offer_recommendations_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offers_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOffersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offers(_api::OffersApi, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_offers", :maximum, page, 10000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_offers_OffersApi, "/campaigns/{campaignId}/offers", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "query", query; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "feedId", feed_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "shopCategoryId", shop_category_id; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "currency", currency; style="", is_explode=false)  # type CurrencyType
    OpenAPI.Clients.set_param(_ctx.query, "matched", matched; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "page", page; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Предложения магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 

Params:
- campaign_id::Int64 (required)
- query::String
- feed_id::Int64
- shop_category_id::String
- currency::CurrencyType
- matched::Bool
- page::Int64
- page_size::Int64

Return: GetOffersResponse, OpenAPI.Clients.ApiResponse
"""
function get_offers(_api::OffersApi, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offers(_api, campaign_id; query=query, feed_id=feed_id, shop_category_id=shop_category_id, currency=currency, matched=matched, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offers(_api::OffersApi, response_stream::Channel, campaign_id::Int64; query=nothing, feed_id=nothing, shop_category_id=nothing, currency=nothing, matched=nothing, page=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offers(_api, campaign_id; query=query, feed_id=feed_id, shop_category_id=shop_category_id, currency=currency, matched=matched, page=page, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_campaign_offers_OffersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_campaign_offers(_api::OffersApi, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_campaign_offers_OffersApi, "/campaigns/{campaignId}/offers/update", ["OAuth", ], update_campaign_offers_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение условий продажи товаров в магазине

Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_campaign_offers_request::UpdateCampaignOffersRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_campaign_offers(_api::OffersApi, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_campaign_offers(_api, campaign_id, update_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_campaign_offers(_api::OffersApi, response_stream::Channel, campaign_id::Int64, update_campaign_offers_request::UpdateCampaignOffersRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_campaign_offers(_api, campaign_id, update_campaign_offers_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_campaign_offers
export get_all_offers
export get_campaign_offers
export get_offer_recommendations
export get_offers
export update_campaign_offers
