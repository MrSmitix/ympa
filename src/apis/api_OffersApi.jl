# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function delete_campaign_offers_read(handler)
    function delete_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["DeleteCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(DeleteCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_campaign_offers_validate(handler)
    function delete_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_campaign_offers_invoke(impl; post_invoke=nothing)
    function delete_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["DeleteCampaignOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_all_offers_read(handler)
    function get_all_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, query_params, "feedId", style="", is_explode=false)
        openapi_params["chunk"] = OpenAPI.Servers.to_param(Int64, query_params, "chunk", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_all_offers_validate(handler)
    function get_all_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_all_offers_invoke(impl; post_invoke=nothing)
    function get_all_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_all_offers(req::HTTP.Request, openapi_params["campaignId"]; feed_id=get(openapi_params, "feedId", nothing), chunk=get(openapi_params, "chunk", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_campaign_offers_read(handler)
    function get_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(GetCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_campaign_offers_validate(handler)
    function get_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_campaign_offers_invoke(impl; post_invoke=nothing)
    function get_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["GetCampaignOffersRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_recommendations_read(handler)
    function get_offer_recommendations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferRecommendationsRequest"] = OpenAPI.Servers.to_param_type(GetOfferRecommendationsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_recommendations_validate(handler)
    function get_offer_recommendations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_recommendations_invoke(impl; post_invoke=nothing)
    function get_offer_recommendations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_recommendations(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetOfferRecommendationsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offers_read(handler)
    function get_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["query"] = OpenAPI.Servers.to_param(String, query_params, "query", style="", is_explode=false)
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, query_params, "feedId", style="", is_explode=false)
        openapi_params["shopCategoryId"] = OpenAPI.Servers.to_param(String, query_params, "shopCategoryId", style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["matched"] = OpenAPI.Servers.to_param(Bool, query_params, "matched", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offers_validate(handler)
    function get_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "get_offers", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_offers_invoke(impl; post_invoke=nothing)
    function get_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offers(req::HTTP.Request, openapi_params["campaignId"]; query=get(openapi_params, "query", nothing), feed_id=get(openapi_params, "feedId", nothing), shop_category_id=get(openapi_params, "shopCategoryId", nothing), currency=get(openapi_params, "currency", nothing), matched=get(openapi_params, "matched", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_campaign_offers_read(handler)
    function update_campaign_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateCampaignOffersRequest"] = OpenAPI.Servers.to_param_type(UpdateCampaignOffersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_campaign_offers_validate(handler)
    function update_campaign_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_campaign_offers_invoke(impl; post_invoke=nothing)
    function update_campaign_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_campaign_offers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateCampaignOffersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOffersApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/delete", OpenAPI.Servers.middleware(impl, delete_campaign_offers_read, delete_campaign_offers_validate, delete_campaign_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offers/all", OpenAPI.Servers.middleware(impl, get_all_offers_read, get_all_offers_validate, get_all_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers", OpenAPI.Servers.middleware(impl, get_campaign_offers_read, get_campaign_offers_validate, get_campaign_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offers/recommendations", OpenAPI.Servers.middleware(impl, get_offer_recommendations_read, get_offer_recommendations_validate, get_offer_recommendations_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/offers", OpenAPI.Servers.middleware(impl, get_offers_read, get_offers_validate, get_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/update", OpenAPI.Servers.middleware(impl, update_campaign_offers_read, update_campaign_offers_validate, update_campaign_offers_invoke; optional_middlewares...))
    return router
end
