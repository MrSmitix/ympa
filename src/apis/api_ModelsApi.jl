# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_model_read(handler)
    function get_model_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["modelId"] = OpenAPI.Servers.to_param(Int64, path_params, "modelId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", required=true, style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_model_validate(handler)
    function get_model_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("modelId", "get_model", :minimum, openapi_params["modelId"], 0, true)
        
        return handler(req)
    end
end

function get_model_invoke(impl; post_invoke=nothing)
    function get_model_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_model(req::HTTP.Request, openapi_params["modelId"], openapi_params["regionId"]; currency=get(openapi_params, "currency", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_model_offers_read(handler)
    function get_model_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["modelId"] = OpenAPI.Servers.to_param(Int64, path_params, "modelId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", required=true, style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["orderByPrice"] = OpenAPI.Servers.to_param(SortOrderType, query_params, "orderByPrice", style="", is_explode=false)
        openapi_params["count"] = OpenAPI.Servers.to_param(Int64, query_params, "count", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_model_offers_validate(handler)
    function get_model_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("modelId", "get_model_offers", :minimum, openapi_params["modelId"], 0, true)
        
        OpenAPI.validate_param("page", "get_model_offers", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_model_offers_invoke(impl; post_invoke=nothing)
    function get_model_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_model_offers(req::HTTP.Request, openapi_params["modelId"], openapi_params["regionId"]; currency=get(openapi_params, "currency", nothing), order_by_price=get(openapi_params, "orderByPrice", nothing), count=get(openapi_params, "count", nothing), page=get(openapi_params, "page", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_models_read(handler)
    function get_models_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", required=true, style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["GetModelsRequest"] = OpenAPI.Servers.to_param_type(GetModelsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_models_validate(handler)
    function get_models_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_models_invoke(impl; post_invoke=nothing)
    function get_models_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_models(req::HTTP.Request, openapi_params["regionId"], openapi_params["GetModelsRequest"]; currency=get(openapi_params, "currency", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_models_offers_read(handler)
    function get_models_offers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", required=true, style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["orderByPrice"] = OpenAPI.Servers.to_param(SortOrderType, query_params, "orderByPrice", style="", is_explode=false)
        openapi_params["GetModelsRequest"] = OpenAPI.Servers.to_param_type(GetModelsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_models_offers_validate(handler)
    function get_models_offers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_models_offers_invoke(impl; post_invoke=nothing)
    function get_models_offers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_models_offers(req::HTTP.Request, openapi_params["regionId"], openapi_params["GetModelsRequest"]; currency=get(openapi_params, "currency", nothing), order_by_price=get(openapi_params, "orderByPrice", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_models_read(handler)
    function search_models_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["query"] = OpenAPI.Servers.to_param(String, query_params, "query", required=true, style="", is_explode=false)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", required=true, style="", is_explode=false)
        openapi_params["currency"] = OpenAPI.Servers.to_param(CurrencyType, query_params, "currency", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_models_validate(handler)
    function search_models_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "search_models", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function search_models_invoke(impl; post_invoke=nothing)
    function search_models_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_models(req::HTTP.Request, openapi_params["query"], openapi_params["regionId"]; currency=get(openapi_params, "currency", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerModelsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/models/{modelId}", OpenAPI.Servers.middleware(impl, get_model_read, get_model_validate, get_model_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/models/{modelId}/offers", OpenAPI.Servers.middleware(impl, get_model_offers_read, get_model_offers_validate, get_model_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/models", OpenAPI.Servers.middleware(impl, get_models_read, get_models_validate, get_models_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/models/offers", OpenAPI.Servers.middleware(impl, get_models_offers_read, get_models_offers_validate, get_models_offers_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/models", OpenAPI.Servers.middleware(impl, search_models_read, search_models_validate, search_models_invoke; optional_middlewares...))
    return router
end
