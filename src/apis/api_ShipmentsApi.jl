# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function confirm_shipment_read(handler)
    function confirm_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["ConfirmShipmentRequest"] = OpenAPI.Servers.to_param_type(ConfirmShipmentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function confirm_shipment_validate(handler)
    function confirm_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function confirm_shipment_invoke(impl; post_invoke=nothing)
    function confirm_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.confirm_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; confirm_shipment_request=get(openapi_params, "ConfirmShipmentRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_act_read(handler)
    function download_shipment_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_act_validate(handler)
    function download_shipment_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_act_invoke(impl; post_invoke=nothing)
    function download_shipment_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_discrepancy_act_read(handler)
    function download_shipment_discrepancy_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_discrepancy_act_validate(handler)
    function download_shipment_discrepancy_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_discrepancy_act_invoke(impl; post_invoke=nothing)
    function download_shipment_discrepancy_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_discrepancy_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_inbound_act_read(handler)
    function download_shipment_inbound_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_inbound_act_validate(handler)
    function download_shipment_inbound_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_inbound_act_invoke(impl; post_invoke=nothing)
    function download_shipment_inbound_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_inbound_act(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_pallet_labels_read(handler)
    function download_shipment_pallet_labels_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["format"] = OpenAPI.Servers.to_param(ShipmentPalletLabelPageFormatType, query_params, "format", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_pallet_labels_validate(handler)
    function download_shipment_pallet_labels_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_pallet_labels_invoke(impl; post_invoke=nothing)
    function download_shipment_pallet_labels_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_pallet_labels(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; format=get(openapi_params, "format", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_reception_transfer_act_read(handler)
    function download_shipment_reception_transfer_act_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["warehouse_id"] = OpenAPI.Servers.to_param(Int64, query_params, "warehouse_id", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_reception_transfer_act_validate(handler)
    function download_shipment_reception_transfer_act_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_reception_transfer_act_invoke(impl; post_invoke=nothing)
    function download_shipment_reception_transfer_act_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_reception_transfer_act(req::HTTP.Request, openapi_params["campaignId"]; warehouse_id=get(openapi_params, "warehouse_id", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function download_shipment_transportation_waybill_read(handler)
    function download_shipment_transportation_waybill_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function download_shipment_transportation_waybill_validate(handler)
    function download_shipment_transportation_waybill_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function download_shipment_transportation_waybill_invoke(impl; post_invoke=nothing)
    function download_shipment_transportation_waybill_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.download_shipment_transportation_waybill(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_shipment_read(handler)
    function get_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["cancelledOrders"] = OpenAPI.Servers.to_param(Bool, query_params, "cancelledOrders", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_shipment_validate(handler)
    function get_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_shipment_invoke(impl; post_invoke=nothing)
    function get_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"]; cancelled_orders=get(openapi_params, "cancelledOrders", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_shipment_orders_info_read(handler)
    function get_shipment_orders_info_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_shipment_orders_info_validate(handler)
    function get_shipment_orders_info_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_shipment_orders_info_invoke(impl; post_invoke=nothing)
    function get_shipment_orders_info_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_shipment_orders_info(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_shipments_read(handler)
    function search_shipments_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["SearchShipmentsRequest"] = OpenAPI.Servers.to_param_type(SearchShipmentsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_shipments_validate(handler)
    function search_shipments_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_shipments_invoke(impl; post_invoke=nothing)
    function search_shipments_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_shipments(req::HTTP.Request, openapi_params["campaignId"], openapi_params["SearchShipmentsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_shipment_pallets_count_read(handler)
    function set_shipment_pallets_count_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["SetShipmentPalletsCountRequest"] = OpenAPI.Servers.to_param_type(SetShipmentPalletsCountRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_shipment_pallets_count_validate(handler)
    function set_shipment_pallets_count_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_shipment_pallets_count_invoke(impl; post_invoke=nothing)
    function set_shipment_pallets_count_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_shipment_pallets_count(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"], openapi_params["SetShipmentPalletsCountRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function transfer_orders_from_shipment_read(handler)
    function transfer_orders_from_shipment_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["TransferOrdersFromShipmentRequest"] = OpenAPI.Servers.to_param_type(TransferOrdersFromShipmentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function transfer_orders_from_shipment_validate(handler)
    function transfer_orders_from_shipment_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function transfer_orders_from_shipment_invoke(impl; post_invoke=nothing)
    function transfer_orders_from_shipment_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.transfer_orders_from_shipment(req::HTTP.Request, openapi_params["campaignId"], openapi_params["shipmentId"], openapi_params["TransferOrdersFromShipmentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerShipmentsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm", OpenAPI.Servers.middleware(impl, confirm_shipment_read, confirm_shipment_validate, confirm_shipment_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act", OpenAPI.Servers.middleware(impl, download_shipment_act_read, download_shipment_act_validate, download_shipment_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act", OpenAPI.Servers.middleware(impl, download_shipment_discrepancy_act_read, download_shipment_discrepancy_act_validate, download_shipment_discrepancy_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act", OpenAPI.Servers.middleware(impl, download_shipment_inbound_act_read, download_shipment_inbound_act_validate, download_shipment_inbound_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels", OpenAPI.Servers.middleware(impl, download_shipment_pallet_labels_read, download_shipment_pallet_labels_validate, download_shipment_pallet_labels_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/shipments/reception-transfer-act", OpenAPI.Servers.middleware(impl, download_shipment_reception_transfer_act_read, download_shipment_reception_transfer_act_validate, download_shipment_reception_transfer_act_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill", OpenAPI.Servers.middleware(impl, download_shipment_transportation_waybill_read, download_shipment_transportation_waybill_validate, download_shipment_transportation_waybill_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}", OpenAPI.Servers.middleware(impl, get_shipment_read, get_shipment_validate, get_shipment_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info", OpenAPI.Servers.middleware(impl, get_shipment_orders_info_read, get_shipment_orders_info_validate, get_shipment_orders_info_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/first-mile/shipments", OpenAPI.Servers.middleware(impl, search_shipments_read, search_shipments_validate, search_shipments_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets", OpenAPI.Servers.middleware(impl, set_shipment_pallets_count_read, set_shipment_pallets_count_validate, set_shipment_pallets_count_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer", OpenAPI.Servers.middleware(impl, transfer_orders_from_shipment_read, transfer_orders_from_shipment_validate, transfer_orders_from_shipment_invoke; optional_middlewares...))
    return router
end
