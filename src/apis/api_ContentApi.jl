# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_category_content_parameters_read(handler)
    function get_category_content_parameters_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["categoryId"] = OpenAPI.Servers.to_param(Int64, path_params, "categoryId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_category_content_parameters_validate(handler)
    function get_category_content_parameters_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_category_content_parameters_invoke(impl; post_invoke=nothing)
    function get_category_content_parameters_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_category_content_parameters(req::HTTP.Request, openapi_params["categoryId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_offer_cards_content_status_read(handler)
    function get_offer_cards_content_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetOfferCardsContentStatusRequest"] = OpenAPI.Servers.to_param_type(GetOfferCardsContentStatusRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_offer_cards_content_status_validate(handler)
    function get_offer_cards_content_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_offer_cards_content_status_invoke(impl; post_invoke=nothing)
    function get_offer_cards_content_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_offer_cards_content_status(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_offer_cards_content_status_request=get(openapi_params, "GetOfferCardsContentStatusRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_offer_content_read(handler)
    function update_offer_content_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["UpdateOfferContentRequest"] = OpenAPI.Servers.to_param_type(UpdateOfferContentRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_offer_content_validate(handler)
    function update_offer_content_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_offer_content_invoke(impl; post_invoke=nothing)
    function update_offer_content_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_offer_content(req::HTTP.Request, openapi_params["businessId"], openapi_params["UpdateOfferContentRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerContentApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/category/{categoryId}/parameters", OpenAPI.Servers.middleware(impl, get_category_content_parameters_read, get_category_content_parameters_validate, get_category_content_parameters_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-cards", OpenAPI.Servers.middleware(impl, get_offer_cards_content_status_read, get_offer_cards_content_status_validate, get_offer_cards_content_status_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/offer-cards/update", OpenAPI.Servers.middleware(impl, update_offer_content_read, update_offer_content_validate, update_offer_content_invoke; optional_middlewares...))
    return router
end
