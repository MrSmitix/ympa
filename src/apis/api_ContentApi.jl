# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ContentApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ContentApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ContentApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_category_content_parameters_ContentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetCategoryContentParametersResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_category_content_parameters(_api::ContentApi, category_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_category_content_parameters_ContentApi, "/category/{categoryId}/parameters", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "categoryId", category_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Списки характеристик товаров по категориям

Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 

Params:
- category_id::Int64 (required)

Return: GetCategoryContentParametersResponse, OpenAPI.Clients.ApiResponse
"""
function get_category_content_parameters(_api::ContentApi, category_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category_content_parameters(_api, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_category_content_parameters(_api::ContentApi, response_stream::Channel, category_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_category_content_parameters(_api, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_offer_cards_content_status_ContentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOfferCardsContentStatusResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_offer_cards_content_status(_api::ContentApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_offer_cards_content_status_ContentApi, "/businesses/{businessId}/offer-cards", ["OAuth", ], get_offer_cards_content_status_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение информации о заполненности карточек магазина

Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 

Params:
- business_id::Int64 (required)
- page_token::String
- limit::Int64
- get_offer_cards_content_status_request::GetOfferCardsContentStatusRequest

Return: GetOfferCardsContentStatusResponse, OpenAPI.Clients.ApiResponse
"""
function get_offer_cards_content_status(_api::ContentApi, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_cards_content_status(_api, business_id; page_token=page_token, limit=limit, get_offer_cards_content_status_request=get_offer_cards_content_status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_offer_cards_content_status(_api::ContentApi, response_stream::Channel, business_id::Int64; page_token=nothing, limit=nothing, get_offer_cards_content_status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_offer_cards_content_status(_api, business_id; page_token=page_token, limit=limit, get_offer_cards_content_status_request=get_offer_cards_content_status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_offer_content_ContentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpdateOfferContentResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_offer_content(_api::ContentApi, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_offer_content_ContentApi, "/businesses/{businessId}/offer-cards/update", ["OAuth", ], update_offer_content_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Редактирование категорийных характеристик товара

Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 

Params:
- business_id::Int64 (required)
- update_offer_content_request::UpdateOfferContentRequest (required)

Return: UpdateOfferContentResponse, OpenAPI.Clients.ApiResponse
"""
function update_offer_content(_api::ContentApi, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_content(_api, business_id, update_offer_content_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_offer_content(_api::ContentApi, response_stream::Channel, business_id::Int64, update_offer_content_request::UpdateOfferContentRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_offer_content(_api, business_id, update_offer_content_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_category_content_parameters
export get_offer_cards_content_status
export update_offer_content
