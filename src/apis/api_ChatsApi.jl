# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ChatsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ChatsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ChatsApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_create_chat_ChatsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreateChatResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_create_chat(_api::ChatsApi, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_chat_ChatsApi, "/businesses/{businessId}/chats/new", ["OAuth", ], create_chat_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Создание нового чата с покупателем

Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- create_chat_request::CreateChatRequest (required)

Return: CreateChatResponse, OpenAPI.Clients.ApiResponse
"""
function create_chat(_api::ChatsApi, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_chat(_api, business_id, create_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_chat(_api::ChatsApi, response_stream::Channel, business_id::Int64, create_chat_request::CreateChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_chat(_api, business_id, create_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_chat_history_ChatsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetChatHistoryResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_chat_history(_api::ChatsApi, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_chat_history_ChatsApi, "/businesses/{businessId}/chats/history", ["OAuth", ], get_chat_history_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение истории сообщений в чате

Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- get_chat_history_request::GetChatHistoryRequest (required)
- page_token::String
- limit::Int64

Return: GetChatHistoryResponse, OpenAPI.Clients.ApiResponse
"""
function get_chat_history(_api::ChatsApi, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chat_history(_api, business_id, chat_id, get_chat_history_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_chat_history(_api::ChatsApi, response_stream::Channel, business_id::Int64, chat_id::Int64, get_chat_history_request::GetChatHistoryRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chat_history(_api, business_id, chat_id, get_chat_history_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_chats_ChatsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetChatsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_chats(_api::ChatsApi, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_chats_ChatsApi, "/businesses/{businessId}/chats", ["OAuth", ], get_chats_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Получение доступных чатов

Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- get_chats_request::GetChatsRequest (required)
- page_token::String
- limit::Int64

Return: GetChatsResponse, OpenAPI.Clients.ApiResponse
"""
function get_chats(_api::ChatsApi, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chats(_api, business_id, get_chats_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_chats(_api::ChatsApi, response_stream::Channel, business_id::Int64, get_chats_request::GetChatsRequest; page_token=nothing, limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_chats(_api, business_id, get_chats_request; page_token=page_token, limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_file_to_chat_ChatsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_send_file_to_chat(_api::ChatsApi, business_id::Int64, chat_id::Int64, file::Vector{UInt8}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_file_to_chat_ChatsApi, "/businesses/{businessId}/chats/file/send", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отправка файла в чат

Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- file::String (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function send_file_to_chat(_api::ChatsApi, business_id::Int64, chat_id::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_send_file_to_chat(_api, business_id, chat_id, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_file_to_chat(_api::ChatsApi, response_stream::Channel, business_id::Int64, chat_id::Int64, file::String; _mediaType=nothing)
    _ctx = _oacinternal_send_file_to_chat(_api, business_id, chat_id, file; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_message_to_chat_ChatsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_send_message_to_chat(_api::ChatsApi, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_message_to_chat_ChatsApi, "/businesses/{businessId}/chats/message", ["OAuth", ], send_message_to_chat_request)
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "chatId", chat_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Отправка сообщения в чат

Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)
- chat_id::Int64 (required)
- send_message_to_chat_request::SendMessageToChatRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function send_message_to_chat(_api::ChatsApi, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_message_to_chat(_api, business_id, chat_id, send_message_to_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_message_to_chat(_api::ChatsApi, response_stream::Channel, business_id::Int64, chat_id::Int64, send_message_to_chat_request::SendMessageToChatRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_message_to_chat(_api, business_id, chat_id, send_message_to_chat_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_chat
export get_chat_history
export get_chats
export send_file_to_chat
export send_message_to_chat
