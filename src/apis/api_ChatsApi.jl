# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function create_chat_read(handler)
    function create_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["CreateChatRequest"] = OpenAPI.Servers.to_param_type(CreateChatRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_chat_validate(handler)
    function create_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_chat_invoke(impl; post_invoke=nothing)
    function create_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["CreateChatRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_chat_history_read(handler)
    function get_chat_history_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetChatHistoryRequest"] = OpenAPI.Servers.to_param_type(GetChatHistoryRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_chat_history_validate(handler)
    function get_chat_history_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_chat_history_invoke(impl; post_invoke=nothing)
    function get_chat_history_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_chat_history(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["GetChatHistoryRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_chats_read(handler)
    function get_chats_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetChatsRequest"] = OpenAPI.Servers.to_param_type(GetChatsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_chats_validate(handler)
    function get_chats_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_chats_invoke(impl; post_invoke=nothing)
    function get_chats_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_chats(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetChatsRequest"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function send_file_to_chat_read(handler)
    function send_file_to_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        ismultipart = true
        form_data = ismultipart ? HTTP.parse_multipart_form(req) : HTTP.queryparams(String(copy(req.body)))
        openapi_params["file"] = OpenAPI.Servers.to_param(Vector{UInt8}, form_data, "file"; multipart=ismultipart, isfile=true, required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function send_file_to_chat_validate(handler)
    function send_file_to_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function send_file_to_chat_invoke(impl; post_invoke=nothing)
    function send_file_to_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.send_file_to_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["file"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function send_message_to_chat_read(handler)
    function send_message_to_chat_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["chatId"] = OpenAPI.Servers.to_param(Int64, query_params, "chatId", required=true, style="", is_explode=false)
        openapi_params["SendMessageToChatRequest"] = OpenAPI.Servers.to_param_type(SendMessageToChatRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function send_message_to_chat_validate(handler)
    function send_message_to_chat_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function send_message_to_chat_invoke(impl; post_invoke=nothing)
    function send_message_to_chat_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.send_message_to_chat(req::HTTP.Request, openapi_params["businessId"], openapi_params["chatId"], openapi_params["SendMessageToChatRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerChatsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/new", OpenAPI.Servers.middleware(impl, create_chat_read, create_chat_validate, create_chat_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/history", OpenAPI.Servers.middleware(impl, get_chat_history_read, get_chat_history_validate, get_chat_history_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats", OpenAPI.Servers.middleware(impl, get_chats_read, get_chats_validate, get_chats_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/file/send", OpenAPI.Servers.middleware(impl, send_file_to_chat_read, send_file_to_chat_validate, send_file_to_chat_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/chats/message", OpenAPI.Servers.middleware(impl, send_message_to_chat_read, send_message_to_chat_validate, send_message_to_chat_invoke; optional_middlewares...))
    return router
end
