# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OutletsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OutletsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OutletsApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_create_outlet_OutletsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreateOutletResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_create_outlet(_api::OutletsApi, campaign_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_outlet_OutletsApi, "/campaigns/{campaignId}/outlets", ["OAuth", ], change_outlet_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Создание точки продаж

Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- change_outlet_request::ChangeOutletRequest (required)

Return: CreateOutletResponse, OpenAPI.Clients.ApiResponse
"""
function create_outlet(_api::OutletsApi, campaign_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_outlet(_api, campaign_id, change_outlet_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_outlet(_api::OutletsApi, response_stream::Channel, campaign_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_outlet(_api, campaign_id, change_outlet_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_outlet_OutletsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_delete_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_outlet_OutletsApi, "/campaigns/{campaignId}/outlets/{outletId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "outletId", outlet_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Удаление точки продаж

Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- outlet_id::Int64 (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function delete_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_outlet(_api, campaign_id, outlet_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_outlet(_api::OutletsApi, response_stream::Channel, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_delete_outlet(_api, campaign_id, outlet_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_outlet_OutletsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOutletResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_outlet_OutletsApi, "/campaigns/{campaignId}/outlets/{outletId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "outletId", outlet_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация об одной точке продаж

Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- outlet_id::Int64 (required)

Return: GetOutletResponse, OpenAPI.Clients.ApiResponse
"""
function get_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_outlet(_api, campaign_id, outlet_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_outlet(_api::OutletsApi, response_stream::Channel, campaign_id::Int64, outlet_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_outlet(_api, campaign_id, outlet_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_outlets_OutletsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetOutletsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_outlets(_api::OutletsApi, campaign_id::Int64; page_token=nothing, region_id=nothing, shop_outlet_code=nothing, region_id2=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_outlets_OutletsApi, "/campaigns/{campaignId}/outlets", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "region_id", region_id; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "shop_outlet_code", shop_outlet_code; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "regionId", region_id2; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о нескольких точках продаж

Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- region_id::Int64
- shop_outlet_code::String
- region_id2::Int64

Return: GetOutletsResponse, OpenAPI.Clients.ApiResponse
"""
function get_outlets(_api::OutletsApi, campaign_id::Int64; page_token=nothing, region_id=nothing, shop_outlet_code=nothing, region_id2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outlets(_api, campaign_id; page_token=page_token, region_id=region_id, shop_outlet_code=shop_outlet_code, region_id2=region_id2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_outlets(_api::OutletsApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, region_id=nothing, shop_outlet_code=nothing, region_id2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outlets(_api, campaign_id; page_token=page_token, region_id=region_id, shop_outlet_code=shop_outlet_code, region_id2=region_id2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_outlet_OutletsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_outlet_OutletsApi, "/campaigns/{campaignId}/outlets/{outletId}", ["OAuth", ], change_outlet_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "outletId", outlet_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение информации о точке продаж

Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- outlet_id::Int64 (required)
- change_outlet_request::ChangeOutletRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_outlet(_api::OutletsApi, campaign_id::Int64, outlet_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outlet(_api, campaign_id, outlet_id, change_outlet_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_outlet(_api::OutletsApi, response_stream::Channel, campaign_id::Int64, outlet_id::Int64, change_outlet_request::ChangeOutletRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outlet(_api, campaign_id, outlet_id, change_outlet_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_outlet
export delete_outlet
export get_outlet
export get_outlets
export update_outlet
