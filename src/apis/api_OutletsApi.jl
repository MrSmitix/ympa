# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function create_outlet_read(handler)
    function create_outlet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["ChangeOutletRequest"] = OpenAPI.Servers.to_param_type(ChangeOutletRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function create_outlet_validate(handler)
    function create_outlet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function create_outlet_invoke(impl; post_invoke=nothing)
    function create_outlet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.create_outlet(req::HTTP.Request, openapi_params["campaignId"], openapi_params["ChangeOutletRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_outlet_read(handler)
    function delete_outlet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["outletId"] = OpenAPI.Servers.to_param(Int64, path_params, "outletId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_outlet_validate(handler)
    function delete_outlet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function delete_outlet_invoke(impl; post_invoke=nothing)
    function delete_outlet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_outlet(req::HTTP.Request, openapi_params["campaignId"], openapi_params["outletId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_outlet_read(handler)
    function get_outlet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["outletId"] = OpenAPI.Servers.to_param(Int64, path_params, "outletId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_outlet_validate(handler)
    function get_outlet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_outlet_invoke(impl; post_invoke=nothing)
    function get_outlet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_outlet(req::HTTP.Request, openapi_params["campaignId"], openapi_params["outletId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_outlets_read(handler)
    function get_outlets_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["region_id"] = OpenAPI.Servers.to_param(Int64, query_params, "region_id", style="", is_explode=false)
        openapi_params["shop_outlet_code"] = OpenAPI.Servers.to_param(String, query_params, "shop_outlet_code", style="", is_explode=false)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, query_params, "regionId", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_outlets_validate(handler)
    function get_outlets_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_outlets_invoke(impl; post_invoke=nothing)
    function get_outlets_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_outlets(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), region_id=get(openapi_params, "region_id", nothing), shop_outlet_code=get(openapi_params, "shop_outlet_code", nothing), region_id2=get(openapi_params, "regionId", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_outlet_read(handler)
    function update_outlet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["outletId"] = OpenAPI.Servers.to_param(Int64, path_params, "outletId", required=true, )
        openapi_params["ChangeOutletRequest"] = OpenAPI.Servers.to_param_type(ChangeOutletRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_outlet_validate(handler)
    function update_outlet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_outlet_invoke(impl; post_invoke=nothing)
    function update_outlet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_outlet(req::HTTP.Request, openapi_params["campaignId"], openapi_params["outletId"], openapi_params["ChangeOutletRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOutletsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/outlets", OpenAPI.Servers.middleware(impl, create_outlet_read, create_outlet_validate, create_outlet_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/campaigns/{campaignId}/outlets/{outletId}", OpenAPI.Servers.middleware(impl, delete_outlet_read, delete_outlet_validate, delete_outlet_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/outlets/{outletId}", OpenAPI.Servers.middleware(impl, get_outlet_read, get_outlet_validate, get_outlet_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/outlets", OpenAPI.Servers.middleware(impl, get_outlets_read, get_outlets_validate, get_outlets_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/outlets/{outletId}", OpenAPI.Servers.middleware(impl, update_outlet_read, update_outlet_validate, update_outlet_invoke; optional_middlewares...))
    return router
end
