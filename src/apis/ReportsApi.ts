// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    GenerateBoostConsolidatedRequest,
    GenerateBoostConsolidatedRequestFromJSON,
    GenerateBoostConsolidatedRequestToJSON,
    GenerateCompetitorsPositionReportRequest,
    GenerateCompetitorsPositionReportRequestFromJSON,
    GenerateCompetitorsPositionReportRequestToJSON,
    GenerateGoodsFeedbackRequest,
    GenerateGoodsFeedbackRequestFromJSON,
    GenerateGoodsFeedbackRequestToJSON,
    GenerateGoodsMovementReportRequest,
    GenerateGoodsMovementReportRequestFromJSON,
    GenerateGoodsMovementReportRequestToJSON,
    GenerateGoodsRealizationReportRequest,
    GenerateGoodsRealizationReportRequestFromJSON,
    GenerateGoodsRealizationReportRequestToJSON,
    GenerateGoodsTurnoverRequest,
    GenerateGoodsTurnoverRequestFromJSON,
    GenerateGoodsTurnoverRequestToJSON,
    GenerateMassOrderLabelsRequest,
    GenerateMassOrderLabelsRequestFromJSON,
    GenerateMassOrderLabelsRequestToJSON,
    GeneratePricesReportRequest,
    GeneratePricesReportRequestFromJSON,
    GeneratePricesReportRequestToJSON,
    GenerateReportResponse,
    GenerateReportResponseFromJSON,
    GenerateReportResponseToJSON,
    GenerateShelfsStatisticsRequest,
    GenerateShelfsStatisticsRequestFromJSON,
    GenerateShelfsStatisticsRequestToJSON,
    GenerateShipmentListDocumentReportRequest,
    GenerateShipmentListDocumentReportRequestFromJSON,
    GenerateShipmentListDocumentReportRequestToJSON,
    GenerateShowsSalesReportRequest,
    GenerateShowsSalesReportRequestFromJSON,
    GenerateShowsSalesReportRequestToJSON,
    GenerateStocksOnWarehousesReportRequest,
    GenerateStocksOnWarehousesReportRequestFromJSON,
    GenerateStocksOnWarehousesReportRequestToJSON,
    GenerateUnitedMarketplaceServicesReportRequest,
    GenerateUnitedMarketplaceServicesReportRequestFromJSON,
    GenerateUnitedMarketplaceServicesReportRequestToJSON,
    GenerateUnitedNettingReportRequest,
    GenerateUnitedNettingReportRequestFromJSON,
    GenerateUnitedNettingReportRequestToJSON,
    GenerateUnitedOrdersRequest,
    GenerateUnitedOrdersRequestFromJSON,
    GenerateUnitedOrdersRequestToJSON,
    GetReportInfoResponse,
    GetReportInfoResponseFromJSON,
    GetReportInfoResponseToJSON,
    PageFormatType,
    PageFormatTypeFromJSON,
    PageFormatTypeToJSON,
    ReportFormatType,
    ReportFormatTypeFromJSON,
    ReportFormatTypeToJSON,
} from '../models';

export interface GenerateBoostConsolidatedReportRequest {
    generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest;
    format?: ReportFormatType;
}

export interface GenerateCompetitorsPositionReportRequest {
    generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsFeedbackReportRequest {
    generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsMovementReportRequest {
    generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsRealizationReportRequest {
    generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsTurnoverReportRequest {
    generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest;
    format?: ReportFormatType;
}

export interface GenerateMassOrderLabelsReportRequest {
    generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest;
    format?: PageFormatType;
}

export interface GeneratePricesReportRequest {
    generatePricesReportRequest: GeneratePricesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateShelfsStatisticsReportRequest {
    generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest;
    format?: ReportFormatType;
}

export interface GenerateShipmentListDocumentReportRequest {
    generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest;
}

export interface GenerateShowsSalesReportRequest {
    generateShowsSalesReportRequest: GenerateShowsSalesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateStocksOnWarehousesReportRequest {
    generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedMarketplaceServicesReportRequest {
    generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedNettingReportRequest {
    generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedOrdersReportRequest {
    generateUnitedOrdersRequest: GenerateUnitedOrdersRequest;
    format?: ReportFormatType;
}

export interface GetReportInfoRequest {
    reportId: string;
}


/**
 * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по бусту продаж
 */
function generateBoostConsolidatedReportRaw<T>(requestParameters: GenerateBoostConsolidatedReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateBoostConsolidatedRequest === null || requestParameters.generateBoostConsolidatedRequest === undefined) {
        throw new runtime.RequiredError('generateBoostConsolidatedRequest','Required parameter requestParameters.generateBoostConsolidatedRequest was null or undefined when calling generateBoostConsolidatedReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/boost-consolidated/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateBoostConsolidatedRequestToJSON(requestParameters.generateBoostConsolidatedRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по бусту продаж
*/
export function generateBoostConsolidatedReport<T>(requestParameters: GenerateBoostConsolidatedReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateBoostConsolidatedReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
 * Отчет «Конкурентная позиция»
 */
function generateCompetitorsPositionReportRaw<T>(requestParameters: GenerateCompetitorsPositionReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateCompetitorsPositionReportRequest === null || requestParameters.generateCompetitorsPositionReportRequest === undefined) {
        throw new runtime.RequiredError('generateCompetitorsPositionReportRequest','Required parameter requestParameters.generateCompetitorsPositionReportRequest was null or undefined when calling generateCompetitorsPositionReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/competitors-position/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateCompetitorsPositionReportRequestToJSON(requestParameters.generateCompetitorsPositionReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
* Отчет «Конкурентная позиция»
*/
export function generateCompetitorsPositionReport<T>(requestParameters: GenerateCompetitorsPositionReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateCompetitorsPositionReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по отзывам о товарах
 */
function generateGoodsFeedbackReportRaw<T>(requestParameters: GenerateGoodsFeedbackReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsFeedbackRequest === null || requestParameters.generateGoodsFeedbackRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsFeedbackRequest','Required parameter requestParameters.generateGoodsFeedbackRequest was null or undefined when calling generateGoodsFeedbackReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-feedback/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsFeedbackRequestToJSON(requestParameters.generateGoodsFeedbackRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по отзывам о товарах
*/
export function generateGoodsFeedbackReport<T>(requestParameters: GenerateGoodsFeedbackReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsFeedbackReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по движению товаров
 */
function generateGoodsMovementReportRaw<T>(requestParameters: GenerateGoodsMovementReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsMovementReportRequest === null || requestParameters.generateGoodsMovementReportRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsMovementReportRequest','Required parameter requestParameters.generateGoodsMovementReportRequest was null or undefined when calling generateGoodsMovementReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-movement/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsMovementReportRequestToJSON(requestParameters.generateGoodsMovementReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по движению товаров
*/
export function generateGoodsMovementReport<T>(requestParameters: GenerateGoodsMovementReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsMovementReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по реализации
 */
function generateGoodsRealizationReportRaw<T>(requestParameters: GenerateGoodsRealizationReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsRealizationReportRequest === null || requestParameters.generateGoodsRealizationReportRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsRealizationReportRequest','Required parameter requestParameters.generateGoodsRealizationReportRequest was null or undefined when calling generateGoodsRealizationReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-realization/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsRealizationReportRequestToJSON(requestParameters.generateGoodsRealizationReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по реализации
*/
export function generateGoodsRealizationReport<T>(requestParameters: GenerateGoodsRealizationReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsRealizationReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по оборачиваемости
 */
function generateGoodsTurnoverReportRaw<T>(requestParameters: GenerateGoodsTurnoverReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsTurnoverRequest === null || requestParameters.generateGoodsTurnoverRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsTurnoverRequest','Required parameter requestParameters.generateGoodsTurnoverRequest was null or undefined when calling generateGoodsTurnoverReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-turnover/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsTurnoverRequestToJSON(requestParameters.generateGoodsTurnoverRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по оборачиваемости
*/
export function generateGoodsTurnoverReport<T>(requestParameters: GenerateGoodsTurnoverReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsTurnoverReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
 */
function generateMassOrderLabelsReportRaw<T>(requestParameters: GenerateMassOrderLabelsReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateMassOrderLabelsRequest === null || requestParameters.generateMassOrderLabelsRequest === undefined) {
        throw new runtime.RequiredError('generateMassOrderLabelsRequest','Required parameter requestParameters.generateMassOrderLabelsRequest was null or undefined when calling generateMassOrderLabelsReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/documents/labels/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateMassOrderLabelsRequestToJSON(requestParameters.generateMassOrderLabelsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Готовые ярлыки‑наклейки на все коробки в нескольких заказах
*/
export function generateMassOrderLabelsReport<T>(requestParameters: GenerateMassOrderLabelsReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateMassOrderLabelsReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет «Цены на рынке»
 */
function generatePricesReportRaw<T>(requestParameters: GeneratePricesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generatePricesReportRequest === null || requestParameters.generatePricesReportRequest === undefined) {
        throw new runtime.RequiredError('generatePricesReportRequest','Required parameter requestParameters.generatePricesReportRequest was null or undefined when calling generatePricesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/prices/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GeneratePricesReportRequestToJSON(requestParameters.generatePricesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет «Цены на рынке»
*/
export function generatePricesReport<T>(requestParameters: GeneratePricesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generatePricesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по полкам
 */
function generateShelfsStatisticsReportRaw<T>(requestParameters: GenerateShelfsStatisticsReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShelfsStatisticsRequest === null || requestParameters.generateShelfsStatisticsRequest === undefined) {
        throw new runtime.RequiredError('generateShelfsStatisticsRequest','Required parameter requestParameters.generateShelfsStatisticsRequest was null or undefined when calling generateShelfsStatisticsReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/shelf-statistics/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShelfsStatisticsRequestToJSON(requestParameters.generateShelfsStatisticsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по полкам
*/
export function generateShelfsStatisticsReport<T>(requestParameters: GenerateShelfsStatisticsReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShelfsStatisticsReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение листа сборки
 */
function generateShipmentListDocumentReportRaw<T>(requestParameters: GenerateShipmentListDocumentReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShipmentListDocumentReportRequest === null || requestParameters.generateShipmentListDocumentReportRequest === undefined) {
        throw new runtime.RequiredError('generateShipmentListDocumentReportRequest','Required parameter requestParameters.generateShipmentListDocumentReportRequest was null or undefined when calling generateShipmentListDocumentReport.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/documents/shipment-list/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShipmentListDocumentReportRequestToJSON(requestParameters.generateShipmentListDocumentReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение листа сборки
*/
export function generateShipmentListDocumentReport<T>(requestParameters: GenerateShipmentListDocumentReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShipmentListDocumentReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
 * Отчет «Аналитика продаж»
 */
function generateShowsSalesReportRaw<T>(requestParameters: GenerateShowsSalesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShowsSalesReportRequest === null || requestParameters.generateShowsSalesReportRequest === undefined) {
        throw new runtime.RequiredError('generateShowsSalesReportRequest','Required parameter requestParameters.generateShowsSalesReportRequest was null or undefined when calling generateShowsSalesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/shows-sales/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShowsSalesReportRequestToJSON(requestParameters.generateShowsSalesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
* Отчет «Аналитика продаж»
*/
export function generateShowsSalesReport<T>(requestParameters: GenerateShowsSalesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShowsSalesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по остаткам на складах
 */
function generateStocksOnWarehousesReportRaw<T>(requestParameters: GenerateStocksOnWarehousesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateStocksOnWarehousesReportRequest === null || requestParameters.generateStocksOnWarehousesReportRequest === undefined) {
        throw new runtime.RequiredError('generateStocksOnWarehousesReportRequest','Required parameter requestParameters.generateStocksOnWarehousesReportRequest was null or undefined when calling generateStocksOnWarehousesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/stocks-on-warehouses/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateStocksOnWarehousesReportRequestToJSON(requestParameters.generateStocksOnWarehousesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по остаткам на складах
*/
export function generateStocksOnWarehousesReport<T>(requestParameters: GenerateStocksOnWarehousesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateStocksOnWarehousesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по стоимости услуг
 */
function generateUnitedMarketplaceServicesReportRaw<T>(requestParameters: GenerateUnitedMarketplaceServicesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedMarketplaceServicesReportRequest === null || requestParameters.generateUnitedMarketplaceServicesReportRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedMarketplaceServicesReportRequest','Required parameter requestParameters.generateUnitedMarketplaceServicesReportRequest was null or undefined when calling generateUnitedMarketplaceServicesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-marketplace-services/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedMarketplaceServicesReportRequestToJSON(requestParameters.generateUnitedMarketplaceServicesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по стоимости услуг
*/
export function generateUnitedMarketplaceServicesReport<T>(requestParameters: GenerateUnitedMarketplaceServicesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedMarketplaceServicesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по платежам
 */
function generateUnitedNettingReportRaw<T>(requestParameters: GenerateUnitedNettingReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedNettingReportRequest === null || requestParameters.generateUnitedNettingReportRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedNettingReportRequest','Required parameter requestParameters.generateUnitedNettingReportRequest was null or undefined when calling generateUnitedNettingReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-netting/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedNettingReportRequestToJSON(requestParameters.generateUnitedNettingReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по платежам
*/
export function generateUnitedNettingReport<T>(requestParameters: GenerateUnitedNettingReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedNettingReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по заказам
 */
function generateUnitedOrdersReportRaw<T>(requestParameters: GenerateUnitedOrdersReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedOrdersRequest === null || requestParameters.generateUnitedOrdersRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedOrdersRequest','Required parameter requestParameters.generateUnitedOrdersRequest was null or undefined when calling generateUnitedOrdersReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-orders/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedOrdersRequestToJSON(requestParameters.generateUnitedOrdersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по заказам
*/
export function generateUnitedOrdersReport<T>(requestParameters: GenerateUnitedOrdersReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedOrdersReportRaw(requestParameters, requestConfig);
}

/**
 * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * Получение заданного отчета
 */
function getReportInfoRaw<T>(requestParameters: GetReportInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetReportInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
        throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling getReportInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/info/{reportId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReportInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
* Получение заданного отчета
*/
export function getReportInfo<T>(requestParameters: GetReportInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReportInfoResponse>): QueryConfig<T> {
    return getReportInfoRaw(requestParameters, requestConfig);
}

