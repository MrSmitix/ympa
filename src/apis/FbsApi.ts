// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AddHiddenOffersRequest,
    AddHiddenOffersRequestFromJSON,
    AddHiddenOffersRequestToJSON,
    AddOffersToArchiveRequest,
    AddOffersToArchiveRequestFromJSON,
    AddOffersToArchiveRequestToJSON,
    AddOffersToArchiveResponse,
    AddOffersToArchiveResponseFromJSON,
    AddOffersToArchiveResponseToJSON,
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiLockedErrorResponse,
    ApiLockedErrorResponseFromJSON,
    ApiLockedErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    CalculateTariffsRequest,
    CalculateTariffsRequestFromJSON,
    CalculateTariffsRequestToJSON,
    CalculateTariffsResponse,
    CalculateTariffsResponseFromJSON,
    CalculateTariffsResponseToJSON,
    ConfirmPricesRequest,
    ConfirmPricesRequestFromJSON,
    ConfirmPricesRequestToJSON,
    ConfirmShipmentRequest,
    ConfirmShipmentRequestFromJSON,
    ConfirmShipmentRequestToJSON,
    CreateChatRequest,
    CreateChatRequestFromJSON,
    CreateChatRequestToJSON,
    CreateChatResponse,
    CreateChatResponseFromJSON,
    CreateChatResponseToJSON,
    CurrencyType,
    CurrencyTypeFromJSON,
    CurrencyTypeToJSON,
    DeleteCampaignOffersRequest,
    DeleteCampaignOffersRequestFromJSON,
    DeleteCampaignOffersRequestToJSON,
    DeleteCampaignOffersResponse,
    DeleteCampaignOffersResponseFromJSON,
    DeleteCampaignOffersResponseToJSON,
    DeleteGoodsFeedbackCommentRequest,
    DeleteGoodsFeedbackCommentRequestFromJSON,
    DeleteGoodsFeedbackCommentRequestToJSON,
    DeleteHiddenOffersRequest,
    DeleteHiddenOffersRequestFromJSON,
    DeleteHiddenOffersRequestToJSON,
    DeleteOffersFromArchiveRequest,
    DeleteOffersFromArchiveRequestFromJSON,
    DeleteOffersFromArchiveRequestToJSON,
    DeleteOffersFromArchiveResponse,
    DeleteOffersFromArchiveResponseFromJSON,
    DeleteOffersFromArchiveResponseToJSON,
    DeleteOffersRequest,
    DeleteOffersRequestFromJSON,
    DeleteOffersRequestToJSON,
    DeleteOffersResponse,
    DeleteOffersResponseFromJSON,
    DeleteOffersResponseToJSON,
    DeletePromoOffersRequest,
    DeletePromoOffersRequestFromJSON,
    DeletePromoOffersRequestToJSON,
    DeletePromoOffersResponse,
    DeletePromoOffersResponseFromJSON,
    DeletePromoOffersResponseToJSON,
    EmptyApiResponse,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    FeedIndexLogsStatusType,
    FeedIndexLogsStatusTypeFromJSON,
    FeedIndexLogsStatusTypeToJSON,
    GenerateBoostConsolidatedRequest,
    GenerateBoostConsolidatedRequestFromJSON,
    GenerateBoostConsolidatedRequestToJSON,
    GenerateCompetitorsPositionReportRequest,
    GenerateCompetitorsPositionReportRequestFromJSON,
    GenerateCompetitorsPositionReportRequestToJSON,
    GenerateGoodsFeedbackRequest,
    GenerateGoodsFeedbackRequestFromJSON,
    GenerateGoodsFeedbackRequestToJSON,
    GenerateGoodsRealizationReportRequest,
    GenerateGoodsRealizationReportRequestFromJSON,
    GenerateGoodsRealizationReportRequestToJSON,
    GenerateMassOrderLabelsRequest,
    GenerateMassOrderLabelsRequestFromJSON,
    GenerateMassOrderLabelsRequestToJSON,
    GeneratePricesReportRequest,
    GeneratePricesReportRequestFromJSON,
    GeneratePricesReportRequestToJSON,
    GenerateReportResponse,
    GenerateReportResponseFromJSON,
    GenerateReportResponseToJSON,
    GenerateShelfsStatisticsRequest,
    GenerateShelfsStatisticsRequestFromJSON,
    GenerateShelfsStatisticsRequestToJSON,
    GenerateShipmentListDocumentReportRequest,
    GenerateShipmentListDocumentReportRequestFromJSON,
    GenerateShipmentListDocumentReportRequestToJSON,
    GenerateShowsSalesReportRequest,
    GenerateShowsSalesReportRequestFromJSON,
    GenerateShowsSalesReportRequestToJSON,
    GenerateStocksOnWarehousesReportRequest,
    GenerateStocksOnWarehousesReportRequestFromJSON,
    GenerateStocksOnWarehousesReportRequestToJSON,
    GenerateUnitedMarketplaceServicesReportRequest,
    GenerateUnitedMarketplaceServicesReportRequestFromJSON,
    GenerateUnitedMarketplaceServicesReportRequestToJSON,
    GenerateUnitedNettingReportRequest,
    GenerateUnitedNettingReportRequestFromJSON,
    GenerateUnitedNettingReportRequestToJSON,
    GenerateUnitedOrdersRequest,
    GenerateUnitedOrdersRequestFromJSON,
    GenerateUnitedOrdersRequestToJSON,
    GetAllOffersResponse,
    GetAllOffersResponseFromJSON,
    GetAllOffersResponseToJSON,
    GetBidsInfoRequest,
    GetBidsInfoRequestFromJSON,
    GetBidsInfoRequestToJSON,
    GetBidsInfoResponse,
    GetBidsInfoResponseFromJSON,
    GetBidsInfoResponseToJSON,
    GetBidsRecommendationsRequest,
    GetBidsRecommendationsRequestFromJSON,
    GetBidsRecommendationsRequestToJSON,
    GetBidsRecommendationsResponse,
    GetBidsRecommendationsResponseFromJSON,
    GetBidsRecommendationsResponseToJSON,
    GetBusinessBuyerInfoResponse,
    GetBusinessBuyerInfoResponseFromJSON,
    GetBusinessBuyerInfoResponseToJSON,
    GetBusinessDocumentsInfoResponse,
    GetBusinessDocumentsInfoResponseFromJSON,
    GetBusinessDocumentsInfoResponseToJSON,
    GetBusinessSettingsResponse,
    GetBusinessSettingsResponseFromJSON,
    GetBusinessSettingsResponseToJSON,
    GetCampaignLoginsResponse,
    GetCampaignLoginsResponseFromJSON,
    GetCampaignLoginsResponseToJSON,
    GetCampaignOffersRequest,
    GetCampaignOffersRequestFromJSON,
    GetCampaignOffersRequestToJSON,
    GetCampaignOffersResponse,
    GetCampaignOffersResponseFromJSON,
    GetCampaignOffersResponseToJSON,
    GetCampaignRegionResponse,
    GetCampaignRegionResponseFromJSON,
    GetCampaignRegionResponseToJSON,
    GetCampaignResponse,
    GetCampaignResponseFromJSON,
    GetCampaignResponseToJSON,
    GetCampaignSettingsResponse,
    GetCampaignSettingsResponseFromJSON,
    GetCampaignSettingsResponseToJSON,
    GetCampaignsResponse,
    GetCampaignsResponseFromJSON,
    GetCampaignsResponseToJSON,
    GetCategoriesMaxSaleQuantumRequest,
    GetCategoriesMaxSaleQuantumRequestFromJSON,
    GetCategoriesMaxSaleQuantumRequestToJSON,
    GetCategoriesMaxSaleQuantumResponse,
    GetCategoriesMaxSaleQuantumResponseFromJSON,
    GetCategoriesMaxSaleQuantumResponseToJSON,
    GetCategoriesRequest,
    GetCategoriesRequestFromJSON,
    GetCategoriesRequestToJSON,
    GetCategoriesResponse,
    GetCategoriesResponseFromJSON,
    GetCategoriesResponseToJSON,
    GetCategoryContentParametersResponse,
    GetCategoryContentParametersResponseFromJSON,
    GetCategoryContentParametersResponseToJSON,
    GetChatHistoryRequest,
    GetChatHistoryRequestFromJSON,
    GetChatHistoryRequestToJSON,
    GetChatHistoryResponse,
    GetChatHistoryResponseFromJSON,
    GetChatHistoryResponseToJSON,
    GetChatsRequest,
    GetChatsRequestFromJSON,
    GetChatsRequestToJSON,
    GetChatsResponse,
    GetChatsResponseFromJSON,
    GetChatsResponseToJSON,
    GetDeliveryServicesResponse,
    GetDeliveryServicesResponseFromJSON,
    GetDeliveryServicesResponseToJSON,
    GetFeedIndexLogsResponse,
    GetFeedIndexLogsResponseFromJSON,
    GetFeedIndexLogsResponseToJSON,
    GetFeedResponse,
    GetFeedResponseFromJSON,
    GetFeedResponseToJSON,
    GetFeedbackListResponse,
    GetFeedbackListResponseFromJSON,
    GetFeedbackListResponseToJSON,
    GetFeedsResponse,
    GetFeedsResponseFromJSON,
    GetFeedsResponseToJSON,
    GetGoodsFeedbackCommentsRequest,
    GetGoodsFeedbackCommentsRequestFromJSON,
    GetGoodsFeedbackCommentsRequestToJSON,
    GetGoodsFeedbackCommentsResponse,
    GetGoodsFeedbackCommentsResponseFromJSON,
    GetGoodsFeedbackCommentsResponseToJSON,
    GetGoodsFeedbackRequest,
    GetGoodsFeedbackRequestFromJSON,
    GetGoodsFeedbackRequestToJSON,
    GetGoodsFeedbackResponse,
    GetGoodsFeedbackResponseFromJSON,
    GetGoodsFeedbackResponseToJSON,
    GetGoodsStatsRequest,
    GetGoodsStatsRequestFromJSON,
    GetGoodsStatsRequestToJSON,
    GetGoodsStatsResponse,
    GetGoodsStatsResponseFromJSON,
    GetGoodsStatsResponseToJSON,
    GetHiddenOffersResponse,
    GetHiddenOffersResponseFromJSON,
    GetHiddenOffersResponseToJSON,
    GetOfferCardsContentStatusRequest,
    GetOfferCardsContentStatusRequestFromJSON,
    GetOfferCardsContentStatusRequestToJSON,
    GetOfferCardsContentStatusResponse,
    GetOfferCardsContentStatusResponseFromJSON,
    GetOfferCardsContentStatusResponseToJSON,
    GetOfferMappingEntriesResponse,
    GetOfferMappingEntriesResponseFromJSON,
    GetOfferMappingEntriesResponseToJSON,
    GetOfferMappingsRequest,
    GetOfferMappingsRequestFromJSON,
    GetOfferMappingsRequestToJSON,
    GetOfferMappingsResponse,
    GetOfferMappingsResponseFromJSON,
    GetOfferMappingsResponseToJSON,
    GetOfferRecommendationsRequest,
    GetOfferRecommendationsRequestFromJSON,
    GetOfferRecommendationsRequestToJSON,
    GetOfferRecommendationsResponse,
    GetOfferRecommendationsResponseFromJSON,
    GetOfferRecommendationsResponseToJSON,
    GetOffersResponse,
    GetOffersResponseFromJSON,
    GetOffersResponseToJSON,
    GetOrderLabelsDataResponse,
    GetOrderLabelsDataResponseFromJSON,
    GetOrderLabelsDataResponseToJSON,
    GetOrderResponse,
    GetOrderResponseFromJSON,
    GetOrderResponseToJSON,
    GetOrdersResponse,
    GetOrdersResponseFromJSON,
    GetOrdersResponseToJSON,
    GetOrdersStatsRequest,
    GetOrdersStatsRequestFromJSON,
    GetOrdersStatsRequestToJSON,
    GetOrdersStatsResponse,
    GetOrdersStatsResponseFromJSON,
    GetOrdersStatsResponseToJSON,
    GetPricesByOfferIdsRequest,
    GetPricesByOfferIdsRequestFromJSON,
    GetPricesByOfferIdsRequestToJSON,
    GetPricesByOfferIdsResponse,
    GetPricesByOfferIdsResponseFromJSON,
    GetPricesByOfferIdsResponseToJSON,
    GetPricesResponse,
    GetPricesResponseFromJSON,
    GetPricesResponseToJSON,
    GetPromoOffersRequest,
    GetPromoOffersRequestFromJSON,
    GetPromoOffersRequestToJSON,
    GetPromoOffersResponse,
    GetPromoOffersResponseFromJSON,
    GetPromoOffersResponseToJSON,
    GetPromosRequest,
    GetPromosRequestFromJSON,
    GetPromosRequestToJSON,
    GetPromosResponse,
    GetPromosResponseFromJSON,
    GetPromosResponseToJSON,
    GetQualityRatingDetailsResponse,
    GetQualityRatingDetailsResponseFromJSON,
    GetQualityRatingDetailsResponseToJSON,
    GetQualityRatingRequest,
    GetQualityRatingRequestFromJSON,
    GetQualityRatingRequestToJSON,
    GetQualityRatingResponse,
    GetQualityRatingResponseFromJSON,
    GetQualityRatingResponseToJSON,
    GetQuarantineOffersRequest,
    GetQuarantineOffersRequestFromJSON,
    GetQuarantineOffersRequestToJSON,
    GetQuarantineOffersResponse,
    GetQuarantineOffersResponseFromJSON,
    GetQuarantineOffersResponseToJSON,
    GetRegionWithChildrenResponse,
    GetRegionWithChildrenResponseFromJSON,
    GetRegionWithChildrenResponseToJSON,
    GetRegionsResponse,
    GetRegionsResponseFromJSON,
    GetRegionsResponseToJSON,
    GetReportInfoResponse,
    GetReportInfoResponseFromJSON,
    GetReportInfoResponseToJSON,
    GetReturnResponse,
    GetReturnResponseFromJSON,
    GetReturnResponseToJSON,
    GetReturnsResponse,
    GetReturnsResponseFromJSON,
    GetReturnsResponseToJSON,
    GetShipmentOrdersInfoResponse,
    GetShipmentOrdersInfoResponseFromJSON,
    GetShipmentOrdersInfoResponseToJSON,
    GetShipmentResponse,
    GetShipmentResponseFromJSON,
    GetShipmentResponseToJSON,
    GetSuggestedOfferMappingEntriesRequest,
    GetSuggestedOfferMappingEntriesRequestFromJSON,
    GetSuggestedOfferMappingEntriesRequestToJSON,
    GetSuggestedOfferMappingEntriesResponse,
    GetSuggestedOfferMappingEntriesResponseFromJSON,
    GetSuggestedOfferMappingEntriesResponseToJSON,
    GetSuggestedOfferMappingsRequest,
    GetSuggestedOfferMappingsRequestFromJSON,
    GetSuggestedOfferMappingsRequestToJSON,
    GetSuggestedOfferMappingsResponse,
    GetSuggestedOfferMappingsResponseFromJSON,
    GetSuggestedOfferMappingsResponseToJSON,
    GetWarehouseStocksRequest,
    GetWarehouseStocksRequestFromJSON,
    GetWarehouseStocksRequestToJSON,
    GetWarehouseStocksResponse,
    GetWarehouseStocksResponseFromJSON,
    GetWarehouseStocksResponseToJSON,
    GetWarehousesResponse,
    GetWarehousesResponseFromJSON,
    GetWarehousesResponseToJSON,
    OfferAvailabilityStatusType,
    OfferAvailabilityStatusTypeFromJSON,
    OfferAvailabilityStatusTypeToJSON,
    OfferMappingKindType,
    OfferMappingKindTypeFromJSON,
    OfferMappingKindTypeToJSON,
    OfferProcessingStatusType,
    OfferProcessingStatusTypeFromJSON,
    OfferProcessingStatusTypeToJSON,
    OrderBuyerType,
    OrderBuyerTypeFromJSON,
    OrderBuyerTypeToJSON,
    OrderDeliveryDispatchType,
    OrderDeliveryDispatchTypeFromJSON,
    OrderDeliveryDispatchTypeToJSON,
    OrderStatusType,
    OrderStatusTypeFromJSON,
    OrderStatusTypeToJSON,
    OrderSubstatusType,
    OrderSubstatusTypeFromJSON,
    OrderSubstatusTypeToJSON,
    PageFormatType,
    PageFormatTypeFromJSON,
    PageFormatTypeToJSON,
    ProvideOrderItemIdentifiersRequest,
    ProvideOrderItemIdentifiersRequestFromJSON,
    ProvideOrderItemIdentifiersRequestToJSON,
    ProvideOrderItemIdentifiersResponse,
    ProvideOrderItemIdentifiersResponseFromJSON,
    ProvideOrderItemIdentifiersResponseToJSON,
    PutSkuBidsRequest,
    PutSkuBidsRequestFromJSON,
    PutSkuBidsRequestToJSON,
    RefundStatusType,
    RefundStatusTypeFromJSON,
    RefundStatusTypeToJSON,
    ReportFormatType,
    ReportFormatTypeFromJSON,
    ReportFormatTypeToJSON,
    ReturnType,
    ReturnTypeFromJSON,
    ReturnTypeToJSON,
    SearchShipmentsRequest,
    SearchShipmentsRequestFromJSON,
    SearchShipmentsRequestToJSON,
    SearchShipmentsResponse,
    SearchShipmentsResponseFromJSON,
    SearchShipmentsResponseToJSON,
    SendMessageToChatRequest,
    SendMessageToChatRequestFromJSON,
    SendMessageToChatRequestToJSON,
    SetFeedParamsRequest,
    SetFeedParamsRequestFromJSON,
    SetFeedParamsRequestToJSON,
    SetOrderBoxLayoutRequest,
    SetOrderBoxLayoutRequestFromJSON,
    SetOrderBoxLayoutRequestToJSON,
    SetOrderBoxLayoutResponse,
    SetOrderBoxLayoutResponseFromJSON,
    SetOrderBoxLayoutResponseToJSON,
    SetOrderShipmentBoxesRequest,
    SetOrderShipmentBoxesRequestFromJSON,
    SetOrderShipmentBoxesRequestToJSON,
    SetOrderShipmentBoxesResponse,
    SetOrderShipmentBoxesResponseFromJSON,
    SetOrderShipmentBoxesResponseToJSON,
    SetShipmentPalletsCountRequest,
    SetShipmentPalletsCountRequestFromJSON,
    SetShipmentPalletsCountRequestToJSON,
    ShipmentPalletLabelPageFormatType,
    ShipmentPalletLabelPageFormatTypeFromJSON,
    ShipmentPalletLabelPageFormatTypeToJSON,
    SkipGoodsFeedbackReactionRequest,
    SkipGoodsFeedbackReactionRequestFromJSON,
    SkipGoodsFeedbackReactionRequestToJSON,
    SuggestPricesRequest,
    SuggestPricesRequestFromJSON,
    SuggestPricesRequestToJSON,
    SuggestPricesResponse,
    SuggestPricesResponseFromJSON,
    SuggestPricesResponseToJSON,
    TransferOrdersFromShipmentRequest,
    TransferOrdersFromShipmentRequestFromJSON,
    TransferOrdersFromShipmentRequestToJSON,
    UpdateBusinessPricesRequest,
    UpdateBusinessPricesRequestFromJSON,
    UpdateBusinessPricesRequestToJSON,
    UpdateCampaignOffersRequest,
    UpdateCampaignOffersRequestFromJSON,
    UpdateCampaignOffersRequestToJSON,
    UpdateGoodsFeedbackCommentRequest,
    UpdateGoodsFeedbackCommentRequestFromJSON,
    UpdateGoodsFeedbackCommentRequestToJSON,
    UpdateGoodsFeedbackCommentResponse,
    UpdateGoodsFeedbackCommentResponseFromJSON,
    UpdateGoodsFeedbackCommentResponseToJSON,
    UpdateOfferContentRequest,
    UpdateOfferContentRequestFromJSON,
    UpdateOfferContentRequestToJSON,
    UpdateOfferContentResponse,
    UpdateOfferContentResponseFromJSON,
    UpdateOfferContentResponseToJSON,
    UpdateOfferMappingEntryRequest,
    UpdateOfferMappingEntryRequestFromJSON,
    UpdateOfferMappingEntryRequestToJSON,
    UpdateOfferMappingsRequest,
    UpdateOfferMappingsRequestFromJSON,
    UpdateOfferMappingsRequestToJSON,
    UpdateOfferMappingsResponse,
    UpdateOfferMappingsResponseFromJSON,
    UpdateOfferMappingsResponseToJSON,
    UpdateOrderItemRequest,
    UpdateOrderItemRequestFromJSON,
    UpdateOrderItemRequestToJSON,
    UpdateOrderStatusRequest,
    UpdateOrderStatusRequestFromJSON,
    UpdateOrderStatusRequestToJSON,
    UpdateOrderStatusResponse,
    UpdateOrderStatusResponseFromJSON,
    UpdateOrderStatusResponseToJSON,
    UpdateOrderStatusesRequest,
    UpdateOrderStatusesRequestFromJSON,
    UpdateOrderStatusesRequestToJSON,
    UpdateOrderStatusesResponse,
    UpdateOrderStatusesResponseFromJSON,
    UpdateOrderStatusesResponseToJSON,
    UpdatePricesRequest,
    UpdatePricesRequestFromJSON,
    UpdatePricesRequestToJSON,
    UpdatePromoOffersRequest,
    UpdatePromoOffersRequestFromJSON,
    UpdatePromoOffersRequestToJSON,
    UpdatePromoOffersResponse,
    UpdatePromoOffersResponseFromJSON,
    UpdatePromoOffersResponseToJSON,
    UpdateStocksRequest,
    UpdateStocksRequestFromJSON,
    UpdateStocksRequestToJSON,
} from '../models';

export interface AddHiddenOffersRequest {
    campaignId: number;
    addHiddenOffersRequest: AddHiddenOffersRequest;
}

export interface AddOffersToArchiveRequest {
    businessId: number;
    addOffersToArchiveRequest: AddOffersToArchiveRequest;
}

export interface CalculateTariffsRequest {
    calculateTariffsRequest: CalculateTariffsRequest;
}

export interface ConfirmBusinessPricesRequest {
    businessId: number;
    confirmPricesRequest: ConfirmPricesRequest;
}

export interface ConfirmCampaignPricesRequest {
    campaignId: number;
    confirmPricesRequest: ConfirmPricesRequest;
}

export interface ConfirmShipmentRequest {
    campaignId: number;
    shipmentId: number;
    confirmShipmentRequest?: ConfirmShipmentRequest;
}

export interface CreateChatRequest {
    businessId: number;
    createChatRequest: CreateChatRequest;
}

export interface DeleteCampaignOffersRequest {
    campaignId: number;
    deleteCampaignOffersRequest: DeleteCampaignOffersRequest;
}

export interface DeleteGoodsFeedbackCommentRequest {
    businessId: number;
    deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest;
}

export interface DeleteHiddenOffersRequest {
    campaignId: number;
    deleteHiddenOffersRequest: DeleteHiddenOffersRequest;
}

export interface DeleteOffersRequest {
    businessId: number;
    deleteOffersRequest: DeleteOffersRequest;
}

export interface DeleteOffersFromArchiveRequest {
    businessId: number;
    deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest;
}

export interface DeletePromoOffersRequest {
    businessId: number;
    deletePromoOffersRequest: DeletePromoOffersRequest;
}

export interface DownloadShipmentActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentDiscrepancyActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentInboundActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentPalletLabelsRequest {
    campaignId: number;
    shipmentId: number;
    format?: ShipmentPalletLabelPageFormatType;
}

export interface DownloadShipmentReceptionTransferActRequest {
    campaignId: number;
    warehouseId?: number;
}

export interface DownloadShipmentTransportationWaybillRequest {
    campaignId: number;
    shipmentId: number;
}

export interface GenerateBoostConsolidatedReportRequest {
    generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest;
    format?: ReportFormatType;
}

export interface GenerateCompetitorsPositionReportRequest {
    generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsFeedbackReportRequest {
    generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsRealizationReportRequest {
    generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest;
    format?: ReportFormatType;
}

export interface GenerateMassOrderLabelsReportRequest {
    generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest;
    format?: PageFormatType;
}

export interface GenerateOrderLabelRequest {
    campaignId: number;
    orderId: number;
    shipmentId: number;
    boxId: number;
    format?: PageFormatType;
}

export interface GenerateOrderLabelsRequest {
    campaignId: number;
    orderId: number;
    format?: PageFormatType;
}

export interface GeneratePricesReportRequest {
    generatePricesReportRequest: GeneratePricesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateShelfsStatisticsReportRequest {
    generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest;
    format?: ReportFormatType;
}

export interface GenerateShipmentListDocumentReportRequest {
    generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest;
}

export interface GenerateShowsSalesReportRequest {
    generateShowsSalesReportRequest: GenerateShowsSalesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateStocksOnWarehousesReportRequest {
    generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedMarketplaceServicesReportRequest {
    generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedNettingReportRequest {
    generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedOrdersReportRequest {
    generateUnitedOrdersRequest: GenerateUnitedOrdersRequest;
    format?: ReportFormatType;
}

export interface GetAllOffersRequest {
    campaignId: number;
    feedId?: number;
    chunk?: number;
}

export interface GetBidsInfoForBusinessRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getBidsInfoRequest?: GetBidsInfoRequest;
}

export interface GetBidsRecommendationsRequest {
    businessId: number;
    getBidsRecommendationsRequest: GetBidsRecommendationsRequest;
}

export interface GetBusinessQuarantineOffersRequest {
    businessId: number;
    getQuarantineOffersRequest: GetQuarantineOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetBusinessSettingsRequest {
    businessId: number;
}

export interface GetCampaignRequest {
    campaignId: number;
}

export interface GetCampaignLoginsRequest {
    campaignId: number;
}

export interface GetCampaignOffersRequest {
    campaignId: number;
    getCampaignOffersRequest: GetCampaignOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetCampaignQuarantineOffersRequest {
    campaignId: number;
    getQuarantineOffersRequest: GetQuarantineOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetCampaignRegionRequest {
    campaignId: number;
}

export interface GetCampaignSettingsRequest {
    campaignId: number;
}

export interface GetCampaignsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetCampaignsByLoginRequest {
    login: string;
    page?: number;
    pageSize?: number;
}

export interface GetCategoriesMaxSaleQuantumRequest {
    getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest;
}

export interface GetCategoriesTreeRequest {
    getCategoriesRequest?: GetCategoriesRequest;
}

export interface GetCategoryContentParametersRequest {
    categoryId: number;
}

export interface GetChatHistoryRequest {
    businessId: number;
    chatId: number;
    getChatHistoryRequest: GetChatHistoryRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetChatsRequest {
    businessId: number;
    getChatsRequest: GetChatsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface GetFeedIndexLogsRequest {
    campaignId: number;
    feedId: number;
    limit?: number;
    publishedTimeFrom?: Date;
    publishedTimeTo?: Date;
    status?: FeedIndexLogsStatusType;
}

export interface GetFeedbackAndCommentUpdatesRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    fromDate?: Date;
}

export interface GetFeedsRequest {
    campaignId: number;
}

export interface GetGoodsFeedbackCommentsRequest {
    businessId: number;
    getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetGoodsFeedbacksRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getGoodsFeedbackRequest?: GetGoodsFeedbackRequest;
}

export interface GetGoodsStatsRequest {
    campaignId: number;
    getGoodsStatsRequest: GetGoodsStatsRequest;
}

export interface GetHiddenOffersRequest {
    campaignId: number;
    offerId?: Array<string>;
    pageToken?: string;
    limit?: number;
    offset?: number;
    page?: number;
    pageSize?: number;
}

export interface GetOfferCardsContentStatusRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest;
}

export interface GetOfferMappingEntriesRequest {
    campaignId: number;
    offerId?: Array<string>;
    shopSku?: Array<string>;
    mappingKind?: OfferMappingKindType;
    status?: Array<OfferProcessingStatusType>;
    availability?: Array<OfferAvailabilityStatusType>;
    categoryId?: Array<number>;
    vendor?: Array<string>;
    pageToken?: string;
    limit?: number;
}

export interface GetOfferMappingsRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferMappingsRequest?: GetOfferMappingsRequest;
}

export interface GetOfferRecommendationsRequest {
    businessId: number;
    getOfferRecommendationsRequest: GetOfferRecommendationsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetOffersRequest {
    campaignId: number;
    query?: string;
    feedId?: number;
    shopCategoryId?: string;
    currency?: CurrencyType;
    matched?: boolean;
    page?: number;
    pageSize?: number;
}

export interface GetOrderRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrderBusinessBuyerInfoRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrderBusinessDocumentsInfoRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrderLabelsDataRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrdersRequest {
    campaignId: number;
    orderIds?: Array<number>;
    status?: Set<OrderStatusType>;
    substatus?: Set<OrderSubstatusType>;
    fromDate?: Date;
    toDate?: Date;
    supplierShipmentDateFrom?: Date;
    supplierShipmentDateTo?: Date;
    updatedAtFrom?: Date;
    updatedAtTo?: Date;
    dispatchType?: OrderDeliveryDispatchType;
    fake?: boolean;
    hasCis?: boolean;
    onlyWaitingForCancellationApprove?: boolean;
    onlyEstimatedDelivery?: boolean;
    buyerType?: OrderBuyerType;
    page?: number;
    pageSize?: number;
    pageToken?: string;
    limit?: number;
}

export interface GetOrdersStatsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getOrdersStatsRequest?: GetOrdersStatsRequest;
}

export interface GetPricesRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    archived?: boolean;
}

export interface GetPricesByOfferIdsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getPricesByOfferIdsRequest?: GetPricesByOfferIdsRequest;
}

export interface GetPromoOffersRequest {
    businessId: number;
    getPromoOffersRequest: GetPromoOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetPromosRequest {
    businessId: number;
    getPromosRequest?: GetPromosRequest;
}

export interface GetQualityRatingDetailsRequest {
    campaignId: number;
}

export interface GetQualityRatingsRequest {
    businessId: number;
    getQualityRatingRequest: GetQualityRatingRequest;
}

export interface GetReportInfoRequest {
    reportId: string;
}

export interface GetReturnRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnApplicationRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnPhotoRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    itemId: number;
    imageHash: string;
}

export interface GetReturnsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    orderIds?: Array<number>;
    statuses?: Array<RefundStatusType>;
    type?: ReturnType;
    fromDate?: Date;
    toDate?: Date;
    fromDate2?: Date;
    toDate2?: Date;
}

export interface GetShipmentRequest {
    campaignId: number;
    shipmentId: number;
    cancelledOrders?: boolean;
}

export interface GetShipmentOrdersInfoRequest {
    campaignId: number;
    shipmentId: number;
}

export interface GetStocksRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getWarehouseStocksRequest?: GetWarehouseStocksRequest;
}

export interface GetSuggestedOfferMappingEntriesRequest {
    campaignId: number;
    getSuggestedOfferMappingEntriesRequest: GetSuggestedOfferMappingEntriesRequest;
}

export interface GetSuggestedOfferMappingsRequest {
    businessId: number;
    getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest;
}

export interface GetSuggestedPricesRequest {
    campaignId: number;
    suggestPricesRequest: SuggestPricesRequest;
}

export interface GetWarehousesRequest {
    businessId: number;
}

export interface ProvideOrderItemIdentifiersRequest {
    campaignId: number;
    orderId: number;
    provideOrderItemIdentifiersRequest: ProvideOrderItemIdentifiersRequest;
}

export interface PutBidsForBusinessRequest {
    businessId: number;
    putSkuBidsRequest: PutSkuBidsRequest;
}

export interface PutBidsForCampaignRequest {
    campaignId: number;
    putSkuBidsRequest: PutSkuBidsRequest;
}

export interface RefreshFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface SearchRegionChildrenRequest {
    regionId: number;
    page?: number;
    pageSize?: number;
}

export interface SearchRegionsByIdRequest {
    regionId: number;
}

export interface SearchRegionsByNameRequest {
    name: string;
    pageToken?: string;
    limit?: number;
}

export interface SearchShipmentsRequest {
    campaignId: number;
    searchShipmentsRequest: SearchShipmentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface SendFileToChatRequest {
    businessId: number;
    chatId: number;
    file: Blob;
}

export interface SendMessageToChatRequest {
    businessId: number;
    chatId: number;
    sendMessageToChatRequest: SendMessageToChatRequest;
}

export interface SetFeedParamsRequest {
    campaignId: number;
    feedId: number;
    setFeedParamsRequest: SetFeedParamsRequest;
}

export interface SetOrderBoxLayoutRequest {
    campaignId: number;
    orderId: number;
    setOrderBoxLayoutRequest: SetOrderBoxLayoutRequest;
}

export interface SetOrderShipmentBoxesRequest {
    campaignId: number;
    orderId: number;
    shipmentId: number;
    setOrderShipmentBoxesRequest: SetOrderShipmentBoxesRequest;
}

export interface SetShipmentPalletsCountRequest {
    campaignId: number;
    shipmentId: number;
    setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest;
}

export interface SkipGoodsFeedbacksReactionRequest {
    businessId: number;
    skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest;
}

export interface TransferOrdersFromShipmentRequest {
    campaignId: number;
    shipmentId: number;
    transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest;
}

export interface UpdateBusinessPricesRequest {
    businessId: number;
    updateBusinessPricesRequest: UpdateBusinessPricesRequest;
}

export interface UpdateCampaignOffersRequest {
    campaignId: number;
    updateCampaignOffersRequest: UpdateCampaignOffersRequest;
}

export interface UpdateGoodsFeedbackCommentRequest {
    businessId: number;
    updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest;
}

export interface UpdateOfferContentRequest {
    businessId: number;
    updateOfferContentRequest: UpdateOfferContentRequest;
}

export interface UpdateOfferMappingEntriesRequest {
    campaignId: number;
    updateOfferMappingEntryRequest: UpdateOfferMappingEntryRequest;
}

export interface UpdateOfferMappingsRequest {
    businessId: number;
    updateOfferMappingsRequest: UpdateOfferMappingsRequest;
}

export interface UpdateOrderItemsRequest {
    campaignId: number;
    orderId: number;
    updateOrderItemRequest: UpdateOrderItemRequest;
}

export interface UpdateOrderStatusRequest {
    campaignId: number;
    orderId: number;
    updateOrderStatusRequest: UpdateOrderStatusRequest;
}

export interface UpdateOrderStatusesRequest {
    campaignId: number;
    updateOrderStatusesRequest: UpdateOrderStatusesRequest;
}

export interface UpdatePricesRequest {
    campaignId: number;
    updatePricesRequest: UpdatePricesRequest;
}

export interface UpdatePromoOffersRequest {
    businessId: number;
    updatePromoOffersRequest: UpdatePromoOffersRequest;
}

export interface UpdateStocksRequest {
    campaignId: number;
    updateStocksRequest: UpdateStocksRequest;
}


/**
 * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Скрытие товаров и настройки скрытия
 */
function addHiddenOffersRaw<T>(requestParameters: AddHiddenOffersRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling addHiddenOffers.');
    }

    if (requestParameters.addHiddenOffersRequest === null || requestParameters.addHiddenOffersRequest === undefined) {
        throw new runtime.RequiredError('addHiddenOffersRequest','Required parameter requestParameters.addHiddenOffersRequest was null or undefined when calling addHiddenOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AddHiddenOffersRequestToJSON(requestParameters.addHiddenOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Скрытие товаров и настройки скрытия
*/
export function addHiddenOffers<T>(requestParameters: AddHiddenOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return addHiddenOffersRaw(requestParameters, requestConfig);
}

/**
 * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
 * Добавление товаров в архив
 */
function addOffersToArchiveRaw<T>(requestParameters: AddOffersToArchiveRequest, requestConfig: runtime.TypedQueryConfig<T, AddOffersToArchiveResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling addOffersToArchive.');
    }

    if (requestParameters.addOffersToArchiveRequest === null || requestParameters.addOffersToArchiveRequest === undefined) {
        throw new runtime.RequiredError('addOffersToArchiveRequest','Required parameter requestParameters.addOffersToArchiveRequest was null or undefined when calling addOffersToArchive.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings/archive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AddOffersToArchiveRequestToJSON(requestParameters.addOffersToArchiveRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AddOffersToArchiveResponseFromJSON(body), text);
    }

    return config;
}

/**
* Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
* Добавление товаров в архив
*/
export function addOffersToArchive<T>(requestParameters: AddOffersToArchiveRequest, requestConfig?: runtime.TypedQueryConfig<T, AddOffersToArchiveResponse>): QueryConfig<T> {
    return addOffersToArchiveRaw(requestParameters, requestConfig);
}

/**
 * Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * Калькулятор стоимости услуг
 */
function calculateTariffsRaw<T>(requestParameters: CalculateTariffsRequest, requestConfig: runtime.TypedQueryConfig<T, CalculateTariffsResponse> = {}): QueryConfig<T> {
    if (requestParameters.calculateTariffsRequest === null || requestParameters.calculateTariffsRequest === undefined) {
        throw new runtime.RequiredError('calculateTariffsRequest','Required parameter requestParameters.calculateTariffsRequest was null or undefined when calling calculateTariffs.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/tariffs/calculate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CalculateTariffsRequestToJSON(requestParameters.calculateTariffsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CalculateTariffsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
* Калькулятор стоимости услуг
*/
export function calculateTariffs<T>(requestParameters: CalculateTariffsRequest, requestConfig?: runtime.TypedQueryConfig<T, CalculateTariffsResponse>): QueryConfig<T> {
    return calculateTariffsRaw(requestParameters, requestConfig);
}

/**
 * Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
 * Удаление товара из карантина по цене в кабинете
 */
function confirmBusinessPricesRaw<T>(requestParameters: ConfirmBusinessPricesRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling confirmBusinessPrices.');
    }

    if (requestParameters.confirmPricesRequest === null || requestParameters.confirmPricesRequest === undefined) {
        throw new runtime.RequiredError('confirmPricesRequest','Required parameter requestParameters.confirmPricesRequest was null or undefined when calling confirmBusinessPrices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/price-quarantine/confirm`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConfirmPricesRequestToJSON(requestParameters.confirmPricesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
* Удаление товара из карантина по цене в кабинете
*/
export function confirmBusinessPrices<T>(requestParameters: ConfirmBusinessPricesRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return confirmBusinessPricesRaw(requestParameters, requestConfig);
}

/**
 * Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Удаление товара из карантина по цене в магазине
 */
function confirmCampaignPricesRaw<T>(requestParameters: ConfirmCampaignPricesRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling confirmCampaignPrices.');
    }

    if (requestParameters.confirmPricesRequest === null || requestParameters.confirmPricesRequest === undefined) {
        throw new runtime.RequiredError('confirmPricesRequest','Required parameter requestParameters.confirmPricesRequest was null or undefined when calling confirmCampaignPrices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/price-quarantine/confirm`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConfirmPricesRequestToJSON(requestParameters.confirmPricesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Удаление товара из карантина по цене в магазине
*/
export function confirmCampaignPrices<T>(requestParameters: ConfirmCampaignPricesRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return confirmCampaignPricesRaw(requestParameters, requestConfig);
}

/**
 * Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Подтверждение отгрузки
 */
function confirmShipmentRaw<T>(requestParameters: ConfirmShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling confirmShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling confirmShipment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ConfirmShipmentRequestToJSON(requestParameters.confirmShipmentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Подтверждение отгрузки
*/
export function confirmShipment<T>(requestParameters: ConfirmShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return confirmShipmentRaw(requestParameters, requestConfig);
}

/**
 * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Создание нового чата с покупателем
 */
function createChatRaw<T>(requestParameters: CreateChatRequest, requestConfig: runtime.TypedQueryConfig<T, CreateChatResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling createChat.');
    }

    if (requestParameters.createChatRequest === null || requestParameters.createChatRequest === undefined) {
        throw new runtime.RequiredError('createChatRequest','Required parameter requestParameters.createChatRequest was null or undefined when calling createChat.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/chats/new`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CreateChatRequestToJSON(requestParameters.createChatRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreateChatResponseFromJSON(body), text);
    }

    return config;
}

/**
* Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Создание нового чата с покупателем
*/
export function createChat<T>(requestParameters: CreateChatRequest, requestConfig?: runtime.TypedQueryConfig<T, CreateChatResponse>): QueryConfig<T> {
    return createChatRaw(requestParameters, requestConfig);
}

/**
 * Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Удаление товаров из ассортимента магазина
 */
function deleteCampaignOffersRaw<T>(requestParameters: DeleteCampaignOffersRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteCampaignOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling deleteCampaignOffers.');
    }

    if (requestParameters.deleteCampaignOffersRequest === null || requestParameters.deleteCampaignOffersRequest === undefined) {
        throw new runtime.RequiredError('deleteCampaignOffersRequest','Required parameter requestParameters.deleteCampaignOffersRequest was null or undefined when calling deleteCampaignOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers/delete`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeleteCampaignOffersRequestToJSON(requestParameters.deleteCampaignOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteCampaignOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Удаление товаров из ассортимента магазина
*/
export function deleteCampaignOffers<T>(requestParameters: DeleteCampaignOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteCampaignOffersResponse>): QueryConfig<T> {
    return deleteCampaignOffersRaw(requestParameters, requestConfig);
}

/**
 * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Удаление комментария к отзыву
 */
function deleteGoodsFeedbackCommentRaw<T>(requestParameters: DeleteGoodsFeedbackCommentRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deleteGoodsFeedbackComment.');
    }

    if (requestParameters.deleteGoodsFeedbackCommentRequest === null || requestParameters.deleteGoodsFeedbackCommentRequest === undefined) {
        throw new runtime.RequiredError('deleteGoodsFeedbackCommentRequest','Required parameter requestParameters.deleteGoodsFeedbackCommentRequest was null or undefined when calling deleteGoodsFeedbackComment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/goods-feedback/comments/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeleteGoodsFeedbackCommentRequestToJSON(requestParameters.deleteGoodsFeedbackCommentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Удаление комментария к отзыву
*/
export function deleteGoodsFeedbackComment<T>(requestParameters: DeleteGoodsFeedbackCommentRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return deleteGoodsFeedbackCommentRaw(requestParameters, requestConfig);
}

/**
 * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Возобновление показа товаров
 */
function deleteHiddenOffersRaw<T>(requestParameters: DeleteHiddenOffersRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling deleteHiddenOffers.');
    }

    if (requestParameters.deleteHiddenOffersRequest === null || requestParameters.deleteHiddenOffersRequest === undefined) {
        throw new runtime.RequiredError('deleteHiddenOffersRequest','Required parameter requestParameters.deleteHiddenOffersRequest was null or undefined when calling deleteHiddenOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/hidden-offers/delete`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeleteHiddenOffersRequestToJSON(requestParameters.deleteHiddenOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Возобновление показа товаров
*/
export function deleteHiddenOffers<T>(requestParameters: DeleteHiddenOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return deleteHiddenOffersRaw(requestParameters, requestConfig);
}

/**
 * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
 * Удаление товаров из каталога
 */
function deleteOffersRaw<T>(requestParameters: DeleteOffersRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deleteOffers.');
    }

    if (requestParameters.deleteOffersRequest === null || requestParameters.deleteOffersRequest === undefined) {
        throw new runtime.RequiredError('deleteOffersRequest','Required parameter requestParameters.deleteOffersRequest was null or undefined when calling deleteOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeleteOffersRequestToJSON(requestParameters.deleteOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
* Удаление товаров из каталога
*/
export function deleteOffers<T>(requestParameters: DeleteOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteOffersResponse>): QueryConfig<T> {
    return deleteOffersRaw(requestParameters, requestConfig);
}

/**
 * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
 * Удаление товаров из архива
 */
function deleteOffersFromArchiveRaw<T>(requestParameters: DeleteOffersFromArchiveRequest, requestConfig: runtime.TypedQueryConfig<T, DeleteOffersFromArchiveResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deleteOffersFromArchive.');
    }

    if (requestParameters.deleteOffersFromArchiveRequest === null || requestParameters.deleteOffersFromArchiveRequest === undefined) {
        throw new runtime.RequiredError('deleteOffersFromArchiveRequest','Required parameter requestParameters.deleteOffersFromArchiveRequest was null or undefined when calling deleteOffersFromArchive.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings/unarchive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeleteOffersFromArchiveRequestToJSON(requestParameters.deleteOffersFromArchiveRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeleteOffersFromArchiveResponseFromJSON(body), text);
    }

    return config;
}

/**
* Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
* Удаление товаров из архива
*/
export function deleteOffersFromArchive<T>(requestParameters: DeleteOffersFromArchiveRequest, requestConfig?: runtime.TypedQueryConfig<T, DeleteOffersFromArchiveResponse>): QueryConfig<T> {
    return deleteOffersFromArchiveRaw(requestParameters, requestConfig);
}

/**
 * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Удаление товаров из акции
 */
function deletePromoOffersRaw<T>(requestParameters: DeletePromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, DeletePromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling deletePromoOffers.');
    }

    if (requestParameters.deletePromoOffersRequest === null || requestParameters.deletePromoOffersRequest === undefined) {
        throw new runtime.RequiredError('deletePromoOffersRequest','Required parameter requestParameters.deletePromoOffersRequest was null or undefined when calling deletePromoOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeletePromoOffersRequestToJSON(requestParameters.deletePromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeletePromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Удаление товаров из акции
*/
export function deletePromoOffers<T>(requestParameters: DeletePromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, DeletePromoOffersResponse>): QueryConfig<T> {
    return deletePromoOffersRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение акта приема-передачи
 */
function downloadShipmentActRaw<T>(requestParameters: DownloadShipmentActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение акта приема-передачи
*/
export function downloadShipmentAct<T>(requestParameters: DownloadShipmentActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение акта расхождений
 */
function downloadShipmentDiscrepancyActRaw<T>(requestParameters: DownloadShipmentDiscrepancyActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentDiscrepancyAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentDiscrepancyAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение акта расхождений
*/
export function downloadShipmentDiscrepancyAct<T>(requestParameters: DownloadShipmentDiscrepancyActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentDiscrepancyActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение фактического акта приема-передачи
 */
function downloadShipmentInboundActRaw<T>(requestParameters: DownloadShipmentInboundActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentInboundAct.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentInboundAct.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение фактического акта приема-передачи
*/
export function downloadShipmentInboundAct<T>(requestParameters: DownloadShipmentInboundActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentInboundActRaw(requestParameters, requestConfig);
}

/**
 * PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Ярлыки для доверительной приемки (FBS)
 */
function downloadShipmentPalletLabelsRaw<T>(requestParameters: DownloadShipmentPalletLabelsRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentPalletLabels.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentPalletLabels.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
* Ярлыки для доверительной приемки (FBS)
*/
export function downloadShipmentPalletLabels<T>(requestParameters: DownloadShipmentPalletLabelsRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentPalletLabelsRaw(requestParameters, requestConfig);
}

/**
 * Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
 */
function downloadShipmentReceptionTransferActRaw<T>(requestParameters: DownloadShipmentReceptionTransferActRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentReceptionTransferAct.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.warehouseId !== undefined) {
        queryParameters['warehouse_id'] = requestParameters.warehouseId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/shipments/reception-transfer-act`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
*/
export function downloadShipmentReceptionTransferAct<T>(requestParameters: DownloadShipmentReceptionTransferActRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentReceptionTransferActRaw(requestParameters, requestConfig);
}

/**
 * Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Получение транспортной накладной
 */
function downloadShipmentTransportationWaybillRaw<T>(requestParameters: DownloadShipmentTransportationWaybillRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling downloadShipmentTransportationWaybill.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling downloadShipmentTransportationWaybill.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Получение транспортной накладной
*/
export function downloadShipmentTransportationWaybill<T>(requestParameters: DownloadShipmentTransportationWaybillRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return downloadShipmentTransportationWaybillRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по бусту продаж
 */
function generateBoostConsolidatedReportRaw<T>(requestParameters: GenerateBoostConsolidatedReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateBoostConsolidatedRequest === null || requestParameters.generateBoostConsolidatedRequest === undefined) {
        throw new runtime.RequiredError('generateBoostConsolidatedRequest','Required parameter requestParameters.generateBoostConsolidatedRequest was null or undefined when calling generateBoostConsolidatedReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/boost-consolidated/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateBoostConsolidatedRequestToJSON(requestParameters.generateBoostConsolidatedRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по бусту продаж
*/
export function generateBoostConsolidatedReport<T>(requestParameters: GenerateBoostConsolidatedReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateBoostConsolidatedReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
 * Отчет «Конкурентная позиция»
 */
function generateCompetitorsPositionReportRaw<T>(requestParameters: GenerateCompetitorsPositionReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateCompetitorsPositionReportRequest === null || requestParameters.generateCompetitorsPositionReportRequest === undefined) {
        throw new runtime.RequiredError('generateCompetitorsPositionReportRequest','Required parameter requestParameters.generateCompetitorsPositionReportRequest was null or undefined when calling generateCompetitorsPositionReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/competitors-position/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateCompetitorsPositionReportRequestToJSON(requestParameters.generateCompetitorsPositionReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
* Отчет «Конкурентная позиция»
*/
export function generateCompetitorsPositionReport<T>(requestParameters: GenerateCompetitorsPositionReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateCompetitorsPositionReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по отзывам о товарах
 */
function generateGoodsFeedbackReportRaw<T>(requestParameters: GenerateGoodsFeedbackReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsFeedbackRequest === null || requestParameters.generateGoodsFeedbackRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsFeedbackRequest','Required parameter requestParameters.generateGoodsFeedbackRequest was null or undefined when calling generateGoodsFeedbackReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-feedback/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsFeedbackRequestToJSON(requestParameters.generateGoodsFeedbackRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по отзывам о товарах
*/
export function generateGoodsFeedbackReport<T>(requestParameters: GenerateGoodsFeedbackReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsFeedbackReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по реализации
 */
function generateGoodsRealizationReportRaw<T>(requestParameters: GenerateGoodsRealizationReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateGoodsRealizationReportRequest === null || requestParameters.generateGoodsRealizationReportRequest === undefined) {
        throw new runtime.RequiredError('generateGoodsRealizationReportRequest','Required parameter requestParameters.generateGoodsRealizationReportRequest was null or undefined when calling generateGoodsRealizationReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/goods-realization/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateGoodsRealizationReportRequestToJSON(requestParameters.generateGoodsRealizationReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по реализации
*/
export function generateGoodsRealizationReport<T>(requestParameters: GenerateGoodsRealizationReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateGoodsRealizationReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
 */
function generateMassOrderLabelsReportRaw<T>(requestParameters: GenerateMassOrderLabelsReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateMassOrderLabelsRequest === null || requestParameters.generateMassOrderLabelsRequest === undefined) {
        throw new runtime.RequiredError('generateMassOrderLabelsRequest','Required parameter requestParameters.generateMassOrderLabelsRequest was null or undefined when calling generateMassOrderLabelsReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/documents/labels/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateMassOrderLabelsRequestToJSON(requestParameters.generateMassOrderLabelsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Готовые ярлыки‑наклейки на все коробки в нескольких заказах
*/
export function generateMassOrderLabelsReport<T>(requestParameters: GenerateMassOrderLabelsReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateMassOrderLabelsReportRaw(requestParameters, requestConfig);
}

/**
 * Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Готовый ярлык‑наклейка для коробки в заказе
 */
function generateOrderLabelRaw<T>(requestParameters: GenerateOrderLabelRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.boxId === null || requestParameters.boxId === undefined) {
        throw new runtime.RequiredError('boxId','Required parameter requestParameters.boxId was null or undefined when calling generateOrderLabel.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))).replace(`{${"boxId"}}`, encodeURIComponent(String(requestParameters.boxId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Готовый ярлык‑наклейка для коробки в заказе
*/
export function generateOrderLabel<T>(requestParameters: GenerateOrderLabelRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return generateOrderLabelRaw(requestParameters, requestConfig);
}

/**
 * Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Готовые ярлыки‑наклейки на все коробки в одном заказе
 */
function generateOrderLabelsRaw<T>(requestParameters: GenerateOrderLabelsRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling generateOrderLabels.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateOrderLabels.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/labels`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Готовые ярлыки‑наклейки на все коробки в одном заказе
*/
export function generateOrderLabels<T>(requestParameters: GenerateOrderLabelsRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return generateOrderLabelsRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет «Цены на рынке»
 */
function generatePricesReportRaw<T>(requestParameters: GeneratePricesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generatePricesReportRequest === null || requestParameters.generatePricesReportRequest === undefined) {
        throw new runtime.RequiredError('generatePricesReportRequest','Required parameter requestParameters.generatePricesReportRequest was null or undefined when calling generatePricesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/prices/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GeneratePricesReportRequestToJSON(requestParameters.generatePricesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет «Цены на рынке»
*/
export function generatePricesReport<T>(requestParameters: GeneratePricesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generatePricesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по полкам
 */
function generateShelfsStatisticsReportRaw<T>(requestParameters: GenerateShelfsStatisticsReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShelfsStatisticsRequest === null || requestParameters.generateShelfsStatisticsRequest === undefined) {
        throw new runtime.RequiredError('generateShelfsStatisticsRequest','Required parameter requestParameters.generateShelfsStatisticsRequest was null or undefined when calling generateShelfsStatisticsReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/shelf-statistics/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShelfsStatisticsRequestToJSON(requestParameters.generateShelfsStatisticsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по полкам
*/
export function generateShelfsStatisticsReport<T>(requestParameters: GenerateShelfsStatisticsReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShelfsStatisticsReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение листа сборки
 */
function generateShipmentListDocumentReportRaw<T>(requestParameters: GenerateShipmentListDocumentReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShipmentListDocumentReportRequest === null || requestParameters.generateShipmentListDocumentReportRequest === undefined) {
        throw new runtime.RequiredError('generateShipmentListDocumentReportRequest','Required parameter requestParameters.generateShipmentListDocumentReportRequest was null or undefined when calling generateShipmentListDocumentReport.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/documents/shipment-list/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShipmentListDocumentReportRequestToJSON(requestParameters.generateShipmentListDocumentReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение листа сборки
*/
export function generateShipmentListDocumentReport<T>(requestParameters: GenerateShipmentListDocumentReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShipmentListDocumentReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
 * Отчет «Аналитика продаж»
 */
function generateShowsSalesReportRaw<T>(requestParameters: GenerateShowsSalesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateShowsSalesReportRequest === null || requestParameters.generateShowsSalesReportRequest === undefined) {
        throw new runtime.RequiredError('generateShowsSalesReportRequest','Required parameter requestParameters.generateShowsSalesReportRequest was null or undefined when calling generateShowsSalesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/shows-sales/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateShowsSalesReportRequestToJSON(requestParameters.generateShowsSalesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
* Отчет «Аналитика продаж»
*/
export function generateShowsSalesReport<T>(requestParameters: GenerateShowsSalesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateShowsSalesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по остаткам на складах
 */
function generateStocksOnWarehousesReportRaw<T>(requestParameters: GenerateStocksOnWarehousesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateStocksOnWarehousesReportRequest === null || requestParameters.generateStocksOnWarehousesReportRequest === undefined) {
        throw new runtime.RequiredError('generateStocksOnWarehousesReportRequest','Required parameter requestParameters.generateStocksOnWarehousesReportRequest was null or undefined when calling generateStocksOnWarehousesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/stocks-on-warehouses/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateStocksOnWarehousesReportRequestToJSON(requestParameters.generateStocksOnWarehousesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по остаткам на складах
*/
export function generateStocksOnWarehousesReport<T>(requestParameters: GenerateStocksOnWarehousesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateStocksOnWarehousesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по стоимости услуг
 */
function generateUnitedMarketplaceServicesReportRaw<T>(requestParameters: GenerateUnitedMarketplaceServicesReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedMarketplaceServicesReportRequest === null || requestParameters.generateUnitedMarketplaceServicesReportRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedMarketplaceServicesReportRequest','Required parameter requestParameters.generateUnitedMarketplaceServicesReportRequest was null or undefined when calling generateUnitedMarketplaceServicesReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-marketplace-services/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedMarketplaceServicesReportRequestToJSON(requestParameters.generateUnitedMarketplaceServicesReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по стоимости услуг
*/
export function generateUnitedMarketplaceServicesReport<T>(requestParameters: GenerateUnitedMarketplaceServicesReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedMarketplaceServicesReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по платежам
 */
function generateUnitedNettingReportRaw<T>(requestParameters: GenerateUnitedNettingReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedNettingReportRequest === null || requestParameters.generateUnitedNettingReportRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedNettingReportRequest','Required parameter requestParameters.generateUnitedNettingReportRequest was null or undefined when calling generateUnitedNettingReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-netting/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedNettingReportRequestToJSON(requestParameters.generateUnitedNettingReportRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по платежам
*/
export function generateUnitedNettingReport<T>(requestParameters: GenerateUnitedNettingReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedNettingReportRaw(requestParameters, requestConfig);
}

/**
 * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Отчет по заказам
 */
function generateUnitedOrdersReportRaw<T>(requestParameters: GenerateUnitedOrdersReportRequest, requestConfig: runtime.TypedQueryConfig<T, GenerateReportResponse> = {}): QueryConfig<T> {
    if (requestParameters.generateUnitedOrdersRequest === null || requestParameters.generateUnitedOrdersRequest === undefined) {
        throw new runtime.RequiredError('generateUnitedOrdersRequest','Required parameter requestParameters.generateUnitedOrdersRequest was null or undefined when calling generateUnitedOrdersReport.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/united-orders/generate`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GenerateUnitedOrdersRequestToJSON(requestParameters.generateUnitedOrdersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenerateReportResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Отчет по заказам
*/
export function generateUnitedOrdersReport<T>(requestParameters: GenerateUnitedOrdersReportRequest, requestConfig?: runtime.TypedQueryConfig<T, GenerateReportResponse>): QueryConfig<T> {
    return generateUnitedOrdersReportRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
 * Все предложения магазина
 */
function getAllOffersRaw<T>(requestParameters: GetAllOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetAllOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getAllOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.feedId !== undefined) {
        queryParameters['feedId'] = requestParameters.feedId;
    }


    if (requestParameters.chunk !== undefined) {
        queryParameters['chunk'] = requestParameters.chunk;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers/all`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetAllOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
* Все предложения магазина
*/
export function getAllOffers<T>(requestParameters: GetAllOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetAllOffersResponse>): QueryConfig<T> {
    return getAllOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
 * Информация об установленных ставках
 */
function getBidsInfoForBusinessRaw<T>(requestParameters: GetBidsInfoForBusinessRequest, requestConfig: runtime.TypedQueryConfig<T, GetBidsInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBidsInfoForBusiness.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/bids/info`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetBidsInfoRequestToJSON(requestParameters.getBidsInfoRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBidsInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
* Информация об установленных ставках
*/
export function getBidsInfoForBusiness<T>(requestParameters: GetBidsInfoForBusinessRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBidsInfoResponse>): QueryConfig<T> {
    return getBidsInfoForBusinessRaw(requestParameters, requestConfig);
}

/**
 * Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
 * Рекомендованные ставки для заданных товаров
 */
function getBidsRecommendationsRaw<T>(requestParameters: GetBidsRecommendationsRequest, requestConfig: runtime.TypedQueryConfig<T, GetBidsRecommendationsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBidsRecommendations.');
    }

    if (requestParameters.getBidsRecommendationsRequest === null || requestParameters.getBidsRecommendationsRequest === undefined) {
        throw new runtime.RequiredError('getBidsRecommendationsRequest','Required parameter requestParameters.getBidsRecommendationsRequest was null or undefined when calling getBidsRecommendations.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/bids/recommendations`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetBidsRecommendationsRequestToJSON(requestParameters.getBidsRecommendationsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBidsRecommendationsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
* Рекомендованные ставки для заданных товаров
*/
export function getBidsRecommendations<T>(requestParameters: GetBidsRecommendationsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBidsRecommendationsResponse>): QueryConfig<T> {
    return getBidsRecommendationsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
 * Список товаров, находящихся в карантине по цене в кабинете
 */
function getBusinessQuarantineOffersRaw<T>(requestParameters: GetBusinessQuarantineOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetQuarantineOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBusinessQuarantineOffers.');
    }

    if (requestParameters.getQuarantineOffersRequest === null || requestParameters.getQuarantineOffersRequest === undefined) {
        throw new runtime.RequiredError('getQuarantineOffersRequest','Required parameter requestParameters.getQuarantineOffersRequest was null or undefined when calling getBusinessQuarantineOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/price-quarantine`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetQuarantineOffersRequestToJSON(requestParameters.getQuarantineOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetQuarantineOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
* Список товаров, находящихся в карантине по цене в кабинете
*/
export function getBusinessQuarantineOffers<T>(requestParameters: GetBusinessQuarantineOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetQuarantineOffersResponse>): QueryConfig<T> {
    return getBusinessQuarantineOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Настройки кабинета
 */
function getBusinessSettingsRaw<T>(requestParameters: GetBusinessSettingsRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessSettingsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getBusinessSettings.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/settings`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessSettingsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Настройки кабинета
*/
export function getBusinessSettings<T>(requestParameters: GetBusinessSettingsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessSettingsResponse>): QueryConfig<T> {
    return getBusinessSettingsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Информация о магазине
 */
function getCampaignRaw<T>(requestParameters: GetCampaignRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Информация о магазине
*/
export function getCampaign<T>(requestParameters: GetCampaignRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignResponse>): QueryConfig<T> {
    return getCampaignRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Логины, связанные с магазином
 */
function getCampaignLoginsRaw<T>(requestParameters: GetCampaignLoginsRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignLoginsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaignLogins.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/logins`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignLoginsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Логины, связанные с магазином
*/
export function getCampaignLogins<T>(requestParameters: GetCampaignLoginsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignLoginsResponse>): QueryConfig<T> {
    return getCampaignLoginsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Информация о товарах, которые размещены в заданном магазине
 */
function getCampaignOffersRaw<T>(requestParameters: GetCampaignOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaignOffers.');
    }

    if (requestParameters.getCampaignOffersRequest === null || requestParameters.getCampaignOffersRequest === undefined) {
        throw new runtime.RequiredError('getCampaignOffersRequest','Required parameter requestParameters.getCampaignOffersRequest was null or undefined when calling getCampaignOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetCampaignOffersRequestToJSON(requestParameters.getCampaignOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Информация о товарах, которые размещены в заданном магазине
*/
export function getCampaignOffers<T>(requestParameters: GetCampaignOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignOffersResponse>): QueryConfig<T> {
    return getCampaignOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Список товаров, находящихся в карантине по цене в магазине
 */
function getCampaignQuarantineOffersRaw<T>(requestParameters: GetCampaignQuarantineOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetQuarantineOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaignQuarantineOffers.');
    }

    if (requestParameters.getQuarantineOffersRequest === null || requestParameters.getQuarantineOffersRequest === undefined) {
        throw new runtime.RequiredError('getQuarantineOffersRequest','Required parameter requestParameters.getQuarantineOffersRequest was null or undefined when calling getCampaignQuarantineOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/price-quarantine`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetQuarantineOffersRequestToJSON(requestParameters.getQuarantineOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetQuarantineOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Список товаров, находящихся в карантине по цене в магазине
*/
export function getCampaignQuarantineOffers<T>(requestParameters: GetCampaignQuarantineOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetQuarantineOffersResponse>): QueryConfig<T> {
    return getCampaignQuarantineOffersRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
 * Регион магазина
 */
function getCampaignRegionRaw<T>(requestParameters: GetCampaignRegionRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignRegionResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaignRegion.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/region`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignRegionResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
* Регион магазина
*/
export function getCampaignRegion<T>(requestParameters: GetCampaignRegionRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignRegionResponse>): QueryConfig<T> {
    return getCampaignRegionRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Настройки магазина
 */
function getCampaignSettingsRaw<T>(requestParameters: GetCampaignSettingsRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignSettingsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getCampaignSettings.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/settings`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignSettingsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Настройки магазина
*/
export function getCampaignSettings<T>(requestParameters: GetCampaignSettingsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignSettingsResponse>): QueryConfig<T> {
    return getCampaignSettingsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Список магазинов пользователя
 */
function getCampaignsRaw<T>(requestParameters: GetCampaignsRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignsResponse> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Список магазинов пользователя
*/
export function getCampaigns<T>(requestParameters: GetCampaignsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignsResponse>): QueryConfig<T> {
    return getCampaignsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Магазины, доступные логину
 */
function getCampaignsByLoginRaw<T>(requestParameters: GetCampaignsByLoginRequest, requestConfig: runtime.TypedQueryConfig<T, GetCampaignsResponse> = {}): QueryConfig<T> {
    if (requestParameters.login === null || requestParameters.login === undefined) {
        throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling getCampaignsByLogin.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/by_login/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCampaignsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Магазины, доступные логину
*/
export function getCampaignsByLogin<T>(requestParameters: GetCampaignsByLoginRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCampaignsResponse>): QueryConfig<T> {
    return getCampaignsByLoginRaw(requestParameters, requestConfig);
}

/**
 * Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Лимит на установку кванта продажи и минимального количества товаров в заказе
 */
function getCategoriesMaxSaleQuantumRaw<T>(requestParameters: GetCategoriesMaxSaleQuantumRequest, requestConfig: runtime.TypedQueryConfig<T, GetCategoriesMaxSaleQuantumResponse> = {}): QueryConfig<T> {
    if (requestParameters.getCategoriesMaxSaleQuantumRequest === null || requestParameters.getCategoriesMaxSaleQuantumRequest === undefined) {
        throw new runtime.RequiredError('getCategoriesMaxSaleQuantumRequest','Required parameter requestParameters.getCategoriesMaxSaleQuantumRequest was null or undefined when calling getCategoriesMaxSaleQuantum.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/categories/max-sale-quantum`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetCategoriesMaxSaleQuantumRequestToJSON(requestParameters.getCategoriesMaxSaleQuantumRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCategoriesMaxSaleQuantumResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Лимит на установку кванта продажи и минимального количества товаров в заказе
*/
export function getCategoriesMaxSaleQuantum<T>(requestParameters: GetCategoriesMaxSaleQuantumRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCategoriesMaxSaleQuantumResponse>): QueryConfig<T> {
    return getCategoriesMaxSaleQuantumRaw(requestParameters, requestConfig);
}

/**
 * Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Дерево категорий
 */
function getCategoriesTreeRaw<T>(requestParameters: GetCategoriesTreeRequest, requestConfig: runtime.TypedQueryConfig<T, GetCategoriesResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/categories/tree`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetCategoriesRequestToJSON(requestParameters.getCategoriesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCategoriesResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Дерево категорий
*/
export function getCategoriesTree<T>(requestParameters: GetCategoriesTreeRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCategoriesResponse>): QueryConfig<T> {
    return getCategoriesTreeRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
 * Списки характеристик товаров по категориям
 */
function getCategoryContentParametersRaw<T>(requestParameters: GetCategoryContentParametersRequest, requestConfig: runtime.TypedQueryConfig<T, GetCategoryContentParametersResponse> = {}): QueryConfig<T> {
    if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
        throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryContentParameters.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/category/{categoryId}/parameters`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCategoryContentParametersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
* Списки характеристик товаров по категориям
*/
export function getCategoryContentParameters<T>(requestParameters: GetCategoryContentParametersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCategoryContentParametersResponse>): QueryConfig<T> {
    return getCategoryContentParametersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Получение истории сообщений в чате
 */
function getChatHistoryRaw<T>(requestParameters: GetChatHistoryRequest, requestConfig: runtime.TypedQueryConfig<T, GetChatHistoryResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getChatHistory.');
    }

    if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
        throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling getChatHistory.');
    }

    if (requestParameters.getChatHistoryRequest === null || requestParameters.getChatHistoryRequest === undefined) {
        throw new runtime.RequiredError('getChatHistoryRequest','Required parameter requestParameters.getChatHistoryRequest was null or undefined when calling getChatHistory.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.chatId !== undefined) {
        queryParameters['chatId'] = requestParameters.chatId;
    }


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/chats/history`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetChatHistoryRequestToJSON(requestParameters.getChatHistoryRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetChatHistoryResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Получение истории сообщений в чате
*/
export function getChatHistory<T>(requestParameters: GetChatHistoryRequest, requestConfig?: runtime.TypedQueryConfig<T, GetChatHistoryResponse>): QueryConfig<T> {
    return getChatHistoryRaw(requestParameters, requestConfig);
}

/**
 * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Получение доступных чатов
 */
function getChatsRaw<T>(requestParameters: GetChatsRequest, requestConfig: runtime.TypedQueryConfig<T, GetChatsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getChats.');
    }

    if (requestParameters.getChatsRequest === null || requestParameters.getChatsRequest === undefined) {
        throw new runtime.RequiredError('getChatsRequest','Required parameter requestParameters.getChatsRequest was null or undefined when calling getChats.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/chats`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetChatsRequestToJSON(requestParameters.getChatsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetChatsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Получение доступных чатов
*/
export function getChats<T>(requestParameters: GetChatsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetChatsResponse>): QueryConfig<T> {
    return getChatsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
 * Справочник служб доставки
 */
function getDeliveryServicesRaw<T>( requestConfig: runtime.TypedQueryConfig<T, GetDeliveryServicesResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/delivery/services`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetDeliveryServicesResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает справочник служб доставки: идентификаторы и наименования. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
* Справочник служб доставки
*/
export function getDeliveryServices<T>( requestConfig?: runtime.TypedQueryConfig<T, GetDeliveryServicesResponse>): QueryConfig<T> {
    return getDeliveryServicesRaw( requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Информация о прайс-листе
 */
function getFeedRaw<T>(requestParameters: GetFeedRequest, requestConfig: runtime.TypedQueryConfig<T, GetFeedResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getFeed.');
    }

    if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
        throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling getFeed.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feeds/{feedId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters.feedId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetFeedResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Информация о прайс-листе
*/
export function getFeed<T>(requestParameters: GetFeedRequest, requestConfig?: runtime.TypedQueryConfig<T, GetFeedResponse>): QueryConfig<T> {
    return getFeedRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Отчет по индексации прайс-листа
 */
function getFeedIndexLogsRaw<T>(requestParameters: GetFeedIndexLogsRequest, requestConfig: runtime.TypedQueryConfig<T, GetFeedIndexLogsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getFeedIndexLogs.');
    }

    if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
        throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling getFeedIndexLogs.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.publishedTimeFrom !== undefined) {
        queryParameters['published_time_from'] = (requestParameters.publishedTimeFrom as any).toISOString();
    }


    if (requestParameters.publishedTimeTo !== undefined) {
        queryParameters['published_time_to'] = (requestParameters.publishedTimeTo as any).toISOString();
    }


    if (requestParameters.status !== undefined) {
        queryParameters['status'] = requestParameters.status;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feeds/{feedId}/index-logs`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters.feedId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetFeedIndexLogsResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Отчет по индексации прайс-листа
*/
export function getFeedIndexLogs<T>(requestParameters: GetFeedIndexLogsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetFeedIndexLogsResponse>): QueryConfig<T> {
    return getFeedIndexLogsRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Новые и обновленные отзывы о магазине
 */
function getFeedbackAndCommentUpdatesRaw<T>(requestParameters: GetFeedbackAndCommentUpdatesRequest, requestConfig: runtime.TypedQueryConfig<T, GetFeedbackListResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getFeedbackAndCommentUpdates.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.fromDate !== undefined) {
        queryParameters['from_date'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feedback/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetFeedbackListResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
* Новые и обновленные отзывы о магазине
*/
export function getFeedbackAndCommentUpdates<T>(requestParameters: GetFeedbackAndCommentUpdatesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetFeedbackListResponse>): QueryConfig<T> {
    return getFeedbackAndCommentUpdatesRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Список прайс-листов магазина
 */
function getFeedsRaw<T>(requestParameters: GetFeedsRequest, requestConfig: runtime.TypedQueryConfig<T, GetFeedsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getFeeds.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feeds`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetFeedsResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Список прайс-листов магазина
*/
export function getFeeds<T>(requestParameters: GetFeedsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetFeedsResponse>): QueryConfig<T> {
    return getFeedsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Получение комментариев к отзыву
 */
function getGoodsFeedbackCommentsRaw<T>(requestParameters: GetGoodsFeedbackCommentsRequest, requestConfig: runtime.TypedQueryConfig<T, GetGoodsFeedbackCommentsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getGoodsFeedbackComments.');
    }

    if (requestParameters.getGoodsFeedbackCommentsRequest === null || requestParameters.getGoodsFeedbackCommentsRequest === undefined) {
        throw new runtime.RequiredError('getGoodsFeedbackCommentsRequest','Required parameter requestParameters.getGoodsFeedbackCommentsRequest was null or undefined when calling getGoodsFeedbackComments.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/goods-feedback/comments`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetGoodsFeedbackCommentsRequestToJSON(requestParameters.getGoodsFeedbackCommentsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetGoodsFeedbackCommentsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Получение комментариев к отзыву
*/
export function getGoodsFeedbackComments<T>(requestParameters: GetGoodsFeedbackCommentsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetGoodsFeedbackCommentsResponse>): QueryConfig<T> {
    return getGoodsFeedbackCommentsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Получение отзывов о товарах продавца
 */
function getGoodsFeedbacksRaw<T>(requestParameters: GetGoodsFeedbacksRequest, requestConfig: runtime.TypedQueryConfig<T, GetGoodsFeedbackResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getGoodsFeedbacks.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/goods-feedback`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetGoodsFeedbackRequestToJSON(requestParameters.getGoodsFeedbackRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetGoodsFeedbackResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Получение отзывов о товарах продавца
*/
export function getGoodsFeedbacks<T>(requestParameters: GetGoodsFeedbacksRequest, requestConfig?: runtime.TypedQueryConfig<T, GetGoodsFeedbackResponse>): QueryConfig<T> {
    return getGoodsFeedbacksRaw(requestParameters, requestConfig);
}

/**
 * Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Отчет по товарам
 */
function getGoodsStatsRaw<T>(requestParameters: GetGoodsStatsRequest, requestConfig: runtime.TypedQueryConfig<T, GetGoodsStatsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getGoodsStats.');
    }

    if (requestParameters.getGoodsStatsRequest === null || requestParameters.getGoodsStatsRequest === undefined) {
        throw new runtime.RequiredError('getGoodsStatsRequest','Required parameter requestParameters.getGoodsStatsRequest was null or undefined when calling getGoodsStats.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/stats/skus`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetGoodsStatsRequestToJSON(requestParameters.getGoodsStatsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetGoodsStatsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Отчет по товарам
*/
export function getGoodsStats<T>(requestParameters: GetGoodsStatsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetGoodsStatsResponse>): QueryConfig<T> {
    return getGoodsStatsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
 * Информация о скрытых вами товарах
 */
function getHiddenOffersRaw<T>(requestParameters: GetHiddenOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetHiddenOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getHiddenOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.offerId) {
        queryParameters['offer_id'] = requestParameters.offerId?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.offset !== undefined) {
        queryParameters['offset'] = requestParameters.offset;
    }


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetHiddenOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
* Информация о скрытых вами товарах
*/
export function getHiddenOffers<T>(requestParameters: GetHiddenOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetHiddenOffersResponse>): QueryConfig<T> {
    return getHiddenOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
 * Получение информации о заполненности карточек магазина
 */
function getOfferCardsContentStatusRaw<T>(requestParameters: GetOfferCardsContentStatusRequest, requestConfig: runtime.TypedQueryConfig<T, GetOfferCardsContentStatusResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getOfferCardsContentStatus.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-cards`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetOfferCardsContentStatusRequestToJSON(requestParameters.getOfferCardsContentStatusRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOfferCardsContentStatusResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
* Получение информации о заполненности карточек магазина
*/
export function getOfferCardsContentStatus<T>(requestParameters: GetOfferCardsContentStatusRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOfferCardsContentStatusResponse>): QueryConfig<T> {
    return getOfferCardsContentStatusRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
 * Список товаров в каталоге
 */
function getOfferMappingEntriesRaw<T>(requestParameters: GetOfferMappingEntriesRequest, requestConfig: runtime.TypedQueryConfig<T, GetOfferMappingEntriesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOfferMappingEntries.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.offerId) {
        queryParameters['offer_id'] = requestParameters.offerId?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.shopSku) {
        queryParameters['shop_sku'] = requestParameters.shopSku?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.mappingKind !== undefined) {
        queryParameters['mapping_kind'] = requestParameters.mappingKind;
    }


    if (requestParameters.status) {
        queryParameters['status'] = requestParameters.status?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.availability) {
        queryParameters['availability'] = requestParameters.availability?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.categoryId) {
        queryParameters['category_id'] = requestParameters.categoryId?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.vendor) {
        queryParameters['vendor'] = requestParameters.vendor?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-mapping-entries`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOfferMappingEntriesResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
* Список товаров в каталоге
*/
export function getOfferMappingEntries<T>(requestParameters: GetOfferMappingEntriesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOfferMappingEntriesResponse>): QueryConfig<T> {
    return getOfferMappingEntriesRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
 * Информация о товарах в каталоге
 */
function getOfferMappingsRaw<T>(requestParameters: GetOfferMappingsRequest, requestConfig: runtime.TypedQueryConfig<T, GetOfferMappingsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getOfferMappings.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetOfferMappingsRequestToJSON(requestParameters.getOfferMappingsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOfferMappingsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
* Информация о товарах в каталоге
*/
export function getOfferMappings<T>(requestParameters: GetOfferMappingsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOfferMappingsResponse>): QueryConfig<T> {
    return getOfferMappingsRaw(requestParameters, requestConfig);
}

/**
 * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * Рекомендации Маркета, касающиеся цен
 */
function getOfferRecommendationsRaw<T>(requestParameters: GetOfferRecommendationsRequest, requestConfig: runtime.TypedQueryConfig<T, GetOfferRecommendationsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getOfferRecommendations.');
    }

    if (requestParameters.getOfferRecommendationsRequest === null || requestParameters.getOfferRecommendationsRequest === undefined) {
        throw new runtime.RequiredError('getOfferRecommendationsRequest','Required parameter requestParameters.getOfferRecommendationsRequest was null or undefined when calling getOfferRecommendations.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offers/recommendations`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetOfferRecommendationsRequestToJSON(requestParameters.getOfferRecommendationsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOfferRecommendationsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
* Рекомендации Маркета, касающиеся цен
*/
export function getOfferRecommendations<T>(requestParameters: GetOfferRecommendationsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOfferRecommendationsResponse>): QueryConfig<T> {
    return getOfferRecommendationsRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
 * Предложения магазина
 */
function getOffersRaw<T>(requestParameters: GetOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.query !== undefined) {
        queryParameters['query'] = requestParameters.query;
    }


    if (requestParameters.feedId !== undefined) {
        queryParameters['feedId'] = requestParameters.feedId;
    }


    if (requestParameters.shopCategoryId !== undefined) {
        queryParameters['shopCategoryId'] = requestParameters.shopCategoryId;
    }


    if (requestParameters.currency !== undefined) {
        queryParameters['currency'] = requestParameters.currency;
    }


    if (requestParameters.matched !== undefined) {
        queryParameters['matched'] = requestParameters.matched;
    }


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
* Предложения магазина
*/
export function getOffers<T>(requestParameters: GetOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOffersResponse>): QueryConfig<T> {
    return getOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Информация об одном заказе
 */
function getOrderRaw<T>(requestParameters: GetOrderRequest, requestConfig: runtime.TypedQueryConfig<T, GetOrderResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrder.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrder.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOrderResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Информация об одном заказе
*/
export function getOrder<T>(requestParameters: GetOrderRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOrderResponse>): QueryConfig<T> {
    return getOrderRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
 * Информация о покупателе — юридическом лице
 */
function getOrderBusinessBuyerInfoRaw<T>(requestParameters: GetOrderBusinessBuyerInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessBuyerInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrderBusinessBuyerInfo.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderBusinessBuyerInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/business-buyer`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessBuyerInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
* Информация о покупателе — юридическом лице
*/
export function getOrderBusinessBuyerInfo<T>(requestParameters: GetOrderBusinessBuyerInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessBuyerInfoResponse>): QueryConfig<T> {
    return getOrderBusinessBuyerInfoRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
 * Информация о документах
 */
function getOrderBusinessDocumentsInfoRaw<T>(requestParameters: GetOrderBusinessDocumentsInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetBusinessDocumentsInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrderBusinessDocumentsInfo.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderBusinessDocumentsInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/documents`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetBusinessDocumentsInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
* Информация о документах
*/
export function getOrderBusinessDocumentsInfo<T>(requestParameters: GetOrderBusinessDocumentsInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetBusinessDocumentsInfoResponse>): QueryConfig<T> {
    return getOrderBusinessDocumentsInfoRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Данные для самостоятельного изготовления ярлыков
 */
function getOrderLabelsDataRaw<T>(requestParameters: GetOrderLabelsDataRequest, requestConfig: runtime.TypedQueryConfig<T, GetOrderLabelsDataResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrderLabelsData.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderLabelsData.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOrderLabelsDataResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Данные для самостоятельного изготовления ярлыков
*/
export function getOrderLabelsData<T>(requestParameters: GetOrderLabelsDataRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOrderLabelsDataResponse>): QueryConfig<T> {
    return getOrderLabelsDataRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Информация о нескольких заказах
 */
function getOrdersRaw<T>(requestParameters: GetOrdersRequest, requestConfig: runtime.TypedQueryConfig<T, GetOrdersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrders.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.orderIds) {
        queryParameters['orderIds'] = requestParameters.orderIds?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.status) {
        queryParameters['status'] = requestParameters.status?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.substatus) {
        queryParameters['substatus'] = requestParameters.substatus?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.fromDate !== undefined) {
        queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.toDate !== undefined) {
        queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.supplierShipmentDateFrom !== undefined) {
        queryParameters['supplierShipmentDateFrom'] = (requestParameters.supplierShipmentDateFrom as any).toISOString().substring(0,10);
    }


    if (requestParameters.supplierShipmentDateTo !== undefined) {
        queryParameters['supplierShipmentDateTo'] = (requestParameters.supplierShipmentDateTo as any).toISOString().substring(0,10);
    }


    if (requestParameters.updatedAtFrom !== undefined) {
        queryParameters['updatedAtFrom'] = (requestParameters.updatedAtFrom as any).toISOString();
    }


    if (requestParameters.updatedAtTo !== undefined) {
        queryParameters['updatedAtTo'] = (requestParameters.updatedAtTo as any).toISOString();
    }


    if (requestParameters.dispatchType !== undefined) {
        queryParameters['dispatchType'] = requestParameters.dispatchType;
    }


    if (requestParameters.fake !== undefined) {
        queryParameters['fake'] = requestParameters.fake;
    }


    if (requestParameters.hasCis !== undefined) {
        queryParameters['hasCis'] = requestParameters.hasCis;
    }


    if (requestParameters.onlyWaitingForCancellationApprove !== undefined) {
        queryParameters['onlyWaitingForCancellationApprove'] = requestParameters.onlyWaitingForCancellationApprove;
    }


    if (requestParameters.onlyEstimatedDelivery !== undefined) {
        queryParameters['onlyEstimatedDelivery'] = requestParameters.onlyEstimatedDelivery;
    }


    if (requestParameters.buyerType !== undefined) {
        queryParameters['buyerType'] = requestParameters.buyerType;
    }


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOrdersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Информация о нескольких заказах
*/
export function getOrders<T>(requestParameters: GetOrdersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOrdersResponse>): QueryConfig<T> {
    return getOrdersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Детальная информация по заказам
 */
function getOrdersStatsRaw<T>(requestParameters: GetOrdersStatsRequest, requestConfig: runtime.TypedQueryConfig<T, GetOrdersStatsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrdersStats.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/stats/orders`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetOrdersStatsRequestToJSON(requestParameters.getOrdersStatsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOrdersStatsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Детальная информация по заказам
*/
export function getOrdersStats<T>(requestParameters: GetOrdersStatsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOrdersStatsResponse>): QueryConfig<T> {
    return getOrdersStatsRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
 * Список цен
 */
function getPricesRaw<T>(requestParameters: GetPricesRequest, requestConfig: runtime.TypedQueryConfig<T, GetPricesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getPrices.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.archived !== undefined) {
        queryParameters['archived'] = requestParameters.archived;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-prices`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPricesResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
* Список цен
*/
export function getPrices<T>(requestParameters: GetPricesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPricesResponse>): QueryConfig<T> {
    return getPricesRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
 * Просмотр цен на указанные товары в магазине
 */
function getPricesByOfferIdsRaw<T>(requestParameters: GetPricesByOfferIdsRequest, requestConfig: runtime.TypedQueryConfig<T, GetPricesByOfferIdsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getPricesByOfferIds.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-prices`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetPricesByOfferIdsRequestToJSON(requestParameters.getPricesByOfferIdsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPricesByOfferIdsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
* Просмотр цен на указанные товары в магазине
*/
export function getPricesByOfferIds<T>(requestParameters: GetPricesByOfferIdsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPricesByOfferIdsResponse>): QueryConfig<T> {
    return getPricesByOfferIdsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Получение списка товаров, которые участвуют или могут участвовать в акции
 */
function getPromoOffersRaw<T>(requestParameters: GetPromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, GetPromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getPromoOffers.');
    }

    if (requestParameters.getPromoOffersRequest === null || requestParameters.getPromoOffersRequest === undefined) {
        throw new runtime.RequiredError('getPromoOffersRequest','Required parameter requestParameters.getPromoOffersRequest was null or undefined when calling getPromoOffers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetPromoOffersRequestToJSON(requestParameters.getPromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Получение списка товаров, которые участвуют или могут участвовать в акции
*/
export function getPromoOffers<T>(requestParameters: GetPromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPromoOffersResponse>): QueryConfig<T> {
    return getPromoOffersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Получение списка акций
 */
function getPromosRaw<T>(requestParameters: GetPromosRequest, requestConfig: runtime.TypedQueryConfig<T, GetPromosResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getPromos.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetPromosRequestToJSON(requestParameters.getPromosRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetPromosResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Получение списка акций
*/
export function getPromos<T>(requestParameters: GetPromosRequest, requestConfig?: runtime.TypedQueryConfig<T, GetPromosResponse>): QueryConfig<T> {
    return getPromosRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
 * Заказы, которые повлияли на индекс качества
 */
function getQualityRatingDetailsRaw<T>(requestParameters: GetQualityRatingDetailsRequest, requestConfig: runtime.TypedQueryConfig<T, GetQualityRatingDetailsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getQualityRatingDetails.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/ratings/quality/details`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetQualityRatingDetailsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список заказов, которые повлияли на индекс качества магазина. Чтобы узнать значение индекса качества, выполните запрос [POST businesses/{businessId}/ratings/quality](../../reference/ratings/getQualityRatings.md).  |**⚙️ Лимит:** 100000 запросов в час| |-| 
* Заказы, которые повлияли на индекс качества
*/
export function getQualityRatingDetails<T>(requestParameters: GetQualityRatingDetailsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetQualityRatingDetailsResponse>): QueryConfig<T> {
    return getQualityRatingDetailsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Индекс качества магазинов
 */
function getQualityRatingsRaw<T>(requestParameters: GetQualityRatingsRequest, requestConfig: runtime.TypedQueryConfig<T, GetQualityRatingResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getQualityRatings.');
    }

    if (requestParameters.getQualityRatingRequest === null || requestParameters.getQualityRatingRequest === undefined) {
        throw new runtime.RequiredError('getQualityRatingRequest','Required parameter requestParameters.getQualityRatingRequest was null or undefined when calling getQualityRatings.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/ratings/quality`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetQualityRatingRequestToJSON(requestParameters.getQualityRatingRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetQualityRatingResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Индекс качества магазинов
*/
export function getQualityRatings<T>(requestParameters: GetQualityRatingsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetQualityRatingResponse>): QueryConfig<T> {
    return getQualityRatingsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * Получение заданного отчета
 */
function getReportInfoRaw<T>(requestParameters: GetReportInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetReportInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.reportId === null || requestParameters.reportId === undefined) {
        throw new runtime.RequiredError('reportId','Required parameter requestParameters.reportId was null or undefined when calling getReportInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/reports/info/{reportId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters.reportId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReportInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
* Получение заданного отчета
*/
export function getReportInfo<T>(requestParameters: GetReportInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReportInfoResponse>): QueryConfig<T> {
    return getReportInfoRaw(requestParameters, requestConfig);
}

/**
 * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Информация о невыкупе или возврате
 */
function getReturnRaw<T>(requestParameters: GetReturnRequest, requestConfig: runtime.TypedQueryConfig<T, GetReturnResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturn.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturn.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturn.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReturnResponseFromJSON(body), text);
    }

    return config;
}

/**
* Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Информация о невыкупе или возврате
*/
export function getReturn<T>(requestParameters: GetReturnRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReturnResponse>): QueryConfig<T> {
    return getReturnRaw(requestParameters, requestConfig);
}

/**
 * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Получение заявления на возврат
 */
function getReturnApplicationRaw<T>(requestParameters: GetReturnApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturnApplication.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturnApplication.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Получение заявления на возврат
*/
export function getReturnApplication<T>(requestParameters: GetReturnApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return getReturnApplicationRaw(requestParameters, requestConfig);
}

/**
 * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Получение фотографии возврата
 */
function getReturnPhotoRaw<T>(requestParameters: GetReturnPhotoRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
        throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.imageHash === null || requestParameters.imageHash === undefined) {
        throw new runtime.RequiredError('imageHash','Required parameter requestParameters.imageHash was null or undefined when calling getReturnPhoto.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageHash"}}`, encodeURIComponent(String(requestParameters.imageHash))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Получение фотографии возврата
*/
export function getReturnPhoto<T>(requestParameters: GetReturnPhotoRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return getReturnPhotoRaw(requestParameters, requestConfig);
}

/**
 * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Список невыкупов и возвратов
 */
function getReturnsRaw<T>(requestParameters: GetReturnsRequest, requestConfig: runtime.TypedQueryConfig<T, GetReturnsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturns.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.orderIds) {
        queryParameters['orderIds'] = requestParameters.orderIds?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.statuses) {
        queryParameters['statuses'] = requestParameters.statuses?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.type !== undefined) {
        queryParameters['type'] = requestParameters.type;
    }


    if (requestParameters.fromDate !== undefined) {
        queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.toDate !== undefined) {
        queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.fromDate2 !== undefined) {
        queryParameters['from_date'] = (requestParameters.fromDate2 as any).toISOString().substring(0,10);
    }


    if (requestParameters.toDate2 !== undefined) {
        queryParameters['to_date'] = (requestParameters.toDate2 as any).toISOString().substring(0,10);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/returns`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReturnsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Список невыкупов и возвратов
*/
export function getReturns<T>(requestParameters: GetReturnsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReturnsResponse>): QueryConfig<T> {
    return getReturnsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации об одной отгрузке
 */
function getShipmentRaw<T>(requestParameters: GetShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, GetShipmentResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.cancelledOrders !== undefined) {
        queryParameters['cancelledOrders'] = requestParameters.cancelledOrders;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetShipmentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации об одной отгрузке
*/
export function getShipment<T>(requestParameters: GetShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, GetShipmentResponse>): QueryConfig<T> {
    return getShipmentRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации о возможности печати ярлыков (FBS)
 */
function getShipmentOrdersInfoRaw<T>(requestParameters: GetShipmentOrdersInfoRequest, requestConfig: runtime.TypedQueryConfig<T, GetShipmentOrdersInfoResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getShipmentOrdersInfo.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipmentOrdersInfo.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetShipmentOrdersInfoResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации о возможности печати ярлыков (FBS)
*/
export function getShipmentOrdersInfo<T>(requestParameters: GetShipmentOrdersInfoRequest, requestConfig?: runtime.TypedQueryConfig<T, GetShipmentOrdersInfoResponse>): QueryConfig<T> {
    return getShipmentOrdersInfoRaw(requestParameters, requestConfig);
}

/**
 * Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
 * Информация об остатках и оборачиваемости
 */
function getStocksRaw<T>(requestParameters: GetStocksRequest, requestConfig: runtime.TypedQueryConfig<T, GetWarehouseStocksResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getStocks.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers/stocks`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetWarehouseStocksRequestToJSON(requestParameters.getWarehouseStocksRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetWarehouseStocksResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
* Информация об остатках и оборачиваемости
*/
export function getStocks<T>(requestParameters: GetStocksRequest, requestConfig?: runtime.TypedQueryConfig<T, GetWarehouseStocksResponse>): QueryConfig<T> {
    return getStocksRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
 * Рекомендованные карточки для товаров
 */
function getSuggestedOfferMappingEntriesRaw<T>(requestParameters: GetSuggestedOfferMappingEntriesRequest, requestConfig: runtime.TypedQueryConfig<T, GetSuggestedOfferMappingEntriesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getSuggestedOfferMappingEntries.');
    }

    if (requestParameters.getSuggestedOfferMappingEntriesRequest === null || requestParameters.getSuggestedOfferMappingEntriesRequest === undefined) {
        throw new runtime.RequiredError('getSuggestedOfferMappingEntriesRequest','Required parameter requestParameters.getSuggestedOfferMappingEntriesRequest was null or undefined when calling getSuggestedOfferMappingEntries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-mapping-entries/suggestions`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetSuggestedOfferMappingEntriesRequestToJSON(requestParameters.getSuggestedOfferMappingEntriesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetSuggestedOfferMappingEntriesResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
* Рекомендованные карточки для товаров
*/
export function getSuggestedOfferMappingEntries<T>(requestParameters: GetSuggestedOfferMappingEntriesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetSuggestedOfferMappingEntriesResponse>): QueryConfig<T> {
    return getSuggestedOfferMappingEntriesRaw(requestParameters, requestConfig);
}

/**
 * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
 * Просмотр карточек на Маркете, которые подходят вашим товарам
 */
function getSuggestedOfferMappingsRaw<T>(requestParameters: GetSuggestedOfferMappingsRequest, requestConfig: runtime.TypedQueryConfig<T, GetSuggestedOfferMappingsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getSuggestedOfferMappings.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings/suggestions`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetSuggestedOfferMappingsRequestToJSON(requestParameters.getSuggestedOfferMappingsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetSuggestedOfferMappingsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
* Просмотр карточек на Маркете, которые подходят вашим товарам
*/
export function getSuggestedOfferMappings<T>(requestParameters: GetSuggestedOfferMappingsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetSuggestedOfferMappingsResponse>): QueryConfig<T> {
    return getSuggestedOfferMappingsRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
 * Цены для продвижения товаров
 */
function getSuggestedPricesRaw<T>(requestParameters: GetSuggestedPricesRequest, requestConfig: runtime.TypedQueryConfig<T, SuggestPricesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getSuggestedPrices.');
    }

    if (requestParameters.suggestPricesRequest === null || requestParameters.suggestPricesRequest === undefined) {
        throw new runtime.RequiredError('suggestPricesRequest','Required parameter requestParameters.suggestPricesRequest was null or undefined when calling getSuggestedPrices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-prices/suggestions`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SuggestPricesRequestToJSON(requestParameters.suggestPricesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SuggestPricesResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
* Цены для продвижения товаров
*/
export function getSuggestedPrices<T>(requestParameters: GetSuggestedPricesRequest, requestConfig?: runtime.TypedQueryConfig<T, SuggestPricesResponse>): QueryConfig<T> {
    return getSuggestedPricesRaw(requestParameters, requestConfig);
}

/**
 * Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * Список складов и групп складов
 */
function getWarehousesRaw<T>(requestParameters: GetWarehousesRequest, requestConfig: runtime.TypedQueryConfig<T, GetWarehousesResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getWarehouses.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/warehouses`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetWarehousesResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
* Список складов и групп складов
*/
export function getWarehouses<T>(requestParameters: GetWarehousesRequest, requestConfig?: runtime.TypedQueryConfig<T, GetWarehousesResponse>): QueryConfig<T> {
    return getWarehousesRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Передача кодов маркировки единиц товара
 */
function provideOrderItemIdentifiersRaw<T>(requestParameters: ProvideOrderItemIdentifiersRequest, requestConfig: runtime.TypedQueryConfig<T, ProvideOrderItemIdentifiersResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling provideOrderItemIdentifiers.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling provideOrderItemIdentifiers.');
    }

    if (requestParameters.provideOrderItemIdentifiersRequest === null || requestParameters.provideOrderItemIdentifiersRequest === undefined) {
        throw new runtime.RequiredError('provideOrderItemIdentifiersRequest','Required parameter requestParameters.provideOrderItemIdentifiersRequest was null or undefined when calling provideOrderItemIdentifiers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/identifiers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ProvideOrderItemIdentifiersRequestToJSON(requestParameters.provideOrderItemIdentifiersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProvideOrderItemIdentifiersResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Передача кодов маркировки единиц товара
*/
export function provideOrderItemIdentifiers<T>(requestParameters: ProvideOrderItemIdentifiersRequest, requestConfig?: runtime.TypedQueryConfig<T, ProvideOrderItemIdentifiersResponse>): QueryConfig<T> {
    return provideOrderItemIdentifiersRaw(requestParameters, requestConfig);
}

/**
 * Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
 * Включение буста продаж и установка ставок
 */
function putBidsForBusinessRaw<T>(requestParameters: PutBidsForBusinessRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling putBidsForBusiness.');
    }

    if (requestParameters.putSkuBidsRequest === null || requestParameters.putSkuBidsRequest === undefined) {
        throw new runtime.RequiredError('putSkuBidsRequest','Required parameter requestParameters.putSkuBidsRequest was null or undefined when calling putBidsForBusiness.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/bids`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PutSkuBidsRequestToJSON(requestParameters.putSkuBidsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
* Включение буста продаж и установка ставок
*/
export function putBidsForBusiness<T>(requestParameters: PutBidsForBusinessRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return putBidsForBusinessRaw(requestParameters, requestConfig);
}

/**
 * Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
 * Включение буста продаж и установка ставок для магазина
 */
function putBidsForCampaignRaw<T>(requestParameters: PutBidsForCampaignRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling putBidsForCampaign.');
    }

    if (requestParameters.putSkuBidsRequest === null || requestParameters.putSkuBidsRequest === undefined) {
        throw new runtime.RequiredError('putSkuBidsRequest','Required parameter requestParameters.putSkuBidsRequest was null or undefined when calling putBidsForCampaign.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/bids`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || PutSkuBidsRequestToJSON(requestParameters.putSkuBidsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
* Включение буста продаж и установка ставок для магазина
*/
export function putBidsForCampaign<T>(requestParameters: PutBidsForCampaignRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return putBidsForCampaignRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
 * Сообщить, что прайс-лист обновился
 */
function refreshFeedRaw<T>(requestParameters: RefreshFeedRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling refreshFeed.');
    }

    if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
        throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling refreshFeed.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feeds/{feedId}/refresh`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters.feedId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
* Сообщить, что прайс-лист обновился
*/
export function refreshFeed<T>(requestParameters: RefreshFeedRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return refreshFeedRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
 * Информация о дочерних регионах
 */
function searchRegionChildrenRaw<T>(requestParameters: SearchRegionChildrenRequest, requestConfig: runtime.TypedQueryConfig<T, GetRegionWithChildrenResponse> = {}): QueryConfig<T> {
    if (requestParameters.regionId === null || requestParameters.regionId === undefined) {
        throw new runtime.RequiredError('regionId','Required parameter requestParameters.regionId was null or undefined when calling searchRegionChildren.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/regions/{regionId}/children`.replace(`{${"regionId"}}`, encodeURIComponent(String(requestParameters.regionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetRegionWithChildrenResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
* Информация о дочерних регионах
*/
export function searchRegionChildren<T>(requestParameters: SearchRegionChildrenRequest, requestConfig?: runtime.TypedQueryConfig<T, GetRegionWithChildrenResponse>): QueryConfig<T> {
    return searchRegionChildrenRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
 * Информация о регионе
 */
function searchRegionsByIdRaw<T>(requestParameters: SearchRegionsByIdRequest, requestConfig: runtime.TypedQueryConfig<T, GetRegionsResponse> = {}): QueryConfig<T> {
    if (requestParameters.regionId === null || requestParameters.regionId === undefined) {
        throw new runtime.RequiredError('regionId','Required parameter requestParameters.regionId was null or undefined when calling searchRegionsById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/regions/{regionId}`.replace(`{${"regionId"}}`, encodeURIComponent(String(requestParameters.regionId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetRegionsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
* Информация о регионе
*/
export function searchRegionsById<T>(requestParameters: SearchRegionsByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, GetRegionsResponse>): QueryConfig<T> {
    return searchRegionsByIdRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
 * Поиск регионов по их имени
 */
function searchRegionsByNameRaw<T>(requestParameters: SearchRegionsByNameRequest, requestConfig: runtime.TypedQueryConfig<T, GetRegionsResponse> = {}): QueryConfig<T> {
    if (requestParameters.name === null || requestParameters.name === undefined) {
        throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchRegionsByName.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.name !== undefined) {
        queryParameters['name'] = requestParameters.name;
    }


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/regions`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetRegionsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
* Поиск регионов по их имени
*/
export function searchRegionsByName<T>(requestParameters: SearchRegionsByNameRequest, requestConfig?: runtime.TypedQueryConfig<T, GetRegionsResponse>): QueryConfig<T> {
    return searchRegionsByNameRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
 * Получение информации о нескольких отгрузках
 */
function searchShipmentsRaw<T>(requestParameters: SearchShipmentsRequest, requestConfig: runtime.TypedQueryConfig<T, SearchShipmentsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling searchShipments.');
    }

    if (requestParameters.searchShipmentsRequest === null || requestParameters.searchShipmentsRequest === undefined) {
        throw new runtime.RequiredError('searchShipmentsRequest','Required parameter requestParameters.searchShipmentsRequest was null or undefined when calling searchShipments.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SearchShipmentsRequestToJSON(requestParameters.searchShipmentsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SearchShipmentsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
* Получение информации о нескольких отгрузках
*/
export function searchShipments<T>(requestParameters: SearchShipmentsRequest, requestConfig?: runtime.TypedQueryConfig<T, SearchShipmentsResponse>): QueryConfig<T> {
    return searchShipmentsRaw(requestParameters, requestConfig);
}

/**
 * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Отправка файла в чат
 */
function sendFileToChatRaw<T>(requestParameters: SendFileToChatRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling sendFileToChat.');
    }

    if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
        throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling sendFileToChat.');
    }

    if (requestParameters.file === null || requestParameters.file === undefined) {
        throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling sendFileToChat.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.chatId !== undefined) {
        queryParameters['chatId'] = requestParameters.chatId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const formData = new FormData();
    if (requestParameters.file !== undefined) {
        formData.append('file', requestParameters.file as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/chats/file/send`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Отправка файла в чат
*/
export function sendFileToChat<T>(requestParameters: SendFileToChatRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return sendFileToChatRaw(requestParameters, requestConfig);
}

/**
 * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
 * Отправка сообщения в чат
 */
function sendMessageToChatRaw<T>(requestParameters: SendMessageToChatRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling sendMessageToChat.');
    }

    if (requestParameters.chatId === null || requestParameters.chatId === undefined) {
        throw new runtime.RequiredError('chatId','Required parameter requestParameters.chatId was null or undefined when calling sendMessageToChat.');
    }

    if (requestParameters.sendMessageToChatRequest === null || requestParameters.sendMessageToChatRequest === undefined) {
        throw new runtime.RequiredError('sendMessageToChatRequest','Required parameter requestParameters.sendMessageToChatRequest was null or undefined when calling sendMessageToChat.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.chatId !== undefined) {
        queryParameters['chatId'] = requestParameters.chatId;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/chats/message`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SendMessageToChatRequestToJSON(requestParameters.sendMessageToChatRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
* Отправка сообщения в чат
*/
export function sendMessageToChat<T>(requestParameters: SendMessageToChatRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return sendMessageToChatRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
 * Изменение параметров прайс-листа
 */
function setFeedParamsRaw<T>(requestParameters: SetFeedParamsRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setFeedParams.');
    }

    if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
        throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling setFeedParams.');
    }

    if (requestParameters.setFeedParamsRequest === null || requestParameters.setFeedParamsRequest === undefined) {
        throw new runtime.RequiredError('setFeedParamsRequest','Required parameter requestParameters.setFeedParamsRequest was null or undefined when calling setFeedParams.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/feeds/{feedId}/params`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters.feedId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SetFeedParamsRequestToJSON(requestParameters.setFeedParamsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
* Изменение параметров прайс-листа
*/
export function setFeedParams<T>(requestParameters: SetFeedParamsRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return setFeedParamsRaw(requestParameters, requestConfig);
}

/**
 * {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Подготовка заказа
 */
function setOrderBoxLayoutRaw<T>(requestParameters: SetOrderBoxLayoutRequest, requestConfig: runtime.TypedQueryConfig<T, SetOrderBoxLayoutResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setOrderBoxLayout.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderBoxLayout.');
    }

    if (requestParameters.setOrderBoxLayoutRequest === null || requestParameters.setOrderBoxLayoutRequest === undefined) {
        throw new runtime.RequiredError('setOrderBoxLayoutRequest','Required parameter requestParameters.setOrderBoxLayoutRequest was null or undefined when calling setOrderBoxLayout.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/boxes`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SetOrderBoxLayoutRequestToJSON(requestParameters.setOrderBoxLayoutRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SetOrderBoxLayoutResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Подготовка заказа
*/
export function setOrderBoxLayout<T>(requestParameters: SetOrderBoxLayoutRequest, requestConfig?: runtime.TypedQueryConfig<T, SetOrderBoxLayoutResponse>): QueryConfig<T> {
    return setOrderBoxLayoutRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Передача количества грузовых мест в заказе
 */
function setOrderShipmentBoxesRaw<T>(requestParameters: SetOrderShipmentBoxesRequest, requestConfig: runtime.TypedQueryConfig<T, SetOrderShipmentBoxesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setOrderShipmentBoxes.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderShipmentBoxes.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling setOrderShipmentBoxes.');
    }

    if (requestParameters.setOrderShipmentBoxesRequest === null || requestParameters.setOrderShipmentBoxesRequest === undefined) {
        throw new runtime.RequiredError('setOrderShipmentBoxesRequest','Required parameter requestParameters.setOrderShipmentBoxesRequest was null or undefined when calling setOrderShipmentBoxes.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SetOrderShipmentBoxesRequestToJSON(requestParameters.setOrderShipmentBoxesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SetOrderShipmentBoxesResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Передача количества грузовых мест в заказе
*/
export function setOrderShipmentBoxes<T>(requestParameters: SetOrderShipmentBoxesRequest, requestConfig?: runtime.TypedQueryConfig<T, SetOrderShipmentBoxesResponse>): QueryConfig<T> {
    return setOrderShipmentBoxesRaw(requestParameters, requestConfig);
}

/**
 * Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Передача количества упаковок в отгрузке
 */
function setShipmentPalletsCountRaw<T>(requestParameters: SetShipmentPalletsCountRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setShipmentPalletsCount.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling setShipmentPalletsCount.');
    }

    if (requestParameters.setShipmentPalletsCountRequest === null || requestParameters.setShipmentPalletsCountRequest === undefined) {
        throw new runtime.RequiredError('setShipmentPalletsCountRequest','Required parameter requestParameters.setShipmentPalletsCountRequest was null or undefined when calling setShipmentPalletsCount.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SetShipmentPalletsCountRequestToJSON(requestParameters.setShipmentPalletsCountRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
* Передача количества упаковок в отгрузке
*/
export function setShipmentPalletsCount<T>(requestParameters: SetShipmentPalletsCountRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return setShipmentPalletsCountRaw(requestParameters, requestConfig);
}

/**
 * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Отказ от ответа на отзывы
 */
function skipGoodsFeedbacksReactionRaw<T>(requestParameters: SkipGoodsFeedbacksReactionRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling skipGoodsFeedbacksReaction.');
    }

    if (requestParameters.skipGoodsFeedbackReactionRequest === null || requestParameters.skipGoodsFeedbackReactionRequest === undefined) {
        throw new runtime.RequiredError('skipGoodsFeedbackReactionRequest','Required parameter requestParameters.skipGoodsFeedbackReactionRequest was null or undefined when calling skipGoodsFeedbacksReaction.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/goods-feedback/skip-reaction`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SkipGoodsFeedbackReactionRequestToJSON(requestParameters.skipGoodsFeedbackReactionRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Отказ от ответа на отзывы
*/
export function skipGoodsFeedbacksReaction<T>(requestParameters: SkipGoodsFeedbacksReactionRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return skipGoodsFeedbacksReactionRaw(requestParameters, requestConfig);
}

/**
 * Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
 * Перенос заказов в следующую отгрузку
 */
function transferOrdersFromShipmentRaw<T>(requestParameters: TransferOrdersFromShipmentRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling transferOrdersFromShipment.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling transferOrdersFromShipment.');
    }

    if (requestParameters.transferOrdersFromShipmentRequest === null || requestParameters.transferOrdersFromShipmentRequest === undefined) {
        throw new runtime.RequiredError('transferOrdersFromShipmentRequest','Required parameter requestParameters.transferOrdersFromShipmentRequest was null or undefined when calling transferOrdersFromShipment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TransferOrdersFromShipmentRequestToJSON(requestParameters.transferOrdersFromShipmentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
* Перенос заказов в следующую отгрузку
*/
export function transferOrdersFromShipment<T>(requestParameters: TransferOrdersFromShipmentRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return transferOrdersFromShipmentRaw(requestParameters, requestConfig);
}

/**
 * Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
 * Установка цен на товары во всех магазинах
 */
function updateBusinessPricesRaw<T>(requestParameters: UpdateBusinessPricesRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateBusinessPrices.');
    }

    if (requestParameters.updateBusinessPricesRequest === null || requestParameters.updateBusinessPricesRequest === undefined) {
        throw new runtime.RequiredError('updateBusinessPricesRequest','Required parameter requestParameters.updateBusinessPricesRequest was null or undefined when calling updateBusinessPrices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-prices/updates`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateBusinessPricesRequestToJSON(requestParameters.updateBusinessPricesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
* Установка цен на товары во всех магазинах
*/
export function updateBusinessPrices<T>(requestParameters: UpdateBusinessPricesRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return updateBusinessPricesRaw(requestParameters, requestConfig);
}

/**
 * Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Изменение условий продажи товаров в магазине
 */
function updateCampaignOffersRaw<T>(requestParameters: UpdateCampaignOffersRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateCampaignOffers.');
    }

    if (requestParameters.updateCampaignOffersRequest === null || requestParameters.updateCampaignOffersRequest === undefined) {
        throw new runtime.RequiredError('updateCampaignOffersRequest','Required parameter requestParameters.updateCampaignOffersRequest was null or undefined when calling updateCampaignOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers/update`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateCampaignOffersRequestToJSON(requestParameters.updateCampaignOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Изменение условий продажи товаров в магазине
*/
export function updateCampaignOffers<T>(requestParameters: UpdateCampaignOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return updateCampaignOffersRaw(requestParameters, requestConfig);
}

/**
 * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
 * Добавление нового или изменение созданного комментария
 */
function updateGoodsFeedbackCommentRaw<T>(requestParameters: UpdateGoodsFeedbackCommentRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateGoodsFeedbackCommentResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateGoodsFeedbackComment.');
    }

    if (requestParameters.updateGoodsFeedbackCommentRequest === null || requestParameters.updateGoodsFeedbackCommentRequest === undefined) {
        throw new runtime.RequiredError('updateGoodsFeedbackCommentRequest','Required parameter requestParameters.updateGoodsFeedbackCommentRequest was null or undefined when calling updateGoodsFeedbackComment.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/goods-feedback/comments/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateGoodsFeedbackCommentRequestToJSON(requestParameters.updateGoodsFeedbackCommentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateGoodsFeedbackCommentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
* Добавление нового или изменение созданного комментария
*/
export function updateGoodsFeedbackComment<T>(requestParameters: UpdateGoodsFeedbackCommentRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateGoodsFeedbackCommentResponse>): QueryConfig<T> {
    return updateGoodsFeedbackCommentRaw(requestParameters, requestConfig);
}

/**
 * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Редактирование категорийных характеристик товара
 */
function updateOfferContentRaw<T>(requestParameters: UpdateOfferContentRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateOfferContentResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateOfferContent.');
    }

    if (requestParameters.updateOfferContentRequest === null || requestParameters.updateOfferContentRequest === undefined) {
        throw new runtime.RequiredError('updateOfferContentRequest','Required parameter requestParameters.updateOfferContentRequest was null or undefined when calling updateOfferContent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-cards/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOfferContentRequestToJSON(requestParameters.updateOfferContentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateOfferContentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Редактирование категорийных характеристик товара
*/
export function updateOfferContent<T>(requestParameters: UpdateOfferContentRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateOfferContentResponse>): QueryConfig<T> {
    return updateOfferContentRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
 * Добавление и редактирование товаров в каталоге
 */
function updateOfferMappingEntriesRaw<T>(requestParameters: UpdateOfferMappingEntriesRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateOfferMappingEntries.');
    }

    if (requestParameters.updateOfferMappingEntryRequest === null || requestParameters.updateOfferMappingEntryRequest === undefined) {
        throw new runtime.RequiredError('updateOfferMappingEntryRequest','Required parameter requestParameters.updateOfferMappingEntryRequest was null or undefined when calling updateOfferMappingEntries.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-mapping-entries/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOfferMappingEntryRequestToJSON(requestParameters.updateOfferMappingEntryRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
* Добавление и редактирование товаров в каталоге
*/
export function updateOfferMappingEntries<T>(requestParameters: UpdateOfferMappingEntriesRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return updateOfferMappingEntriesRaw(requestParameters, requestConfig);
}

/**
 * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
 * Добавление товаров в каталог и изменение информации о них
 */
function updateOfferMappingsRaw<T>(requestParameters: UpdateOfferMappingsRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateOfferMappingsResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateOfferMappings.');
    }

    if (requestParameters.updateOfferMappingsRequest === null || requestParameters.updateOfferMappingsRequest === undefined) {
        throw new runtime.RequiredError('updateOfferMappingsRequest','Required parameter requestParameters.updateOfferMappingsRequest was null or undefined when calling updateOfferMappings.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-mappings/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOfferMappingsRequestToJSON(requestParameters.updateOfferMappingsRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateOfferMappingsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
* Добавление товаров в каталог и изменение информации о них
*/
export function updateOfferMappings<T>(requestParameters: UpdateOfferMappingsRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateOfferMappingsResponse>): QueryConfig<T> {
    return updateOfferMappingsRaw(requestParameters, requestConfig);
}

/**
 * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Удаление товара из заказа или уменьшение числа единиц
 */
function updateOrderItemsRaw<T>(requestParameters: UpdateOrderItemsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateOrderItems.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderItems.');
    }

    if (requestParameters.updateOrderItemRequest === null || requestParameters.updateOrderItemRequest === undefined) {
        throw new runtime.RequiredError('updateOrderItemRequest','Required parameter requestParameters.updateOrderItemRequest was null or undefined when calling updateOrderItems.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/items`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOrderItemRequestToJSON(requestParameters.updateOrderItemRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Удаление товара из заказа или уменьшение числа единиц
*/
export function updateOrderItems<T>(requestParameters: UpdateOrderItemsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return updateOrderItemsRaw(requestParameters, requestConfig);
}

/**
 * Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Изменение статуса одного заказа
 */
function updateOrderStatusRaw<T>(requestParameters: UpdateOrderStatusRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateOrderStatusResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateOrderStatus.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderStatus.');
    }

    if (requestParameters.updateOrderStatusRequest === null || requestParameters.updateOrderStatusRequest === undefined) {
        throw new runtime.RequiredError('updateOrderStatusRequest','Required parameter requestParameters.updateOrderStatusRequest was null or undefined when calling updateOrderStatus.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/status`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOrderStatusRequestToJSON(requestParameters.updateOrderStatusRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateOrderStatusResponseFromJSON(body), text);
    }

    return config;
}

/**
* Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Изменение статуса одного заказа
*/
export function updateOrderStatus<T>(requestParameters: UpdateOrderStatusRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateOrderStatusResponse>): QueryConfig<T> {
    return updateOrderStatusRaw(requestParameters, requestConfig);
}

/**
 * Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Изменение статусов нескольких заказов
 */
function updateOrderStatusesRaw<T>(requestParameters: UpdateOrderStatusesRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateOrderStatusesResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateOrderStatuses.');
    }

    if (requestParameters.updateOrderStatusesRequest === null || requestParameters.updateOrderStatusesRequest === undefined) {
        throw new runtime.RequiredError('updateOrderStatusesRequest','Required parameter requestParameters.updateOrderStatusesRequest was null or undefined when calling updateOrderStatuses.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/status-update`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOrderStatusesRequestToJSON(requestParameters.updateOrderStatusesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateOrderStatusesResponseFromJSON(body), text);
    }

    return config;
}

/**
* Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Изменение статусов нескольких заказов
*/
export function updateOrderStatuses<T>(requestParameters: UpdateOrderStatusesRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateOrderStatusesResponse>): QueryConfig<T> {
    return updateOrderStatusesRaw(requestParameters, requestConfig);
}

/**
 * Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Установка цен на товары в конкретном магазине
 */
function updatePricesRaw<T>(requestParameters: UpdatePricesRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updatePrices.');
    }

    if (requestParameters.updatePricesRequest === null || requestParameters.updatePricesRequest === undefined) {
        throw new runtime.RequiredError('updatePricesRequest','Required parameter requestParameters.updatePricesRequest was null or undefined when calling updatePrices.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offer-prices/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdatePricesRequestToJSON(requestParameters.updatePricesRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Установка цен на товары в конкретном магазине
*/
export function updatePrices<T>(requestParameters: UpdatePricesRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return updatePricesRaw(requestParameters, requestConfig);
}

/**
 * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
 * Добавление товаров в акцию или изменение их цен
 */
function updatePromoOffersRaw<T>(requestParameters: UpdatePromoOffersRequest, requestConfig: runtime.TypedQueryConfig<T, UpdatePromoOffersResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updatePromoOffers.');
    }

    if (requestParameters.updatePromoOffersRequest === null || requestParameters.updatePromoOffersRequest === undefined) {
        throw new runtime.RequiredError('updatePromoOffersRequest','Required parameter requestParameters.updatePromoOffersRequest was null or undefined when calling updatePromoOffers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/promos/offers/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdatePromoOffersRequestToJSON(requestParameters.updatePromoOffersRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdatePromoOffersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
* Добавление товаров в акцию или изменение их цен
*/
export function updatePromoOffers<T>(requestParameters: UpdatePromoOffersRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdatePromoOffersResponse>): QueryConfig<T> {
    return updatePromoOffersRaw(requestParameters, requestConfig);
}

/**
 * Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 
 * Передача информации об остатках
 */
function updateStocksRaw<T>(requestParameters: UpdateStocksRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling updateStocks.');
    }

    if (requestParameters.updateStocksRequest === null || requestParameters.updateStocksRequest === undefined) {
        throw new runtime.RequiredError('updateStocksRequest','Required parameter requestParameters.updateStocksRequest was null or undefined when calling updateStocks.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/offers/stocks`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UpdateStocksRequestToJSON(requestParameters.updateStocksRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 
* Передача информации об остатках
*/
export function updateStocks<T>(requestParameters: UpdateStocksRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return updateStocksRaw(requestParameters, requestConfig);
}

