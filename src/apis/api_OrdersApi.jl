# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function accept_order_cancellation_read(handler)
    function accept_order_cancellation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["AcceptOrderCancellationRequest"] = OpenAPI.Servers.to_param_type(AcceptOrderCancellationRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function accept_order_cancellation_validate(handler)
    function accept_order_cancellation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function accept_order_cancellation_invoke(impl; post_invoke=nothing)
    function accept_order_cancellation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.accept_order_cancellation(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["AcceptOrderCancellationRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_order_read(handler)
    function get_order_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_order_validate(handler)
    function get_order_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_order_invoke(impl; post_invoke=nothing)
    function get_order_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_order(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_orders_read(handler)
    function get_orders_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["orderIds"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "orderIds", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(Vector{OrderStatusType}, query_params, "status", style="", is_explode=false)
        openapi_params["substatus"] = OpenAPI.Servers.to_param(Vector{OrderSubstatusType}, query_params, "substatus", style="", is_explode=false)
        openapi_params["fromDate"] = OpenAPI.Servers.to_param(Date, query_params, "fromDate", style="", is_explode=false)
        openapi_params["toDate"] = OpenAPI.Servers.to_param(Date, query_params, "toDate", style="", is_explode=false)
        openapi_params["supplierShipmentDateFrom"] = OpenAPI.Servers.to_param(Date, query_params, "supplierShipmentDateFrom", style="", is_explode=false)
        openapi_params["supplierShipmentDateTo"] = OpenAPI.Servers.to_param(Date, query_params, "supplierShipmentDateTo", style="", is_explode=false)
        openapi_params["updatedAtFrom"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "updatedAtFrom", style="", is_explode=false)
        openapi_params["updatedAtTo"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "updatedAtTo", style="", is_explode=false)
        openapi_params["dispatchType"] = OpenAPI.Servers.to_param(OrderDeliveryDispatchType, query_params, "dispatchType", style="", is_explode=false)
        openapi_params["fake"] = OpenAPI.Servers.to_param(Bool, query_params, "fake", style="", is_explode=false)
        openapi_params["hasCis"] = OpenAPI.Servers.to_param(Bool, query_params, "hasCis", style="", is_explode=false)
        openapi_params["onlyWaitingForCancellationApprove"] = OpenAPI.Servers.to_param(Bool, query_params, "onlyWaitingForCancellationApprove", style="", is_explode=false)
        openapi_params["onlyEstimatedDelivery"] = OpenAPI.Servers.to_param(Bool, query_params, "onlyEstimatedDelivery", style="", is_explode=false)
        openapi_params["buyerType"] = OpenAPI.Servers.to_param(OrderBuyerType, query_params, "buyerType", style="", is_explode=false)
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_orders_validate(handler)
    function get_orders_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        
        
        OpenAPI.validate_param("page", "get_orders", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function get_orders_invoke(impl; post_invoke=nothing)
    function get_orders_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_orders(req::HTTP.Request, openapi_params["campaignId"]; order_ids=get(openapi_params, "orderIds", nothing), status=get(openapi_params, "status", nothing), substatus=get(openapi_params, "substatus", nothing), from_date=get(openapi_params, "fromDate", nothing), to_date=get(openapi_params, "toDate", nothing), supplier_shipment_date_from=get(openapi_params, "supplierShipmentDateFrom", nothing), supplier_shipment_date_to=get(openapi_params, "supplierShipmentDateTo", nothing), updated_at_from=get(openapi_params, "updatedAtFrom", nothing), updated_at_to=get(openapi_params, "updatedAtTo", nothing), dispatch_type=get(openapi_params, "dispatchType", nothing), fake=get(openapi_params, "fake", nothing), has_cis=get(openapi_params, "hasCis", nothing), only_waiting_for_cancellation_approve=get(openapi_params, "onlyWaitingForCancellationApprove", nothing), only_estimated_delivery=get(openapi_params, "onlyEstimatedDelivery", nothing), buyer_type=get(openapi_params, "buyerType", nothing), page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing), page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function provide_order_digital_codes_read(handler)
    function provide_order_digital_codes_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["ProvideOrderDigitalCodesRequest"] = OpenAPI.Servers.to_param_type(ProvideOrderDigitalCodesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function provide_order_digital_codes_validate(handler)
    function provide_order_digital_codes_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function provide_order_digital_codes_invoke(impl; post_invoke=nothing)
    function provide_order_digital_codes_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.provide_order_digital_codes(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["ProvideOrderDigitalCodesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function provide_order_item_identifiers_read(handler)
    function provide_order_item_identifiers_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["ProvideOrderItemIdentifiersRequest"] = OpenAPI.Servers.to_param_type(ProvideOrderItemIdentifiersRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function provide_order_item_identifiers_validate(handler)
    function provide_order_item_identifiers_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function provide_order_item_identifiers_invoke(impl; post_invoke=nothing)
    function provide_order_item_identifiers_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.provide_order_item_identifiers(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["ProvideOrderItemIdentifiersRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_box_layout_read(handler)
    function set_order_box_layout_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["SetOrderBoxLayoutRequest"] = OpenAPI.Servers.to_param_type(SetOrderBoxLayoutRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_box_layout_validate(handler)
    function set_order_box_layout_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_box_layout_invoke(impl; post_invoke=nothing)
    function set_order_box_layout_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_box_layout(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["SetOrderBoxLayoutRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_order_shipment_boxes_read(handler)
    function set_order_shipment_boxes_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["shipmentId"] = OpenAPI.Servers.to_param(Int64, path_params, "shipmentId", required=true, )
        openapi_params["SetOrderShipmentBoxesRequest"] = OpenAPI.Servers.to_param_type(SetOrderShipmentBoxesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_order_shipment_boxes_validate(handler)
    function set_order_shipment_boxes_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_order_shipment_boxes_invoke(impl; post_invoke=nothing)
    function set_order_shipment_boxes_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_order_shipment_boxes(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["shipmentId"], openapi_params["SetOrderShipmentBoxesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_items_read(handler)
    function update_order_items_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["UpdateOrderItemRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderItemRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_items_validate(handler)
    function update_order_items_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_items_invoke(impl; post_invoke=nothing)
    function update_order_items_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_items(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["UpdateOrderItemRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_status_read(handler)
    function update_order_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["UpdateOrderStatusRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderStatusRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_status_validate(handler)
    function update_order_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_status_invoke(impl; post_invoke=nothing)
    function update_order_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_status(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["UpdateOrderStatusRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_order_statuses_read(handler)
    function update_order_statuses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateOrderStatusesRequest"] = OpenAPI.Servers.to_param_type(UpdateOrderStatusesRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_order_statuses_validate(handler)
    function update_order_statuses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_order_statuses_invoke(impl; post_invoke=nothing)
    function update_order_statuses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_order_statuses(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateOrderStatusesRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerOrdersApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/cancellation/accept", OpenAPI.Servers.middleware(impl, accept_order_cancellation_read, accept_order_cancellation_validate, accept_order_cancellation_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}", OpenAPI.Servers.middleware(impl, get_order_read, get_order_validate, get_order_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders", OpenAPI.Servers.middleware(impl, get_orders_read, get_orders_validate, get_orders_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods", OpenAPI.Servers.middleware(impl, provide_order_digital_codes_read, provide_order_digital_codes_validate, provide_order_digital_codes_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/identifiers", OpenAPI.Servers.middleware(impl, provide_order_item_identifiers_read, provide_order_item_identifiers_validate, provide_order_item_identifiers_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/boxes", OpenAPI.Servers.middleware(impl, set_order_box_layout_read, set_order_box_layout_validate, set_order_box_layout_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes", OpenAPI.Servers.middleware(impl, set_order_shipment_boxes_read, set_order_shipment_boxes_validate, set_order_shipment_boxes_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/items", OpenAPI.Servers.middleware(impl, update_order_items_read, update_order_items_validate, update_order_items_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/status", OpenAPI.Servers.middleware(impl, update_order_status_read, update_order_status_validate, update_order_status_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/status-update", OpenAPI.Servers.middleware(impl, update_order_statuses_read, update_order_statuses_validate, update_order_statuses_invoke; optional_middlewares...))
    return router
end
