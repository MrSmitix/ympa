# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_feed_read(handler)
    function get_feed_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feed_validate(handler)
    function get_feed_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feed_invoke(impl; post_invoke=nothing)
    function get_feed_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feed(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feed_index_logs_read(handler)
    function get_feed_index_logs_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["published_time_from"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "published_time_from", style="", is_explode=false)
        openapi_params["published_time_to"] = OpenAPI.Servers.to_param(ZonedDateTime, query_params, "published_time_to", style="", is_explode=false)
        openapi_params["status"] = OpenAPI.Servers.to_param(FeedIndexLogsStatusType, query_params, "status", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feed_index_logs_validate(handler)
    function get_feed_index_logs_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feed_index_logs_invoke(impl; post_invoke=nothing)
    function get_feed_index_logs_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feed_index_logs(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"]; limit=get(openapi_params, "limit", nothing), published_time_from=get(openapi_params, "published_time_from", nothing), published_time_to=get(openapi_params, "published_time_to", nothing), status=get(openapi_params, "status", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_feeds_read(handler)
    function get_feeds_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_feeds_validate(handler)
    function get_feeds_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_feeds_invoke(impl; post_invoke=nothing)
    function get_feeds_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_feeds(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function refresh_feed_read(handler)
    function refresh_feed_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function refresh_feed_validate(handler)
    function refresh_feed_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function refresh_feed_invoke(impl; post_invoke=nothing)
    function refresh_feed_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.refresh_feed(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_feed_params_read(handler)
    function set_feed_params_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["feedId"] = OpenAPI.Servers.to_param(Int64, path_params, "feedId", required=true, )
        openapi_params["SetFeedParamsRequest"] = OpenAPI.Servers.to_param_type(SetFeedParamsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_feed_params_validate(handler)
    function set_feed_params_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_feed_params_invoke(impl; post_invoke=nothing)
    function set_feed_params_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_feed_params(req::HTTP.Request, openapi_params["campaignId"], openapi_params["feedId"], openapi_params["SetFeedParamsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerFeedsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}", OpenAPI.Servers.middleware(impl, get_feed_read, get_feed_validate, get_feed_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/index-logs", OpenAPI.Servers.middleware(impl, get_feed_index_logs_read, get_feed_index_logs_validate, get_feed_index_logs_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/feeds", OpenAPI.Servers.middleware(impl, get_feeds_read, get_feeds_validate, get_feeds_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/refresh", OpenAPI.Servers.middleware(impl, refresh_feed_read, refresh_feed_validate, refresh_feed_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/feeds/{feedId}/params", OpenAPI.Servers.middleware(impl, set_feed_params_read, set_feed_params_validate, set_feed_params_invoke; optional_middlewares...))
    return router
end
