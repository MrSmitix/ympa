# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FeedsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FeedsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FeedsApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_feed_FeedsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feed(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feed_FeedsApi, "/campaigns/{campaignId}/feeds/{feedId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о прайс-листе

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)

Return: GetFeedResponse, OpenAPI.Clients.ApiResponse
"""
function get_feed(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feed(_api::FeedsApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feed_index_logs_FeedsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedIndexLogsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feed_index_logs(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feed_index_logs_FeedsApi, "/campaigns/{campaignId}/feeds/{feedId}/index-logs", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "published_time_from", published_time_from; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "published_time_to", published_time_to; style="", is_explode=false)  # type ZonedDateTime
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="", is_explode=false)  # type FeedIndexLogsStatusType
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Отчет по индексации прайс-листа

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)
- limit::Int64
- published_time_from::ZonedDateTime
- published_time_to::ZonedDateTime
- status::FeedIndexLogsStatusType

Return: GetFeedIndexLogsResponse, OpenAPI.Clients.ApiResponse
"""
function get_feed_index_logs(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feed_index_logs(_api, campaign_id, feed_id; limit=limit, published_time_from=published_time_from, published_time_to=published_time_to, status=status, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feed_index_logs(_api::FeedsApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; limit=nothing, published_time_from=nothing, published_time_to=nothing, status=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feed_index_logs(_api, campaign_id, feed_id; limit=limit, published_time_from=published_time_from, published_time_to=published_time_to, status=status, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feeds_FeedsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFeedsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_feeds(_api::FeedsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feeds_FeedsApi, "/campaigns/{campaignId}/feeds", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список прайс-листов магазина

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)

Return: GetFeedsResponse, OpenAPI.Clients.ApiResponse
"""
function get_feeds(_api::FeedsApi, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feeds(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feeds(_api::FeedsApi, response_stream::Channel, campaign_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_feeds(_api, campaign_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_refresh_feed_FeedsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_refresh_feed(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_refresh_feed_FeedsApi, "/campaigns/{campaignId}/feeds/{feedId}/refresh", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Сообщить, что прайс-лист обновился

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function refresh_feed(_api::FeedsApi, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_refresh_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function refresh_feed(_api::FeedsApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_refresh_feed(_api, campaign_id, feed_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_feed_params_FeedsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("423", "x"=>".") * "\$") => ApiLockedErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_set_feed_params(_api::FeedsApi, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_feed_params_FeedsApi, "/campaigns/{campaignId}/feeds/{feedId}/params", ["OAuth", ], set_feed_params_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "feedId", feed_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Изменение параметров прайс-листа

{% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 

Params:
- campaign_id::Int64 (required)
- feed_id::Int64 (required)
- set_feed_params_request::SetFeedParamsRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function set_feed_params(_api::FeedsApi, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_feed_params(_api, campaign_id, feed_id, set_feed_params_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_feed_params(_api::FeedsApi, response_stream::Channel, campaign_id::Int64, feed_id::Int64, set_feed_params_request::SetFeedParamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_feed_params(_api, campaign_id, feed_id, set_feed_params_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_feed
export get_feed_index_logs
export get_feeds
export refresh_feed
export set_feed_params
