# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct BusinessesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `BusinessesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ BusinessesApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_business_settings_BusinessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetBusinessSettingsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_business_settings(_api::BusinessesApi, business_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_business_settings_BusinessesApi, "/businesses/{businessId}/settings", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "businessId", business_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Настройки кабинета

Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 

Params:
- business_id::Int64 (required)

Return: GetBusinessSettingsResponse, OpenAPI.Clients.ApiResponse
"""
function get_business_settings(_api::BusinessesApi, business_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_business_settings(_api, business_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_business_settings(_api::BusinessesApi, response_stream::Channel, business_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_business_settings(_api, business_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_business_settings
