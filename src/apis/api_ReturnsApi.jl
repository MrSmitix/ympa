# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_return_read(handler)
    function get_return_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_validate(handler)
    function get_return_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_invoke(impl; post_invoke=nothing)
    function get_return_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_return_application_read(handler)
    function get_return_application_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_application_validate(handler)
    function get_return_application_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_application_invoke(impl; post_invoke=nothing)
    function get_return_application_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return_application(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_return_photo_read(handler)
    function get_return_photo_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        openapi_params["itemId"] = OpenAPI.Servers.to_param(Int64, path_params, "itemId", required=true, )
        openapi_params["imageHash"] = OpenAPI.Servers.to_param(String, path_params, "imageHash", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_return_photo_validate(handler)
    function get_return_photo_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_return_photo_invoke(impl; post_invoke=nothing)
    function get_return_photo_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_return_photo(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"], openapi_params["itemId"], openapi_params["imageHash"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_returns_read(handler)
    function get_returns_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["orderIds"] = OpenAPI.Servers.to_param(Vector{Int64}, query_params, "orderIds", style="", is_explode=false)
        openapi_params["statuses"] = OpenAPI.Servers.to_param(Vector{RefundStatusType}, query_params, "statuses", style="", is_explode=false)
        openapi_params["type"] = OpenAPI.Servers.to_param(ReturnType, query_params, "type", style="", is_explode=false)
        openapi_params["fromDate"] = OpenAPI.Servers.to_param(Date, query_params, "fromDate", style="", is_explode=false)
        openapi_params["toDate"] = OpenAPI.Servers.to_param(Date, query_params, "toDate", style="", is_explode=false)
        openapi_params["from_date"] = OpenAPI.Servers.to_param(Date, query_params, "from_date", style="", is_explode=false)
        openapi_params["to_date"] = OpenAPI.Servers.to_param(Date, query_params, "to_date", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_returns_validate(handler)
    function get_returns_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("orderIds", "get_returns", :maxItems, openapi_params["orderIds"], 50)
        
        return handler(req)
    end
end

function get_returns_invoke(impl; post_invoke=nothing)
    function get_returns_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_returns(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), order_ids=get(openapi_params, "orderIds", nothing), statuses=get(openapi_params, "statuses", nothing), type=get(openapi_params, "type", nothing), from_date=get(openapi_params, "fromDate", nothing), to_date=get(openapi_params, "toDate", nothing), from_date2=get(openapi_params, "from_date", nothing), to_date2=get(openapi_params, "to_date", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function set_return_decision_read(handler)
    function set_return_decision_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        openapi_params["SetReturnDecisionRequest"] = OpenAPI.Servers.to_param_type(SetReturnDecisionRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function set_return_decision_validate(handler)
    function set_return_decision_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function set_return_decision_invoke(impl; post_invoke=nothing)
    function set_return_decision_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.set_return_decision(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"], openapi_params["SetReturnDecisionRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function submit_return_decision_read(handler)
    function submit_return_decision_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["orderId"] = OpenAPI.Servers.to_param(Int64, path_params, "orderId", required=true, )
        openapi_params["returnId"] = OpenAPI.Servers.to_param(Int64, path_params, "returnId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function submit_return_decision_validate(handler)
    function submit_return_decision_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function submit_return_decision_invoke(impl; post_invoke=nothing)
    function submit_return_decision_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.submit_return_decision(req::HTTP.Request, openapi_params["campaignId"], openapi_params["orderId"], openapi_params["returnId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerReturnsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}", OpenAPI.Servers.middleware(impl, get_return_read, get_return_validate, get_return_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application", OpenAPI.Servers.middleware(impl, get_return_application_read, get_return_application_validate, get_return_application_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}", OpenAPI.Servers.middleware(impl, get_return_photo_read, get_return_photo_validate, get_return_photo_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/campaigns/{campaignId}/returns", OpenAPI.Servers.middleware(impl, get_returns_read, get_returns_validate, get_returns_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision", OpenAPI.Servers.middleware(impl, set_return_decision_read, set_return_decision_validate, set_return_decision_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit", OpenAPI.Servers.middleware(impl, submit_return_decision_read, submit_return_decision_validate, submit_return_decision_invoke; optional_middlewares...))
    return router
end
