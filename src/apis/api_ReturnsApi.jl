# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ReturnsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ReturnsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ReturnsApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_return_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetReturnResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_return(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_return_ReturnsApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Информация о невыкупе или возврате

Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)

Return: GetReturnResponse, OpenAPI.Clients.ApiResponse
"""
function get_return(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_return(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_return_application_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_return_application(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_return_application_ReturnsApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/octet-stream", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Получение заявления на возврат

Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_return_application(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return_application(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_return_application(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_return_application(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_return_photo_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_return_photo(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_return_photo_ReturnsApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "itemId", item_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "imageHash", image_hash)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/octet-stream", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Получение фотографии возврата

Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)
- item_id::Int64 (required)
- image_hash::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_return_photo(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = _oacinternal_get_return_photo(_api, campaign_id, order_id, return_id, item_id, image_hash; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_return_photo(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64, item_id::Int64, image_hash::String; _mediaType=nothing)
    _ctx = _oacinternal_get_return_photo(_api, campaign_id, order_id, return_id, item_id, image_hash; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_returns_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetReturnsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_returns(_api::ReturnsApi, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    OpenAPI.validate_param("order_ids", "get_returns", :maxItems, order_ids, 50)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_returns_ReturnsApi, "/campaigns/{campaignId}/returns", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "orderIds", order_ids; style="", is_explode=false)  # type Vector{Int64}
    OpenAPI.Clients.set_param(_ctx.query, "statuses", statuses; style="", is_explode=false)  # type Vector{RefundStatusType}
    OpenAPI.Clients.set_param(_ctx.query, "type", type; style="", is_explode=false)  # type ReturnType
    OpenAPI.Clients.set_param(_ctx.query, "fromDate", from_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "toDate", to_date; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "from_date", from_date2; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "to_date", to_date2; style="", is_explode=false)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Список невыкупов и возвратов

Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- order_ids::Vector{Int64}
- statuses::Vector{RefundStatusType}
- type::ReturnType
- from_date::Date
- to_date::Date
- from_date2::Date
- to_date2::Date

Return: GetReturnsResponse, OpenAPI.Clients.ApiResponse
"""
function get_returns(_api::ReturnsApi, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_returns(_api, campaign_id; page_token=page_token, limit=limit, order_ids=order_ids, statuses=statuses, type=type, from_date=from_date, to_date=to_date, from_date2=from_date2, to_date2=to_date2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_returns(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, order_ids=nothing, statuses=nothing, type=nothing, from_date=nothing, to_date=nothing, from_date2=nothing, to_date2=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_returns(_api, campaign_id; page_token=page_token, limit=limit, order_ids=order_ids, statuses=statuses, type=type, from_date=from_date, to_date=to_date, from_date2=from_date2, to_date2=to_date2, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_return_decision_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_set_return_decision(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64, set_return_decision_request::SetReturnDecisionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_return_decision_ReturnsApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision", ["OAuth", ], set_return_decision_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Принятие или изменение решения по возврату

Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)
- set_return_decision_request::SetReturnDecisionRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function set_return_decision(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64, set_return_decision_request::SetReturnDecisionRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_return_decision(_api, campaign_id, order_id, return_id, set_return_decision_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_return_decision(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64, set_return_decision_request::SetReturnDecisionRequest; _mediaType=nothing)
    _ctx = _oacinternal_set_return_decision(_api, campaign_id, order_id, return_id, set_return_decision_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_submit_return_decision_ReturnsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_submit_return_decision(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_submit_return_decision_ReturnsApi, "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit", ["OAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "orderId", order_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "returnId", return_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Подтверждение решения по возврату

Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 

Params:
- campaign_id::Int64 (required)
- order_id::Int64 (required)
- return_id::Int64 (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function submit_return_decision(_api::ReturnsApi, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_submit_return_decision(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function submit_return_decision(_api::ReturnsApi, response_stream::Channel, campaign_id::Int64, order_id::Int64, return_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_submit_return_decision(_api, campaign_id, order_id, return_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_return
export get_return_application
export get_return_photo
export get_returns
export set_return_decision
export submit_return_decision
