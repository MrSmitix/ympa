# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_quality_rating_details_read(handler)
    function get_quality_rating_details_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_quality_rating_details_validate(handler)
    function get_quality_rating_details_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_quality_rating_details_invoke(impl; post_invoke=nothing)
    function get_quality_rating_details_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_quality_rating_details(req::HTTP.Request, openapi_params["campaignId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_quality_ratings_read(handler)
    function get_quality_ratings_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetQualityRatingRequest"] = OpenAPI.Servers.to_param_type(GetQualityRatingRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_quality_ratings_validate(handler)
    function get_quality_ratings_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_quality_ratings_invoke(impl; post_invoke=nothing)
    function get_quality_ratings_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_quality_ratings(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetQualityRatingRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerRatingsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/ratings/quality/details", OpenAPI.Servers.middleware(impl, get_quality_rating_details_read, get_quality_rating_details_validate, get_quality_rating_details_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/ratings/quality", OpenAPI.Servers.middleware(impl, get_quality_ratings_read, get_quality_ratings_validate, get_quality_ratings_invoke; optional_middlewares...))
    return router
end
