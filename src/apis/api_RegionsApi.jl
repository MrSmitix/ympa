# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function search_region_children_read(handler)
    function search_region_children_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, path_params, "regionId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page"] = OpenAPI.Servers.to_param(Int64, query_params, "page", style="", is_explode=false)
        openapi_params["pageSize"] = OpenAPI.Servers.to_param(Int64, query_params, "pageSize", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_region_children_validate(handler)
    function search_region_children_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        OpenAPI.validate_param("page", "search_region_children", :maximum, openapi_params["page"], 10000, false)
        
        return handler(req)
    end
end

function search_region_children_invoke(impl; post_invoke=nothing)
    function search_region_children_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_region_children(req::HTTP.Request, openapi_params["regionId"]; page=get(openapi_params, "page", nothing), page_size=get(openapi_params, "pageSize", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_regions_by_id_read(handler)
    function search_regions_by_id_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["regionId"] = OpenAPI.Servers.to_param(Int64, path_params, "regionId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_regions_by_id_validate(handler)
    function search_regions_by_id_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_regions_by_id_invoke(impl; post_invoke=nothing)
    function search_regions_by_id_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_regions_by_id(req::HTTP.Request, openapi_params["regionId"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function search_regions_by_name_read(handler)
    function search_regions_by_name_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["name"] = OpenAPI.Servers.to_param(String, query_params, "name", required=true, style="", is_explode=false)
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function search_regions_by_name_validate(handler)
    function search_regions_by_name_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function search_regions_by_name_invoke(impl; post_invoke=nothing)
    function search_regions_by_name_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.search_regions_by_name(req::HTTP.Request, openapi_params["name"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerRegionsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "GET", path_prefix * "/regions/{regionId}/children", OpenAPI.Servers.middleware(impl, search_region_children_read, search_region_children_validate, search_region_children_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/regions/{regionId}", OpenAPI.Servers.middleware(impl, search_regions_by_id_read, search_regions_by_id_validate, search_regions_by_id_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/regions", OpenAPI.Servers.middleware(impl, search_regions_by_name_read, search_regions_by_name_validate, search_regions_by_name_invoke; optional_middlewares...))
    return router
end
