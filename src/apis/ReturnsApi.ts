// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    EmptyApiResponse,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetReturnResponse,
    GetReturnResponseFromJSON,
    GetReturnResponseToJSON,
    GetReturnsResponse,
    GetReturnsResponseFromJSON,
    GetReturnsResponseToJSON,
    RefundStatusType,
    RefundStatusTypeFromJSON,
    RefundStatusTypeToJSON,
    ReturnType,
    ReturnTypeFromJSON,
    ReturnTypeToJSON,
    SetReturnDecisionRequest,
    SetReturnDecisionRequestFromJSON,
    SetReturnDecisionRequestToJSON,
} from '../models';

export interface GetReturnRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnApplicationRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnPhotoRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    itemId: number;
    imageHash: string;
}

export interface GetReturnsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    orderIds?: Array<number>;
    statuses?: Array<RefundStatusType>;
    type?: ReturnType;
    fromDate?: Date;
    toDate?: Date;
    fromDate2?: Date;
    toDate2?: Date;
}

export interface SetReturnDecisionRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    setReturnDecisionRequest: SetReturnDecisionRequest;
}

export interface SubmitReturnDecisionRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}


/**
 * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Информация о невыкупе или возврате
 */
function getReturnRaw<T>(requestParameters: GetReturnRequest, requestConfig: runtime.TypedQueryConfig<T, GetReturnResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturn.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturn.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturn.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReturnResponseFromJSON(body), text);
    }

    return config;
}

/**
* Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Информация о невыкупе или возврате
*/
export function getReturn<T>(requestParameters: GetReturnRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReturnResponse>): QueryConfig<T> {
    return getReturnRaw(requestParameters, requestConfig);
}

/**
 * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Получение заявления на возврат
 */
function getReturnApplicationRaw<T>(requestParameters: GetReturnApplicationRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturnApplication.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturnApplication.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnApplication.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Получение заявления на возврат
*/
export function getReturnApplication<T>(requestParameters: GetReturnApplicationRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return getReturnApplicationRaw(requestParameters, requestConfig);
}

/**
 * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Получение фотографии возврата
 */
function getReturnPhotoRaw<T>(requestParameters: GetReturnPhotoRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
        throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getReturnPhoto.');
    }

    if (requestParameters.imageHash === null || requestParameters.imageHash === undefined) {
        throw new runtime.RequiredError('imageHash','Required parameter requestParameters.imageHash was null or undefined when calling getReturnPhoto.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageHash"}}`, encodeURIComponent(String(requestParameters.imageHash))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Получение фотографии возврата
*/
export function getReturnPhoto<T>(requestParameters: GetReturnPhotoRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return getReturnPhotoRaw(requestParameters, requestConfig);
}

/**
 * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Список невыкупов и возвратов
 */
function getReturnsRaw<T>(requestParameters: GetReturnsRequest, requestConfig: runtime.TypedQueryConfig<T, GetReturnsResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getReturns.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }


    if (requestParameters.orderIds) {
        queryParameters['orderIds'] = requestParameters.orderIds?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.statuses) {
        queryParameters['statuses'] = requestParameters.statuses?.join(runtime.COLLECTION_FORMATS["csv"]);
    }


    if (requestParameters.type !== undefined) {
        queryParameters['type'] = requestParameters.type;
    }


    if (requestParameters.fromDate !== undefined) {
        queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.toDate !== undefined) {
        queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
    }


    if (requestParameters.fromDate2 !== undefined) {
        queryParameters['from_date'] = (requestParameters.fromDate2 as any).toISOString().substring(0,10);
    }


    if (requestParameters.toDate2 !== undefined) {
        queryParameters['to_date'] = (requestParameters.toDate2 as any).toISOString().substring(0,10);
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/returns`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetReturnsResponseFromJSON(body), text);
    }

    return config;
}

/**
* Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Список невыкупов и возвратов
*/
export function getReturns<T>(requestParameters: GetReturnsRequest, requestConfig?: runtime.TypedQueryConfig<T, GetReturnsResponse>): QueryConfig<T> {
    return getReturnsRaw(requestParameters, requestConfig);
}

/**
 * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Принятие или изменение решения по возврату
 */
function setReturnDecisionRaw<T>(requestParameters: SetReturnDecisionRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling setReturnDecision.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setReturnDecision.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling setReturnDecision.');
    }

    if (requestParameters.setReturnDecisionRequest === null || requestParameters.setReturnDecisionRequest === undefined) {
        throw new runtime.RequiredError('setReturnDecisionRequest','Required parameter requestParameters.setReturnDecisionRequest was null or undefined when calling setReturnDecision.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SetReturnDecisionRequestToJSON(requestParameters.setReturnDecisionRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Принятие или изменение решения по возврату
*/
export function setReturnDecision<T>(requestParameters: SetReturnDecisionRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return setReturnDecisionRaw(requestParameters, requestConfig);
}

/**
 * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
 * Подтверждение решения по возврату
 */
function submitReturnDecisionRaw<T>(requestParameters: SubmitReturnDecisionRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyApiResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling submitReturnDecision.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling submitReturnDecision.');
    }

    if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
        throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling submitReturnDecision.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyApiResponseFromJSON(body), text);
    }

    return config;
}

/**
* Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
* Подтверждение решения по возврату
*/
export function submitReturnDecision<T>(requestParameters: SubmitReturnDecisionRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyApiResponse>): QueryConfig<T> {
    return submitReturnDecisionRaw(requestParameters, requestConfig);
}

