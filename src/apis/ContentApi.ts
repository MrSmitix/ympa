// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiLockedErrorResponse,
    ApiLockedErrorResponseFromJSON,
    ApiLockedErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    GetCategoryContentParametersResponse,
    GetCategoryContentParametersResponseFromJSON,
    GetCategoryContentParametersResponseToJSON,
    GetOfferCardsContentStatusRequest,
    GetOfferCardsContentStatusRequestFromJSON,
    GetOfferCardsContentStatusRequestToJSON,
    GetOfferCardsContentStatusResponse,
    GetOfferCardsContentStatusResponseFromJSON,
    GetOfferCardsContentStatusResponseToJSON,
    UpdateOfferContentRequest,
    UpdateOfferContentRequestFromJSON,
    UpdateOfferContentRequestToJSON,
    UpdateOfferContentResponse,
    UpdateOfferContentResponseFromJSON,
    UpdateOfferContentResponseToJSON,
} from '../models';

export interface GetCategoryContentParametersRequest {
    categoryId: number;
}

export interface GetOfferCardsContentStatusRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest;
}

export interface UpdateOfferContentRequest {
    businessId: number;
    updateOfferContentRequest: UpdateOfferContentRequest;
}


/**
 * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
 * Списки характеристик товаров по категориям
 */
function getCategoryContentParametersRaw<T>(requestParameters: GetCategoryContentParametersRequest, requestConfig: runtime.TypedQueryConfig<T, GetCategoryContentParametersResponse> = {}): QueryConfig<T> {
    if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
        throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryContentParameters.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/category/{categoryId}/parameters`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetCategoryContentParametersResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
* Списки характеристик товаров по категориям
*/
export function getCategoryContentParameters<T>(requestParameters: GetCategoryContentParametersRequest, requestConfig?: runtime.TypedQueryConfig<T, GetCategoryContentParametersResponse>): QueryConfig<T> {
    return getCategoryContentParametersRaw(requestParameters, requestConfig);
}

/**
 * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
 * Получение информации о заполненности карточек магазина
 */
function getOfferCardsContentStatusRaw<T>(requestParameters: GetOfferCardsContentStatusRequest, requestConfig: runtime.TypedQueryConfig<T, GetOfferCardsContentStatusResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling getOfferCardsContentStatus.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pageToken !== undefined) {
        queryParameters['page_token'] = requestParameters.pageToken;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-cards`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || GetOfferCardsContentStatusRequestToJSON(requestParameters.getOfferCardsContentStatusRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOfferCardsContentStatusResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
* Получение информации о заполненности карточек магазина
*/
export function getOfferCardsContentStatus<T>(requestParameters: GetOfferCardsContentStatusRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOfferCardsContentStatusResponse>): QueryConfig<T> {
    return getOfferCardsContentStatusRaw(requestParameters, requestConfig);
}

/**
 * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
 * Редактирование категорийных характеристик товара
 */
function updateOfferContentRaw<T>(requestParameters: UpdateOfferContentRequest, requestConfig: runtime.TypedQueryConfig<T, UpdateOfferContentResponse> = {}): QueryConfig<T> {
    if (requestParameters.businessId === null || requestParameters.businessId === undefined) {
        throw new runtime.RequiredError('businessId','Required parameter requestParameters.businessId was null or undefined when calling updateOfferContent.');
    }

    if (requestParameters.updateOfferContentRequest === null || requestParameters.updateOfferContentRequest === undefined) {
        throw new runtime.RequiredError('updateOfferContentRequest','Required parameter requestParameters.updateOfferContentRequest was null or undefined when calling updateOfferContent.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/businesses/{businessId}/offer-cards/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters.businessId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UpdateOfferContentRequestToJSON(requestParameters.updateOfferContentRequest),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UpdateOfferContentResponseFromJSON(body), text);
    }

    return config;
}

/**
* Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
* Редактирование категорийных характеристик товара
*/
export function updateOfferContent<T>(requestParameters: UpdateOfferContentRequest, requestConfig?: runtime.TypedQueryConfig<T, UpdateOfferContentResponse>): QueryConfig<T> {
    return updateOfferContentRaw(requestParameters, requestConfig);
}

