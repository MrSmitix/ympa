# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_bids_info_for_business_read(handler)
    function get_bids_info_for_business_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetBidsInfoRequest"] = OpenAPI.Servers.to_param_type(GetBidsInfoRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_bids_info_for_business_validate(handler)
    function get_bids_info_for_business_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_bids_info_for_business_invoke(impl; post_invoke=nothing)
    function get_bids_info_for_business_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_bids_info_for_business(req::HTTP.Request, openapi_params["businessId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_bids_info_request=get(openapi_params, "GetBidsInfoRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_bids_recommendations_read(handler)
    function get_bids_recommendations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["GetBidsRecommendationsRequest"] = OpenAPI.Servers.to_param_type(GetBidsRecommendationsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_bids_recommendations_validate(handler)
    function get_bids_recommendations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_bids_recommendations_invoke(impl; post_invoke=nothing)
    function get_bids_recommendations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_bids_recommendations(req::HTTP.Request, openapi_params["businessId"], openapi_params["GetBidsRecommendationsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function put_bids_for_business_read(handler)
    function put_bids_for_business_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["businessId"] = OpenAPI.Servers.to_param(Int64, path_params, "businessId", required=true, )
        openapi_params["PutSkuBidsRequest"] = OpenAPI.Servers.to_param_type(PutSkuBidsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function put_bids_for_business_validate(handler)
    function put_bids_for_business_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function put_bids_for_business_invoke(impl; post_invoke=nothing)
    function put_bids_for_business_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.put_bids_for_business(req::HTTP.Request, openapi_params["businessId"], openapi_params["PutSkuBidsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function put_bids_for_campaign_read(handler)
    function put_bids_for_campaign_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["PutSkuBidsRequest"] = OpenAPI.Servers.to_param_type(PutSkuBidsRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function put_bids_for_campaign_validate(handler)
    function put_bids_for_campaign_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function put_bids_for_campaign_invoke(impl; post_invoke=nothing)
    function put_bids_for_campaign_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.put_bids_for_campaign(req::HTTP.Request, openapi_params["campaignId"], openapi_params["PutSkuBidsRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerBidsApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/bids/info", OpenAPI.Servers.middleware(impl, get_bids_info_for_business_read, get_bids_info_for_business_validate, get_bids_info_for_business_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/businesses/{businessId}/bids/recommendations", OpenAPI.Servers.middleware(impl, get_bids_recommendations_read, get_bids_recommendations_validate, get_bids_recommendations_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/businesses/{businessId}/bids", OpenAPI.Servers.middleware(impl, put_bids_for_business_read, put_bids_for_business_validate, put_bids_for_business_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/bids", OpenAPI.Servers.middleware(impl, put_bids_for_campaign_read, put_bids_for_campaign_validate, put_bids_for_campaign_invoke; optional_middlewares...))
    return router
end
