# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function get_stocks_read(handler)
    function get_stocks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["page_token"] = OpenAPI.Servers.to_param(String, query_params, "page_token", style="", is_explode=false)
        openapi_params["limit"] = OpenAPI.Servers.to_param(Int64, query_params, "limit", style="", is_explode=false)
        openapi_params["GetWarehouseStocksRequest"] = OpenAPI.Servers.to_param_type(GetWarehouseStocksRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_stocks_validate(handler)
    function get_stocks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_stocks_invoke(impl; post_invoke=nothing)
    function get_stocks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_stocks(req::HTTP.Request, openapi_params["campaignId"]; page_token=get(openapi_params, "page_token", nothing), limit=get(openapi_params, "limit", nothing), get_warehouse_stocks_request=get(openapi_params, "GetWarehouseStocksRequest", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function update_stocks_read(handler)
    function update_stocks_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["campaignId"] = OpenAPI.Servers.to_param(Int64, path_params, "campaignId", required=true, )
        openapi_params["UpdateStocksRequest"] = OpenAPI.Servers.to_param_type(UpdateStocksRequest, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function update_stocks_validate(handler)
    function update_stocks_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function update_stocks_invoke(impl; post_invoke=nothing)
    function update_stocks_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.update_stocks(req::HTTP.Request, openapi_params["campaignId"], openapi_params["UpdateStocksRequest"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerStocksApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/campaigns/{campaignId}/offers/stocks", OpenAPI.Servers.middleware(impl, get_stocks_read, get_stocks_validate, get_stocks_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/campaigns/{campaignId}/offers/stocks", OpenAPI.Servers.middleware(impl, update_stocks_read, update_stocks_validate, update_stocks_invoke; optional_middlewares...))
    return router
end
