# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct StocksApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `StocksApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ StocksApi }) = "https://api.partner.market.yandex.ru"

const _returntypes_get_stocks_StocksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetWarehouseStocksResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_get_stocks(_api::StocksApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_stocks_StocksApi, "/campaigns/{campaignId}/offers/stocks", ["OAuth", ], get_warehouse_stocks_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_token", page_token; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Информация об остатках и оборачиваемости

Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 

Params:
- campaign_id::Int64 (required)
- page_token::String
- limit::Int64
- get_warehouse_stocks_request::GetWarehouseStocksRequest

Return: GetWarehouseStocksResponse, OpenAPI.Clients.ApiResponse
"""
function get_stocks(_api::StocksApi, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_stocks(_api, campaign_id; page_token=page_token, limit=limit, get_warehouse_stocks_request=get_warehouse_stocks_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_stocks(_api::StocksApi, response_stream::Channel, campaign_id::Int64; page_token=nothing, limit=nothing, get_warehouse_stocks_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_stocks(_api, campaign_id; page_token=page_token, limit=limit, get_warehouse_stocks_request=get_warehouse_stocks_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_stocks_StocksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EmptyApiResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => ApiClientDataErrorResponse,
    Regex("^" * replace("401", "x"=>".") * "\$") => ApiUnauthorizedErrorResponse,
    Regex("^" * replace("403", "x"=>".") * "\$") => ApiForbiddenErrorResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => ApiNotFoundErrorResponse,
    Regex("^" * replace("420", "x"=>".") * "\$") => ApiLimitErrorResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => ApiServerErrorResponse,
)

function _oacinternal_update_stocks(_api::StocksApi, campaign_id::Int64, update_stocks_request::UpdateStocksRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_stocks_StocksApi, "/campaigns/{campaignId}/offers/stocks", ["OAuth", ], update_stocks_request)
    OpenAPI.Clients.set_param(_ctx.path, "campaignId", campaign_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Передача информации об остатках

Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 

Params:
- campaign_id::Int64 (required)
- update_stocks_request::UpdateStocksRequest (required)

Return: EmptyApiResponse, OpenAPI.Clients.ApiResponse
"""
function update_stocks(_api::StocksApi, campaign_id::Int64, update_stocks_request::UpdateStocksRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_stocks(_api, campaign_id, update_stocks_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_stocks(_api::StocksApi, response_stream::Channel, campaign_id::Int64, update_stocks_request::UpdateStocksRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_stocks(_api, campaign_id, update_stocks_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_stocks
export update_stocks
