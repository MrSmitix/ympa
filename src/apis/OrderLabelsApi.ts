// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    ApiClientDataErrorResponse,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponse,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponse,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponse,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponse,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponse,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    GetOrderLabelsDataResponse,
    GetOrderLabelsDataResponseFromJSON,
    GetOrderLabelsDataResponseToJSON,
    PageFormatType,
    PageFormatTypeFromJSON,
    PageFormatTypeToJSON,
} from '../models';

export interface GenerateOrderLabelRequest {
    campaignId: number;
    orderId: number;
    shipmentId: number;
    boxId: number;
    format?: PageFormatType;
}

export interface GenerateOrderLabelsRequest {
    campaignId: number;
    orderId: number;
    format?: PageFormatType;
}

export interface GetOrderLabelsDataRequest {
    campaignId: number;
    orderId: number;
}


/**
 * Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Готовый ярлык‑наклейка для коробки в заказе
 */
function generateOrderLabelRaw<T>(requestParameters: GenerateOrderLabelRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
        throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling generateOrderLabel.');
    }

    if (requestParameters.boxId === null || requestParameters.boxId === undefined) {
        throw new runtime.RequiredError('boxId','Required parameter requestParameters.boxId was null or undefined when calling generateOrderLabel.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))).replace(`{${"boxId"}}`, encodeURIComponent(String(requestParameters.boxId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Формирует ярлык‑наклейку для коробки в заказе и возвращает ярлык в PDF‑файле.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Готовый ярлык‑наклейка для коробки в заказе
*/
export function generateOrderLabel<T>(requestParameters: GenerateOrderLabelRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return generateOrderLabelRaw(requestParameters, requestConfig);
}

/**
 * Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Готовые ярлыки‑наклейки на все коробки в одном заказе
 */
function generateOrderLabelsRaw<T>(requestParameters: GenerateOrderLabelsRequest, requestConfig: runtime.TypedQueryConfig<T, Blob> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling generateOrderLabels.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateOrderLabels.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.format !== undefined) {
        queryParameters['format'] = requestParameters.format;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/labels`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Возвращает PDF-файл с ярлыками, которые нужно наклеить на коробки перед отгрузкой. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  На вход нужно передать идентификатор заказа и один необязательный параметр, который управляет версткой PDF-файла.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Готовые ярлыки‑наклейки на все коробки в одном заказе
*/
export function generateOrderLabels<T>(requestParameters: GenerateOrderLabelsRequest, requestConfig?: runtime.TypedQueryConfig<T, Blob>): QueryConfig<T> {
    return generateOrderLabelsRaw(requestParameters, requestConfig);
}

/**
 * Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * Данные для самостоятельного изготовления ярлыков
 */
function getOrderLabelsDataRaw<T>(requestParameters: GetOrderLabelsDataRequest, requestConfig: runtime.TypedQueryConfig<T, GetOrderLabelsDataResponse> = {}): QueryConfig<T> {
    if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
        throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling getOrderLabelsData.');
    }

    if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
        throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderLabelsData.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['oauth', ["market:partner-api"]];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GetOrderLabelsDataResponseFromJSON(body), text);
    }

    return config;
}

/**
* Возвращает информацию на ярлыках, которые клеятся на коробки в заказе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
* Данные для самостоятельного изготовления ярлыков
*/
export function getOrderLabelsData<T>(requestParameters: GetOrderLabelsDataRequest, requestConfig?: runtime.TypedQueryConfig<T, GetOrderLabelsDataResponse>): QueryConfig<T> {
    return getOrderLabelsDataRaw(requestParameters, requestConfig);
}

